
build/maple_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000f0  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000175c  080000f0  080000f0  000080f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000001c0  20000000  0800184c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000044  200001c0  08001a0c  000101c0  2**2
                  ALLOC
  4 .bss.bIntPackSOF 00000001  20000204  08001a50  000101c0  2**0
                  ALLOC
  5 .bss.bDeviceState 00000004  20000208  08001a54  000101c0  2**2
                  ALLOC
  6 .bss.recvBuffer 00000800  2000020c  08001a58  000101c0  2**2
                  ALLOC
  7 .bss.uploadBlockLen 00000002  20000a0c  08002258  000101c0  2**1
                  ALLOC
  8 .bss.thisBlockLen 00000002  20000a0e  0800225a  000101c0  2**1
                  ALLOC
  9 .bss.userFirmwareLen 00000004  20000a10  0800225c  000101c0  2**2
                  ALLOC
 10 .bss.userUploadType 00000001  20000a14  08002260  000101c0  2**0
                  ALLOC
 11 .bss.dfuAppStatus 00000006  20000a15  08002261  000101c0  2**0
                  ALLOC
 12 .bss.dfuBusy  00000001  20000a1b  08002267  000101c0  2**0
                  ALLOC
 13 .bss.Data_Mul_MaxPacketSize 00000001  20000a1c  08002268  000101c0  2**0
                  ALLOC
 14 ._usrstack    00000103  20000a1d  08002269  000101c0  2**0
                  ALLOC
 15 .comment      00000080  00000000  00000000  000101c0  2**0
                  CONTENTS, READONLY
 16 .ARM.attributes 0000002f  00000000  00000000  00010240  2**0
                  CONTENTS, READONLY
 17 .debug_aranges 000005e8  00000000  00000000  00010270  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_info   000045ad  00000000  00000000  00010858  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 0000147b  00000000  00000000  00014e05  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0000148b  00000000  00000000  00016280  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  00000c70  00000000  00000000  0001770c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    000017f9  00000000  00000000  0001837c  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0000202e  00000000  00000000  00019b75  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_ranges 00000618  00000000  00000000  0001bba8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20005000 	andcs	r5, r0, r0
 8000004:	080000f1 	stmdaeq	r0, {r0, r4, r5, r6, r7}
 8000008:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800000c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000010:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000014:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000018:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
	...
 800002c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000030:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800003c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000040:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000044:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000048:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800004c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000050:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000054:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000058:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800005c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000060:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000064:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000068:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800006c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000070:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000074:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000078:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800007c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000080:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000084:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000088:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800008c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000090:	080004f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, sl}
 8000094:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000098:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800009c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000a0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000a4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000a8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000ac:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000b0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000b4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000b8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000bc:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000c0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000c4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000c8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000cc:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000d0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000d4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000d8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000dc:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000e0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000e4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000e8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000ec:	f108f85f 			; <UNDEFINED> instruction: 0xf108f85f

Disassembly of section .text:

080000f0 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80000f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80000f2:	f000 b804 	b.w	80000fe <LoopCopyDataInit>

080000f6 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80000f6:	4b0b      	ldr	r3, [pc, #44]	; (8000124 <LoopFillZerobss+0xe>)
	ldr	r3, [r3, r1]
 80000f8:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80000fa:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80000fc:	3104      	adds	r1, #4

080000fe <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80000fe:	480a      	ldr	r0, [pc, #40]	; (8000128 <LoopFillZerobss+0x12>)
	ldr	r3, =_edata
 8000100:	4b0a      	ldr	r3, [pc, #40]	; (800012c <LoopFillZerobss+0x16>)
	adds	r2, r0, r1
 8000102:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000104:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000106:	f4ff aff6 	bcc.w	80000f6 <CopyDataInit>
	ldr	r2, =_sbss
 800010a:	4a09      	ldr	r2, [pc, #36]	; (8000130 <LoopFillZerobss+0x1a>)
	b	LoopFillZerobss
 800010c:	f000 b803 	b.w	8000116 <LoopFillZerobss>

08000110 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000110:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000112:	f842 3b04 	str.w	r3, [r2], #4

08000116 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000116:	4b07      	ldr	r3, [pc, #28]	; (8000134 <LoopFillZerobss+0x1e>)
	cmp	r2, r3
 8000118:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800011a:	f4ff aff9 	bcc.w	8000110 <FillZerobss>
/* Call the application's entry point.*/
	bl	main
 800011e:	f000 fa45 	bl	80005ac <main>
	bx	lr
 8000122:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000124:	0800184c 	stmdaeq	r0, {r2, r3, r6, fp, ip}
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000128:	20000000 	andcs	r0, r0, r0
	ldr	r3, =_edata
 800012c:	200001c0 	andcs	r0, r0, r0, asr #3
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000130:	200001c0 	andcs	r0, r0, r0, asr #3
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000134:	20000204 	andcs	r0, r0, r4, lsl #4

08000138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000138:	f7ff bffe 	b.w	8000138 <ADC1_2_IRQHandler>

0800013c <nothingProc>:
    volatile RESUME_STATE eState;
    volatile u8 bESOFcnt;
} ResumeS;

/* dummy proc */
void nothingProc(void) {
 800013c:	4770      	bx	lr

0800013e <usbStatusIn>:

    bDeviceState = ATTACHED;
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
}

void usbStatusIn(void) {
 800013e:	4770      	bx	lr

08000140 <usbStatusOut>:
}

void usbStatusOut(void) {
 8000140:	4770      	bx	lr

08000142 <usbGetInterfaceSetting>:
}

RESULT usbGetInterfaceSetting(u8 interface, u8 altSetting) {
    /* alt setting 0 -> program RAM, alt setting 1 -> FLASH */
    if (interface > NUM_ALT_SETTINGS) {
        return USB_UNSUPPORT;
 8000142:	2803      	cmp	r0, #3
    } else {
        return USB_SUCCESS;
    }
}
 8000144:	bf8c      	ite	hi
 8000146:	2002      	movhi	r0, #2
 8000148:	2000      	movls	r0, #0
 800014a:	4770      	bx	lr

0800014c <usbGetConfiguration>:
 * These are the USER STANDARD REQUESTS, they are handled
 * in the core but we are given these callbacks at the
 * application level
 *******************************************/

void usbGetConfiguration(void) {
 800014c:	4770      	bx	lr
	...

08000150 <usbSetConfiguration>:
    /* nothing process */
}

void usbSetConfiguration(void) {
    if (pInformation->Current_Configuration != 0) {
 8000150:	4b03      	ldr	r3, [pc, #12]	; (8000160 <usbSetConfiguration+0x10>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	7a9b      	ldrb	r3, [r3, #10]
 8000156:	b113      	cbz	r3, 800015e <usbSetConfiguration+0xe>
        bDeviceState = CONFIGURED;
 8000158:	4b02      	ldr	r3, [pc, #8]	; (8000164 <usbSetConfiguration+0x14>)
 800015a:	2205      	movs	r2, #5
 800015c:	601a      	str	r2, [r3, #0]
 800015e:	4770      	bx	lr
 8000160:	200001fc 	strdcs	r0, [r0], -ip
 8000164:	20000208 	andcs	r0, r0, r8, lsl #4

08000168 <usbGetInterface>:
    }
}

void usbGetInterface(void) {
 8000168:	4770      	bx	lr

0800016a <usbSetInterface>:
    /* nothing process */
}

void usbSetInterface(void) {
 800016a:	4770      	bx	lr

0800016c <usbGetStatus>:
    /* nothing process */
}

void usbGetStatus(void) {
 800016c:	4770      	bx	lr

0800016e <usbClearFeature>:
    /* nothing process */
}

void usbClearFeature(void) {
 800016e:	4770      	bx	lr

08000170 <usbSetEndpointFeature>:
    /* nothing process */
}

void usbSetEndpointFeature(void) {
 8000170:	4770      	bx	lr

08000172 <usbSetDeviceFeature>:
    /* nothing process */
}

void usbSetDeviceFeature(void) {
 8000172:	4770      	bx	lr

08000174 <usbSetDeviceAddress>:
    /* nothing process */
}

void usbSetDeviceAddress(void) {
    bDeviceState = ADDRESSED;
 8000174:	4b01      	ldr	r3, [pc, #4]	; (800017c <usbSetDeviceAddress+0x8>)
 8000176:	2204      	movs	r2, #4
 8000178:	601a      	str	r2, [r3, #0]
 800017a:	4770      	bx	lr
 800017c:	20000208 	andcs	r0, r0, r8, lsl #4

08000180 <usbReset>:

    usbEnbISR(); /* configure the cortex M3 private peripheral NVIC */
    bDeviceState = UNCONNECTED;
}

void usbReset(void) {
 8000180:	b510      	push	{r4, lr}
    dfuUpdateByReset();
 8000182:	f000 fc25 	bl	80009d0 <dfuUpdateByReset>

    pInformation->Current_Configuration = 0;
 8000186:	4b21      	ldr	r3, [pc, #132]	; (800020c <usbReset+0x8c>)
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000188:	4a21      	ldr	r2, [pc, #132]	; (8000210 <usbReset+0x90>)
}

void usbReset(void) {
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2400      	movs	r4, #0
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 800018e:	6812      	ldr	r2, [r2, #0]
}

void usbReset(void) {
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 8000190:	729c      	strb	r4, [r3, #10]
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000192:	79d2      	ldrb	r2, [r2, #7]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);

    Clear_Status_Out(ENDP0);
 8000194:	4620      	mov	r0, r4

void usbReset(void) {
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000196:	725a      	strb	r2, [r3, #9]

    _SetBTABLE(BTABLE_ADDRESS);
 8000198:	4a1e      	ldr	r2, [pc, #120]	; (8000214 <usbReset+0x94>)

    /* setup the ctrl endpoint */
    _SetEPType(ENDP0, EP_CONTROL);
 800019a:	4b1f      	ldr	r3, [pc, #124]	; (8000218 <usbReset+0x98>)
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];

    _SetBTABLE(BTABLE_ADDRESS);
 800019c:	6014      	str	r4, [r2, #0]

    /* setup the ctrl endpoint */
    _SetEPType(ENDP0, EP_CONTROL);
 800019e:	6819      	ldr	r1, [r3, #0]
 80001a0:	f421 41ec 	bic.w	r1, r1, #30208	; 0x7600
 80001a4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80001a8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80001ac:	b289      	uxth	r1, r1
 80001ae:	6019      	str	r1, [r3, #0]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);
 80001b0:	6819      	ldr	r1, [r3, #0]
 80001b2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80001b6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80001ba:	b289      	uxth	r1, r1
 80001bc:	f081 0110 	eor.w	r1, r1, #16
 80001c0:	6019      	str	r1, [r3, #0]

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 80001c2:	6811      	ldr	r1, [r2, #0]
 80001c4:	4b15      	ldr	r3, [pc, #84]	; (800021c <usbReset+0x9c>)
 80001c6:	b289      	uxth	r1, r1
 80001c8:	440b      	add	r3, r1
 80001ca:	005b      	lsls	r3, r3, #1
 80001cc:	2140      	movs	r1, #64	; 0x40
 80001ce:	6019      	str	r1, [r3, #0]
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 80001d0:	6813      	ldr	r3, [r2, #0]
 80001d2:	2280      	movs	r2, #128	; 0x80
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80001da:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80001de:	005b      	lsls	r3, r3, #1
 80001e0:	601a      	str	r2, [r3, #0]

    Clear_Status_Out(ENDP0);
 80001e2:	f000 fdc5 	bl	8000d70 <Clear_Status_Out>

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
 80001e6:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <usbReset+0xa0>)
 80001e8:	4620      	mov	r0, r4
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80001f0:	f000 fe16 	bl	8000e20 <SetEPRxCount>
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);
 80001f4:	4620      	mov	r0, r4
 80001f6:	f000 fdac 	bl	8000d52 <SetEPRxValid>

    bDeviceState = ATTACHED;
 80001fa:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <usbReset+0xa4>)
 80001fc:	2201      	movs	r2, #1
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 80001fe:	4620      	mov	r0, r4
}
 8000200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);

    bDeviceState = ATTACHED;
 8000204:	601a      	str	r2, [r3, #0]
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 8000206:	f001 baad 	b.w	8001764 <SetDeviceAddress>
 800020a:	bf00      	nop
 800020c:	200001fc 	strdcs	r0, [r0], -ip
 8000210:	200001b0 			; <UNDEFINED> instruction: 0x200001b0
 8000214:	40005c50 	andmi	r5, r0, r0, asr ip
 8000218:	40005c00 	andmi	r5, r0, r0, lsl #24
 800021c:	20003004 	andcs	r3, r0, r4
 8000220:	200001d4 	ldrdcs	r0, [r0], -r4
 8000224:	20000208 	andcs	r0, r0, r8, lsl #4

08000228 <usbDataSetup>:
}

void usbStatusOut(void) {
}

RESULT usbDataSetup(u8 request) {
 8000228:	b538      	push	{r3, r4, r5, lr}
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    /* handle dfu class requests */
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 800022a:	4b12      	ldr	r3, [pc, #72]	; (8000274 <usbDataSetup+0x4c>)
}

void usbStatusOut(void) {
}

RESULT usbDataSetup(u8 request) {
 800022c:	4605      	mov	r5, r0
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    /* handle dfu class requests */
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	461c      	mov	r4, r3
 8000232:	7812      	ldrb	r2, [r2, #0]
 8000234:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000238:	2a21      	cmp	r2, #33	; 0x21
 800023a:	d119      	bne.n	8000270 <usbDataSetup+0x48>
        if (dfuUpdateByRequest()) {
 800023c:	f000 fc5e 	bl	8000afc <dfuUpdateByRequest>
 8000240:	b1b0      	cbz	r0, 8000270 <usbDataSetup+0x48>
            /* successfull state transition, handle the request */
            switch (request) {
 8000242:	1e68      	subs	r0, r5, #1
 8000244:	2804      	cmp	r0, #4
 8000246:	d813      	bhi.n	8000270 <usbDataSetup+0x48>
 8000248:	e8df f000 	tbb	[pc, r0]
 800024c:	12070503 	andne	r0, r7, #12582912	; 0xc00000
 8000250:	4b090009 	blmi	824027c <_etext+0x23ea30>
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
                break;
            case(DFU_DNLOAD):
                CopyRoutine = dfuCopyDNLOAD;
                break;
 8000254:	e004      	b.n	8000260 <usbDataSetup+0x38>
            case(DFU_UPLOAD):
                CopyRoutine = dfuCopyUPLOAD;
 8000256:	4b09      	ldr	r3, [pc, #36]	; (800027c <usbDataSetup+0x54>)
                break;
 8000258:	e002      	b.n	8000260 <usbDataSetup+0x38>
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
        if (dfuUpdateByRequest()) {
            /* successfull state transition, handle the request */
            switch (request) {
            case(DFU_GETSTATUS):
                CopyRoutine = dfuCopyStatus;
 800025a:	4b09      	ldr	r3, [pc, #36]	; (8000280 <usbDataSetup+0x58>)
 800025c:	e000      	b.n	8000260 <usbDataSetup+0x38>
                break;
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <usbDataSetup+0x5c>)
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000260:	6822      	ldr	r2, [r4, #0]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000262:	2400      	movs	r4, #0
        (*CopyRoutine)(0);
 8000264:	4620      	mov	r0, r4
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000266:	6193      	str	r3, [r2, #24]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000268:	8254      	strh	r4, [r2, #18]
        (*CopyRoutine)(0);
 800026a:	4798      	blx	r3

        return USB_SUCCESS;
 800026c:	4620      	mov	r0, r4
 800026e:	bd38      	pop	{r3, r4, r5, pc}
    }

    return USB_UNSUPPORT;
 8000270:	2002      	movs	r0, #2
}
 8000272:	bd38      	pop	{r3, r4, r5, pc}
 8000274:	200001fc 	strdcs	r0, [r0], -ip
 8000278:	08000a45 	stmdaeq	r0, {r0, r2, r6, r9, fp}
 800027c:	08000a6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, fp}
 8000280:	08000a2d 	stmdaeq	r0, {r0, r2, r3, r5, r9, fp}
 8000284:	08000a15 	stmdaeq	r0, {r0, r2, r4, r9, fp}

08000288 <usbGetDeviceDescriptor>:
        return USB_SUCCESS;
    }
}

u8 *usbGetDeviceDescriptor(u16 len) {
    return Standard_GetDescriptorData(len, &usbDeviceDescriptorDFU);
 8000288:	4901      	ldr	r1, [pc, #4]	; (8000290 <usbGetDeviceDescriptor+0x8>)
 800028a:	f001 b86b 	b.w	8001364 <Standard_GetDescriptorData>
 800028e:	bf00      	nop
 8000290:	20000140 	andcs	r0, r0, r0, asr #2

08000294 <usbGetConfigDescriptor>:
}

u8 *usbGetConfigDescriptor(u16 len) {
    return Standard_GetDescriptorData(len, &usbConfigDescriptorDFU);
 8000294:	4901      	ldr	r1, [pc, #4]	; (800029c <usbGetConfigDescriptor+0x8>)
 8000296:	f001 b865 	b.w	8001364 <Standard_GetDescriptorData>
 800029a:	bf00      	nop
 800029c:	200001b0 			; <UNDEFINED> instruction: 0x200001b0

080002a0 <usbGetStringDescriptor>:
}

u8 *usbGetStringDescriptor(u16 len) {
    u8 strIndex = pInformation->USBwValue0;
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <usbGetStringDescriptor+0x18>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	789b      	ldrb	r3, [r3, #2]
    if (strIndex > STR_DESC_LEN) {
 80002a6:	2b07      	cmp	r3, #7
 80002a8:	d804      	bhi.n	80002b4 <usbGetStringDescriptor+0x14>
        return NULL;
    } else {
        return Standard_GetDescriptorData(len, &usbStringDescriptor[strIndex]);
 80002aa:	4904      	ldr	r1, [pc, #16]	; (80002bc <usbGetStringDescriptor+0x1c>)
 80002ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80002b0:	f001 b858 	b.w	8001364 <Standard_GetDescriptorData>
    }
}
 80002b4:	2000      	movs	r0, #0
 80002b6:	4770      	bx	lr
 80002b8:	200001fc 	strdcs	r0, [r0], -ip
 80002bc:	20000094 	mulcs	r0, r4, r0

080002c0 <usbGetFunctionalDescriptor>:

u8 *usbGetFunctionalDescriptor(u16 len) {
    return Standard_GetDescriptorData(len, &usbFunctionalDescriptor);
 80002c0:	4901      	ldr	r1, [pc, #4]	; (80002c8 <usbGetFunctionalDescriptor+0x8>)
 80002c2:	f001 b84f 	b.w	8001364 <Standard_GetDescriptorData>
 80002c6:	bf00      	nop
 80002c8:	200000e0 	andcs	r0, r0, r0, ror #1

080002cc <usbNoDataSetup>:
    }

    return USB_UNSUPPORT;
}

RESULT usbNoDataSetup(u8 request) {
 80002cc:	b508      	push	{r3, lr}
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 80002ce:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <usbNoDataSetup+0x24>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002d8:	2b21      	cmp	r3, #33	; 0x21
 80002da:	d106      	bne.n	80002ea <usbNoDataSetup+0x1e>
        /* todo, keep track of the destination interface, often stored in wIndex */
        if (dfuUpdateByRequest()) {
 80002dc:	f000 fc0e 	bl	8000afc <dfuUpdateByRequest>
 80002e0:	2800      	cmp	r0, #0
            return USB_SUCCESS;
 80002e2:	bf0c      	ite	eq
 80002e4:	2002      	moveq	r0, #2
 80002e6:	2000      	movne	r0, #0
 80002e8:	bd08      	pop	{r3, pc}
        }
    }
    return USB_UNSUPPORT;
 80002ea:	2002      	movs	r0, #2
}
 80002ec:	bd08      	pop	{r3, pc}
 80002ee:	bf00      	nop
 80002f0:	200001fc 	strdcs	r0, [r0], -ip

080002f4 <setupUSB>:


extern u8 u8_usbConfigDescriptorDFU[];
extern u8 u8_usbFunctionalDescriptor[];

void setupUSB (void) {
 80002f4:	b537      	push	{r0, r1, r2, r4, r5, lr}

/* Generic boards don't have disconnect hardware, so we drive PA12 which is connected to the usb D+ line*/
#define USB_DISC_BANK         GPIOA
#define USB_DISC_PIN              12

    SET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN),(GET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN)) & crMask(USB_DISC_PIN)) | CR_OUTPUT_PP << CR_SHITF(USB_DISC_PIN));
 80002f6:	4c19      	ldr	r4, [pc, #100]	; (800035c <setupUSB+0x68>)
 80002f8:	200c      	movs	r0, #12
 80002fa:	6825      	ldr	r5, [r4, #0]
 80002fc:	f000 fb1c 	bl	8000938 <crMask>
 8000300:	4028      	ands	r0, r5
 8000302:	f440 3580 	orr.w	r5, r0, #65536	; 0x10000
 8000306:	6025      	str	r5, [r4, #0]

    gpio_write_bit(USB_DISC_BANK,USB_DISC_PIN,0);  /* present ourselves to the host */
 8000308:	4815      	ldr	r0, [pc, #84]	; (8000360 <setupUSB+0x6c>)
 800030a:	210c      	movs	r1, #12
 800030c:	2200      	movs	r2, #0
 800030e:	f000 f989 	bl	8000624 <gpio_write_bit>

    volatile unsigned int delay;
    for(delay = 0;delay<512;delay++);
 8000312:	2300      	movs	r3, #0
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	9b01      	ldr	r3, [sp, #4]
 8000318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800031c:	d202      	bcs.n	8000324 <setupUSB+0x30>
 800031e:	9b01      	ldr	r3, [sp, #4]
 8000320:	3301      	adds	r3, #1
 8000322:	e7f7      	b.n	8000314 <setupUSB+0x20>

    //  volatile unsigned x = 1024; do { ; }while(--x);// wait a moment
    /* turn on the USB clock */
    SET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN),
 8000324:	200c      	movs	r0, #12
 8000326:	6825      	ldr	r5, [r4, #0]
 8000328:	f000 fb06 	bl	8000938 <crMask>
 800032c:	4028      	ands	r0, r5
 800032e:	f440 2580 	orr.w	r5, r0, #262144	; 0x40000
 8000332:	6025      	str	r5, [r4, #0]
        (GET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN)) & crMask(USB_DISC_PIN)) | CR_INPUT << CR_SHITF(USB_DISC_PIN)); //Sets the PA12 as floating input
    //  pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
#endif
    /* initialize the usb application */

    wTransferSize=getFlashPageSize();
 8000334:	f000 fb12 	bl	800095c <getFlashPageSize>
 8000338:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <setupUSB+0x70>)
    u8_usbConfigDescriptorDFU[41]=(wTransferSize & 0x00FF);
 800033a:	b2c2      	uxtb	r2, r0
        (GET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN)) & crMask(USB_DISC_PIN)) | CR_INPUT << CR_SHITF(USB_DISC_PIN)); //Sets the PA12 as floating input
    //  pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
#endif
    /* initialize the usb application */

    wTransferSize=getFlashPageSize();
 800033c:	6018      	str	r0, [r3, #0]
    u8_usbConfigDescriptorDFU[41]=(wTransferSize & 0x00FF);
 800033e:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <setupUSB+0x74>)
    u8_usbConfigDescriptorDFU[42]=(wTransferSize & 0xFF00)>>8;
 8000340:	f3c0 2007 	ubfx	r0, r0, #8, #8
    //  pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
#endif
    /* initialize the usb application */

    wTransferSize=getFlashPageSize();
    u8_usbConfigDescriptorDFU[41]=(wTransferSize & 0x00FF);
 8000344:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8_usbConfigDescriptorDFU[42]=(wTransferSize & 0xFF00)>>8;
 8000348:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a

    u8_usbFunctionalDescriptor[5]=(wTransferSize & 0x00FF);
 800034c:	4b07      	ldr	r3, [pc, #28]	; (800036c <setupUSB+0x78>)
 800034e:	715a      	strb	r2, [r3, #5]
    u8_usbFunctionalDescriptor[6]=(wTransferSize & 0xFF00)>>8;
 8000350:	7198      	strb	r0, [r3, #6]

/* Function Definitions */
void usbAppInit(void) {
    /* hook in to usb_core, depends on all those damn
       non encapsulated externs! */
    USB_Init();
 8000352:	f000 fe2f 	bl	8000fb4 <USB_Init>
    u8_usbFunctionalDescriptor[5]=(wTransferSize & 0x00FF);
    u8_usbFunctionalDescriptor[6]=(wTransferSize & 0xFF00)>>8;

    usbAppInit();

}
 8000356:	b003      	add	sp, #12
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	bf00      	nop
 800035c:	40010804 	andmi	r0, r1, r4, lsl #16
 8000360:	40010800 	andmi	r0, r1, r0, lsl #16
 8000364:	200001c0 	andcs	r0, r0, r0, asr #3
 8000368:	200000ec 	andcs	r0, r0, ip, ror #1
 800036c:	2000011b 	andcs	r0, r0, fp, lsl r1

08000370 <usbSuspend>:
    USB_Init();
}

void usbSuspend(void) {
    u16 wCNTR;
    wCNTR = _GetCNTR();
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <usbSuspend+0x14>)
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	b292      	uxth	r2, r2
    wCNTR |= CNTR_FSUSP | CNTR_LPMODE;
    _SetCNTR(wCNTR);
 8000376:	f042 020c 	orr.w	r2, r2, #12
 800037a:	601a      	str	r2, [r3, #0]

    /* run any power reduction handlers */
    bDeviceState = SUSPENDED;
 800037c:	4b02      	ldr	r3, [pc, #8]	; (8000388 <usbSuspend+0x18>)
 800037e:	2203      	movs	r2, #3
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	4770      	bx	lr
 8000384:	40005c40 	andmi	r5, r0, r0, asr #24
 8000388:	20000208 	andcs	r0, r0, r8, lsl #4

0800038c <usbResumeInit>:
void usbResumeInit(void) {
    u16 wCNTR;

    /* restart any clocks that had been stopped */

    wCNTR = _GetCNTR();
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <usbResumeInit+0x14>)
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 800038e:	f64f 72fb 	movw	r2, #65531	; 0xfffb
void usbResumeInit(void) {
    u16 wCNTR;

    /* restart any clocks that had been stopped */

    wCNTR = _GetCNTR();
 8000392:	6819      	ldr	r1, [r3, #0]
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000394:	400a      	ands	r2, r1
 8000396:	601a      	str	r2, [r3, #0]

    /* undo power reduction handlers here */

    _SetCNTR(ISR_MSK);
 8000398:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	4770      	bx	lr
 80003a0:	40005c40 	andmi	r5, r0, r0, asr #24

080003a4 <usbResume>:
}

void usbResume(RESUME_STATE eResumeSetVal) {
 80003a4:	b510      	push	{r4, lr}
 80003a6:	4c1e      	ldr	r4, [pc, #120]	; (8000420 <usbResume+0x7c>)
    u16 wCNTR;

    if (eResumeSetVal != RESUME_ESOF)
 80003a8:	2807      	cmp	r0, #7
        ResumeS.eState = eResumeSetVal;
 80003aa:	bf18      	it	ne
 80003ac:	7020      	strbne	r0, [r4, #0]

    switch (ResumeS.eState) {
 80003ae:	7823      	ldrb	r3, [r4, #0]
 80003b0:	2b05      	cmp	r3, #5
 80003b2:	d832      	bhi.n	800041a <usbResume+0x76>
 80003b4:	e8df f003 	tbb	[pc, r3]
 80003b8:	0e0a0603 	cfmadd32eq	mvax0, mvfx0, mvfx10, mvfx3
 80003bc:	f7ff2116 			; <UNDEFINED> instruction: 0xf7ff2116
    case RESUME_EXTERNAL:
        usbResumeInit();
 80003c0:	ffe5 e02a 	vaddl.u32	q15, d5, d26
        ResumeS.eState = RESUME_OFF;
        break;
    case RESUME_INTERNAL:
        usbResumeInit();
 80003c4:	f7ff ffe2 	bl	800038c <usbResumeInit>
        ResumeS.eState = RESUME_START;
 80003c8:	2304      	movs	r3, #4
 80003ca:	e027      	b.n	800041c <usbResume+0x78>
        break;
    case RESUME_LATER:
        ResumeS.bESOFcnt = 2;
 80003cc:	2302      	movs	r3, #2
 80003ce:	7063      	strb	r3, [r4, #1]
        ResumeS.eState = RESUME_WAIT;
 80003d0:	2303      	movs	r3, #3
 80003d2:	e023      	b.n	800041c <usbResume+0x78>
        break;
    case RESUME_WAIT:
        ResumeS.bESOFcnt--;
 80003d4:	7863      	ldrb	r3, [r4, #1]
 80003d6:	3b01      	subs	r3, #1
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	7063      	strb	r3, [r4, #1]
        if (ResumeS.bESOFcnt == 0)
 80003dc:	7863      	ldrb	r3, [r4, #1]
 80003de:	b9f3      	cbnz	r3, 800041e <usbResume+0x7a>
            ResumeS.eState = RESUME_START;
 80003e0:	2204      	movs	r2, #4
 80003e2:	e017      	b.n	8000414 <usbResume+0x70>
        break;
    case RESUME_START:
        wCNTR = _GetCNTR();
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <usbResume+0x80>)
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	b292      	uxth	r2, r2
        wCNTR |= CNTR_RESUME;
        _SetCNTR(wCNTR);
 80003ea:	f042 0210 	orr.w	r2, r2, #16
 80003ee:	601a      	str	r2, [r3, #0]
        ResumeS.eState = RESUME_ON;
 80003f0:	2305      	movs	r3, #5
 80003f2:	7023      	strb	r3, [r4, #0]
        ResumeS.bESOFcnt = 10;
 80003f4:	230a      	movs	r3, #10
 80003f6:	7063      	strb	r3, [r4, #1]
        break;
 80003f8:	bd10      	pop	{r4, pc}
    case RESUME_ON:
        ResumeS.bESOFcnt--;
 80003fa:	7863      	ldrb	r3, [r4, #1]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	7063      	strb	r3, [r4, #1]
        if (ResumeS.bESOFcnt == 0) {
 8000402:	7863      	ldrb	r3, [r4, #1]
 8000404:	b95b      	cbnz	r3, 800041e <usbResume+0x7a>
            wCNTR = _GetCNTR();
 8000406:	4a07      	ldr	r2, [pc, #28]	; (8000424 <usbResume+0x80>)
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 8000408:	f64f 73ef 	movw	r3, #65519	; 0xffef
        ResumeS.bESOFcnt = 10;
        break;
    case RESUME_ON:
        ResumeS.bESOFcnt--;
        if (ResumeS.bESOFcnt == 0) {
            wCNTR = _GetCNTR();
 800040c:	6811      	ldr	r1, [r2, #0]
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 800040e:	400b      	ands	r3, r1
 8000410:	6013      	str	r3, [r2, #0]
            ResumeS.eState = RESUME_OFF;
 8000412:	2206      	movs	r2, #6
 8000414:	4b02      	ldr	r3, [pc, #8]	; (8000420 <usbResume+0x7c>)
 8000416:	701a      	strb	r2, [r3, #0]
 8000418:	bd10      	pop	{r4, pc}
        }
        break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
        ResumeS.eState = RESUME_OFF;
 800041a:	2306      	movs	r3, #6
 800041c:	7023      	strb	r3, [r4, #0]
 800041e:	bd10      	pop	{r4, pc}
 8000420:	200001c6 	andcs	r0, r0, r6, asr #3
 8000424:	40005c40 	andmi	r5, r0, r0, asr #24

08000428 <usbPowerOn>:

RESULT usbPowerOn(void) {
    u16 wRegVal;

    wRegVal = CNTR_FRES;
    _SetCNTR(wRegVal);
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <usbPowerOn+0x1c>)
 800042a:	2201      	movs	r2, #1
 800042c:	601a      	str	r2, [r3, #0]

    wInterrupt_Mask = 0;
    _SetCNTR(wInterrupt_Mask);
    _SetISTR(0);
 800042e:	4a06      	ldr	r2, [pc, #24]	; (8000448 <usbPowerOn+0x20>)

    wRegVal = CNTR_FRES;
    _SetCNTR(wRegVal);

    wInterrupt_Mask = 0;
    _SetCNTR(wInterrupt_Mask);
 8000430:	2000      	movs	r0, #0
    _SetISTR(0);
    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 8000432:	4906      	ldr	r1, [pc, #24]	; (800044c <usbPowerOn+0x24>)

    wRegVal = CNTR_FRES;
    _SetCNTR(wRegVal);

    wInterrupt_Mask = 0;
    _SetCNTR(wInterrupt_Mask);
 8000434:	6018      	str	r0, [r3, #0]
    _SetISTR(0);
 8000436:	6010      	str	r0, [r2, #0]
    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 8000438:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800043c:	800a      	strh	r2, [r1, #0]
    _SetCNTR(wInterrupt_Mask);
 800043e:	601a      	str	r2, [r3, #0]

    return USB_SUCCESS;
}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40005c40 	andmi	r5, r0, r0, asr #24
 8000448:	40005c44 	andmi	r5, r0, r4, asr #24
 800044c:	20000200 	andcs	r0, r0, r0, lsl #4

08000450 <usbPowerOff>:

RESULT usbPowerOff(void) {
    _SetCNTR(CNTR_FRES);
 8000450:	4b04      	ldr	r3, [pc, #16]	; (8000464 <usbPowerOff+0x14>)
 8000452:	2201      	movs	r2, #1
 8000454:	601a      	str	r2, [r3, #0]
    _SetISTR(0);
 8000456:	4a04      	ldr	r2, [pc, #16]	; (8000468 <usbPowerOff+0x18>)
 8000458:	2000      	movs	r0, #0
 800045a:	6010      	str	r0, [r2, #0]
    _SetCNTR(CNTR_FRES + CNTR_PDWN);
 800045c:	2203      	movs	r2, #3
 800045e:	601a      	str	r2, [r3, #0]
       usb peripheral. we have no disabled the clocks,
       pulled the USB_DISC_PIN pin back up, or reset the
       application state machines */

    return USB_SUCCESS;
}
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40005c40 	andmi	r5, r0, r0, asr #24
 8000468:	40005c44 	andmi	r5, r0, r4, asr #24

0800046c <usbDsbBus>:



void usbDsbBus(void) {
// setPin(USB_DISC_BANK,USB_DISC_PIN);
usbPowerOff();
 800046c:	f7ff bff0 	b.w	8000450 <usbPowerOff>

08000470 <usbEnbISR>:
    bDeviceState = ADDRESSED;
}
/***** end of USER STANDARD REQUESTS *****/


void usbEnbISR(void) {
 8000470:	b507      	push	{r0, r1, r2, lr}
    NVIC_InitTypeDef NVIC_InitStructure;


    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 8000472:	2314      	movs	r3, #20
 8000474:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	f88d 3005 	strb.w	r3, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800047e:	f88d 3006 	strb.w	r3, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
 8000482:	a801      	add	r0, sp, #4


    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
 8000484:	2301      	movs	r3, #1
 8000486:	f88d 3007 	strb.w	r3, [sp, #7]
    nvicInit(&NVIC_InitStructure);
 800048a:	f000 f99d 	bl	80007c8 <nvicInit>
}
 800048e:	b003      	add	sp, #12
 8000490:	f85d fb04 	ldr.w	pc, [sp], #4

08000494 <usbInit>:
       application state machines */

    return USB_SUCCESS;
}

void usbInit(void) {
 8000494:	b510      	push	{r4, lr}
    dfuInit();
 8000496:	f000 fa6d 	bl	8000974 <dfuInit>

    pInformation->Current_Configuration = 0;
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <usbInit+0x2c>)
 800049c:	2400      	movs	r4, #0
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	729c      	strb	r4, [r3, #10]
    usbPowerOn();
 80004a2:	f7ff ffc1 	bl	8000428 <usbPowerOn>

    _SetISTR(0);
 80004a6:	4b07      	ldr	r3, [pc, #28]	; (80004c4 <usbInit+0x30>)
    wInterrupt_Mask = ISR_MSK;
 80004a8:	4a07      	ldr	r2, [pc, #28]	; (80004c8 <usbInit+0x34>)
    dfuInit();

    pInformation->Current_Configuration = 0;
    usbPowerOn();

    _SetISTR(0);
 80004aa:	601c      	str	r4, [r3, #0]
    wInterrupt_Mask = ISR_MSK;
 80004ac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80004b0:	8013      	strh	r3, [r2, #0]
    _SetCNTR(wInterrupt_Mask);
 80004b2:	4a06      	ldr	r2, [pc, #24]	; (80004cc <usbInit+0x38>)
 80004b4:	6013      	str	r3, [r2, #0]

    usbEnbISR(); /* configure the cortex M3 private peripheral NVIC */
 80004b6:	f7ff ffdb 	bl	8000470 <usbEnbISR>
    bDeviceState = UNCONNECTED;
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <usbInit+0x3c>)
 80004bc:	601c      	str	r4, [r3, #0]
 80004be:	bd10      	pop	{r4, pc}
 80004c0:	200001fc 	strdcs	r0, [r0], -ip
 80004c4:	40005c44 	andmi	r5, r0, r4, asr #24
 80004c8:	20000200 	andcs	r0, r0, r0, lsl #4
 80004cc:	40005c40 	andmi	r5, r0, r0, asr #24
 80004d0:	20000208 	andcs	r0, r0, r8, lsl #4

080004d4 <usbDsbISR>:
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
}

void usbDsbISR(void) {
 80004d4:	b507      	push	{r0, r1, r2, lr}
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 80004d6:	2314      	movs	r3, #20
 80004d8:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
    nvicInit(&NVIC_InitStructure);
 80004dc:	a801      	add	r0, sp, #4
}

void usbDsbISR(void) {
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	f88d 3005 	strb.w	r3, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80004e4:	f88d 3006 	strb.w	r3, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
 80004e8:	f88d 3007 	strb.w	r3, [sp, #7]
    nvicInit(&NVIC_InitStructure);
 80004ec:	f000 f96c 	bl	80007c8 <nvicInit>
}
 80004f0:	b003      	add	sp, #12
 80004f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080004f8 <USB_LP_CAN1_RX0_IRQHandler>:

void USB_LP_CAN1_RX0_IRQHandler(void) {
 80004f8:	b570      	push	{r4, r5, r6, lr}
    wIstr = _GetISTR();
 80004fa:	4d27      	ldr	r5, [pc, #156]	; (8000598 <USB_LP_CAN1_RX0_IRQHandler+0xa0>)
 80004fc:	4c27      	ldr	r4, [pc, #156]	; (800059c <USB_LP_CAN1_RX0_IRQHandler+0xa4>)
 80004fe:	682b      	ldr	r3, [r5, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
 8000500:	4e27      	ldr	r6, [pc, #156]	; (80005a0 <USB_LP_CAN1_RX0_IRQHandler+0xa8>)
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
    nvicInit(&NVIC_InitStructure);
}

void USB_LP_CAN1_RX0_IRQHandler(void) {
    wIstr = _GetISTR();
 8000502:	b29b      	uxth	r3, r3
 8000504:	8023      	strh	r3, [r4, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
 8000506:	8822      	ldrh	r2, [r4, #0]
 8000508:	8833      	ldrh	r3, [r6, #0]
 800050a:	4013      	ands	r3, r2
 800050c:	0559      	lsls	r1, r3, #21
 800050e:	d505      	bpl.n	800051c <USB_LP_CAN1_RX0_IRQHandler+0x24>
        _SetISTR((u16)CLR_RESET);
 8000510:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8000514:	602b      	str	r3, [r5, #0]
        Device_Property.Reset();
 8000516:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <USB_LP_CAN1_RX0_IRQHandler+0xac>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	4798      	blx	r3
    }
#endif


#if (ISR_MSK & ISTR_ERR)
    if (wIstr & ISTR_ERR & wInterrupt_Mask) {
 800051c:	8822      	ldrh	r2, [r4, #0]
 800051e:	8833      	ldrh	r3, [r6, #0]
 8000520:	401a      	ands	r2, r3
 8000522:	0492      	lsls	r2, r2, #18
        _SetISTR((u16)CLR_ERR);
 8000524:	bf44      	itt	mi
 8000526:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 800052a:	602a      	strmi	r2, [r5, #0]
    }
#endif


#if (ISR_MSK & ISTR_WKUP)
    if (wIstr & ISTR_WKUP & wInterrupt_Mask) {
 800052c:	8822      	ldrh	r2, [r4, #0]
 800052e:	4013      	ands	r3, r2
 8000530:	04db      	lsls	r3, r3, #19
 8000532:	d505      	bpl.n	8000540 <USB_LP_CAN1_RX0_IRQHandler+0x48>
        _SetISTR((u16)CLR_WKUP);
 8000534:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000538:	602b      	str	r3, [r5, #0]
        usbResume(RESUME_EXTERNAL);
 800053a:	2000      	movs	r0, #0
 800053c:	f7ff ff32 	bl	80003a4 <usbResume>
    }
#endif

    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_SUSP)
    if (wIstr & ISTR_SUSP & wInterrupt_Mask) {
 8000540:	8822      	ldrh	r2, [r4, #0]
 8000542:	8833      	ldrh	r3, [r6, #0]
 8000544:	4013      	ands	r3, r2
 8000546:	0518      	lsls	r0, r3, #20
 8000548:	d504      	bpl.n	8000554 <USB_LP_CAN1_RX0_IRQHandler+0x5c>

        /* check if SUSPEND is possible */
        if (F_SUSPEND_ENABLED) {
            usbSuspend();
 800054a:	f7ff ff11 	bl	8000370 <usbSuspend>
        } else {
            /* if not possible then resume after xx ms */
            usbResume(RESUME_LATER);
        }
        /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
        _SetISTR((u16)CLR_SUSP);
 800054e:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8000552:	602b      	str	r3, [r5, #0]
    }
#endif


#if (ISR_MSK & ISTR_SOF)
    if (wIstr & ISTR_SOF & wInterrupt_Mask) {
 8000554:	8822      	ldrh	r2, [r4, #0]
 8000556:	8833      	ldrh	r3, [r6, #0]
 8000558:	401a      	ands	r2, r3
 800055a:	0591      	lsls	r1, r2, #22
 800055c:	d507      	bpl.n	800056e <USB_LP_CAN1_RX0_IRQHandler+0x76>
        _SetISTR((u16)CLR_SOF);
 800055e:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8000562:	602a      	str	r2, [r5, #0]
        bIntPackSOF++;
 8000564:	4a10      	ldr	r2, [pc, #64]	; (80005a8 <USB_LP_CAN1_RX0_IRQHandler+0xb0>)
 8000566:	7811      	ldrb	r1, [r2, #0]
 8000568:	3101      	adds	r1, #1
 800056a:	b2c9      	uxtb	r1, r1
 800056c:	7011      	strb	r1, [r2, #0]
    }
#endif


#if (ISR_MSK & ISTR_ESOF)
    if (wIstr & ISTR_ESOF & wInterrupt_Mask) {
 800056e:	8822      	ldrh	r2, [r4, #0]
 8000570:	4013      	ands	r3, r2
 8000572:	05da      	lsls	r2, r3, #23
 8000574:	d505      	bpl.n	8000582 <USB_LP_CAN1_RX0_IRQHandler+0x8a>
        _SetISTR((u16)CLR_ESOF);
 8000576:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800057a:	602b      	str	r3, [r5, #0]
        /* resume handling timing is made with ESOFs */
        usbResume(RESUME_ESOF); /* request without change of the machine state */
 800057c:	2007      	movs	r0, #7
 800057e:	f7ff ff11 	bl	80003a4 <usbResume>
    }
#endif

    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
 8000582:	8822      	ldrh	r2, [r4, #0]
 8000584:	8833      	ldrh	r3, [r6, #0]
 8000586:	4013      	ands	r3, r2
 8000588:	041b      	lsls	r3, r3, #16
 800058a:	d503      	bpl.n	8000594 <USB_LP_CAN1_RX0_IRQHandler+0x9c>
        /* clear of the CTR flag into the sub */
        CTR_LP(); /* low priority ISR defined in the usb core lib */
    }
#endif

}
 800058c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
        /* servicing of the endpoint correct transfer interrupt */
        /* clear of the CTR flag into the sub */
        CTR_LP(); /* low priority ISR defined in the usb core lib */
 8000590:	f000 bc66 	b.w	8000e60 <CTR_LP>
 8000594:	bd70      	pop	{r4, r5, r6, pc}
 8000596:	bf00      	nop
 8000598:	40005c44 	andmi	r5, r0, r4, asr #24
 800059c:	200001c4 	andcs	r0, r0, r4, asr #3
 80005a0:	20000200 	andcs	r0, r0, r0, lsl #4
 80005a4:	20000000 	andcs	r0, r0, r0
 80005a8:	20000204 	andcs	r0, r0, r4, lsl #4

080005ac <main>:
#include "common.h"
#include "dfu.h"
extern volatile dfuUploadTypes_t userUploadType;

int main()
{
 80005ac:	b508      	push	{r3, lr}
  bool no_user_jump = FALSE;
  bool dont_wait = FALSE;

  systemReset(); // peripherals but not PC
 80005ae:	f000 f84d 	bl	800064c <systemReset>
  setupCLK();
 80005b2:	f000 f86f 	bl	8000694 <setupCLK>
  setupLEDAndButton();
 80005b6:	f000 f89d 	bl	80006f4 <setupLEDAndButton>
  setupUSB();
 80005ba:	f7ff fe9b 	bl	80002f4 <setupUSB>
  setupFLASH();
 80005be:	f000 f8a5 	bl	800070c <setupFLASH>

  switch(checkAndClearBootloaderFlag())
 80005c2:	f000 f8dd 	bl	8000780 <checkAndClearBootloaderFlag>
 80005c6:	2801      	cmp	r0, #1
 80005c8:	d00f      	beq.n	80005ea <main+0x3e>
 80005ca:	2802      	cmp	r0, #2
 80005cc:	d014      	beq.n	80005f8 <main+0x4c>

    #ifndef NOLED
    strobePin(LED_BANK, LED_PIN, STARTUP_BLINKS, BLINK_FAST,LED_ON_STATE);
    #endif

    if (!checkUserCode(USER_CODE_FLASH0X8005000) && !checkUserCode(USER_CODE_FLASH0X8002000))
 80005ce:	4813      	ldr	r0, [pc, #76]	; (800061c <main+0x70>)
 80005d0:	f000 f8aa 	bl	8000728 <checkUserCode>
 80005d4:	b118      	cbz	r0, 80005de <main+0x32>
    {
      no_user_jump = TRUE;
    }
    else if (readButtonState())
 80005d6:	f000 f831 	bl	800063c <readButtonState>
 80005da:	b930      	cbnz	r0, 80005ea <main+0x3e>
 80005dc:	e00c      	b.n	80005f8 <main+0x4c>

    #ifndef NOLED
    strobePin(LED_BANK, LED_PIN, STARTUP_BLINKS, BLINK_FAST,LED_ON_STATE);
    #endif

    if (!checkUserCode(USER_CODE_FLASH0X8005000) && !checkUserCode(USER_CODE_FLASH0X8002000))
 80005de:	4810      	ldr	r0, [pc, #64]	; (8000620 <main+0x74>)
 80005e0:	f000 f8a2 	bl	8000728 <checkUserCode>
 80005e4:	2800      	cmp	r0, #0
 80005e6:	d1f6      	bne.n	80005d6 <main+0x2a>
 80005e8:	e006      	b.n	80005f8 <main+0x4c>
    while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
    {
      #ifndef NOLED
      strobePin(LED_BANK, LED_PIN, 1, BLINK_SLOW,LED_ON_STATE);
      #endif
      if (dfuUploadStarted())
 80005ea:	f000 fb95 	bl	8000d18 <dfuUploadStarted>
 80005ee:	2800      	cmp	r0, #0
 80005f0:	d0fb      	beq.n	80005ea <main+0x3e>
      {
        dfuFinishUpload(); // systemHardReset from DFU once done
 80005f2:	f000 fb97 	bl	8000d24 <dfuFinishUpload>
 80005f6:	e7f8      	b.n	80005ea <main+0x3e>
      //   break;
      // }
    }
  }

  if (checkUserCode(USER_CODE_FLASH0X8002000))
 80005f8:	4809      	ldr	r0, [pc, #36]	; (8000620 <main+0x74>)
 80005fa:	f000 f895 	bl	8000728 <checkUserCode>
 80005fe:	b108      	cbz	r0, 8000604 <main+0x58>
  {
    jumpToUser(USER_CODE_FLASH0X8002000);
 8000600:	4807      	ldr	r0, [pc, #28]	; (8000620 <main+0x74>)
 8000602:	e004      	b.n	800060e <main+0x62>
  }
  else
  {
    if (checkUserCode(USER_CODE_FLASH0X8005000))
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <main+0x70>)
 8000606:	f000 f88f 	bl	8000728 <checkUserCode>
 800060a:	b118      	cbz	r0, 8000614 <main+0x68>
    {
      jumpToUser(USER_CODE_FLASH0X8005000);
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <main+0x70>)
 800060e:	f000 f923 	bl	8000858 <jumpToUser>
 8000612:	e001      	b.n	8000618 <main+0x6c>
      // Nothing to execute in either Flash or RAM
      #ifndef NOLED
      strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);
      #endif

      systemHardReset();
 8000614:	f000 f934 	bl	8000880 <systemHardReset>
    }
  }

  return 0;// Added to please the compiler
}
 8000618:	2000      	movs	r0, #0
 800061a:	bd08      	pop	{r3, pc}
 800061c:	08005000 	stmdaeq	r0, {ip, lr}
 8000620:	08002000 	stmdaeq	r0, {sp}

08000624 <gpio_write_bit>:
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 8000624:	2301      	movs	r3, #1
 8000626:	fa03 f101 	lsl.w	r1, r3, r1
    u32 pinMask = 0x1 << (16 + pin);
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits
 800062a:	f1d2 0201 	rsbs	r2, r2, #1
 800062e:	bf38      	it	cc
 8000630:	2200      	movcc	r2, #0
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 8000632:	0113      	lsls	r3, r2, #4
 8000634:	4099      	lsls	r1, r3
 8000636:	6101      	str	r1, [r0, #16]
 8000638:	4770      	bx	lr
	...

0800063c <readButtonState>:

bool readButtonState() {
    // todo, implement read
    bool state=FALSE;
#if defined(BUTTON_BANK) && defined (BUTTON_PIN) && defined (BUTTON_PRESSED_STATE)
    if (GET_REG(GPIO_IDR(BUTTON_BANK)) & (0x01 << BUTTON_PIN))
 800063c:	4b02      	ldr	r3, [pc, #8]	; (8000648 <readButtonState+0xc>)
 800063e:	6818      	ldr	r0, [r3, #0]
    {
        state=!state;
    }
#endif
    return state;
}
 8000640:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40010c08 	andmi	r0, r1, r8, lsl #24

0800064c <systemReset>:
        gpio_write_bit( bank,pin,1-onState);
    }
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <systemReset+0x38>)
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 800064e:	490e      	ldr	r1, [pc, #56]	; (8000688 <systemReset+0x3c>)
        gpio_write_bit( bank,pin,1-onState);
    }
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	f042 0201 	orr.w	r2, r2, #1
 8000656:	601a      	str	r2, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8000658:	4a0c      	ldr	r2, [pc, #48]	; (800068c <systemReset+0x40>)
 800065a:	6810      	ldr	r0, [r2, #0]
 800065c:	4001      	ands	r1, r0
 800065e:	6011      	str	r1, [r2, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
 8000660:	6819      	ldr	r1, [r3, #0]
 8000662:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000666:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800066a:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
 800066c:	6819      	ldr	r1, [r3, #0]
 800066e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000672:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);
 8000674:	6813      	ldr	r3, [r2, #0]
 8000676:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800067a:	6013      	str	r3, [r2, #0]

    SET_REG(RCC_CIR, 0x00000000);  /* disable all RCC interrupts */
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <systemReset+0x44>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	4770      	bx	lr
 8000684:	40021000 	andmi	r1, r2, r0
 8000688:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000
 800068c:	40021004 	andmi	r1, r2, r4
 8000690:	40021008 	andmi	r1, r2, r8

08000694 <setupCLK>:
}

void setupCLK(void) {
    unsigned int StartUpCounter=0;
    /* enable HSE */
    SET_REG(RCC_CR, GET_REG(RCC_CR) | 0x00010001);
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <setupCLK+0x58>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
 800069c:	601a      	str	r2, [r3, #0]
    while ((GET_REG(RCC_CR) & 0x00020000) == 0); /* for it to come on */
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4812      	ldr	r0, [pc, #72]	; (80006ec <setupCLK+0x58>)
 80006a2:	0392      	lsls	r2, r2, #14
 80006a4:	d5fb      	bpl.n	800069e <setupCLK+0xa>

    /* enable flash prefetch buffer */
    SET_REG(FLASH_ACR, 0x00000012);
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <setupCLK+0x5c>)
 80006a8:	2112      	movs	r1, #18
 80006aa:	6011      	str	r1, [r2, #0]

    /* Configure PLL */
#ifdef XTAL12M
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00110400); /* pll=72Mhz(x6),APB1=36Mhz,AHB=72Mhz */
#else
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x001D0400); /* pll=72Mhz(x9),APB1=36Mhz,AHB=72Mhz */
 80006ac:	f6a2 72fc 	subw	r2, r2, #4092	; 0xffc
 80006b0:	6811      	ldr	r1, [r2, #0]
 80006b2:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 80006b6:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80006ba:	6011      	str	r1, [r2, #0]
#endif

    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x01000000); /* enable the pll */
 80006bc:	6801      	ldr	r1, [r0, #0]
 80006be:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80006c2:	6001      	str	r1, [r0, #0]

#if !defined  (HSE_STARTUP_TIMEOUT)
#define HSE_STARTUP_TIMEOUT    ((unsigned int)0x0500)   /*!< Time out for HSE start up */
#endif /* HSE_STARTUP_TIMEOUT */

    while ((GET_REG(RCC_CR) & 0x03000000) == 0 && StartUpCounter < HSE_STARTUP_TIMEOUT)
 80006c4:	6819      	ldr	r1, [r3, #0]
 80006c6:	f011 7f40 	tst.w	r1, #50331648	; 0x3000000
 80006ca:	d0fb      	beq.n	80006c4 <setupCLK+0x30>
        // HSE has not started. Try restarting the processor
        systemHardReset();
    }

    /* Set SYSCLK as PLL */
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00000002);
 80006cc:	6811      	ldr	r1, [r2, #0]
 80006ce:	f041 0102 	orr.w	r1, r1, #2
 80006d2:	6011      	str	r1, [r2, #0]
    while ((GET_REG(RCC_CFGR) & 0x00000008) == 0); /* wait for it to come on */
 80006d4:	6811      	ldr	r1, [r2, #0]
 80006d6:	0709      	lsls	r1, r1, #28
 80006d8:	d5fc      	bpl.n	80006d4 <setupCLK+0x40>

    pRCC->APB2ENR |= 0B111111100;// Enable All GPIO channels (A to G)
 80006da:	699a      	ldr	r2, [r3, #24]
 80006dc:	f442 72fe 	orr.w	r2, r2, #508	; 0x1fc
 80006e0:	619a      	str	r2, [r3, #24]
    pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
 80006e2:	69da      	ldr	r2, [r3, #28]
 80006e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80006e8:	61da      	str	r2, [r3, #28]
 80006ea:	4770      	bx	lr
 80006ec:	40021000 	andmi	r1, r2, r0
 80006f0:	40022000 	andmi	r2, r2, r0

080006f4 <setupLEDAndButton>:

void setupLEDAndButton (void) {
    // SET_REG(AFIO_MAPR,(GET_REG(AFIO_MAPR) & ~AFIO_MAPR_SWJ_CFG) | AFIO_MAPR_SWJ_CFG_NO_JTAG_NO_SW);// Try to disable SWD AND JTAG so we can use those pins (not sure if this works).

#if defined(BUTTON_BANK) && defined (BUTTON_PIN) && defined (BUTTON_PRESSED_STATE)
    SET_REG(GPIO_CR(BUTTON_BANK,BUTTON_PIN),(GPIO_CR(BUTTON_BANK,BUTTON_PIN) & crMask(BUTTON_PIN)) | BUTTON_INPUT_MODE << CR_SHITF(BUTTON_PIN));
 80006f4:	4a03      	ldr	r2, [pc, #12]	; (8000704 <setupLEDAndButton+0x10>)
 80006f6:	4b04      	ldr	r3, [pc, #16]	; (8000708 <setupLEDAndButton+0x14>)
 80006f8:	601a      	str	r2, [r3, #0]
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 80006fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006fe:	611a      	str	r2, [r3, #16]
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	80010c00 	andhi	r0, r1, r0, lsl #24
 8000708:	40010c00 	andmi	r0, r1, r0, lsl #24

0800070c <setupFLASH>:
  #endif
}

void setupFLASH() {
    /* configure the HSI oscillator */
    if ((pRCC->CR & 0x01) == 0x00) {
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <setupFLASH+0x18>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	07d1      	lsls	r1, r2, #31
 8000712:	d403      	bmi.n	800071c <setupFLASH+0x10>
        u32 rwmVal = pRCC->CR;
 8000714:	681a      	ldr	r2, [r3, #0]
        rwmVal |= 0x01;
 8000716:	f042 0201 	orr.w	r2, r2, #1
        pRCC->CR = rwmVal;
 800071a:	601a      	str	r2, [r3, #0]
    }

    /* wait for it to come on */
    while ((pRCC->CR & 0x02) == 0x00) {}
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	0792      	lsls	r2, r2, #30
 8000720:	d5fc      	bpl.n	800071c <setupFLASH+0x10>
}
 8000722:	4770      	bx	lr
 8000724:	40021000 	andmi	r1, r2, r0

08000728 <checkUserCode>:

bool checkUserCode(u32 usrAddr) {
    u32 sp = *(vu32 *) usrAddr;
 8000728:	6803      	ldr	r3, [r0, #0]

    if ((sp & 0x2FFE0000) == 0x20000000) {
 800072a:	4803      	ldr	r0, [pc, #12]	; (8000738 <checkUserCode+0x10>)
 800072c:	4018      	ands	r0, r3
        return (TRUE);
    } else {
        return (FALSE);
    }
}
 800072e:	f1b0 5300 	subs.w	r3, r0, #536870912	; 0x20000000
 8000732:	4258      	negs	r0, r3
 8000734:	4158      	adcs	r0, r3
 8000736:	4770      	bx	lr
 8000738:	2ffe0000 	svccs	0x00fe0000

0800073c <setMspAndJump>:
    typedef void (*funcPtr)(void);
    u32 jumpAddr = *(vu32 *)(usrAddr + 0x04); /* reset ptr in vector table */

    funcPtr usrMain = (funcPtr) jumpAddr;

    SET_REG(SCB_VTOR, (vu32) (usrAddr));
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <setMspAndJump+0x14>)
    } else {
        return (FALSE);
    }
}

void setMspAndJump(u32 usrAddr) {
 800073e:	b508      	push	{r3, lr}
    // Dedicated function with no call to any function (appart the last call)
    // This way, there is no manipulation of the stack here, ensuring that GGC
    // didn't insert any pop from the SP after having set the MSP.
    typedef void (*funcPtr)(void);
    u32 jumpAddr = *(vu32 *)(usrAddr + 0x04); /* reset ptr in vector table */
 8000740:	6843      	ldr	r3, [r0, #4]

    funcPtr usrMain = (funcPtr) jumpAddr;

    SET_REG(SCB_VTOR, (vu32) (usrAddr));
 8000742:	6010      	str	r0, [r2, #0]

    asm volatile("msr msp, %0"::"g"(*(volatile u32 *)usrAddr));
 8000744:	6802      	ldr	r2, [r0, #0]
 8000746:	f382 8808 	msr	MSP, r2

    usrMain();                                /* go! */
 800074a:	4798      	blx	r3
 800074c:	bd08      	pop	{r3, pc}
 800074e:	bf00      	nop
 8000750:	e000ed08 	and	lr, r0, r8, lsl #26

08000754 <bkp10Write>:
}

void bkp10Write(u16 value)
{
        // Enable clocks for the backup domain registers
        pRCC->APB1ENR |= (RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <bkp10Write+0x24>)
 8000756:	69da      	ldr	r2, [r3, #28]
 8000758:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
 800075c:	61da      	str	r2, [r3, #28]
        //pRCC->APB1ENR = 0;

        // Disable backup register write protection
        pPWR->CR |= PWR_CR_DBP;
 800075e:	f5a3 33d0 	sub.w	r3, r3, #106496	; 0x1a000
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000768:	601a      	str	r2, [r3, #0]
        //pPWR->CR |= (1 << 8)

        // store value in pBK DR10
        pBKP->DR10 = value;
 800076a:	4a04      	ldr	r2, [pc, #16]	; (800077c <bkp10Write+0x28>)
 800076c:	8510      	strh	r0, [r2, #40]	; 0x28

        // Re-enable backup register write protection
        pPWR->CR &=~ PWR_CR_DBP;
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	4770      	bx	lr
 8000778:	40021000 	andmi	r1, r2, r0
 800077c:	40006c00 	andmi	r6, r0, r0, lsl #24

08000780 <checkAndClearBootloaderFlag>:
        //pPWR->CR &=~ (1 << 8)
}

int checkAndClearBootloaderFlag()
{
 8000780:	b538      	push	{r3, r4, r5, lr}
    bool flagSet = 0x00;// Flag not used

    // Enable clocks for the backup domain registers
    pRCC->APB1ENR |= (RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <checkAndClearBootloaderFlag+0x40>)

    switch (pBKP->DR10)
 8000784:	f244 214c 	movw	r1, #16972	; 0x424c
int checkAndClearBootloaderFlag()
{
    bool flagSet = 0x00;// Flag not used

    // Enable clocks for the backup domain registers
    pRCC->APB1ENR |= (RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
 8000788:	69da      	ldr	r2, [r3, #28]
 800078a:	461d      	mov	r5, r3
 800078c:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
 8000790:	61da      	str	r2, [r3, #28]

    switch (pBKP->DR10)
 8000792:	4a0c      	ldr	r2, [pc, #48]	; (80007c4 <checkAndClearBootloaderFlag+0x44>)
 8000794:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8000796:	b292      	uxth	r2, r2
 8000798:	428a      	cmp	r2, r1
 800079a:	d005      	beq.n	80007a8 <checkAndClearBootloaderFlag+0x28>
 800079c:	f244 234d 	movw	r3, #16973	; 0x424d
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d003      	beq.n	80007ac <checkAndClearBootloaderFlag+0x2c>
        //pPWR->CR &=~ (1 << 8)
}

int checkAndClearBootloaderFlag()
{
    bool flagSet = 0x00;// Flag not used
 80007a4:	2400      	movs	r4, #0
 80007a6:	e009      	b.n	80007bc <checkAndClearBootloaderFlag+0x3c>
    pRCC->APB1ENR |= (RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);

    switch (pBKP->DR10)
    {
        case RTC_BOOTLOADER_FLAG:
            flagSet = 0x01;
 80007a8:	2401      	movs	r4, #1
 80007aa:	e000      	b.n	80007ae <checkAndClearBootloaderFlag+0x2e>
            break;
        case RTC_BOOTLOADER_JUST_UPLOADED:
            flagSet = 0x02;
 80007ac:	2402      	movs	r4, #2
            break;
    }

    if (flagSet!=0x00)
    {
        bkp10Write(0x0000);// Clear the flag
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff ffd0 	bl	8000754 <bkp10Write>
        // Disable clocks
        pRCC->APB1ENR &= ~(RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
 80007b4:	69eb      	ldr	r3, [r5, #28]
 80007b6:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 80007ba:	61eb      	str	r3, [r5, #28]
    }



    return flagSet;
}
 80007bc:	4620      	mov	r0, r4
 80007be:	bd38      	pop	{r3, r4, r5, pc}
 80007c0:	40021000 	andmi	r1, r2, r0
 80007c4:	40006c00 	andmi	r6, r0, r0, lsl #24

080007c8 <nvicInit>:
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <nvicInit+0x64>)
    return flagSet;
}



void nvicInit(NVIC_InitTypeDef *NVIC_InitStruct) {
 80007ca:	b530      	push	{r4, r5, lr}
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 80007cc:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80007ce:	7844      	ldrb	r4, [r0, #1]
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 80007d0:	43db      	mvns	r3, r3
 80007d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 80007d6:	f1c3 0204 	rsb	r2, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80007da:	fa04 f202 	lsl.w	r2, r4, r2


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80007de:	240f      	movs	r4, #15
 80007e0:	40dc      	lsrs	r4, r3

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80007e2:	7881      	ldrb	r1, [r0, #2]

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007e4:	7803      	ldrb	r3, [r0, #0]
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80007e6:	400c      	ands	r4, r1
 80007e8:	4314      	orrs	r4, r2

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007ea:	f003 0103 	and.w	r1, r3, #3
 80007ee:	00c9      	lsls	r1, r1, #3
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 80007f0:	0124      	lsls	r4, r4, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007f2:	22ff      	movs	r2, #255	; 0xff

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007f4:	408c      	lsls	r4, r1

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007f6:	408a      	lsls	r2, r1
 80007f8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80007fc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000800:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 8000804:	f8d3 5300 	ldr.w	r5, [r3, #768]	; 0x300
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 8000808:	ea25 0102 	bic.w	r1, r5, r2
    tmppriority &= tmpmask;
 800080c:	4022      	ands	r2, r4
    tmpreg |= tmppriority;
 800080e:	430a      	orrs	r2, r1

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 8000810:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8000814:	7803      	ldrb	r3, [r0, #0]
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8000816:	2201      	movs	r2, #1
    tmpreg |= tmppriority;

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8000818:	0959      	lsrs	r1, r3, #5
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 800081a:	f003 031f 	and.w	r3, r3, #31
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
    tmpreg |= tmppriority;

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8000822:	4a03      	ldr	r2, [pc, #12]	; (8000830 <nvicInit+0x68>)
 8000824:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8000828:	bd30      	pop	{r4, r5, pc}
 800082a:	bf00      	nop
 800082c:	e000ed00 	and	lr, r0, r0, lsl #26
 8000830:	e000e100 	and	lr, r0, r0, lsl #2

08000834 <nvicDisableInterrupts>:
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
}

void nvicDisableInterrupts() {
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;
    rNVIC->ICER[0] = 0xFFFFFFFF;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <nvicDisableInterrupts+0x20>)
 8000836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800083a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    rNVIC->ICER[1] = 0xFFFFFFFF;
 800083e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    rNVIC->ICPR[0] = 0xFFFFFFFF;
 8000842:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    rNVIC->ICPR[1] = 0xFFFFFFFF;
 8000846:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    SET_REG(STK_CTRL, 0x04); /* disable the systick, which operates separately from nvic */
 800084a:	2204      	movs	r2, #4
 800084c:	f843 2cf0 	str.w	r2, [r3, #-240]
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000e100 	and	lr, r0, r0, lsl #2

08000858 <jumpToUser>:

    usrMain();                                /* go! */
}


void jumpToUser(u32 usrAddr) {
 8000858:	b510      	push	{r4, lr}

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <jumpToUser+0x24>)
 800085c:	2280      	movs	r2, #128	; 0x80

    usrMain();                                /* go! */
}


void jumpToUser(u32 usrAddr) {
 800085e:	4604      	mov	r4, r0

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 8000860:	601a      	str	r2, [r3, #0]

    /* tear down all the dfu related setup */
    // disable usb interrupts, clear them, turn off usb, set the disc pin
    // todo pick exactly what we want to do here, now its just a conservative
    flashLock();
    usbDsbISR();
 8000862:	f7ff fe37 	bl	80004d4 <usbDsbISR>
    nvicDisableInterrupts();
 8000866:	f7ff ffe5 	bl	8000834 <nvicDisableInterrupts>

#ifndef HAS_MAPLE_HARDWARE
    usbDsbBus();
 800086a:	f7ff fdff 	bl	800046c <usbDsbBus>
#endif

// Does nothing, as PC12 is not connected on teh Maple mini according to the schemmatic     setPin(GPIOC, 12); // disconnect usb from host. todo, macroize pin
    systemReset(); // resets clocks and periphs, not core regs
 800086e:	f7ff feed 	bl	800064c <systemReset>

    setMspAndJump(usrAddr);
 8000872:	4620      	mov	r0, r4
}
 8000874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif

// Does nothing, as PC12 is not connected on teh Maple mini according to the schemmatic     setPin(GPIOC, 12); // disconnect usb from host. todo, macroize pin
    systemReset(); // resets clocks and periphs, not core regs

    setMspAndJump(usrAddr);
 8000878:	f7ff bf60 	b.w	800073c <setMspAndJump>
 800087c:	40022010 	andmi	r2, r2, r0, lsl r0

08000880 <systemHardReset>:

void systemHardReset(void) {
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;

    /* Reset  */
    rSCB->AIRCR = (u32)AIRCR_RESET_REQ;
 8000880:	4a02      	ldr	r2, [pc, #8]	; (800088c <systemHardReset+0xc>)
 8000882:	4b03      	ldr	r3, [pc, #12]	; (8000890 <systemHardReset+0x10>)
 8000884:	60da      	str	r2, [r3, #12]

    /*  should never get here */
    while (1) {
        asm volatile("nop");
 8000886:	bf00      	nop
 8000888:	e7fd      	b.n	8000886 <systemHardReset+0x6>
 800088a:	bf00      	nop
 800088c:	05fa0004 	ldrbeq	r0, [sl, #4]!
 8000890:	e000ed00 	and	lr, r0, r0, lsl #26

08000894 <flashErasePage>:
    }
}

bool flashErasePage(u32 pageAddr) {
    u32 rwmVal = GET_REG(FLASH_CR);
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <flashErasePage+0x2c>)
    while (1) {
        asm volatile("nop");
    }
}

bool flashErasePage(u32 pageAddr) {
 8000896:	b510      	push	{r4, lr}
    u32 rwmVal = GET_REG(FLASH_CR);
 8000898:	681a      	ldr	r2, [r3, #0]
    rwmVal = FLASH_CR_PER;
    SET_REG(FLASH_CR, rwmVal);
 800089a:	2202      	movs	r2, #2
 800089c:	601a      	str	r2, [r3, #0]

    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 800089e:	4a09      	ldr	r2, [pc, #36]	; (80008c4 <flashErasePage+0x30>)
 80008a0:	6811      	ldr	r1, [r2, #0]
 80008a2:	4614      	mov	r4, r2
 80008a4:	f011 0f01 	tst.w	r1, #1
 80008a8:	d1f9      	bne.n	800089e <flashErasePage+0xa>
    SET_REG(FLASH_AR, pageAddr);
 80008aa:	6090      	str	r0, [r2, #8]
    SET_REG(FLASH_CR, FLASH_CR_START | FLASH_CR_PER);
 80008ac:	2242      	movs	r2, #66	; 0x42
 80008ae:	601a      	str	r2, [r3, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80008b0:	6822      	ldr	r2, [r4, #0]
 80008b2:	f012 0101 	ands.w	r1, r2, #1
 80008b6:	d1fb      	bne.n	80008b0 <flashErasePage+0x1c>

    /* todo: verify the page was erased */

    rwmVal = 0x00;
    SET_REG(FLASH_CR, rwmVal);
 80008b8:	6019      	str	r1, [r3, #0]

    return TRUE;
}
 80008ba:	2001      	movs	r0, #1
 80008bc:	bd10      	pop	{r4, pc}
 80008be:	bf00      	nop
 80008c0:	40022010 	andmi	r2, r2, r0, lsl r0
 80008c4:	4002200c 	andmi	r2, r2, ip

080008c8 <flashWriteWord>:
    }

    return TRUE;
}

bool flashWriteWord(u32 addr, u32 word) {
 80008c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
 80008ca:	b28b      	uxth	r3, r1
 80008cc:	9300      	str	r3, [sp, #0]
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;
 80008ce:	0c0b      	lsrs	r3, r1, #16
 80008d0:	9301      	str	r3, [sp, #4]

    u32 rwmVal = GET_REG(FLASH_CR);
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <flashWriteWord+0x44>)
    SET_REG(FLASH_CR, FLASH_CR_PG);
 80008d4:	2201      	movs	r2, #1
bool flashWriteWord(u32 addr, u32 word) {
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;

    u32 rwmVal = GET_REG(FLASH_CR);
 80008d6:	681c      	ldr	r4, [r3, #0]
    SET_REG(FLASH_CR, FLASH_CR_PG);
 80008d8:	601a      	str	r2, [r3, #0]

    /* apparently we need not write to FLASH_AR and can
       simply do a native write of a half word */
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80008da:	4a0d      	ldr	r2, [pc, #52]	; (8000910 <flashWriteWord+0x48>)
 80008dc:	6815      	ldr	r5, [r2, #0]
 80008de:	07ed      	lsls	r5, r5, #31
 80008e0:	d4fb      	bmi.n	80008da <flashWriteWord+0x12>
    *(flashAddr + 0x01) = (vu16)hhWord;
 80008e2:	9d01      	ldr	r5, [sp, #4]
 80008e4:	b2ad      	uxth	r5, r5
 80008e6:	8045      	strh	r5, [r0, #2]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80008e8:	6815      	ldr	r5, [r2, #0]
 80008ea:	07ed      	lsls	r5, r5, #31
 80008ec:	d4fc      	bmi.n	80008e8 <flashWriteWord+0x20>
    *(flashAddr) = (vu16)lhWord;
 80008ee:	9d00      	ldr	r5, [sp, #0]
 80008f0:	b2ad      	uxth	r5, r5
 80008f2:	8005      	strh	r5, [r0, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80008f4:	6815      	ldr	r5, [r2, #0]
 80008f6:	07ed      	lsls	r5, r5, #31
 80008f8:	d4fc      	bmi.n	80008f4 <flashWriteWord+0x2c>

    rwmVal &= 0xFFFFFFFE;
 80008fa:	f024 0201 	bic.w	r2, r4, #1
    SET_REG(FLASH_CR, rwmVal);
 80008fe:	601a      	str	r2, [r3, #0]

    /* verify the write */
    if (*(vu32 *)addr != word) {
 8000900:	6800      	ldr	r0, [r0, #0]
        return FALSE;
    }

    return TRUE;
}
 8000902:	1a43      	subs	r3, r0, r1
 8000904:	4258      	negs	r0, r3
 8000906:	4158      	adcs	r0, r3
 8000908:	b003      	add	sp, #12
 800090a:	bd30      	pop	{r4, r5, pc}
 800090c:	40022010 	andmi	r2, r2, r0, lsl r0
 8000910:	4002200c 	andmi	r2, r2, ip

08000914 <flashLock>:

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 8000914:	4b01      	ldr	r3, [pc, #4]	; (800091c <flashLock+0x8>)
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	4770      	bx	lr
 800091c:	40022010 	andmi	r2, r2, r0, lsl r0

08000920 <flashUnlock>:
}

void flashUnlock() {
    /* unlock the flash */
    SET_REG(FLASH_KEYR, FLASH_KEY1);
 8000920:	4b03      	ldr	r3, [pc, #12]	; (8000930 <flashUnlock+0x10>)
 8000922:	4a04      	ldr	r2, [pc, #16]	; (8000934 <flashUnlock+0x14>)
 8000924:	601a      	str	r2, [r3, #0]
    SET_REG(FLASH_KEYR, FLASH_KEY2);
 8000926:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40022004 	andmi	r2, r2, r4
 8000934:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123

08000938 <crMask>:

// Used to create the control register masking pattern, when setting control register mode.
unsigned int crMask(int pin)
{
    unsigned int mask;
    if (pin>=8)
 8000938:	2807      	cmp	r0, #7
    {
        pin-=8;
 800093a:	bfc8      	it	gt
 800093c:	3808      	subgt	r0, #8
    }
    mask = 0x0F << (pin<<2);
 800093e:	230f      	movs	r3, #15
 8000940:	0080      	lsls	r0, r0, #2
 8000942:	fa03 f000 	lsl.w	r0, r3, r0
    return ~mask;
}
 8000946:	43c0      	mvns	r0, r0
 8000948:	4770      	bx	lr
	...

0800094c <getFlashEnd>:

#define FLASH_SIZE_REG 0x1FFFF7E0
int getFlashEnd(void)
{
    unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register
    return ((int)(*flashSize & 0xffff) * 1024) + 0x08000000;
 800094c:	4b02      	ldr	r3, [pc, #8]	; (8000958 <getFlashEnd+0xc>)
 800094e:	8818      	ldrh	r0, [r3, #0]
 8000950:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
}
 8000954:	0280      	lsls	r0, r0, #10
 8000956:	4770      	bx	lr
 8000958:	1ffff7e0 	svcne	0x00fff7e0

0800095c <getFlashPageSize>:

int getFlashPageSize(void)
{

    unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register
    if ((*flashSize & 0xffff) > 128)
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <getFlashPageSize+0x14>)
 800095e:	881b      	ldrh	r3, [r3, #0]
    {
        return 0x800;
 8000960:	2b81      	cmp	r3, #129	; 0x81
    }
    else
    {
        return 0x400;
    }
}
 8000962:	bf34      	ite	cc
 8000964:	f44f 6080 	movcc.w	r0, #1024	; 0x400
 8000968:	f44f 6000 	movcs.w	r0, #2048	; 0x800
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	1ffff7e0 	svcne	0x00fff7e0

08000974 <dfuInit>:

volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <dfuInit+0x38>)
 8000976:	2300      	movs	r3, #0
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
 8000978:	2102      	movs	r1, #2

volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
 800097a:	7013      	strb	r3, [r2, #0]
    dfuAppStatus.bwPollTimeout0 = 0x00;
 800097c:	7053      	strb	r3, [r2, #1]
    dfuAppStatus.bwPollTimeout1 = 0x00;
 800097e:	7093      	strb	r3, [r2, #2]
    dfuAppStatus.bwPollTimeout2 = 0x00;
 8000980:	70d3      	strb	r3, [r2, #3]
    dfuAppStatus.bState = dfuIDLE;
 8000982:	7111      	strb	r1, [r2, #4]
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
 8000984:	7153      	strb	r3, [r2, #5]
    userFirmwareLen = 0;
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <dfuInit+0x3c>)
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 8000988:	490a      	ldr	r1, [pc, #40]	; (80009b4 <dfuInit+0x40>)
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
 800098a:	6013      	str	r3, [r2, #0]
    thisBlockLen = 0;;
 800098c:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <dfuInit+0x44>)
 800098e:	8013      	strh	r3, [r2, #0]
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 8000990:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <dfuInit+0x48>)
 8000992:	6011      	str	r1, [r2, #0]
    userAppEnd = RAM_END;
 8000994:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <dfuInit+0x4c>)
 8000996:	f501 4188 	add.w	r1, r1, #17408	; 0x4400
 800099a:	6011      	str	r1, [r2, #0]
    userUploadType=DFU_UPLOAD_NONE;
 800099c:	4a09      	ldr	r2, [pc, #36]	; (80009c4 <dfuInit+0x50>)
    code_copy_lock = WAIT;
 800099e:	2103      	movs	r1, #3
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
    userAppEnd = RAM_END;
    userUploadType=DFU_UPLOAD_NONE;
 80009a0:	7013      	strb	r3, [r2, #0]
    code_copy_lock = WAIT;
 80009a2:	4a09      	ldr	r2, [pc, #36]	; (80009c8 <dfuInit+0x54>)
 80009a4:	7011      	strb	r1, [r2, #0]
    dfuBusy = FALSE;
 80009a6:	4a09      	ldr	r2, [pc, #36]	; (80009cc <dfuInit+0x58>)
 80009a8:	7013      	strb	r3, [r2, #0]
 80009aa:	4770      	bx	lr
 80009ac:	20000a15 	andcs	r0, r0, r5, lsl sl
 80009b0:	20000a10 	andcs	r0, r0, r0, lsl sl
 80009b4:	20000c00 	andcs	r0, r0, r0, lsl #24
 80009b8:	20000a0e 	andcs	r0, r0, lr, lsl #20
 80009bc:	200001bc 			; <UNDEFINED> instruction: 0x200001bc
 80009c0:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
 80009c4:	20000a14 	andcs	r0, r0, r4, lsl sl
 80009c8:	200001c8 	andcs	r0, r0, r8, asr #3
 80009cc:	20000a1b 	andcs	r0, r0, fp, lsl sl

080009d0 <dfuUpdateByReset>:
    } else {
        return FALSE;
    }
}

void dfuUpdateByReset(void) {
 80009d0:	b508      	push	{r3, lr}
    u8 startState = dfuAppStatus.bState;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <dfuUpdateByReset+0x3c>)
    userFirmwareLen = 0;
 80009d4:	480e      	ldr	r0, [pc, #56]	; (8000a10 <dfuUpdateByReset+0x40>)
        return FALSE;
    }
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 80009d6:	7919      	ldrb	r1, [r3, #4]
    userFirmwareLen = 0;
 80009d8:	2200      	movs	r2, #0
        return FALSE;
    }
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 80009da:	b2c9      	uxtb	r1, r1
    userFirmwareLen = 0;

    if (startState == appDETACH) {
 80009dc:	2901      	cmp	r1, #1
    }
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
    userFirmwareLen = 0;
 80009de:	6002      	str	r2, [r0, #0]

    if (startState == appDETACH) {
 80009e0:	d108      	bne.n	80009f4 <dfuUpdateByReset+0x24>
        dfuAppStatus.bState = dfuIDLE;
 80009e2:	2102      	movs	r1, #2
 80009e4:	7119      	strb	r1, [r3, #4]
        dfuAppStatus.bStatus = OK;
 80009e6:	701a      	strb	r2, [r3, #0]

        nvicDisableInterrupts();
 80009e8:	f7ff ff24 	bl	8000834 <nvicDisableInterrupts>
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
    }
}
 80009ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (startState == appDETACH) {
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        nvicDisableInterrupts();
        usbEnbISR();
 80009f0:	f7ff bd3e 	b.w	8000470 <usbEnbISR>

    } else if (startState == appIDLE || startState == dfuIDLE) {
 80009f4:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 80009f8:	d006      	beq.n	8000a08 <dfuUpdateByReset+0x38>
        /* do nothing...might be normal usb bus activity */
    } else {
        /* we reset from the dfu, reset everything and startover,
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
 80009fa:	2102      	movs	r1, #2
 80009fc:	7119      	strb	r1, [r3, #4]
        dfuAppStatus.bStatus = OK;
 80009fe:	701a      	strb	r2, [r3, #0]

        systemHardReset();
    }
}
 8000a00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
 8000a04:	f7ff bf3c 	b.w	8000880 <systemHardReset>
 8000a08:	bd08      	pop	{r3, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000a15 	andcs	r0, r0, r5, lsl sl
 8000a10:	20000a10 	andcs	r0, r0, r0, lsl sl

08000a14 <dfuCopyState>:

void dfuUpdateByTimeout(void) {
}

u8 *dfuCopyState(u16 length) {
    if (length == 0) {
 8000a14:	b920      	cbnz	r0, 8000a20 <dfuCopyState+0xc>
        pInformation->Ctrl_Info.Usb_wLength = 1;
 8000a16:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <dfuCopyState+0x10>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	821a      	strh	r2, [r3, #16]
        return NULL;
 8000a1e:	4770      	bx	lr
    } else {
        return (&(dfuAppStatus.bState));
 8000a20:	4801      	ldr	r0, [pc, #4]	; (8000a28 <dfuCopyState+0x14>)
    }
}
 8000a22:	4770      	bx	lr
 8000a24:	200001fc 	strdcs	r0, [r0], -ip
 8000a28:	20000a19 	andcs	r0, r0, r9, lsl sl

08000a2c <dfuCopyStatus>:

u8 *dfuCopyStatus(u16 length) {
    if (length == 0) {
 8000a2c:	b920      	cbnz	r0, 8000a38 <dfuCopyStatus+0xc>
        pInformation->Ctrl_Info.Usb_wLength = 6;
 8000a2e:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <dfuCopyStatus+0x10>)
 8000a30:	2206      	movs	r2, #6
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	821a      	strh	r2, [r3, #16]
        return NULL;
 8000a36:	4770      	bx	lr
    } else {
        return (u8*)(&dfuAppStatus);
 8000a38:	4801      	ldr	r0, [pc, #4]	; (8000a40 <dfuCopyStatus+0x14>)
    }
}
 8000a3a:	4770      	bx	lr
 8000a3c:	200001fc 	strdcs	r0, [r0], -ip
 8000a40:	20000a15 	andcs	r0, r0, r5, lsl sl

08000a44 <dfuCopyDNLOAD>:


u8 *dfuCopyDNLOAD(u16 length) {
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <dfuCopyDNLOAD+0x1c>)
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8000a46:	681b      	ldr	r3, [r3, #0]
    }
}


u8 *dfuCopyDNLOAD(u16 length) {
    if (length == 0) {
 8000a48:	b930      	cbnz	r0, 8000a58 <dfuCopyDNLOAD+0x14>
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8000a4a:	88da      	ldrh	r2, [r3, #6]
 8000a4c:	8a59      	ldrh	r1, [r3, #18]
 8000a4e:	1a51      	subs	r1, r2, r1
 8000a50:	8219      	strh	r1, [r3, #16]
        thisBlockLen = pInformation->USBwLengths.w;
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <dfuCopyDNLOAD+0x20>)
 8000a54:	801a      	strh	r2, [r3, #0]
        return NULL;
 8000a56:	4770      	bx	lr
    } else {
        return ((u8 *)recvBuffer + pInformation->Ctrl_Info.Usb_wOffset);
 8000a58:	8a5b      	ldrh	r3, [r3, #18]
 8000a5a:	4803      	ldr	r0, [pc, #12]	; (8000a68 <dfuCopyDNLOAD+0x24>)
 8000a5c:	4418      	add	r0, r3
    }
}
 8000a5e:	4770      	bx	lr
 8000a60:	200001fc 	strdcs	r0, [r0], -ip
 8000a64:	20000a0e 	andcs	r0, r0, lr, lsl #20
 8000a68:	2000020c 	andcs	r0, r0, ip, lsl #4

08000a6c <dfuCopyUPLOAD>:

u8 *dfuCopyUPLOAD(u16 length) {
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <dfuCopyUPLOAD+0x24>)
    if (length == 0) {
 8000a6e:	b930      	cbnz	r0, 8000a7e <dfuCopyUPLOAD+0x12>
        pInformation->Ctrl_Info.Usb_wLength = thisBlockLen - pInformation->Ctrl_Info.Usb_wOffset;
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <dfuCopyUPLOAD+0x28>)
 8000a74:	8811      	ldrh	r1, [r2, #0]
 8000a76:	8a5a      	ldrh	r2, [r3, #18]
 8000a78:	1a8a      	subs	r2, r1, r2
 8000a7a:	821a      	strh	r2, [r3, #16]
        return NULL;
 8000a7c:	4770      	bx	lr
    } else {
        return((u8*) userAppAddr + userFirmwareLen + pInformation->Ctrl_Info.Usb_wOffset);
 8000a7e:	4906      	ldr	r1, [pc, #24]	; (8000a98 <dfuCopyUPLOAD+0x2c>)
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <dfuCopyUPLOAD+0x30>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	6812      	ldr	r2, [r2, #0]
 8000a86:	6808      	ldr	r0, [r1, #0]
 8000a88:	8a5b      	ldrh	r3, [r3, #18]
 8000a8a:	4410      	add	r0, r2
 8000a8c:	4418      	add	r0, r3
    }
}
 8000a8e:	4770      	bx	lr
 8000a90:	200001fc 	strdcs	r0, [r0], -ip
 8000a94:	20000a0e 	andcs	r0, r0, lr, lsl #20
 8000a98:	200001bc 			; <UNDEFINED> instruction: 0x200001bc
 8000a9c:	20000a10 	andcs	r0, r0, r0, lsl sl

08000aa0 <dfuCopyBufferToExec>:

void dfuCopyBufferToExec() {
 8000aa0:	b570      	push	{r4, r5, r6, lr}
        }
    }
    else
*/
    {
        if (userUploadType == DFU_UPLOAD_FLASH_0X8005000)
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <dfuCopyBufferToExec+0x4c>)
 8000aa4:	4e12      	ldr	r6, [pc, #72]	; (8000af0 <dfuCopyBufferToExec+0x50>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
        {
            userSpace = (u32 *)(USER_CODE_FLASH0X8005000 + userFirmwareLen);
 8000aa8:	6834      	ldr	r4, [r6, #0]
        }
    }
    else
*/
    {
        if (userUploadType == DFU_UPLOAD_FLASH_0X8005000)
 8000aaa:	2b02      	cmp	r3, #2
        {
            userSpace = (u32 *)(USER_CODE_FLASH0X8005000 + userFirmwareLen);
 8000aac:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
 8000ab0:	bf0c      	ite	eq
 8000ab2:	f504 44a0 	addeq.w	r4, r4, #20480	; 0x5000
        }
        else
        {
            userSpace = (u32 *)(USER_CODE_FLASH0X8002000 + userFirmwareLen);
 8000ab6:	f504 5400 	addne.w	r4, r4, #8192	; 0x2000
        }

        flashErasePage((u32)(userSpace));
 8000aba:	4620      	mov	r0, r4
 8000abc:	f7ff feea 	bl	8000894 <flashErasePage>

        for (i = 0; i < thisBlockLen; i = i + 4) {
 8000ac0:	2500      	movs	r5, #0
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <dfuCopyBufferToExec+0x54>)
 8000ac4:	881a      	ldrh	r2, [r3, #0]
 8000ac6:	b292      	uxth	r2, r2
 8000ac8:	4295      	cmp	r5, r2
 8000aca:	da06      	bge.n	8000ada <dfuCopyBufferToExec+0x3a>
            flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <dfuCopyBufferToExec+0x58>)
 8000ace:	1960      	adds	r0, r4, r5
 8000ad0:	58e9      	ldr	r1, [r5, r3]
 8000ad2:	f7ff fef9 	bl	80008c8 <flashWriteWord>
            userSpace = (u32 *)(USER_CODE_FLASH0X8002000 + userFirmwareLen);
        }

        flashErasePage((u32)(userSpace));

        for (i = 0; i < thisBlockLen; i = i + 4) {
 8000ad6:	3504      	adds	r5, #4
 8000ad8:	e7f3      	b.n	8000ac2 <dfuCopyBufferToExec+0x22>
            flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
        }

    }
    userFirmwareLen += thisBlockLen;
 8000ada:	6831      	ldr	r1, [r6, #0]
 8000adc:	881a      	ldrh	r2, [r3, #0]
 8000ade:	b292      	uxth	r2, r2
 8000ae0:	440a      	add	r2, r1
 8000ae2:	6032      	str	r2, [r6, #0]

    thisBlockLen = 0;
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	801a      	strh	r2, [r3, #0]
 8000ae8:	bd70      	pop	{r4, r5, r6, pc}
 8000aea:	bf00      	nop
 8000aec:	20000a14 	andcs	r0, r0, r4, lsl sl
 8000af0:	20000a10 	andcs	r0, r0, r0, lsl sl
 8000af4:	20000a0e 	andcs	r0, r0, lr, lsl #20
 8000af8:	2000020c 	andcs	r0, r0, ip, lsl #4

08000afc <dfuUpdateByRequest>:
}




bool dfuUpdateByRequest(void) {
 8000afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 8000b00:	4979      	ldr	r1, [pc, #484]	; (8000ce8 <dfuUpdateByRequest+0x1ec>)



    u8 startState = dfuAppStatus.bState;
 8000b02:	4c7a      	ldr	r4, [pc, #488]	; (8000cec <dfuUpdateByRequest+0x1f0>)


bool dfuUpdateByRequest(void) {
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 8000b04:	2001      	movs	r0, #1
 8000b06:	7008      	strb	r0, [r1, #0]



    u8 startState = dfuAppStatus.bState;
 8000b08:	7923      	ldrb	r3, [r4, #4]
    dfuAppStatus.bStatus = OK;
 8000b0a:	2200      	movs	r2, #0
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;



    u8 startState = dfuAppStatus.bState;
 8000b0c:	b2db      	uxtb	r3, r3
    dfuAppStatus.bStatus = OK;
    /* often leaner to nest if's then embed a switch/case */
    if (startState == dfuIDLE)  {
 8000b0e:	2b02      	cmp	r3, #2
    dfuBusy = TRUE;



    u8 startState = dfuAppStatus.bState;
    dfuAppStatus.bStatus = OK;
 8000b10:	7022      	strb	r2, [r4, #0]
    /* often leaner to nest if's then embed a switch/case */
    if (startState == dfuIDLE)  {
 8000b12:	d14a      	bne.n	8000baa <dfuUpdateByRequest+0xae>
        /*  device running inside DFU mode */
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop
 8000b14:	7008      	strb	r0, [r1, #0]

        if (pInformation->USBbRequest == DFU_DNLOAD) {
 8000b16:	4976      	ldr	r1, [pc, #472]	; (8000cf0 <dfuUpdateByRequest+0x1f4>)
 8000b18:	6809      	ldr	r1, [r1, #0]
 8000b1a:	7848      	ldrb	r0, [r1, #1]
 8000b1c:	2801      	cmp	r0, #1
 8000b1e:	d11a      	bne.n	8000b56 <dfuUpdateByRequest+0x5a>

            if (pInformation->USBwLengths.w > 0) {
 8000b20:	88cb      	ldrh	r3, [r1, #6]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 80b5 	beq.w	8000c92 <dfuUpdateByRequest+0x196>
                userFirmwareLen = 0;
 8000b28:	4b72      	ldr	r3, [pc, #456]	; (8000cf4 <dfuUpdateByRequest+0x1f8>)
 8000b2a:	601a      	str	r2, [r3, #0]
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
                switch(pInformation->Current_AlternateSetting)
 8000b2c:	7b0a      	ldrb	r2, [r1, #12]

        if (pInformation->USBbRequest == DFU_DNLOAD) {

            if (pInformation->USBwLengths.w > 0) {
                userFirmwareLen = 0;
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	7123      	strb	r3, [r4, #4]
                switch(pInformation->Current_AlternateSetting)
 8000b32:	b96a      	cbnz	r2, 8000b50 <dfuUpdateByRequest+0x54>
                        userUploadType = DFU_UPLOAD_RAM;
                        break;
                        */
                    #ifdef MATRIX
                    case 0:
                        userUploadType = DFU_UPLOAD_FLASH_0X8002000;
 8000b34:	4a70      	ldr	r2, [pc, #448]	; (8000cf8 <dfuUpdateByRequest+0x1fc>)
 8000b36:	7013      	strb	r3, [r2, #0]
                        userAppAddr = USER_CODE_FLASH0X8002000;
 8000b38:	4a70      	ldr	r2, [pc, #448]	; (8000cfc <dfuUpdateByRequest+0x200>)
 8000b3a:	4b71      	ldr	r3, [pc, #452]	; (8000d00 <dfuUpdateByRequest+0x204>)
 8000b3c:	601a      	str	r2, [r3, #0]
                        /* make sure the flash is setup properly, unlock it */
                        setupFLASH();
 8000b3e:	f7ff fde5 	bl	800070c <setupFLASH>
                        flashUnlock();
 8000b42:	f7ff feed 	bl	8000920 <flashUnlock>
                        bkp10Write(RTC_BOOTLOADER_JUST_UPLOADED);
 8000b46:	f244 204d 	movw	r0, #16973	; 0x424d
 8000b4a:	f7ff fe03 	bl	8000754 <bkp10Write>

                        break;
 8000b4e:	e0c3      	b.n	8000cd8 <dfuUpdateByRequest+0x1dc>
                        break;
                    #endif

                    default:
                    // Roger Clark. Report error
                        dfuAppStatus.bState  = dfuERROR;
 8000b50:	220a      	movs	r2, #10
 8000b52:	7122      	strb	r2, [r4, #4]
 8000b54:	e0bf      	b.n	8000cd6 <dfuUpdateByRequest+0x1da>
                }
            } else {
                dfuAppStatus.bState  = dfuERROR;
                dfuAppStatus.bStatus = errNOTDONE;
            }
        } else if (pInformation->USBbRequest == DFU_UPLOAD) {
 8000b56:	2802      	cmp	r0, #2
 8000b58:	d121      	bne.n	8000b9e <dfuUpdateByRequest+0xa2>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 8000b5a:	2309      	movs	r3, #9
 8000b5c:	7123      	strb	r3, [r4, #4]
            /* record length of first block for calculating target
               address from wValue in consecutive blocks */
            uploadBlockLen = pInformation->USBwLengths.w;
 8000b5e:	88ca      	ldrh	r2, [r1, #6]
 8000b60:	4b68      	ldr	r3, [pc, #416]	; (8000d04 <dfuUpdateByRequest+0x208>)
 8000b62:	801a      	strh	r2, [r3, #0]
            thisBlockLen = uploadBlockLen; /* for this first block as well */
 8000b64:	8818      	ldrh	r0, [r3, #0]
 8000b66:	4a68      	ldr	r2, [pc, #416]	; (8000d08 <dfuUpdateByRequest+0x20c>)
 8000b68:	b280      	uxth	r0, r0
 8000b6a:	8010      	strh	r0, [r2, #0]
            /* calculate where the data should be copied from */
            userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000b6c:	881a      	ldrh	r2, [r3, #0]
 8000b6e:	884b      	ldrh	r3, [r1, #2]
 8000b70:	b292      	uxth	r2, r2
 8000b72:	435a      	muls	r2, r3
 8000b74:	4b5f      	ldr	r3, [pc, #380]	; (8000cf4 <dfuUpdateByRequest+0x1f8>)
 8000b76:	601a      	str	r2, [r3, #0]
            switch(pInformation->Current_AlternateSetting)
 8000b78:	7b0b      	ldrb	r3, [r1, #12]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d003      	beq.n	8000b86 <dfuUpdateByRequest+0x8a>
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d109      	bne.n	8000b96 <dfuUpdateByRequest+0x9a>
                case 1:
                    userAppAddr = USER_CODE_FLASH0X8005000;
                    userAppEnd = getFlashEnd();
                    break;
                case 2:
                    userAppAddr = USER_CODE_FLASH0X8002000;
 8000b82:	4a5e      	ldr	r2, [pc, #376]	; (8000cfc <dfuUpdateByRequest+0x200>)
 8000b84:	e000      	b.n	8000b88 <dfuUpdateByRequest+0x8c>
                //     userAppAddr = USER_CODE_FLASH0X8000000;
                //     userAppEnd = USER_CODE_FLASH0X8002000;
                //     break;
                #else
                case 1:
                    userAppAddr = USER_CODE_FLASH0X8005000;
 8000b86:	4a61      	ldr	r2, [pc, #388]	; (8000d0c <dfuUpdateByRequest+0x210>)
                    userAppEnd = getFlashEnd();
                    break;
                case 2:
                    userAppAddr = USER_CODE_FLASH0X8002000;
 8000b88:	4b5d      	ldr	r3, [pc, #372]	; (8000d00 <dfuUpdateByRequest+0x204>)
 8000b8a:	601a      	str	r2, [r3, #0]
                    userAppEnd = getFlashEnd();
 8000b8c:	f7ff fede 	bl	800094c <getFlashEnd>
 8000b90:	4b5f      	ldr	r3, [pc, #380]	; (8000d10 <dfuUpdateByRequest+0x214>)
 8000b92:	6018      	str	r0, [r3, #0]
                    break;
 8000b94:	e0a0      	b.n	8000cd8 <dfuUpdateByRequest+0x1dc>
                #endif
                default:
                // Roger Clark.
                // Changed this to report error that its unable to write to this memory
                // However the code should never get here as only AlternateSetting 1 and 2 are allowed (see above)
                    dfuAppStatus.bState  = dfuERROR;
 8000b96:	230a      	movs	r3, #10
 8000b98:	7123      	strb	r3, [r4, #4]
                    dfuAppStatus.bStatus = errWRITE;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	e09b      	b.n	8000cd6 <dfuUpdateByRequest+0x1da>
                    break;
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8000b9e:	2806      	cmp	r0, #6
 8000ba0:	d03c      	beq.n	8000c1c <dfuUpdateByRequest+0x120>
            dfuAppStatus.bState  = dfuIDLE;
            dfuAppStatus.bStatus = OK;  /* are we really ok? we were just aborted */
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000ba2:	2803      	cmp	r0, #3
 8000ba4:	d019      	beq.n	8000bda <dfuUpdateByRequest+0xde>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000ba6:	2805      	cmp	r0, #5
 8000ba8:	e03c      	b.n	8000c24 <dfuUpdateByRequest+0x128>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuDNLOAD_SYNC)         {
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d10b      	bne.n	8000bc6 <dfuUpdateByRequest+0xca>
        /* device received block, waiting for DFU_GETSTATUS request */

        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000bae:	4a50      	ldr	r2, [pc, #320]	; (8000cf0 <dfuUpdateByRequest+0x1f4>)
 8000bb0:	6812      	ldr	r2, [r2, #0]
 8000bb2:	7852      	ldrb	r2, [r2, #1]
 8000bb4:	2a03      	cmp	r2, #3
 8000bb6:	d104      	bne.n	8000bc2 <dfuUpdateByRequest+0xc6>

            }
            else
            */
            {
                dfuAppStatus.bState = dfuDNLOAD_IDLE;
 8000bb8:	2305      	movs	r3, #5
 8000bba:	7123      	strb	r3, [r4, #4]
                dfuCopyBufferToExec();
 8000bbc:	f7ff ff70 	bl	8000aa0 <dfuCopyBufferToExec>
 8000bc0:	e08a      	b.n	8000cd8 <dfuUpdateByRequest+0x1dc>
            }

        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000bc2:	2a05      	cmp	r2, #5
 8000bc4:	e02e      	b.n	8000c24 <dfuUpdateByRequest+0x128>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuDNBUSY)              {
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	d109      	bne.n	8000bde <dfuUpdateByRequest+0xe2>
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {
 8000bca:	4952      	ldr	r1, [pc, #328]	; (8000d14 <dfuUpdateByRequest+0x218>)
 8000bcc:	7808      	ldrb	r0, [r1, #0]
 8000bce:	2802      	cmp	r0, #2
 8000bd0:	d103      	bne.n	8000bda <dfuUpdateByRequest+0xde>
            dfuAppStatus.bwPollTimeout0 = 0x00;
            code_copy_lock = WAIT;
 8000bd2:	2303      	movs	r3, #3
        }

    } else if (startState == dfuDNBUSY)              {
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {
            dfuAppStatus.bwPollTimeout0 = 0x00;
 8000bd4:	7062      	strb	r2, [r4, #1]
            code_copy_lock = WAIT;
 8000bd6:	700b      	strb	r3, [r1, #0]
            dfuAppStatus.bState = dfuDNLOAD_IDLE;
 8000bd8:	2305      	movs	r3, #5
 8000bda:	7123      	strb	r3, [r4, #4]
 8000bdc:	e07c      	b.n	8000cd8 <dfuUpdateByRequest+0x1dc>
        } else {
            dfuAppStatus.bState = dfuDNBUSY;
        }

    } else if (startState == dfuDNLOAD_IDLE)         {
 8000bde:	2b05      	cmp	r3, #5
 8000be0:	d114      	bne.n	8000c0c <dfuUpdateByRequest+0x110>
        /* device is expecting dfu_dnload requests */
        if (pInformation->USBbRequest == DFU_DNLOAD) {
 8000be2:	4b43      	ldr	r3, [pc, #268]	; (8000cf0 <dfuUpdateByRequest+0x1f4>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	7853      	ldrb	r3, [r2, #1]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d108      	bne.n	8000bfe <dfuUpdateByRequest+0x102>
            if (pInformation->USBwLengths.w > 0) {
 8000bec:	88d3      	ldrh	r3, [r2, #6]
 8000bee:	b10b      	cbz	r3, 8000bf4 <dfuUpdateByRequest+0xf8>
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e7f2      	b.n	8000bda <dfuUpdateByRequest+0xde>
            } else {
                /* todo, support "disagreement" if device expects more data than this */
                dfuAppStatus.bState  = dfuMANIFEST_SYNC;
 8000bf4:	2306      	movs	r3, #6
 8000bf6:	7123      	strb	r3, [r4, #4]

                /* relock the flash */
                flashLock();
 8000bf8:	f7ff fe8c 	bl	8000914 <flashLock>
 8000bfc:	e06c      	b.n	8000cd8 <dfuUpdateByRequest+0x1dc>
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8000bfe:	2b06      	cmp	r3, #6
 8000c00:	d04d      	beq.n	8000c9e <dfuUpdateByRequest+0x1a2>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d04b      	beq.n	8000c9e <dfuUpdateByRequest+0x1a2>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000c06:	2b05      	cmp	r3, #5
 8000c08:	d162      	bne.n	8000cd0 <dfuUpdateByRequest+0x1d4>
 8000c0a:	e048      	b.n	8000c9e <dfuUpdateByRequest+0x1a2>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuMANIFEST_SYNC)       {
 8000c0c:	2b06      	cmp	r3, #6
 8000c0e:	d10b      	bne.n	8000c28 <dfuUpdateByRequest+0x12c>
        /* device has received last block, waiting DFU_GETSTATUS request */

        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000c10:	4937      	ldr	r1, [pc, #220]	; (8000cf0 <dfuUpdateByRequest+0x1f4>)
 8000c12:	6809      	ldr	r1, [r1, #0]
 8000c14:	7849      	ldrb	r1, [r1, #1]
 8000c16:	2903      	cmp	r1, #3
 8000c18:	d103      	bne.n	8000c22 <dfuUpdateByRequest+0x126>
            dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	7123      	strb	r3, [r4, #4]
            dfuAppStatus.bStatus = OK;
 8000c1e:	7022      	strb	r2, [r4, #0]
 8000c20:	e05a      	b.n	8000cd8 <dfuUpdateByRequest+0x1dc>
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000c22:	2905      	cmp	r1, #5
 8000c24:	d154      	bne.n	8000cd0 <dfuUpdateByRequest+0x1d4>
 8000c26:	e7d8      	b.n	8000bda <dfuUpdateByRequest+0xde>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuMANIFEST)            {
 8000c28:	2b07      	cmp	r3, #7
 8000c2a:	d0f6      	beq.n	8000c1a <dfuUpdateByRequest+0x11e>

        /* should never receive request while in manifest! */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
        dfuAppStatus.bStatus = OK;

    } else if (startState == dfuMANIFEST_WAIT_RESET) {
 8000c2c:	2b08      	cmp	r3, #8
 8000c2e:	d0d4      	beq.n	8000bda <dfuUpdateByRequest+0xde>
           usb reset or power on reset to run the new code */

        /* consider timing out and self-resetting */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;

    } else if (startState == dfuUPLOAD_IDLE)         {
 8000c30:	2b09      	cmp	r3, #9
 8000c32:	d13c      	bne.n	8000cae <dfuUpdateByRequest+0x1b2>
        /* device expecting further dfu_upload requests */

        if (pInformation->USBbRequest == DFU_UPLOAD) {
 8000c34:	4b2e      	ldr	r3, [pc, #184]	; (8000cf0 <dfuUpdateByRequest+0x1f4>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	7853      	ldrb	r3, [r2, #1]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d12d      	bne.n	8000c9a <dfuUpdateByRequest+0x19e>
            if (pInformation->USBwLengths.w > 0) {
 8000c3e:	88d0      	ldrh	r0, [r2, #6]
 8000c40:	b338      	cbz	r0, 8000c92 <dfuUpdateByRequest+0x196>
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000c42:	4930      	ldr	r1, [pc, #192]	; (8000d04 <dfuUpdateByRequest+0x208>)
 8000c44:	8852      	ldrh	r2, [r2, #2]
 8000c46:	880b      	ldrh	r3, [r1, #0]
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8000c48:	4d2d      	ldr	r5, [pc, #180]	; (8000d00 <dfuUpdateByRequest+0x204>)
        /* device expecting further dfu_upload requests */

        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	4353      	muls	r3, r2
 8000c4e:	4a29      	ldr	r2, [pc, #164]	; (8000cf4 <dfuUpdateByRequest+0x1f8>)
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8000c50:	4e2f      	ldr	r6, [pc, #188]	; (8000d10 <dfuUpdateByRequest+0x214>)
        /* device expecting further dfu_upload requests */

        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000c52:	6013      	str	r3, [r2, #0]
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8000c54:	682f      	ldr	r7, [r5, #0]
 8000c56:	f8d2 8000 	ldr.w	r8, [r2]
 8000c5a:	f8b1 c000 	ldrh.w	ip, [r1]
 8000c5e:	4447      	add	r7, r8
 8000c60:	6833      	ldr	r3, [r6, #0]
 8000c62:	fa1f fc8c 	uxth.w	ip, ip
 8000c66:	4467      	add	r7, ip
 8000c68:	429f      	cmp	r7, r3
 8000c6a:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <dfuUpdateByRequest+0x20c>)
 8000c6c:	d803      	bhi.n	8000c76 <dfuUpdateByRequest+0x17a>
                    thisBlockLen = uploadBlockLen;
 8000c6e:	880a      	ldrh	r2, [r1, #0]
 8000c70:	b292      	uxth	r2, r2
 8000c72:	801a      	strh	r2, [r3, #0]
 8000c74:	e019      	b.n	8000caa <dfuUpdateByRequest+0x1ae>
                    dfuAppStatus.bState  = dfuUPLOAD_IDLE;
                } else {
                    /* if above comparison was just equal, thisBlockLen becomes zero
                    next time when USBWValue has been increased by one */
                    thisBlockLen = userAppEnd - userAppAddr - userFirmwareLen;
 8000c76:	6836      	ldr	r6, [r6, #0]
 8000c78:	682d      	ldr	r5, [r5, #0]
 8000c7a:	6811      	ldr	r1, [r2, #0]
 8000c7c:	1b72      	subs	r2, r6, r5
 8000c7e:	1a52      	subs	r2, r2, r1
 8000c80:	b292      	uxth	r2, r2
 8000c82:	801a      	strh	r2, [r3, #0]
                    /* check for overflow due to USBwValue out of range */
                    if (thisBlockLen >= pInformation->USBwLengths.w) {
 8000c84:	881a      	ldrh	r2, [r3, #0]
 8000c86:	b292      	uxth	r2, r2
 8000c88:	4282      	cmp	r2, r0
 8000c8a:	d308      	bcc.n	8000c9e <dfuUpdateByRequest+0x1a2>
                        thisBlockLen = 0;
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	801a      	strh	r2, [r3, #0]
 8000c90:	e005      	b.n	8000c9e <dfuUpdateByRequest+0x1a2>
                    }
                    dfuAppStatus.bState  = dfuIDLE;
                }
            } else {
                dfuAppStatus.bState  = dfuERROR;
 8000c92:	230a      	movs	r3, #10
 8000c94:	7123      	strb	r3, [r4, #4]
                dfuAppStatus.bStatus = errNOTDONE;
 8000c96:	2309      	movs	r3, #9
 8000c98:	e01d      	b.n	8000cd6 <dfuUpdateByRequest+0x1da>
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d101      	bne.n	8000ca2 <dfuUpdateByRequest+0x1a6>
            dfuAppStatus.bState  = dfuIDLE;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	e79b      	b.n	8000bda <dfuUpdateByRequest+0xde>
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d001      	beq.n	8000caa <dfuUpdateByRequest+0x1ae>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000ca6:	2b05      	cmp	r3, #5
 8000ca8:	d112      	bne.n	8000cd0 <dfuUpdateByRequest+0x1d4>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 8000caa:	2309      	movs	r3, #9
 8000cac:	e795      	b.n	8000bda <dfuUpdateByRequest+0xde>
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }


    } else if (startState == dfuERROR)               {
 8000cae:	2b0a      	cmp	r3, #10
 8000cb0:	d10e      	bne.n	8000cd0 <dfuUpdateByRequest+0x1d4>
        /* status is in error, awaiting DFU_CLRSTATUS request */

        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <dfuUpdateByRequest+0x1f4>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	785b      	ldrb	r3, [r3, #1]
 8000cb8:	2b03      	cmp	r3, #3
 8000cba:	d101      	bne.n	8000cc0 <dfuUpdateByRequest+0x1c4>
            /* todo, add routine to wait for last block write to finish */
            dfuAppStatus.bState  = dfuERROR;
 8000cbc:	230a      	movs	r3, #10
 8000cbe:	e78c      	b.n	8000bda <dfuUpdateByRequest+0xde>
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000cc0:	2b05      	cmp	r3, #5
 8000cc2:	d0fb      	beq.n	8000cbc <dfuUpdateByRequest+0x1c0>
            dfuAppStatus.bState  = dfuERROR;
        } else if (pInformation->USBbRequest == DFU_CLRSTATUS) {
 8000cc4:	2b04      	cmp	r3, #4
 8000cc6:	d103      	bne.n	8000cd0 <dfuUpdateByRequest+0x1d4>
            /* todo handle any cleanup we need here */
            dfuAppStatus.bState  = dfuIDLE;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	7123      	strb	r3, [r4, #4]
            dfuAppStatus.bStatus = OK;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	e002      	b.n	8000cd6 <dfuUpdateByRequest+0x1da>
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else {
        /* some kind of error... */
        dfuAppStatus.bState  = dfuERROR;
 8000cd0:	230a      	movs	r3, #10
 8000cd2:	7123      	strb	r3, [r4, #4]
        dfuAppStatus.bStatus = errSTALLEDPKT;
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	7023      	strb	r3, [r4, #0]
    }

    if (dfuAppStatus.bStatus == OK) {
 8000cd8:	7820      	ldrb	r0, [r4, #0]
        return TRUE;
    } else {
        return FALSE;
    }
}
 8000cda:	f1d0 0001 	rsbs	r0, r0, #1
 8000cde:	bf38      	it	cc
 8000ce0:	2000      	movcc	r0, #0
 8000ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000a1b 	andcs	r0, r0, fp, lsl sl
 8000cec:	20000a15 	andcs	r0, r0, r5, lsl sl
 8000cf0:	200001fc 	strdcs	r0, [r0], -ip
 8000cf4:	20000a10 	andcs	r0, r0, r0, lsl sl
 8000cf8:	20000a14 	andcs	r0, r0, r4, lsl sl
 8000cfc:	08002000 	stmdaeq	r0, {sp}
 8000d00:	200001bc 			; <UNDEFINED> instruction: 0x200001bc
 8000d04:	20000a0c 	andcs	r0, r0, ip, lsl #20
 8000d08:	20000a0e 	andcs	r0, r0, lr, lsl #20
 8000d0c:	08005000 	stmdaeq	r0, {ip, lr}
 8000d10:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
 8000d14:	200001c8 	andcs	r0, r0, r8, asr #3

08000d18 <dfuUploadStarted>:
void dfuSetState(u8 newState) {
    dfuAppStatus.bState = newState;
}

bool dfuUploadStarted() {
    return dfuBusy;
 8000d18:	4b01      	ldr	r3, [pc, #4]	; (8000d20 <dfuUploadStarted+0x8>)
 8000d1a:	7818      	ldrb	r0, [r3, #0]
}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000a1b 	andcs	r0, r0, fp, lsl sl

08000d24 <dfuFinishUpload>:

void dfuFinishUpload() {
    while (1)
    {
        __asm("nop");
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <dfuFinishUpload>

08000d28 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(u8 bEpNum, u16 wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8000d28:	0080      	lsls	r0, r0, #2
 8000d2a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000d2e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000d32:	6803      	ldr	r3, [r0, #0]
 8000d34:	06ca      	lsls	r2, r1, #27
 8000d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	bf48      	it	mi
 8000d42:	f083 0310 	eormi.w	r3, r3, #16
 8000d46:	068a      	lsls	r2, r1, #26
 8000d48:	bf48      	it	mi
 8000d4a:	f083 0320 	eormi.w	r3, r3, #32
 8000d4e:	6003      	str	r3, [r0, #0]
 8000d50:	4770      	bx	lr

08000d52 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(u8 bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8000d52:	0080      	lsls	r0, r0, #2
 8000d54:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000d58:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000d5c:	6803      	ldr	r3, [r0, #0]
 8000d5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000d6c:	6003      	str	r3, [r0, #0]
 8000d6e:	4770      	bx	lr

08000d70 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(u8 bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8000d70:	0080      	lsls	r0, r0, #2
 8000d72:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000d76:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000d7a:	6803      	ldr	r3, [r0, #0]
 8000d7c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8000d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d84:	041b      	lsls	r3, r3, #16
 8000d86:	0c1b      	lsrs	r3, r3, #16
 8000d88:	6003      	str	r3, [r0, #0]
 8000d8a:	4770      	bx	lr

08000d8c <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(u8 bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8000d8c:	0080      	lsls	r0, r0, #2
 8000d8e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000d92:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000d96:	6803      	ldr	r3, [r0, #0]
 8000d98:	045b      	lsls	r3, r3, #17
 8000d9a:	d506      	bpl.n	8000daa <ClearDTOG_RX+0x1e>
 8000d9c:	6802      	ldr	r2, [r0, #0]
 8000d9e:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8000da2:	4013      	ands	r3, r2
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6003      	str	r3, [r0, #0]
 8000daa:	4770      	bx	lr

08000dac <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(u8 bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8000dac:	0080      	lsls	r0, r0, #2
 8000dae:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000db2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000db6:	6803      	ldr	r3, [r0, #0]
 8000db8:	065b      	lsls	r3, r3, #25
 8000dba:	d506      	bpl.n	8000dca <ClearDTOG_TX+0x1e>
 8000dbc:	6802      	ldr	r2, [r0, #0]
 8000dbe:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc8:	6003      	str	r3, [r0, #0]
 8000dca:	4770      	bx	lr

08000dcc <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPTxAddr(u8 bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <GetEPTxAddr+0x18>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000dd6:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8000dda:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8000dde:	0040      	lsls	r0, r0, #1
}
 8000de0:	8800      	ldrh	r0, [r0, #0]
 8000de2:	4770      	bx	lr
 8000de4:	40005c50 	andmi	r5, r0, r0, asr ip

08000de8 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPRxAddr(u8 bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <GetEPRxAddr+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000df2:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <GetEPRxAddr+0x18>)
 8000df4:	4403      	add	r3, r0
 8000df6:	005b      	lsls	r3, r3, #1
}
 8000df8:	8818      	ldrh	r0, [r3, #0]
 8000dfa:	4770      	bx	lr
 8000dfc:	40005c50 	andmi	r5, r0, r0, asr ip
 8000e00:	20003004 	andcs	r3, r0, r4

08000e04 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(u8 bEpNum, u16 wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <SetEPTxCount+0x14>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e0e:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <SetEPTxCount+0x18>)
 8000e10:	4403      	add	r3, r0
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	6019      	str	r1, [r3, #0]
 8000e16:	4770      	bx	lr
 8000e18:	40005c50 	andmi	r5, r0, r0, asr ip
 8000e1c:	20003002 	andcs	r3, r0, r2

08000e20 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(u8 bEpNum, u16 wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8000e20:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <SetEPRxCount+0x38>)
 8000e22:	293e      	cmp	r1, #62	; 0x3e
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <SetEPRxCount+0x3c>)
 8000e2e:	4403      	add	r3, r0
 8000e30:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8000e34:	d909      	bls.n	8000e4a <SetEPRxCount+0x2a>
 8000e36:	094b      	lsrs	r3, r1, #5
 8000e38:	06c8      	lsls	r0, r1, #27
 8000e3a:	bf04      	itt	eq
 8000e3c:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 8000e40:	b29b      	uxtheq	r3, r3
 8000e42:	029b      	lsls	r3, r3, #10
 8000e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e48:	e004      	b.n	8000e54 <SetEPRxCount+0x34>
 8000e4a:	084b      	lsrs	r3, r1, #1
 8000e4c:	07c9      	lsls	r1, r1, #31
 8000e4e:	bf48      	it	mi
 8000e50:	3301      	addmi	r3, #1
 8000e52:	029b      	lsls	r3, r3, #10
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	4770      	bx	lr
 8000e58:	40005c50 	andmi	r5, r0, r0, asr ip
 8000e5c:	20003006 	andcs	r3, r0, r6

08000e60 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8000e60:	b570      	push	{r4, r5, r6, lr}
  u32 wEPVal = 0;
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8000e62:	4a4c      	ldr	r2, [pc, #304]	; (8000f94 <CTR_LP+0x134>)
 8000e64:	4b4c      	ldr	r3, [pc, #304]	; (8000f98 <CTR_LP+0x138>)
 8000e66:	6811      	ldr	r1, [r2, #0]
 8000e68:	b288      	uxth	r0, r1
 8000e6a:	040c      	lsls	r4, r1, #16
 8000e6c:	8018      	strh	r0, [r3, #0]
 8000e6e:	f140 8090 	bpl.w	8000f92 <CTR_LP+0x132>
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
 8000e72:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000e76:	6011      	str	r1, [r2, #0]
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
 8000e78:	881a      	ldrh	r2, [r3, #0]
 8000e7a:	4c48      	ldr	r4, [pc, #288]	; (8000f9c <CTR_LP+0x13c>)
 8000e7c:	f002 020f 	and.w	r2, r2, #15
 8000e80:	7022      	strb	r2, [r4, #0]
    if (EPindex == 0)
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d15f      	bne.n	8000f46 <CTR_LP+0xe6>
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 8000e86:	4c46      	ldr	r4, [pc, #280]	; (8000fa0 <CTR_LP+0x140>)
 8000e88:	4d46      	ldr	r5, [pc, #280]	; (8000fa4 <CTR_LP+0x144>)
 8000e8a:	6822      	ldr	r2, [r4, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 8000e8c:	4e46      	ldr	r6, [pc, #280]	; (8000fa8 <CTR_LP+0x148>)
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 8000e8e:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8000e92:	802a      	strh	r2, [r5, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 8000e94:	6822      	ldr	r2, [r4, #0]
 8000e96:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8000e9a:	8032      	strh	r2, [r6, #0]
      _SetEPRxStatus(ENDP0, EP_RX_NAK);
 8000e9c:	6822      	ldr	r2, [r4, #0]
 8000e9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ea2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000ea6:	b292      	uxth	r2, r2
 8000ea8:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8000eac:	6022      	str	r2, [r4, #0]
      _SetEPTxStatus(ENDP0, EP_TX_NAK);
 8000eae:	6822      	ldr	r2, [r4, #0]
 8000eb0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000eb8:	b292      	uxth	r2, r2
 8000eba:	f082 0220 	eor.w	r2, r2, #32
 8000ebe:	6022      	str	r2, [r4, #0]


      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	06d8      	lsls	r0, r3, #27
 8000ec4:	d502      	bpl.n	8000ecc <CTR_LP+0x6c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8000ec6:	6823      	ldr	r3, [r4, #0]
        if ((wEPVal & EP_CTR_TX) != 0)
 8000ec8:	0619      	lsls	r1, r3, #24
 8000eca:	d507      	bpl.n	8000edc <CTR_LP+0x7c>
        {
          _ClearEP_CTR_TX(ENDP0);
 8000ecc:	6822      	ldr	r2, [r4, #0]
 8000ece:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	6023      	str	r3, [r4, #0]
          In0_Process();
 8000ed6:	f000 fc61 	bl	800179c <In0_Process>
 8000eda:	e012      	b.n	8000f02 <CTR_LP+0xa2>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }
        else if ((wEPVal &EP_SETUP) != 0)
 8000edc:	051a      	lsls	r2, r3, #20
 8000ede:	d507      	bpl.n	8000ef0 <CTR_LP+0x90>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8000ee0:	6822      	ldr	r2, [r4, #0]
 8000ee2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 8000eea:	f000 fa69 	bl	80013c0 <Setup0_Process>
 8000eee:	e008      	b.n	8000f02 <CTR_LP+0xa2>
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8000ef0:	0418      	lsls	r0, r3, #16
 8000ef2:	d5b6      	bpl.n	8000e62 <CTR_LP+0x2>
        {
          _ClearEP_CTR_RX(ENDP0);
 8000ef4:	6822      	ldr	r2, [r4, #0]
 8000ef6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000efa:	4013      	ands	r3, r2
 8000efc:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8000efe:	f000 fbcd 	bl	800169c <Out0_Process>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	882a      	ldrh	r2, [r5, #0]
 8000f06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	04d1      	lsls	r1, r2, #19
 8000f12:	bf48      	it	mi
 8000f14:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 8000f18:	0495      	lsls	r5, r2, #18
 8000f1a:	4a21      	ldr	r2, [pc, #132]	; (8000fa0 <CTR_LP+0x140>)
 8000f1c:	bf48      	it	mi
 8000f1e:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 8000f22:	6013      	str	r3, [r2, #0]
          _SetEPTxStatus(ENDP0, SaveTState);
 8000f24:	6813      	ldr	r3, [r2, #0]
 8000f26:	8831      	ldrh	r1, [r6, #0]
 8000f28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	06cc      	lsls	r4, r1, #27
 8000f34:	bf48      	it	mi
 8000f36:	f083 0310 	eormi.w	r3, r3, #16
 8000f3a:	0688      	lsls	r0, r1, #26
 8000f3c:	bf48      	it	mi
 8000f3e:	f083 0320 	eormi.w	r3, r3, #32
 8000f42:	6013      	str	r3, [r2, #0]
          return;
 8000f44:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8000f46:	0093      	lsls	r3, r2, #2
 8000f48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f4c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000f50:	681d      	ldr	r5, [r3, #0]
      if ((wEPVal & EP_CTR_RX) != 0)
 8000f52:	0429      	lsls	r1, r5, #16
 8000f54:	d509      	bpl.n	8000f6a <CTR_LP+0x10a>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8000f56:	6818      	ldr	r0, [r3, #0]
 8000f58:	f640 718f 	movw	r1, #3983	; 0xf8f
 8000f5c:	4001      	ands	r1, r0
 8000f5e:	6019      	str	r1, [r3, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <CTR_LP+0x14c>)
 8000f62:	3a01      	subs	r2, #1
 8000f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f68:	4798      	blx	r3

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8000f6a:	062b      	lsls	r3, r5, #24
 8000f6c:	f57f af79 	bpl.w	8000e62 <CTR_LP+0x2>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8000f70:	7821      	ldrb	r1, [r4, #0]
 8000f72:	f648 720f 	movw	r2, #36623	; 0x8f0f
 8000f76:	008b      	lsls	r3, r1, #2
 8000f78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f7c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000f80:	6818      	ldr	r0, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8000f82:	3901      	subs	r1, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8000f84:	4002      	ands	r2, r0
 8000f86:	601a      	str	r2, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <CTR_LP+0x150>)
 8000f8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f8e:	4798      	blx	r3
 8000f90:	e767      	b.n	8000e62 <CTR_LP+0x2>
 8000f92:	bd70      	pop	{r4, r5, r6, pc}
 8000f94:	40005c44 	andmi	r5, r0, r4, asr #24
 8000f98:	200001c4 	andcs	r0, r0, r4, asr #3
 8000f9c:	200001d8 	ldrdcs	r0, [r0], -r8
 8000fa0:	40005c00 	andmi	r5, r0, r0, lsl #24
 8000fa4:	200001ca 	andcs	r0, r0, sl, asr #3
 8000fa8:	200001cc 	andcs	r0, r0, ip, asr #3
 8000fac:	20000050 	andcs	r0, r0, r0, asr r0
 8000fb0:	20000034 	andcs	r0, r0, r4, lsr r0

08000fb4 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8000fb4:	b508      	push	{r3, lr}
  pInformation = &Device_Info;
 8000fb6:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <USB_Init+0x20>)
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <USB_Init+0x24>)
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <USB_Init+0x28>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 8000fbc:	6013      	str	r3, [r2, #0]
  pInformation->ControlState = 2;
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	721a      	strb	r2, [r3, #8]
  pProperty = &Device_Property;
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <USB_Init+0x2c>)
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <USB_Init+0x30>)
 8000fc6:	6013      	str	r3, [r2, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <USB_Init+0x34>)
  /* Initialize devices one by one */

  pProperty->Init();
 8000fca:	681b      	ldr	r3, [r3, #0]
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8000fcc:	6011      	str	r1, [r2, #0]
  /* Initialize devices one by one */

  pProperty->Init();
 8000fce:	4798      	blx	r3
 8000fd0:	bd08      	pop	{r3, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200001fc 	strdcs	r0, [r0], -ip
 8000fd8:	200001dc 	ldrdcs	r0, [r0], -ip
 8000fdc:	2000006c 	andcs	r0, r0, ip, rrx
 8000fe0:	20000000 	andcs	r0, r0, r0
 8000fe4:	200001d4 	ldrdcs	r0, [r0], -r4
 8000fe8:	200001f8 	strdcs	r0, [r0], -r8

08000fec <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetConfiguration(u16 Length)
{
 8000fec:	b510      	push	{r4, lr}
 8000fee:	4c06      	ldr	r4, [pc, #24]	; (8001008 <Standard_GetConfiguration+0x1c>)
  if (Length == 0)
 8000ff0:	b918      	cbnz	r0, 8000ffa <Standard_GetConfiguration+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8000ff2:	6823      	ldr	r3, [r4, #0]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8000ff8:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <Standard_GetConfiguration+0x20>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4798      	blx	r3
  return (u8 *)&pInformation->Current_Configuration;
 8001002:	6820      	ldr	r0, [r4, #0]
 8001004:	300a      	adds	r0, #10
}
 8001006:	bd10      	pop	{r4, pc}
 8001008:	200001fc 	strdcs	r0, [r0], -ip
 800100c:	200001f8 	strdcs	r0, [r0], -r8

08001010 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetInterface(u16 Length)
{
 8001010:	b510      	push	{r4, lr}
 8001012:	4c06      	ldr	r4, [pc, #24]	; (800102c <Standard_GetInterface+0x1c>)
  if (Length == 0)
 8001014:	b918      	cbnz	r0, 800101e <Standard_GetInterface+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	2201      	movs	r2, #1
 800101a:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 800101c:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetInterface();
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <Standard_GetInterface+0x20>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	4798      	blx	r3
  return (u8 *)&pInformation->Current_AlternateSetting;
 8001026:	6820      	ldr	r0, [r4, #0]
 8001028:	300c      	adds	r0, #12
}
 800102a:	bd10      	pop	{r4, pc}
 800102c:	200001fc 	strdcs	r0, [r0], -ip
 8001030:	200001f8 	strdcs	r0, [r0], -r8

08001034 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
u8 *Standard_GetStatus(u16 Length)
{
 8001034:	b510      	push	{r4, lr}
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <Standard_GetStatus+0x84>)
  if (Length == 0)
 8001038:	b918      	cbnz	r0, 8001042 <Standard_GetStatus+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2202      	movs	r2, #2
 800103e:	821a      	strh	r2, [r3, #16]
    return 0;
 8001040:	bd10      	pop	{r4, pc}
  }

  StatusInfo.w = 0;
 8001042:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <Standard_GetStatus+0x88>)
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001044:	6819      	ldr	r1, [r3, #0]
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  StatusInfo.w = 0;
 8001046:	2000      	movs	r0, #0
 8001048:	8010      	strh	r0, [r2, #0]
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800104a:	780c      	ldrb	r4, [r1, #0]
 800104c:	4613      	mov	r3, r2
 800104e:	f014 047f 	ands.w	r4, r4, #127	; 0x7f
 8001052:	d10d      	bne.n	8001070 <Standard_GetStatus+0x3c>
  {
    /*Get Device Status */
    u8 Feature = pInformation->Current_Feature;
 8001054:	7a4a      	ldrb	r2, [r1, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 8001056:	0691      	lsls	r1, r2, #26
    {
      SetBit(StatusInfo0, 1);
 8001058:	bf44      	itt	mi
 800105a:	2102      	movmi	r1, #2
 800105c:	7019      	strbmi	r1, [r3, #0]
    }

    /* Bus-powered */
    if (ValBit(Feature, 6))
 800105e:	f012 0f40 	tst.w	r2, #64	; 0x40
    {
      ClrBit(StatusInfo0, 0);
 8001062:	781a      	ldrb	r2, [r3, #0]
 8001064:	bf14      	ite	ne
 8001066:	f022 0201 	bicne.w	r2, r2, #1
    }
    else /* Self-powered */
    {
      SetBit(StatusInfo0, 0);
 800106a:	f042 0201 	orreq.w	r2, r2, #1
 800106e:	e014      	b.n	800109a <Standard_GetStatus+0x66>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001070:	2c01      	cmp	r4, #1
 8001072:	d01f      	beq.n	80010b4 <Standard_GetStatus+0x80>
  {
    return (u8 *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001074:	2c02      	cmp	r4, #2
 8001076:	d11e      	bne.n	80010b6 <Standard_GetStatus+0x82>
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;
 8001078:	7909      	ldrb	r1, [r1, #4]

    Related_Endpoint = (wIndex0 & 0x0f);
 800107a:	f001 020f 	and.w	r2, r1, #15
 800107e:	0092      	lsls	r2, r2, #2
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001080:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001084:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8001088:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800108c:	6812      	ldr	r2, [r2, #0]
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 800108e:	d006      	beq.n	800109e <Standard_GetStatus+0x6a>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001090:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001094:	2a10      	cmp	r2, #16
 8001096:	d107      	bne.n	80010a8 <Standard_GetStatus+0x74>
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
 800109c:	e004      	b.n	80010a8 <Standard_GetStatus+0x74>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800109e:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80010a2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80010a6:	e7f6      	b.n	8001096 <Standard_GetStatus+0x62>
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <Standard_GetStatus+0x8c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	4798      	blx	r3
  return (u8 *)&StatusInfo;
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <Standard_GetStatus+0x88>)
 80010b2:	bd10      	pop	{r4, pc}
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    return (u8 *)&StatusInfo;
 80010b4:	4610      	mov	r0, r2
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
  return (u8 *)&StatusInfo;
}
 80010b6:	bd10      	pop	{r4, pc}
 80010b8:	200001fc 	strdcs	r0, [r0], -ip
 80010bc:	20000202 	andcs	r0, r0, r2, lsl #4
 80010c0:	200001f8 	strdcs	r0, [r0], -r8

080010c4 <DataStageIn>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 80010c4:	4a23      	ldr	r2, [pc, #140]	; (8001154 <DataStageIn+0x90>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 80010c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 80010ca:	6814      	ldr	r4, [r2, #0]
 80010cc:	4690      	mov	r8, r2
  u32 save_wLength = pEPinfo->Usb_wLength;
 80010ce:	8a23      	ldrh	r3, [r4, #16]
  u32 ControlState = pInformation->ControlState;
 80010d0:	7a26      	ldrb	r6, [r4, #8]
 80010d2:	4f21      	ldr	r7, [pc, #132]	; (8001158 <DataStageIn+0x94>)

  u8 *DataBuffer;
  u32 Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 80010d4:	b9a3      	cbnz	r3, 8001100 <DataStageIn+0x3c>
 80010d6:	2e04      	cmp	r6, #4
 80010d8:	d112      	bne.n	8001100 <DataStageIn+0x3c>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 80010da:	4920      	ldr	r1, [pc, #128]	; (800115c <DataStageIn+0x98>)
 80010dc:	780a      	ldrb	r2, [r1, #0]
 80010de:	2a01      	cmp	r2, #1
 80010e0:	d10a      	bne.n	80010f8 <DataStageIn+0x34>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 80010e2:	4a1f      	ldr	r2, [pc, #124]	; (8001160 <DataStageIn+0x9c>)
 80010e4:	6810      	ldr	r0, [r2, #0]
 80010e6:	4a1f      	ldr	r2, [pc, #124]	; (8001164 <DataStageIn+0xa0>)
 80010e8:	b280      	uxth	r0, r0
 80010ea:	4402      	add	r2, r0
 80010ec:	0052      	lsls	r2, r2, #1
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	2230      	movs	r2, #48	; 0x30
 80010f2:	803a      	strh	r2, [r7, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 80010f4:	700b      	strb	r3, [r1, #0]
 80010f6:	e027      	b.n	8001148 <DataStageIn+0x84>
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 80010f8:	2310      	movs	r3, #16
 80010fa:	803b      	strh	r3, [r7, #0]
      Data_Mul_MaxPacketSize = FALSE;
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
 80010fc:	2607      	movs	r6, #7
 80010fe:	e023      	b.n	8001148 <DataStageIn+0x84>
    }

    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8001100:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8001102:	42ab      	cmp	r3, r5
 8001104:	bf8c      	ite	hi
 8001106:	2602      	movhi	r6, #2
 8001108:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800110a:	429d      	cmp	r5, r3
 800110c:	bf28      	it	cs
 800110e:	461d      	movcs	r5, r3
 8001110:	4628      	mov	r0, r5
 8001112:	69a3      	ldr	r3, [r4, #24]
 8001114:	4798      	blx	r3
 8001116:	4681      	mov	r9, r0

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff fe57 	bl	8000dcc <GetEPTxAddr>
 800111e:	462a      	mov	r2, r5
 8001120:	4601      	mov	r1, r0
 8001122:	4648      	mov	r0, r9
 8001124:	f000 fb68 	bl	80017f8 <UserToPMABufferCopy>

  SetEPTxCount(ENDP0, Length);
 8001128:	4629      	mov	r1, r5
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff fe6a 	bl	8000e04 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
 8001130:	8a23      	ldrh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001132:	f44f 5240 	mov.w	r2, #12288	; 0x3000

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8001136:	1b5b      	subs	r3, r3, r5
 8001138:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 800113a:	8a63      	ldrh	r3, [r4, #18]
 800113c:	441d      	add	r5, r3
  vSetEPTxStatus(EP_TX_VALID);
 800113e:	2330      	movs	r3, #48	; 0x30
 8001140:	803b      	strh	r3, [r7, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <DataStageIn+0xa4>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8001144:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001146:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8001148:	f8d8 3000 	ldr.w	r3, [r8]
 800114c:	721e      	strb	r6, [r3, #8]
 800114e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001152:	bf00      	nop
 8001154:	200001fc 	strdcs	r0, [r0], -ip
 8001158:	200001cc 	andcs	r0, r0, ip, asr #3
 800115c:	20000a1c 	andcs	r0, r0, ip, lsl sl
 8001160:	40005c50 	andmi	r5, r0, r0, asr ip
 8001164:	20003002 	andcs	r3, r0, r2
 8001168:	200001ca 	andcs	r0, r0, sl, asr #3

0800116c <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 800116c:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <Standard_SetConfiguration+0x2c>)
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001170:	490a      	ldr	r1, [pc, #40]	; (800119c <Standard_SetConfiguration+0x30>)
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	7849      	ldrb	r1, [r1, #1]
 8001176:	789a      	ldrb	r2, [r3, #2]
 8001178:	4291      	cmp	r1, r2
 800117a:	d30a      	bcc.n	8001192 <Standard_SetConfiguration+0x26>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800117c:	78d9      	ldrb	r1, [r3, #3]
 800117e:	b941      	cbnz	r1, 8001192 <Standard_SetConfiguration+0x26>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8001180:	889c      	ldrh	r4, [r3, #4]
 8001182:	b934      	cbnz	r4, 8001192 <Standard_SetConfiguration+0x26>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8001184:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <Standard_SetConfiguration+0x34>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	4798      	blx	r3
    return USB_SUCCESS;
 800118e:	4620      	mov	r0, r4
 8001190:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USB_UNSUPPORT;
 8001192:	2002      	movs	r0, #2
  }
}
 8001194:	bd10      	pop	{r4, pc}
 8001196:	bf00      	nop
 8001198:	200001fc 	strdcs	r0, [r0], -ip
 800119c:	20000090 	mulcs	r0, r0, r0
 80011a0:	200001f8 	strdcs	r0, [r0], -r8

080011a4 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 80011a4:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 80011a6:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <Standard_SetInterface+0x3c>)
 80011a8:	4c0e      	ldr	r4, [pc, #56]	; (80011e4 <Standard_SetInterface+0x40>)
 80011aa:	6812      	ldr	r2, [r2, #0]
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	6992      	ldr	r2, [r2, #24]
 80011b0:	7918      	ldrb	r0, [r3, #4]
 80011b2:	7899      	ldrb	r1, [r3, #2]
 80011b4:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 80011b6:	6823      	ldr	r3, [r4, #0]
 80011b8:	7a9a      	ldrb	r2, [r3, #10]
 80011ba:	b17a      	cbz	r2, 80011dc <Standard_SetInterface+0x38>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 80011bc:	b970      	cbnz	r0, 80011dc <Standard_SetInterface+0x38>
 80011be:	795a      	ldrb	r2, [r3, #5]
 80011c0:	b962      	cbnz	r2, 80011dc <Standard_SetInterface+0x38>
        || (pInformation->USBwValue1 != 0))
 80011c2:	78dd      	ldrb	r5, [r3, #3]
 80011c4:	b955      	cbnz	r5, 80011dc <Standard_SetInterface+0x38>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <Standard_SetInterface+0x44>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80011ce:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 80011d0:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80011d2:	791a      	ldrb	r2, [r3, #4]
 80011d4:	72da      	strb	r2, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 80011d6:	789a      	ldrb	r2, [r3, #2]
 80011d8:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 80011da:	bd38      	pop	{r3, r4, r5, pc}
    }

  }

  return USB_UNSUPPORT;
 80011dc:	2002      	movs	r0, #2
}
 80011de:	bd38      	pop	{r3, r4, r5, pc}
 80011e0:	200001d4 	ldrdcs	r0, [r0], -r4
 80011e4:	200001fc 	strdcs	r0, [r0], -ip
 80011e8:	200001f8 	strdcs	r0, [r0], -r8

080011ec <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 80011ec:	b538      	push	{r3, r4, r5, lr}
  u32     Type_Rec = Type_Recipient;
 80011ee:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <Standard_ClearFeature+0xc0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	7818      	ldrb	r0, [r3, #0]
  u32     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80011f4:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 80011f8:	d104      	bne.n	8001204 <Standard_ClearFeature+0x18>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 80011fa:	7a5a      	ldrb	r2, [r3, #9]
 80011fc:	f022 0220 	bic.w	r2, r2, #32
 8001200:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 8001202:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001204:	2802      	cmp	r0, #2
 8001206:	d14e      	bne.n	80012a6 <Standard_ClearFeature+0xba>
    DEVICE* pDev;
    u32 Related_Endpoint;
    u32 wIndex0;
    u32 rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8001208:	885a      	ldrh	r2, [r3, #2]
 800120a:	2a00      	cmp	r2, #0
 800120c:	d14c      	bne.n	80012a8 <Standard_ClearFeature+0xbc>
        || (pInformation->USBwIndex1 != 0))
 800120e:	795a      	ldrb	r2, [r3, #5]
 8001210:	2a00      	cmp	r2, #0
 8001212:	d149      	bne.n	80012a8 <Standard_ClearFeature+0xbc>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 8001214:	791a      	ldrb	r2, [r3, #4]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001216:	4d26      	ldr	r5, [pc, #152]	; (80012b0 <Standard_ClearFeature+0xc4>)
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
 8001218:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 800121c:	0084      	lsls	r4, r0, #2

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800121e:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 8001222:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8001226:	6809      	ldr	r1, [r1, #0]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001228:	782d      	ldrb	r5, [r5, #0]
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 800122a:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800122e:	bf14      	ite	ne
 8001230:	f001 0130 	andne.w	r1, r1, #48	; 0x30
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8001234:	f401 5140 	andeq.w	r1, r1, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001238:	42a8      	cmp	r0, r5
 800123a:	d234      	bcs.n	80012a6 <Standard_ClearFeature+0xba>
 800123c:	2900      	cmp	r1, #0
 800123e:	d032      	beq.n	80012a6 <Standard_ClearFeature+0xba>
        || (pInformation->Current_Configuration == 0))
 8001240:	7a9b      	ldrb	r3, [r3, #10]
 8001242:	b383      	cbz	r3, 80012a6 <Standard_ClearFeature+0xba>


    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001244:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001248:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 800124c:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 800124e:	6823      	ldr	r3, [r4, #0]
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8001250:	d50c      	bpl.n	800126c <Standard_ClearFeature+0x80>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001252:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001256:	2b10      	cmp	r3, #16
 8001258:	d11f      	bne.n	800129a <Standard_ClearFeature+0xae>
      {
        ClearDTOG_TX(Related_Endpoint);
 800125a:	b2c4      	uxtb	r4, r0
 800125c:	4620      	mov	r0, r4
 800125e:	f7ff fda5 	bl	8000dac <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8001262:	4620      	mov	r0, r4
 8001264:	2130      	movs	r1, #48	; 0x30
 8001266:	f7ff fd5f 	bl	8000d28 <SetEPTxStatus>
 800126a:	e016      	b.n	800129a <Standard_ClearFeature+0xae>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800126c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001274:	d111      	bne.n	800129a <Standard_ClearFeature+0xae>
      {
        if (Related_Endpoint == ENDP0)
 8001276:	b928      	cbnz	r0, 8001284 <Standard_ClearFeature+0x98>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <Standard_ClearFeature+0xc8>)
 800127a:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 800127e:	f7ff fdcf 	bl	8000e20 <SetEPRxCount>
 8001282:	e001      	b.n	8001288 <Standard_ClearFeature+0x9c>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 8001284:	f7ff fd82 	bl	8000d8c <ClearDTOG_RX>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8001288:	6823      	ldr	r3, [r4, #0]
 800128a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800128e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001292:	b29b      	uxth	r3, r3
 8001294:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001298:	6023      	str	r3, [r4, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <Standard_ClearFeature+0xcc>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	4798      	blx	r3
    return USB_SUCCESS;
 80012a2:	2000      	movs	r0, #0
 80012a4:	bd38      	pop	{r3, r4, r5, pc}
  }

  return USB_UNSUPPORT;
 80012a6:	2002      	movs	r0, #2
}
 80012a8:	bd38      	pop	{r3, r4, r5, pc}
 80012aa:	bf00      	nop
 80012ac:	200001fc 	strdcs	r0, [r0], -ip
 80012b0:	20000090 	mulcs	r0, r0, r0
 80012b4:	20000000 	andcs	r0, r0, r0
 80012b8:	200001f8 	strdcs	r0, [r0], -r8

080012bc <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 80012bc:	b538      	push	{r3, r4, r5, lr}
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <Standard_SetEndPointFeature+0x78>)
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80012c0:	4d1d      	ldr	r5, [pc, #116]	; (8001338 <Standard_SetEndPointFeature+0x7c>)
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 80012c2:	6819      	ldr	r1, [r3, #0]
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80012c4:	782d      	ldrb	r5, [r5, #0]
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 80012c6:	790a      	ldrb	r2, [r1, #4]
  rEP = wIndex0 & ~0x80;
 80012c8:	f022 0480 	bic.w	r4, r2, #128	; 0x80
 80012cc:	00a3      	lsls	r3, r4, #2

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80012ce:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 80012d2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80012d6:	6800      	ldr	r0, [r0, #0]

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 80012d8:	f012 0f80 	tst.w	r2, #128	; 0x80
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80012dc:	bf14      	ite	ne
 80012de:	f000 0030 	andne.w	r0, r0, #48	; 0x30
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 80012e2:	f400 5040 	andeq.w	r0, r0, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80012e6:	42ac      	cmp	r4, r5
 80012e8:	d222      	bcs.n	8001330 <Standard_SetEndPointFeature+0x74>
      || pInformation->USBwValue != 0 || Status == 0
 80012ea:	884c      	ldrh	r4, [r1, #2]
 80012ec:	bb04      	cbnz	r4, 8001330 <Standard_SetEndPointFeature+0x74>
 80012ee:	b1f8      	cbz	r0, 8001330 <Standard_SetEndPointFeature+0x74>
      || pInformation->Current_Configuration == 0)
 80012f0:	7a89      	ldrb	r1, [r1, #10]
 80012f2:	b1e9      	cbz	r1, 8001330 <Standard_SetEndPointFeature+0x74>
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80012f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012f8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80012fc:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001300:	681a      	ldr	r2, [r3, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8001302:	d007      	beq.n	8001314 <Standard_SetEndPointFeature+0x58>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001304:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800130c:	b292      	uxth	r2, r2
 800130e:	f082 0210 	eor.w	r2, r2, #16
 8001312:	e006      	b.n	8001322 <Standard_SetEndPointFeature+0x66>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8001314:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001318:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800131c:	b292      	uxth	r2, r2
 800131e:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8001322:	601a      	str	r2, [r3, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <Standard_SetEndPointFeature+0x80>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	4798      	blx	r3
  return USB_SUCCESS;
 800132c:	2000      	movs	r0, #0
 800132e:	bd38      	pop	{r3, r4, r5, pc}

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8001330:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 8001332:	bd38      	pop	{r3, r4, r5, pc}
 8001334:	200001fc 	strdcs	r0, [r0], -ip
 8001338:	20000090 	mulcs	r0, r0, r0
 800133c:	200001f8 	strdcs	r0, [r0], -r8

08001340 <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 8001340:	b508      	push	{r3, lr}
  SetBit(pInformation->Current_Feature, 5);
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <Standard_SetDeviceFeature+0x1c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	7a5a      	ldrb	r2, [r3, #9]
 8001348:	f042 0220 	orr.w	r2, r2, #32
 800134c:	725a      	strb	r2, [r3, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <Standard_SetDeviceFeature+0x20>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	4798      	blx	r3
  return USB_SUCCESS;
}
 8001356:	2000      	movs	r0, #0
 8001358:	bd08      	pop	{r3, pc}
 800135a:	bf00      	nop
 800135c:	200001fc 	strdcs	r0, [r0], -ip
 8001360:	200001f8 	strdcs	r0, [r0], -r8

08001364 <Standard_GetDescriptorData>:
*******************************************************************************/
u8 *Standard_GetDescriptorData(u16 Length, ONE_DESCRIPTOR *pDesc)
{
  u32  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <Standard_GetDescriptorData+0x18>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	8a53      	ldrh	r3, [r2, #18]
  if (Length == 0)
 800136a:	b918      	cbnz	r0, 8001374 <Standard_GetDescriptorData+0x10>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 800136c:	8889      	ldrh	r1, [r1, #4]
 800136e:	1acb      	subs	r3, r1, r3
 8001370:	8213      	strh	r3, [r2, #16]
    return 0;
 8001372:	4770      	bx	lr
  }

  return pDesc->Descriptor + wOffset;
 8001374:	6808      	ldr	r0, [r1, #0]
 8001376:	4418      	add	r0, r3
}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	200001fc 	strdcs	r0, [r0], -ip

08001380 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
u8 Post0_Process(void)
{
 8001380:	b508      	push	{r3, lr}
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <Post0_Process+0x30>)
 8001384:	2000      	movs	r0, #0
 8001386:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 800138a:	f7ff fd49 	bl	8000e20 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <Post0_Process+0x34>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	7a18      	ldrb	r0, [r3, #8]
 8001394:	2808      	cmp	r0, #8
 8001396:	d106      	bne.n	80013a6 <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <Post0_Process+0x38>)
 800139a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800139e:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <Post0_Process+0x3c>)
 80013a2:	2210      	movs	r2, #16
 80013a4:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 80013a6:	f1b0 0309 	subs.w	r3, r0, #9
 80013aa:	4258      	negs	r0, r3
 80013ac:	4158      	adcs	r0, r3
 80013ae:	bd08      	pop	{r3, pc}
 80013b0:	20000000 	andcs	r0, r0, r0
 80013b4:	200001fc 	strdcs	r0, [r0], -ip
 80013b8:	200001ca 	andcs	r0, r0, sl, asr #3
 80013bc:	200001cc 	andcs	r0, r0, ip, asr #3

080013c0 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Setup0_Process(void)
{
 80013c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80013c2:	4e96      	ldr	r6, [pc, #600]	; (800161c <Setup0_Process+0x25c>)
 80013c4:	4b96      	ldr	r3, [pc, #600]	; (8001620 <Setup0_Process+0x260>)
 80013c6:	6832      	ldr	r2, [r6, #0]

  if (pInformation->ControlState != PAUSE)
 80013c8:	4d96      	ldr	r5, [pc, #600]	; (8001624 <Setup0_Process+0x264>)
 80013ca:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80013cc:	4413      	add	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 80013d2:	682b      	ldr	r3, [r5, #0]
 80013d4:	7a19      	ldrb	r1, [r3, #8]
 80013d6:	2909      	cmp	r1, #9
 80013d8:	d00f      	beq.n	80013fa <Setup0_Process+0x3a>
 80013da:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80013dc:	0052      	lsls	r2, r2, #1
 80013de:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80013e2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 80013e6:	7811      	ldrb	r1, [r2, #0]
 80013e8:	7019      	strb	r1, [r3, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 80013ea:	7851      	ldrb	r1, [r2, #1]
 80013ec:	7059      	strb	r1, [r3, #1]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = *pBuf.w++; /* wValue in Little Endian */
 80013ee:	8891      	ldrh	r1, [r2, #4]
 80013f0:	8059      	strh	r1, [r3, #2]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = *pBuf.w++; /* wIndex in Little Endian */
 80013f2:	8911      	ldrh	r1, [r2, #8]
 80013f4:	8099      	strh	r1, [r3, #4]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength in Little Endian */
 80013f6:	8992      	ldrh	r2, [r2, #12]
 80013f8:	80da      	strh	r2, [r3, #6]
  }

  pInformation->ControlState = SETTING_UP;
 80013fa:	2201      	movs	r2, #1
 80013fc:	721a      	strb	r2, [r3, #8]
  if (pInformation->USBwLength == 0)
 80013fe:	88da      	ldrh	r2, [r3, #6]
 8001400:	785c      	ldrb	r4, [r3, #1]
 8001402:	2a00      	cmp	r2, #0
 8001404:	d161      	bne.n	80014ca <Setup0_Process+0x10a>
{
  RESULT Result = USB_UNSUPPORT;
  u32 RequestNo = pInformation->USBbRequest;
  u32 ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001406:	781a      	ldrb	r2, [r3, #0]
 8001408:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 800140c:	d13a      	bne.n	8001484 <Setup0_Process+0xc4>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 800140e:	2c09      	cmp	r4, #9
 8001410:	d102      	bne.n	8001418 <Setup0_Process+0x58>
    {
      Result = Standard_SetConfiguration();
 8001412:	f7ff feab 	bl	800116c <Standard_SetConfiguration>
 8001416:	e044      	b.n	80014a2 <Setup0_Process+0xe2>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8001418:	2c05      	cmp	r4, #5
 800141a:	d10f      	bne.n	800143c <Setup0_Process+0x7c>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 800141c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8001420:	2a00      	cmp	r2, #0
 8001422:	da01      	bge.n	8001428 <Setup0_Process+0x68>
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 8001424:	2308      	movs	r3, #8
 8001426:	e04d      	b.n	80014c4 <Setup0_Process+0x104>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8001428:	78da      	ldrb	r2, [r3, #3]
 800142a:	2a00      	cmp	r2, #0
 800142c:	d1fa      	bne.n	8001424 <Setup0_Process+0x64>
          || (pInformation->USBwIndex != 0)
 800142e:	889a      	ldrh	r2, [r3, #4]
 8001430:	2a00      	cmp	r2, #0
 8001432:	d1f7      	bne.n	8001424 <Setup0_Process+0x64>
          || (pInformation->Current_Configuration != 0))
 8001434:	7a9b      	ldrb	r3, [r3, #10]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d037      	beq.n	80014aa <Setup0_Process+0xea>
 800143a:	e7f3      	b.n	8001424 <Setup0_Process+0x64>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 800143c:	2c03      	cmp	r4, #3
 800143e:	d113      	bne.n	8001468 <Setup0_Process+0xa8>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 8001440:	789a      	ldrb	r2, [r3, #2]
 8001442:	2a01      	cmp	r2, #1
 8001444:	d007      	beq.n	8001456 <Setup0_Process+0x96>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8001446:	4b78      	ldr	r3, [pc, #480]	; (8001628 <Setup0_Process+0x268>)
 8001448:	4620      	mov	r0, r4
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8001450:	2803      	cmp	r0, #3
 8001452:	d128      	bne.n	80014a6 <Setup0_Process+0xe6>
 8001454:	e035      	b.n	80014c2 <Setup0_Process+0x102>
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
          && (pInformation->USBwIndex == 0)
 8001456:	889a      	ldrh	r2, [r3, #4]
 8001458:	2a00      	cmp	r2, #0
 800145a:	d1f4      	bne.n	8001446 <Setup0_Process+0x86>
          && (ValBit(pInformation->Current_Feature, 5)))
 800145c:	7a5b      	ldrb	r3, [r3, #9]
 800145e:	0698      	lsls	r0, r3, #26
 8001460:	d5f1      	bpl.n	8001446 <Setup0_Process+0x86>
      {
        Result = Standard_SetDeviceFeature();
 8001462:	f7ff ff6d 	bl	8001340 <Standard_SetDeviceFeature>
 8001466:	e01c      	b.n	80014a2 <Setup0_Process+0xe2>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8001468:	2c01      	cmp	r4, #1
 800146a:	d1ec      	bne.n	8001446 <Setup0_Process+0x86>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 800146c:	789a      	ldrb	r2, [r3, #2]
 800146e:	2a01      	cmp	r2, #1
 8001470:	d1e9      	bne.n	8001446 <Setup0_Process+0x86>
          && pInformation->USBwIndex == 0
 8001472:	889a      	ldrh	r2, [r3, #4]
 8001474:	2a00      	cmp	r2, #0
 8001476:	d1e6      	bne.n	8001446 <Setup0_Process+0x86>
          && ValBit(pInformation->Current_Feature, 5))
 8001478:	7a5b      	ldrb	r3, [r3, #9]
 800147a:	0699      	lsls	r1, r3, #26
 800147c:	d5e3      	bpl.n	8001446 <Setup0_Process+0x86>
      {
        Result = Standard_ClearFeature();
 800147e:	f7ff feb5 	bl	80011ec <Standard_ClearFeature>
 8001482:	e00e      	b.n	80014a2 <Setup0_Process+0xe2>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001484:	2a01      	cmp	r2, #1
 8001486:	d104      	bne.n	8001492 <Setup0_Process+0xd2>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8001488:	2c0b      	cmp	r4, #11
 800148a:	d1dc      	bne.n	8001446 <Setup0_Process+0x86>
    {
      Result = Standard_SetInterface();
 800148c:	f7ff fe8a 	bl	80011a4 <Standard_SetInterface>
 8001490:	e007      	b.n	80014a2 <Setup0_Process+0xe2>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001492:	2a02      	cmp	r2, #2
 8001494:	d1d7      	bne.n	8001446 <Setup0_Process+0x86>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 8001496:	2c01      	cmp	r4, #1
 8001498:	d0f1      	beq.n	800147e <Setup0_Process+0xbe>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 800149a:	2c03      	cmp	r4, #3
 800149c:	d1d3      	bne.n	8001446 <Setup0_Process+0x86>
    {
      Result = Standard_SetEndPointFeature();
 800149e:	f7ff ff0d 	bl	80012bc <Standard_SetEndPointFeature>
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 80014a2:	b110      	cbz	r0, 80014aa <Setup0_Process+0xea>
 80014a4:	e7cf      	b.n	8001446 <Setup0_Process+0x86>
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 80014a6:	2800      	cmp	r0, #0
 80014a8:	d1bc      	bne.n	8001424 <Setup0_Process+0x64>
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 80014aa:	6832      	ldr	r2, [r6, #0]
 80014ac:	4b5f      	ldr	r3, [pc, #380]	; (800162c <Setup0_Process+0x26c>)
 80014ae:	b292      	uxth	r2, r2
 80014b0:	4413      	add	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	4b5d      	ldr	r3, [pc, #372]	; (8001630 <Setup0_Process+0x270>)
 80014ba:	2230      	movs	r2, #48	; 0x30
 80014bc:	801a      	strh	r2, [r3, #0]
  {
    ControlState = STALLED;
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 80014be:	2306      	movs	r3, #6
 80014c0:	e000      	b.n	80014c4 <Setup0_Process+0x104>
  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
    {
      ControlState = PAUSE;
 80014c2:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 80014c4:	682a      	ldr	r2, [r5, #0]
 80014c6:	7213      	strb	r3, [r2, #8]
 80014c8:	e0d4      	b.n	8001674 <Setup0_Process+0x2b4>


  CopyRoutine = NULL;
  wOffset = 0;

  if (Request_No == GET_DESCRIPTOR)
 80014ca:	2c06      	cmp	r4, #6
 80014cc:	d118      	bne.n	8001500 <Setup0_Process+0x140>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80014ce:	781a      	ldrb	r2, [r3, #0]
 80014d0:	0652      	lsls	r2, r2, #25
 80014d2:	d17c      	bne.n	80015ce <Setup0_Process+0x20e>
    {
      u8 wValue1 = pInformation->USBwValue1;
 80014d4:	78da      	ldrb	r2, [r3, #3]
 80014d6:	4b54      	ldr	r3, [pc, #336]	; (8001628 <Setup0_Process+0x268>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 80014d8:	2a01      	cmp	r2, #1
 80014da:	d102      	bne.n	80014e2 <Setup0_Process+0x122>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	e06c      	b.n	80015bc <Setup0_Process+0x1fc>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 80014e2:	2a02      	cmp	r2, #2
 80014e4:	d102      	bne.n	80014ec <Setup0_Process+0x12c>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	e067      	b.n	80015bc <Setup0_Process+0x1fc>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 80014ec:	2a03      	cmp	r2, #3
 80014ee:	d102      	bne.n	80014f6 <Setup0_Process+0x136>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	e062      	b.n	80015bc <Setup0_Process+0x1fc>
      } else if (wValue1 == 0x21) /* added to support functional descriptors */
 80014f6:	2a21      	cmp	r2, #33	; 0x21
 80014f8:	d169      	bne.n	80015ce <Setup0_Process+0x20e>
      {
	CopyRoutine = pProperty->GetFunctionalDescriptor;
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fe:	e05d      	b.n	80015bc <Setup0_Process+0x1fc>
      } /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8001500:	2c00      	cmp	r4, #0
 8001502:	d13c      	bne.n	800157e <Setup0_Process+0x1be>
 8001504:	8859      	ldrh	r1, [r3, #2]
 8001506:	2900      	cmp	r1, #0
 8001508:	d161      	bne.n	80015ce <Setup0_Process+0x20e>
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001510:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001514:	d15b      	bne.n	80015ce <Setup0_Process+0x20e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001516:	781a      	ldrb	r2, [r3, #0]
 8001518:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 800151c:	d104      	bne.n	8001528 <Setup0_Process+0x168>
        && (pInformation->USBwIndex == 0))
 800151e:	889b      	ldrh	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80ab 	beq.w	800167c <Setup0_Process+0x2bc>
 8001526:	e052      	b.n	80015ce <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001528:	2a01      	cmp	r2, #1
 800152a:	d10c      	bne.n	8001546 <Setup0_Process+0x186>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 800152c:	4a3e      	ldr	r2, [pc, #248]	; (8001628 <Setup0_Process+0x268>)
 800152e:	7918      	ldrb	r0, [r3, #4]
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	6992      	ldr	r2, [r2, #24]
 8001534:	4790      	blx	r2
 8001536:	2800      	cmp	r0, #0
 8001538:	d149      	bne.n	80015ce <Setup0_Process+0x20e>
          && (pInformation->Current_Configuration != 0))
 800153a:	682b      	ldr	r3, [r5, #0]
 800153c:	7a9b      	ldrb	r3, [r3, #10]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f040 809c 	bne.w	800167c <Setup0_Process+0x2bc>
 8001544:	e043      	b.n	80015ce <Setup0_Process+0x20e>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001546:	2a02      	cmp	r2, #2
 8001548:	d141      	bne.n	80015ce <Setup0_Process+0x20e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800154a:	791b      	ldrb	r3, [r3, #4]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800154c:	4839      	ldr	r0, [pc, #228]	; (8001634 <Setup0_Process+0x274>)
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800154e:	f003 010f 	and.w	r1, r3, #15
 8001552:	008a      	lsls	r2, r1, #2

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001554:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001558:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800155c:	6812      	ldr	r2, [r2, #0]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800155e:	7800      	ldrb	r0, [r0, #0]
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8001560:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001564:	bf14      	ite	ne
 8001566:	f002 0230 	andne.w	r2, r2, #48	; 0x30
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 800156a:	f402 5240 	andeq.w	r2, r2, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800156e:	4281      	cmp	r1, r0
 8001570:	d22d      	bcs.n	80015ce <Setup0_Process+0x20e>
 8001572:	f013 0f70 	tst.w	r3, #112	; 0x70
 8001576:	d12a      	bne.n	80015ce <Setup0_Process+0x20e>
          && (Status != 0))
 8001578:	2a00      	cmp	r2, #0
 800157a:	d17f      	bne.n	800167c <Setup0_Process+0x2bc>
 800157c:	e027      	b.n	80015ce <Setup0_Process+0x20e>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 800157e:	2c08      	cmp	r4, #8
 8001580:	d103      	bne.n	800158a <Setup0_Process+0x1ca>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	065b      	lsls	r3, r3, #25
 8001586:	d07b      	beq.n	8001680 <Setup0_Process+0x2c0>
 8001588:	e021      	b.n	80015ce <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 800158a:	2c0a      	cmp	r4, #10
 800158c:	d11f      	bne.n	80015ce <Setup0_Process+0x20e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800158e:	781a      	ldrb	r2, [r3, #0]
 8001590:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001594:	2a01      	cmp	r2, #1
 8001596:	d11a      	bne.n	80015ce <Setup0_Process+0x20e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8001598:	7a9a      	ldrb	r2, [r3, #10]
 800159a:	b1c2      	cbz	r2, 80015ce <Setup0_Process+0x20e>
 800159c:	8859      	ldrh	r1, [r3, #2]
 800159e:	b9b1      	cbnz	r1, 80015ce <Setup0_Process+0x20e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015a6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80015aa:	d110      	bne.n	80015ce <Setup0_Process+0x20e>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 80015ac:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <Setup0_Process+0x268>)
 80015ae:	7918      	ldrb	r0, [r3, #4]
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	6992      	ldr	r2, [r2, #24]
 80015b4:	4790      	blx	r2
 80015b6:	2800      	cmp	r0, #0
 80015b8:	d064      	beq.n	8001684 <Setup0_Process+0x2c4>
 80015ba:	e008      	b.n	80015ce <Setup0_Process+0x20e>
      CopyRoutine = Standard_GetInterface;
    }

  }

  if (CopyRoutine)
 80015bc:	b13b      	cbz	r3, 80015ce <Setup0_Process+0x20e>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 80015be:	682a      	ldr	r2, [r5, #0]
 80015c0:	2400      	movs	r4, #0
 80015c2:	8254      	strh	r4, [r2, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80015c4:	6193      	str	r3, [r2, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 80015c6:	4620      	mov	r0, r4
 80015c8:	4798      	blx	r3
    Result = USB_SUCCESS;
 80015ca:	4620      	mov	r0, r4
 80015cc:	e00a      	b.n	80015e4 <Setup0_Process+0x224>
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 80015ce:	4b16      	ldr	r3, [pc, #88]	; (8001628 <Setup0_Process+0x268>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	682b      	ldr	r3, [r5, #0]
 80015d4:	6912      	ldr	r2, [r2, #16]
 80015d6:	7858      	ldrb	r0, [r3, #1]
 80015d8:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 80015da:	2803      	cmp	r0, #3
 80015dc:	d102      	bne.n	80015e4 <Setup0_Process+0x224>
    {
      pInformation->ControlState = PAUSE;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <Setup0_Process+0x264>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	e005      	b.n	80015f0 <Setup0_Process+0x230>
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 80015e4:	682b      	ldr	r3, [r5, #0]
 80015e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015ea:	8a1a      	ldrh	r2, [r3, #16]
 80015ec:	428a      	cmp	r2, r1
 80015ee:	d101      	bne.n	80015f4 <Setup0_Process+0x234>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 80015f0:	2209      	movs	r2, #9
 80015f2:	e003      	b.n	80015fc <Setup0_Process+0x23c>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 80015f4:	2802      	cmp	r0, #2
 80015f6:	d000      	beq.n	80015fa <Setup0_Process+0x23a>
 80015f8:	b912      	cbnz	r2, 8001600 <Setup0_Process+0x240>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 80015fa:	2208      	movs	r2, #8
 80015fc:	721a      	strb	r2, [r3, #8]
 80015fe:	e039      	b.n	8001674 <Setup0_Process+0x2b4>
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8001600:	f993 1000 	ldrsb.w	r1, [r3]
 8001604:	2900      	cmp	r1, #0
 8001606:	da2f      	bge.n	8001668 <Setup0_Process+0x2a8>
  {
    /* Device ==> Host */
    vu32 wLength = pInformation->USBwLength;
 8001608:	88d9      	ldrh	r1, [r3, #6]
 800160a:	9101      	str	r1, [sp, #4]

    /* Restrict the data length to be the one host asks */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 800160c:	9801      	ldr	r0, [sp, #4]
 800160e:	4282      	cmp	r2, r0
 8001610:	4805      	ldr	r0, [pc, #20]	; (8001628 <Setup0_Process+0x268>)
 8001612:	d911      	bls.n	8001638 <Setup0_Process+0x278>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8001614:	9a01      	ldr	r2, [sp, #4]
 8001616:	821a      	strh	r2, [r3, #16]
 8001618:	e01f      	b.n	800165a <Setup0_Process+0x29a>
 800161a:	bf00      	nop
 800161c:	40005c50 	andmi	r5, r0, r0, asr ip
 8001620:	20003004 	andcs	r3, r0, r4
 8001624:	200001fc 	strdcs	r0, [r0], -ip
 8001628:	200001d4 	ldrdcs	r0, [r0], -r4
 800162c:	20003002 	andcs	r3, r0, r2
 8001630:	200001cc 	andcs	r0, r0, ip, asr #3
 8001634:	20000090 	mulcs	r0, r0, r0
    }

    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8001638:	428a      	cmp	r2, r1
 800163a:	d20e      	bcs.n	800165a <Setup0_Process+0x29a>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800163c:	6801      	ldr	r1, [r0, #0]
 800163e:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 8001642:	428a      	cmp	r2, r1
 8001644:	d201      	bcs.n	800164a <Setup0_Process+0x28a>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8001646:	2100      	movs	r1, #0
 8001648:	e005      	b.n	8001656 <Setup0_Process+0x296>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800164a:	fb92 f4f1 	sdiv	r4, r2, r1
 800164e:	fb01 2214 	mls	r2, r1, r4, r2
 8001652:	b912      	cbnz	r2, 800165a <Setup0_Process+0x29a>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8001654:	2101      	movs	r1, #1
 8001656:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <Setup0_Process+0x2c8>)
 8001658:	7011      	strb	r1, [r2, #0]
      }
    }

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 800165a:	6802      	ldr	r2, [r0, #0]
 800165c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8001660:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8001662:	f7ff fd2f 	bl	80010c4 <DataStageIn>
 8001666:	e005      	b.n	8001674 <Setup0_Process+0x2b4>
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8001668:	2203      	movs	r2, #3
 800166a:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <Setup0_Process+0x2cc>)
 800166e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001672:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8001674:	f7ff fe84 	bl	8001380 <Post0_Process>
}
 8001678:	b002      	add	sp, #8
 800167a:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
        && (pInformation->USBwIndex == 0))
    {
      CopyRoutine = Standard_GetStatus;
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <Setup0_Process+0x2d0>)
 800167e:	e79e      	b.n	80015be <Setup0_Process+0x1fe>
  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      CopyRoutine = Standard_GetConfiguration;
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <Setup0_Process+0x2d4>)
 8001682:	e79c      	b.n	80015be <Setup0_Process+0x1fe>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
    {
      CopyRoutine = Standard_GetInterface;
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <Setup0_Process+0x2d8>)
 8001686:	e79a      	b.n	80015be <Setup0_Process+0x1fe>
 8001688:	20000a1c 	andcs	r0, r0, ip, lsl sl
 800168c:	200001ca 	andcs	r0, r0, sl, asr #3
 8001690:	08001035 	stmdaeq	r0, {r0, r2, r4, r5, ip}
 8001694:	08000fed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, sl, fp}
 8001698:	08001011 	stmdaeq	r0, {r0, r4, ip}

0800169c <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Out0_Process(void)
{
 800169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32 ControlState = pInformation->ControlState;
 800169e:	4d2b      	ldr	r5, [pc, #172]	; (800174c <Out0_Process+0xb0>)
 80016a0:	682c      	ldr	r4, [r5, #0]
 80016a2:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d001      	beq.n	80016ac <Out0_Process+0x10>
 80016a8:	2b05      	cmp	r3, #5
 80016aa:	d141      	bne.n	8001730 <Out0_Process+0x94>
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 80016ac:	69a3      	ldr	r3, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 80016ae:	8a22      	ldrh	r2, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 80016b0:	b1ab      	cbz	r3, 80016de <Out0_Process+0x42>
 80016b2:	b1a2      	cbz	r2, 80016de <Out0_Process+0x42>
  {
    u8 *Buffer;
    u32 Length;

    Length = pEPinfo->PacketSize;
 80016b4:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80016b6:	4296      	cmp	r6, r2
 80016b8:	bf28      	it	cs
 80016ba:	4616      	movcs	r6, r2
 80016bc:	4630      	mov	r0, r6
 80016be:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 80016c0:	8a23      	ldrh	r3, [r4, #16]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80016c2:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 80016c4:	1b9b      	subs	r3, r3, r6
 80016c6:	8223      	strh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 80016c8:	8a63      	ldrh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 80016ca:	2000      	movs	r0, #0
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 80016cc:	4433      	add	r3, r6
 80016ce:	8263      	strh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 80016d0:	f7ff fb8a 	bl	8000de8 <GetEPRxAddr>
 80016d4:	4632      	mov	r2, r6
 80016d6:	4601      	mov	r1, r0
 80016d8:	4638      	mov	r0, r7
 80016da:	f000 f8a5 	bl	8001828 <PMAToUserBufferCopy>
  }

  if (pEPinfo->Usb_rLength != 0)
 80016de:	8a23      	ldrh	r3, [r4, #16]
 80016e0:	b153      	cbz	r3, 80016f8 <Out0_Process+0x5c>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80016e2:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <Out0_Process+0xb4>)
    SetEPTxCount(ENDP0, 0);
 80016e4:	2000      	movs	r0, #0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80016e6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 80016ea:	4601      	mov	r1, r0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80016ec:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 80016ee:	f7ff fb89 	bl	8000e04 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <Out0_Process+0xb8>)
 80016f4:	2230      	movs	r2, #48	; 0x30
 80016f6:	801a      	strh	r2, [r3, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80016f8:	8a23      	ldrh	r3, [r4, #16]
 80016fa:	8aa2      	ldrh	r2, [r4, #20]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d802      	bhi.n	8001706 <Out0_Process+0x6a>
  {
    pInformation->ControlState = OUT_DATA;
 8001700:	682b      	ldr	r3, [r5, #0]
 8001702:	2203      	movs	r2, #3
 8001704:	e002      	b.n	800170c <Out0_Process+0x70>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8001706:	b11b      	cbz	r3, 8001710 <Out0_Process+0x74>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8001708:	682b      	ldr	r3, [r5, #0]
 800170a:	2205      	movs	r2, #5
 800170c:	721a      	strb	r2, [r3, #8]
 800170e:	e00c      	b.n	800172a <Out0_Process+0x8e>
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8001710:	682a      	ldr	r2, [r5, #0]
 8001712:	2106      	movs	r1, #6
 8001714:	7211      	strb	r1, [r2, #8]
      USB_StatusIn();
 8001716:	4a10      	ldr	r2, [pc, #64]	; (8001758 <Out0_Process+0xbc>)
 8001718:	6811      	ldr	r1, [r2, #0]
 800171a:	4a10      	ldr	r2, [pc, #64]	; (800175c <Out0_Process+0xc0>)
 800171c:	b289      	uxth	r1, r1
 800171e:	440a      	add	r2, r1
 8001720:	0052      	lsls	r2, r2, #1
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <Out0_Process+0xb8>)
 8001726:	2230      	movs	r2, #48	; 0x30
 8001728:	801a      	strh	r2, [r3, #0]
  u32 ControlState = pInformation->ControlState;

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 800172a:	682b      	ldr	r3, [r5, #0]
 800172c:	7a1b      	ldrb	r3, [r3, #8]
 800172e:	e006      	b.n	800173e <Out0_Process+0xa2>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8001730:	2b07      	cmp	r3, #7
 8001732:	d103      	bne.n	800173c <Out0_Process+0xa0>
  {
    (*pProperty->Process_Status_OUT)();
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <Out0_Process+0xc4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	4798      	blx	r3
  }

  else if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 800173c:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 800173e:	682a      	ldr	r2, [r5, #0]
 8001740:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 8001742:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 8001746:	f7ff be1b 	b.w	8001380 <Post0_Process>
 800174a:	bf00      	nop
 800174c:	200001fc 	strdcs	r0, [r0], -ip
 8001750:	200001ca 	andcs	r0, r0, sl, asr #3
 8001754:	200001cc 	andcs	r0, r0, ip, asr #3
 8001758:	40005c50 	andmi	r5, r0, r0, asr ip
 800175c:	20003002 	andcs	r3, r0, r2
 8001760:	200001d4 	ldrdcs	r0, [r0], -r4

08001764 <SetDeviceAddress>:
* Input          : - Val: device adress.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(u8 Val)
{
 8001764:	b530      	push	{r4, r5, lr}
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <SetDeviceAddress+0x30>)
 8001768:	781c      	ldrb	r4, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800176a:	2300      	movs	r3, #0
 800176c:	42a3      	cmp	r3, r4
 800176e:	d20c      	bcs.n	800178a <SetDeviceAddress+0x26>
 8001770:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8001774:	f502 52b8 	add.w	r2, r2, #5888	; 0x1700
 8001778:	0091      	lsls	r1, r2, #2
  {
    _SetEPAddress((u8)i, (u8)i);
 800177a:	680d      	ldr	r5, [r1, #0]
 800177c:	f648 728f 	movw	r2, #36751	; 0x8f8f
 8001780:	402a      	ands	r2, r5
 8001782:	431a      	orrs	r2, r3
 8001784:	600a      	str	r2, [r1, #0]
{
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8001786:	3301      	adds	r3, #1
 8001788:	e7f0      	b.n	800176c <SetDeviceAddress+0x8>
  {
    _SetEPAddress((u8)i, (u8)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800178a:	4b03      	ldr	r3, [pc, #12]	; (8001798 <SetDeviceAddress+0x34>)
 800178c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8001790:	6018      	str	r0, [r3, #0]
 8001792:	bd30      	pop	{r4, r5, pc}
 8001794:	20000090 	mulcs	r0, r0, r0
 8001798:	40005c4c 	andmi	r5, r0, ip, asr #24

0800179c <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 In0_Process(void)
{
 800179c:	b510      	push	{r4, lr}
  u32 ControlState = pInformation->ControlState;
 800179e:	4c13      	ldr	r4, [pc, #76]	; (80017ec <In0_Process+0x50>)
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80017a4:	2a02      	cmp	r2, #2
 80017a6:	d001      	beq.n	80017ac <In0_Process+0x10>
 80017a8:	2a04      	cmp	r2, #4
 80017aa:	d104      	bne.n	80017b6 <In0_Process+0x1a>
  {
    DataStageIn();
 80017ac:	f7ff fc8a 	bl	80010c4 <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 80017b0:	6823      	ldr	r3, [r4, #0]
 80017b2:	7a1b      	ldrb	r3, [r3, #8]
 80017b4:	e013      	b.n	80017de <In0_Process+0x42>
  }

  else if (ControlState == WAIT_STATUS_IN)
 80017b6:	2a06      	cmp	r2, #6
 80017b8:	d110      	bne.n	80017dc <In0_Process+0x40>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80017ba:	785a      	ldrb	r2, [r3, #1]
 80017bc:	2a05      	cmp	r2, #5
 80017be:	d109      	bne.n	80017d4 <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 80017c0:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80017c2:	0652      	lsls	r2, r2, #25
 80017c4:	d106      	bne.n	80017d4 <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 80017c6:	7898      	ldrb	r0, [r3, #2]
 80017c8:	f7ff ffcc 	bl	8001764 <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <In0_Process+0x54>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	4798      	blx	r3
    }
    (*pProperty->Process_Status_IN)();
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <In0_Process+0x58>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	4798      	blx	r3
    ControlState = STALLED;
  }

  else
  {
    ControlState = STALLED;
 80017dc:	2308      	movs	r3, #8
  }

  pInformation->ControlState = ControlState;
 80017de:	6822      	ldr	r2, [r4, #0]
 80017e0:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 80017e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 80017e6:	f7ff bdcb 	b.w	8001380 <Post0_Process>
 80017ea:	bf00      	nop
 80017ec:	200001fc 	strdcs	r0, [r0], -ip
 80017f0:	200001f8 	strdcs	r0, [r0], -r8
 80017f4:	200001d4 	ldrdcs	r0, [r0], -r4

080017f8 <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 80017f8:	b530      	push	{r4, r5, lr}
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 80017fa:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 80017fe:	3201      	adds	r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 8001800:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8001804:	1052      	asrs	r2, r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 8001806:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8001808:	2300      	movs	r3, #0
 800180a:	4293      	cmp	r3, r2
 800180c:	f100 0002 	add.w	r0, r0, #2
 8001810:	d009      	beq.n	8001826 <UserToPMABufferCopy+0x2e>
  {
    temp1 = (u16) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 8001812:	f810 5c01 	ldrb.w	r5, [r0, #-1]
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (u16) * pbUsrBuf;
 8001816:	f810 4c02 	ldrb.w	r4, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 800181a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    *pdwVal++ = temp2;
 800181e:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 8001822:	3301      	adds	r3, #1
 8001824:	e7f1      	b.n	800180a <UserToPMABufferCopy+0x12>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001826:	bd30      	pop	{r4, r5, pc}

08001828 <PMAToUserBufferCopy>:
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 8001828:	b510      	push	{r4, lr}
  u32 n = (wNBytes + 1) >> 1;/* /2*/
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 800182a:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 800182e:	3201      	adds	r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 8001830:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 8001834:	1052      	asrs	r2, r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 8001836:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8001838:	2300      	movs	r3, #0
 800183a:	4293      	cmp	r3, r2
 800183c:	d005      	beq.n	800184a <PMAToUserBufferCopy+0x22>
  {
    *(u16*)pbUsrBuf++ = *pdwVal++;
 800183e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8001842:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 8001846:	3301      	adds	r3, #1
 8001848:	e7f7      	b.n	800183a <PMAToUserBufferCopy+0x12>
    pbUsrBuf++;
  }
}
 800184a:	bd10      	pop	{r4, pc}

Disassembly of section .data:

20000000 <Device_Property>:
20000000:	08000495 	stmdaeq	r0, {r0, r2, r4, r7, sl}
20000004:	08000181 	stmdaeq	r0, {r0, r7, r8}
20000008:	0800013f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r8}
2000000c:	08000141 	stmdaeq	r0, {r0, r6, r8}
20000010:	08000229 	stmdaeq	r0, {r0, r3, r5, r9}
20000014:	080002cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9}
20000018:	08000143 	stmdaeq	r0, {r0, r1, r6, r8}
2000001c:	08000289 	stmdaeq	r0, {r0, r3, r7, r9}
20000020:	08000295 	stmdaeq	r0, {r0, r2, r4, r7, r9}
20000024:	080002a1 	stmdaeq	r0, {r0, r5, r7, r9}
20000028:	080002c1 	stmdaeq	r0, {r0, r6, r7, r9}
2000002c:	00000000 	andeq	r0, r0, r0
20000030:	00000040 	andeq	r0, r0, r0, asr #32

20000034 <pEpInt_IN>:
20000034:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000038:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
2000003c:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000040:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000044:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000048:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
2000004c:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}

20000050 <pEpInt_OUT>:
20000050:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000054:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000058:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
2000005c:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000060:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000064:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000068:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}

2000006c <User_Standard_Requests>:
2000006c:	0800014d 	stmdaeq	r0, {r0, r2, r3, r6, r8}
20000070:	08000151 	stmdaeq	r0, {r0, r4, r6, r8}
20000074:	08000169 	stmdaeq	r0, {r0, r3, r5, r6, r8}
20000078:	0800016b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r8}
2000007c:	0800016d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8}
20000080:	0800016f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r8}
20000084:	08000171 	stmdaeq	r0, {r0, r4, r5, r6, r8}
20000088:	08000173 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8}
2000008c:	08000175 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8}

20000090 <Device_Table>:
20000090:	00000101 	andeq	r0, r0, r1, lsl #2

20000094 <usbStringDescriptor>:
20000094:	200000e8 	andcs	r0, r0, r8, ror #1
20000098:	00000004 	andeq	r0, r0, r4
2000009c:	20000124 	andcs	r0, r0, r4, lsr #2
200000a0:	0000001c 	andeq	r0, r0, ip, lsl r0
200000a4:	20000148 	andcs	r0, r0, r8, asr #2
200000a8:	00000016 	andeq	r0, r0, r6, lsl r0
200000ac:	20000107 	andcs	r0, r0, r7, lsl #2
200000b0:	00000014 	andeq	r0, r0, r4, lsl r0
200000b4:	2000015e 	andcs	r0, r0, lr, asr r1
200000b8:	00000050 	andeq	r0, r0, r0, asr r0
	...

200000cc <u8_usbDeviceDescriptorDFU>:
200000cc:	01000112 	tsteq	r0, r2, lsl r1
200000d0:	40000000 	andmi	r0, r0, r0
200000d4:	00030203 	andeq	r0, r3, r3, lsl #4
200000d8:	02010201 	andeq	r0, r1, #268435456	; 0x10000000
200000dc:	00000103 	andeq	r0, r0, r3, lsl #2

200000e0 <usbFunctionalDescriptor>:
200000e0:	2000011b 	andcs	r0, r0, fp, lsl r1
200000e4:	00000009 	andeq	r0, r0, r9

200000e8 <u8_usbStringLangId>:
200000e8:	04090304 	streq	r0, [r9], #-772	; 0x304

200000ec <u8_usbConfigDescriptorDFU>:
200000ec:	001b0209 	andseq	r0, fp, r9, lsl #4
200000f0:	80000101 	andhi	r0, r0, r1, lsl #2
200000f4:	00040932 	andeq	r0, r4, r2, lsr r9
200000f8:	01fe0000 	mvnseq	r0, r0
200000fc:	21090402 	tstcs	r9, r2, lsl #8
20000100:	0000ff03 	andeq	pc, r0, r3, lsl #30
20000104:	14011008 	strne	r1, [r1], #-8

20000107 <u8_usbStringSerial>:
20000107:	00300314 	eorseq	r0, r0, r4, lsl r3
2000010b:	00300032 	eorseq	r0, r0, r2, lsr r0
2000010f:	00200033 	eoreq	r0, r0, r3, lsr r0
20000113:	00300030 	eorseq	r0, r0, r0, lsr r0
20000117:	00310030 	eorseq	r0, r1, r0, lsr r0

2000011b <u8_usbFunctionalDescriptor>:
2000011b:	ff032109 			; <UNDEFINED> instruction: 0xff032109
2000011f:	10080000 	andne	r0, r8, r0
20000123:	32031c01 	andcc	r1, r3, #256	; 0x100

20000124 <u8_usbStringVendor>:
20000124:	0032031c 	eorseq	r0, r2, ip, lsl r3
20000128:	00200030 	eoreq	r0, r0, r0, lsr r0
2000012c:	00490033 	subeq	r0, r9, r3, lsr r0
20000130:	0064006e 	rsbeq	r0, r4, lr, rrx
20000134:	00730075 	rsbseq	r0, r3, r5, ror r0
20000138:	00720074 	rsbseq	r0, r2, r4, ror r0
2000013c:	00650069 	rsbeq	r0, r5, r9, rrx

20000140 <usbDeviceDescriptorDFU>:
20000140:	200000cc 	andcs	r0, r0, ip, asr #1
20000144:	00000012 	andeq	r0, r0, r2, lsl r0

20000148 <u8_usbStringProduct>:
20000148:	004d0316 	subeq	r0, sp, r6, lsl r3
2000014c:	00740061 	rsbseq	r0, r4, r1, rrx
20000150:	00690072 	rsbeq	r0, r9, r2, ror r0
20000154:	00200078 	eoreq	r0, r0, r8, ror r0
20000158:	00460044 	subeq	r0, r6, r4, asr #32
2000015c:	03500055 	cmpeq	r0, #85	; 0x55

2000015e <u8_usbStringAlt0>:
2000015e:	004d0350 	subeq	r0, sp, r0, asr r3
20000162:	00740061 	rsbseq	r0, r4, r1, rrx
20000166:	00690072 	rsbeq	r0, r9, r2, ror r0
2000016a:	00200078 	eoreq	r0, r0, r8, ror r0
2000016e:	006f0042 	rsbeq	r0, pc, r2, asr #32
20000172:	0074006f 	rsbseq	r0, r4, pc, rrx
20000176:	006f006c 	rsbeq	r0, pc, ip, rrx
2000017a:	00640061 	rsbeq	r0, r4, r1, rrx
2000017e:	00720065 	rsbseq	r0, r2, r5, rrx
20000182:	00760020 	rsbseq	r0, r6, r0, lsr #32
20000186:	002e0031 	eoreq	r0, lr, r1, lsr r0
2000018a:	00200032 	eoreq	r0, r0, r2, lsr r0
2000018e:	00550020 	subseq	r0, r5, r0, lsr #32
20000192:	006c0070 	rsbeq	r0, ip, r0, ror r0
20000196:	0061006f 	rsbeq	r0, r1, pc, rrx
2000019a:	00200064 	eoreq	r0, r0, r4, rrx
2000019e:	00690046 	rsbeq	r0, r9, r6, asr #32
200001a2:	006d0072 	rsbeq	r0, sp, r2, ror r0
200001a6:	00610077 	rsbeq	r0, r1, r7, ror r0
200001aa:	00650072 	rsbeq	r0, r5, r2, ror r0
	...

200001b0 <usbConfigDescriptorDFU>:
200001b0:	200000ec 	andcs	r0, r0, ip, ror #1
200001b4:	0000001b 	andeq	r0, r0, fp, lsl r0

200001b8 <userAppEnd>:
200001b8:	20005000 	andcs	r5, r0, r0

200001bc <userAppAddr>:
200001bc:	20000c00 	andcs	r0, r0, r0, lsl #24

Disassembly of section .bss:

200001c0 <_sbss>:
200001c0:	00000000 	andeq	r0, r0, r0

200001c4 <wIstr>:
	...

200001c6 <ResumeS>:
	...

200001c8 <code_copy_lock>:
	...

200001ca <SaveRState>:
	...

200001cc <SaveTState>:
200001cc:	00000000 	andeq	r0, r0, r0

200001d0 <SaveState>:
200001d0:	00000000 	andeq	r0, r0, r0

200001d4 <pProperty>:
200001d4:	00000000 	andeq	r0, r0, r0

200001d8 <EPindex>:
200001d8:	00000000 	andeq	r0, r0, r0

200001dc <Device_Info>:
	...

200001f8 <pUser_Standard_Requests>:
200001f8:	00000000 	andeq	r0, r0, r0

200001fc <pInformation>:
200001fc:	00000000 	andeq	r0, r0, r0

20000200 <wInterrupt_Mask>:
	...

20000202 <StatusInfo>:
	...

Disassembly of section .bss.bIntPackSOF:

20000204 <bIntPackSOF>:
	...

Disassembly of section .bss.bDeviceState:

20000208 <bDeviceState>:
20000208:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.recvBuffer:

2000020c <recvBuffer>:
	...

Disassembly of section .bss.uploadBlockLen:

20000a0c <uploadBlockLen>:
	...

Disassembly of section .bss.thisBlockLen:

20000a0e <thisBlockLen>:
	...

Disassembly of section .bss.userFirmwareLen:

20000a10 <userFirmwareLen>:
20000a10:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.userUploadType:

20000a14 <userUploadType>:
	...

Disassembly of section .bss.dfuAppStatus:

20000a15 <dfuAppStatus>:
20000a15:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .bss.dfuBusy:

20000a1b <dfuBusy>:
	...

Disassembly of section .bss.Data_Mul_MaxPacketSize:

20000a1c <Data_Mul_MaxPacketSize>:
	...

Disassembly of section ._usrstack:

20000a1d <_susrstack-0x3>:
20000a1d:	00000000 	andeq	r0, r0, r0

20000a20 <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
   0:	3a434347 	bcc	10d0d24 <__Stack_Size+0x10d0924>
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xd45
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	64724128 	ldrbtvs	r4, [r2], #-296	; 0x128
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	6f6e6975 	svcvs	0x006e6975
  34:	69756220 	ldmdbvs	r5!, {r5, r9, sp, lr}^
  38:	2929646c 	stmdbcs	r9!, {r2, r3, r5, r6, sl, sp, lr}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	3220332e 	eorcc	r3, r0, #-1207959552	; 0xb8000000
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	30343130 	eorscc	r3, r4, r0, lsr r1
  48:	20383232 	eorscs	r3, r8, r2, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <BootRAM+0xef6faaf>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	2d385f34 	ldccs	15, cr5, [r8, #-208]!	; 0xffffff30
  68:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  6c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(u8 bEpNum, u8 bDir, u16 wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
  70:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  74:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  78:	33383032 	teqcc	r8, #50	; 0x32
  7c:	005d3232 	subseq	r3, sp, r2, lsr r2

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	14041202 	strne	r1, [r4], #-514	; 0x202
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	1a011803 	bne	4603c <__Stack_Size+0x45c3c>
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	080000f0 	stmdaeq	r0, {r4, r5, r6, r7}
  14:	00000048 	andeq	r0, r0, r8, asr #32
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	08000138 	stmdaeq	r0, {r3, r4, r5, r8}
  1c:	00000004 	andeq	r0, r0, r4
	...
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	006f0002 	rsbeq	r0, pc, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	00040000 	andeq	r0, r4, r0
	...

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	0000007a 	andeq	r0, r0, sl, ror r0
	...

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  48:	00000114 	andeq	r0, r0, r4, lsl r1
  4c:	00e40002 	rsceq	r0, r4, r2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	0800013c 	stmdaeq	r0, {r2, r3, r4, r5, r8}
  5c:	00000002 	andeq	r0, r0, r2
  60:	0800013e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8}
  64:	00000002 	andeq	r0, r0, r2
  68:	08000140 	stmdaeq	r0, {r6, r8}
  6c:	00000002 	andeq	r0, r0, r2
  70:	08000142 	stmdaeq	r0, {r1, r6, r8}
  74:	0000000a 	andeq	r0, r0, sl
  78:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
  7c:	00000002 	andeq	r0, r0, r2
  80:	08000150 	stmdaeq	r0, {r4, r6, r8}
  84:	00000018 	andeq	r0, r0, r8, lsl r0
  88:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}
  8c:	00000002 	andeq	r0, r0, r2
  90:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
  94:	00000002 	andeq	r0, r0, r2
  98:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  9c:	00000002 	andeq	r0, r0, r2
  a0:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
  a4:	00000002 	andeq	r0, r0, r2
  a8:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
  ac:	00000002 	andeq	r0, r0, r2
  b0:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
  b4:	00000002 	andeq	r0, r0, r2
  b8:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	08000180 	stmdaeq	r0, {r7, r8}
  c4:	000000a8 	andeq	r0, r0, r8, lsr #1
  c8:	08000228 	stmdaeq	r0, {r3, r5, r9}
  cc:	00000060 	andeq	r0, r0, r0, rrx
  d0:	08000288 	stmdaeq	r0, {r3, r7, r9}
  d4:	0000000c 	andeq	r0, r0, ip
  d8:	08000294 	stmdaeq	r0, {r2, r4, r7, r9}
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	080002a0 	stmdaeq	r0, {r5, r7, r9}
  e4:	00000020 	andeq	r0, r0, r0, lsr #32
  e8:	080002c0 	stmdaeq	r0, {r6, r7, r9}
  ec:	0000000c 	andeq	r0, r0, ip
  f0:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
  f8:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
  fc:	0000007c 	andeq	r0, r0, ip, ror r0
 100:	00000000 	andeq	r0, r0, r0
 104:	00000004 	andeq	r0, r0, r4
 108:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
 10c:	0000001c 	andeq	r0, r0, ip, lsl r0
 110:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
 114:	00000018 	andeq	r0, r0, r8, lsl r0
 118:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
 11c:	00000084 	andeq	r0, r0, r4, lsl #1
 120:	08000428 	stmdaeq	r0, {r3, r5, sl}
 124:	00000028 	andeq	r0, r0, r8, lsr #32
 128:	08000450 	stmdaeq	r0, {r4, r6, sl}
 12c:	0000001c 	andeq	r0, r0, ip, lsl r0
 130:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
 134:	00000004 	andeq	r0, r0, r4
 138:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
 13c:	00000024 	andeq	r0, r0, r4, lsr #32
 140:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
 144:	00000040 	andeq	r0, r0, r0, asr #32
 148:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
 14c:	00000022 	andeq	r0, r0, r2, lsr #32
 150:	080004f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl}
 154:	000000b4 	strheq	r0, [r0], -r4
	...
 160:	00000014 	andeq	r0, r0, r4, lsl r0
 164:	0df60002 	ldcleq	0, cr0, [r6, #8]!
 168:	00040000 	andeq	r0, r4, r0
	...
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	10180002 	andsne	r0, r8, r2
 180:	00040000 	andeq	r0, r4, r0
 184:	00000000 	andeq	r0, r0, r0
 188:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
 18c:	00000078 	andeq	r0, r0, r8, ror r0
	...
 198:	000000d4 	ldrdeq	r0, [r0], -r4
 19c:	126d0002 	rsbne	r0, sp, #2
 1a0:	00040000 	andeq	r0, r4, r0
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 1ac:	00000016 	andeq	r0, r0, r6, lsl r0
 1b0:	00000000 	andeq	r0, r0, r0
 1b4:	00000012 	andeq	r0, r0, r2, lsl r0
 1b8:	0800063c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl}
 1bc:	00000010 	andeq	r0, r0, r0, lsl r0
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	00000050 	andeq	r0, r0, r0, asr r0
 1c8:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
 1cc:	00000048 	andeq	r0, r0, r8, asr #32
 1d0:	08000694 	stmdaeq	r0, {r2, r4, r7, r9, sl}
 1d4:	00000060 	andeq	r0, r0, r0, rrx
 1d8:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
 1dc:	00000018 	andeq	r0, r0, r8, lsl r0
 1e0:	0800070c 	stmdaeq	r0, {r2, r3, r8, r9, sl}
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e8:	08000728 	stmdaeq	r0, {r3, r5, r8, r9, sl}
 1ec:	00000014 	andeq	r0, r0, r4, lsl r0
 1f0:	0800073c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl}
 1f4:	00000018 	andeq	r0, r0, r8, lsl r0
 1f8:	08000754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl}
 1fc:	0000002c 	andeq	r0, r0, ip, lsr #32
 200:	08000780 	stmdaeq	r0, {r7, r8, r9, sl}
 204:	00000048 	andeq	r0, r0, r8, asr #32
 208:	080007c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl}
 20c:	0000006c 	andeq	r0, r0, ip, rrx
 210:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
 214:	00000024 	andeq	r0, r0, r4, lsr #32
 218:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
 21c:	00000028 	andeq	r0, r0, r8, lsr #32
 220:	08000880 	stmdaeq	r0, {r7, fp}
 224:	00000014 	andeq	r0, r0, r4, lsl r0
 228:	08000894 	stmdaeq	r0, {r2, r4, r7, fp}
 22c:	00000034 	andeq	r0, r0, r4, lsr r0
 230:	00000000 	andeq	r0, r0, r0
 234:	00000030 	andeq	r0, r0, r0, lsr r0
 238:	080008c8 	stmdaeq	r0, {r3, r6, r7, fp}
 23c:	0000004c 	andeq	r0, r0, ip, asr #32
 240:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
 244:	0000000c 	andeq	r0, r0, ip
 248:	08000920 	stmdaeq	r0, {r5, r8, fp}
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
 250:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
 254:	00000012 	andeq	r0, r0, r2, lsl r0
 258:	0800094c 	stmdaeq	r0, {r2, r3, r6, r8, fp}
 25c:	00000010 	andeq	r0, r0, r0, lsl r0
 260:	0800095c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp}
 264:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 270:	0000007c 	andeq	r0, r0, ip, ror r0
 274:	1d940002 	ldcne	0, cr0, [r4, #8]
 278:	00040000 	andeq	r0, r4, r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	08000974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp}
 284:	0000005c 	andeq	r0, r0, ip, asr r0
 288:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
 28c:	00000044 	andeq	r0, r0, r4, asr #32
 290:	00000000 	andeq	r0, r0, r0
 294:	00000002 	andeq	r0, r0, r2
 298:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
 2a4:	00000018 	andeq	r0, r0, r8, lsl r0
 2a8:	08000a44 	stmdaeq	r0, {r2, r6, r9, fp}
 2ac:	00000028 	andeq	r0, r0, r8, lsr #32
 2b0:	08000a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp}
 2b4:	00000034 	andeq	r0, r0, r4, lsr r0
 2b8:	08000aa0 	stmdaeq	r0, {r5, r7, r9, fp}
 2bc:	0000005c 	andeq	r0, r0, ip, asr r0
 2c0:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
 2c4:	0000021c 	andeq	r0, r0, ip, lsl r2
 2c8:	00000000 	andeq	r0, r0, r0
 2cc:	0000000c 	andeq	r0, r0, ip
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	0000000c 	andeq	r0, r0, ip
 2d8:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
 2dc:	0000000c 	andeq	r0, r0, ip
 2e0:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
 2e4:	00000004 	andeq	r0, r0, r4
	...
 2f0:	000001ec 	andeq	r0, r0, ip, ror #3
 2f4:	23f00002 	mvnscs	r0, #2
 2f8:	00040000 	andeq	r0, r4, r0
	...
 304:	0000000c 	andeq	r0, r0, ip
 308:	00000000 	andeq	r0, r0, r0
 30c:	0000000c 	andeq	r0, r0, ip
 310:	00000000 	andeq	r0, r0, r0
 314:	0000000c 	andeq	r0, r0, ip
 318:	00000000 	andeq	r0, r0, r0
 31c:	0000000c 	andeq	r0, r0, ip
 320:	00000000 	andeq	r0, r0, r0
 324:	0000000c 	andeq	r0, r0, ip
 328:	00000000 	andeq	r0, r0, r0
 32c:	0000000c 	andeq	r0, r0, ip
 330:	00000000 	andeq	r0, r0, r0
 334:	0000000c 	andeq	r0, r0, ip
 338:	00000000 	andeq	r0, r0, r0
 33c:	00000010 	andeq	r0, r0, r0, lsl r0
 340:	00000000 	andeq	r0, r0, r0
 344:	0000000c 	andeq	r0, r0, ip
 348:	00000000 	andeq	r0, r0, r0
 34c:	0000000e 	andeq	r0, r0, lr
 350:	00000000 	andeq	r0, r0, r0
 354:	00000010 	andeq	r0, r0, r0, lsl r0
 358:	00000000 	andeq	r0, r0, r0
 35c:	0000001c 	andeq	r0, r0, ip, lsl r0
 360:	00000000 	andeq	r0, r0, r0
 364:	00000012 	andeq	r0, r0, r2, lsl r0
 368:	08000d28 	stmdaeq	r0, {r3, r5, r8, sl, fp}
 36c:	0000002a 	andeq	r0, r0, sl, lsr #32
 370:	00000000 	andeq	r0, r0, r0
 374:	0000002a 	andeq	r0, r0, sl, lsr #32
 378:	00000000 	andeq	r0, r0, r0
 37c:	00000024 	andeq	r0, r0, r4, lsr #32
 380:	00000000 	andeq	r0, r0, r0
 384:	00000012 	andeq	r0, r0, r2, lsl r0
 388:	00000000 	andeq	r0, r0, r0
 38c:	00000012 	andeq	r0, r0, r2, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	0000001e 	andeq	r0, r0, lr, lsl r0
 398:	08000d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp}
 39c:	0000001e 	andeq	r0, r0, lr, lsl r0
 3a0:	00000000 	andeq	r0, r0, r0
 3a4:	0000001e 	andeq	r0, r0, lr, lsl r0
 3a8:	00000000 	andeq	r0, r0, r0
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
 3b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b8:	00000000 	andeq	r0, r0, r0
 3bc:	0000001e 	andeq	r0, r0, lr, lsl r0
 3c0:	00000000 	andeq	r0, r0, r0
 3c4:	0000001e 	andeq	r0, r0, lr, lsl r0
 3c8:	00000000 	andeq	r0, r0, r0
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	0000001a 	andeq	r0, r0, sl, lsl r0
 3d8:	00000000 	andeq	r0, r0, r0
 3dc:	0000001a 	andeq	r0, r0, sl, lsl r0
 3e0:	00000000 	andeq	r0, r0, r0
 3e4:	00000018 	andeq	r0, r0, r8, lsl r0
 3e8:	00000000 	andeq	r0, r0, r0
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	00000020 	andeq	r0, r0, r0, lsr #32
 3f8:	00000000 	andeq	r0, r0, r0
 3fc:	00000020 	andeq	r0, r0, r0, lsr #32
 400:	08000d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp}
 404:	00000020 	andeq	r0, r0, r0, lsr #32
 408:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 40c:	00000020 	andeq	r0, r0, r0, lsr #32
 410:	00000000 	andeq	r0, r0, r0
 414:	0000001e 	andeq	r0, r0, lr, lsl r0
 418:	00000000 	andeq	r0, r0, r0
 41c:	00000012 	andeq	r0, r0, r2, lsl r0
 420:	00000000 	andeq	r0, r0, r0
 424:	00000020 	andeq	r0, r0, r0, lsr #32
 428:	00000000 	andeq	r0, r0, r0
 42c:	00000020 	andeq	r0, r0, r0, lsr #32
 430:	08000dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp}
 434:	0000001c 	andeq	r0, r0, ip, lsl r0
 438:	08000de8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, fp}
 43c:	0000001c 	andeq	r0, r0, ip, lsl r0
 440:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
 444:	0000001c 	andeq	r0, r0, ip, lsl r0
 448:	00000000 	andeq	r0, r0, r0
 44c:	00000026 	andeq	r0, r0, r6, lsr #32
 450:	08000e20 	stmdaeq	r0, {r5, r9, sl, fp}
 454:	00000040 	andeq	r0, r0, r0, asr #32
 458:	00000000 	andeq	r0, r0, r0
 45c:	00000020 	andeq	r0, r0, r0, lsr #32
 460:	00000000 	andeq	r0, r0, r0
 464:	00000020 	andeq	r0, r0, r0, lsr #32
 468:	00000000 	andeq	r0, r0, r0
 46c:	00000038 	andeq	r0, r0, r8, lsr r0
 470:	00000000 	andeq	r0, r0, r0
 474:	00000020 	andeq	r0, r0, r0, lsr #32
 478:	00000000 	andeq	r0, r0, r0
 47c:	00000020 	andeq	r0, r0, r0, lsr #32
 480:	00000000 	andeq	r0, r0, r0
 484:	0000001c 	andeq	r0, r0, ip, lsl r0
 488:	00000000 	andeq	r0, r0, r0
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000000 	andeq	r0, r0, r0
 494:	000000a8 	andeq	r0, r0, r8, lsr #1
 498:	00000000 	andeq	r0, r0, r0
 49c:	0000005c 	andeq	r0, r0, ip, asr r0
 4a0:	00000000 	andeq	r0, r0, r0
 4a4:	0000005c 	andeq	r0, r0, ip, asr r0
 4a8:	00000000 	andeq	r0, r0, r0
 4ac:	00000020 	andeq	r0, r0, r0, lsr #32
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	00000020 	andeq	r0, r0, r0, lsr #32
 4b8:	00000000 	andeq	r0, r0, r0
 4bc:	00000044 	andeq	r0, r0, r4, asr #32
 4c0:	00000000 	andeq	r0, r0, r0
 4c4:	0000003a 	andeq	r0, r0, sl, lsr r0
 4c8:	00000000 	andeq	r0, r0, r0
 4cc:	00000006 	andeq	r0, r0, r6
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	0000000a 	andeq	r0, r0, sl
	...
 4e0:	00000024 	andeq	r0, r0, r4, lsr #32
 4e4:	307c0002 	rsbscc	r0, ip, r2
 4e8:	00040000 	andeq	r0, r4, r0
 4ec:	00000000 	andeq	r0, r0, r0
 4f0:	08000e60 	stmdaeq	r0, {r5, r6, r9, sl, fp}
 4f4:	00000154 	andeq	r0, r0, r4, asr r1
 4f8:	00000000 	andeq	r0, r0, r0
 4fc:	00000070 	andeq	r0, r0, r0, ror r0
	...
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
 50c:	32580002 	subscc	r0, r8, #2
 510:	00040000 	andeq	r0, r4, r0
 514:	00000000 	andeq	r0, r0, r0
 518:	08000fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp}
 51c:	00000038 	andeq	r0, r0, r8, lsr r0
	...
 528:	00000094 	muleq	r0, r4, r0
 52c:	36550002 	ldrbcc	r0, [r5], -r2
 530:	00040000 	andeq	r0, r4, r0
 534:	00000000 	andeq	r0, r0, r0
 538:	08000fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp}
 53c:	00000024 	andeq	r0, r0, r4, lsr #32
 540:	08001010 	stmdaeq	r0, {r4, ip}
 544:	00000024 	andeq	r0, r0, r4, lsr #32
 548:	08001034 	stmdaeq	r0, {r2, r4, r5, ip}
 54c:	00000090 	muleq	r0, r0, r0
 550:	080010c4 	stmdaeq	r0, {r2, r6, r7, ip}
 554:	000000a8 	andeq	r0, r0, r8, lsr #1
 558:	0800116c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip}
 55c:	00000038 	andeq	r0, r0, r8, lsr r0
 560:	080011a4 	stmdaeq	r0, {r2, r5, r7, r8, ip}
 564:	00000048 	andeq	r0, r0, r8, asr #32
 568:	080011ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip}
 56c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 570:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
 574:	00000084 	andeq	r0, r0, r4, lsl #1
 578:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
 57c:	00000024 	andeq	r0, r0, r4, lsr #32
 580:	08001364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip}
 584:	0000001c 	andeq	r0, r0, ip, lsl r0
 588:	08001380 	stmdaeq	r0, {r7, r8, r9, ip}
 58c:	00000040 	andeq	r0, r0, r0, asr #32
 590:	080013c0 	stmdaeq	r0, {r6, r7, r8, r9, ip}
 594:	000002dc 	ldrdeq	r0, [r0], -ip
 598:	0800169c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip}
 59c:	000000c8 	andeq	r0, r0, r8, asr #1
 5a0:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
 5a4:	00000038 	andeq	r0, r0, r8, lsr r0
 5a8:	0800179c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip}
 5ac:	0000005c 	andeq	r0, r0, ip, asr r0
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	00000002 	andeq	r0, r0, r2
	...
 5c0:	00000024 	andeq	r0, r0, r4, lsr #32
 5c4:	44390002 	ldrtmi	r0, [r9], #-2
 5c8:	00040000 	andeq	r0, r4, r0
 5cc:	00000000 	andeq	r0, r0, r0
 5d0:	080017f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, ip}
 5d4:	00000030 	andeq	r0, r0, r0, lsr r0
 5d8:	08001828 	stmdaeq	r0, {r3, r5, fp, ip}
 5dc:	00000024 	andeq	r0, r0, r4, lsr #32
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000006b 	andeq	r0, r0, fp, rrx
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	mrseq	r0, (UNDEF: 4)
	...
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      14:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
      1c:	5f632f62 	svcpl	0x00632f62
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
      24:	6174735f 	cmnvs	r4, pc, asr r3
      28:	70757472 	rsbsvc	r7, r5, r2, ror r4
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	2f00732e 	svccs	0x0000732e
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	6964656d 	stmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
      34:	66732f61 	ldrbtvs	r2, [r3], -r1, ror #30
      38:	7469475f 	strbtvc	r4, [r9], #-1887	; 0x75f

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	2f627548 	svccs	0x00627548

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	7274614d 	rsbsvc	r6, r4, #1073741843	; 0x40000013
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	532f7869 	teqpl	pc, #6881280	; 0x690000
      48:	7774666f 	ldrbvc	r6, [r4, -pc, ror #12]!
      4c:	2f657261 	svccs	0x00657261

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	746f6f42 	strbtvc	r6, [pc], #-3906	; 58 <_Minimum_Stack_Size-0xa8>
      54:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
      58:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
      5c:	47006372 	smlsdxmi	r0, r2, r3, r6
      60:	4120554e 	teqmi	r0, lr, asr #10
      64:	2e322053 	mrccs	0, 1, r2, cr2, cr3, {2}
      68:	322e3332 	eorcc	r3, lr, #-939524096	; 0xc8000000
      6c:	71800100 	orrvc	r0, r0, r0, lsl #2
      70:	02000000 	andeq	r0, r0, #0
      74:	00001200 	andeq	r1, r0, r0, lsl #4
      78:	75010400 	strvc	r0, [r1, #-1024]	; 0x400
	...
      84:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
      88:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
      8c:	6c5f3233 	lfmvs	f3, 2, [pc], {51}	; 0x33
      90:	632f6269 	teqvs	pc, #-1879048186	; 0x90000006
      94:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0x26f
      98:	5f336d78 	svcpl	0x00336d78
      9c:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
      a0:	00532e6f 	subseq	r2, r3, pc, ror #28
      a4:	64656d2f 	strbtvs	r6, [r5], #-3375	; 0xd2f
      a8:	732f6169 	teqvc	pc, #1073741850	; 0x4000001a
      ac:	69475f66 	stmdbvs	r7, {r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
      b0:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
      b4:	74614d2f 	strbtvc	r4, [r1], #-3375	; 0xd2f
      b8:	2f786972 	svccs	0x00786972
      bc:	74666f53 	strbtvc	r6, [r6], #-3923	; 0xf53
      c0:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
      c4:	6f6f422f 	svcvs	0x006f422f
      c8:	616f6c74 	smcvs	63172	; 0xf6c4
      cc:	2f726564 	svccs	0x00726564
      d0:	00637273 	rsbeq	r7, r3, r3, ror r2
      d4:	20554e47 	subscs	r4, r5, r7, asr #28
      d8:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      dc:	2e33322e 	cdpcs	2, 3, cr3, cr3, cr14, {1}
      e0:	80010032 	andhi	r0, r1, r2, lsr r0
      e4:	00000d0e 	andeq	r0, r0, lr, lsl #26
      e8:	00260004 	eoreq	r0, r6, r4
      ec:	01040000 	mrseq	r0, (UNDEF: 4)
      f0:	0000017e 	andeq	r0, r0, lr, ror r1
      f4:	00013d01 	andeq	r3, r1, r1, lsl #26
      f8:	00003200 	andeq	r3, r0, r0, lsl #4
      fc:	00002000 	andeq	r2, r0, r0
     100:	00000000 	andeq	r0, r0, r0
     104:	00011b00 	andeq	r1, r1, r0, lsl #22
     108:	05040200 	streq	r0, [r4, #-512]	; 0x200
     10c:	0000021c 	andeq	r0, r0, ip, lsl r2
     110:	c8050202 	stmdagt	r5, {r1, r9}
     114:	02000006 	andeq	r0, r0, #6
     118:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
     11c:	75030000 	strvc	r0, [r3, #-0]
     120:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
     124:	00004527 	andeq	r4, r0, r7, lsr #10
     128:	07040200 	streq	r0, [r4, -r0, lsl #4]
     12c:	000003a1 	andeq	r0, r0, r1, lsr #7
     130:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
     134:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
     138:	02000000 	andeq	r0, r0, #0
     13c:	03fd0702 	mvnseq	r0, #524288	; 0x80000
     140:	75030000 	strvc	r0, [r3, #-0]
     144:	29020038 	stmdbcs	r2, {r3, r4, r5}
     148:	00000068 	andeq	r0, r0, r8, rrx
     14c:	72080102 	andvc	r0, r8, #-2147483648	; 0x80000000
     150:	04000006 	streq	r0, [r0], #-6
     154:	0000046c 	andeq	r0, r0, ip, ror #8
     158:	007a2f02 	rsbseq	r2, sl, r2, lsl #30
     15c:	45050000 	strmi	r0, [r5, #-0]
     160:	04000000 	streq	r0, [r0], #-0
     164:	00000179 	andeq	r0, r0, r9, ror r1
     168:	008a3002 	addeq	r3, sl, r2
     16c:	57050000 	strpl	r0, [r5, -r0]
     170:	03000000 	movweq	r0, #0
     174:	00387576 	eorseq	r7, r8, r6, ror r5
     178:	009a3102 	addseq	r3, sl, r2, lsl #2
     17c:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
     180:	06000000 	streq	r0, [r0], -r0
     184:	b4370201 	ldrtlt	r0, [r7], #-513	; 0x201
     188:	07000000 	streq	r0, [r0, -r0]
     18c:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     190:	076d0700 	strbeq	r0, [sp, -r0, lsl #14]!
     194:	00010000 	andeq	r0, r1, r0
     198:	00045904 	andeq	r5, r4, r4, lsl #18
     19c:	9f370200 	svcls	0x00370200
     1a0:	02000000 	andeq	r0, r0, #0
     1a4:	05450704 	strbeq	r0, [r5, #-1796]	; 0x704
     1a8:	04080000 	streq	r0, [r8], #-0
     1ac:	00ffa903 	rscseq	sl, pc, r3, lsl #18
     1b0:	71090000 	mrsvc	r0, (UNDEF: 9)
     1b4:	03000004 	movweq	r0, #4
     1b8:	00005eaa 	andeq	r5, r0, sl, lsr #29
     1bc:	94090000 	strls	r0, [r9], #-0
     1c0:	03000004 	movweq	r0, #4
     1c4:	00005eab 	andeq	r5, r0, fp, lsr #29
     1c8:	76090100 	strvc	r0, [r9], -r0, lsl #2
     1cc:	03000003 	movweq	r0, #3
     1d0:	00005eac 	andeq	r5, r0, ip, lsr #29
     1d4:	00090200 	andeq	r0, r9, r0, lsl #4
     1d8:	03000000 	movweq	r0, #0
     1dc:	0000b4ad 	andeq	fp, r0, sp, lsr #9
     1e0:	04000300 	streq	r0, [r0], #-768	; 0x300
     1e4:	000004c0 	andeq	r0, r0, r0, asr #9
     1e8:	00c6ae03 	sbceq	sl, r6, r3, lsl #28
     1ec:	040a0000 	streq	r0, [sl], #-0
     1f0:	00000110 	andeq	r0, r0, r0, lsl r1
     1f4:	03910c0b 	orrseq	r0, r1, #2816	; 0xb00
     1f8:	05010000 	streq	r0, [r1, #-0]
     1fc:	00013616 	andeq	r3, r1, r6, lsl r6
     200:	01240700 	teqeq	r4, r0, lsl #14
     204:	07000000 	streq	r0, [r0, -r0]
     208:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     20c:	08220701 	stmdaeq	r2!, {r0, r8, r9, sl}
     210:	07020000 	streq	r0, [r2, -r0]
     214:	00000449 	andeq	r0, r0, r9, asr #8
     218:	b20d0003 	andlt	r0, sp, #3
     21c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     220:	015b2404 	cmpeq	fp, r4, lsl #8
     224:	63090000 	movwvs	r0, #36864	; 0x9000
     228:	04000001 	streq	r0, [r0], #-1
     22c:	00015b26 	andeq	r5, r1, r6, lsr #22
     230:	c3090000 	movwgt	r0, #36864	; 0x9000
     234:	04000005 	streq	r0, [r0], #-5
     238:	00004c27 	andeq	r4, r0, r7, lsr #24
     23c:	0a000400 	beq	1244 <__Stack_Size+0xe44>
     240:	00005e04 	andeq	r5, r0, r4, lsl #28
     244:	02fc0400 	rscseq	r0, ip, #0, 8
     248:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
     24c:	00000136 	andeq	r0, r0, r6, lsr r1
     250:	0002fb04 	andeq	pc, r2, r4, lsl #22
     254:	77290400 	strvc	r0, [r9, -r0, lsl #8]!
     258:	0a000001 	beq	264 <_Minimum_Stack_Size+0x164>
     25c:	00013604 	andeq	r3, r1, r4, lsl #12
     260:	07650c00 	strbeq	r0, [r5, -r0, lsl #24]!
     264:	04010000 	streq	r0, [r1], #-0
     268:	0001a22d 	andeq	sl, r1, sp, lsr #4
     26c:	08f60700 	ldmeq	r6!, {r8, r9, sl}^
     270:	07000000 	streq	r0, [r0, -r0]
     274:	00000410 	andeq	r0, r0, r0, lsl r4
     278:	07a40701 	streq	r0, [r4, r1, lsl #14]!
     27c:	07020000 	streq	r0, [r2, -r0]
     280:	00000248 	andeq	r0, r0, r8, asr #4
     284:	66040003 	strvs	r0, [r4], -r3
     288:	04000007 	streq	r0, [r0], #-7
     28c:	00017d34 	andeq	r7, r1, r4, lsr sp
     290:	091b0d00 	ldmdbeq	fp, {r8, sl, fp}
     294:	040c0000 	streq	r0, [ip], #-0
     298:	0001ea38 	andeq	lr, r1, r8, lsr sl
     29c:	02b60900 	adcseq	r0, r6, #0, 18
     2a0:	50040000 	andpl	r0, r4, r0
     2a4:	0000004c 	andeq	r0, r0, ip, asr #32
     2a8:	033f0900 	teqeq	pc, #0, 18
     2ac:	51040000 	mrspl	r0, (UNDEF: 4)
     2b0:	0000004c 	andeq	r0, r0, ip, asr #32
     2b4:	158f0902 	strne	r0, [pc, #2306]	; bbe <__Stack_Size+0x7be>
     2b8:	52040000 	andpl	r0, r4, #0
     2bc:	0000004c 	andeq	r0, r0, ip, asr #32
     2c0:	01090904 	tsteq	r9, r4, lsl #18
     2c4:	53040000 	movwpl	r0, #16384	; 0x4000
     2c8:	000001f9 	strdeq	r0, [r0], -r9
     2cc:	5b0e0008 	blpl	3802f4 <__Stack_Size+0x37fef4>
     2d0:	f9000001 			; <UNDEFINED> instruction: 0xf9000001
     2d4:	0f000001 	svceq	0x00000001
     2d8:	0000004c 	andeq	r0, r0, ip, asr #32
     2dc:	ea040a00 	b	102ae4 <__Stack_Size+0x1026e4>
     2e0:	04000001 	streq	r0, [r0], #-1
     2e4:	0000091c 	andeq	r0, r0, ip, lsl r9
     2e8:	01ad5404 			; <UNDEFINED> instruction: 0x01ad5404
     2ec:	fd0d0000 	stc2	0, cr0, [sp, #-0]
     2f0:	02000007 	andeq	r0, r0, #7
     2f4:	022f5804 	eoreq	r5, pc, #4, 16	; 0x40000
     2f8:	3a090000 	bcc	240300 <__Stack_Size+0x23ff00>
     2fc:	04000009 	streq	r0, [r0], #-9
     300:	00005e5a 	andeq	r5, r0, sl, asr lr
     304:	d6090000 	strle	r0, [r9], -r0
     308:	04000003 	streq	r0, [r0], #-3
     30c:	00005e5b 	andeq	r5, r0, fp, asr lr
     310:	04000100 	streq	r0, [r0], #-256	; 0x100
     314:	000007fe 	strdeq	r0, [r0], -lr
     318:	020a5d04 	andeq	r5, sl, #4, 26	; 0x100
     31c:	42100000 	andsmi	r0, r0, #0
     320:	04020057 	streq	r0, [r2], #-87	; 0x57
     324:	00025e62 	andeq	r5, r2, r2, ror #28
     328:	62621100 	rsbvs	r1, r2, #0, 2
     32c:	65040030 	strvs	r0, [r4, #-48]	; 0x30
     330:	0000005e 	andeq	r0, r0, lr, asr r0
     334:	62621100 	rsbvs	r1, r2, #0, 2
     338:	66040031 			; <UNDEFINED> instruction: 0x66040031
     33c:	0000005e 	andeq	r0, r0, lr, asr r0
     340:	02120001 	andseq	r0, r2, #1
     344:	027a5f04 	rsbseq	r5, sl, #4, 30
     348:	77130000 	ldrvc	r0, [r3, -r0]
     34c:	4c610400 	cfstrdmi	mvd0, [r1], #-0
     350:	13000000 	movwne	r0, #0
     354:	04007762 	streq	r7, [r0], #-1890	; 0x762
     358:	00023a68 	andeq	r3, r2, r8, ror #20
     35c:	25040000 	strcs	r0, [r4, #-0]
     360:	04000004 	streq	r0, [r0], #-4
     364:	00025e69 	andeq	r5, r2, r9, ror #28
     368:	00620d00 	rsbeq	r0, r2, r0, lsl #26
     36c:	041c0000 	ldreq	r0, [ip], #-0
     370:	0003166b 	andeq	r1, r3, fp, ror #12
     374:	05800900 	streq	r0, [r0, #2304]	; 0x900
     378:	6d040000 	stcvs	0, cr0, [r4, #-0]
     37c:	0000005e 	andeq	r0, r0, lr, asr r0
     380:	023c0900 	eorseq	r0, ip, #0, 18
     384:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
     388:	0000005e 	andeq	r0, r0, lr, asr r0
     38c:	043e0901 	ldrteq	r0, [lr], #-2305	; 0x901
     390:	6f040000 	svcvs	0x00040000
     394:	0000027a 	andeq	r0, r0, sl, ror r2
     398:	016e0902 	cmneq	lr, r2, lsl #18
     39c:	70040000 	andvc	r0, r4, r0
     3a0:	0000027a 	andeq	r0, r0, sl, ror r2
     3a4:	083d0904 	ldmdaeq	sp!, {r2, r8, fp}
     3a8:	71040000 	mrsvc	r0, (UNDEF: 4)
     3ac:	0000027a 	andeq	r0, r0, sl, ror r2
     3b0:	09490906 	stmdbeq	r9, {r1, r2, r8, fp}^
     3b4:	73040000 	movwvc	r0, #16384	; 0x4000
     3b8:	0000005e 	andeq	r0, r0, lr, asr r0
     3bc:	03c60908 	biceq	r0, r6, #8, 18	; 0x20000
     3c0:	74040000 	strvc	r0, [r4], #-0
     3c4:	0000005e 	andeq	r0, r0, lr, asr r0
     3c8:	04d10909 	ldrbeq	r0, [r1], #2313	; 0x909
     3cc:	75040000 	strvc	r0, [r4, #-0]
     3d0:	0000005e 	andeq	r0, r0, lr, asr r0
     3d4:	0892090a 	ldmeq	r2, {r1, r3, r8, fp}
     3d8:	76040000 	strvc	r0, [r4], -r0
     3dc:	0000005e 	andeq	r0, r0, lr, asr r0
     3e0:	064c090b 	strbeq	r0, [ip], -fp, lsl #18
     3e4:	77040000 	strvc	r0, [r4, -r0]
     3e8:	0000005e 	andeq	r0, r0, lr, asr r0
     3ec:	0743090c 	strbeq	r0, [r3, -ip, lsl #18]
     3f0:	7a040000 	bvc	1003f8 <__Stack_Size+0xffff8>
     3f4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     3f8:	63040010 	movwvs	r0, #16400	; 0x4010
     3fc:	04000000 	streq	r0, [r0], #-0
     400:	0002857b 	andeq	r8, r2, fp, ror r5
     404:	07720d00 	ldrbeq	r0, [r2, -r0, lsl #26]!
     408:	04340000 	ldrteq	r0, [r4], #-0
     40c:	0003ca7d 	andeq	ip, r3, sp, ror sl
     410:	056d0900 	strbeq	r0, [sp, #-2304]!	; 0x900
     414:	7f040000 	svcvc	0x00040000
     418:	0000010a 	andeq	r0, r0, sl, lsl #2
     41c:	03ed0900 	mvneq	r0, #0, 18
     420:	80040000 	andhi	r0, r4, r0
     424:	0000010a 	andeq	r0, r0, sl, lsl #2
     428:	07ca0904 	strbeq	r0, [sl, r4, lsl #18]
     42c:	83040000 	movwhi	r0, #16384	; 0x4000
     430:	0000010a 	andeq	r0, r0, sl, lsl #2
     434:	07dc0908 	ldrbeq	r0, [ip, r8, lsl #18]
     438:	84040000 	strhi	r0, [r4], #-0
     43c:	0000010a 	andeq	r0, r0, sl, lsl #2
     440:	054e090c 	strbeq	r0, [lr, #-2316]	; 0x90c
     444:	96040000 	strls	r0, [r4], -r0
     448:	000003d9 	ldrdeq	r0, [r0], -r9
     44c:	07270910 			; <UNDEFINED> instruction: 0x07270910
     450:	a1040000 	mrsge	r0, (UNDEF: 4)
     454:	000003d9 	ldrdeq	r0, [r0], -r9
     458:	05180914 	ldreq	r0, [r8, #-2324]	; 0x914
     45c:	ab040000 	blge	100464 <__Stack_Size+0x100064>
     460:	000003f3 	strdeq	r0, [r0], -r3
     464:	015a0918 	cmpeq	sl, r8, lsl r9
     468:	ad040000 	stcge	0, cr0, [r4, #-0]
     46c:	000001f9 	strdeq	r0, [r0], -r9
     470:	0228091c 	eoreq	r0, r8, #28, 18	; 0x70000
     474:	ae040000 	cdpge	0, 0, cr0, cr4, cr0, {0}
     478:	000001f9 	strdeq	r0, [r0], -r9
     47c:	084c0920 	stmdaeq	ip, {r5, r8, fp}^
     480:	af040000 	svcge	0x00040000
     484:	000001f9 	strdeq	r0, [r0], -r9
     488:	06340924 	ldrteq	r0, [r4], -r4, lsr #18
     48c:	b0040000 	andlt	r0, r4, r0
     490:	000001f9 	strdeq	r0, [r0], -r9
     494:	05ab0928 	streq	r0, [fp, #2344]!	; 0x928
     498:	b2040000 	andlt	r0, r4, #0
     49c:	0000015b 	andeq	r0, r0, fp, asr r1
     4a0:	158c092c 	strne	r0, [ip, #2348]	; 0x92c
     4a4:	b3040000 	movwlt	r0, #16384	; 0x4000
     4a8:	0000005e 	andeq	r0, r0, lr, asr r0
     4ac:	a20e0030 	andge	r0, lr, #48	; 0x30
     4b0:	d9000001 	stmdble	r0, {r0}
     4b4:	0f000003 	svceq	0x00000003
     4b8:	0000005e 	andeq	r0, r0, lr, asr r0
     4bc:	ca040a00 	bgt	102cc4 <__Stack_Size+0x1028c4>
     4c0:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     4c4:	000001a2 	andeq	r0, r0, r2, lsr #3
     4c8:	000003f3 	strdeq	r0, [r0], -r3
     4cc:	00005e0f 	andeq	r5, r0, pc, lsl #28
     4d0:	005e0f00 	subseq	r0, lr, r0, lsl #30
     4d4:	0a000000 	beq	4dc <__Stack_Size+0xdc>
     4d8:	0003df04 	andeq	sp, r3, r4, lsl #30
     4dc:	07730400 	ldrbeq	r0, [r3, -r0, lsl #8]!
     4e0:	b5040000 	strlt	r0, [r4, #-0]
     4e4:	00000321 	andeq	r0, r0, r1, lsr #6
     4e8:	0006800d 	andeq	r8, r6, sp
     4ec:	b7042400 	strlt	r2, [r4, -r0, lsl #8]
     4f0:	0000047d 	andeq	r0, r0, sp, ror r4
     4f4:	0006ed09 	andeq	lr, r6, r9, lsl #26
     4f8:	0ab90400 	beq	fee41500 <BootRAM+0xddb1ca1>
     4fc:	00000001 	andeq	r0, r0, r1
     500:	0005e909 	andeq	lr, r5, r9, lsl #18
     504:	0aba0400 	beq	fee8150c <BootRAM+0xddf1cad>
     508:	04000001 	streq	r0, [r0], #-1
     50c:	00060509 	andeq	r0, r6, r9, lsl #10
     510:	0abb0400 	beq	feec1518 <BootRAM+0xde31cb9>
     514:	08000001 	stmdaeq	r0, {r0}
     518:	00011209 	andeq	r1, r1, r9, lsl #4
     51c:	0abc0400 	beq	fef01524 <BootRAM+0xde71cc5>
     520:	0c000001 	stceq	0, cr0, [r0], {1}
     524:	0006b909 	andeq	fp, r6, r9, lsl #18
     528:	0abd0400 	beq	fef41530 <BootRAM+0xdeb1cd1>
     52c:	10000001 	andne	r0, r0, r1
     530:	00042c09 	andeq	r2, r4, r9, lsl #24
     534:	0abe0400 	beq	fef8153c <BootRAM+0xdef1cdd>
     538:	14000001 	strne	r0, [r0], #-1
     53c:	00009209 	andeq	r9, r0, r9, lsl #4
     540:	0abf0400 	beq	fefc1548 <BootRAM+0xdf31ce9>
     544:	18000001 	stmdane	r0, {r0}
     548:	0005d309 	andeq	sp, r5, r9, lsl #6
     54c:	0ac00400 	beq	ff001554 <BootRAM+0xdf71cf5>
     550:	1c000001 	stcne	0, cr0, [r0], {1}
     554:	00001c09 	andeq	r1, r0, r9, lsl #24
     558:	0ac10400 	beq	ff041560 <BootRAM+0xdfb1d01>
     55c:	20000001 	andcs	r0, r0, r1
     560:	06810400 	streq	r0, [r1], r0, lsl #8
     564:	c3040000 	movwgt	r0, #16384	; 0x4000
     568:	00000404 	andeq	r0, r0, r4, lsl #8
     56c:	0008e80c 	andeq	lr, r8, ip, lsl #16
     570:	3d060100 	stfccs	f0, [r6, #-0]
     574:	000004c5 	andeq	r0, r0, r5, asr #9
     578:	00025c07 	andeq	r5, r2, r7, lsl #24
     57c:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
     580:	01000008 	tsteq	r0, r8
     584:	00070307 	andeq	r0, r7, r7, lsl #6
     588:	86070200 	strhi	r0, [r7], -r0, lsl #4
     58c:	03000000 	movweq	r0, #0
     590:	0000e807 	andeq	lr, r0, r7, lsl #16
     594:	27070400 	strcs	r0, [r7, -r0, lsl #8]
     598:	05000006 	streq	r0, [r0, #-6]
     59c:	00041a07 	andeq	r1, r4, r7, lsl #20
     5a0:	b7070600 	strlt	r0, [r7, -r0, lsl #12]
     5a4:	07000005 	streq	r0, [r0, -r5]
     5a8:	08e90400 	stmiaeq	r9!, {sl}^
     5ac:	46060000 	strmi	r0, [r6], -r0
     5b0:	00000488 	andeq	r0, r0, r8, lsl #9
     5b4:	0005720c 	andeq	r7, r5, ip, lsl #4
     5b8:	48060100 	stmdami	r6, {r8}
     5bc:	00000501 	andeq	r0, r0, r1, lsl #10
     5c0:	00090207 	andeq	r0, r9, r7, lsl #4
     5c4:	5e070000 	cdppl	0, 0, cr0, cr7, cr0, {0}
     5c8:	01000003 	tsteq	r0, r3
     5cc:	00013507 	andeq	r3, r1, r7, lsl #10
     5d0:	de070200 	cdple	2, 0, cr0, cr7, cr0, {0}
     5d4:	03000000 	movweq	r0, #0
     5d8:	0008ce07 	andeq	ip, r8, r7, lsl #28
     5dc:	7b070400 	blvc	1c15e4 <__Stack_Size+0x1c11e4>
     5e0:	05000008 	streq	r0, [r0, #-8]
     5e4:	01020800 	tsteq	r2, r0, lsl #16
     5e8:	0005229c 	muleq	r5, ip, r2
     5ec:	00750900 	rsbseq	r0, r5, r0, lsl #18
     5f0:	9d010000 	stcls	0, cr0, [r1, #-0]
     5f4:	00000522 	andeq	r0, r0, r2, lsr #10
     5f8:	00cb0900 	sbceq	r0, fp, r0, lsl #18
     5fc:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
     600:	00000527 	andeq	r0, r0, r7, lsr #10
     604:	c5050001 	strgt	r0, [r5, #-1]
     608:	05000004 	streq	r0, [r0, #-4]
     60c:	0000005e 	andeq	r0, r0, lr, asr r0
     610:	00036714 	andeq	r6, r3, r4, lsl r7
     614:	01640100 	cmneq	r4, r0, lsl #2
     618:	000001a2 	andeq	r0, r0, r2, lsr #3
     61c:	00054a01 	andeq	r4, r5, r1, lsl #20
     620:	081a1500 	ldmdaeq	sl, {r8, sl, ip}
     624:	64010000 	strvs	r0, [r1], #-0
     628:	00005e01 	andeq	r5, r0, r1, lsl #28
     62c:	e7160000 	ldr	r0, [r6, -r0]
     630:	01000004 	tsteq	r0, r4
     634:	6f1701a6 	svcvs	0x001701a6
     638:	01000009 	tsteq	r0, r9
     63c:	00013ca2 	andeq	r3, r1, r2, lsr #25
     640:	00000208 	andeq	r0, r0, r8, lsl #4
     644:	189c0100 	ldmne	ip, {r8}
     648:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
     64c:	3e013701 	cdpcc	7, 0, cr3, cr1, cr1, {0}
     650:	02080001 	andeq	r0, r8, #1
     654:	01000000 	mrseq	r0, (UNDEF: 0)
     658:	0332189c 	teqeq	r2, #156, 16	; 0x9c0000
     65c:	3a010000 	bcc	40664 <__Stack_Size+0x40264>
     660:	00014001 	andeq	r4, r1, r1
     664:	00000208 	andeq	r0, r0, r8, lsl #4
     668:	199c0100 	ldmibne	ip, {r8}
     66c:	00000710 	andeq	r0, r0, r0, lsl r7
     670:	a2016e01 	andge	r6, r1, #1, 28
     674:	42000001 	andmi	r0, r0, #1
     678:	0a080001 	beq	200684 <__Stack_Size+0x200284>
     67c:	01000000 	mrseq	r0, (UNDEF: 0)
     680:	0005c09c 	muleq	r5, ip, r0
     684:	048a1a00 	streq	r1, [sl], #2560	; 0xa00
     688:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     68c:	00005e01 	andeq	r5, r0, r1, lsl #28
     690:	00000000 	andeq	r0, r0, r0
     694:	07b21b00 	ldreq	r1, [r2, r0, lsl #22]!
     698:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     69c:	00005e01 	andeq	r5, r0, r1, lsl #28
     6a0:	00510100 	subseq	r0, r1, r0, lsl #2
     6a4:	00028218 	andeq	r8, r2, r8, lsl r2
     6a8:	01950100 	orrseq	r0, r5, r0, lsl #2
     6ac:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
     6b0:	00000002 	andeq	r0, r0, r2
     6b4:	7f189c01 	svcvc	0x00189c01
     6b8:	01000007 	tsteq	r0, r7
     6bc:	01500199 			; <UNDEFINED> instruction: 0x01500199
     6c0:	00180800 	andseq	r0, r8, r0, lsl #16
     6c4:	9c010000 	stcls	0, cr0, [r1], {-0}
     6c8:	0008a418 	andeq	sl, r8, r8, lsl r4
     6cc:	019f0100 	orrseq	r0, pc, r0, lsl #2
     6d0:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}
     6d4:	00000002 	andeq	r0, r0, r2
     6d8:	55189c01 	ldrpl	r9, [r8, #-3073]	; 0xc01
     6dc:	01000007 	tsteq	r0, r7
     6e0:	016a01a3 	smultbeq	sl, r3, r1
     6e4:	00020800 	andeq	r0, r2, r0, lsl #16
     6e8:	9c010000 	stcls	0, cr0, [r1], {-0}
     6ec:	00090e18 	andeq	r0, r9, r8, lsl lr
     6f0:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
     6f4:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
     6f8:	00000002 	andeq	r0, r0, r2
     6fc:	2a189c01 	bcs	627708 <__Stack_Size+0x627308>
     700:	01000009 	tsteq	r0, r9
     704:	016e01ab 	smultbeq	lr, fp, r1
     708:	00020800 	andeq	r0, r2, r0, lsl #16
     70c:	9c010000 	stcls	0, cr0, [r1], {-0}
     710:	00050218 	andeq	r0, r5, r8, lsl r2
     714:	01af0100 			; <UNDEFINED> instruction: 0x01af0100
     718:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
     71c:	00000002 	andeq	r0, r0, r2
     720:	f5189c01 			; <UNDEFINED> instruction: 0xf5189c01
     724:	01000000 	mrseq	r0, (UNDEF: 0)
     728:	017201b3 	ldrheq	r0, [r2, #-19]!	; 0xffffffed
     72c:	00020800 	andeq	r0, r2, r0, lsl #16
     730:	9c010000 	stcls	0, cr0, [r1], {-0}
     734:	00030b18 	andeq	r0, r3, r8, lsl fp
     738:	01b70100 			; <UNDEFINED> instruction: 0x01b70100
     73c:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
     740:	0000000c 	andeq	r0, r0, ip
     744:	ea1c9c01 	b	727750 <__Stack_Size+0x727350>
     748:	01000003 	tsteq	r0, r3
     74c:	0180011e 	orreq	r0, r0, lr, lsl r1
     750:	00a80800 	adceq	r0, r8, r0, lsl #16
     754:	9c010000 	stcls	0, cr0, [r1], {-0}
     758:	000006eb 	andeq	r0, r0, fp, ror #13
     75c:	0001b01d 	andeq	fp, r1, sp, lsl r0
     760:	00001208 	andeq	r1, r0, r8, lsl #4
     764:	00069600 	andeq	r9, r6, r0, lsl #12
     768:	04811e00 	streq	r1, [r1], #3584	; 0xe00
     76c:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
     770:	00004c01 	andeq	r4, r0, r1, lsl #24
     774:	00002100 	andeq	r2, r0, r0, lsl #2
     778:	861f0000 	ldrhi	r0, [pc], -r0
     77c:	30080001 	andcc	r0, r8, r1
     780:	2000000c 	andcs	r0, r0, ip
     784:	080001e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8}
     788:	00000c37 	andeq	r0, r0, r7, lsr ip
     78c:	000006b3 			; <UNDEFINED> instruction: 0x000006b3
     790:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     794:	20000074 	andcs	r0, r0, r4, ror r0
     798:	080001f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8}
     79c:	00000c49 	andeq	r0, r0, r9, asr #24
     7a0:	000006c7 	andeq	r0, r0, r7, asr #13
     7a4:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     7a8:	20000074 	andcs	r0, r0, r4, ror r0
     7ac:	080001fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8}
     7b0:	00000c60 	andeq	r0, r0, r0, ror #24
     7b4:	000006db 	ldrdeq	r0, [r0], -fp
     7b8:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     7bc:	22000074 	andcs	r0, r0, #116	; 0x74
     7c0:	0800020a 	stmdaeq	r0, {r1, r3, r9}
     7c4:	00000c72 	andeq	r0, r0, r2, ror ip
     7c8:	01500121 	cmpeq	r0, r1, lsr #2
     7cc:	19000030 	stmdbne	r0, {r4, r5}
     7d0:	00000665 	andeq	r0, r0, r5, ror #12
     7d4:	a2013d01 	andge	r3, r1, #1, 26	; 0x40
     7d8:	28000001 	stmdacs	r0, {r0}
     7dc:	60080002 	andvs	r0, r8, r2
     7e0:	01000000 	mrseq	r0, (UNDEF: 0)
     7e4:	00073b9c 	muleq	r7, ip, fp
     7e8:	081a1a00 	ldmdaeq	sl, {r9, fp, ip}
     7ec:	3d010000 	stccc	0, cr0, [r1, #-0]
     7f0:	00005e01 	andeq	r5, r0, r1, lsl #28
     7f4:	00007000 	andeq	r7, r0, r0
     7f8:	09561e00 	ldmdbeq	r6, {r9, sl, fp, ip}^
     7fc:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
     800:	0001f901 	andeq	pc, r1, r1, lsl #18
     804:	00009100 	andeq	r9, r0, r0, lsl #2
     808:	02401f00 	subeq	r1, r0, #0, 30
     80c:	0c830800 	stceq	8, cr0, [r3], {0}
     810:	6c230000 	stcvs	0, cr0, [r3], #-0
     814:	21080002 	tstcs	r8, r2
     818:	74025001 	strvc	r5, [r2], #-1
     81c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     820:	00000157 	andeq	r0, r0, r7, asr r1
     824:	5b017701 	blpl	5e430 <__Stack_Size+0x5e030>
     828:	88000001 	stmdahi	r0, {r0}
     82c:	0c080002 	stceq	0, cr0, [r8], {2}
     830:	01000000 	mrseq	r0, (UNDEF: 0)
     834:	00076f9c 	muleq	r7, ip, pc	; <UNPREDICTABLE>
     838:	656c2400 	strbvs	r2, [ip, #-1024]!	; 0x400
     83c:	7701006e 	strvc	r0, [r1, -lr, rrx]
     840:	00004c01 	andeq	r4, r0, r1, lsl #24
     844:	0000c800 	andeq	ip, r0, r0, lsl #16
     848:	028e2500 	addeq	r2, lr, #0, 10
     84c:	0c8e0800 	stceq	8, cr0, [lr], {0}
     850:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     854:	00000225 	andeq	r0, r0, r5, lsr #4
     858:	5b017b01 	blpl	5f464 <__Stack_Size+0x5f064>
     85c:	94000001 	strls	r0, [r0], #-1
     860:	0c080002 	stceq	0, cr0, [r8], {2}
     864:	01000000 	mrseq	r0, (UNDEF: 0)
     868:	0007a39c 	muleq	r7, ip, r3
     86c:	656c2400 	strbvs	r2, [ip, #-1024]!	; 0x400
     870:	7b01006e 	blvc	40a30 <__Stack_Size+0x40630>
     874:	00004c01 	andeq	r4, r0, r1, lsl #24
     878:	0000e900 	andeq	lr, r0, r0, lsl #18
     87c:	029a2500 	addseq	r2, sl, #0, 10
     880:	0c8e0800 	stceq	8, cr0, [lr], {0}
     884:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     888:	00000849 	andeq	r0, r0, r9, asr #16
     88c:	5b017f01 	blpl	60498 <__Stack_Size+0x60098>
     890:	a0000001 	andge	r0, r0, r1
     894:	20080002 	andcs	r0, r8, r2
     898:	01000000 	mrseq	r0, (UNDEF: 0)
     89c:	0007e39c 	muleq	r7, ip, r3
     8a0:	656c2400 	strbvs	r2, [ip, #-1024]!	; 0x400
     8a4:	7f01006e 	svcvc	0x0001006e
     8a8:	00004c01 	andeq	r4, r0, r1, lsl #24
     8ac:	00010a00 	andeq	r0, r1, r0, lsl #20
     8b0:	00132600 	andseq	r2, r3, r0, lsl #12
     8b4:	80010000 	andhi	r0, r1, r0
     8b8:	00005e01 	andeq	r5, r0, r1, lsl #28
     8bc:	02b42500 	adcseq	r2, r4, #0, 10
     8c0:	0c8e0800 	stceq	8, cr0, [lr], {0}
     8c4:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     8c8:	00000631 	andeq	r0, r0, r1, lsr r6
     8cc:	5b018801 	blpl	628d8 <__Stack_Size+0x624d8>
     8d0:	c0000001 	andgt	r0, r0, r1
     8d4:	0c080002 	stceq	0, cr0, [r8], {2}
     8d8:	01000000 	mrseq	r0, (UNDEF: 0)
     8dc:	0008179c 	muleq	r8, ip, r7
     8e0:	656c2400 	strbvs	r2, [ip, #-1024]!	; 0x400
     8e4:	8801006e 	stmdahi	r1, {r1, r2, r3, r5, r6}
     8e8:	00004c01 	andeq	r4, r0, r1, lsl #24
     8ec:	00014400 	andeq	r4, r1, r0, lsl #8
     8f0:	02c62500 	sbceq	r2, r6, #0, 10
     8f4:	0c8e0800 	stceq	8, cr0, [lr], {0}
     8f8:	27000000 	strcs	r0, [r0, -r0]
     8fc:	0000052c 	andeq	r0, r0, ip, lsr #10
     900:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
     904:	00000028 	andeq	r0, r0, r8, lsr #32
     908:	08509c01 	ldmdaeq	r0, {r0, sl, fp, ip, pc}^
     90c:	3d280000 	stccc	0, cr0, [r8, #-0]
     910:	65000005 	strvs	r0, [r0, #-5]
     914:	29000001 	stmdbcs	r0, {r0}
     918:	080002dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9}
     91c:	0000000e 	andeq	r0, r0, lr
     920:	00053d28 	andeq	r3, r5, r8, lsr #26
     924:	00019f00 	andeq	r9, r1, r0, lsl #30
     928:	02e01f00 	rsceq	r1, r0, #0, 30
     92c:	0c830800 	stceq	8, cr0, [r3], {0}
     930:	00000000 	andeq	r0, r0, r0
     934:	0002792a 	andeq	r7, r2, sl, lsr #18
     938:	f4280100 	vld4.8	{d0,d2,d4,d6}, [r8], r0
     93c:	7c080002 	stcvc	0, cr0, [r8], {2}
     940:	01000000 	mrseq	r0, (UNDEF: 0)
     944:	0008e19c 	muleq	r8, ip, r1
     948:	06b32b00 	ldrteq	r2, [r3], r0, lsl #22
     94c:	3d010000 	stccc	0, cr0, [r1, #-0]
     950:	000008e1 	andeq	r0, r0, r1, ror #17
     954:	2c6c9102 	stfcsp	f1, [ip], #-8
     958:	0000054a 	andeq	r0, r0, sl, asr #10
     95c:	08000352 	stmdaeq	r0, {r1, r4, r6, r8, r9}
     960:	00000004 	andeq	r0, r0, r4
     964:	08904f01 	ldmeq	r0, {r0, r8, r9, sl, fp, lr}
     968:	561f0000 	ldrpl	r0, [pc], -r0
     96c:	a8080003 	stmdage	r8, {r0, r1}
     970:	0000000c 	andeq	r0, r0, ip
     974:	00030020 	andeq	r0, r3, r0, lsr #32
     978:	000caf08 	andeq	sl, ip, r8, lsl #30
     97c:	0008a300 	andeq	sl, r8, r0, lsl #6
     980:	50012100 	andpl	r2, r1, r0, lsl #2
     984:	20003c01 	andcs	r3, r0, r1, lsl #24
     988:	08000312 	stmdaeq	r0, {r1, r4, r8, r9}
     98c:	00000cc4 	andeq	r0, r0, r4, asr #25
     990:	000008c4 	andeq	r0, r0, r4, asr #17
     994:	01520121 	cmpeq	r2, r1, lsr #2
     998:	51012130 	tstpl	r1, r0, lsr r1
     99c:	01213c01 	teqeq	r1, r1, lsl #24
     9a0:	000c0550 	andeq	r0, ip, r0, asr r5
     9a4:	00400108 	subeq	r0, r0, r8, lsl #2
     9a8:	00032c20 	andeq	r2, r3, r0, lsr #24
     9ac:	000caf08 	andeq	sl, ip, r8, lsl #30
     9b0:	0008d700 	andeq	sp, r8, r0, lsl #14
     9b4:	50012100 	andpl	r2, r1, r0, lsl #2
     9b8:	1f003c01 	svcne	0x00003c01
     9bc:	08000338 	stmdaeq	r0, {r3, r4, r5, r8, r9}
     9c0:	00000cdf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     9c4:	08e60500 	stmiaeq	r6!, {r8, sl}^
     9c8:	04020000 	streq	r0, [r2], #-0
     9cc:	0003a607 	andeq	sl, r3, r7, lsl #12
     9d0:	054a2700 	strbeq	r2, [sl, #-1792]	; 0x700
     9d4:	00000000 	andeq	r0, r0, r0
     9d8:	00040000 	andeq	r0, r4, r0
     9dc:	9c010000 	stcls	0, cr0, [r1], {-0}
     9e0:	0000090a 	andeq	r0, r0, sl, lsl #18
     9e4:	00000025 	andeq	r0, r0, r5, lsr #32
     9e8:	000ca800 	andeq	sl, ip, r0, lsl #16
     9ec:	c02a0000 	eorgt	r0, sl, r0
     9f0:	01000000 	mrseq	r0, (UNDEF: 0)
     9f4:	000370ac 	andeq	r7, r3, ip, lsr #1
     9f8:	00001c08 	andeq	r1, r0, r8, lsl #24
     9fc:	2f9c0100 	svccs	0x009c0100
     a00:	2d000009 	stccs	0, cr0, [r0, #-36]	; 0xffffffdc
     a04:	000002e4 	andeq	r0, r0, r4, ror #5
     a08:	004cad01 	subeq	sl, ip, r1, lsl #26
     a0c:	01b50000 			; <UNDEFINED> instruction: 0x01b50000
     a10:	2a000000 	bcs	a18 <__Stack_Size+0x618>
     a14:	000007ef 	andeq	r0, r0, pc, ror #15
     a18:	038cb601 	orreq	fp, ip, #1048576	; 0x100000
     a1c:	00180800 	andseq	r0, r8, r0, lsl #16
     a20:	9c010000 	stcls	0, cr0, [r1], {-0}
     a24:	00000957 	andeq	r0, r0, r7, asr r9
     a28:	0002e42b 	andeq	lr, r2, fp, lsr #8
     a2c:	4cb70100 	ldfmis	f0, [r7]
     a30:	06000000 	streq	r0, [r0], -r0
     a34:	fb090071 	blx	240c02 <__Stack_Size+0x240802>
     a38:	2a009f1a 	bcs	286a8 <__Stack_Size+0x282a8>
     a3c:	000000d4 	ldrdeq	r0, [r0], -r4
     a40:	03a4c401 			; <UNDEFINED> instruction: 0x03a4c401
     a44:	00840800 	addeq	r0, r4, r0, lsl #16
     a48:	9c010000 	stcls	0, cr0, [r1], {-0}
     a4c:	0000099d 	muleq	r0, sp, r9
     a50:	0002c22e 	andeq	ip, r2, lr, lsr #4
     a54:	c5c40100 	strbgt	r0, [r4, #256]	; 0x100
     a58:	cc000004 	stcgt	0, cr0, [r0], {4}
     a5c:	2d000001 	stccs	0, cr0, [r0, #-4]
     a60:	000002e4 	andeq	r0, r0, r4, ror #5
     a64:	004cc501 	subeq	ip, ip, r1, lsl #10
     a68:	021f0000 	andseq	r0, pc, #0
     a6c:	c21f0000 	andsgt	r0, pc, #0
     a70:	2f080003 	svccs	0x00080003
     a74:	1f000009 	svcne	0x00000009
     a78:	080003c8 	stmdaeq	r0, {r3, r6, r7, r8, r9}
     a7c:	0000092f 	andeq	r0, r0, pc, lsr #18
     a80:	05912f00 	ldreq	r2, [r1, #3840]	; 0xf00
     a84:	f4010000 	vst4.8	{d0-d3}, [r1], r0
     a88:	000001a2 	andeq	r0, r0, r2, lsr #3
     a8c:	08000428 	stmdaeq	r0, {r3, r5, sl}
     a90:	00000028 	andeq	r0, r0, r8, lsr #32
     a94:	09c39c01 	stmibeq	r3, {r0, sl, fp, ip, pc}^
     a98:	82300000 	eorshi	r0, r0, #0
     a9c:	01000004 	tsteq	r0, r4
     aa0:	00004cf5 	strdeq	r4, [r0], -r5
     aa4:	31000100 	mrscc	r0, (UNDEF: 16)
     aa8:	00000886 	andeq	r0, r0, r6, lsl #17
     aac:	a2010301 	andge	r0, r1, #67108864	; 0x4000000
     ab0:	50000001 	andpl	r0, r0, r1
     ab4:	1c080004 	stcne	0, cr0, [r8], {4}
     ab8:	01000000 	mrseq	r0, (UNDEF: 0)
     abc:	08052a9c 	stmdaeq	r5, {r2, r3, r4, r7, r9, fp, sp}
     ac0:	56010000 	strpl	r0, [r1], -r0
     ac4:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
     ac8:	00000004 	andeq	r0, r0, r4
     acc:	09f89c01 	ldmibeq	r8!, {r0, sl, fp, ip, pc}^
     ad0:	70250000 	eorvc	r0, r5, r0
     ad4:	c3080004 	movwgt	r0, #32772	; 0x8004
     ad8:	00000009 	andeq	r0, r0, r9
     adc:	00007c1c 	andeq	r7, r0, ip, lsl ip
     ae0:	01bd0100 			; <UNDEFINED> instruction: 0x01bd0100
     ae4:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
     ae8:	00000024 	andeq	r0, r0, r4, lsr #32
     aec:	0a2e9c01 	beq	ba7af8 <__Stack_Size+0xba76f8>
     af0:	1f320000 	svcne	0x00320000
     af4:	01000003 	tsteq	r0, r3
     af8:	00ff01be 	ldrhteq	r0, [pc], #30
     afc:	91020000 	mrsls	r0, (UNDEF: 2)
     b00:	048e3374 	streq	r3, [lr], #884	; 0x374
     b04:	0ceb0800 	stcleq	8, cr0, [fp]
     b08:	01210000 	teqeq	r1, r0
     b0c:	047d0250 	ldrbteq	r0, [sp], #-592	; 0x250
     b10:	351c0000 	ldrcc	r0, [ip, #-0]
     b14:	01000008 	tsteq	r0, r8
     b18:	04940110 	ldreq	r0, [r4], #272	; 0x110
     b1c:	00400800 	subeq	r0, r0, r0, lsl #16
     b20:	9c010000 	stcls	0, cr0, [r1], {-0}
     b24:	00000a60 	andeq	r0, r0, r0, ror #20
     b28:	00049a1f 	andeq	r9, r4, pc, lsl sl
     b2c:	000d0308 	andeq	r0, sp, r8, lsl #6
     b30:	04a61f00 	strteq	r1, [r6], #3840	; 0xf00
     b34:	099d0800 	ldmibeq	sp, {fp}
     b38:	ba1f0000 	blt	7c0b40 <__Stack_Size+0x7c0740>
     b3c:	f8080004 			; <UNDEFINED> instruction: 0xf8080004
     b40:	00000009 	andeq	r0, r0, r9
     b44:	0003f31c 	andeq	pc, r3, ip, lsl r3	; <UNPREDICTABLE>
     b48:	01c80100 	biceq	r0, r8, r0, lsl #2
     b4c:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
     b50:	00000022 	andeq	r0, r0, r2, lsr #32
     b54:	0a969c01 	beq	fe5a7b60 <BootRAM+0xd518301>
     b58:	1f320000 	svcne	0x00320000
     b5c:	01000003 	tsteq	r0, r3
     b60:	00ff01c9 	rscseq	r0, pc, r9, asr #3
     b64:	91020000 	mrsls	r0, (UNDEF: 2)
     b68:	04f03374 	ldrbteq	r3, [r0], #884	; 0x374
     b6c:	0ceb0800 	stcleq	8, cr0, [fp]
     b70:	01210000 	teqeq	r1, r0
     b74:	047d0250 	ldrbteq	r0, [sp], #-592	; 0x250
     b78:	98340000 	ldmdals	r4!, {}	; <UNPREDICTABLE>
     b7c:	01000006 	tsteq	r0, r6
     b80:	04f801d1 	ldrbteq	r0, [r8], #465	; 0x1d1
     b84:	00b40800 	adcseq	r0, r4, r0, lsl #16
     b88:	9c010000 	stcls	0, cr0, [r1], {-0}
     b8c:	00000ae5 	andeq	r0, r0, r5, ror #21
     b90:	00054020 	andeq	r4, r5, r0, lsr #32
     b94:	00095708 	andeq	r5, r9, r8, lsl #14
     b98:	000abf00 	andeq	fp, sl, r0, lsl #30
     b9c:	50012100 	andpl	r2, r1, r0, lsl #2
     ba0:	1f003001 	svcne	0x00003001
     ba4:	0800054e 	stmdaeq	r0, {r1, r2, r3, r6, r8, sl}
     ba8:	0000090a 	andeq	r0, r0, sl, lsl #18
     bac:	00058220 	andeq	r8, r5, r0, lsr #4
     bb0:	00095708 	andeq	r5, r9, r8, lsl #14
     bb4:	000adb00 	andeq	sp, sl, r0, lsl #22
     bb8:	50012100 	andpl	r2, r1, r0, lsl #2
     bbc:	25003701 	strcs	r3, [r0, #-1793]	; 0x701
     bc0:	08000594 	stmdaeq	r0, {r2, r4, r7, r8, sl}
     bc4:	00000d0a 	andeq	r0, r0, sl, lsl #26
     bc8:	02563500 	subseq	r3, r6, #0, 10
     bcc:	64010000 	strvs	r0, [r1], #-0
     bd0:	0000007f 	andeq	r0, r0, pc, ror r0
     bd4:	01c40305 	biceq	r0, r4, r5, lsl #6
     bd8:	17352000 	ldrne	r2, [r5, -r0]!
     bdc:	01000006 	tsteq	r0, r6
     be0:	0003f96c 	andeq	pc, r3, ip, ror #18
     be4:	00030500 	andeq	r0, r3, r0, lsl #10
     be8:	35200000 	strcc	r0, [r0, #-0]!
     bec:	000013d7 	ldrdeq	r1, [r0], -r7
     bf0:	047d7c01 	ldrbteq	r7, [sp], #-3073	; 0xc01
     bf4:	03050000 	movweq	r0, #20480	; 0x5000
     bf8:	2000006c 	andcs	r0, r0, ip, rrx
     bfc:	00026c35 	andeq	r6, r2, r5, lsr ip
     c00:	2f670100 	svccs	0x00670100
     c04:	05000002 	streq	r0, [r0, #-2]
     c08:	00009003 	andeq	r9, r0, r3
     c0c:	02a23620 	adceq	r3, r2, #32, 12	; 0x2000000
     c10:	22070000 	andcs	r0, r7, #0
     c14:	00000b34 	andeq	r0, r0, r4, lsr fp
     c18:	0316040a 	tsteq	r6, #167772160	; 0xa000000
     c1c:	5f360000 	svcpl	0x00360000
     c20:	07000005 	streq	r0, [r0, -r5]
     c24:	000b4525 	andeq	r4, fp, r5, lsr #10
     c28:	f9040a00 			; <UNDEFINED> instruction: 0xf9040a00
     c2c:	36000003 	strcc	r0, [r0], -r3
     c30:	000004f2 	strdeq	r0, [r0], -r2
     c34:	004c2d07 	subeq	r2, ip, r7, lsl #26
     c38:	a7360000 	ldrge	r0, [r6, -r0]!
     c3c:	08000009 	stmdaeq	r0, {r0, r3}
     c40:	00016123 	andeq	r6, r1, r3, lsr #2
     c44:	08b73600 	ldmeq	r7!, {r9, sl, ip, sp}
     c48:	24080000 	strcs	r0, [r8], #-0
     c4c:	00000161 	andeq	r0, r0, r1, ror #2
     c50:	00016137 	andeq	r6, r1, r7, lsr r1
     c54:	000b7c00 	andeq	r7, fp, r0, lsl #24
     c58:	00bf3800 	adcseq	r3, pc, r0, lsl #16
     c5c:	00060000 	andeq	r0, r6, r0
     c60:	00014336 	andeq	r4, r1, r6, lsr r3
     c64:	6c250800 	stcvs	8, cr0, [r5], #-0
     c68:	3600000b 	strcc	r0, [r0], -fp
     c6c:	000006d5 	ldrdeq	r0, [r0], -r5
     c70:	01612608 	cmneq	r1, r8, lsl #12
     c74:	5e350000 	cdppl	0, 3, cr0, cr5, cr0, {0}
     c78:	06000004 	streq	r0, [r0], -r4
     c7c:	000ba32c 	andeq	sl, fp, ip, lsr #6
     c80:	c0030500 	andgt	r0, r3, r0, lsl #10
     c84:	39200001 	stmdbcc	r0!, {r0}
     c88:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     c8c:	5e370074 	mrcpl	0, 1, r0, cr7, cr4, {3}
     c90:	b5000000 	strlt	r0, [r0, #-0]
     c94:	3a00000b 	bcc	cc8 <__Stack_Size+0x8c8>
     c98:	08b43600 	ldmeq	r4!, {r9, sl, ip, sp}
     c9c:	25010000 	strcs	r0, [r1, #-0]
     ca0:	00000baa 	andeq	r0, r0, sl, lsr #23
     ca4:	0006d236 	andeq	sp, r6, r6, lsr r2
     ca8:	aa260100 	bge	9810b0 <__Stack_Size+0x980cb0>
     cac:	3500000b 	strcc	r0, [r0, #-11]
     cb0:	0000006f 	andeq	r0, r0, pc, rrx
     cb4:	006f6101 	rsbeq	r6, pc, r1, lsl #2
     cb8:	03050000 	movweq	r0, #20480	; 0x5000
     cbc:	20000208 	andcs	r0, r0, r8, lsl #4
     cc0:	00029635 	andeq	r9, r2, r5, lsr r6
     cc4:	8f650100 	svchi	0x00650100
     cc8:	05000000 	streq	r0, [r0, #-0]
     ccc:	00020403 	andeq	r0, r2, r3, lsl #8
     cd0:	010a3720 	tsteq	sl, r0, lsr #14
     cd4:	0bfd0000 	bleq	fff40cdc <BootRAM+0xeeb147d>
     cd8:	bf380000 	svclt	0x00380000
     cdc:	06000000 	streq	r0, [r0], -r0
     ce0:	04b63500 	ldrteq	r3, [r6], #1280	; 0x500
     ce4:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
     ce8:	00000bed 	andeq	r0, r0, sp, ror #23
     cec:	00340305 	eorseq	r0, r4, r5, lsl #6
     cf0:	0f352000 	svceq	0x00352000
     cf4:	01000008 	tsteq	r0, r8
     cf8:	000bed92 	muleq	fp, r2, sp
     cfc:	50030500 	andpl	r0, r3, r0, lsl #10
     d00:	35200000 	strcc	r0, [r0, #-0]!
     d04:	0000074d 	andeq	r0, r0, sp, asr #14
     d08:	05019f01 	streq	r9, [r1, #-3841]	; 0xf01
     d0c:	03050000 	movweq	r0, #20480	; 0x5000
     d10:	200001c6 	andcs	r0, r0, r6, asr #3
     d14:	0005343b 	andeq	r3, r5, fp, lsr r4
     d18:	3c6e0900 	stclcc	9, cr0, [lr], #-0
     d1c:	00000793 	muleq	r0, r3, r7
     d20:	4902460a 	stmdbmi	r2, {r1, r3, r9, sl, lr}
     d24:	0f00000c 	svceq	0x0000000c
     d28:	0000005e 	andeq	r0, r0, lr, asr r0
     d2c:	07bd3c00 	ldreq	r3, [sp, r0, lsl #24]!
     d30:	570a0000 	strpl	r0, [sl, -r0]
     d34:	000c6002 	andeq	r6, ip, r2
     d38:	005e0f00 	subseq	r0, lr, r0, lsl #30
     d3c:	4c0f0000 	stcmi	0, cr0, [pc], {-0}
     d40:	00000000 	andeq	r0, r0, r0
     d44:	0009623c 	andeq	r6, r9, ip, lsr r2
     d48:	02400a00 	subeq	r0, r0, #0, 20
     d4c:	00000c72 	andeq	r0, r0, r2, ror ip
     d50:	00005e0f 	andeq	r5, r0, pc, lsl #28
     d54:	213d0000 	teqcs	sp, r0
     d58:	04000000 	streq	r0, [r0], #-0
     d5c:	000c83e9 	andeq	r8, ip, r9, ror #7
     d60:	005e0f00 	subseq	r0, lr, r0, lsl #30
     d64:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
     d68:	0000034b 	andeq	r0, r0, fp, asr #6
     d6c:	00b46d09 	adcseq	r6, r4, r9, lsl #26
     d70:	603f0000 	eorsvs	r0, pc, r0
     d74:	04000008 	streq	r0, [r0], #-8
     d78:	00015be5 	andeq	r5, r1, r5, ror #23
     d7c:	000ca800 	andeq	sl, ip, r0, lsl #16
     d80:	004c0f00 	subeq	r0, ip, r0, lsl #30
     d84:	6c0f0000 	stcvs	0, cr0, [pc], {-0}
     d88:	00000001 	andeq	r0, r0, r1
     d8c:	0005693b 	andeq	r6, r5, fp, lsr r9
     d90:	3f190700 	svccc	0x00190700
     d94:	000002af 	andeq	r0, r0, pc, lsr #5
     d98:	08e6f303 	stmiaeq	r6!, {r0, r1, r8, r9, ip, sp, lr, pc}^
     d9c:	0cc40000 	stcleq	0, cr0, [r4], {0}
     da0:	a30f0000 	movwge	r0, #61440	; 0xf000
     da4:	0000000b 	andeq	r0, r0, fp
     da8:	00059c3d 	andeq	r9, r5, sp, lsr ip
     dac:	dff20300 	svcle	0x00f20300
     db0:	0f00000c 	svceq	0x0000000c
     db4:	0000003a 	andeq	r0, r0, sl, lsr r0
     db8:	00005e0f 	andeq	r5, r0, pc, lsl #28
     dbc:	005e0f00 	subseq	r0, lr, r0, lsl #30
     dc0:	40000000 	andmi	r0, r0, r0
     dc4:	000002ea 	andeq	r0, r0, sl, ror #5
     dc8:	a3010a03 	movwge	r0, #6659	; 0x1a03
     dcc:	3c00000b 	stccc	0, cr0, [r0], {11}
     dd0:	0000073a 	andeq	r0, r0, sl, lsr r7
     dd4:	fd010603 	stc2	6, cr0, [r1, #-12]
     dd8:	0f00000c 	svceq	0x0000000c
     ddc:	00000cfd 	strdeq	r0, [r0], -sp
     de0:	ff040a00 			; <UNDEFINED> instruction: 0xff040a00
     de4:	3b000000 	blcc	dec <__Stack_Size+0x9ec>
     de8:	000000aa 	andeq	r0, r0, sl, lsr #1
     dec:	b33b6a09 	teqlt	fp, #36864	; 0x9000
     df0:	0b000003 	bleq	e04 <__Stack_Size+0xa04>
     df4:	021e001a 	andseq	r0, lr, #26
     df8:	00040000 	andeq	r0, r4, r0
     dfc:	000003f1 	strdeq	r0, [r0], -r1
     e00:	017e0104 	cmneq	lr, r4, lsl #2
     e04:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     e08:	3200000a 	andcc	r0, r0, #10
     e0c:	a4000000 	strge	r0, [r0], #-0
     e10:	02000004 	andeq	r0, r0, #4
     e14:	021c0504 	andseq	r0, ip, #4, 10	; 0x1000000
     e18:	02020000 	andeq	r0, r2, #0
     e1c:	0006c805 	andeq	ip, r6, r5, lsl #16
     e20:	06010200 	streq	r0, [r1], -r0, lsl #4
     e24:	00000674 	andeq	r0, r0, r4, ror r6
     e28:	a1070402 	tstge	r7, r2, lsl #8
     e2c:	03000003 	movweq	r0, #3
     e30:	00363175 	eorseq	r3, r6, r5, ror r1
     e34:	00442801 	subeq	r2, r4, r1, lsl #16
     e38:	02020000 	andeq	r0, r2, #0
     e3c:	0003fd07 	andeq	pc, r3, r7, lsl #26
     e40:	38750300 	ldmdacc	r5!, {r8, r9}^
     e44:	55290100 	strpl	r0, [r9, #-256]!	; 0x100
     e48:	02000000 	andeq	r0, r0, #0
     e4c:	06720801 	ldrbteq	r0, [r2], -r1, lsl #16
     e50:	04020000 	streq	r0, [r2], #-0
     e54:	00054507 	andeq	r4, r5, r7, lsl #10
     e58:	00b20400 	adcseq	r0, r2, r0, lsl #8
     e5c:	02080000 	andeq	r0, r8, #0
     e60:	00008824 	andeq	r8, r0, r4, lsr #16
     e64:	01630500 	cmneq	r3, r0, lsl #10
     e68:	26020000 	strcs	r0, [r2], -r0
     e6c:	00000088 	andeq	r0, r0, r8, lsl #1
     e70:	05c30500 	strbeq	r0, [r3, #1280]	; 0x500
     e74:	27020000 	strcs	r0, [r2, -r0]
     e78:	00000039 	andeq	r0, r0, r9, lsr r0
     e7c:	04060004 	streq	r0, [r6], #-4
     e80:	0000004b 	andeq	r0, r0, fp, asr #32
     e84:	0002fc07 	andeq	pc, r2, r7, lsl #24
     e88:	63290200 	teqvs	r9, #0, 4
     e8c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     e90:	0000045e 	andeq	r0, r0, lr, asr r4
     e94:	00aa2c03 	adceq	r2, sl, r3, lsl #24
     e98:	03050000 	movweq	r0, #20480	; 0x5000
     e9c:	200001c0 	andcs	r0, r0, r0, asr #3
     ea0:	69050409 	stmdbvs	r5, {r0, r3, sl}
     ea4:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     ea8:	000009a7 	andeq	r0, r0, r7, lsr #19
     eac:	008e3c04 	addeq	r3, lr, r4, lsl #24
     eb0:	03050000 	movweq	r0, #20480	; 0x5000
     eb4:	20000140 	andcs	r0, r0, r0, asr #2
     eb8:	0008b708 	andeq	fp, r8, r8, lsl #14
     ebc:	8edc0400 	cdphi	4, 13, cr0, cr12, cr0, {0}
     ec0:	05000000 	streq	r0, [r0, #-0]
     ec4:	0001b003 	andeq	fp, r1, r3
     ec8:	008e0a20 	addeq	r0, lr, r0, lsr #20
     ecc:	00e30000 	rsceq	r0, r3, r0
     ed0:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
     ed4:	06000000 	streq	r0, [r0], -r0
     ed8:	01430c00 	cmpeq	r3, r0, lsl #24
     edc:	26040000 	strcs	r0, [r4], -r0
     ee0:	0000d301 	andeq	sp, r0, r1, lsl #6
     ee4:	94030500 	strls	r0, [r3], #-1280	; 0x500
     ee8:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
     eec:	000006d5 	ldrdeq	r0, [r0], -r5
     ef0:	008e4e04 	addeq	r4, lr, r4, lsl #28
     ef4:	03050000 	movweq	r0, #20480	; 0x5000
     ef8:	200000e0 	andcs	r0, r0, r0, ror #1
     efc:	00004b0a 	andeq	r4, r0, sl, lsl #22
     f00:	00011600 	andeq	r1, r1, r0, lsl #12
     f04:	005c0b00 	subseq	r0, ip, r0, lsl #22
     f08:	00110000 	andseq	r0, r1, r0
     f0c:	0009a408 	andeq	sl, r9, r8, lsl #8
     f10:	06250400 	strteq	r0, [r5], -r0, lsl #8
     f14:	05000001 	streq	r0, [r0, #-1]
     f18:	0000cc03 	andeq	ip, r0, r3, lsl #24
     f1c:	004b0a20 	subeq	r0, fp, r0, lsr #20
     f20:	01370000 	teqeq	r7, r0
     f24:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
     f28:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     f2c:	06d20800 	ldrbeq	r0, [r2], r0, lsl #16
     f30:	41040000 	mrsmi	r0, (UNDEF: 4)
     f34:	00000127 	andeq	r0, r0, r7, lsr #2
     f38:	011b0305 	tsteq	fp, r5, lsl #6
     f3c:	4b0a2000 	blmi	288f44 <__Stack_Size+0x288b44>
     f40:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     f44:	0b000001 	bleq	f50 <__Stack_Size+0xb50>
     f48:	0000005c 	andeq	r0, r0, ip, asr r0
     f4c:	b408001a 	strlt	r0, [r8], #-26
     f50:	04000008 	streq	r0, [r0], #-8
     f54:	00014855 	andeq	r4, r1, r5, asr r8
     f58:	ec030500 	cfstr32	mvfx0, [r3], {-0}
     f5c:	0a200000 	beq	800f64 <__Stack_Size+0x800b64>
     f60:	0000004b 	andeq	r0, r0, fp, asr #32
     f64:	00000179 	andeq	r0, r0, r9, ror r1
     f68:	00005c0b 	andeq	r5, r0, fp, lsl #24
     f6c:	08000300 	stmdaeq	r0, {r8, r9}
     f70:	000009f6 	strdeq	r0, [r0], -r6
     f74:	0169e304 	cmneq	r9, r4, lsl #6
     f78:	03050000 	movweq	r0, #20480	; 0x5000
     f7c:	200000e8 	andcs	r0, r0, r8, ror #1
     f80:	00004b0a 	andeq	r4, r0, sl, lsl #22
     f84:	00019a00 	andeq	r9, r1, r0, lsl #20
     f88:	005c0b00 	subseq	r0, ip, r0, lsl #22
     f8c:	001b0000 	andseq	r0, fp, r0
     f90:	00097b08 	andeq	r7, r9, r8, lsl #22
     f94:	8aea0400 	bhi	ffa81f9c <BootRAM+0xe9f273d>
     f98:	05000001 	streq	r0, [r0, #-1]
     f9c:	00012403 	andeq	r2, r1, r3, lsl #8
     fa0:	004b0a20 	subeq	r0, fp, r0, lsr #20
     fa4:	01bb0000 			; <UNDEFINED> instruction: 0x01bb0000
     fa8:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
     fac:	15000000 	strne	r0, [r0, #-0]
     fb0:	09e20800 	stmibeq	r2!, {fp}^
     fb4:	f0040000 			; <UNDEFINED> instruction: 0xf0040000
     fb8:	000001ab 	andeq	r0, r0, fp, lsr #3
     fbc:	01480305 	cmpeq	r8, r5, lsl #6
     fc0:	4b0a2000 	blmi	288fc8 <__Stack_Size+0x288bc8>
     fc4:	dc000000 	stcle	0, cr0, [r0], {-0}
     fc8:	0b000001 	bleq	fd4 <__Stack_Size+0xbd4>
     fcc:	0000005c 	andeq	r0, r0, ip, asr r0
     fd0:	be080013 	mcrlt	0, 0, r0, cr8, cr3, {0}
     fd4:	04000009 	streq	r0, [r0], #-9
     fd8:	0001ccf6 	strdeq	ip, [r1], -r6
     fdc:	07030500 	streq	r0, [r3, -r0, lsl #10]
     fe0:	0a200001 	beq	800fec <__Stack_Size+0x800bec>
     fe4:	0000004b 	andeq	r0, r0, fp, asr #32
     fe8:	000001fd 	strdeq	r0, [r0], -sp
     fec:	00005c0b 	andeq	r5, r0, fp, lsl #24
     ff0:	0c004f00 	stceq	15, cr4, [r0], {-0}
     ff4:	000009d1 	ldrdeq	r0, [r0], -r1
     ff8:	ed011004 	stc	0, cr1, [r1, #-16]
     ffc:	05000001 	streq	r0, [r0, #-1]
    1000:	00015e03 	andeq	r5, r1, r3, lsl #28
    1004:	098e0c20 	stmibeq	lr, {r5, sl, fp}
    1008:	24040000 	strcs	r0, [r4], #-0
    100c:	00004b01 	andeq	r4, r0, r1, lsl #22
    1010:	00030500 	andeq	r0, r3, r0, lsl #10
    1014:	00000000 	andeq	r0, r0, r0
    1018:	00000251 	andeq	r0, r0, r1, asr r2
    101c:	048c0004 	streq	r0, [ip], #4
    1020:	01040000 	mrseq	r0, (UNDEF: 4)
    1024:	0000017e 	andeq	r0, r0, lr, ror r1
    1028:	000abd01 	andeq	fp, sl, r1, lsl #26
    102c:	00003200 	andeq	r3, r0, r0, lsl #4
    1030:	00012800 	andeq	r2, r1, r0, lsl #16
    1034:	00000000 	andeq	r0, r0, r0
    1038:	00051600 	andeq	r1, r5, r0, lsl #12
    103c:	05040200 	streq	r0, [r4, #-512]	; 0x200
    1040:	0000021c 	andeq	r0, r0, ip, lsl r2
    1044:	c8050202 	stmdagt	r5, {r1, r9}
    1048:	02000006 	andeq	r0, r0, #6
    104c:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
    1050:	75030000 	strvc	r0, [r3, #-0]
    1054:	05003233 	streq	r3, [r0, #-563]	; 0x233
    1058:	00004527 	andeq	r4, r0, r7, lsr #10
    105c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1060:	000003a1 	andeq	r0, r0, r1, lsr #7
    1064:	fd070202 	stc2	2, cr0, [r7, #-8]
    1068:	02000003 	andeq	r0, r0, #3
    106c:	06720801 	ldrbteq	r0, [r2], -r1, lsl #16
    1070:	01040000 	mrseq	r0, (UNDEF: 4)
    1074:	006f3705 	rsbeq	r3, pc, r5, lsl #14
    1078:	ff050000 			; <UNDEFINED> instruction: 0xff050000
    107c:	00000005 	andeq	r0, r0, r5
    1080:	00076d05 	andeq	r6, r7, r5, lsl #26
    1084:	06000100 	streq	r0, [r0], -r0, lsl #2
    1088:	00000459 	andeq	r0, r0, r9, asr r4
    108c:	005a3705 	subseq	r3, sl, r5, lsl #14
    1090:	04020000 	streq	r0, [r2], #-0
    1094:	00054507 	andeq	r4, r5, r7, lsl #10
    1098:	0aab0700 	beq	feac2ca0 <BootRAM+0xda33441>
    109c:	26010000 	strcs	r0, [r1], -r0
    10a0:	000001ac 	andeq	r0, r0, ip, lsr #3
    10a4:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
    10a8:	00000078 	andeq	r0, r0, r8, ror r0
    10ac:	01ac9c01 			; <UNDEFINED> instruction: 0x01ac9c01
    10b0:	b0080000 	andlt	r0, r8, r0
    10b4:	0100000a 	tsteq	r0, sl
    10b8:	00006f28 	andeq	r6, r0, r8, lsr #30
    10bc:	00024600 	andeq	r4, r2, r0, lsl #12
    10c0:	0a630800 	beq	18c30c8 <__Stack_Size+0x18c2cc8>
    10c4:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    10c8:	0000006f 	andeq	r0, r0, pc, rrx
    10cc:	0000025a 	andeq	r0, r0, sl, asr r2
    10d0:	0005ce09 	andeq	ip, r5, r9, lsl #28
    10d4:	00001c08 	andeq	r1, r0, r8, lsl #24
    10d8:	00010a00 	andeq	r0, r1, r0, lsl #20
    10dc:	0a870a00 	beq	fe1c38e4 <BootRAM+0xd134085>
    10e0:	51010000 	mrspl	r0, (UNDEF: 1)
    10e4:	000001ac 	andeq	r0, r0, ip, lsr #3
    10e8:	000000d6 	ldrdeq	r0, [r0], -r6
    10ec:	d40c000b 	strle	r0, [ip], #-11
    10f0:	c4080005 	strgt	r0, [r8], #-5
    10f4:	ed000001 	stc	0, cr0, [r0, #-4]
    10f8:	0d000000 	stceq	0, cr0, [r0, #-0]
    10fc:	0c055001 	stceq	0, cr5, [r5], {1}
    1100:	08005000 	stmdaeq	r0, {ip, lr}
    1104:	05da0e00 	ldrbeq	r0, [sl, #3584]	; 0xe00
    1108:	01d90800 	bicseq	r0, r9, r0, lsl #16
    110c:	e40f0000 	str	r0, [pc], #-0	; 1114 <__Stack_Size+0xd14>
    1110:	c4080005 	strgt	r0, [r8], #-5
    1114:	0d000001 	stceq	0, cr0, [r0, #-4]
    1118:	0c055001 	stceq	0, cr5, [r5], {1}
    111c:	08002000 	stmdaeq	r0, {sp}
    1120:	ea090000 	b	241128 <__Stack_Size+0x240d28>
    1124:	0e080005 	cdpeq	0, 0, cr0, cr8, cr5, {0}
    1128:	35000000 	strcc	r0, [r0, #-0]
    112c:	10000001 	andne	r0, r0, r1
    1130:	00000ad4 	ldrdeq	r0, [r0], -r4
    1134:	01ac5d01 			; <UNDEFINED> instruction: 0x01ac5d01
    1138:	ee0e0000 	cdp	0, 0, cr0, cr14, cr0, {0}
    113c:	ea080005 	b	201158 <__Stack_Size+0x200d58>
    1140:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1144:	080005f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sl}
    1148:	000001fb 	strdeq	r0, [r0], -fp
    114c:	05b20e00 	ldreq	r0, [r2, #3584]!	; 0xe00
    1150:	02080800 	andeq	r0, r8, #0, 16
    1154:	b60e0000 	strlt	r0, [lr], -r0
    1158:	0f080005 	svceq	0x00080005
    115c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1160:	080005ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, sl}
    1164:	00000216 	andeq	r0, r0, r6, lsl r2
    1168:	0005be0e 	andeq	fp, r5, lr, lsl #28
    116c:	00021d08 	andeq	r1, r2, r8, lsl #26
    1170:	05c20e00 	strbeq	r0, [r2, #3584]	; 0xe00
    1174:	02240800 	eoreq	r0, r4, #0, 16
    1178:	c60e0000 	strgt	r0, [lr], -r0
    117c:	2b080005 	blcs	201198 <__Stack_Size+0x200d98>
    1180:	0c000002 	stceq	0, cr0, [r0], {2}
    1184:	080005fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl}
    1188:	000001c4 	andeq	r0, r0, r4, asr #3
    118c:	00000182 	andeq	r0, r0, r2, lsl #3
    1190:	0550010d 	ldrbeq	r0, [r0, #-269]	; 0x10d
    1194:	0020000c 	eoreq	r0, r0, ip
    1198:	0a0c0008 	beq	3011c0 <__Stack_Size+0x300dc0>
    119c:	c4080006 	strgt	r0, [r8], #-6
    11a0:	99000001 	stmdbls	r0, {r0}
    11a4:	0d000001 	stceq	0, cr0, [r0, #-4]
    11a8:	0c055001 	stceq	0, cr5, [r5], {1}
    11ac:	08005000 	stmdaeq	r0, {ip, lr}
    11b0:	06120e00 	ldreq	r0, [r2], -r0, lsl #28
    11b4:	023c0800 	eorseq	r0, ip, #0, 16
    11b8:	180e0000 	stmdane	lr, {}	; <UNPREDICTABLE>
    11bc:	4d080006 	stcmi	0, cr0, [r8, #-24]	; 0xffffffe8
    11c0:	00000002 	andeq	r0, r0, r2
    11c4:	69050411 	stmdbvs	r5, {r0, r4, sl}
    11c8:	1200746e 	andne	r7, r0, #1845493760	; 0x6e000000
    11cc:	0000045e 	andeq	r0, r0, lr, asr r4
    11d0:	01ac2c04 			; <UNDEFINED> instruction: 0x01ac2c04
    11d4:	03050000 	movweq	r0, #20480	; 0x5000
    11d8:	200001c0 	andcs	r0, r0, r0, asr #3
    11dc:	000a6d13 	andeq	r6, sl, r3, lsl sp
    11e0:	6ffd0300 	svcvs	0x00fd0300
    11e4:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
    11e8:	14000001 	strne	r0, [r0], #-1
    11ec:	0000003a 	andeq	r0, r0, sl, lsr r0
    11f0:	0a870a00 	beq	fe1c39f8 <BootRAM+0xd134199>
    11f4:	51010000 	mrspl	r0, (UNDEF: 1)
    11f8:	000001ac 	andeq	r0, r0, ip, lsr #3
    11fc:	000001ea 	andeq	r0, r0, sl, ror #3
    1200:	e00a000b 	and	r0, sl, fp
    1204:	0200000a 	andeq	r0, r0, #10
    1208:	00006f7c 	andeq	r6, r0, ip, ror pc
    120c:	0001fb00 	andeq	pc, r1, r0, lsl #22
    1210:	15000b00 	strne	r0, [r0, #-2816]	; 0xb00
    1214:	00000a1a 	andeq	r0, r0, sl, lsl sl
    1218:	02087d02 	andeq	r7, r8, #2, 26	; 0x80
    121c:	000b0000 	andeq	r0, fp, r0
    1220:	000a7b16 	andeq	r7, sl, r6, lsl fp
    1224:	16f90300 	ldrbtne	r0, [r9], r0, lsl #6
    1228:	00000aa2 	andeq	r0, r0, r2, lsr #21
    122c:	3516fa03 	ldrcc	pc, [r6, #-2563]	; 0xa03
    1230:	0300000a 	movweq	r0, #10
    1234:	027916fb 	rsbseq	r1, r9, #263192576	; 0xfb00000
    1238:	51040000 	mrspl	r0, (UNDEF: 4)
    123c:	000a9716 	andeq	r9, sl, r6, lsl r7
    1240:	0afc0300 	beq	fff01e48 <BootRAM+0xee725e9>
    1244:	00000a47 	andeq	r0, r0, r7, asr #20
    1248:	01acff03 			; <UNDEFINED> instruction: 0x01acff03
    124c:	023c0000 	eorseq	r0, ip, #0
    1250:	000b0000 	andeq	r0, fp, r0
    1254:	000a2a17 	andeq	r2, sl, r7, lsl sl
    1258:	4dfe0300 	ldclmi	3, cr0, [lr]
    125c:	14000002 	strne	r0, [r0], #-2
    1260:	0000003a 	andeq	r0, r0, sl, lsr r0
    1264:	0ac41600 	beq	ff106a6c <BootRAM+0xe07720d>
    1268:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    126c:	000b2300 	andeq	r2, fp, r0, lsl #6
    1270:	d0000400 	andle	r0, r0, r0, lsl #8
    1274:	04000005 	streq	r0, [r0], #-5
    1278:	00017e01 	andeq	r7, r1, r1, lsl #28
    127c:	0cf60100 	ldfeqe	f0, [r6]
    1280:	00320000 	eorseq	r0, r2, r0
    1284:	01500000 	cmpeq	r0, r0
    1288:	00000000 	andeq	r0, r0, r0
    128c:	05ad0000 	streq	r0, [sp, #0]!
    1290:	04020000 	streq	r0, [r2], #-0
    1294:	00021c05 	andeq	r1, r2, r5, lsl #24
    1298:	05020200 	streq	r0, [r2, #-512]	; 0x200
    129c:	000006c8 	andeq	r0, r0, r8, asr #13
    12a0:	74060102 	strvc	r0, [r6], #-258	; 0x102
    12a4:	03000006 	movweq	r0, #6
    12a8:	00323375 	eorseq	r3, r2, r5, ror r3
    12ac:	00452702 	subeq	r2, r5, r2, lsl #14
    12b0:	04020000 	streq	r0, [r2], #-0
    12b4:	0003a107 	andeq	sl, r3, r7, lsl #2
    12b8:	31750300 	cmncc	r5, r0, lsl #6
    12bc:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    12c0:	00000057 	andeq	r0, r0, r7, asr r0
    12c4:	fd070202 	stc2	2, cr0, [r7, #-8]
    12c8:	03000003 	movweq	r0, #3
    12cc:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    12d0:	00006829 	andeq	r6, r0, r9, lsr #16
    12d4:	08010200 	stmdaeq	r1, {r9}
    12d8:	00000672 	andeq	r0, r0, r2, ror r6
    12dc:	00046c04 	andeq	r6, r4, r4, lsl #24
    12e0:	7a2f0200 	bvc	bc1ae8 <__Stack_Size+0xbc16e8>
    12e4:	05000000 	streq	r0, [r0, #-0]
    12e8:	00000045 	andeq	r0, r0, r5, asr #32
    12ec:	00017904 	andeq	r7, r1, r4, lsl #18
    12f0:	8a300200 	bhi	c01af8 <__Stack_Size+0xc016f8>
    12f4:	05000000 	streq	r0, [r0, #-0]
    12f8:	00000057 	andeq	r0, r0, r7, asr r0
    12fc:	000da304 	andeq	sl, sp, r4, lsl #6
    1300:	9a330200 	bls	cc1b08 <__Stack_Size+0xcc1708>
    1304:	06000000 	streq	r0, [r0], -r0
    1308:	0000007a 	andeq	r0, r0, sl, ror r0
    130c:	37020107 	strcc	r0, [r2, -r7, lsl #2]
    1310:	000000b4 	strheq	r0, [r0], -r4
    1314:	0005ff08 	andeq	pc, r5, r8, lsl #30
    1318:	6d080000 	stcvs	0, cr0, [r8, #-0]
    131c:	01000007 	tsteq	r0, r7
    1320:	04590400 	ldrbeq	r0, [r9], #-1024	; 0x400
    1324:	37020000 	strcc	r0, [r2, -r0]
    1328:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    132c:	8d032809 	stchi	8, cr2, [r3, #-36]	; 0xffffffdc
    1330:	0000013f 	andeq	r0, r0, pc, lsr r1
    1334:	0052430a 	subseq	r4, r2, sl, lsl #6
    1338:	006f8e03 	rsbeq	r8, pc, r3, lsl #28
    133c:	0b000000 	bleq	1344 <__Stack_Size+0xf44>
    1340:	00000d9e 	muleq	r0, lr, sp
    1344:	006f8f03 	rsbeq	r8, pc, r3, lsl #30
    1348:	0a040000 	beq	101350 <__Stack_Size+0x100f50>
    134c:	00524943 	subseq	r4, r2, r3, asr #18
    1350:	006f9003 	rsbeq	r9, pc, r3
    1354:	0b080000 	bleq	20135c <__Stack_Size+0x200f5c>
    1358:	00000b6f 	andeq	r0, r0, pc, ror #22
    135c:	006f9103 	rsbeq	r9, pc, r3, lsl #2
    1360:	0b0c0000 	bleq	301368 <__Stack_Size+0x300f68>
    1364:	00000c3b 	andeq	r0, r0, fp, lsr ip
    1368:	006f9203 	rsbeq	r9, pc, r3, lsl #4
    136c:	0b100000 	bleq	401374 <__Stack_Size+0x400f74>
    1370:	00000bf7 	strdeq	r0, [r0], -r7
    1374:	006f9303 	rsbeq	r9, pc, r3, lsl #6
    1378:	0b140000 	bleq	501380 <__Stack_Size+0x500f80>
    137c:	00000cc5 	andeq	r0, r0, r5, asr #25
    1380:	006f9403 	rsbeq	r9, pc, r3, lsl #8
    1384:	0b180000 	bleq	60138c <__Stack_Size+0x600f8c>
    1388:	00000d0e 	andeq	r0, r0, lr, lsl #26
    138c:	006f9503 	rsbeq	r9, pc, r3, lsl #10
    1390:	0b1c0000 	bleq	701398 <__Stack_Size+0x700f98>
    1394:	00000d7d 	andeq	r0, r0, sp, ror sp
    1398:	006f9603 	rsbeq	r9, pc, r3, lsl #12
    139c:	0a200000 	beq	8013a4 <__Stack_Size+0x800fa4>
    13a0:	00525343 	subseq	r5, r2, r3, asr #6
    13a4:	006f9703 	rsbeq	r9, pc, r3, lsl #14
    13a8:	00240000 	eoreq	r0, r4, r0
    13ac:	000bcc04 	andeq	ip, fp, r4, lsl #24
    13b0:	bf980300 	svclt	0x00980300
    13b4:	0c000000 	stceq	0, cr0, [r0], {-0}
    13b8:	9b03033c 	blls	c20b0 <__Stack_Size+0xc1cb0>
    13bc:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    13c0:	000cac0b 	andeq	sl, ip, fp, lsl #24
    13c4:	f69c0300 			; <UNDEFINED> instruction: 0xf69c0300
    13c8:	00000001 	andeq	r0, r0, r1
    13cc:	000c5b0b 	andeq	r5, ip, fp, lsl #22
    13d0:	fb9d0300 	blx	fe741fda <BootRAM+0xd6b277b>
    13d4:	08000001 	stmdaeq	r0, {r0}
    13d8:	000c360b 	andeq	r3, ip, fp, lsl #12
    13dc:	0b9e0300 	bleq	fe781fe4 <BootRAM+0xd6f2785>
    13e0:	80000002 	andhi	r0, r0, r2
    13e4:	000d950b 	andeq	r9, sp, fp, lsl #10
    13e8:	fb9f0300 	blx	fe7c1ff2 <BootRAM+0xd732793>
    13ec:	88000001 	stmdahi	r0, {r0}
    13f0:	000b1b0d 	andeq	r1, fp, sp, lsl #22
    13f4:	10a00300 	adcne	r0, r0, r0, lsl #6
    13f8:	00000002 	andeq	r0, r0, r2
    13fc:	0c6a0d01 	stcleq	13, cr0, [sl], #-4
    1400:	a1030000 	mrsge	r0, (UNDEF: 3)
    1404:	000001fb 	strdeq	r0, [r0], -fp
    1408:	ff0d0108 			; <UNDEFINED> instruction: 0xff0d0108
    140c:	0300000a 	movweq	r0, #10
    1410:	000215a2 	andeq	r1, r2, r2, lsr #11
    1414:	0d018000 	stceq	0, cr8, [r1, #-0]
    1418:	00000c74 	andeq	r0, r0, r4, ror ip
    141c:	01fba303 	mvnseq	sl, r3, lsl #6
    1420:	01880000 	orreq	r0, r8, r0
    1424:	000c2c0d 	andeq	r2, ip, sp, lsl #24
    1428:	1aa40300 	bne	fe902030 <BootRAM+0xd8727d1>
    142c:	00000002 	andeq	r0, r0, r2
    1430:	0c7e0d02 	ldcleq	13, cr0, [lr], #-8
    1434:	a5030000 	strge	r0, [r3, #-0]
    1438:	0000021f 	andeq	r0, r0, pc, lsl r2
    143c:	490e0208 	stmdbmi	lr, {r3, r9}
    1440:	03005250 	movweq	r5, #592	; 0x250
    1444:	00023fa6 	andeq	r3, r2, r6, lsr #31
    1448:	00030000 	andeq	r0, r3, r0
    144c:	00006f0f 	andeq	r6, r0, pc, lsl #30
    1450:	0001ef00 	andeq	lr, r1, r0, lsl #30
    1454:	01ef1000 	mvneq	r1, r0
    1458:	00010000 	andeq	r0, r1, r0
    145c:	45070402 	strmi	r0, [r7, #-1026]	; 0x402
    1460:	05000005 	streq	r0, [r0, #-5]
    1464:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1468:	00003a0f 	andeq	r3, r0, pc, lsl #20
    146c:	00020b00 	andeq	r0, r2, r0, lsl #22
    1470:	01ef1000 	mvneq	r1, r0
    1474:	001d0000 	andseq	r0, sp, r0
    1478:	0001df05 	andeq	sp, r1, r5, lsl #30
    147c:	01df0500 	bicseq	r0, pc, r0, lsl #10
    1480:	df050000 	svcle	0x00050000
    1484:	05000001 	streq	r0, [r0, #-1]
    1488:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    148c:	00003a0f 	andeq	r3, r0, pc, lsl #20
    1490:	00022f00 	andeq	r2, r2, r0, lsl #30
    1494:	01ef1000 	mvneq	r1, r0
    1498:	003d0000 	eorseq	r0, sp, r0
    149c:	00006f0f 	andeq	r6, r0, pc, lsl #30
    14a0:	00023f00 	andeq	r3, r2, r0, lsl #30
    14a4:	01ef1000 	mvneq	r1, r0
    14a8:	000e0000 	andeq	r0, lr, r0
    14ac:	00022f05 	andeq	r2, r2, r5, lsl #30
    14b0:	0d010400 	cfstrseq	mvf0, [r1, #-0]
    14b4:	a7030000 	strge	r0, [r3, -r0]
    14b8:	0000014a 	andeq	r0, r0, sl, asr #2
    14bc:	a9030409 	stmdbge	r3, {r0, r3, sl}
    14c0:	00000288 	andeq	r0, r0, r8, lsl #5
    14c4:	0004710b 	andeq	r7, r4, fp, lsl #2
    14c8:	5eaa0300 	cdppl	3, 10, cr0, cr10, cr0, {0}
    14cc:	00000000 	andeq	r0, r0, r0
    14d0:	0004940b 	andeq	r9, r4, fp, lsl #8
    14d4:	5eab0300 	cdppl	3, 10, cr0, cr11, cr0, {0}
    14d8:	01000000 	mrseq	r0, (UNDEF: 0)
    14dc:	0003760b 	andeq	r7, r3, fp, lsl #12
    14e0:	5eac0300 	cdppl	3, 10, cr0, cr12, cr0, {0}
    14e4:	02000000 	andeq	r0, r0, #0
    14e8:	0000000b 	andeq	r0, r0, fp
    14ec:	b4ad0300 	strtlt	r0, [sp], #768	; 0x300
    14f0:	03000000 	movweq	r0, #0
    14f4:	04c00400 	strbeq	r0, [r0], #1024	; 0x400
    14f8:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    14fc:	0000024f 	andeq	r0, r0, pc, asr #4
    1500:	b0034009 	andlt	r4, r3, r9
    1504:	00000344 	andeq	r0, r0, r4, asr #6
    1508:	000c500b 	andeq	r5, ip, fp
    150c:	8fb10300 	svchi	0x00b10300
    1510:	00000000 	andeq	r0, r0, r0
    1514:	000bea0b 	andeq	lr, fp, fp, lsl #20
    1518:	6fb20300 	svcvs	0x00b20300
    151c:	04000000 	streq	r0, [r0], #-0
    1520:	000bbe0b 	andeq	fp, fp, fp, lsl #28
    1524:	6fb30300 	svcvs	0x00b30300
    1528:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    152c:	000bfe0b 	andeq	pc, fp, fp, lsl #28
    1530:	6fb40300 	svcvs	0x00b40300
    1534:	0c000000 	stceq	0, cr0, [r0], {-0}
    1538:	5243530a 	subpl	r5, r3, #671088640	; 0x28000000
    153c:	6fb50300 	svcvs	0x00b50300
    1540:	10000000 	andne	r0, r0, r0
    1544:	5243430a 	subpl	r4, r3, #671088640	; 0x28000000
    1548:	6fb60300 	svcvs	0x00b60300
    154c:	14000000 	strne	r0, [r0], #-0
    1550:	000d2f0b 	andeq	r2, sp, fp, lsl #30
    1554:	54b70300 	ldrtpl	r0, [r7], #768	; 0x300
    1558:	18000003 	stmdane	r0, {r0, r1}
    155c:	000ca60b 	andeq	sl, ip, fp, lsl #12
    1560:	6fb80300 	svcvs	0x00b80300
    1564:	24000000 	strcs	r0, [r0], #-0
    1568:	000c270b 	andeq	r2, ip, fp, lsl #14
    156c:	6fb90300 	svcvs	0x00b90300
    1570:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1574:	000db50b 	andeq	fp, sp, fp, lsl #10
    1578:	6fba0300 	svcvs	0x00ba0300
    157c:	2c000000 	stccs	0, cr0, [r0], {-0}
    1580:	000c650b 	andeq	r6, ip, fp, lsl #10
    1584:	6fbb0300 	svcvs	0x00bb0300
    1588:	30000000 	andcc	r0, r0, r0
    158c:	000c040b 	andeq	r0, ip, fp, lsl #8
    1590:	6fbc0300 	svcvs	0x00bc0300
    1594:	34000000 	strcc	r0, [r0], #-0
    1598:	000b970b 	andeq	r9, fp, fp, lsl #14
    159c:	6fbd0300 	svcvs	0x00bd0300
    15a0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    15a4:	000ce70b 	andeq	lr, ip, fp, lsl #14
    15a8:	6fbe0300 	svcvs	0x00be0300
    15ac:	3c000000 	stccc	0, cr0, [r0], {-0}
    15b0:	006f0f00 	rsbeq	r0, pc, r0, lsl #30
    15b4:	03540000 	cmpeq	r4, #0
    15b8:	ef100000 	svc	0x00100000
    15bc:	02000001 	andeq	r0, r0, #1
    15c0:	03440500 	movteq	r0, #17664	; 0x4500
    15c4:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
    15c8:	0300000d 	movweq	r0, #13
    15cc:	000293bf 			; <UNDEFINED> instruction: 0x000293bf
    15d0:	0c1b1100 	ldfeqs	f1, [fp], {-0}
    15d4:	03080000 	movweq	r0, #32768	; 0x8000
    15d8:	000388c3 	andeq	r8, r3, r3, asr #17
    15dc:	52430a00 	subpl	r0, r3, #0, 20
    15e0:	6fc40300 	svcvs	0x00c40300
    15e4:	00000000 	andeq	r0, r0, r0
    15e8:	5253430a 	subspl	r4, r3, #671088640	; 0x28000000
    15ec:	6fc50300 	svcvs	0x00c50300
    15f0:	04000000 	streq	r0, [r0], #-0
    15f4:	0c441100 	stfeqe	f1, [r4], {-0}
    15f8:	03380000 	teqeq	r8, #0
    15fc:	0004b4d0 	ldrdeq	fp, [r4], -r0
    1600:	0cd50b00 	vldmiaeq	r5, {d16-d15}
    1604:	d1030000 	mrsle	r0, (UNDEF: 3)
    1608:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    160c:	52440a00 	subpl	r0, r4, #0, 20
    1610:	d2030031 	andle	r0, r3, #49	; 0x31
    1614:	0000007f 	andeq	r0, r0, pc, ror r0
    1618:	0c6a0b04 	stcleq	11, cr0, [sl], #-16
    161c:	d3030000 	movwle	r0, #12288	; 0x3000
    1620:	000004b9 			; <UNDEFINED> instruction: 0x000004b9
    1624:	52440a06 	subpl	r0, r4, #24576	; 0x6000
    1628:	d4030032 	strle	r0, [r3], #-50	; 0x32
    162c:	0000007f 	andeq	r0, r0, pc, ror r0
    1630:	0c740b08 	ldcleq	11, cr0, [r4], #-32	; 0xffffffe0
    1634:	d5030000 	strle	r0, [r3, #-0]
    1638:	000004b9 			; <UNDEFINED> instruction: 0x000004b9
    163c:	52440a0a 	subpl	r0, r4, #40960	; 0xa000
    1640:	d6030033 			; <UNDEFINED> instruction: 0xd6030033
    1644:	0000007f 	andeq	r0, r0, pc, ror r0
    1648:	0c7e0b0c 	ldcleq	11, cr0, [lr], #-48	; 0xffffffd0
    164c:	d7030000 	strle	r0, [r3, -r0]
    1650:	000004b9 			; <UNDEFINED> instruction: 0x000004b9
    1654:	52440a0e 	subpl	r0, r4, #57344	; 0xe000
    1658:	d8030034 	stmdale	r3, {r2, r4, r5}
    165c:	0000007f 	andeq	r0, r0, pc, ror r0
    1660:	0c880b10 	vstmiaeq	r8, {d0-d7}
    1664:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    1668:	000004b9 			; <UNDEFINED> instruction: 0x000004b9
    166c:	52440a12 	subpl	r0, r4, #73728	; 0x12000
    1670:	da030035 	ble	c174c <__Stack_Size+0xc134c>
    1674:	0000007f 	andeq	r0, r0, pc, ror r0
    1678:	0c920b14 	vldmiaeq	r2, {d0-d9}
    167c:	db030000 	blle	c1684 <__Stack_Size+0xc1284>
    1680:	000004b9 			; <UNDEFINED> instruction: 0x000004b9
    1684:	52440a16 	subpl	r0, r4, #90112	; 0x16000
    1688:	dc030036 	stcle	0, cr0, [r3], {54}	; 0x36
    168c:	0000007f 	andeq	r0, r0, pc, ror r0
    1690:	0c9c0b18 	vldmiaeq	ip, {d0-d11}
    1694:	dd030000 	stcle	0, cr0, [r3, #-0]
    1698:	000004b9 			; <UNDEFINED> instruction: 0x000004b9
    169c:	52440a1a 	subpl	r0, r4, #106496	; 0x1a000
    16a0:	de030037 	mcrle	0, 0, r0, cr3, cr7, {1}
    16a4:	0000007f 	andeq	r0, r0, pc, ror r0
    16a8:	0d590b1c 	vldreq	d16, [r9, #-112]	; 0xffffff90
    16ac:	df030000 	svcle	0x00030000
    16b0:	000004b9 			; <UNDEFINED> instruction: 0x000004b9
    16b4:	52440a1e 	subpl	r0, r4, #122880	; 0x1e000
    16b8:	e0030038 	and	r0, r3, r8, lsr r0
    16bc:	0000007f 	andeq	r0, r0, pc, ror r0
    16c0:	0cec0b20 	vstmiaeq	ip!, {d16-d31}
    16c4:	e1030000 	mrs	r0, (UNDEF: 3)
    16c8:	000004b9 			; <UNDEFINED> instruction: 0x000004b9
    16cc:	52440a22 	subpl	r0, r4, #139264	; 0x22000
    16d0:	e2030039 	and	r0, r3, #57	; 0x39
    16d4:	0000007f 	andeq	r0, r0, pc, ror r0
    16d8:	0b4c0b24 	bleq	1304370 <__Stack_Size+0x1303f70>
    16dc:	e3030000 	movw	r0, #12288	; 0x3000
    16e0:	000004b9 			; <UNDEFINED> instruction: 0x000004b9
    16e4:	0cc00b26 	vstmiaeq	r0, {d16-<overflow reg d34>}
    16e8:	e4030000 	str	r0, [r3], #-0
    16ec:	0000007f 	andeq	r0, r0, pc, ror r0
    16f0:	0b570b28 	bleq	15c4398 <__Stack_Size+0x15c3f98>
    16f4:	e5030000 	str	r0, [r3, #-0]
    16f8:	000004b9 			; <UNDEFINED> instruction: 0x000004b9
    16fc:	0d340b2a 	vldmdbeq	r4!, {d0-d20}
    1700:	e6030000 	str	r0, [r3], -r0
    1704:	0000006f 	andeq	r0, r0, pc, rrx
    1708:	52430a2c 	subpl	r0, r3, #44, 20	; 0x2c000
    170c:	6fe70300 	svcvs	0x00e70300
    1710:	30000000 	andcc	r0, r0, r0
    1714:	5253430a 	subspl	r4, r3, #671088640	; 0x28000000
    1718:	6fe80300 	svcvs	0x00e80300
    171c:	34000000 	strcc	r0, [r0], #-0
    1720:	003a0600 	eorseq	r0, sl, r0, lsl #12
    1724:	4c060000 	stcmi	0, cr0, [r6], {-0}
    1728:	12000000 	andne	r0, r0, #0
    172c:	04be0413 	ldrteq	r0, [lr], #1043	; 0x413
    1730:	11140000 	tstne	r4, r0
    1734:	0100000c 	tsteq	r0, ip
    1738:	1501017e 	strne	r0, [r1, #-382]	; 0x17e
    173c:	0000059c 	muleq	r0, ip, r5
    1740:	fc012d01 	stc2	13, cr2, [r1], {1}
    1744:	16000004 	strne	r0, [r0], -r4
    1748:	00000d3a 	andeq	r0, r0, sl, lsr sp
    174c:	003a2d01 	eorseq	r2, sl, r1, lsl #26
    1750:	70170000 	andsvc	r0, r7, r0
    1754:	01006e69 	tsteq	r0, r9, ror #28
    1758:	00005e2d 	andeq	r5, r0, sp, lsr #28
    175c:	61761700 	cmnvs	r6, r0, lsl #14
    1760:	2d01006c 	stccs	0, cr0, [r1, #-432]	; 0xfffffe50
    1764:	0000005e 	andeq	r0, r0, lr, asr r0
    1768:	04ce1800 	strbeq	r1, [lr], #2048	; 0x800
    176c:	06240000 	strteq	r0, [r4], -r0
    1770:	00160800 	andseq	r0, r6, r0, lsl #16
    1774:	9c010000 	stcls	0, cr0, [r1], {-0}
    1778:	00000529 	andeq	r0, r0, r9, lsr #10
    177c:	0004da19 	andeq	sp, r4, r9, lsl sl
    1780:	1a500100 	bne	1401b88 <__Stack_Size+0x1401788>
    1784:	000004e5 	andeq	r0, r0, r5, ror #9
    1788:	00000286 	andeq	r0, r0, r6, lsl #5
    178c:	0004f01a 	andeq	pc, r4, sl, lsl r0	; <UNPREDICTABLE>
    1790:	0002a700 	andeq	sl, r2, r0, lsl #14
    1794:	201b0000 	andscs	r0, fp, r0
    1798:	0100000b 	tsteq	r0, fp
    179c:	0000b432 	andeq	fp, r0, r2, lsr r4
    17a0:	00000000 	andeq	r0, r0, r0
    17a4:	00001200 	andeq	r1, r0, r0, lsl #4
    17a8:	619c0100 	orrsvs	r0, ip, r0, lsl #2
    17ac:	1c000005 	stcne	0, cr0, [r0], {5}
    17b0:	00000d3a 	andeq	r0, r0, sl, lsr sp
    17b4:	003a3201 	eorseq	r3, sl, r1, lsl #4
    17b8:	02dd0000 	sbcseq	r0, sp, #0
    17bc:	701d0000 	andsvc	r0, sp, r0
    17c0:	01006e69 	tsteq	r0, r9, ror #28
    17c4:	00005e32 	andeq	r5, r0, r2, lsr lr
    17c8:	0002fe00 	andeq	pc, r2, r0, lsl #28
    17cc:	871e0000 	ldrhi	r0, [lr, -r0]
    17d0:	0100000a 	tsteq	r0, sl
    17d4:	0000b43b 	andeq	fp, r0, fp, lsr r4
    17d8:	00063c00 	andeq	r3, r6, r0, lsl #24
    17dc:	00001008 	andeq	r1, r0, r8
    17e0:	8a9c0100 	bhi	fe701be8 <BootRAM+0xd672389>
    17e4:	1f000005 	svcne	0x00000005
    17e8:	00000b69 	andeq	r0, r0, r9, ror #22
    17ec:	00b43d01 	adcseq	r3, r4, r1, lsl #26
    17f0:	031f0000 	tsteq	pc, #0
    17f4:	20000000 	andcs	r0, r0, r0
    17f8:	00000b3d 	andeq	r0, r0, sp, lsr fp
    17fc:	00004c01 	andeq	r4, r0, r1, lsl #24
    1800:	00500000 	subseq	r0, r0, r0
    1804:	9c010000 	stcls	0, cr0, [r1], {-0}
    1808:	00000653 	andeq	r0, r0, r3, asr r6
    180c:	000d3a1c 	andeq	r3, sp, ip, lsl sl
    1810:	3a4c0100 	bcc	1301c18 <__Stack_Size+0x1301818>
    1814:	45000000 	strmi	r0, [r0, #-0]
    1818:	1d000003 	stcne	0, cr0, [r0, #-12]
    181c:	006e6970 	rsbeq	r6, lr, r0, ror r9
    1820:	005e4c01 	subseq	r4, lr, r1, lsl #24
    1824:	03630000 	cmneq	r3, #0
    1828:	da1c0000 	ble	701830 <__Stack_Size+0x701430>
    182c:	0100000a 	tsteq	r0, sl
    1830:	00005e4c 	andeq	r5, r0, ip, asr #28
    1834:	00038400 	andeq	r8, r3, r0, lsl #8
    1838:	0b381c00 	bleq	e08840 <__Stack_Size+0xe08440>
    183c:	4c010000 	stcmi	0, cr0, [r1], {-0}
    1840:	0000003a 	andeq	r0, r0, sl, lsr r0
    1844:	000003cc 	andeq	r0, r0, ip, asr #7
    1848:	000a8f21 	andeq	r8, sl, r1, lsr #30
    184c:	5e4c0100 	dvfple	f0, f4, f0
    1850:	02000000 	andeq	r0, r0, #0
    1854:	63220091 	teqvs	r2, #145	; 0x91
    1858:	3a500100 	bcc	1401c60 <__Stack_Size+0x1401860>
    185c:	ea000000 	b	1864 <__Stack_Size+0x1464>
    1860:	23000003 	movwcs	r0, #3
    1864:	00000000 	andeq	r0, r0, r0
    1868:	000004ce 	andeq	r0, r0, lr, asr #9
    186c:	00000616 	andeq	r0, r0, r6, lsl r6
    1870:	02520124 	subseq	r0, r2, #36, 2
    1874:	01240077 	teqeq	r4, r7, ror r0
    1878:	00790251 	rsbseq	r0, r9, r1, asr r2
    187c:	02500124 	subseq	r0, r0, #36, 2
    1880:	23000078 	movwcs	r0, #120	; 0x78
    1884:	00000000 	andeq	r0, r0, r0
    1888:	000004ce 	andeq	r0, r0, lr, asr #9
    188c:	00000636 	andeq	r0, r0, r6, lsr r6
    1890:	02520124 	subseq	r0, r2, #36, 2
    1894:	0124007a 	teqeq	r4, sl, ror r0
    1898:	00790251 	rsbseq	r0, r9, r1, asr r2
    189c:	02500124 	subseq	r0, r0, #36, 2
    18a0:	25000078 	strcs	r0, [r0, #-120]	; 0x78
    18a4:	00000000 	andeq	r0, r0, r0
    18a8:	000004ce 	andeq	r0, r0, lr, asr #9
    18ac:	02520124 	subseq	r0, r2, #36, 2
    18b0:	01240077 	teqeq	r4, r7, ror r0
    18b4:	00790251 	rsbseq	r0, r9, r1, asr r2
    18b8:	02500124 	subseq	r0, r0, #36, 2
    18bc:	00000078 	andeq	r0, r0, r8, ror r0
    18c0:	000a7b26 	andeq	r7, sl, r6, lsr #22
    18c4:	4c620100 	stfmie	f0, [r2], #-0
    18c8:	48080006 	stmdami	r8, {r1, r2}
    18cc:	01000000 	mrseq	r0, (UNDEF: 0)
    18d0:	0aa2209c 	beq	fe889b48 <BootRAM+0xd7fa2e9>
    18d4:	6c010000 	stcvs	0, cr0, [r1], {-0}
    18d8:	08000694 	stmdaeq	r0, {r2, r4, r7, r9, sl}
    18dc:	00000060 	andeq	r0, r0, r0, rrx
    18e0:	06869c01 	streq	r9, [r6], r1, lsl #24
    18e4:	b1270000 	teqlt	r7, r0
    18e8:	0100000c 	tsteq	r0, ip
    18ec:	0006866d 	andeq	r8, r6, sp, ror #12
    18f0:	02000000 	andeq	r0, r0, #0
    18f4:	03a60704 			; <UNDEFINED> instruction: 0x03a60704
    18f8:	af280000 	svcge	0x00280000
    18fc:	01000002 	tsteq	r0, r2
    1900:	0686018d 	streq	r0, [r6], sp, lsl #3
    1904:	b7010000 	strlt	r0, [r1, -r0]
    1908:	29000006 	stmdbcs	r0, {r1, r2}
    190c:	006e6970 	rsbeq	r6, lr, r0, ror r9
    1910:	b7018d01 	strlt	r8, [r1, -r1, lsl #26]
    1914:	2a000006 	bcs	1934 <__Stack_Size+0x1534>
    1918:	00000bf2 	strdeq	r0, [r0], -r2
    191c:	86018f01 	strhi	r8, [r1], -r1, lsl #30
    1920:	00000006 	andeq	r0, r0, r6
    1924:	6905042b 	stmdbvs	r5, {r0, r1, r3, r5, sl}
    1928:	2000746e 	andcs	r7, r0, lr, ror #8
    192c:	00000a35 	andeq	r0, r0, r5, lsr sl
    1930:	06f49701 	ldrbteq	r9, [r4], r1, lsl #14
    1934:	00180800 	andseq	r0, r8, r0, lsl #16
    1938:	9c010000 	stcls	0, cr0, [r1], {-0}
    193c:	000006f9 	strdeq	r0, [r0], -r9
    1940:	0004ce2c 	andeq	ip, r4, ip, lsr #28
    1944:	0006fa00 	andeq	pc, r6, r0, lsl #20
    1948:	00001208 	andeq	r1, r0, r8, lsl #4
    194c:	2d9d0100 	ldfcss	f0, [sp]
    1950:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1954:	04e52d01 	strbteq	r2, [r5], #3329	; 0xd01
    1958:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
    195c:	000004da 	ldrdeq	r0, [r0], -sl
    1960:	40010c00 	andmi	r0, r1, r0, lsl #24
    1964:	97200000 	strls	r0, [r0, -r0]!
    1968:	0100000a 	tsteq	r0, sl
    196c:	00070ca4 	andeq	r0, r7, r4, lsr #25
    1970:	00001c08 	andeq	r1, r0, r8, lsl #24
    1974:	289c0100 	ldmcs	ip, {r8}
    1978:	2f000007 	svccs	0x00000007
    197c:	08000714 	stmdaeq	r0, {r2, r4, r8, r9, sl}
    1980:	00000008 	andeq	r0, r0, r8
    1984:	000b141f 	andeq	r1, fp, pc, lsl r4
    1988:	3aa70100 	bcc	fe9c1d90 <BootRAM+0xd932531>
    198c:	13000000 	movwne	r0, #0
    1990:	00000004 	andeq	r0, r0, r4
    1994:	0a6d1b00 	beq	1b4859c <__Stack_Size+0x1b4819c>
    1998:	b0010000 	andlt	r0, r1, r0
    199c:	000000b4 	strheq	r0, [r0], -r4
    19a0:	08000728 	stmdaeq	r0, {r3, r5, r8, r9, sl}
    19a4:	00000014 	andeq	r0, r0, r4, lsl r0
    19a8:	075f9c01 	ldrbeq	r9, [pc, -r1, lsl #24]
    19ac:	511c0000 	tstpl	ip, r0
    19b0:	0100000d 	tsteq	r0, sp
    19b4:	00003ab0 			; <UNDEFINED> instruction: 0x00003ab0
    19b8:	00042600 	andeq	r2, r4, r0, lsl #12
    19bc:	70732200 	rsbsvc	r2, r3, r0, lsl #4
    19c0:	3ab10100 	bcc	fec41dc8 <BootRAM+0xdbb2569>
    19c4:	47000000 	strmi	r0, [r0, -r0]
    19c8:	00000004 	andeq	r0, r0, r4
    19cc:	000af130 	andeq	pc, sl, r0, lsr r1	; <UNPREDICTABLE>
    19d0:	3cba0100 	ldfccs	f0, [sl]
    19d4:	18080007 	stmdane	r8, {r0, r1, r2}
    19d8:	01000000 	mrseq	r0, (UNDEF: 0)
    19dc:	0007ad9c 	muleq	r7, ip, sp
    19e0:	0d511c00 	ldcleq	12, cr1, [r1, #-0]
    19e4:	ba010000 	blt	419ec <__Stack_Size+0x415ec>
    19e8:	0000003a 	andeq	r0, r0, sl, lsr r0
    19ec:	0000045a 	andeq	r0, r0, sl, asr r4
    19f0:	000d4904 	andeq	r4, sp, r4, lsl #18
    19f4:	bfbe0100 	svclt	0x00be0100
    19f8:	1f000004 	svcne	0x00000004
    19fc:	00000bc3 	andeq	r0, r0, r3, asr #23
    1a00:	003abf01 	eorseq	fp, sl, r1, lsl #30
    1a04:	047b0000 	ldrbteq	r0, [fp], #-0
    1a08:	df1f0000 	svcle	0x001f0000
    1a0c:	0100000c 	tsteq	r0, ip
    1a10:	000783c1 	andeq	r8, r7, r1, asr #7
    1a14:	00047b00 	andeq	r7, r4, r0, lsl #22
    1a18:	72200000 	eorvc	r0, r0, #0
    1a1c:	0100000d 	tsteq	r0, sp
    1a20:	000754de 	ldrdeq	r5, [r7], -lr
    1a24:	00002c08 	andeq	r2, r0, r8, lsl #24
    1a28:	d09c0100 	addsle	r0, ip, r0, lsl #2
    1a2c:	21000007 	tstcs	r0, r7
    1a30:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
    1a34:	004cde01 	subeq	sp, ip, r1, lsl #28
    1a38:	50010000 	andpl	r0, r1, r0
    1a3c:	0a471e00 	beq	11c9244 <__Stack_Size+0x11c8e44>
    1a40:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    1a44:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    1a48:	08000780 	stmdaeq	r0, {r7, r8, r9, sl}
    1a4c:	00000048 	andeq	r0, r0, r8, asr #32
    1a50:	08089c01 	stmdaeq	r8, {r0, sl, fp, ip, pc}
    1a54:	cd1f0000 	ldcgt	0, cr0, [pc, #-0]	; 1a5c <__Stack_Size+0x165c>
    1a58:	0100000c 	tsteq	r0, ip
    1a5c:	0000b4f2 	strdeq	fp, [r0], -r2
    1a60:	00048e00 	andeq	r8, r4, r0, lsl #28
    1a64:	07b42500 	ldreq	r2, [r4, r0, lsl #10]!
    1a68:	07ad0800 	streq	r0, [sp, r0, lsl #16]!
    1a6c:	01240000 	teqeq	r4, r0
    1a70:	00300150 	eorseq	r0, r0, r0, asr r1
    1a74:	073a3100 	ldreq	r3, [sl, -r0, lsl #2]!
    1a78:	0f010000 	svceq	0x00010000
    1a7c:	0007c801 	andeq	ip, r7, r1, lsl #16
    1a80:	00006c08 	andeq	r6, r0, r8, lsl #24
    1a84:	9f9c0100 	svcls	0x009c0100
    1a88:	32000008 	andcc	r0, r0, #8
    1a8c:	00000bda 	ldrdeq	r0, [r0], -sl
    1a90:	9f010f01 	svcls	0x00010f01
    1a94:	01000008 	tsteq	r0, r8
    1a98:	0d823350 	stceq	3, cr3, [r2, #320]	; 0x140
    1a9c:	10010000 	andne	r0, r1, r0
    1aa0:	00003a01 	andeq	r3, r0, r1, lsl #20
    1aa4:	0004ad00 	andeq	sl, r4, r0, lsl #26
    1aa8:	0b623300 	bleq	188e6b0 <__Stack_Size+0x188e2b0>
    1aac:	11010000 	mrsne	r0, (UNDEF: 1)
    1ab0:	00003a01 	andeq	r3, r0, r1, lsl #20
    1ab4:	00051900 	andeq	r1, r5, r0, lsl #18
    1ab8:	0bef3300 	bleq	ffbce6c0 <BootRAM+0xeb3ee61>
    1abc:	12010000 	andne	r0, r1, #0
    1ac0:	00003a01 	andeq	r3, r0, r1, lsl #20
    1ac4:	00054e00 	andeq	r4, r5, r0, lsl #28
    1ac8:	0b783300 	bleq	1e0e6d0 <__Stack_Size+0x1e0e2d0>
    1acc:	13010000 	movwne	r0, #4096	; 0x1000
    1ad0:	00003a01 	andeq	r3, r0, r1, lsl #20
    1ad4:	00058600 	andeq	r8, r5, r0, lsl #12
    1ad8:	0b0d3300 	bleq	34e6e0 <__Stack_Size+0x34e2e0>
    1adc:	14010000 	strne	r0, [r1], #-0
    1ae0:	00003a01 	andeq	r3, r0, r1, lsl #20
    1ae4:	0005c300 	andeq	ip, r5, r0, lsl #6
    1ae8:	0c563400 	cfldrdeq	mvd3, [r6], {-0}
    1aec:	16010000 	strne	r0, [r1], -r0
    1af0:	0008a501 	andeq	sl, r8, r1, lsl #10
    1af4:	83da8000 	bicshi	r8, sl, #0
    1af8:	9c347e80 	ldcls	14, cr7, [r4], #-512	; 0xfffffe00
    1afc:	0100000b 	tsteq	r0, fp
    1b00:	08ab0117 	stmiaeq	fp!, {r0, r1, r2, r4, r8}
    1b04:	c2800000 	addgt	r0, r0, #0
    1b08:	007e8083 	rsbseq	r8, lr, r3, lsl #1
    1b0c:	02880413 	addeq	r0, r8, #318767104	; 0x13000000
    1b10:	04130000 	ldreq	r0, [r3], #-0
    1b14:	00000359 	andeq	r0, r0, r9, asr r3
    1b18:	02440413 	subeq	r0, r4, #318767104	; 0x13000000
    1b1c:	a2310000 	eorsge	r0, r1, #0
    1b20:	0100000b 	tsteq	r0, fp
    1b24:	08340132 	ldmdaeq	r4!, {r1, r4, r5, r8}
    1b28:	00240800 	eoreq	r0, r4, r0, lsl #16
    1b2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b30:	000008d9 	ldrdeq	r0, [r0], -r9
    1b34:	000b9c34 	andeq	r9, fp, r4, lsr ip
    1b38:	01330100 	teqeq	r3, r0, lsl #2
    1b3c:	000008ab 	andeq	r0, r0, fp, lsr #17
    1b40:	8083c280 	addhi	ip, r3, r0, lsl #5
    1b44:	2a20007e 	bcs	801d44 <__Stack_Size+0x801944>
    1b48:	0100000a 	tsteq	r0, sl
    1b4c:	000858cb 	andeq	r5, r8, fp, asr #17
    1b50:	00002808 	andeq	r2, r0, r8, lsl #16
    1b54:	429c0100 	addsmi	r0, ip, #0, 2
    1b58:	1c000009 	stcne	0, cr0, [r0], {9}
    1b5c:	00000d51 	andeq	r0, r0, r1, asr sp
    1b60:	003acb01 	eorseq	ip, sl, r1, lsl #22
    1b64:	05f10000 	ldrbeq	r0, [r1, #0]!
    1b68:	c5350000 	ldrgt	r0, [r5, #-0]!
    1b6c:	5a000004 	bpl	1b84 <__Stack_Size+0x1784>
    1b70:	38080008 	stmdacc	r8, {r3}
    1b74:	01000001 	tsteq	r0, r1
    1b78:	086636d0 	stmdaeq	r6!, {r4, r6, r7, r9, sl, ip, sp}^
    1b7c:	0b180800 	bleq	603b84 <__Stack_Size+0x603784>
    1b80:	6a360000 	bvs	d81b88 <__Stack_Size+0xd81788>
    1b84:	b1080008 	tstlt	r8, r8
    1b88:	36000008 	strcc	r0, [r0], -r8
    1b8c:	0800086e 	stmdaeq	r0, {r1, r2, r3, r5, r6, fp}
    1b90:	00000b1f 	andeq	r0, r0, pc, lsl fp
    1b94:	00087236 	andeq	r7, r8, r6, lsr r2
    1b98:	00065308 	andeq	r5, r6, r8, lsl #6
    1b9c:	087c3700 	ldmdaeq	ip!, {r8, r9, sl, ip, sp}^
    1ba0:	075f0800 	ldrbeq	r0, [pc, -r0, lsl #16]
    1ba4:	01240000 	teqeq	r4, r0
    1ba8:	01f30350 	mvnseq	r0, r0, asr r3
    1bac:	31000050 	qaddcc	r0, r0, r0
    1bb0:	00000ac4 	andeq	r0, r0, r4, asr #21
    1bb4:	80013c01 	andhi	r3, r1, r1, lsl #24
    1bb8:	14080008 	strne	r0, [r8], #-8
    1bbc:	01000000 	mrseq	r0, (UNDEF: 0)
    1bc0:	00096a9c 	muleq	r9, ip, sl
    1bc4:	0c563400 	cfldrdeq	mvd3, [r6], {-0}
    1bc8:	3d010000 	stccc	0, cr0, [r1, #-0]
    1bcc:	0008a501 	andeq	sl, r8, r1, lsl #10
    1bd0:	83da8000 	bicshi	r8, sl, #0
    1bd4:	38007e80 	stmdacc	r0, {r7, r9, sl, fp, ip, sp, lr}
    1bd8:	00000d63 	andeq	r0, r0, r3, ror #26
    1bdc:	b4014801 	strlt	r4, [r1], #-2049	; 0x801
    1be0:	94000000 	strls	r0, [r0], #-0
    1be4:	34080008 	strcc	r0, [r8], #-8
    1be8:	01000000 	mrseq	r0, (UNDEF: 0)
    1bec:	0009a59c 	muleq	r9, ip, r5
    1bf0:	0b043900 	bleq	10fff8 <__Stack_Size+0x10fbf8>
    1bf4:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    1bf8:	00003a01 	andeq	r3, r0, r1, lsl #20
    1bfc:	00062800 	andeq	r2, r6, r0, lsl #16
    1c00:	0b143300 	bleq	50e808 <__Stack_Size+0x50e408>
    1c04:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    1c08:	00003a01 	andeq	r3, r0, r1, lsl #20
    1c0c:	00064900 	andeq	r4, r6, r0, lsl #18
    1c10:	28380000 	ldmdacs	r8!, {}	; <UNPREDICTABLE>
    1c14:	0100000b 	tsteq	r0, fp
    1c18:	00b40159 	adcseq	r0, r4, r9, asr r1
    1c1c:	00000000 	andeq	r0, r0, r0
    1c20:	00300000 	eorseq	r0, r0, r0
    1c24:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c28:	000009e7 	andeq	r0, r0, r7, ror #19
    1c2c:	000b0439 	andeq	r0, fp, r9, lsr r4
    1c30:	01590100 	cmpeq	r9, r0, lsl #2
    1c34:	0000003a 	andeq	r0, r0, sl, lsr r0
    1c38:	00000669 	andeq	r0, r0, r9, ror #12
    1c3c:	01006e3a 	tsteq	r0, sl, lsr lr
    1c40:	004c0159 	subeq	r0, ip, r9, asr r1
    1c44:	06950000 	ldreq	r0, [r5], r0
    1c48:	00360000 	eorseq	r0, r6, r0
    1c4c:	6a000000 	bvs	1c54 <__Stack_Size+0x1854>
    1c50:	00000009 	andeq	r0, r0, r9
    1c54:	000d1638 	andeq	r1, sp, r8, lsr r6
    1c58:	01630100 	cmneq	r3, r0, lsl #2
    1c5c:	000000b4 	strheq	r0, [r0], -r4
    1c60:	080008c8 	stmdaeq	r0, {r3, r6, r7, fp}
    1c64:	0000004c 	andeq	r0, r0, ip, asr #32
    1c68:	0a5e9c01 	beq	17a8c74 <__Stack_Size+0x17a8874>
    1c6c:	47390000 	ldrmi	r0, [r9, -r0]!
    1c70:	0100000b 	tsteq	r0, fp
    1c74:	003a0163 	eorseq	r0, sl, r3, ror #2
    1c78:	06d90000 	ldrbeq	r0, [r9], r0
    1c7c:	31320000 	teqcc	r2, r0
    1c80:	0100000c 	tsteq	r0, ip
    1c84:	003a0163 	eorseq	r0, sl, r3, ror #2
    1c88:	51010000 	mrspl	r0, (UNDEF: 1)
    1c8c:	000d3f33 	andeq	r3, sp, r3, lsr pc
    1c90:	01640100 	cmneq	r4, r0, lsl #2
    1c94:	00000a5e 	andeq	r0, r0, lr, asr sl
    1c98:	000006d9 	ldrdeq	r0, [r0], -r9
    1c9c:	000c0a3b 	andeq	r0, ip, fp, lsr sl
    1ca0:	01650100 	cmneq	r5, r0, lsl #2
    1ca4:	0000006f 	andeq	r0, r0, pc, rrx
    1ca8:	3b689102 	blcc	1a260b8 <__Stack_Size+0x1a25cb8>
    1cac:	00000d8e 	andeq	r0, r0, lr, lsl #27
    1cb0:	6f016601 	svcvs	0x00016601
    1cb4:	02000000 	andeq	r0, r0, #0
    1cb8:	14336c91 	ldrtne	r6, [r3], #-3217	; 0xc91
    1cbc:	0100000b 	tsteq	r0, fp
    1cc0:	003a0168 	eorseq	r0, sl, r8, ror #2
    1cc4:	06fa0000 	ldrbteq	r0, [sl], r0
    1cc8:	13000000 	movwne	r0, #0
    1ccc:	00007f04 	andeq	r7, r0, r4, lsl #30
    1cd0:	04c53c00 	strbeq	r3, [r5], #3072	; 0xc00
    1cd4:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    1cd8:	000c0800 	andeq	r0, ip, r0, lsl #16
    1cdc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ce0:	000b7f3d 	andeq	r7, fp, sp, lsr pc
    1ce4:	01850100 	orreq	r0, r5, r0, lsl #2
    1ce8:	08000920 	stmdaeq	r0, {r5, r8, fp}
    1cec:	00000018 	andeq	r0, r0, r8, lsl r0
    1cf0:	8d189c01 	ldchi	12, cr9, [r8, #-4]
    1cf4:	38000006 	stmdacc	r0, {r1, r2}
    1cf8:	12080009 	andne	r0, r8, #9
    1cfc:	01000000 	mrseq	r0, (UNDEF: 0)
    1d00:	000aab9c 	muleq	sl, ip, fp
    1d04:	069e1a00 	ldreq	r1, [lr], r0, lsl #20
    1d08:	07180000 	ldreq	r0, [r8, -r0]
    1d0c:	aa3e0000 	bge	f81d14 <__Stack_Size+0xf81914>
    1d10:	36000006 	strcc	r0, [r0], -r6
    1d14:	00000007 	andeq	r0, r0, r7
    1d18:	000b8b38 	andeq	r8, fp, r8, lsr fp
    1d1c:	01990100 	orrseq	r0, r9, r0, lsl #2
    1d20:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    1d24:	0800094c 	stmdaeq	r0, {r2, r3, r6, r8, fp}
    1d28:	00000010 	andeq	r0, r0, r0, lsl r0
    1d2c:	0ad69c01 	beq	ff5a8d38 <BootRAM+0xe5194d9>
    1d30:	253f0000 	ldrcs	r0, [pc, #-0]!	; 1d38 <__Stack_Size+0x1938>
    1d34:	0100000d 	tsteq	r0, sp
    1d38:	0ad6019b 	beq	ff5823ac <BootRAM+0xe4f2b4d>
    1d3c:	f7e00000 			; <UNDEFINED> instruction: 0xf7e00000
    1d40:	13001fff 	movwne	r1, #4095	; 0xfff
    1d44:	00005704 	andeq	r5, r0, r4, lsl #14
    1d48:	02ea3800 	rsceq	r3, sl, #0, 16
    1d4c:	9f010000 	svcls	0x00010000
    1d50:	0006b701 	andeq	fp, r6, r1, lsl #14
    1d54:	00095c00 	andeq	r5, r9, r0, lsl #24
    1d58:	00001808 	andeq	r1, r0, r8, lsl #16
    1d5c:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
    1d60:	3f00000b 	svccc	0x0000000b
    1d64:	00000d25 	andeq	r0, r0, r5, lsr #26
    1d68:	d601a201 	strle	sl, [r1], -r1, lsl #4
    1d6c:	e000000a 	and	r0, r0, sl
    1d70:	001ffff7 			; <UNDEFINED> instruction: 0x001ffff7
    1d74:	00045e40 	andeq	r5, r4, r0, asr #28
    1d78:	b72c0400 	strlt	r0, [ip, -r0, lsl #8]!
    1d7c:	05000006 	streq	r0, [r0, #-6]
    1d80:	0001c003 	andeq	ip, r1, r3
    1d84:	03f34120 	mvnseq	r4, #32, 2
    1d88:	80040000 	andhi	r0, r4, r0
    1d8c:	00080541 	andeq	r0, r8, r1, asr #10
    1d90:	00520400 	subseq	r0, r2, r0, lsl #8
    1d94:	00000658 	andeq	r0, r0, r8, asr r6
    1d98:	09940004 	ldmibeq	r4, {r2}
    1d9c:	01040000 	mrseq	r0, (UNDEF: 4)
    1da0:	0000017e 	andeq	r0, r0, lr, ror r1
    1da4:	000dcd01 	andeq	ip, sp, r1, lsl #26
    1da8:	00003200 	andeq	r3, r0, r0, lsl #4
    1dac:	00021800 	andeq	r1, r2, r0, lsl #16
    1db0:	00000000 	andeq	r0, r0, r0
    1db4:	00089100 	andeq	r9, r8, r0, lsl #2
    1db8:	05040200 	streq	r0, [r4, #-512]	; 0x200
    1dbc:	0000021c 	andeq	r0, r0, ip, lsl r2
    1dc0:	c8050202 	stmdagt	r5, {r1, r9}
    1dc4:	02000006 	andeq	r0, r0, #6
    1dc8:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
    1dcc:	75030000 	strvc	r0, [r3, #-0]
    1dd0:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    1dd4:	00004527 	andeq	r4, r0, r7, lsr #10
    1dd8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1ddc:	000003a1 	andeq	r0, r0, r1, lsr #7
    1de0:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    1de4:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
    1de8:	02000000 	andeq	r0, r0, #0
    1dec:	03fd0702 	mvnseq	r0, #524288	; 0x80000
    1df0:	75030000 	strvc	r0, [r3, #-0]
    1df4:	29020038 	stmdbcs	r2, {r3, r4, r5}
    1df8:	00000068 	andeq	r0, r0, r8, rrx
    1dfc:	72080102 	andvc	r0, r8, #-2147483648	; 0x80000000
    1e00:	04000006 	streq	r0, [r0], #-6
    1e04:	84370201 	ldrthi	r0, [r7], #-513	; 0x201
    1e08:	05000000 	streq	r0, [r0, #-0]
    1e0c:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1e10:	076d0500 	strbeq	r0, [sp, -r0, lsl #10]!
    1e14:	00010000 	andeq	r0, r1, r0
    1e18:	00045906 	andeq	r5, r4, r6, lsl #18
    1e1c:	6f370200 	svcvs	0x00370200
    1e20:	07000000 	streq	r0, [r0, -r0]
    1e24:	00005e04 	andeq	r5, r0, r4, lsl #28
    1e28:	091b0800 	ldmdbeq	fp, {fp}
    1e2c:	030c0000 	movweq	r0, #49152	; 0xc000
    1e30:	0000d238 	andeq	sp, r0, r8, lsr r2
    1e34:	02b60900 	adcseq	r0, r6, #0, 18
    1e38:	50030000 	andpl	r0, r3, r0
    1e3c:	0000004c 	andeq	r0, r0, ip, asr #32
    1e40:	033f0900 	teqeq	pc, #0, 18
    1e44:	51030000 	mrspl	r0, (UNDEF: 3)
    1e48:	0000004c 	andeq	r0, r0, ip, asr #32
    1e4c:	158f0902 	strne	r0, [pc, #2306]	; 2756 <__Stack_Size+0x2356>
    1e50:	52030000 	andpl	r0, r3, #0
    1e54:	0000004c 	andeq	r0, r0, ip, asr #32
    1e58:	01090904 	tsteq	r9, r4, lsl #18
    1e5c:	53030000 	movwpl	r0, #12288	; 0x3000
    1e60:	000000e1 	andeq	r0, r0, r1, ror #1
    1e64:	8f0a0008 	svchi	0x000a0008
    1e68:	e1000000 	mrs	r0, (UNDEF: 0)
    1e6c:	0b000000 	bleq	1e74 <__Stack_Size+0x1a74>
    1e70:	0000004c 	andeq	r0, r0, ip, asr #32
    1e74:	d2040700 	andle	r0, r4, #0, 14
    1e78:	06000000 	streq	r0, [r0], -r0
    1e7c:	0000091c 	andeq	r0, r0, ip, lsl r9
    1e80:	00955403 	addseq	r5, r5, r3, lsl #8
    1e84:	420c0000 	andmi	r0, ip, #0
    1e88:	03020057 	movweq	r0, #8279	; 0x2057
    1e8c:	00011662 	andeq	r1, r1, r2, ror #12
    1e90:	62620d00 	rsbvs	r0, r2, #0, 26
    1e94:	65030030 	strvs	r0, [r3, #-48]	; 0x30
    1e98:	0000005e 	andeq	r0, r0, lr, asr r0
    1e9c:	62620d00 	rsbvs	r0, r2, #0, 26
    1ea0:	66030031 			; <UNDEFINED> instruction: 0x66030031
    1ea4:	0000005e 	andeq	r0, r0, lr, asr r0
    1ea8:	020e0001 	andeq	r0, lr, #1
    1eac:	01325f03 	teqeq	r2, r3, lsl #30
    1eb0:	770f0000 	strvc	r0, [pc, -r0]
    1eb4:	4c610300 	stclmi	3, cr0, [r1], #-0
    1eb8:	0f000000 	svceq	0x00000000
    1ebc:	03007762 	movweq	r7, #1890	; 0x762
    1ec0:	0000f268 	andeq	pc, r0, r8, ror #4
    1ec4:	25060000 	strcs	r0, [r6, #-0]
    1ec8:	03000004 	movweq	r0, #4
    1ecc:	00011669 	andeq	r1, r1, r9, ror #12
    1ed0:	00620800 	rsbeq	r0, r2, r0, lsl #16
    1ed4:	031c0000 	tsteq	ip, #0
    1ed8:	0001ce6b 	andeq	ip, r1, fp, ror #28
    1edc:	05800900 	streq	r0, [r0, #2304]	; 0x900
    1ee0:	6d030000 	stcvs	0, cr0, [r3, #-0]
    1ee4:	0000005e 	andeq	r0, r0, lr, asr r0
    1ee8:	023c0900 	eorseq	r0, ip, #0, 18
    1eec:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
    1ef0:	0000005e 	andeq	r0, r0, lr, asr r0
    1ef4:	043e0901 	ldrteq	r0, [lr], #-2305	; 0x901
    1ef8:	6f030000 	svcvs	0x00030000
    1efc:	00000132 	andeq	r0, r0, r2, lsr r1
    1f00:	016e0902 	cmneq	lr, r2, lsl #18
    1f04:	70030000 	andvc	r0, r3, r0
    1f08:	00000132 	andeq	r0, r0, r2, lsr r1
    1f0c:	083d0904 	ldmdaeq	sp!, {r2, r8, fp}
    1f10:	71030000 	mrsvc	r0, (UNDEF: 3)
    1f14:	00000132 	andeq	r0, r0, r2, lsr r1
    1f18:	09490906 	stmdbeq	r9, {r1, r2, r8, fp}^
    1f1c:	73030000 	movwvc	r0, #12288	; 0x3000
    1f20:	0000005e 	andeq	r0, r0, lr, asr r0
    1f24:	03c60908 	biceq	r0, r6, #8, 18	; 0x20000
    1f28:	74030000 	strvc	r0, [r3], #-0
    1f2c:	0000005e 	andeq	r0, r0, lr, asr r0
    1f30:	04d10909 	ldrbeq	r0, [r1], #2313	; 0x909
    1f34:	75030000 	strvc	r0, [r3, #-0]
    1f38:	0000005e 	andeq	r0, r0, lr, asr r0
    1f3c:	0892090a 	ldmeq	r2, {r1, r3, r8, fp}
    1f40:	76030000 	strvc	r0, [r3], -r0
    1f44:	0000005e 	andeq	r0, r0, lr, asr r0
    1f48:	064c090b 	strbeq	r0, [ip], -fp, lsl #18
    1f4c:	77030000 	strvc	r0, [r3, -r0]
    1f50:	0000005e 	andeq	r0, r0, lr, asr r0
    1f54:	0743090c 	strbeq	r0, [r3, -ip, lsl #18]
    1f58:	7a030000 	bvc	c1f60 <__Stack_Size+0xc1b60>
    1f5c:	000000e7 	andeq	r0, r0, r7, ror #1
    1f60:	63060010 	movwvs	r0, #24592	; 0x6010
    1f64:	03000000 	movweq	r0, #0
    1f68:	00013d7b 	andeq	r3, r1, fp, ror sp
    1f6c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1f70:	00000545 	andeq	r0, r0, r5, asr #10
    1f74:	23040104 	movwcs	r0, #16644	; 0x4104
    1f78:	00000201 	andeq	r0, r0, r1, lsl #4
    1f7c:	000e3805 	andeq	r3, lr, r5, lsl #16
    1f80:	53050000 	movwpl	r0, #20480	; 0x5000
    1f84:	0100000f 	tsteq	r0, pc
    1f88:	000dd905 	andeq	sp, sp, r5, lsl #18
    1f8c:	c4050200 	strgt	r0, [r5], #-512	; 0x200
    1f90:	0300000e 	movweq	r0, #14
    1f94:	0ee80600 	cdpeq	6, 14, cr0, cr8, cr0, {0}
    1f98:	23040000 	movwcs	r0, #16384	; 0x4000
    1f9c:	000001e0 	andeq	r0, r0, r0, ror #3
    1fa0:	000df408 	andeq	pc, sp, r8, lsl #8
    1fa4:	29040600 	stmdbcs	r4, {r9, sl}
    1fa8:	00000261 	andeq	r0, r0, r1, ror #4
    1fac:	000f8109 	andeq	r8, pc, r9, lsl #2
    1fb0:	5e2a0400 	cdppl	4, 2, cr0, cr10, cr0, {0}
    1fb4:	00000000 	andeq	r0, r0, r0
    1fb8:	000e0b09 	andeq	r0, lr, r9, lsl #22
    1fbc:	5e2b0400 	cdppl	4, 2, cr0, cr11, cr0, {0}
    1fc0:	01000000 	mrseq	r0, (UNDEF: 0)
    1fc4:	000e1a09 	andeq	r1, lr, r9, lsl #20
    1fc8:	5e2c0400 	cdppl	4, 2, cr0, cr12, cr0, {0}
    1fcc:	02000000 	andeq	r0, r0, #0
    1fd0:	000e2909 	andeq	r2, lr, r9, lsl #18
    1fd4:	5e2d0400 	cdppl	4, 2, cr0, cr13, cr0, {0}
    1fd8:	03000000 	movweq	r0, #0
    1fdc:	000f3a09 	andeq	r3, pc, r9, lsl #20
    1fe0:	5e2e0400 	cdppl	4, 2, cr0, cr14, cr0, {0}
    1fe4:	04000000 	streq	r0, [r0], #-0
    1fe8:	000dba09 	andeq	fp, sp, r9, lsl #20
    1fec:	5e2f0400 	cdppl	4, 2, cr0, cr15, cr0, {0}
    1ff0:	05000000 	streq	r0, [r0, #-0]
    1ff4:	0df50600 	ldcleq	6, cr0, [r5]
    1ff8:	30040000 	andcc	r0, r4, r0
    1ffc:	0000020c 	andeq	r0, r0, ip, lsl #4
    2000:	000dd310 	andeq	sp, sp, r0, lsl r3
    2004:	32040100 	andcc	r0, r4, #0, 2
    2008:	00000291 	muleq	r0, r1, r2
    200c:	000f6205 	andeq	r6, pc, r5, lsl #4
    2010:	95050000 	strls	r0, [r5, #-0]
    2014:	0100000f 	tsteq	r0, pc
    2018:	444e4511 	strbmi	r4, [lr], #-1297	; 0x511
    201c:	8d050200 	sfmhi	f0, 4, [r5, #-0]
    2020:	03000000 	movweq	r0, #0
    2024:	0dd40600 	ldcleq	6, cr0, [r4]
    2028:	37040000 	strcc	r0, [r4, -r0]
    202c:	0000026c 	andeq	r0, r0, ip, ror #4
    2030:	0000aa12 	andeq	sl, r0, r2, lsl sl
    2034:	74380100 	ldrtvc	r0, [r8], #-256	; 0x100
    2038:	5c080009 	stcpl	0, cr0, [r8], {9}
    203c:	01000000 	mrseq	r0, (UNDEF: 0)
    2040:	0534139c 	ldreq	r1, [r4, #-924]!	; 0x39c
    2044:	80010000 	andhi	r0, r1, r0
    2048:	0009d001 	andeq	sp, r9, r1
    204c:	00004408 	andeq	r4, r0, r8, lsl #8
    2050:	ef9c0100 	svc	0x009c0100
    2054:	14000002 	strne	r0, [r0], #-2
    2058:	00000f48 	andeq	r0, r0, r8, asr #30
    205c:	5e018101 	mvfpls	f0, f1
    2060:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    2064:	15000007 	strne	r0, [r0, #-7]
    2068:	080009ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, fp}
    206c:	000005e0 	andeq	r0, r0, r0, ror #11
    2070:	0009f416 	andeq	pc, r9, r6, lsl r4	; <UNPREDICTABLE>
    2074:	0005e808 	andeq	lr, r5, r8, lsl #16
    2078:	0a081600 	beq	207880 <__Stack_Size+0x207480>
    207c:	05ef0800 	strbeq	r0, [pc, #2048]!	; 2884 <__Stack_Size+0x2484>
    2080:	17000000 	strne	r0, [r0, -r0]
    2084:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
    2088:	00019801 	andeq	r9, r1, r1, lsl #16
    208c:	02000000 	andeq	r0, r0, #0
    2090:	01000000 	mrseq	r0, (UNDEF: 0)
    2094:	0e96189c 	mrceq	8, 4, r1, cr6, cr12, {4}
    2098:	9b010000 	blls	420a0 <__Stack_Size+0x41ca0>
    209c:	00008f01 	andeq	r8, r0, r1, lsl #30
    20a0:	000a1400 	andeq	r1, sl, r0, lsl #8
    20a4:	00001808 	andeq	r1, r0, r8, lsl #16
    20a8:	2c9c0100 	ldfcss	f0, [ip], {0}
    20ac:	19000003 	stmdbne	r0, {r0, r1}
    20b0:	00000f41 	andeq	r0, r0, r1, asr #30
    20b4:	4c019b01 	stcmi	11, cr9, [r1], {1}
    20b8:	91000000 	mrsls	r0, (UNDEF: 0)
    20bc:	00000007 	andeq	r0, r0, r7
    20c0:	000e7918 	andeq	r7, lr, r8, lsl r9
    20c4:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    20c8:	0000008f 	andeq	r0, r0, pc, lsl #1
    20cc:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
    20d0:	00000018 	andeq	r0, r0, r8, lsl r0
    20d4:	03579c01 	cmpeq	r7, #256	; 0x100
    20d8:	41190000 	tstmi	r9, r0
    20dc:	0100000f 	tsteq	r0, pc
    20e0:	004c01a4 	subeq	r0, ip, r4, lsr #3
    20e4:	07b20000 	ldreq	r0, [r2, r0]!
    20e8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    20ec:	00000ea3 	andeq	r0, r0, r3, lsr #29
    20f0:	8f01ae01 	svchi	0x0001ae01
    20f4:	44000000 	strmi	r0, [r0], #-0
    20f8:	2808000a 	stmdacs	r8, {r1, r3}
    20fc:	01000000 	mrseq	r0, (UNDEF: 0)
    2100:	0003829c 	muleq	r3, ip, r2
    2104:	0f411900 	svceq	0x00411900
    2108:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    210c:	00004c01 	andeq	r4, r0, r1, lsl #24
    2110:	0007d300 	andeq	sp, r7, r0, lsl #6
    2114:	48180000 	ldmdami	r8, {}	; <UNPREDICTABLE>
    2118:	0100000e 	tsteq	r0, lr
    211c:	008f01b8 			; <UNDEFINED> instruction: 0x008f01b8
    2120:	0a6c0000 	beq	1b02128 <__Stack_Size+0x1b01d28>
    2124:	00340800 	eorseq	r0, r4, r0, lsl #16
    2128:	9c010000 	stcls	0, cr0, [r1], {-0}
    212c:	000003ad 	andeq	r0, r0, sp, lsr #7
    2130:	000f4119 	andeq	r4, pc, r9, lsl r1	; <UNPREDICTABLE>
    2134:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
    2138:	0000004c 	andeq	r0, r0, ip, asr #32
    213c:	000007f4 	strdeq	r0, [r0], -r4
    2140:	0e651300 	cdpeq	3, 6, cr1, cr5, cr0, {0}
    2144:	c1010000 	mrsgt	r0, (UNDEF: 1)
    2148:	000aa001 	andeq	sl, sl, r1
    214c:	00005c08 	andeq	r5, r0, r8, lsl #24
    2150:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
    2154:	1a000004 	bne	216c <__Stack_Size+0x1d6c>
    2158:	c2010069 	andgt	r0, r1, #105	; 0x69
    215c:	00040501 	andeq	r0, r4, r1, lsl #10
    2160:	00081500 	andeq	r1, r8, r0, lsl #10
    2164:	0f6c1b00 	svceq	0x006c1b00
    2168:	c3010000 	movwgt	r0, #4096	; 0x1000
    216c:	00040c01 	andeq	r0, r4, r1, lsl #24
    2170:	0ac01c00 	beq	ff009178 <BootRAM+0xdf79919>
    2174:	05f60800 	ldrbeq	r0, [r6, #2048]!	; 0x800
    2178:	03f10000 	mvnseq	r0, #0
    217c:	011d0000 	tsteq	sp, r0
    2180:	00740250 	rsbseq	r0, r4, r0, asr r2
    2184:	0ad61e00 	beq	ff58998c <BootRAM+0xe4fa12d>
    2188:	060c0800 	streq	r0, [ip], -r0, lsl #16
    218c:	011d0000 	tsteq	sp, r0
    2190:	00740550 	rsbseq	r0, r4, r0, asr r5
    2194:	00220075 	eoreq	r0, r2, r5, ror r0
    2198:	05041f00 	streq	r1, [r4, #-3840]	; 0xf00
    219c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    21a0:	003a0407 	eorseq	r0, sl, r7, lsl #8
    21a4:	4b200000 	blmi	8021ac <__Stack_Size+0x801dac>
    21a8:	01000003 	tsteq	r0, r3
    21ac:	0000844b 	andeq	r8, r0, fp, asr #8
    21b0:	000afc00 	andeq	pc, sl, r0, lsl #24
    21b4:	00021c08 	andeq	r1, r2, r8, lsl #24
    21b8:	7d9c0100 	ldfvcs	f0, [ip]
    21bc:	21000004 	tstcs	r0, r4
    21c0:	00000f48 	andeq	r0, r0, r8, asr #30
    21c4:	005e5201 	subseq	r5, lr, r1, lsl #4
    21c8:	08340000 	ldmdaeq	r4!, {}	; <UNPREDICTABLE>
    21cc:	42150000 	andsmi	r0, r5, #0
    21d0:	2708000b 	strcs	r0, [r8, -fp]
    21d4:	15000006 	strne	r0, [r0, #-6]
    21d8:	08000b46 	stmdaeq	r0, {r1, r2, r6, r8, r9, fp}
    21dc:	0000062e 	andeq	r0, r0, lr, lsr #12
    21e0:	000b4e1c 	andeq	r4, fp, ip, lsl lr
    21e4:	00063608 	andeq	r3, r6, r8, lsl #12
    21e8:	00046100 	andeq	r6, r4, r0, lsl #2
    21ec:	50011d00 	andpl	r1, r1, r0, lsl #26
    21f0:	424d0a03 	submi	r0, sp, #12288	; 0x3000
    21f4:	0b901500 	bleq	fe4075fc <BootRAM+0xd377d9d>
    21f8:	06470800 	strbeq	r0, [r7], -r0, lsl #16
    21fc:	c0150000 	andsgt	r0, r5, r0
    2200:	ad08000b 	stcge	0, cr0, [r8, #-44]	; 0xffffffd4
    2204:	15000003 	strne	r0, [r0, #-3]
    2208:	08000bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp}
    220c:	00000653 	andeq	r0, r0, r3, asr r6
    2210:	0f9c2200 	svceq	0x009c2200
    2214:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    2218:	00005e01 	andeq	r5, r0, r1, lsl #28
    221c:	00000000 	andeq	r0, r0, r0
    2220:	00000c00 	andeq	r0, r0, r0, lsl #24
    2224:	139c0100 	orrsne	r0, ip, #0, 2
    2228:	00000f89 	andeq	r0, r0, r9, lsl #31
    222c:	0001ed01 	andeq	lr, r1, r1, lsl #26
    2230:	0c000000 	stceq	0, cr0, [r0], {-0}
    2234:	01000000 	mrseq	r0, (UNDEF: 0)
    2238:	0004b89c 	muleq	r4, ip, r8
    223c:	0edf2300 	cdpeq	3, 13, cr2, cr15, cr0, {0}
    2240:	ed010000 	stc	0, cr0, [r1, #-0]
    2244:	00005e01 	andeq	r5, r0, r1, lsl #28
    2248:	00500100 	subseq	r0, r0, r0, lsl #2
    224c:	000ae024 	andeq	lr, sl, r4, lsr #32
    2250:	01f10100 	mvnseq	r0, r0, lsl #2
    2254:	00000084 	andeq	r0, r0, r4, lsl #1
    2258:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
    225c:	0000000c 	andeq	r0, r0, ip
    2260:	1a259c01 	bne	96926c <__Stack_Size+0x968e6c>
    2264:	0100000a 	tsteq	r0, sl
    2268:	0d2401f5 	stfeqs	f0, [r4, #-980]!	; 0xfffffc2c
    226c:	00040800 	andeq	r0, r4, r0, lsl #16
    2270:	9c010000 	stcls	0, cr0, [r1], {-0}
    2274:	000dff26 	andeq	pc, sp, r6, lsr #30
    2278:	f1260100 			; <UNDEFINED> instruction: 0xf1260100
    227c:	05000004 	streq	r0, [r0, #-4]
    2280:	0001bc03 	andeq	fp, r1, r3, lsl #24
    2284:	003a2720 	eorseq	r2, sl, r0, lsr #14
    2288:	76260000 	strtvc	r0, [r6], -r0
    228c:	0100000f 	tsteq	r0, pc
    2290:	0004f127 	andeq	pc, r4, r7, lsr #2
    2294:	b8030500 	stmdalt	r3, {r8, sl}
    2298:	26200001 	strtcs	r0, [r0], -r1
    229c:	00000ef9 	strdeq	r0, [r0], -r9
    22a0:	05182801 	ldreq	r2, [r8, #-2049]	; 0x801
    22a4:	03050000 	movweq	r0, #20480	; 0x5000
    22a8:	20000a15 	andcs	r0, r0, r5, lsl sl
    22ac:	00026127 	andeq	r6, r2, r7, lsr #2
    22b0:	005e2800 	subseq	r2, lr, r0, lsl #16
    22b4:	052e0000 	streq	r0, [lr, #-0]!
    22b8:	d9290000 	stmdble	r9!, {}	; <UNPREDICTABLE>
    22bc:	ff000001 			; <UNDEFINED> instruction: 0xff000001
    22c0:	c2260007 	eorgt	r0, r6, #7
    22c4:	0100000d 	tsteq	r0, sp
    22c8:	00053f2e 	andeq	r3, r5, lr, lsr #30
    22cc:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    22d0:	27200002 	strcs	r0, [r0, -r2]!
    22d4:	0000051d 	andeq	r0, r0, sp, lsl r5
    22d8:	000f2226 	andeq	r2, pc, r6, lsr #4
    22dc:	f1300100 			; <UNDEFINED> instruction: 0xf1300100
    22e0:	05000004 	streq	r0, [r0, #-4]
    22e4:	000a1003 	andeq	r1, sl, r3
    22e8:	0f152620 	svceq	0x00152620
    22ec:	31010000 	mrscc	r0, (UNDEF: 1)
    22f0:	00000566 	andeq	r0, r0, r6, ror #10
    22f4:	0a0e0305 	beq	382f10 <__Stack_Size+0x382b10>
    22f8:	4c272000 	stcmi	0, cr2, [r7], #-0
    22fc:	26000000 	strcs	r0, [r0], -r0
    2300:	00000f06 	andeq	r0, r0, r6, lsl #30
    2304:	05663201 	strbeq	r3, [r6, #-513]!	; 0x201
    2308:	03050000 	movweq	r0, #20480	; 0x5000
    230c:	20000a0c 	andcs	r0, r0, ip, lsl #20
    2310:	0002a22a 	andeq	sl, r2, sl, lsr #4
    2314:	87220500 	strhi	r0, [r2, -r0, lsl #10]!
    2318:	07000005 	streq	r0, [r0, -r5]
    231c:	0001ce04 	andeq	ip, r1, r4, lsl #28
    2320:	045e2b00 	ldrbeq	r2, [lr], #-2816	; 0xb00
    2324:	2c060000 	stccs	0, cr0, [r6], {-0}
    2328:	00000405 	andeq	r0, r0, r5, lsl #8
    232c:	01c00305 	biceq	r0, r0, r5, lsl #6
    2330:	322b2000 	eorcc	r2, fp, #0
    2334:	0100000f 	tsteq	r0, pc
    2338:	0005af2a 	andeq	sl, r5, sl, lsr #30
    233c:	1b030500 	blne	c3744 <__Stack_Size+0xc3344>
    2340:	2720000a 	strcs	r0, [r0, -sl]!
    2344:	00000084 	andeq	r0, r0, r4, lsl #1
    2348:	000e562b 	andeq	r5, lr, fp, lsr #12
    234c:	c5290100 	strgt	r0, [r9, #-256]!	; 0x100
    2350:	05000005 	streq	r0, [r0, #-5]
    2354:	000a1403 	andeq	r1, sl, r3, lsl #8
    2358:	02012720 	andeq	r2, r1, #32, 14	; 0x800000
    235c:	872b0000 	strhi	r0, [fp, -r0]!
    2360:	0100000e 	tsteq	r0, lr
    2364:	0005db35 	andeq	sp, r5, r5, lsr fp
    2368:	c8030500 	stmdagt	r3, {r8, sl}
    236c:	27200001 	strcs	r0, [r0, -r1]!
    2370:	00000291 	muleq	r0, r1, r2
    2374:	000ba22c 	andeq	sl, fp, ip, lsr #4
    2378:	01070700 	tsteq	r7, r0, lsl #14
    237c:	00007c2d 	andeq	r7, r0, sp, lsr #24
    2380:	2d810600 	stccs	6, cr0, [r1]
    2384:	00000ac4 	andeq	r0, r0, r4, asr #21
    2388:	632ef807 	msrvs	CPSR_fsx, #458752	; 0x70000
    238c:	0700000d 	streq	r0, [r0, -sp]
    2390:	00840102 	addeq	r0, r4, r2, lsl #2
    2394:	060c0000 	streq	r0, [ip], -r0
    2398:	3a0b0000 	bcc	2c23a0 <__Stack_Size+0x2c1fa0>
    239c:	00000000 	andeq	r0, r0, r0
    23a0:	000d162e 	andeq	r1, sp, lr, lsr #12
    23a4:	01010700 	tsteq	r1, r0, lsl #14
    23a8:	00000084 	andeq	r0, r0, r4, lsl #1
    23ac:	00000627 	andeq	r0, r0, r7, lsr #12
    23b0:	00003a0b 	andeq	r3, r0, fp, lsl #20
    23b4:	003a0b00 	eorseq	r0, sl, r0, lsl #22
    23b8:	2d000000 	stccs	0, cr0, [r0, #-0]
    23bc:	00000a97 	muleq	r0, r7, sl
    23c0:	7f2cfc07 	svcvc	0x002cfc07
    23c4:	0700000b 	streq	r0, [r0, -fp]
    23c8:	722f0105 	eorvc	r0, pc, #1073741825	; 0x40000001
    23cc:	0700000d 	streq	r0, [r0, -sp]
    23d0:	000647ee 	andeq	r4, r6, lr, ror #15
    23d4:	004c0b00 	subeq	r0, ip, r0, lsl #22
    23d8:	30000000 	andcc	r0, r0, r0
    23dc:	00000b8b 	andeq	r0, r0, fp, lsl #23
    23e0:	05010907 	streq	r0, [r1, #-2311]	; 0x907
    23e4:	2c000004 	stccs	0, cr0, [r0], {4}
    23e8:	00000c11 	andeq	r0, r0, r1, lsl ip
    23ec:	00010407 	andeq	r0, r1, r7, lsl #8
    23f0:	00000c88 	andeq	r0, r0, r8, lsl #25
    23f4:	0c7d0004 	ldcleq	0, cr0, [sp], #-16
    23f8:	01040000 	mrseq	r0, (UNDEF: 4)
    23fc:	0000017e 	andeq	r0, r0, lr, ror r1
    2400:	00111401 	andseq	r1, r1, r1, lsl #8
    2404:	00003200 	andeq	r3, r0, r0, lsl #4
    2408:	00033800 	andeq	r3, r3, r0, lsl #16
    240c:	00000000 	andeq	r0, r0, r0
    2410:	000aba00 	andeq	fp, sl, r0, lsl #20
    2414:	05040200 	streq	r0, [r4, #-512]	; 0x200
    2418:	0000021c 	andeq	r0, r0, ip, lsl r2
    241c:	c8050202 	stmdagt	r5, {r1, r9}
    2420:	02000006 	andeq	r0, r0, #6
    2424:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
    2428:	75030000 	strvc	r0, [r3, #-0]
    242c:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    2430:	00004524 	andeq	r4, r0, r4, lsr #10
    2434:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2438:	000003a1 	andeq	r0, r0, r1, lsr #7
    243c:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    2440:	57250200 	strpl	r0, [r5, -r0, lsl #4]!
    2444:	02000000 	andeq	r0, r0, #0
    2448:	03fd0702 	mvnseq	r0, #524288	; 0x80000
    244c:	75030000 	strvc	r0, [r3, #-0]
    2450:	26020038 			; <UNDEFINED> instruction: 0x26020038
    2454:	00000068 	andeq	r0, r0, r8, rrx
    2458:	72080102 	andvc	r0, r8, #-2147483648	; 0x80000000
    245c:	04000006 	streq	r0, [r0], #-6
    2460:	00001030 	andeq	r1, r0, r0, lsr r0
    2464:	8e160301 	cdphi	3, 1, cr0, cr6, cr1, {0}
    2468:	05000000 	streq	r0, [r0, #-0]
    246c:	00001127 	andeq	r1, r0, r7, lsr #2
    2470:	0ffb0500 	svceq	0x00fb0500
    2474:	05010000 	streq	r0, [r1, #-0]
    2478:	000010ce 	andeq	r1, r0, lr, asr #1
    247c:	31060002 	tstcc	r6, r2
    2480:	03000010 	movweq	r0, #16
    2484:	00006f1c 	andeq	r6, r0, ip, lsl pc
    2488:	12030700 	andne	r0, r3, #0, 14
    248c:	9b010000 	blls	42494 <__Stack_Size+0x42094>
    2490:	0000004c 	andeq	r0, r0, ip, asr #32
    2494:	0000b501 	andeq	fp, r0, r1, lsl #10
    2498:	13220800 	teqne	r2, #0, 16
    249c:	9b010000 	blls	424a4 <__Stack_Size+0x420a4>
    24a0:	0000005e 	andeq	r0, r0, lr, asr r0
    24a4:	12630900 	rsbne	r0, r3, #0, 18
    24a8:	22010000 	andcs	r0, r1, #0
    24ac:	00000000 	andeq	r0, r0, r0
    24b0:	0000000c 	andeq	r0, r0, ip
    24b4:	00d89c01 	sbcseq	r9, r8, r1, lsl #24
    24b8:	f90a0000 			; <UNDEFINED> instruction: 0xf90a0000
    24bc:	01000011 	tsteq	r0, r1, lsl r0
    24c0:	00004c22 	andeq	r4, r0, r2, lsr #24
    24c4:	00500100 	subseq	r0, r0, r0, lsl #2
    24c8:	0010610b 	andseq	r6, r0, fp, lsl #2
    24cc:	4c2e0100 	stfmis	f0, [lr], #-0
    24d0:	00000000 	andeq	r0, r0, r0
    24d4:	0c000000 	stceq	0, cr0, [r0], {-0}
    24d8:	01000000 	mrseq	r0, (UNDEF: 0)
    24dc:	1043099c 	umaalne	r0, r3, ip, r9
    24e0:	3a010000 	bcc	424e8 <__Stack_Size+0x420e8>
    24e4:	00000000 	andeq	r0, r0, r0
    24e8:	0000000c 	andeq	r0, r0, ip
    24ec:	01109c01 	tsteq	r0, r1, lsl #24
    24f0:	f90a0000 			; <UNDEFINED> instruction: 0xf90a0000
    24f4:	01000011 	tsteq	r0, r1, lsl r0
    24f8:	00004c3a 	andeq	r4, r0, sl, lsr ip
    24fc:	00500100 	subseq	r0, r0, r0, lsl #2
    2500:	0011f10b 	andseq	pc, r1, fp, lsl #2
    2504:	4c460100 	stfmie	f0, [r6], {-0}
    2508:	00000000 	andeq	r0, r0, r0
    250c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2510:	01000000 	mrseq	r0, (UNDEF: 0)
    2514:	12ce0b9c 	sbcne	r0, lr, #156, 22	; 0x27000
    2518:	52010000 	andpl	r0, r1, #0
    251c:	0000004c 	andeq	r0, r0, ip, asr #32
    2520:	00000000 	andeq	r0, r0, r0
    2524:	0000000c 	andeq	r0, r0, ip
    2528:	27099c01 	strcs	r9, [r9, -r1, lsl #24]
    252c:	01000012 	tsteq	r0, r2, lsl r0
    2530:	0000005e 	andeq	r0, r0, lr, asr r0
    2534:	00000c00 	andeq	r0, r0, r0, lsl #24
    2538:	5d9c0100 	ldfpls	f0, [ip]
    253c:	0a000001 	beq	2548 <__Stack_Size+0x2148>
    2540:	000011f9 	strdeq	r1, [r0], -r9
    2544:	004c5e01 	subeq	r5, ip, r1, lsl #28
    2548:	50010000 	andpl	r0, r1, r0
    254c:	107a0b00 	rsbsne	r0, sl, r0, lsl #22
    2550:	6a010000 	bvs	42558 <__Stack_Size+0x42158>
    2554:	0000004c 	andeq	r0, r0, ip, asr #32
    2558:	00000000 	andeq	r0, r0, r0
    255c:	0000000c 	andeq	r0, r0, ip
    2560:	6b099c01 	blvs	26956c <__Stack_Size+0x26916c>
    2564:	01000012 	tsteq	r0, r2, lsl r0
    2568:	00000076 	andeq	r0, r0, r6, ror r0
    256c:	00001000 	andeq	r1, r0, r0
    2570:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
    2574:	0a000001 	beq	2580 <__Stack_Size+0x2180>
    2578:	000011f9 	strdeq	r1, [r0], -r9
    257c:	004c7601 	subeq	r7, ip, r1, lsl #12
    2580:	50010000 	andpl	r0, r1, r0
    2584:	11e70b00 	mvnne	r0, r0, lsl #22
    2588:	82010000 	andhi	r0, r1, #0
    258c:	0000004c 	andeq	r0, r0, ip, asr #32
    2590:	00000000 	andeq	r0, r0, r0
    2594:	0000000c 	andeq	r0, r0, ip
    2598:	29099c01 	stmdbcs	r9, {r0, sl, fp, ip, pc}
    259c:	01000013 	tsteq	r0, r3, lsl r0
    25a0:	0000008f 	andeq	r0, r0, pc, lsl #1
    25a4:	00000e00 	andeq	r0, r0, r0, lsl #28
    25a8:	dc9c0100 	ldfles	f0, [ip], {0}
    25ac:	0c000001 	stceq	0, cr0, [r0], {1}
    25b0:	00001322 	andeq	r1, r0, r2, lsr #6
    25b4:	005e8f01 	subseq	r8, lr, r1, lsl #30
    25b8:	08940000 	ldmeq	r4, {}	; <UNPREDICTABLE>
    25bc:	f90a0000 			; <UNDEFINED> instruction: 0xf90a0000
    25c0:	01000011 	tsteq	r0, r1, lsl r0
    25c4:	00004c8f 	andeq	r4, r0, pc, lsl #25
    25c8:	00510100 	subseq	r0, r1, r0, lsl #2
    25cc:	0000990d 	andeq	r9, r0, sp, lsl #18
    25d0:	00000000 	andeq	r0, r0, r0
    25d4:	00001000 	andeq	r1, r0, r0
    25d8:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    25dc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    25e0:	000000a9 	andeq	r0, r0, r9, lsr #1
    25e4:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    25e8:	10c40900 	sbcne	r0, r4, r0, lsl #18
    25ec:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    25f0:	00000000 	andeq	r0, r0, r0
    25f4:	0000001c 	andeq	r0, r0, ip, lsl r0
    25f8:	022d9c01 	eoreq	r9, sp, #256	; 0x100
    25fc:	220c0000 	andcs	r0, ip, #0
    2600:	01000013 	tsteq	r0, r3, lsl r0
    2604:	00005ea8 	andeq	r5, r0, r8, lsr #29
    2608:	0008d600 	andeq	sp, r8, r0, lsl #12
    260c:	110e0c00 	tstne	lr, r0, lsl #24
    2610:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    2614:	0000004c 	andeq	r0, r0, ip, asr #32
    2618:	000008f7 	strdeq	r0, [r0], -r7
    261c:	11970f00 	orrsne	r0, r7, r0, lsl #30
    2620:	b4010000 	strlt	r0, [r1], #-0
    2624:	0000004c 	andeq	r0, r0, ip, asr #32
    2628:	00000000 	andeq	r0, r0, r0
    262c:	00000012 	andeq	r0, r0, r2, lsl r0
    2630:	02569c01 	subseq	r9, r6, #256	; 0x100
    2634:	220c0000 	andcs	r0, ip, #0
    2638:	01000013 	tsteq	r0, r3, lsl r0
    263c:	00005eb4 			; <UNDEFINED> instruction: 0x00005eb4
    2640:	00091800 	andeq	r1, r9, r0, lsl #16
    2644:	14090000 	strne	r0, [r9], #-0
    2648:	01000013 	tsteq	r0, r3, lsl r0
    264c:	000d28c1 	andeq	r2, sp, r1, asr #17
    2650:	00002a08 	andeq	r2, r0, r8, lsl #20
    2654:	9f9c0100 	svcls	0x009c0100
    2658:	0c000002 	stceq	0, cr0, [r0], {2}
    265c:	00001322 	andeq	r1, r0, r2, lsr #6
    2660:	005ec101 	subseq	ip, lr, r1, lsl #2
    2664:	09390000 	ldmdbeq	r9!, {}	; <UNPREDICTABLE>
    2668:	e10a0000 	mrs	r0, (UNDEF: 10)
    266c:	0100000e 	tsteq	r0, lr
    2670:	00004cc1 	andeq	r4, r0, r1, asr #25
    2674:	10510100 	subsne	r0, r1, r0, lsl #2
    2678:	08000d28 	stmdaeq	r0, {r3, r5, r8, sl, fp}
    267c:	0000002a 	andeq	r0, r0, sl, lsr #32
    2680:	00048111 	andeq	r8, r4, r1, lsl r1
    2684:	4cc30100 	stfmie	f0, [r3], {0}
    2688:	01000000 	mrseq	r0, (UNDEF: 0)
    268c:	09000053 	stmdbeq	r0, {r0, r1, r4, r6}
    2690:	00001097 	muleq	r0, r7, r0
    2694:	0000ce01 	andeq	ip, r0, r1, lsl #28
    2698:	002a0000 	eoreq	r0, sl, r0
    269c:	9c010000 	stcls	0, cr0, [r1], {-0}
    26a0:	000002e8 	andeq	r0, r0, r8, ror #5
    26a4:	0013220c 	andseq	r2, r3, ip, lsl #4
    26a8:	5ece0100 	polple	f0, f6, f0
    26ac:	5a000000 	bpl	26b4 <__Stack_Size+0x22b4>
    26b0:	0a000009 	beq	26dc <__Stack_Size+0x22dc>
    26b4:	00000ee1 	andeq	r0, r0, r1, ror #29
    26b8:	004cce01 	subeq	ip, ip, r1, lsl #28
    26bc:	51010000 	mrspl	r0, (UNDEF: 1)
    26c0:	00000010 	andeq	r0, r0, r0, lsl r0
    26c4:	00002a00 	andeq	r2, r0, r0, lsl #20
    26c8:	04811100 	streq	r1, [r1], #256	; 0x100
    26cc:	d0010000 	andle	r0, r1, r0
    26d0:	0000004c 	andeq	r0, r0, ip, asr #32
    26d4:	00005301 	andeq	r5, r0, r1, lsl #6
    26d8:	000fe609 	andeq	lr, pc, r9, lsl #12
    26dc:	00db0100 	sbcseq	r0, fp, r0, lsl #2
    26e0:	24000000 	strcs	r0, [r0], #-0
    26e4:	01000000 	mrseq	r0, (UNDEF: 0)
    26e8:	00033e9c 	muleq	r3, ip, lr
    26ec:	13220c00 	teqne	r2, #0, 24
    26f0:	db010000 	blle	426f8 <__Stack_Size+0x422f8>
    26f4:	0000005e 	andeq	r0, r0, lr, asr r0
    26f8:	0000097b 	andeq	r0, r0, fp, ror r9
    26fc:	0011090a 	andseq	r0, r1, sl, lsl #18
    2700:	5edb0100 	cdppl	1, 13, cr0, cr11, cr0, {0}
    2704:	01000000 	mrseq	r0, (UNDEF: 0)
    2708:	12e61251 	rscne	r1, r6, #268435461	; 0x10000005
    270c:	dd010000 	stcle	0, cr0, [r1, #-0]
    2710:	0000004c 	andeq	r0, r0, ip, asr #32
    2714:	00009913 	andeq	r9, r0, r3, lsl r9
    2718:	00000000 	andeq	r0, r0, r0
    271c:	00028800 	andeq	r8, r2, r0, lsl #16
    2720:	0ede0100 	cdpeq	1, 13, cr0, cr14, cr0, {0}
    2724:	000000a9 	andeq	r0, r0, r9, lsr #1
    2728:	0000097b 	andeq	r0, r0, fp, ror r9
    272c:	fb0f0000 	blx	3c2736 <__Stack_Size+0x3c2336>
    2730:	01000010 	tsteq	r0, r0, lsl r0
    2734:	00004cf0 	strdeq	r4, [r0], -r0
    2738:	00000000 	andeq	r0, r0, r0
    273c:	00001200 	andeq	r1, r0, r0, lsl #4
    2740:	679c0100 	ldrvs	r0, [ip, r0, lsl #2]
    2744:	0c000003 	stceq	0, cr0, [r0], {3}
    2748:	00001322 	andeq	r1, r0, r2, lsr #6
    274c:	005ef001 	subseq	pc, lr, r1
    2750:	099c0000 	ldmibeq	ip, {}	; <UNPREDICTABLE>
    2754:	0f000000 	svceq	0x00000000
    2758:	00001007 	andeq	r1, r0, r7
    275c:	004cfc01 	subeq	pc, ip, r1, lsl #24
    2760:	00000000 	andeq	r0, r0, r0
    2764:	00120000 	andseq	r0, r2, r0
    2768:	9c010000 	stcls	0, cr0, [r1], {-0}
    276c:	00000390 	muleq	r0, r0, r3
    2770:	0013220c 	andseq	r2, r3, ip, lsl #4
    2774:	5efc0100 	cdppl	1, 15, cr0, cr12, cr0, {0}
    2778:	bd000000 	stclt	0, cr0, [r0, #-0]
    277c:	00000009 	andeq	r0, r0, r9
    2780:	000fd914 	andeq	sp, pc, r4, lsl r9	; <UNPREDICTABLE>
    2784:	01080100 	mrseq	r0, (UNDEF: 24)
    2788:	00000000 	andeq	r0, r0, r0
    278c:	0000001e 	andeq	r0, r0, lr, lsl r0
    2790:	03d19c01 	bicseq	r9, r1, #256	; 0x100
    2794:	22150000 	andscs	r0, r5, #0
    2798:	01000013 	tsteq	r0, r3, lsl r0
    279c:	005e0108 	subseq	r0, lr, r8, lsl #2
    27a0:	09de0000 	ldmibeq	lr, {}^	; <UNPREDICTABLE>
    27a4:	00100000 	andseq	r0, r0, r0
    27a8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    27ac:	16000000 	strne	r0, [r0], -r0
    27b0:	00000481 	andeq	r0, r0, r1, lsl #9
    27b4:	4c010a01 	stcmi	10, cr0, [r1], {1}
    27b8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    27bc:	00000009 	andeq	r0, r0, r9
    27c0:	09621400 	stmdbeq	r2!, {sl, ip}^
    27c4:	14010000 	strne	r0, [r1], #-0
    27c8:	000d5201 	andeq	r5, sp, r1, lsl #4
    27cc:	00001e08 	andeq	r1, r0, r8, lsl #28
    27d0:	129c0100 	addsne	r0, ip, #0, 2
    27d4:	15000004 	strne	r0, [r0, #-4]
    27d8:	00001322 	andeq	r1, r0, r2, lsr #6
    27dc:	5e011401 	cdppl	4, 0, cr1, cr1, cr1, {0}
    27e0:	2a000000 	bcs	27e8 <__Stack_Size+0x23e8>
    27e4:	1000000a 	andne	r0, r0, sl
    27e8:	08000d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp}
    27ec:	0000001e 	andeq	r0, r0, lr, lsl r0
    27f0:	00048116 	andeq	r8, r4, r6, lsl r1
    27f4:	01160100 	tsteq	r6, r0, lsl #2
    27f8:	0000004c 	andeq	r0, r0, ip, asr #32
    27fc:	00000a4b 	andeq	r0, r0, fp, asr #20
    2800:	c2140000 	andsgt	r0, r4, #0
    2804:	01000011 	tsteq	r0, r1, lsl r0
    2808:	00000120 	andeq	r0, r0, r0, lsr #2
    280c:	001e0000 	andseq	r0, lr, r0
    2810:	9c010000 	stcls	0, cr0, [r1], {-0}
    2814:	00000439 	andeq	r0, r0, r9, lsr r4
    2818:	00132215 	andseq	r2, r3, r5, lsl r2
    281c:	01200100 	teqeq	r0, r0, lsl #2
    2820:	0000005e 	andeq	r0, r0, lr, asr r0
    2824:	00000a79 	andeq	r0, r0, r9, ror sl
    2828:	11da1400 	bicsne	r1, sl, r0, lsl #8
    282c:	2c010000 	stccs	0, cr0, [r1], {-0}
    2830:	00000001 	andeq	r0, r0, r1
    2834:	00001c00 	andeq	r1, r0, r0, lsl #24
    2838:	609c0100 	addsvs	r0, ip, r0, lsl #2
    283c:	15000004 	strne	r0, [r0, #-4]
    2840:	00001322 	andeq	r1, r0, r2, lsr #6
    2844:	5e012c01 	cdppl	12, 0, cr2, cr1, cr1, {0}
    2848:	9a000000 	bls	2850 <__Stack_Size+0x2450>
    284c:	0000000a 	andeq	r0, r0, sl
    2850:	00079314 	andeq	r9, r7, r4, lsl r3
    2854:	01370100 	teqeq	r7, r0, lsl #2
    2858:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
    285c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2860:	04879c01 	streq	r9, [r7], #3073	; 0xc01
    2864:	22150000 	andscs	r0, r5, #0
    2868:	01000013 	tsteq	r0, r3, lsl r0
    286c:	005e0137 	subseq	r0, lr, r7, lsr r1
    2870:	0abb0000 	beq	feec2878 <BootRAM+0xde33019>
    2874:	14000000 	strne	r0, [r0], #-0
    2878:	000012bf 			; <UNDEFINED> instruction: 0x000012bf
    287c:	00014201 	andeq	r4, r1, r1, lsl #4
    2880:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2884:	01000000 	mrseq	r0, (UNDEF: 0)
    2888:	0004ae9c 	muleq	r4, ip, lr
    288c:	13221500 	teqne	r2, #0, 10
    2890:	42010000 	andmi	r0, r1, #0
    2894:	00005e01 	andeq	r5, r0, r1, lsl #28
    2898:	000adc00 	andeq	sp, sl, r0, lsl #24
    289c:	51140000 	tstpl	r4, r0
    28a0:	01000011 	tsteq	r0, r1, lsl r0
    28a4:	0000014d 	andeq	r0, r0, sp, asr #2
    28a8:	001e0000 	andseq	r0, lr, r0
    28ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    28b0:	000004d5 	ldrdeq	r0, [r0], -r5
    28b4:	00132215 	andseq	r2, r3, r5, lsl r2
    28b8:	014d0100 	mrseq	r0, (UNDEF: 93)
    28bc:	0000005e 	andeq	r0, r0, lr, asr r0
    28c0:	00000afd 	strdeq	r0, [r0], -sp
    28c4:	11741400 	cmnne	r4, r0, lsl #8
    28c8:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    28cc:	00000001 	andeq	r0, r0, r1
    28d0:	00001c00 	andeq	r1, r0, r0, lsl #24
    28d4:	fc9c0100 	ldc2	1, cr0, [ip], {0}
    28d8:	15000004 	strne	r0, [r0, #-4]
    28dc:	00001322 	andeq	r1, r0, r2, lsr #6
    28e0:	5e015801 	cdppl	8, 0, cr5, cr1, cr1, {0}
    28e4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    28e8:	0000000b 	andeq	r0, r0, fp
    28ec:	000fb717 	andeq	fp, pc, r7, lsl r7	; <UNPREDICTABLE>
    28f0:	01630100 	cmneq	r3, r0, lsl #2
    28f4:	0000004c 	andeq	r0, r0, ip, asr #32
    28f8:	00000000 	andeq	r0, r0, r0
    28fc:	0000001a 	andeq	r0, r0, sl, lsl r0
    2900:	05279c01 	streq	r9, [r7, #-3073]!	; 0xc01
    2904:	22150000 	andscs	r0, r5, #0
    2908:	01000013 	tsteq	r0, r3, lsl r0
    290c:	005e0163 	subseq	r0, lr, r3, ror #2
    2910:	0b3f0000 	bleq	fc2918 <__Stack_Size+0xfc2518>
    2914:	17000000 	strne	r0, [r0, -r0]
    2918:	00001069 	andeq	r1, r0, r9, rrx
    291c:	4c016e01 	stcmi	14, cr6, [r1], {1}
    2920:	00000000 	andeq	r0, r0, r0
    2924:	1a000000 	bne	292c <__Stack_Size+0x252c>
    2928:	01000000 	mrseq	r0, (UNDEF: 0)
    292c:	0005529c 	muleq	r5, ip, r2
    2930:	13221500 	teqne	r2, #0, 10
    2934:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    2938:	00005e01 	andeq	r5, r0, r1, lsl #28
    293c:	000b6000 	andeq	r6, fp, r0
    2940:	a1140000 	tstge	r4, r0
    2944:	01000011 	tsteq	r0, r1, lsl r0
    2948:	00000179 	andeq	r0, r0, r9, ror r1
    294c:	00180000 	andseq	r0, r8, r0
    2950:	9c010000 	stcls	0, cr0, [r1], {-0}
    2954:	00000579 	andeq	r0, r0, r9, ror r5
    2958:	00132215 	andseq	r2, r3, r5, lsl r2
    295c:	01790100 	cmneq	r9, r0, lsl #2
    2960:	0000005e 	andeq	r0, r0, lr, asr r0
    2964:	00000b81 	andeq	r0, r0, r1, lsl #23
    2968:	12821400 	addne	r1, r2, #0, 8
    296c:	84010000 	strhi	r0, [r1], #-0
    2970:	00000001 	andeq	r0, r0, r1
    2974:	00001c00 	andeq	r1, r0, r0, lsl #24
    2978:	a09c0100 	addsge	r0, ip, r0, lsl #2
    297c:	15000005 	strne	r0, [r0, #-5]
    2980:	00001322 	andeq	r1, r0, r2, lsr #6
    2984:	5e018401 	cdppl	4, 0, cr8, cr1, cr1, {0}
    2988:	a2000000 	andge	r0, r0, #0
    298c:	0000000b 	andeq	r0, r0, fp
    2990:	0010a514 	andseq	sl, r0, r4, lsl r5
    2994:	018f0100 	orreq	r0, pc, r0, lsl #2
    2998:	00000000 	andeq	r0, r0, r0
    299c:	00000020 	andeq	r0, r0, r0, lsr #32
    29a0:	05c79c01 	strbeq	r9, [r7, #3073]	; 0xc01
    29a4:	22150000 	andscs	r0, r5, #0
    29a8:	01000013 	tsteq	r0, r3, lsl r0
    29ac:	005e018f 	subseq	r0, lr, pc, lsl #3
    29b0:	0bc30000 	bleq	ff0c29b8 <BootRAM+0xe033159>
    29b4:	14000000 	strne	r0, [r0], #-0
    29b8:	00001015 	andeq	r1, r0, r5, lsl r0
    29bc:	00019a01 	andeq	r9, r1, r1, lsl #20
    29c0:	20000000 	andcs	r0, r0, r0
    29c4:	01000000 	mrseq	r0, (UNDEF: 0)
    29c8:	0005ee9c 	muleq	r5, ip, lr
    29cc:	13221500 	teqne	r2, #0, 10
    29d0:	9a010000 	bls	429d8 <__Stack_Size+0x425d8>
    29d4:	00005e01 	andeq	r5, r0, r1, lsl #28
    29d8:	000be400 	andeq	lr, fp, r0, lsl #8
    29dc:	54140000 	ldrpl	r0, [r4], #-0
    29e0:	01000010 	tsteq	r0, r0, lsl r0
    29e4:	0d8c01a5 	stfeqs	f0, [ip, #660]	; 0x294
    29e8:	00200800 	eoreq	r0, r0, r0, lsl #16
    29ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    29f0:	00000615 	andeq	r0, r0, r5, lsl r6
    29f4:	00132215 	andseq	r2, r3, r5, lsl r2
    29f8:	01a50100 			; <UNDEFINED> instruction: 0x01a50100
    29fc:	0000005e 	andeq	r0, r0, lr, asr r0
    2a00:	00000c05 	andeq	r0, r0, r5, lsl #24
    2a04:	13071400 	movwne	r1, #29696	; 0x7400
    2a08:	b0010000 	andlt	r0, r1, r0
    2a0c:	000dac01 	andeq	sl, sp, r1, lsl #24
    2a10:	00002008 	andeq	r2, r0, r8
    2a14:	3c9c0100 	ldfccs	f0, [ip], {0}
    2a18:	15000006 	strne	r0, [r0, #-6]
    2a1c:	00001322 	andeq	r1, r0, r2, lsr #6
    2a20:	5e01b001 	cdppl	0, 0, cr11, cr1, cr1, {0}
    2a24:	26000000 	strcs	r0, [r0], -r0
    2a28:	0000000c 	andeq	r0, r0, ip
    2a2c:	00108a14 	andseq	r8, r0, r4, lsl sl
    2a30:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
    2a34:	00000000 	andeq	r0, r0, r0
    2a38:	0000001e 	andeq	r0, r0, lr, lsl r0
    2a3c:	06739c01 	ldrbteq	r9, [r3], -r1, lsl #24
    2a40:	22150000 	andscs	r0, r5, #0
    2a44:	01000013 	tsteq	r0, r3, lsl r0
    2a48:	005e01bc 	ldrheq	r0, [lr], #-28	; 0xffffffe4
    2a4c:	0c470000 	mareq	acc0, r0, r7
    2a50:	3d150000 	ldccc	0, cr0, [r5, #-0]
    2a54:	01000010 	tsteq	r0, r0, lsl r0
    2a58:	005e01bc 	ldrheq	r0, [lr], #-28	; 0xffffffe4
    2a5c:	0c680000 	stcleq	0, cr0, [r8], #-0
    2a60:	17000000 	strne	r0, [r0, -r0]
    2a64:	00001023 	andeq	r1, r0, r3, lsr #32
    2a68:	5e01c701 	cdppl	7, 0, cr12, cr1, cr1, {0}
    2a6c:	00000000 	andeq	r0, r0, r0
    2a70:	12000000 	andne	r0, r0, #0
    2a74:	01000000 	mrseq	r0, (UNDEF: 0)
    2a78:	00069e9c 	muleq	r6, ip, lr
    2a7c:	13221500 	teqne	r2, #0, 10
    2a80:	c7010000 	strgt	r0, [r1, -r0]
    2a84:	00005e01 	andeq	r5, r0, r1, lsl #28
    2a88:	000c8900 	andeq	r8, ip, r0, lsl #18
    2a8c:	68140000 	ldmdavs	r4, {}	; <UNPREDICTABLE>
    2a90:	01000011 	tsteq	r0, r1, lsl r0
    2a94:	000001d3 	ldrdeq	r0, [r0], -r3
    2a98:	00200000 	eoreq	r0, r0, r0
    2a9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2aa0:	000006d5 	ldrdeq	r0, [r0], -r5
    2aa4:	00132215 	andseq	r2, r3, r5, lsl r2
    2aa8:	01d30100 	bicseq	r0, r3, r0, lsl #2
    2aac:	0000005e 	andeq	r0, r0, lr, asr r0
    2ab0:	00000caa 	andeq	r0, r0, sl, lsr #25
    2ab4:	00120f15 	andseq	r0, r2, r5, lsl pc
    2ab8:	01d30100 	bicseq	r0, r3, r0, lsl #2
    2abc:	0000004c 	andeq	r0, r0, ip, asr #32
    2ac0:	00000ccb 	andeq	r0, r0, fp, asr #25
    2ac4:	13351400 	teqne	r5, #0, 8
    2ac8:	df010000 	svcle	0x00010000
    2acc:	00000001 	andeq	r0, r0, r1
    2ad0:	00002000 	andeq	r2, r0, r0
    2ad4:	0c9c0100 	ldfeqs	f0, [ip], {0}
    2ad8:	15000007 	strne	r0, [r0, #-7]
    2adc:	00001322 	andeq	r1, r0, r2, lsr #6
    2ae0:	5e01df01 	cdppl	15, 0, cr13, cr1, cr1, {0}
    2ae4:	ec000000 	stc	0, cr0, [r0], {-0}
    2ae8:	1500000c 	strne	r0, [r0, #-12]
    2aec:	0000120f 	andeq	r1, r0, pc, lsl #4
    2af0:	4c01df01 	stcmi	15, cr13, [r1], {1}
    2af4:	0d000000 	stceq	0, cr0, [r0, #-0]
    2af8:	0000000d 	andeq	r0, r0, sp
    2afc:	0012fb17 	andseq	pc, r2, r7, lsl fp	; <UNPREDICTABLE>
    2b00:	01ea0100 	mvneq	r0, r0, lsl #2
    2b04:	0000004c 	andeq	r0, r0, ip, asr #32
    2b08:	08000dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp}
    2b0c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2b10:	07379c01 	ldreq	r9, [r7, -r1, lsl #24]!
    2b14:	22150000 	andscs	r0, r5, #0
    2b18:	01000013 	tsteq	r0, r3, lsl r0
    2b1c:	005e01ea 	subseq	r0, lr, sl, ror #3
    2b20:	0d2e0000 	stceq	0, cr0, [lr, #-0]
    2b24:	17000000 	strne	r0, [r0, -r0]
    2b28:	000010de 	ldrdeq	r1, [r0], -lr
    2b2c:	4c01f501 	cfstr32mi	mvfx15, [r1], {1}
    2b30:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    2b34:	1c08000d 	stcne	0, cr0, [r8], {13}
    2b38:	01000000 	mrseq	r0, (UNDEF: 0)
    2b3c:	0007629c 	muleq	r7, ip, r2
    2b40:	13221500 	teqne	r2, #0, 10
    2b44:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    2b48:	00005e01 	andeq	r5, r0, r1, lsl #28
    2b4c:	000d4f00 	andeq	r4, sp, r0, lsl #30
    2b50:	cd140000 	ldcgt	0, cr0, [r4, #-0]
    2b54:	01000011 	tsteq	r0, r1, lsl r0
    2b58:	0e040201 	cdpeq	2, 0, cr0, cr4, cr1, {0}
    2b5c:	001c0800 	andseq	r0, ip, r0, lsl #16
    2b60:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b64:	00000797 	muleq	r0, r7, r7
    2b68:	00132215 	andseq	r2, r3, r5, lsl r2
    2b6c:	02010100 	andeq	r0, r1, #0, 2
    2b70:	0000005e 	andeq	r0, r0, lr, asr r0
    2b74:	00000d70 	andeq	r0, r0, r0, ror sp
    2b78:	00108318 	andseq	r8, r0, r8, lsl r3
    2b7c:	02010100 	andeq	r0, r1, #0, 2
    2b80:	0000004c 	andeq	r0, r0, ip, asr #32
    2b84:	14005101 	strne	r5, [r0], #-257	; 0x101
    2b88:	00001240 	andeq	r1, r0, r0, asr #4
    2b8c:	00020d01 	andeq	r0, r2, r1, lsl #26
    2b90:	26000000 	strcs	r0, [r0], -r0
    2b94:	01000000 	mrseq	r0, (UNDEF: 0)
    2b98:	0007e69c 	muleq	r7, ip, r6
    2b9c:	12301800 	eorsne	r1, r0, #0, 16
    2ba0:	0d010000 	stceq	0, cr0, [r1, #-0]
    2ba4:	0007e602 	andeq	lr, r7, r2, lsl #12
    2ba8:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    2bac:	00001083 	andeq	r1, r0, r3, lsl #1
    2bb0:	4c020d01 	stcmi	13, cr0, [r2], {1}
    2bb4:	91000000 	mrsls	r0, (UNDEF: 0)
    2bb8:	1000000d 	andne	r0, r0, sp
    2bbc:	00000000 	andeq	r0, r0, r0
    2bc0:	00000026 	andeq	r0, r0, r6, lsr #32
    2bc4:	00104b16 	andseq	r4, r0, r6, lsl fp
    2bc8:	020f0100 	andeq	r0, pc, #0, 2
    2bcc:	0000004c 	andeq	r0, r0, ip, asr #32
    2bd0:	00000dcb 	andeq	r0, r0, fp, asr #27
    2bd4:	04190000 	ldreq	r0, [r9], #-0
    2bd8:	0000003a 	andeq	r0, r0, sl, lsr r0
    2bdc:	0007bd14 	andeq	fp, r7, r4, lsl sp
    2be0:	02190100 	andseq	r0, r9, #0, 2
    2be4:	08000e20 	stmdaeq	r0, {r5, r9, sl, fp}
    2be8:	00000040 	andeq	r0, r0, r0, asr #32
    2bec:	08519c01 	ldmdaeq	r1, {r0, sl, fp, ip, pc}^
    2bf0:	22150000 	andscs	r0, r5, #0
    2bf4:	01000013 	tsteq	r0, r3, lsl r0
    2bf8:	005e0219 	subseq	r0, lr, r9, lsl r2
    2bfc:	0df40000 	ldcleq	0, cr0, [r4]
    2c00:	83150000 	tsthi	r5, #0
    2c04:	01000010 	tsteq	r0, r0, lsl r0
    2c08:	004c0219 	subeq	r0, ip, r9, lsl r2
    2c0c:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    2c10:	20100000 	andscs	r0, r0, r0
    2c14:	4008000e 	andmi	r0, r8, lr
    2c18:	1a000000 	bne	2c20 <__Stack_Size+0x2820>
    2c1c:	00001230 	andeq	r1, r0, r0, lsr r2
    2c20:	e6021b01 	str	r1, [r2], -r1, lsl #22
    2c24:	01000007 	tsteq	r0, r7
    2c28:	02a01b52 	adceq	r1, r0, #83968	; 0x14800
    2c2c:	4b160000 	blmi	582c34 <__Stack_Size+0x582834>
    2c30:	01000010 	tsteq	r0, r0, lsl r0
    2c34:	004c021b 	subeq	r0, ip, fp, lsl r2
    2c38:	0e360000 	cdpeq	0, 3, cr0, cr6, cr0, {0}
    2c3c:	00000000 	andeq	r0, r0, r0
    2c40:	12751700 	rsbsne	r1, r5, #0, 14
    2c44:	24010000 	strcs	r0, [r1], #-0
    2c48:	00004c02 	andeq	r4, r0, r2, lsl #24
    2c4c:	00000000 	andeq	r0, r0, r0
    2c50:	00002000 	andeq	r2, r0, r0
    2c54:	7c9c0100 	ldfvcs	f0, [ip], {0}
    2c58:	15000008 	strne	r0, [r0, #-8]
    2c5c:	00001322 	andeq	r1, r0, r2, lsr #6
    2c60:	5e022401 	cdppl	4, 0, cr2, cr2, cr1, {0}
    2c64:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    2c68:	0000000e 	andeq	r0, r0, lr
    2c6c:	00125017 	andseq	r5, r2, r7, lsl r0
    2c70:	022f0100 	eoreq	r0, pc, #0, 2
    2c74:	0000004c 	andeq	r0, r0, ip, asr #32
    2c78:	00000000 	andeq	r0, r0, r0
    2c7c:	00000020 	andeq	r0, r0, r0, lsr #32
    2c80:	08a79c01 	stmiaeq	r7!, {r0, sl, fp, ip, pc}
    2c84:	22150000 	andscs	r0, r5, #0
    2c88:	01000013 	tsteq	r0, r3, lsl r0
    2c8c:	005e022f 	subseq	r0, lr, pc, lsr #4
    2c90:	0e8f0000 	cdpeq	0, 8, cr0, cr15, cr0, {0}
    2c94:	14000000 	strne	r0, [r0], #-0
    2c98:	000010b3 	strheq	r1, [r0], -r3
    2c9c:	00023c01 	andeq	r3, r2, r1, lsl #24
    2ca0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2ca4:	01000000 	mrseq	r0, (UNDEF: 0)
    2ca8:	0008ee9c 	muleq	r8, ip, lr
    2cac:	13221500 	teqne	r2, #0, 10
    2cb0:	3c010000 	stccc	0, cr0, [r1], {-0}
    2cb4:	00005e02 	andeq	r5, r0, r2, lsl #28
    2cb8:	000eb000 	andeq	fp, lr, r0
    2cbc:	12b51500 	adcsne	r1, r5, #0, 10
    2cc0:	3c010000 	stccc	0, cr0, [r1], {-0}
    2cc4:	00004c02 	andeq	r4, r0, r2, lsl #24
    2cc8:	000ed100 	andeq	sp, lr, r0, lsl #2
    2ccc:	11421500 	cmpne	r2, r0, lsl #10
    2cd0:	3c010000 	stccc	0, cr0, [r1], {-0}
    2cd4:	00004c02 	andeq	r4, r0, r2, lsl #24
    2cd8:	000ef200 	andeq	pc, lr, r0, lsl #4
    2cdc:	ea140000 	b	502ce4 <__Stack_Size+0x5028e4>
    2ce0:	01000010 	tsteq	r0, r0, lsl r0
    2ce4:	00000248 	andeq	r0, r0, r8, asr #4
    2ce8:	00200000 	eoreq	r0, r0, r0
    2cec:	9c010000 	stcls	0, cr0, [r1], {-0}
    2cf0:	00000925 	andeq	r0, r0, r5, lsr #18
    2cf4:	00132215 	andseq	r2, r3, r5, lsl r2
    2cf8:	02480100 	subeq	r0, r8, #0, 2
    2cfc:	0000005e 	andeq	r0, r0, lr, asr r0
    2d00:	00000f13 	andeq	r0, r0, r3, lsl pc
    2d04:	0012b515 	andseq	fp, r2, r5, lsl r5
    2d08:	02480100 	subeq	r0, r8, #0, 2
    2d0c:	0000004c 	andeq	r0, r0, ip, asr #32
    2d10:	00000f34 	andeq	r0, r0, r4, lsr pc
    2d14:	0fc81400 	svceq	0x00c81400
    2d18:	54010000 	strpl	r0, [r1], #-0
    2d1c:	00000002 	andeq	r0, r0, r2
    2d20:	00002000 	andeq	r2, r0, r0
    2d24:	5c9c0100 	ldfpls	f0, [ip], {0}
    2d28:	15000009 	strne	r0, [r0, #-9]
    2d2c:	00001322 	andeq	r1, r0, r2, lsr #6
    2d30:	5e025401 	cdppl	4, 0, cr5, cr2, cr1, {0}
    2d34:	55000000 	strpl	r0, [r0, #-0]
    2d38:	1500000f 	strne	r0, [r0, #-15]
    2d3c:	00001142 	andeq	r1, r0, r2, asr #2
    2d40:	4c025401 	cfstrsmi	mvf5, [r2], {1}
    2d44:	76000000 	strvc	r0, [r0], -r0
    2d48:	0000000f 	andeq	r0, r0, pc
    2d4c:	0012d517 	andseq	sp, r2, r7, lsl r5
    2d50:	025f0100 	subseq	r0, pc, #0, 2
    2d54:	0000004c 	andeq	r0, r0, ip, asr #32
    2d58:	00000000 	andeq	r0, r0, r0
    2d5c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2d60:	09879c01 	stmibeq	r7, {r0, sl, fp, ip, pc}
    2d64:	22150000 	andscs	r0, r5, #0
    2d68:	01000013 	tsteq	r0, r3, lsl r0
    2d6c:	005e025f 	subseq	r0, lr, pc, asr r2
    2d70:	0f970000 	svceq	0x00970000
    2d74:	17000000 	strne	r0, [r0, -r0]
    2d78:	00001186 	andeq	r1, r0, r6, lsl #3
    2d7c:	4c026a01 	stcmi	10, cr6, [r2], {1}
    2d80:	00000000 	andeq	r0, r0, r0
    2d84:	1c000000 	stcne	0, cr0, [r0], {-0}
    2d88:	01000000 	mrseq	r0, (UNDEF: 0)
    2d8c:	0009b29c 	muleq	r9, ip, r2
    2d90:	13221500 	teqne	r2, #0, 10
    2d94:	6a010000 	bvs	42d9c <__Stack_Size+0x4299c>
    2d98:	00005e02 	andeq	r5, r0, r2, lsl #28
    2d9c:	000fb800 	andeq	fp, pc, r0, lsl #16
    2da0:	b0140000 	andslt	r0, r4, r0
    2da4:	01000011 	tsteq	r0, r1, lsl r0
    2da8:	00000276 	andeq	r0, r0, r6, ror r2
    2dac:	00a80000 	adceq	r0, r8, r0
    2db0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2db4:	00000a59 	andeq	r0, r0, r9, asr sl
    2db8:	00132215 	andseq	r2, r3, r5, lsl r2
    2dbc:	02760100 	rsbseq	r0, r6, #0, 2
    2dc0:	0000005e 	andeq	r0, r0, lr, asr r0
    2dc4:	00000fd9 	ldrdeq	r0, [r0], -r9
    2dc8:	00110915 	andseq	r0, r1, r5, lsl r9
    2dcc:	02760100 	rsbseq	r0, r6, #0, 2
    2dd0:	0000005e 	andeq	r0, r0, lr, asr r0
    2dd4:	0000101e 	andeq	r1, r0, lr, lsl r0
    2dd8:	00108315 	andseq	r8, r0, r5, lsl r3
    2ddc:	02760100 	rsbseq	r0, r6, #0, 2
    2de0:	0000004c 	andeq	r0, r0, ip, asr #32
    2de4:	00001063 	andeq	r1, r0, r3, rrx
    2de8:	0000001c 	andeq	r0, r0, ip, lsl r0
    2dec:	00003a00 	andeq	r3, r0, r0, lsl #20
    2df0:	000a2c00 	andeq	r2, sl, r0, lsl #24
    2df4:	12301600 	eorsne	r1, r0, #0, 12
    2df8:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2dfc:	0007e602 	andeq	lr, r7, r2, lsl #12
    2e00:	00108f00 	andseq	r8, r0, r0, lsl #30
    2e04:	02b81b00 	adcseq	r1, r8, #0, 22
    2e08:	4b160000 	blmi	582e10 <__Stack_Size+0x582a10>
    2e0c:	01000010 	tsteq	r0, r0, lsl r0
    2e10:	004c0278 	subeq	r0, ip, r8, ror r2
    2e14:	10ad0000 	adcne	r0, sp, r0
    2e18:	00000000 	andeq	r0, r0, r0
    2e1c:	0002d01b 	andeq	sp, r2, fp, lsl r0
    2e20:	12301600 	eorsne	r1, r0, #0, 12
    2e24:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2e28:	0007e602 	andeq	lr, r7, r2, lsl #12
    2e2c:	0010e500 	andseq	lr, r0, r0, lsl #10
    2e30:	02e81b00 	rsceq	r1, r8, #0, 22
    2e34:	4b160000 	blmi	582e3c <__Stack_Size+0x582a3c>
    2e38:	01000010 	tsteq	r0, r0, lsl r0
    2e3c:	004c0278 	subeq	r0, ip, r8, ror r2
    2e40:	11030000 	mrsne	r0, (UNDEF: 3)
    2e44:	00000000 	andeq	r0, r0, r0
    2e48:	12a31400 	adcne	r1, r3, #0, 8
    2e4c:	82010000 	andhi	r0, r1, #0
    2e50:	00000002 	andeq	r0, r0, r2
    2e54:	00005c00 	andeq	r5, r0, r0, lsl #24
    2e58:	d09c0100 	addsle	r0, ip, r0, lsl #2
    2e5c:	1500000a 	strne	r0, [r0, #-10]
    2e60:	00001322 	andeq	r1, r0, r2, lsr #6
    2e64:	5e028201 	cdppl	2, 0, cr8, cr2, cr1, {0}
    2e68:	3b000000 	blcc	2e70 <__Stack_Size+0x2a70>
    2e6c:	15000011 	strne	r0, [r0, #-17]
    2e70:	00001109 	andeq	r1, r0, r9, lsl #2
    2e74:	5e028201 	cdppl	2, 0, cr8, cr2, cr1, {0}
    2e78:	75000000 	strvc	r0, [r0, #-0]
    2e7c:	15000011 	strne	r0, [r0, #-17]
    2e80:	00001083 	andeq	r1, r0, r3, lsl #1
    2e84:	4c028201 	sfmmi	f0, 1, [r2], {1}
    2e88:	a1000000 	mrsge	r0, (UNDEF: 0)
    2e8c:	10000011 	andne	r0, r0, r1, lsl r0
    2e90:	00000000 	andeq	r0, r0, r0
    2e94:	00000038 	andeq	r0, r0, r8, lsr r0
    2e98:	00123016 	andseq	r3, r2, r6, lsl r0
    2e9c:	02840100 	addeq	r0, r4, #0, 2
    2ea0:	000007e6 	andeq	r0, r0, r6, ror #15
    2ea4:	000011cd 	andeq	r1, r0, sp, asr #3
    2ea8:	0003081b 	andeq	r0, r3, fp, lsl r8
    2eac:	104b1600 	subne	r1, fp, r0, lsl #12
    2eb0:	84010000 	strhi	r0, [r1], #-0
    2eb4:	00004c02 	andeq	r4, r0, r2, lsl #24
    2eb8:	0011e000 	andseq	lr, r1, r0
    2ebc:	00000000 	andeq	r0, r0, r0
    2ec0:	00134114 	andseq	r4, r3, r4, lsl r1
    2ec4:	028e0100 	addeq	r0, lr, #0, 2
    2ec8:	00000000 	andeq	r0, r0, r0
    2ecc:	0000005c 	andeq	r0, r0, ip, asr r0
    2ed0:	0b479c01 	bleq	11e9edc <__Stack_Size+0x11e9adc>
    2ed4:	22150000 	andscs	r0, r5, #0
    2ed8:	01000013 	tsteq	r0, r3, lsl r0
    2edc:	005e028e 	subseq	r0, lr, lr, lsl #5
    2ee0:	12180000 	andsne	r0, r8, #0
    2ee4:	09150000 	ldmdbeq	r5, {}	; <UNPREDICTABLE>
    2ee8:	01000011 	tsteq	r0, r1, lsl r0
    2eec:	005e028e 	subseq	r0, lr, lr, lsl #5
    2ef0:	12520000 	subsne	r0, r2, #0
    2ef4:	83150000 	tsthi	r5, #0
    2ef8:	01000010 	tsteq	r0, r0, lsl r0
    2efc:	004c028e 	subeq	r0, ip, lr, lsl #5
    2f00:	127e0000 	rsbsne	r0, lr, #0
    2f04:	00100000 	andseq	r0, r0, r0
    2f08:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2f0c:	16000000 	strne	r0, [r0], -r0
    2f10:	00001230 	andeq	r1, r0, r0, lsr r2
    2f14:	e6029001 	str	r9, [r2], -r1
    2f18:	aa000007 	bge	2f3c <__Stack_Size+0x2b3c>
    2f1c:	1b000012 	blne	2f6c <__Stack_Size+0x2b6c>
    2f20:	00000320 	andeq	r0, r0, r0, lsr #6
    2f24:	00104b16 	andseq	r4, r0, r6, lsl fp
    2f28:	02900100 	addseq	r0, r0, #0, 2
    2f2c:	0000004c 	andeq	r0, r0, ip, asr #32
    2f30:	000012bd 			; <UNDEFINED> instruction: 0x000012bd
    2f34:	17000000 	strne	r0, [r0, -r0]
    2f38:	00001215 	andeq	r1, r0, r5, lsl r2
    2f3c:	4c029a01 	stcmi	10, cr9, [r2], {1}
    2f40:	00000000 	andeq	r0, r0, r0
    2f44:	20000000 	andcs	r0, r0, r0
    2f48:	01000000 	mrseq	r0, (UNDEF: 0)
    2f4c:	000b729c 	muleq	fp, ip, r2
    2f50:	13221500 	teqne	r2, #0, 10
    2f54:	9a010000 	bls	42f5c <__Stack_Size+0x42b5c>
    2f58:	00005e02 	andeq	r5, r0, r2, lsl #28
    2f5c:	0012f500 	andseq	pc, r2, r0, lsl #10
    2f60:	91170000 	tstls	r7, r0
    2f64:	01000012 	tsteq	r0, r2, lsl r0
    2f68:	004c02a6 	subeq	r0, ip, r6, lsr #5
    2f6c:	00000000 	andeq	r0, r0, r0
    2f70:	00200000 	eoreq	r0, r0, r0
    2f74:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f78:	00000b9d 	muleq	r0, sp, fp
    2f7c:	00132215 	andseq	r2, r3, r5, lsl r2
    2f80:	02a60100 	adceq	r0, r6, #0, 2
    2f84:	0000005e 	andeq	r0, r0, lr, asr r0
    2f88:	00001316 	andeq	r1, r0, r6, lsl r3
    2f8c:	11331700 	teqne	r3, r0, lsl #14
    2f90:	b2010000 	andlt	r0, r1, #0
    2f94:	00008e02 	andeq	r8, r0, r2, lsl #28
    2f98:	00000000 	andeq	r0, r0, r0
    2f9c:	00004400 	andeq	r4, r0, r0, lsl #8
    2fa0:	c89c0100 	ldmgt	ip, {r8}
    2fa4:	1500000b 	strne	r0, [r0, #-11]
    2fa8:	00001322 	andeq	r1, r0, r2, lsr #6
    2fac:	5e02b201 	cdppl	2, 0, cr11, cr2, cr1, {0}
    2fb0:	37000000 	strcc	r0, [r0, -r0]
    2fb4:	00000013 	andeq	r0, r0, r3, lsl r0
    2fb8:	000fa814 	andeq	sl, pc, r4, lsl r8	; <UNPREDICTABLE>
    2fbc:	02c30100 	sbceq	r0, r3, #0, 2
    2fc0:	00000000 	andeq	r0, r0, r0
    2fc4:	0000003a 	andeq	r0, r0, sl, lsr r0
    2fc8:	0bfd9c01 	bleq	fff69fd4 <BootRAM+0xeeda775>
    2fcc:	22150000 	andscs	r0, r5, #0
    2fd0:	01000013 	tsteq	r0, r3, lsl r0
    2fd4:	005e02c3 	subseq	r0, lr, r3, asr #5
    2fd8:	13580000 	cmpne	r8, #0
    2fdc:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
    2fe0:	01000011 	tsteq	r0, r1, lsl r0
    2fe4:	005e02c3 	subseq	r0, lr, r3, asr #5
    2fe8:	51010000 	mrspl	r0, (UNDEF: 1)
    2fec:	11611700 	cmnne	r1, r0, lsl #14
    2ff0:	d6010000 	strle	r0, [r1], -r0
    2ff4:	00004c02 	andeq	r4, r0, r2, lsl #24
    2ff8:	00000000 	andeq	r0, r0, r0
    2ffc:	00000600 	andeq	r0, r0, r0, lsl #12
    3000:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    3004:	1d00000c 	stcne	0, cr0, [r0, #-48]	; 0xffffffd0
    3008:	01006862 	tsteq	r0, r2, ror #16
    300c:	005e02d6 	ldrsbeq	r0, [lr], #-38	; 0xffffffda
    3010:	13920000 	orrsne	r0, r2, #0
    3014:	621e0000 	andsvs	r0, lr, #0
    3018:	d601006c 	strle	r0, [r1], -ip, rrx
    301c:	00005e02 	andeq	r5, r0, r2, lsl #28
    3020:	16510100 	ldrbne	r0, [r1], -r0, lsl #2
    3024:	000010d9 	ldrdeq	r1, [r0], -r9
    3028:	4c02d801 	stcmi	8, cr13, [r2], {1}
    302c:	b3000000 	movwlt	r0, #0
    3030:	00000013 	andeq	r0, r0, r3, lsl r0
    3034:	0012371f 	andseq	r3, r2, pc, lsl r7
    3038:	02e30100 	rsceq	r0, r3, #0, 2
    303c:	0000004c 	andeq	r0, r0, ip, asr #32
    3040:	00000000 	andeq	r0, r0, r0
    3044:	0000000a 	andeq	r0, r0, sl
    3048:	4c159c01 	ldcmi	12, cr9, [r5], {1}
    304c:	01000011 	tsteq	r0, r1, lsl r0
    3050:	004c02e3 	subeq	r0, ip, r3, ror #5
    3054:	13ec0000 	mvnne	r0, #0
    3058:	5d160000 	ldcpl	0, cr0, [r6, #-0]
    305c:	01000012 	tsteq	r0, r2, lsl r0
    3060:	005e02e5 	subseq	r0, lr, r5, ror #5
    3064:	140d0000 	strne	r0, [sp], #-0
    3068:	d9160000 	ldmdble	r6, {}	; <UNPREDICTABLE>
    306c:	01000010 	tsteq	r0, r0, lsl r0
    3070:	004c02e6 	subeq	r0, ip, r6, ror #5
    3074:	14200000 	strtne	r0, [r0], #-0
    3078:	00000000 	andeq	r0, r0, r0
    307c:	000001d8 	ldrdeq	r0, [r0], -r8
    3080:	0e720004 	cdpeq	0, 7, cr0, cr2, cr4, {0}
    3084:	01040000 	mrseq	r0, (UNDEF: 4)
    3088:	0000017e 	andeq	r0, r0, lr, ror r1
    308c:	00138601 	andseq	r8, r3, r1, lsl #12
    3090:	00003200 	andeq	r3, r0, r0, lsl #4
    3094:	00051800 	andeq	r1, r5, r0, lsl #16
    3098:	00000000 	andeq	r0, r0, r0
    309c:	000f8500 	andeq	r8, pc, r0, lsl #10
    30a0:	05040200 	streq	r0, [r4, #-512]	; 0x200
    30a4:	0000021c 	andeq	r0, r0, ip, lsl r2
    30a8:	c8050202 	stmdagt	r5, {r1, r9}
    30ac:	02000006 	andeq	r0, r0, #6
    30b0:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
    30b4:	75030000 	strvc	r0, [r3, #-0]
    30b8:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    30bc:	00004524 	andeq	r4, r0, r4, lsr #10
    30c0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    30c4:	000003a1 	andeq	r0, r0, r1, lsr #7
    30c8:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    30cc:	57250200 	strpl	r0, [r5, -r0, lsl #4]!
    30d0:	02000000 	andeq	r0, r0, #0
    30d4:	03fd0702 	mvnseq	r0, #524288	; 0x80000
    30d8:	75030000 	strvc	r0, [r3, #-0]
    30dc:	26020038 			; <UNDEFINED> instruction: 0x26020038
    30e0:	00000068 	andeq	r0, r0, r8, rrx
    30e4:	72080102 	andvc	r0, r8, #-2147483648	; 0x80000000
    30e8:	04000006 	streq	r0, [r0], #-6
    30ec:	006f0405 	rsbeq	r0, pc, r5, lsl #8
    30f0:	b3060000 	movwlt	r0, #24576	; 0x6000
    30f4:	01000003 	tsteq	r0, r3
    30f8:	000e6029 	andeq	r6, lr, r9, lsr #32
    30fc:	00015408 	andeq	r5, r1, r8, lsl #8
    3100:	2a9c0100 	bcs	fe703508 <BootRAM+0xd673ca9>
    3104:	07000001 	streq	r0, [r0, -r1]
    3108:	0000137f 	andeq	r1, r0, pc, ror r3
    310c:	003a2b01 	eorseq	r2, sl, r1, lsl #22
    3110:	143f0000 	ldrtne	r0, [pc], #-0	; 3118 <__Stack_Size+0x2d18>
    3114:	9c080000 	stcls	0, cr0, [r8], {-0}
    3118:	1208000e 	andne	r0, r8, #14
    311c:	b7000000 	strlt	r0, [r0, -r0]
    3120:	07000000 	streq	r0, [r0, -r0]
    3124:	00000481 	andeq	r0, r0, r1, lsl #9
    3128:	004c3c01 	subeq	r3, ip, r1, lsl #24
    312c:	14af0000 	strtne	r0, [pc], #0	; 3134 <__Stack_Size+0x2d34>
    3130:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3134:	08000eae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sl, fp}
    3138:	00000012 	andeq	r0, r0, r2, lsl r0
    313c:	000000d4 	ldrdeq	r0, [r0], -r4
    3140:	00048107 	andeq	r8, r4, r7, lsl #2
    3144:	4c3d0100 	ldfmis	f0, [sp], #-0
    3148:	f3000000 	vhadd.u8	d0, d0, d0
    314c:	00000014 	andeq	r0, r0, r4, lsl r0
    3150:	000f0208 	andeq	r0, pc, r8, lsl #4
    3154:	00002208 	andeq	r2, r0, r8, lsl #4
    3158:	0000f100 	andeq	pc, r0, r0, lsl #2
    315c:	04810700 	streq	r0, [r1], #1792	; 0x700
    3160:	72010000 	andvc	r0, r1, #0
    3164:	0000004c 	andeq	r0, r0, ip, asr #32
    3168:	0000156d 	andeq	r1, r0, sp, ror #10
    316c:	0f240800 	svceq	0x00240800
    3170:	00200800 	eoreq	r0, r0, r0, lsl #16
    3174:	010e0000 	mrseq	r0, (UNDEF: 14)
    3178:	81070000 	mrshi	r0, (UNDEF: 7)
    317c:	01000004 	tsteq	r0, r4
    3180:	00004c73 	andeq	r4, r0, r3, ror ip
    3184:	00158e00 	andseq	r8, r5, r0, lsl #28
    3188:	da090000 	ble	243190 <__Stack_Size+0x242d90>
    318c:	ba08000e 	blt	2031cc <__Stack_Size+0x202dcc>
    3190:	09000001 	stmdbeq	r0, {r0}
    3194:	08000eee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, sl, fp}
    3198:	000001c5 	andeq	r0, r0, r5, asr #3
    319c:	000f0209 	andeq	r0, pc, r9, lsl #4
    31a0:	0001d008 	andeq	sp, r1, r8
    31a4:	53060000 	movwpl	r0, #24576	; 0x6000
    31a8:	01000013 	tsteq	r0, r3, lsl r0
    31ac:	0000009e 	muleq	r0, lr, r0
    31b0:	00007000 	andeq	r7, r0, r0
    31b4:	4f9c0100 	svcmi	0x009c0100
    31b8:	07000001 	streq	r0, [r0, -r1]
    31bc:	0000137f 	andeq	r1, r0, pc, ror r3
    31c0:	003aa001 	eorseq	sl, sl, r1
    31c4:	15a10000 	strne	r0, [r1, #0]!
    31c8:	0a000000 	beq	31d0 <__Stack_Size+0x2dd0>
    31cc:	00000256 	andeq	r0, r0, r6, asr r2
    31d0:	5b022a03 	blpl	8d9e4 <__Stack_Size+0x8d5e4>
    31d4:	0b000001 	bleq	31e0 <__Stack_Size+0x2de0>
    31d8:	0000004c 	andeq	r0, r0, ip, asr #32
    31dc:	0013690c 	andseq	r6, r3, ip, lsl #18
    31e0:	4c170100 	ldfmis	f0, [r7], {-0}
    31e4:	05000000 	streq	r0, [r0, #-0]
    31e8:	0001ca03 	andeq	ip, r1, r3, lsl #20
    31ec:	13740c20 	cmnne	r4, #32, 24	; 0x2000
    31f0:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    31f4:	0000004c 	andeq	r0, r0, ip, asr #32
    31f8:	01cc0305 	biceq	r0, ip, r5, lsl #6
    31fc:	b10d2000 	mrslt	r2, (UNDEF: 13)
    3200:	04000013 	streq	r0, [r0], #-19
    3204:	00005e1d 	andeq	r5, r0, sp, lsl lr
    3208:	00700e00 	rsbseq	r0, r0, r0, lsl #28
    320c:	019d0000 	orrseq	r0, sp, r0
    3210:	9d0f0000 	stcls	0, cr0, [pc, #-0]	; 3218 <__Stack_Size+0x2e18>
    3214:	06000001 	streq	r0, [r0], -r1
    3218:	07040200 	streq	r0, [r4, -r0, lsl #4]
    321c:	00000545 	andeq	r0, r0, r5, asr #10
    3220:	0004b60d 	andeq	fp, r4, sp, lsl #12
    3224:	8d1b0100 	ldfhis	f0, [fp, #-0]
    3228:	0d000001 	stceq	0, cr0, [r0, #-4]
    322c:	0000080f 	andeq	r0, r0, pc, lsl #16
    3230:	018d1c01 	orreq	r1, sp, r1, lsl #24
    3234:	98100000 	ldmdals	r0, {}	; <UNPREDICTABLE>
    3238:	05000013 	streq	r0, [r0, #-19]
    323c:	00005edc 	ldrdeq	r5, [r0], -ip
    3240:	135a1000 	cmpne	sl, #0
    3244:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
    3248:	0000005e 	andeq	r0, r0, lr, asr r0
    324c:	0013a410 	andseq	sl, r3, r0, lsl r4
    3250:	5edb0500 	cdppl	5, 13, cr0, cr11, cr0, {0}
    3254:	00000000 	andeq	r0, r0, r0
    3258:	000003f9 	strdeq	r0, [r0], -r9
    325c:	0f4c0004 	svceq	0x004c0004
    3260:	01040000 	mrseq	r0, (UNDEF: 4)
    3264:	0000017e 	andeq	r0, r0, lr, ror r1
    3268:	0013c301 	andseq	ip, r3, r1, lsl #6
    326c:	00003200 	andeq	r3, r0, r0, lsl #4
    3270:	00053000 	andeq	r3, r5, r0
    3274:	00000000 	andeq	r0, r0, r0
    3278:	00103d00 	andseq	r3, r0, r0, lsl #26
    327c:	05040200 	streq	r0, [r4, #-512]	; 0x200
    3280:	0000021c 	andeq	r0, r0, ip, lsl r2
    3284:	c8050202 	stmdagt	r5, {r1, r9}
    3288:	02000006 	andeq	r0, r0, #6
    328c:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
    3290:	04020000 	streq	r0, [r2], #-0
    3294:	0003a107 	andeq	sl, r3, r7, lsl #2
    3298:	31750300 	cmncc	r5, r0, lsl #6
    329c:	25020036 	strcs	r0, [r2, #-54]	; 0x36
    32a0:	0000004c 	andeq	r0, r0, ip, asr #32
    32a4:	fd070202 	stc2	2, cr0, [r7, #-8]
    32a8:	03000003 	movweq	r0, #3
    32ac:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    32b0:	00005d26 	andeq	r5, r0, r6, lsr #26
    32b4:	08010200 	stmdaeq	r1, {r9}
    32b8:	00000672 	andeq	r0, r0, r2, ror r6
    32bc:	00530404 	subseq	r0, r3, r4, lsl #8
    32c0:	65050000 	strvs	r0, [r5, #-0]
    32c4:	01000007 	tsteq	r0, r7
    32c8:	008f2d03 	addeq	r2, pc, r3, lsl #26
    32cc:	f6060000 			; <UNDEFINED> instruction: 0xf6060000
    32d0:	00000008 	andeq	r0, r0, r8
    32d4:	00041006 	andeq	r1, r4, r6
    32d8:	a4060100 	strge	r0, [r6], #-256	; 0x100
    32dc:	02000007 	andeq	r0, r0, #7
    32e0:	00024806 	andeq	r4, r2, r6, lsl #16
    32e4:	07000300 	streq	r0, [r0, -r0, lsl #6]
    32e8:	00000766 	andeq	r0, r0, r6, ror #14
    32ec:	006a3403 	rsbeq	r3, sl, r3, lsl #8
    32f0:	1b080000 	blne	2032f8 <__Stack_Size+0x202ef8>
    32f4:	0c000009 	stceq	0, cr0, [r0], {9}
    32f8:	00d73803 	sbcseq	r3, r7, r3, lsl #16
    32fc:	b6090000 	strlt	r0, [r9], -r0
    3300:	03000002 	movweq	r0, #2
    3304:	00004150 	andeq	r4, r0, r0, asr r1
    3308:	3f090000 	svccc	0x00090000
    330c:	03000003 	movweq	r0, #3
    3310:	00004151 	andeq	r4, r0, r1, asr r1
    3314:	8f090200 	svchi	0x00090200
    3318:	03000015 	movweq	r0, #21
    331c:	00004152 	andeq	r4, r0, r2, asr r1
    3320:	09090400 	stmdbeq	r9, {sl}
    3324:	03000001 	movweq	r0, #1
    3328:	0000e653 	andeq	lr, r0, r3, asr r6
    332c:	0a000800 	beq	5334 <__Stack_Size+0x4f34>
    3330:	00000064 	andeq	r0, r0, r4, rrx
    3334:	000000e6 	andeq	r0, r0, r6, ror #1
    3338:	0000410b 	andeq	r4, r0, fp, lsl #2
    333c:	04040000 	streq	r0, [r4], #-0
    3340:	000000d7 	ldrdeq	r0, [r0], -r7
    3344:	00091c07 	andeq	r1, r9, r7, lsl #24
    3348:	9a540300 	bls	1503f50 <__Stack_Size+0x1503b50>
    334c:	0c000000 	stceq	0, cr0, [r0], {-0}
    3350:	02005742 	andeq	r5, r0, #17301504	; 0x1080000
    3354:	011b6203 	tsteq	fp, r3, lsl #4
    3358:	620d0000 	andvs	r0, sp, #0
    335c:	03003062 	movweq	r3, #98	; 0x62
    3360:	00005365 	andeq	r5, r0, r5, ror #6
    3364:	620d0000 	andvs	r0, sp, #0
    3368:	03003162 	movweq	r3, #354	; 0x162
    336c:	00005366 	andeq	r5, r0, r6, ror #6
    3370:	0e000100 	adfeqs	f0, f0, f0
    3374:	375f0302 	ldrbcc	r0, [pc, -r2, lsl #6]
    3378:	0f000001 	svceq	0x00000001
    337c:	61030077 	tstvs	r3, r7, ror r0
    3380:	00000041 	andeq	r0, r0, r1, asr #32
    3384:	0077620f 	rsbseq	r6, r7, pc, lsl #4
    3388:	00f76803 	rscseq	r6, r7, r3, lsl #16
    338c:	07000000 	streq	r0, [r0, -r0]
    3390:	00000425 	andeq	r0, r0, r5, lsr #8
    3394:	011b6903 	tsteq	fp, r3, lsl #18
    3398:	62080000 	andvs	r0, r8, #0
    339c:	1c000000 	stcne	0, cr0, [r0], {-0}
    33a0:	01d36b03 	bicseq	r6, r3, r3, lsl #22
    33a4:	80090000 	andhi	r0, r9, r0
    33a8:	03000005 	movweq	r0, #5
    33ac:	0000536d 	andeq	r5, r0, sp, ror #6
    33b0:	3c090000 	stccc	0, cr0, [r9], {-0}
    33b4:	03000002 	movweq	r0, #2
    33b8:	0000536e 	andeq	r5, r0, lr, ror #6
    33bc:	3e090100 	adfcce	f0, f1, f0
    33c0:	03000004 	movweq	r0, #4
    33c4:	0001376f 	andeq	r3, r1, pc, ror #14
    33c8:	6e090200 	cdpvs	2, 0, cr0, cr9, cr0, {0}
    33cc:	03000001 	movweq	r0, #1
    33d0:	00013770 	andeq	r3, r1, r0, ror r7
    33d4:	3d090400 	cfstrscc	mvf0, [r9, #-0]
    33d8:	03000008 	movweq	r0, #8
    33dc:	00013771 	andeq	r3, r1, r1, ror r7
    33e0:	49090600 	stmdbmi	r9, {r9, sl}
    33e4:	03000009 	movweq	r0, #9
    33e8:	00005373 	andeq	r5, r0, r3, ror r3
    33ec:	c6090800 	strgt	r0, [r9], -r0, lsl #16
    33f0:	03000003 	movweq	r0, #3
    33f4:	00005374 	andeq	r5, r0, r4, ror r3
    33f8:	d1090900 	tstle	r9, r0, lsl #18
    33fc:	03000004 	movweq	r0, #4
    3400:	00005375 	andeq	r5, r0, r5, ror r3
    3404:	92090a00 	andls	r0, r9, #0, 20
    3408:	03000008 	movweq	r0, #8
    340c:	00005376 	andeq	r5, r0, r6, ror r3
    3410:	4c090b00 	stcmi	11, cr0, [r9], {-0}
    3414:	03000006 	movweq	r0, #6
    3418:	00005377 	andeq	r5, r0, r7, ror r3
    341c:	43090c00 	movwmi	r0, #39936	; 0x9c00
    3420:	03000007 	movweq	r0, #7
    3424:	0000ec7a 	andeq	lr, r0, sl, ror ip
    3428:	07001000 	streq	r1, [r0, -r0]
    342c:	00000063 	andeq	r0, r0, r3, rrx
    3430:	01427b03 	cmpeq	r2, r3, lsl #22
    3434:	72080000 	andvc	r0, r8, #0
    3438:	34000007 	strcc	r0, [r0], #-7
    343c:	02877d03 	addeq	r7, r7, #3, 26	; 0xc0
    3440:	6d090000 	stcvs	0, cr0, [r9, #-0]
    3444:	03000005 	movweq	r0, #5
    3448:	0002887f 	andeq	r8, r2, pc, ror r8
    344c:	ed090000 	stc	0, cr0, [r9, #-0]
    3450:	03000003 	movweq	r0, #3
    3454:	00028880 	andeq	r8, r2, r0, lsl #17
    3458:	ca090400 	bgt	244460 <__Stack_Size+0x244060>
    345c:	03000007 	movweq	r0, #7
    3460:	00028883 	andeq	r8, r2, r3, lsl #17
    3464:	dc090800 	stcle	8, cr0, [r9], {-0}
    3468:	03000007 	movweq	r0, #7
    346c:	00028884 	andeq	r8, r2, r4, lsl #17
    3470:	4e090c00 	cdpmi	12, 0, cr0, cr9, cr0, {0}
    3474:	03000005 	movweq	r0, #5
    3478:	00029d96 	muleq	r2, r6, sp
    347c:	27091000 	strcs	r1, [r9, -r0]
    3480:	03000007 	movweq	r0, #7
    3484:	00029da1 	andeq	r9, r2, r1, lsr #27
    3488:	18091400 	stmdane	r9, {sl, ip}
    348c:	03000005 	movweq	r0, #5
    3490:	0002b7ab 	andeq	fp, r2, fp, lsr #15
    3494:	5a091800 	bpl	24949c <__Stack_Size+0x24909c>
    3498:	03000001 	movweq	r0, #1
    349c:	0000e6ad 	andeq	lr, r0, sp, lsr #13
    34a0:	28091c00 	stmdacs	r9, {sl, fp, ip}
    34a4:	03000002 	movweq	r0, #2
    34a8:	0000e6ae 	andeq	lr, r0, lr, lsr #13
    34ac:	4c092000 	stcmi	0, cr2, [r9], {-0}
    34b0:	03000008 	movweq	r0, #8
    34b4:	0000e6af 	andeq	lr, r0, pc, lsr #13
    34b8:	34092400 	strcc	r2, [r9], #-1024	; 0x400
    34bc:	03000006 	movweq	r0, #6
    34c0:	0000e6b0 			; <UNDEFINED> instruction: 0x0000e6b0
    34c4:	ab092800 	blge	24d4cc <__Stack_Size+0x24d0cc>
    34c8:	03000005 	movweq	r0, #5
    34cc:	000064b2 			; <UNDEFINED> instruction: 0x000064b2
    34d0:	8c092c00 	stchi	12, cr2, [r9], {-0}
    34d4:	03000015 	movweq	r0, #21
    34d8:	000053b3 			; <UNDEFINED> instruction: 0x000053b3
    34dc:	10003000 	andne	r3, r0, r0
    34e0:	02870404 	addeq	r0, r7, #4, 8	; 0x4000000
    34e4:	8f0a0000 	svchi	0x000a0000
    34e8:	9d000000 	stcls	0, cr0, [r0, #-0]
    34ec:	0b000002 	bleq	34fc <__Stack_Size+0x30fc>
    34f0:	00000053 	andeq	r0, r0, r3, asr r0
    34f4:	8e040400 	cfcpyshi	mvf0, mvf4
    34f8:	0a000002 	beq	3508 <__Stack_Size+0x3108>
    34fc:	0000008f 	andeq	r0, r0, pc, lsl #1
    3500:	000002b7 			; <UNDEFINED> instruction: 0x000002b7
    3504:	0000530b 	andeq	r5, r0, fp, lsl #6
    3508:	00530b00 	subseq	r0, r3, r0, lsl #22
    350c:	04000000 	streq	r0, [r0], #-0
    3510:	0002a304 	andeq	sl, r2, r4, lsl #6
    3514:	07730700 	ldrbeq	r0, [r3, -r0, lsl #14]!
    3518:	b5030000 	strlt	r0, [r3, #-0]
    351c:	000001de 	ldrdeq	r0, [r0], -lr
    3520:	00068008 	andeq	r8, r6, r8
    3524:	b7032400 	strlt	r2, [r3, -r0, lsl #8]
    3528:	00000341 	andeq	r0, r0, r1, asr #6
    352c:	0006ed09 	andeq	lr, r6, r9, lsl #26
    3530:	88b90300 	ldmhi	r9!, {r8, r9}
    3534:	00000002 	andeq	r0, r0, r2
    3538:	0005e909 	andeq	lr, r5, r9, lsl #18
    353c:	88ba0300 	ldmhi	sl!, {r8, r9}
    3540:	04000002 	streq	r0, [r0], #-2
    3544:	00060509 	andeq	r0, r6, r9, lsl #10
    3548:	88bb0300 	ldmhi	fp!, {r8, r9}
    354c:	08000002 	stmdaeq	r0, {r1}
    3550:	00011209 	andeq	r1, r1, r9, lsl #4
    3554:	88bc0300 	ldmhi	ip!, {r8, r9}
    3558:	0c000002 	stceq	0, cr0, [r0], {2}
    355c:	0006b909 	andeq	fp, r6, r9, lsl #18
    3560:	88bd0300 	pophi	{r8, r9}
    3564:	10000002 	andne	r0, r0, r2
    3568:	00042c09 	andeq	r2, r4, r9, lsl #24
    356c:	88be0300 	ldmhi	lr!, {r8, r9}
    3570:	14000002 	strne	r0, [r0], #-2
    3574:	00009209 	andeq	r9, r0, r9, lsl #4
    3578:	88bf0300 	ldmhi	pc!, {r8, r9}	; <UNPREDICTABLE>
    357c:	18000002 	stmdane	r0, {r1}
    3580:	0005d309 	andeq	sp, r5, r9, lsl #6
    3584:	88c00300 	stmiahi	r0, {r8, r9}^
    3588:	1c000002 	stcne	0, cr0, [r0], {2}
    358c:	00001c09 	andeq	r1, r0, r9, lsl #24
    3590:	88c10300 	stmiahi	r1, {r8, r9}^
    3594:	20000002 	andcs	r0, r0, r2
    3598:	06810700 	streq	r0, [r1], r0, lsl #14
    359c:	c3030000 	movwgt	r0, #12288	; 0x3000
    35a0:	000002c8 	andeq	r0, r0, r8, asr #5
    35a4:	00056911 	andeq	r6, r5, r1, lsl r9
    35a8:	b4350100 	ldrtlt	r0, [r5], #-256	; 0x100
    35ac:	3808000f 	stmdacc	r8, {r0, r1, r2, r3}
    35b0:	01000000 	mrseq	r0, (UNDEF: 0)
    35b4:	0617129c 			; <UNDEFINED> instruction: 0x0617129c
    35b8:	ec030000 	stc	0, cr0, [r3], {-0}
    35bc:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
    35c0:	0013d712 	andseq	sp, r3, r2, lsl r7
    35c4:	41ed0300 	mvnmi	r0, r0, lsl #6
    35c8:	13000003 	movwne	r0, #3
    35cc:	000013ee 	andeq	r1, r0, lr, ror #7
    35d0:	01d32701 	bicseq	r2, r3, r1, lsl #14
    35d4:	03050000 	movweq	r0, #20480	; 0x5000
    35d8:	200001dc 	ldrdcs	r0, [r0], -ip
    35dc:	0013b113 	andseq	fp, r3, r3, lsl r1
    35e0:	53180100 	tstpl	r8, #0, 2
    35e4:	05000000 	streq	r0, [r0, #-0]
    35e8:	0001d803 	andeq	sp, r1, r3, lsl #16
    35ec:	02a21320 	adceq	r1, r2, #32, 6	; 0x80000000
    35f0:	1d010000 	stcne	0, cr0, [r1, #-0]
    35f4:	000003a6 	andeq	r0, r0, r6, lsr #7
    35f8:	01fc0305 	mvnseq	r0, r5, lsl #6
    35fc:	04042000 	streq	r2, [r4], #-0
    3600:	000001d3 	ldrdeq	r0, [r0], -r3
    3604:	00055f13 	andeq	r5, r5, r3, lsl pc
    3608:	bd200100 	stflts	f0, [r0, #-0]
    360c:	05000003 	streq	r0, [r0, #-3]
    3610:	0001d403 	andeq	sp, r1, r3, lsl #8
    3614:	bd040420 	cfstrslt	mvf0, [r4, #-128]	; 0xffffff80
    3618:	13000002 	movwne	r0, #2
    361c:	000013d6 	ldrdeq	r1, [r0], -r6
    3620:	03d42801 	bicseq	r2, r4, #65536	; 0x10000
    3624:	03050000 	movweq	r0, #20480	; 0x5000
    3628:	200001f8 	strdcs	r0, [r0], -r8
    362c:	03410404 	movteq	r0, #5124	; 0x1404
    3630:	b9130000 	ldmdblt	r3, {}	; <UNPREDICTABLE>
    3634:	01000013 	tsteq	r0, r3, lsl r0
    3638:	00004125 	andeq	r4, r0, r5, lsr #2
    363c:	d0030500 	andle	r0, r3, r0, lsl #10
    3640:	13200001 	teqne	r0, #1
    3644:	000004f2 	strdeq	r0, [r0], -r2
    3648:	00412601 	subeq	r2, r1, r1, lsl #12
    364c:	03050000 	movweq	r0, #20480	; 0x5000
    3650:	20000200 	andcs	r0, r0, r0, lsl #4
    3654:	000de000 	andeq	lr, sp, r0
    3658:	4f000400 	svcmi	0x00000400
    365c:	04000010 	streq	r0, [r0], #-16
    3660:	00017e01 	andeq	r7, r1, r1, lsl #28
    3664:	13fa0100 	mvnsne	r0, #0, 2
    3668:	00320000 	eorseq	r0, r2, r0
    366c:	05780000 	ldrbeq	r0, [r8, #-0]!
    3670:	00000000 	andeq	r0, r0, r0
    3674:	10a40000 	adcne	r0, r4, r0
    3678:	04020000 	streq	r0, [r2], #-0
    367c:	00021c05 	andeq	r1, r2, r5, lsl #24
    3680:	05020200 	streq	r0, [r2, #-512]	; 0x200
    3684:	000006c8 	andeq	r0, r0, r8, asr #13
    3688:	74060102 	strvc	r0, [r6], #-258	; 0x102
    368c:	03000006 	movweq	r0, #6
    3690:	00323375 	eorseq	r3, r2, r5, ror r3
    3694:	00452402 	subeq	r2, r5, r2, lsl #8
    3698:	04020000 	streq	r0, [r2], #-0
    369c:	0003a107 	andeq	sl, r3, r7, lsl #2
    36a0:	31750300 	cmncc	r5, r0, lsl #6
    36a4:	25020036 	strcs	r0, [r2, #-54]	; 0x36
    36a8:	00000057 	andeq	r0, r0, r7, asr r0
    36ac:	fd070202 	stc2	2, cr0, [r7, #-8]
    36b0:	03000003 	movweq	r0, #3
    36b4:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    36b8:	00006826 	andeq	r6, r0, r6, lsr #16
    36bc:	08010200 	stmdaeq	r1, {r9}
    36c0:	00000672 	andeq	r0, r0, r2, ror r6
    36c4:	00046c04 	andeq	r6, r4, r4, lsl #24
    36c8:	7a2c0200 	bvc	b03ed0 <__Stack_Size+0xb03ad0>
    36cc:	05000000 	streq	r0, [r0, #-0]
    36d0:	00000045 	andeq	r0, r0, r5, asr #32
    36d4:	36020106 	strcc	r0, [r2], -r6, lsl #2
    36d8:	00000094 	muleq	r0, r4, r0
    36dc:	0005ff07 	andeq	pc, r5, r7, lsl #30
    36e0:	6d070000 	stcvs	0, cr0, [r7, #-0]
    36e4:	01000007 	tsteq	r0, r7
    36e8:	04590400 	ldrbeq	r0, [r9], #-1024	; 0x400
    36ec:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    36f0:	0000007f 	andeq	r0, r0, pc, ror r0
    36f4:	00039108 	andeq	r9, r3, r8, lsl #2
    36f8:	16030100 	strne	r0, [r3], -r0, lsl #2
    36fc:	000000c4 	andeq	r0, r0, r4, asr #1
    3700:	00012407 	andeq	r2, r1, r7, lsl #8
    3704:	d0070000 	andle	r0, r7, r0
    3708:	01000002 	tsteq	r0, r2
    370c:	00082207 	andeq	r2, r8, r7, lsl #4
    3710:	49070200 	stmdbmi	r7, {r9}
    3714:	03000004 	movweq	r0, #4
    3718:	06850800 	streq	r0, [r5], r0, lsl #16
    371c:	03010000 	movweq	r0, #4096	; 0x1000
    3720:	0001251f 	andeq	r2, r1, pc, lsl r5
    3724:	156c0700 	strbne	r0, [ip, #-1792]!	; 0x700
    3728:	07000000 	streq	r0, [r0, -r0]
    372c:	0000179b 	muleq	r0, fp, r7
    3730:	0cd50701 	ldcleq	7, cr0, [r5], {1}
    3734:	07020000 	streq	r0, [r2, -r0]
    3738:	00001577 	andeq	r1, r0, r7, ror r5
    373c:	0c6a0703 	stcleq	7, cr0, [sl], #-12
    3740:	07040000 	streq	r0, [r4, -r0]
    3744:	0000172a 	andeq	r1, r0, sl, lsr #14
    3748:	175a0705 	ldrbne	r0, [sl, -r5, lsl #14]
    374c:	07060000 	streq	r0, [r6, -r0]
    3750:	000015e1 	andeq	r1, r0, r1, ror #11
    3754:	16400707 	strbne	r0, [r0], -r7, lsl #14
    3758:	07080000 	streq	r0, [r8, -r0]
    375c:	00001691 	muleq	r0, r1, r6
    3760:	15420709 	strbne	r0, [r2, #-1801]	; 0x709
    3764:	070a0000 	streq	r0, [sl, -r0]
    3768:	000015f0 	strdeq	r1, [r0], -r0
    376c:	16d5070b 	ldrbne	r0, [r5], fp, lsl #14
    3770:	070c0000 	streq	r0, [ip, -r0]
    3774:	000015bf 			; <UNDEFINED> instruction: 0x000015bf
    3778:	6108000c 	tstvs	r8, ip
    377c:	01000016 	tsteq	r0, r6, lsl r0
    3780:	01503203 	cmpeq	r0, r3, lsl #4
    3784:	ac070000 	stcge	0, cr0, [r7], {-0}
    3788:	01000014 	tsteq	r0, r4, lsl r0
    378c:	00170b07 	andseq	r0, r7, r7, lsl #22
    3790:	be070200 	cdplt	2, 0, cr0, cr7, cr0, {0}
    3794:	03000014 	movweq	r0, #20
    3798:	0016b307 	andseq	fp, r6, r7, lsl #6
    379c:	f7070400 			; <UNDEFINED> instruction: 0xf7070400
    37a0:	05000016 	streq	r0, [r0, #-22]
    37a4:	15fe0800 	ldrbne	r0, [lr, #2048]!	; 0x800
    37a8:	03010000 	movweq	r0, #4096	; 0x1000
    37ac:	0001693c 	andeq	r6, r1, ip, lsr r9
    37b0:	140d0700 	strne	r0, [sp], #-1792	; 0x700
    37b4:	07000000 	streq	r0, [r0, -r0]
    37b8:	0000146b 	andeq	r1, r0, fp, ror #8
    37bc:	52080001 	andpl	r0, r8, #1
    37c0:	01000016 	tsteq	r0, r6, lsl r0
    37c4:	01b21604 			; <UNDEFINED> instruction: 0x01b21604
    37c8:	76070000 	strvc	r0, [r7], -r0
    37cc:	00000017 	andeq	r0, r0, r7, lsl r0
    37d0:	00167207 	andseq	r7, r6, r7, lsl #4
    37d4:	f6070100 			; <UNDEFINED> instruction: 0xf6070100
    37d8:	02000014 	andeq	r0, r0, #20
    37dc:	0017ae07 	andseq	sl, r7, r7, lsl #28
    37e0:	f1070300 			; <UNDEFINED> instruction: 0xf1070300
    37e4:	04000014 	streq	r0, [r0], #-20
    37e8:	0017a907 	andseq	sl, r7, r7, lsl #18
    37ec:	8c070500 	cfstr32hi	mvfx0, [r7], {-0}
    37f0:	06000017 			; <UNDEFINED> instruction: 0x06000017
    37f4:	0016a307 	andseq	sl, r6, r7, lsl #6
    37f8:	80070700 	andhi	r0, r7, r0, lsl #14
    37fc:	08000014 	stmdaeq	r0, {r2, r4}
    3800:	00153207 	andseq	r3, r5, r7, lsl #4
    3804:	09000900 	stmdbeq	r0, {r8, fp}
    3808:	000000b2 	strheq	r0, [r0], -r2
    380c:	d7240408 	strle	r0, [r4, -r8, lsl #8]!
    3810:	0a000001 	beq	381c <__Stack_Size+0x341c>
    3814:	00000163 	andeq	r0, r0, r3, ror #2
    3818:	01d72604 	bicseq	r2, r7, r4, lsl #12
    381c:	0a000000 	beq	3824 <__Stack_Size+0x3424>
    3820:	000005c3 	andeq	r0, r0, r3, asr #11
    3824:	004c2704 	subeq	r2, ip, r4, lsl #14
    3828:	00040000 	andeq	r0, r4, r0
    382c:	005e040b 	subseq	r0, lr, fp, lsl #8
    3830:	fc040000 	stc2	0, cr0, [r4], {-0}
    3834:	04000002 	streq	r0, [r0], #-2
    3838:	0001b229 	andeq	fp, r1, r9, lsr #4
    383c:	07650800 	strbeq	r0, [r5, -r0, lsl #16]!
    3840:	04010000 	streq	r0, [r1], #-0
    3844:	00020d2d 	andeq	r0, r2, sp, lsr #26
    3848:	08f60700 	ldmeq	r6!, {r8, r9, sl}^
    384c:	07000000 	streq	r0, [r0, -r0]
    3850:	00000410 	andeq	r0, r0, r0, lsl r4
    3854:	07a40701 	streq	r0, [r4, r1, lsl #14]!
    3858:	07020000 	streq	r0, [r2, -r0]
    385c:	00000248 	andeq	r0, r0, r8, asr #4
    3860:	66040003 	strvs	r0, [r4], -r3
    3864:	04000007 	streq	r0, [r0], #-7
    3868:	0001e834 	andeq	lr, r1, r4, lsr r8
    386c:	091b0900 	ldmdbeq	fp, {r8, fp}
    3870:	040c0000 	streq	r0, [ip], #-0
    3874:	00025538 	andeq	r5, r2, r8, lsr r5
    3878:	02b60a00 	adcseq	r0, r6, #0, 20
    387c:	50040000 	andpl	r0, r4, r0
    3880:	0000004c 	andeq	r0, r0, ip, asr #32
    3884:	033f0a00 	teqeq	pc, #0, 20
    3888:	51040000 	mrspl	r0, (UNDEF: 4)
    388c:	0000004c 	andeq	r0, r0, ip, asr #32
    3890:	158f0a02 	strne	r0, [pc, #2562]	; 429a <__Stack_Size+0x3e9a>
    3894:	52040000 	andpl	r0, r4, #0
    3898:	0000004c 	andeq	r0, r0, ip, asr #32
    389c:	01090a04 	tsteq	r9, r4, lsl #20
    38a0:	53040000 	movwpl	r0, #16384	; 0x4000
    38a4:	00000264 	andeq	r0, r0, r4, ror #4
    38a8:	d70c0008 	strle	r0, [ip, -r8]
    38ac:	64000001 	strvs	r0, [r0], #-1
    38b0:	0d000002 	stceq	0, cr0, [r0, #-8]
    38b4:	0000004c 	andeq	r0, r0, ip, asr #32
    38b8:	55040b00 	strpl	r0, [r4, #-2816]	; 0xb00
    38bc:	04000002 	streq	r0, [r0], #-2
    38c0:	0000091c 	andeq	r0, r0, ip, lsl r9
    38c4:	02185404 	andseq	r5, r8, #4, 8	; 0x4000000
    38c8:	fd090000 	stc2	0, cr0, [r9, #-0]
    38cc:	02000007 	andeq	r0, r0, #7
    38d0:	029a5804 	addseq	r5, sl, #4, 16	; 0x40000
    38d4:	3a0a0000 	bcc	2838dc <__Stack_Size+0x2834dc>
    38d8:	04000009 	streq	r0, [r0], #-9
    38dc:	00005e5a 	andeq	r5, r0, sl, asr lr
    38e0:	d60a0000 	strle	r0, [sl], -r0
    38e4:	04000003 	streq	r0, [r0], #-3
    38e8:	00005e5b 	andeq	r5, r0, fp, asr lr
    38ec:	04000100 	streq	r0, [r0], #-256	; 0x100
    38f0:	000007fe 	strdeq	r0, [r0], -lr
    38f4:	02755d04 	rsbseq	r5, r5, #4, 26	; 0x100
    38f8:	420e0000 	andmi	r0, lr, #0
    38fc:	04020057 	streq	r0, [r2], #-87	; 0x57
    3900:	0002c962 	andeq	ip, r2, r2, ror #18
    3904:	62620f00 	rsbvs	r0, r2, #0, 30
    3908:	65040030 	strvs	r0, [r4, #-48]	; 0x30
    390c:	0000005e 	andeq	r0, r0, lr, asr r0
    3910:	62620f00 	rsbvs	r0, r2, #0, 30
    3914:	66040031 			; <UNDEFINED> instruction: 0x66040031
    3918:	0000005e 	andeq	r0, r0, lr, asr r0
    391c:	02100001 	andseq	r0, r0, #1
    3920:	02e55f04 	rsceq	r5, r5, #4, 30
    3924:	77110000 	ldrvc	r0, [r1, -r0]
    3928:	4c610400 	cfstrdmi	mvd0, [r1], #-0
    392c:	11000000 	mrsne	r0, (UNDEF: 0)
    3930:	04007762 	streq	r7, [r0], #-1890	; 0x762
    3934:	0002a568 	andeq	sl, r2, r8, ror #10
    3938:	25040000 	strcs	r0, [r4, #-0]
    393c:	04000004 	streq	r0, [r0], #-4
    3940:	0002c969 	andeq	ip, r2, r9, ror #18
    3944:	00620900 	rsbeq	r0, r2, r0, lsl #18
    3948:	041c0000 	ldreq	r0, [ip], #-0
    394c:	0003816b 	andeq	r8, r3, fp, ror #2
    3950:	05800a00 	streq	r0, [r0, #2560]	; 0xa00
    3954:	6d040000 	stcvs	0, cr0, [r4, #-0]
    3958:	0000005e 	andeq	r0, r0, lr, asr r0
    395c:	023c0a00 	eorseq	r0, ip, #0, 20
    3960:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
    3964:	0000005e 	andeq	r0, r0, lr, asr r0
    3968:	043e0a01 	ldrteq	r0, [lr], #-2561	; 0xa01
    396c:	6f040000 	svcvs	0x00040000
    3970:	000002e5 	andeq	r0, r0, r5, ror #5
    3974:	016e0a02 	cmneq	lr, r2, lsl #20
    3978:	70040000 	andvc	r0, r4, r0
    397c:	000002e5 	andeq	r0, r0, r5, ror #5
    3980:	083d0a04 	ldmdaeq	sp!, {r2, r9, fp}
    3984:	71040000 	mrsvc	r0, (UNDEF: 4)
    3988:	000002e5 	andeq	r0, r0, r5, ror #5
    398c:	09490a06 	stmdbeq	r9, {r1, r2, r9, fp}^
    3990:	73040000 	movwvc	r0, #16384	; 0x4000
    3994:	0000005e 	andeq	r0, r0, lr, asr r0
    3998:	03c60a08 	biceq	r0, r6, #8, 20	; 0x8000
    399c:	74040000 	strvc	r0, [r4], #-0
    39a0:	0000005e 	andeq	r0, r0, lr, asr r0
    39a4:	04d10a09 	ldrbeq	r0, [r1], #2569	; 0xa09
    39a8:	75040000 	strvc	r0, [r4, #-0]
    39ac:	0000005e 	andeq	r0, r0, lr, asr r0
    39b0:	08920a0a 	ldmeq	r2, {r1, r3, r9, fp}
    39b4:	76040000 	strvc	r0, [r4], -r0
    39b8:	0000005e 	andeq	r0, r0, lr, asr r0
    39bc:	064c0a0b 	strbeq	r0, [ip], -fp, lsl #20
    39c0:	77040000 	strvc	r0, [r4, -r0]
    39c4:	0000005e 	andeq	r0, r0, lr, asr r0
    39c8:	07430a0c 	strbeq	r0, [r3, -ip, lsl #20]
    39cc:	7a040000 	bvc	1039d4 <__Stack_Size+0x1035d4>
    39d0:	0000026a 	andeq	r0, r0, sl, ror #4
    39d4:	63040010 	movwvs	r0, #16400	; 0x4010
    39d8:	04000000 	streq	r0, [r0], #-0
    39dc:	0002f07b 	andeq	pc, r2, fp, ror r0	; <UNPREDICTABLE>
    39e0:	07720900 	ldrbeq	r0, [r2, -r0, lsl #18]!
    39e4:	04340000 	ldrteq	r0, [r4], #-0
    39e8:	0004357d 	andeq	r3, r4, sp, ror r5
    39ec:	056d0a00 	strbeq	r0, [sp, #-2560]!	; 0xa00
    39f0:	7f040000 	svcvc	0x00040000
    39f4:	00000436 	andeq	r0, r0, r6, lsr r4
    39f8:	03ed0a00 	mvneq	r0, #0, 20
    39fc:	80040000 	andhi	r0, r4, r0
    3a00:	00000436 	andeq	r0, r0, r6, lsr r4
    3a04:	07ca0a04 	strbeq	r0, [sl, r4, lsl #20]
    3a08:	83040000 	movwhi	r0, #16384	; 0x4000
    3a0c:	00000436 	andeq	r0, r0, r6, lsr r4
    3a10:	07dc0a08 	ldrbeq	r0, [ip, r8, lsl #20]
    3a14:	84040000 	strhi	r0, [r4], #-0
    3a18:	00000436 	andeq	r0, r0, r6, lsr r4
    3a1c:	054e0a0c 	strbeq	r0, [lr, #-2572]	; 0xa0c
    3a20:	96040000 	strls	r0, [r4], -r0
    3a24:	0000044b 	andeq	r0, r0, fp, asr #8
    3a28:	07270a10 			; <UNDEFINED> instruction: 0x07270a10
    3a2c:	a1040000 	mrsge	r0, (UNDEF: 4)
    3a30:	0000044b 	andeq	r0, r0, fp, asr #8
    3a34:	05180a14 	ldreq	r0, [r8, #-2580]	; 0xa14
    3a38:	ab040000 	blge	103a40 <__Stack_Size+0x103640>
    3a3c:	00000465 	andeq	r0, r0, r5, ror #8
    3a40:	015a0a18 	cmpeq	sl, r8, lsl sl
    3a44:	ad040000 	stcge	0, cr0, [r4, #-0]
    3a48:	00000264 	andeq	r0, r0, r4, ror #4
    3a4c:	02280a1c 	eoreq	r0, r8, #28, 20	; 0x1c000
    3a50:	ae040000 	cdpge	0, 0, cr0, cr4, cr0, {0}
    3a54:	00000264 	andeq	r0, r0, r4, ror #4
    3a58:	084c0a20 	stmdaeq	ip, {r5, r9, fp}^
    3a5c:	af040000 	svcge	0x00040000
    3a60:	00000264 	andeq	r0, r0, r4, ror #4
    3a64:	06340a24 	ldrteq	r0, [r4], -r4, lsr #20
    3a68:	b0040000 	andlt	r0, r4, r0
    3a6c:	00000264 	andeq	r0, r0, r4, ror #4
    3a70:	05ab0a28 	streq	r0, [fp, #2600]!	; 0xa28
    3a74:	b2040000 	andlt	r0, r4, #0
    3a78:	000001d7 	ldrdeq	r0, [r0], -r7
    3a7c:	158c0a2c 	strne	r0, [ip, #2604]	; 0xa2c
    3a80:	b3040000 	movwlt	r0, #16384	; 0x4000
    3a84:	0000005e 	andeq	r0, r0, lr, asr r0
    3a88:	0b120030 	bleq	483b50 <__Stack_Size+0x483750>
    3a8c:	00043504 	andeq	r3, r4, r4, lsl #10
    3a90:	020d0c00 	andeq	r0, sp, #0, 24
    3a94:	044b0000 	strbeq	r0, [fp], #-0
    3a98:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    3a9c:	00000000 	andeq	r0, r0, r0
    3aa0:	043c040b 	ldrteq	r0, [ip], #-1035	; 0x40b
    3aa4:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    3aa8:	65000002 	strvs	r0, [r0, #-2]
    3aac:	0d000004 	stceq	0, cr0, [r0, #-16]
    3ab0:	0000005e 	andeq	r0, r0, lr, asr r0
    3ab4:	00005e0d 	andeq	r5, r0, sp, lsl #28
    3ab8:	040b0000 	streq	r0, [fp], #-0
    3abc:	00000451 	andeq	r0, r0, r1, asr r4
    3ac0:	00077304 	andeq	r7, r7, r4, lsl #6
    3ac4:	8cb50400 	cfldrshi	mvf0, [r5]
    3ac8:	09000003 	stmdbeq	r0, {r0, r1}
    3acc:	00000680 	andeq	r0, r0, r0, lsl #13
    3ad0:	efb70424 	svc	0x00b70424
    3ad4:	0a000004 	beq	3aec <__Stack_Size+0x36ec>
    3ad8:	000006ed 	andeq	r0, r0, sp, ror #13
    3adc:	0436b904 	ldrteq	fp, [r6], #-2308	; 0x904
    3ae0:	0a000000 	beq	3ae8 <__Stack_Size+0x36e8>
    3ae4:	000005e9 	andeq	r0, r0, r9, ror #11
    3ae8:	0436ba04 	ldrteq	fp, [r6], #-2564	; 0xa04
    3aec:	0a040000 	beq	103af4 <__Stack_Size+0x1036f4>
    3af0:	00000605 	andeq	r0, r0, r5, lsl #12
    3af4:	0436bb04 	ldrteq	fp, [r6], #-2820	; 0xb04
    3af8:	0a080000 	beq	203b00 <__Stack_Size+0x203700>
    3afc:	00000112 	andeq	r0, r0, r2, lsl r1
    3b00:	0436bc04 	ldrteq	fp, [r6], #-3076	; 0xc04
    3b04:	0a0c0000 	beq	303b0c <__Stack_Size+0x30370c>
    3b08:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
    3b0c:	0436bd04 	ldrteq	fp, [r6], #-3332	; 0xd04
    3b10:	0a100000 	beq	403b18 <__Stack_Size+0x403718>
    3b14:	0000042c 	andeq	r0, r0, ip, lsr #8
    3b18:	0436be04 	ldrteq	fp, [r6], #-3588	; 0xe04
    3b1c:	0a140000 	beq	503b24 <__Stack_Size+0x503724>
    3b20:	00000092 	muleq	r0, r2, r0
    3b24:	0436bf04 	ldrteq	fp, [r6], #-3844	; 0xf04
    3b28:	0a180000 	beq	603b30 <__Stack_Size+0x603730>
    3b2c:	000005d3 	ldrdeq	r0, [r0], -r3
    3b30:	0436c004 	ldrteq	ip, [r6], #-4
    3b34:	0a1c0000 	beq	703b3c <__Stack_Size+0x70373c>
    3b38:	0000001c 	andeq	r0, r0, ip, lsl r0
    3b3c:	0436c104 	ldrteq	ip, [r6], #-260	; 0x104
    3b40:	00200000 	eoreq	r0, r0, r0
    3b44:	00068104 	andeq	r8, r6, r4, lsl #2
    3b48:	76c30400 	strbvc	r0, [r3], r0, lsl #8
    3b4c:	13000004 	movwne	r0, #4
    3b50:	00001610 	andeq	r1, r0, r0, lsl r6
    3b54:	01d73501 	bicseq	r3, r7, r1, lsl #10
    3b58:	0fec0000 	svceq	0x00ec0000
    3b5c:	00240800 	eoreq	r0, r4, r0, lsl #16
    3b60:	9c010000 	stcls	0, cr0, [r1], {-0}
    3b64:	00000523 	andeq	r0, r0, r3, lsr #10
    3b68:	0014ea14 	andseq	lr, r4, r4, lsl sl
    3b6c:	4c350100 	ldfmis	f0, [r5], #-0
    3b70:	e3000000 	movw	r0, #0
    3b74:	00000015 	andeq	r0, r0, r5, lsl r0
    3b78:	0015cb13 	andseq	ip, r5, r3, lsl fp
    3b7c:	d7630100 	strble	r0, [r3, -r0, lsl #2]!
    3b80:	10000001 	andne	r0, r0, r1
    3b84:	24080010 	strcs	r0, [r8], #-16
    3b88:	01000000 	mrseq	r0, (UNDEF: 0)
    3b8c:	00054c9c 	muleq	r5, ip, ip
    3b90:	14ea1400 	strbtne	r1, [sl], #1024	; 0x400
    3b94:	63010000 	movwvs	r0, #4096	; 0x1000
    3b98:	0000004c 	andeq	r0, r0, ip, asr #32
    3b9c:	00001604 	andeq	r1, r0, r4, lsl #12
    3ba0:	16e41300 	strbtne	r1, [r4], r0, lsl #6
    3ba4:	9b010000 	blls	43bac <__Stack_Size+0x437ac>
    3ba8:	000001d7 	ldrdeq	r0, [r0], -r7
    3bac:	08001034 	stmdaeq	r0, {r2, r4, r5, ip}
    3bb0:	00000090 	muleq	r0, r0, r0
    3bb4:	05b69c01 	ldreq	r9, [r6, #3073]!	; 0xc01
    3bb8:	ea140000 	b	503bc0 <__Stack_Size+0x5037c0>
    3bbc:	01000014 	tsteq	r0, r4, lsl r0
    3bc0:	00004c9b 	muleq	r0, fp, ip
    3bc4:	00162500 	andseq	r2, r6, r0, lsl #10
    3bc8:	10541500 	subsne	r1, r4, r0, lsl #10
    3bcc:	001c0800 	andseq	r0, ip, r0, lsl #16
    3bd0:	05910000 	ldreq	r0, [r1]
    3bd4:	ce160000 	cdpgt	0, 1, cr0, cr6, cr0, {0}
    3bd8:	01000003 	tsteq	r0, r3
    3bdc:	00005ea9 	andeq	r5, r0, r9, lsr #29
    3be0:	00164600 	andseq	r4, r6, r0, lsl #12
    3be4:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
    3be8:	30080010 	andcc	r0, r8, r0, lsl r0
    3bec:	16000000 	strne	r0, [r0], -r0
    3bf0:	00001736 	andeq	r1, r0, r6, lsr r7
    3bf4:	005ec301 	subseq	ip, lr, r1, lsl #6
    3bf8:	165a0000 	ldrbne	r0, [sl], -r0
    3bfc:	52180000 	andspl	r0, r8, #0
    3c00:	01000017 	tsteq	r0, r7, lsl r0
    3c04:	00005ec4 	andeq	r5, r0, r4, asr #29
    3c08:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    3c0c:	0000145f 	andeq	r1, r0, pc, asr r4
    3c10:	c401e001 	strgt	lr, [r1], #-1
    3c14:	a8080010 	stmdage	r8, {r4}
    3c18:	01000000 	mrseq	r0, (UNDEF: 0)
    3c1c:	00067b9c 	muleq	r6, ip, fp
    3c20:	17221a00 	strne	r1, [r2, -r0, lsl #20]!
    3c24:	e2010000 	and	r0, r1, #0
    3c28:	00067b01 	andeq	r7, r6, r1, lsl #22
    3c2c:	00168b00 	andseq	r8, r6, r0, lsl #22
    3c30:	16c81a00 	strbne	r1, [r8], r0, lsl #20
    3c34:	e3010000 	movw	r0, #4096	; 0x1000
    3c38:	00003a01 	andeq	r3, r0, r1, lsl #20
    3c3c:	0016a000 	andseq	sl, r6, r0
    3c40:	09491a00 	stmdbeq	r9, {r9, fp, ip}^
    3c44:	e4010000 	str	r0, [r1], #-0
    3c48:	00003a01 	andeq	r3, r0, r1, lsl #20
    3c4c:	0016e400 	andseq	lr, r6, r0, lsl #8
    3c50:	14311a00 	ldrtne	r1, [r1], #-2560	; 0xa00
    3c54:	e6010000 	str	r0, [r1], -r0
    3c58:	0001d701 	andeq	sp, r1, r1, lsl #14
    3c5c:	00172f00 	andseq	r2, r7, r0, lsl #30
    3c60:	14ea1a00 	strbtne	r1, [sl], #2560	; 0xa00
    3c64:	e7010000 	str	r0, [r1, -r0]
    3c68:	00003a01 	andeq	r3, r0, r1, lsl #20
    3c6c:	00174d00 	andseq	r4, r7, r0, lsl #26
    3c70:	15201b00 	strne	r1, [r0, #-2816]!	; 0xb00
    3c74:	10010000 	andne	r0, r1, r0
    3c78:	00114802 	andseq	r4, r1, r2, lsl #16
    3c7c:	11161c08 	tstne	r6, r8, lsl #24
    3c80:	06380800 	ldrteq	r0, [r8], -r0, lsl #16
    3c84:	011d0000 	tsteq	sp, r0
    3c88:	00750250 	rsbseq	r0, r5, r0, asr r2
    3c8c:	111e1e00 	tstne	lr, r0, lsl #28
    3c90:	0d1c0800 	ldceq	8, cr0, [ip, #-0]
    3c94:	064b0000 	strbeq	r0, [fp], -r0
    3c98:	011d0000 	tsteq	sp, r0
    3c9c:	00300150 	eorseq	r0, r0, r0, asr r1
    3ca0:	0011281e 	andseq	r2, r1, lr, lsl r8
    3ca4:	000d3208 	andeq	r3, sp, r8, lsl #4
    3ca8:	00066500 	andeq	r6, r6, r0, lsl #10
    3cac:	52011d00 	andpl	r1, r1, #0, 26
    3cb0:	1d007502 	cfstr32ne	mvfx7, [r0, #-8]
    3cb4:	79025001 	stmdbvc	r2, {r0, ip, lr}
    3cb8:	301f0000 	andscc	r0, pc, r0
    3cbc:	4d080011 	stcmi	0, cr0, [r8, #-68]	; 0xffffffbc
    3cc0:	1d00000d 	stcne	0, cr0, [r0, #-52]	; 0xffffffcc
    3cc4:	75025101 	strvc	r5, [r2, #-257]	; 0x101
    3cc8:	50011d00 	andpl	r1, r1, r0, lsl #26
    3ccc:	00003001 	andeq	r3, r0, r1
    3cd0:	026a040b 	rsbeq	r0, sl, #184549376	; 0xb000000
    3cd4:	45200000 	strmi	r0, [r0, #-0]!
    3cd8:	01000014 	tsteq	r0, r4, lsl r0
    3cdc:	00020d4a 	andeq	r0, r2, sl, asr #26
    3ce0:	00116c00 	andseq	r6, r1, r0, lsl #24
    3ce4:	00003808 	andeq	r3, r0, r8, lsl #16
    3ce8:	139c0100 	orrsne	r0, ip, #0, 2
    3cec:	0000150a 	andeq	r1, r0, sl, lsl #10
    3cf0:	020d7801 	andeq	r7, sp, #65536	; 0x10000
    3cf4:	11a40000 			; <UNDEFINED> instruction: 0x11a40000
    3cf8:	00480800 	subeq	r0, r8, r0, lsl #16
    3cfc:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d00:	000006be 			; <UNDEFINED> instruction: 0x000006be
    3d04:	00655221 	rsbeq	r5, r5, r1, lsr #4
    3d08:	020d7a01 	andeq	r7, sp, #4096	; 0x1000
    3d0c:	178b0000 	strne	r0, [fp, r0]
    3d10:	13000000 	movwne	r0, #0
    3d14:	0000162a 	andeq	r1, r0, sl, lsr #12
    3d18:	020de901 	andeq	lr, sp, #16384	; 0x4000
    3d1c:	11ec0000 	mvnne	r0, r0
    3d20:	00d00800 	sbcseq	r0, r0, r0, lsl #16
    3d24:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d28:	00000796 	muleq	r0, r6, r7
    3d2c:	00148816 	andseq	r8, r4, r6, lsl r8
    3d30:	3aeb0100 	bcc	ffac4138 <BootRAM+0xea348d9>
    3d34:	a9000000 	stmdbge	r0, {}	; <UNPREDICTABLE>
    3d38:	16000017 			; <UNDEFINED> instruction: 0x16000017
    3d3c:	00000df8 	strdeq	r0, [r0], -r8
    3d40:	003aec01 	eorseq	lr, sl, r1, lsl #24
    3d44:	17e10000 	strbne	r0, [r1, r0]!
    3d48:	08170000 	ldmdaeq	r7, {}	; <UNPREDICTABLE>
    3d4c:	9e080012 	mcrls	0, 0, r0, cr8, cr2, {0}
    3d50:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3d54:	0000159a 	muleq	r0, sl, r5
    3d58:	0796f601 	ldreq	pc, [r6, r1, lsl #12]
    3d5c:	36160000 	ldrcc	r0, [r6], -r0
    3d60:	01000017 	tsteq	r0, r7, lsl r0
    3d64:	00003af7 	strdeq	r3, [r0], -r7
    3d68:	00180a00 	andseq	r0, r8, r0, lsl #20
    3d6c:	17521600 	ldrbne	r1, [r2, -r0, lsl #12]
    3d70:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    3d74:	0000003a 	andeq	r0, r0, sl, lsr r0
    3d78:	00001833 	andeq	r1, r0, r3, lsr r8
    3d7c:	50457221 	subpl	r7, r5, r1, lsr #4
    3d80:	3af90100 	bcc	ffe44188 <BootRAM+0xedb4929>
    3d84:	0a000000 	beq	3d8c <__Stack_Size+0x398c>
    3d88:	15000018 	strne	r0, [r0, #-24]
    3d8c:	08001288 	stmdaeq	r0, {r3, r7, r9, ip}
    3d90:	00000012 	andeq	r0, r0, r2, lsl r0
    3d94:	00000754 	andeq	r0, r0, r4, asr r7
    3d98:	0004811a 	andeq	r8, r4, sl, lsl r1
    3d9c:	012f0100 	teqeq	pc, r0, lsl #2
    3da0:	0000004c 	andeq	r0, r0, ip, asr #32
    3da4:	0000184b 	andeq	r1, r0, fp, asr #16
    3da8:	12621e00 	rsbne	r1, r2, #0, 28
    3dac:	0d640800 	stcleq	8, cr0, [r4, #-0]
    3db0:	07680000 	strbeq	r0, [r8, -r0]!
    3db4:	011d0000 	tsteq	sp, r0
    3db8:	00740250 	rsbseq	r0, r4, r0, asr r2
    3dbc:	126a1e00 	rsbne	r1, sl, #0, 28
    3dc0:	0d760800 	ldcleq	8, cr0, [r6, #-0]
    3dc4:	07820000 	streq	r0, [r2, r0]
    3dc8:	011d0000 	tsteq	sp, r0
    3dcc:	30080251 	andcc	r0, r8, r1, asr r2
    3dd0:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    3dd4:	22000074 	andcs	r0, r0, #116	; 0x74
    3dd8:	08001282 	stmdaeq	r0, {r1, r7, r9, ip}
    3ddc:	00000d8d 	andeq	r0, r0, sp, lsl #27
    3de0:	00128822 	andseq	r8, r2, r2, lsr #16
    3de4:	000da408 	andeq	sl, sp, r8, lsl #8
    3de8:	0b000000 	bleq	3df0 <__Stack_Size+0x39f0>
    3dec:	00029a04 	andeq	r9, r2, r4, lsl #20
    3df0:	15502300 	ldrbne	r2, [r0, #-768]	; 0x300
    3df4:	42010000 	andmi	r0, r1, #0
    3df8:	00020d01 	andeq	r0, r2, r1, lsl #26
    3dfc:	0012bc00 	andseq	fp, r2, r0, lsl #24
    3e00:	00008408 	andeq	r8, r0, r8, lsl #8
    3e04:	2b9c0100 	blcs	fe70420c <BootRAM+0xd6749ad>
    3e08:	1a000008 	bne	3e30 <__Stack_Size+0x3a30>
    3e0c:	00001752 	andeq	r1, r0, r2, asr r7
    3e10:	3a014401 	bcc	54e1c <__Stack_Size+0x54a1c>
    3e14:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    3e18:	1a000018 	bne	3e80 <__Stack_Size+0x3a80>
    3e1c:	00001736 	andeq	r1, r0, r6, lsr r7
    3e20:	3a014501 	bcc	5522c <__Stack_Size+0x54e2c>
    3e24:	a1000000 	mrsge	r0, (UNDEF: 0)
    3e28:	24000018 	strcs	r0, [r0], #-24
    3e2c:	00504572 	subseq	r4, r0, r2, ror r5
    3e30:	3a014601 	bcc	5563c <__Stack_Size+0x5523c>
    3e34:	a1000000 	mrsge	r0, (UNDEF: 0)
    3e38:	1a000018 	bne	3ea0 <__Stack_Size+0x3aa0>
    3e3c:	00000df8 	strdeq	r0, [r0], -r8
    3e40:	3a014701 	bcc	55a4c <__Stack_Size+0x5564c>
    3e44:	d6000000 	strle	r0, [r0], -r0
    3e48:	25000018 	strcs	r0, [r0, #-24]
    3e4c:	00000540 	andeq	r0, r0, r0, asr #10
    3e50:	00000810 	andeq	r0, r0, r0, lsl r8
    3e54:	0004811a 	andeq	r8, r4, sl, lsl r1
    3e58:	01630100 	cmneq	r3, r0, lsl #2
    3e5c:	0000004c 	andeq	r0, r0, ip, asr #32
    3e60:	000018f4 	strdeq	r1, [r0], -r4
    3e64:	13141700 	tstne	r4, #0, 14
    3e68:	00100800 	andseq	r0, r0, r0, lsl #16
    3e6c:	811a0000 	tsthi	sl, r0
    3e70:	01000004 	tsteq	r0, r4
    3e74:	004c0169 	subeq	r0, ip, r9, ror #2
    3e78:	191c0000 	ldmdbne	ip, {}	; <UNPREDICTABLE>
    3e7c:	00000000 	andeq	r0, r0, r0
    3e80:	00159f26 	andseq	r9, r5, r6, lsr #30
    3e84:	01780100 	cmneq	r8, r0, lsl #2
    3e88:	0000020d 	andeq	r0, r0, sp, lsl #4
    3e8c:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
    3e90:	00000024 	andeq	r0, r0, r4, lsr #32
    3e94:	60279c01 	eorvs	r9, r7, r1, lsl #24
    3e98:	01000008 	tsteq	r0, r8
    3e9c:	01d70192 			; <UNDEFINED> instruction: 0x01d70192
    3ea0:	13640000 	cmnne	r4, #0
    3ea4:	001c0800 	andseq	r0, ip, r0, lsl #16
    3ea8:	9c010000 	stcls	0, cr0, [r1], {-0}
    3eac:	0000088c 	andeq	r0, r0, ip, lsl #17
    3eb0:	0014ea28 	andseq	lr, r4, r8, lsr #20
    3eb4:	01920100 	orrseq	r0, r2, r0, lsl #2
    3eb8:	0000004c 	andeq	r0, r0, ip, asr #32
    3ebc:	00001935 	andeq	r1, r0, r5, lsr r9
    3ec0:	0015b928 	andseq	fp, r5, r8, lsr #18
    3ec4:	01920100 	orrseq	r0, r2, r0, lsl #2
    3ec8:	0000088c 	andeq	r0, r0, ip, lsl #17
    3ecc:	00001956 	andeq	r1, r0, r6, asr r9
    3ed0:	0003431a 	andeq	r4, r3, sl, lsl r3
    3ed4:	01940100 	orrseq	r0, r4, r0, lsl #2
    3ed8:	0000003a 	andeq	r0, r0, sl, lsr r0
    3edc:	00001982 	andeq	r1, r0, r2, lsl #19
    3ee0:	dd040b00 	vstrle	d0, [r4, #-0]
    3ee4:	27000001 	strcs	r0, [r0, -r1]
    3ee8:	00001423 	andeq	r1, r0, r3, lsr #8
    3eec:	5e03c901 	cdppl	9, 0, cr12, cr3, cr1, {0}
    3ef0:	80000000 	andhi	r0, r0, r0
    3ef4:	40080013 	andmi	r0, r8, r3, lsl r0
    3ef8:	01000000 	mrseq	r0, (UNDEF: 0)
    3efc:	0008bc9c 	muleq	r8, ip, ip
    3f00:	138e1f00 	orrne	r1, lr, #0, 30
    3f04:	0d8d0800 	stceq	8, cr0, [sp]
    3f08:	011d0000 	tsteq	sp, r0
    3f0c:	00300150 	eorseq	r0, r0, r0, asr r1
    3f10:	14962900 	ldrne	r2, [r6], #2304	; 0x900
    3f14:	1b010000 	blne	43f1c <__Stack_Size+0x43b1c>
    3f18:	08f60102 	ldmeq	r6!, {r1, r8}^
    3f1c:	1c2a0000 	stcne	0, cr0, [sl], #-0
    3f20:	01000014 	tsteq	r0, r4, lsl r0
    3f24:	020d021d 	andeq	r0, sp, #-805306367	; 0xd0000001
    3f28:	382a0000 	stmdacc	sl!, {}	; <UNPREDICTABLE>
    3f2c:	01000015 	tsteq	r0, r5, lsl r0
    3f30:	003a021e 	eorseq	r0, sl, lr, lsl r2
    3f34:	492a0000 	stmdbmi	sl!, {}	; <UNPREDICTABLE>
    3f38:	01000009 	tsteq	r0, r9
    3f3c:	003a021f 	eorseq	r0, sl, pc, lsl r2
    3f40:	912b0000 	teqls	fp, r0
    3f44:	01000014 	tsteq	r0, r4, lsl r0
    3f48:	2900028b 	stmdbcs	r0, {r0, r1, r3, r7, r9}
    3f4c:	00001498 	muleq	r0, r8, r4
    3f50:	01029701 	tsteq	r2, r1, lsl #14
    3f54:	00000978 	andeq	r0, r0, r8, ror r9
    3f58:	0009562a 	andeq	r5, r9, sl, lsr #12
    3f5c:	02990100 	addseq	r0, r9, #0, 2
    3f60:	00000264 	andeq	r0, r0, r4, ror #4
    3f64:	00141c2a 	andseq	r1, r4, sl, lsr #24
    3f68:	029a0100 	addseq	r0, sl, #0, 2
    3f6c:	0000020d 	andeq	r0, r0, sp, lsl #4
    3f70:	0017812a 	andseq	r8, r7, sl, lsr #2
    3f74:	029b0100 	addseq	r0, fp, #0, 2
    3f78:	0000003a 	andeq	r0, r0, sl, lsr r0
    3f7c:	0017362a 	andseq	r3, r7, sl, lsr #12
    3f80:	029d0100 	addseq	r0, sp, #0, 2
    3f84:	0000003a 	andeq	r0, r0, sl, lsr r0
    3f88:	00143c2a 	andseq	r3, r4, sl, lsr #24
    3f8c:	029d0100 	addseq	r0, sp, #0, 2
    3f90:	0000003a 	andeq	r0, r0, sl, lsr r0
    3f94:	0003432a 	andeq	r4, r3, sl, lsr #6
    3f98:	029e0100 	addseq	r0, lr, #0, 2
    3f9c:	0000003a 	andeq	r0, r0, sl, lsr r0
    3fa0:	000df82a 	andeq	pc, sp, sl, lsr #16
    3fa4:	029e0100 	addseq	r0, lr, #0, 2
    3fa8:	0000003a 	andeq	r0, r0, sl, lsr r0
    3fac:	0009692c 	andeq	r6, r9, ip, lsr #18
    3fb0:	14a42a00 	strtne	r2, [r4], #2560	; 0xa00
    3fb4:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    3fb8:	00005e02 	andeq	r5, r0, r2, lsl #28
    3fbc:	2a2d0000 	bcs	b43fc4 <__Stack_Size+0xb43bc4>
    3fc0:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    3fc4:	6f032501 	svcvs	0x00032501
    3fc8:	00000000 	andeq	r0, r0, r0
    3fcc:	135a2300 	cmpne	sl, #0, 6
    3fd0:	4c010000 	stcmi	0, cr0, [r1], {-0}
    3fd4:	00005e03 	andeq	r5, r0, r3, lsl #28
    3fd8:	0013c000 	andseq	ip, r3, r0
    3fdc:	0002dc08 	andeq	sp, r2, r8, lsl #24
    3fe0:	e69c0100 	ldr	r0, [ip], r0, lsl #2
    3fe4:	2e00000a 	cdpcs	0, 0, cr0, cr0, cr10, {0}
    3fe8:	034f0104 	movteq	r0, #61700	; 0xf104
    3fec:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    3ff0:	0100622f 	tsteq	r0, pc, lsr #4
    3ff4:	01d70351 	bicseq	r0, r7, r1, asr r3
    3ff8:	772f0000 	strvc	r0, [pc, -r0]!
    3ffc:	03520100 	cmpeq	r2, #0, 2
    4000:	00000ae6 	andeq	r0, r0, r6, ror #21
    4004:	171d1a00 	ldrne	r1, [sp, -r0, lsl #20]
    4008:	53010000 	movwpl	r0, #4096	; 0x1000
    400c:	00099203 	andeq	r9, r9, r3, lsl #4
    4010:	0019b300 	andseq	fp, r9, r0, lsl #6
    4014:	08bc3000 	ldmeq	ip!, {ip, sp}
    4018:	14060000 	strne	r0, [r6], #-0
    401c:	00c40800 	sbceq	r0, r4, r0, lsl #16
    4020:	67010000 	strvs	r0, [r1, -r0]
    4024:	000a4003 	andeq	r4, sl, r3
    4028:	14061700 	strne	r1, [r6], #-1792	; 0x700
    402c:	00c40800 	sbceq	r0, r4, r0, lsl #16
    4030:	c9310000 	ldmdbgt	r1!, {}	; <UNPREDICTABLE>
    4034:	d6000008 	strle	r0, [r0], -r8
    4038:	31000019 	tstcc	r0, r9, lsl r0
    403c:	000008d5 	ldrdeq	r0, [r0], -r5
    4040:	00001a7f 	andeq	r1, r0, pc, ror sl
    4044:	0008e131 	andeq	lr, r8, r1, lsr r1
    4048:	001a9200 	andseq	r9, sl, r0, lsl #4
    404c:	08ed3200 	stmiaeq	sp!, {r9, ip, sp}^
    4050:	14c40000 	strbne	r0, [r4], #0
    4054:	16220800 	strtne	r0, [r2], -r0, lsl #16
    4058:	81080014 	tsthi	r8, r4, lsl r0
    405c:	1c000006 	stcne	0, cr0, [r0], {6}
    4060:	08001450 	stmdaeq	r0, {r4, r6, sl, ip}
    4064:	00000a1a 	andeq	r0, r0, sl, lsl sl
    4068:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    406c:	22000074 	andcs	r0, r0, #116	; 0x74
    4070:	08001466 	stmdaeq	r0, {r1, r2, r5, r6, sl, ip}
    4074:	0000082b 	andeq	r0, r0, fp, lsr #16
    4078:	00148222 	andseq	r8, r4, r2, lsr #4
    407c:	0006be08 	andeq	fp, r6, r8, lsl #28
    4080:	14902200 	ldrne	r2, [r0], #512	; 0x200
    4084:	06960800 	ldreq	r0, [r6], r0, lsl #16
    4088:	a2220000 	eorge	r0, r2, #0
    408c:	9c080014 	stcls	0, cr0, [r8], {20}
    4090:	00000007 	andeq	r0, r0, r7
    4094:	08f63300 	ldmeq	r6!, {r8, r9, ip, sp}^
    4098:	14ca0000 	strbne	r0, [sl], #0
    409c:	05600800 	strbeq	r0, [r0, #-2048]!	; 0x800
    40a0:	6c010000 	stcvs	0, cr0, [r1], {-0}
    40a4:	000adc03 	andeq	sp, sl, r3, lsl #24
    40a8:	05603400 	strbeq	r3, [r0, #-1024]!	; 0x400
    40ac:	03310000 	teqeq	r1, #0
    40b0:	b1000009 	tstlt	r0, r9
    40b4:	3100001a 	tstcc	r0, sl, lsl r0
    40b8:	0000090f 	andeq	r0, r0, pc, lsl #18
    40bc:	00001b48 	andeq	r1, r0, r8, asr #22
    40c0:	00091b31 	andeq	r1, r9, r1, lsr fp
    40c4:	001b8800 	andseq	r8, fp, r0, lsl #16
    40c8:	09273100 	stmdbeq	r7!, {r8, ip, sp}
    40cc:	1bb10000 	blne	fec440d4 <BootRAM+0xdbb4875>
    40d0:	33310000 	teqcc	r1, #0
    40d4:	c4000009 	strgt	r0, [r0], #-9
    40d8:	3100001b 	tstcc	r0, fp, lsl r0
    40dc:	0000093f 	andeq	r0, r0, pc, lsr r9
    40e0:	00001bdf 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    40e4:	00094b31 	andeq	r4, r9, r1, lsr fp
    40e8:	001bff00 	andseq	pc, fp, r0, lsl #30
    40ec:	14d41500 	ldrbne	r1, [r4], #1280	; 0x500
    40f0:	002c0800 	eoreq	r0, ip, r0, lsl #16
    40f4:	0aaf0000 	beq	febc40fc <BootRAM+0xdb3489d>
    40f8:	5c310000 	ldcpl	0, cr0, [r1], #-0
    40fc:	12000009 	andne	r0, r0, #9
    4100:	0000001c 	andeq	r0, r0, ip, lsl r0
    4104:	00160815 	andseq	r0, r6, r5, lsl r8
    4108:	00006008 	andeq	r6, r0, r8
    410c:	000ace00 	andeq	ip, sl, r0, lsl #28
    4110:	096a3500 	stmdbeq	sl!, {r8, sl, ip, sp}^
    4114:	91020000 	mrsls	r0, (UNDEF: 2)
    4118:	1666226c 	strbtne	r2, [r6], -ip, ror #4
    411c:	05b60800 	ldreq	r0, [r6, #2048]!	; 0x800
    4120:	36000000 	strcc	r0, [r0], -r0
    4124:	080015ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sl, ip}
    4128:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    412c:	00000074 	andeq	r0, r0, r4, ror r0
    4130:	16782200 	ldrbtne	r2, [r8], -r0, lsl #4
    4134:	08920800 	ldmeq	r2, {fp}
    4138:	0b000000 	bleq	4140 <__Stack_Size+0x3d40>
    413c:	00004c04 	andeq	r4, r0, r4, lsl #24
    4140:	17692900 	strbne	r2, [r9, -r0, lsl #18]!
    4144:	a7010000 	strge	r0, [r1, -r0]
    4148:	0b2c0101 	bleq	b04554 <__Stack_Size+0xb04154>
    414c:	222a0000 	eorcs	r0, sl, #0
    4150:	01000017 	tsteq	r0, r7, lsl r0
    4154:	067b01a9 	ldrbteq	r0, [fp], -r9, lsr #3
    4158:	e42a0000 	strt	r0, [sl], #-0
    415c:	01000014 	tsteq	r0, r4, lsl r0
    4160:	003a01aa 	eorseq	r0, sl, sl, lsr #3
    4164:	2a2d0000 	bcs	b4416c <__Stack_Size+0xb43d6c>
    4168:	00001435 	andeq	r1, r0, r5, lsr r4
    416c:	d701b001 	strle	fp, [r1, -r1]
    4170:	2a000001 	bcs	417c <__Stack_Size+0x3d7c>
    4174:	000014ea 	andeq	r1, r0, sl, ror #9
    4178:	3a01b101 	bcc	70584 <__Stack_Size+0x70184>
    417c:	00000000 	andeq	r0, r0, r0
    4180:	13a42300 			; <UNDEFINED> instruction: 0x13a42300
    4184:	a0010000 	andge	r0, r1, r0
    4188:	00005e03 	andeq	r5, r0, r3, lsl #28
    418c:	00169c00 	andseq	r9, r6, r0, lsl #24
    4190:	0000c808 	andeq	ip, r0, r8, lsl #16
    4194:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
    4198:	1a00000b 	bne	41cc <__Stack_Size+0x3dcc>
    419c:	00000949 	andeq	r0, r0, r9, asr #18
    41a0:	3a03a201 	bcc	ec9ac <__Stack_Size+0xec5ac>
    41a4:	3c000000 	stccc	0, cr0, [r0], {-0}
    41a8:	3000001c 	andcc	r0, r0, ip, lsl r0
    41ac:	00000aec 	andeq	r0, r0, ip, ror #21
    41b0:	080016ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, ip}
    41b4:	0000007e 	andeq	r0, r0, lr, ror r0
    41b8:	f403a601 	vst1.8	{d10-d12}, [r3], r1
    41bc:	1700000b 	strne	r0, [r0, -fp]
    41c0:	080016ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, ip}
    41c4:	0000007e 	andeq	r0, r0, lr, ror r0
    41c8:	000af931 	andeq	pc, sl, r1, lsr r9	; <UNPREDICTABLE>
    41cc:	001c8900 	andseq	r8, ip, r0, lsl #18
    41d0:	0b053100 	bleq	1505d8 <__Stack_Size+0x1501d8>
    41d4:	1c9e0000 	ldcne	0, cr0, [lr], {0}
    41d8:	b4150000 	ldrlt	r0, [r5], #-0
    41dc:	2a080016 	bcs	20423c <__Stack_Size+0x203e3c>
    41e0:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    41e4:	3100000b 	tstcc	r0, fp
    41e8:	00000b12 	andeq	r0, r0, r2, lsl fp
    41ec:	00001cb1 			; <UNDEFINED> instruction: 0x00001cb1
    41f0:	000b1e31 	andeq	r1, fp, r1, lsr lr
    41f4:	001ccf00 	andseq	ip, ip, r0, lsl #30
    41f8:	16c01c00 	strbne	r1, [r0], r0, lsl #24
    41fc:	0bb40800 	bleq	fed06204 <BootRAM+0xdc769a5>
    4200:	011d0000 	tsteq	sp, r0
    4204:	00760250 	rsbseq	r0, r6, r0, asr r2
    4208:	16d41e00 	ldrbne	r1, [r4], r0, lsl #28
    420c:	0db60800 	ldceq	8, cr0, [r6]
    4210:	0bc70000 	bleq	ff1c4218 <BootRAM+0xe1349b9>
    4214:	011d0000 	tsteq	sp, r0
    4218:	00300150 	eorseq	r0, r0, r0, asr r1
    421c:	0016de1f 	andseq	sp, r6, pc, lsl lr
    4220:	000dcc08 	andeq	ip, sp, r8, lsl #24
    4224:	52011d00 	andpl	r1, r1, #0, 26
    4228:	1d007602 	stcne	6, cr7, [r0, #-8]
    422c:	77025001 	strvc	r5, [r2, -r1]
    4230:	1f000000 	svcne	0x00000000
    4234:	080016f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl, ip}
    4238:	00000d4d 	andeq	r0, r0, sp, asr #26
    423c:	0151011d 	cmpeq	r1, sp, lsl r1
    4240:	50011d30 	andpl	r1, r1, r0, lsr sp
    4244:	00003001 	andeq	r3, r0, r1
    4248:	174a3700 	strbne	r3, [sl, -r0, lsl #14]
    424c:	08920800 	ldmeq	r2, {fp}
    4250:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    4254:	00000021 	andeq	r0, r0, r1, lsr #32
    4258:	6403dd01 	strvs	sp, [r3], #-3329	; 0xd01
    425c:	38080017 	stmdacc	r8, {r0, r1, r2, r4}
    4260:	01000000 	mrseq	r0, (UNDEF: 0)
    4264:	000c439c 	muleq	ip, ip, r3
    4268:	61563900 	cmpvs	r6, r0, lsl #18
    426c:	dd01006c 	stcle	0, cr0, [r1, #-432]	; 0xfffffe50
    4270:	00005e03 	andeq	r5, r0, r3, lsl #28
    4274:	001d0200 	andseq	r0, sp, r0, lsl #4
    4278:	00692400 	rsbeq	r2, r9, r0, lsl #8
    427c:	3a03df01 	bcc	fbe88 <__Stack_Size+0xfba88>
    4280:	23000000 	movwcs	r0, #0
    4284:	2400001d 	strcs	r0, [r0], #-29
    4288:	0050456e 	subseq	r4, r0, lr, ror #10
    428c:	3a03e001 	bcc	fc298 <__Stack_Size+0xfbe98>
    4290:	42000000 	andmi	r0, r0, #0
    4294:	0000001d 	andeq	r0, r0, sp, lsl r0
    4298:	00139823 	andseq	r9, r3, r3, lsr #16
    429c:	03780100 	cmneq	r8, #0, 2
    42a0:	0000005e 	andeq	r0, r0, lr, asr r0
    42a4:	0800179c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip}
    42a8:	0000005c 	andeq	r0, r0, ip, asr r0
    42ac:	0c899c01 	stceq	12, cr9, [r9], {1}
    42b0:	491a0000 	ldmdbmi	sl, {}	; <UNPREDICTABLE>
    42b4:	01000009 	tsteq	r0, r9
    42b8:	003a037a 	eorseq	r0, sl, sl, ror r3
    42bc:	1d550000 	ldclne	0, cr0, [r5, #-0]
    42c0:	b0220000 	eorlt	r0, r2, r0
    42c4:	b6080017 			; <UNDEFINED> instruction: 0xb6080017
    42c8:	22000005 	andcs	r0, r0, #5
    42cc:	080017cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, ip}
    42d0:	00000bfe 	strdeq	r0, [r0], -lr
    42d4:	0017ea37 	andseq	lr, r7, r7, lsr sl
    42d8:	00089208 	andeq	r9, r8, r8, lsl #4
    42dc:	fe3a0000 	cdp2	0, 3, cr0, cr10, cr0, {0}
    42e0:	01000014 	tsteq	r0, r4, lsl r0
    42e4:	000003f1 	strdeq	r0, [r0], -r1
    42e8:	00020000 	andeq	r0, r2, r0
    42ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    42f0:	0006173b 	andeq	r1, r6, fp, lsr r7
    42f4:	6bec0400 	blvs	ffb052fc <BootRAM+0xea75a9d>
    42f8:	3b000004 	blcc	4310 <__Stack_Size+0x3f10>
    42fc:	0000026c 	andeq	r0, r0, ip, ror #4
    4300:	029aee04 	addseq	lr, sl, #4, 28	; 0x40
    4304:	693b0000 	ldmdbvs	fp!, {}	; <UNPREDICTABLE>
    4308:	04000013 	streq	r0, [r0], #-19
    430c:	00004cf2 	strdeq	r4, [r0], -r2
    4310:	13743b00 	cmnne	r4, #0, 22
    4314:	f3040000 	vhadd.u8	d0, d4, d0
    4318:	0000004c 	andeq	r0, r0, ip, asr #32
    431c:	0002a23b 	andeq	sl, r2, fp, lsr r2
    4320:	d2220500 	eorle	r0, r2, #0, 10
    4324:	0b00000c 	bleq	435c <__Stack_Size+0x3f5c>
    4328:	00038104 	andeq	r8, r3, r4, lsl #2
    432c:	055f3b00 	ldrbeq	r3, [pc, #-2816]	; 3834 <__Stack_Size+0x3434>
    4330:	25050000 	strcs	r0, [r5, #-0]
    4334:	00000ce3 	andeq	r0, r0, r3, ror #25
    4338:	046b040b 	strbteq	r0, [fp], #-1035	; 0x40b
    433c:	d63b0000 	ldrtle	r0, [fp], -r0
    4340:	05000013 	streq	r0, [r0, #-19]
    4344:	000cf42a 	andeq	pc, ip, sl, lsr #8
    4348:	ef040b00 	svc	0x00040b00
    434c:	3c000004 	stccc	0, cr0, [r0], {4}
    4350:	00001747 	andeq	r1, r0, r7, asr #14
    4354:	02e52401 	rsceq	r2, r5, #16777216	; 0x1000000
    4358:	03050000 	movweq	r0, #20480	; 0x5000
    435c:	20000202 	andcs	r0, r0, r2, lsl #4
    4360:	0015833c 	andseq	r8, r5, ip, lsr r3
    4364:	94250100 	strtls	r0, [r5], #-256	; 0x100
    4368:	05000000 	streq	r0, [r0, #-0]
    436c:	000a1c03 	andeq	r1, sl, r3, lsl #24
    4370:	12fb3d20 	rscsne	r3, fp, #32, 26	; 0x800
    4374:	53070000 	movwpl	r0, #28672	; 0x7000
    4378:	00004c02 	andeq	r4, r0, r2, lsl #24
    437c:	000d3200 	andeq	r3, sp, r0, lsl #4
    4380:	005e0d00 	subseq	r0, lr, r0, lsl #26
    4384:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    4388:	000014d0 	ldrdeq	r1, [r0], -r0
    438c:	0d4d1906 	stcleq	9, cr1, [sp, #-24]	; 0xffffffe8
    4390:	d70d0000 	strle	r0, [sp, -r0]
    4394:	0d000001 	stceq	0, cr0, [r0, #-4]
    4398:	0000004c 	andeq	r0, r0, ip, asr #32
    439c:	00004c0d 	andeq	r4, r0, sp, lsl #24
    43a0:	cd3f0000 	ldcgt	0, cr0, [pc, #-0]	; 43a8 <__Stack_Size+0x3fa8>
    43a4:	07000011 	smladeq	r0, r1, r0, r0
    43a8:	0d640256 	sfmeq	f0, 2, [r4, #-344]!	; 0xfffffea8
    43ac:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    43b0:	0d000000 	stceq	0, cr0, [r0, #-0]
    43b4:	0000004c 	andeq	r0, r0, ip, asr #32
    43b8:	13073f00 	movwne	r3, #32512	; 0x7f00
    43bc:	4e070000 	cdpmi	0, 0, cr0, cr7, cr0, {0}
    43c0:	000d7602 	andeq	r7, sp, r2, lsl #12
    43c4:	005e0d00 	subseq	r0, lr, r0, lsl #26
    43c8:	3f000000 	svccc	0x00000000
    43cc:	00001314 	andeq	r1, r0, r4, lsl r3
    43d0:	8d023a07 	vstrhi	s6, [r2, #-28]	; 0xffffffe4
    43d4:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    43d8:	0000005e 	andeq	r0, r0, lr, asr r0
    43dc:	00004c0d 	andeq	r4, r0, sp, lsl #24
    43e0:	bd3f0000 	ldclt	0, cr0, [pc, #-0]	; 43e8 <__Stack_Size+0x3fe8>
    43e4:	07000007 	streq	r0, [r0, -r7]
    43e8:	0da40257 	sfmeq	f0, 4, [r4, #348]!	; 0x15c
    43ec:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    43f0:	0d000000 	stceq	0, cr0, [r0, #-0]
    43f4:	0000004c 	andeq	r0, r0, ip, asr #32
    43f8:	10543f00 	subsne	r3, r4, r0, lsl #30
    43fc:	4d070000 	stcmi	0, cr0, [r7, #-0]
    4400:	000db602 	andeq	fp, sp, r2, lsl #12
    4404:	005e0d00 	subseq	r0, lr, r0, lsl #26
    4408:	3d000000 	stccc	0, cr0, [r0, #-0]
    440c:	000010de 	ldrdeq	r1, [r0], -lr
    4410:	4c025407 	cfstrsmi	mvf5, [r2], {7}
    4414:	cc000000 	stcgt	0, cr0, [r0], {-0}
    4418:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    441c:	0000005e 	andeq	r0, r0, lr, asr r0
    4420:	167d4000 	ldrbtne	r4, [sp], -r0
    4424:	1a060000 	bne	18442c <__Stack_Size+0x18402c>
    4428:	0001d70d 	andeq	sp, r1, sp, lsl #14
    442c:	004c0d00 	subeq	r0, ip, r0, lsl #26
    4430:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    4434:	00000000 	andeq	r0, r0, r0
    4438:	00017000 	andeq	r7, r1, r0
    443c:	f0000400 			; <UNDEFINED> instruction: 0xf0000400
    4440:	04000013 	streq	r0, [r0], #-19
    4444:	00017e01 	andeq	r7, r1, r1, lsl #28
    4448:	17b70100 	ldrne	r0, [r7, r0, lsl #2]!
    444c:	00320000 	eorseq	r0, r2, r0
    4450:	06000000 	streq	r0, [r0], -r0
    4454:	00000000 	andeq	r0, r0, r0
    4458:	13f80000 	mvnsne	r0, #0
    445c:	04020000 	streq	r0, [r2], #-0
    4460:	00021c05 	andeq	r1, r2, r5, lsl #24
    4464:	05020200 	streq	r0, [r2, #-512]	; 0x200
    4468:	000006c8 	andeq	r0, r0, r8, asr #13
    446c:	74060102 	strvc	r0, [r6], #-258	; 0x102
    4470:	03000006 	movweq	r0, #6
    4474:	00323375 	eorseq	r3, r2, r5, ror r3
    4478:	00452402 	subeq	r2, r5, r2, lsl #8
    447c:	04020000 	streq	r0, [r2], #-0
    4480:	0003a107 	andeq	sl, r3, r7, lsl #2
    4484:	31750300 	cmncc	r5, r0, lsl #6
    4488:	25020036 	strcs	r0, [r2, #-54]	; 0x36
    448c:	00000057 	andeq	r0, r0, r7, asr r0
    4490:	fd070202 	stc2	2, cr0, [r7, #-8]
    4494:	03000003 	movweq	r0, #3
    4498:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    449c:	00006826 	andeq	r6, r0, r6, lsr #16
    44a0:	08010200 	stmdaeq	r1, {r9}
    44a4:	00000672 	andeq	r0, r0, r2, ror r6
    44a8:	005e0404 	subseq	r0, lr, r4, lsl #8
    44ac:	d0050000 	andle	r0, r5, r0
    44b0:	01000014 	tsteq	r0, r4, lsl r0
    44b4:	0017f823 	andseq	pc, r7, r3, lsr #16
    44b8:	00003008 	andeq	r3, r0, r8
    44bc:	fd9c0100 	ldc2	1, cr0, [ip]
    44c0:	06000000 	streq	r0, [r0], -r0
    44c4:	000017d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    44c8:	006f2301 	rsbeq	r2, pc, r1, lsl #6
    44cc:	1d9b0000 	ldcne	0, cr0, [fp]
    44d0:	e6060000 	str	r0, [r6], -r0
    44d4:	01000017 	tsteq	r0, r7, lsl r0
    44d8:	00004c23 	andeq	r4, r0, r3, lsr #24
    44dc:	001de000 	andseq	lr, sp, r0
    44e0:	17c90600 	strbne	r0, [r9, r0, lsl #12]
    44e4:	23010000 	movwcs	r0, #4096	; 0x1000
    44e8:	0000004c 	andeq	r0, r0, ip, asr #32
    44ec:	00001e01 	andeq	r1, r0, r1, lsl #28
    44f0:	01006e07 	tsteq	r0, r7, lsl #28
    44f4:	00003a25 	andeq	r3, r0, r5, lsr #20
    44f8:	08520100 	ldmdaeq	r2, {r8}^
    44fc:	26010069 	strcs	r0, [r1], -r9, rrx
    4500:	0000003a 	andeq	r0, r0, sl, lsr r0
    4504:	00001e22 	andeq	r1, r0, r2, lsr #28
    4508:	0017da09 	andseq	sp, r7, r9, lsl #20
    450c:	3a260100 	bcc	984914 <__Stack_Size+0x984514>
    4510:	81000000 	mrshi	r0, (UNDEF: 0)
    4514:	0900001e 	stmdbeq	r0, {r1, r2, r3, r4}
    4518:	000017e0 	andeq	r1, r0, r0, ror #15
    451c:	003a2601 	eorseq	r2, sl, r1, lsl #12
    4520:	1eb80000 	cdpne	0, 11, cr0, cr8, cr0, {0}
    4524:	f2090000 	vhadd.s8	d0, d9, d0
    4528:	01000017 	tsteq	r0, r7, lsl r0
    452c:	0000fd27 	andeq	pc, r0, r7, lsr #26
    4530:	001edc00 	andseq	sp, lr, r0, lsl #24
    4534:	04040000 	streq	r0, [r4], #-0
    4538:	0000004c 	andeq	r0, r0, ip, asr #32
    453c:	00167d05 	andseq	r7, r6, r5, lsl #26
    4540:	283c0100 	ldmdacs	ip!, {r8}
    4544:	24080018 	strcs	r0, [r8], #-24
    4548:	01000000 	mrseq	r0, (UNDEF: 0)
    454c:	00016d9c 	muleq	r1, ip, sp
    4550:	17d10600 	ldrbne	r0, [r1, r0, lsl #12]
    4554:	3c010000 	stccc	0, cr0, [r1], {-0}
    4558:	0000006f 	andeq	r0, r0, pc, rrx
    455c:	00001f17 	andeq	r1, r0, r7, lsl pc
    4560:	0017e606 	andseq	lr, r7, r6, lsl #12
    4564:	4c3c0100 	ldfmis	f0, [ip], #-0
    4568:	52000000 	andpl	r0, r0, #0
    456c:	0600001f 			; <UNDEFINED> instruction: 0x0600001f
    4570:	000017c9 	andeq	r1, r0, r9, asr #15
    4574:	004c3c01 	subeq	r3, ip, r1, lsl #24
    4578:	1f730000 	svcne	0x00730000
    457c:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    4580:	3a3e0100 	bcc	f84988 <__Stack_Size+0xf84588>
    4584:	01000000 	mrseq	r0, (UNDEF: 0)
    4588:	00690852 	rsbeq	r0, r9, r2, asr r8
    458c:	003a3f01 	eorseq	r3, sl, r1, lsl #30
    4590:	1f940000 	svcne	0x00940000
    4594:	f2090000 	vhadd.s8	d0, d9, d0
    4598:	01000017 	tsteq	r0, r7, lsl r0
    459c:	00016d40 	andeq	r6, r1, r0, asr #26
    45a0:	001ff300 	andseq	pc, pc, r0, lsl #6
    45a4:	04040000 	streq	r0, [r4], #-0
    45a8:	0000003a 	andeq	r0, r0, sl, lsr r0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	03065506 	movweq	r5, #25862	; 0x6506
       8:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
       c:	00051308 	andeq	r1, r5, r8, lsl #6
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	11010000 	mrsne	r0, (UNDEF: 1)
      14:	11061000 	mrsne	r1, (UNDEF: 6)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	03011201 	movweq	r1, #4609	; 0x1201
      1c:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	00051308 	andeq	r1, r5, r8, lsl #6
      24:	11010000 	mrsne	r0, (UNDEF: 1)
      28:	130e2501 	movwne	r2, #58625	; 0xe501
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	1b0e030b 	blne	380c60 <__Stack_Size+0x380860>
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	1117550e 	tstne	r7, lr, lsl #10
      34:	00171001 	andseq	r1, r7, r1
      38:	00240200 	eoreq	r0, r4, r0, lsl #4

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	0b3e0b0b 	bleq	f82c70 <__Stack_Size+0xf82870>

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	00000e03 	andeq	r0, r0, r3, lsl #28
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	03001603 	movweq	r1, #1539	; 0x603
      48:	3b0b3a08 	blcc	2ce870 <__Stack_Size+0x2ce470>
      4c:	0013490b 	andseq	r4, r3, fp, lsl #18

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	00160400 	andseq	r0, r6, r0, lsl #8
      54:	0b3a0e03 	bleq	e83868 <__Stack_Size+0xe83468>
      58:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      5c:	35050000 	strcc	r0, [r5, #-0]
      60:	00134900 	andseq	r4, r3, r0, lsl #18
      64:	01040600 	tsteq	r4, r0, lsl #12
      68:	0b3a0b0b 	bleq	e82c9c <__Stack_Size+0xe8289c>
      6c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      70:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
      74:	1c0e0300 	stcne	3, cr0, [lr], {-0}
      78:	0800000d 	stmdaeq	r0, {r0, r2, r3}
      7c:	0b0b0113 	bleq	2c04d0 <__Stack_Size+0x2c00d0>
      80:	0b3b0b3a 	bleq	ec2d70 <__Stack_Size+0xec2970>
      84:	00001301 	andeq	r1, r0, r1, lsl #6
      88:	03000d09 	movweq	r0, #3337	; 0xd09
      8c:	3b0b3a0e 	blcc	2ce8cc <__Stack_Size+0x2ce4cc>
      90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      94:	0a00000b 	beq	c8 <_Minimum_Stack_Size-0x38>
      98:	0b0b000f 	bleq	2c00dc <__Stack_Size+0x2bfcdc>
      9c:	00001349 	andeq	r1, r0, r9, asr #6
      a0:	2700150b 	strcs	r1, [r0, -fp, lsl #10]
      a4:	0c000019 	stceq	0, cr0, [r0], {25}
      a8:	0e030104 	adfeqs	f0, f3, f4
      ac:	0b3a0b0b 	bleq	e82ce0 <__Stack_Size+0xe828e0>
      b0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      b4:	130d0000 	movwne	r0, #53248	; 0xd000
      b8:	0b0e0301 	bleq	380cc4 <__Stack_Size+0x3808c4>
      bc:	3b0b3a0b 	blcc	2ce8f0 <__Stack_Size+0x2ce4f0>
      c0:	0013010b 	andseq	r0, r3, fp, lsl #2
      c4:	01150e00 	tsteq	r5, r0, lsl #28
      c8:	13491927 	movtne	r1, #39207	; 0x9927
      cc:	00001301 	andeq	r1, r0, r1, lsl #6
      d0:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
      d4:	10000013 	andne	r0, r0, r3, lsl r0
      d8:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
      dc:	0b3a0b0b 	bleq	e82d10 <__Stack_Size+0xe82910>
      e0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      e4:	0d110000 	ldceq	0, cr0, [r1, #-0]
      e8:	3a080300 	bcc	200cf0 <__Stack_Size+0x2008f0>
      ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      f0:	000b3813 	andeq	r3, fp, r3, lsl r8
      f4:	01171200 	tsteq	r7, r0, lsl #4
      f8:	0b3a0b0b 	bleq	e82d2c <__Stack_Size+0xe8292c>
      fc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     100:	0d130000 	ldceq	0, cr0, [r3, #-0]
     104:	3a080300 	bcc	200d0c <__Stack_Size+0x20090c>
     108:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     10c:	14000013 	strne	r0, [r0], #-19
     110:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     114:	0b3a0e03 	bleq	e83928 <__Stack_Size+0xe83528>
     118:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     11c:	0b201349 	bleq	804e48 <__Stack_Size+0x804a48>
     120:	00001301 	andeq	r1, r0, r1, lsl #6
     124:	03000515 	movweq	r0, #1301	; 0x515
     128:	3b0b3a0e 	blcc	2ce968 <__Stack_Size+0x2ce568>
     12c:	00134905 	andseq	r4, r3, r5, lsl #18
     130:	002e1600 	eoreq	r1, lr, r0, lsl #12
     134:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     138:	0b3b0b3a 	bleq	ec2e28 <__Stack_Size+0xec2a28>
     13c:	0b201927 	bleq	8065e0 <__Stack_Size+0x8061e0>
     140:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
     144:	03193f00 	tsteq	r9, #0, 30
     148:	3b0b3a0e 	blcc	2ce988 <__Stack_Size+0x2ce588>
     14c:	1119270b 	tstne	r9, fp, lsl #14
     150:	40061201 	andmi	r1, r6, r1, lsl #4
     154:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     158:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     15c:	03193f00 	tsteq	r9, #0, 30
     160:	3b0b3a0e 	blcc	2ce9a0 <__Stack_Size+0x2ce5a0>
     164:	11192705 	tstne	r9, r5, lsl #14
     168:	40061201 	andmi	r1, r6, r1, lsl #4
     16c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     170:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     174:	03193f01 	tsteq	r9, #1, 30
     178:	3b0b3a0e 	blcc	2ce9b8 <__Stack_Size+0x2ce5b8>
     17c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     180:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     184:	97184006 	ldrls	r4, [r8, -r6]
     188:	13011942 	movwne	r1, #6466	; 0x1942
     18c:	051a0000 	ldreq	r0, [sl, #-0]
     190:	3a0e0300 	bcc	380d98 <__Stack_Size+0x380998>
     194:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     198:	00170213 	andseq	r0, r7, r3, lsl r2
     19c:	00051b00 	andeq	r1, r5, r0, lsl #22
     1a0:	0b3a0e03 	bleq	e839b4 <__Stack_Size+0xe835b4>
     1a4:	1349053b 	movtne	r0, #38203	; 0x953b
     1a8:	00001802 	andeq	r1, r0, r2, lsl #16
     1ac:	3f012e1c 	svccc	0x00012e1c
     1b0:	3a0e0319 	bcc	380e1c <__Stack_Size+0x380a1c>
     1b4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     1b8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     1bc:	97184006 	ldrls	r4, [r8, -r6]
     1c0:	13011942 	movwne	r1, #6466	; 0x1942
     1c4:	0b1d0000 	bleq	7401cc <__Stack_Size+0x73fdcc>
     1c8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     1cc:	00130106 	andseq	r0, r3, r6, lsl #2
     1d0:	00341e00 	eorseq	r1, r4, r0, lsl #28
     1d4:	0b3a0e03 	bleq	e839e8 <__Stack_Size+0xe835e8>
     1d8:	1349053b 	movtne	r0, #38203	; 0x953b
     1dc:	00001702 	andeq	r1, r0, r2, lsl #14
     1e0:	0182891f 	orreq	r8, r2, pc, lsl r9
     1e4:	31011100 	mrscc	r1, (UNDEF: 17)
     1e8:	20000013 	andcs	r0, r0, r3, lsl r0
     1ec:	01018289 	smlabbeq	r1, r9, r2, r8
     1f0:	13310111 	teqne	r1, #1073741828	; 0x40000004
     1f4:	00001301 	andeq	r1, r0, r1, lsl #6
     1f8:	01828a21 	orreq	r8, r2, r1, lsr #20
     1fc:	91180200 	tstls	r8, r0, lsl #4
     200:	00001842 	andeq	r1, r0, r2, asr #16
     204:	01828922 	orreq	r8, r2, r2, lsr #18
     208:	95011101 	strls	r1, [r1, #-257]	; 0x101
     20c:	13311942 	teqne	r1, #1081344	; 0x108000
     210:	89230000 	stmdbhi	r3!, {}	; <UNPREDICTABLE>
     214:	11010182 	smlabbne	r1, r2, r1, r0
     218:	24000001 	strcs	r0, [r0], #-1
     21c:	08030005 	stmdaeq	r3, {r0, r2}
     220:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     224:	17021349 	strne	r1, [r2, -r9, asr #6]
     228:	89250000 	stmdbhi	r5!, {}	; <UNPREDICTABLE>
     22c:	11000182 	smlabbne	r0, r2, r1, r0
     230:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     234:	00001331 	andeq	r1, r0, r1, lsr r3
     238:	03003426 	movweq	r3, #1062	; 0x426
     23c:	3b0b3a0e 	blcc	2cea7c <__Stack_Size+0x2ce67c>
     240:	00134905 	andseq	r4, r3, r5, lsl #18
     244:	012e2700 	teqeq	lr, r0, lsl #14
     248:	01111331 	tsteq	r1, r1, lsr r3
     24c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     250:	01194297 			; <UNDEFINED> instruction: 0x01194297
     254:	28000013 	stmdacs	r0, {r0, r1, r4}
     258:	13310005 	teqne	r1, #5
     25c:	00001702 	andeq	r1, r0, r2, lsl #14
     260:	11010b29 	tstne	r1, r9, lsr #22
     264:	00061201 	andeq	r1, r6, r1, lsl #4
     268:	012e2a00 	teqeq	lr, r0, lsl #20
     26c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     270:	0b3b0b3a 	bleq	ec2f60 <__Stack_Size+0xec2b60>
     274:	01111927 	tsteq	r1, r7, lsr #18
     278:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     27c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     280:	2b000013 	blcs	2d4 <_Minimum_Stack_Size+0x1d4>
     284:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     288:	0b3b0b3a 	bleq	ec2f78 <__Stack_Size+0xec2b78>
     28c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     290:	1d2c0000 	stcne	0, cr0, [ip, #-0]
     294:	11133101 	tstne	r3, r1, lsl #2
     298:	58061201 	stmdapl	r6, {r0, r9, ip}
     29c:	010b590b 	tsteq	fp, fp, lsl #18
     2a0:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     2a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     2a8:	0b3b0b3a 	bleq	ec2f98 <__Stack_Size+0xec2b98>
     2ac:	17021349 	strne	r1, [r2, -r9, asr #6]
     2b0:	052e0000 	streq	r0, [lr, #-0]!
     2b4:	3a0e0300 	bcc	380ebc <__Stack_Size+0x380abc>
     2b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2bc:	00170213 	andseq	r0, r7, r3, lsl r2
     2c0:	012e2f00 	teqeq	lr, r0, lsl #30
     2c4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     2c8:	0b3b0b3a 	bleq	ec2fb8 <__Stack_Size+0xec2bb8>
     2cc:	13491927 	movtne	r1, #39207	; 0x9927
     2d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     2d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     2d8:	00130119 	andseq	r0, r3, r9, lsl r1
     2dc:	00343000 	eorseq	r3, r4, r0
     2e0:	0b3a0e03 	bleq	e83af4 <__Stack_Size+0xe836f4>
     2e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2e8:	00000b1c 	andeq	r0, r0, ip, lsl fp
     2ec:	3f002e31 	svccc	0x00002e31
     2f0:	3a0e0319 	bcc	380f5c <__Stack_Size+0x380b5c>
     2f4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     2f8:	11134919 	tstne	r3, r9, lsl r9
     2fc:	40061201 	andmi	r1, r6, r1, lsl #4
     300:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     304:	34320000 	ldrtcc	r0, [r2], #-0
     308:	3a0e0300 	bcc	380f10 <__Stack_Size+0x380b10>
     30c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     310:	00180213 	andseq	r0, r8, r3, lsl r2
     314:	82893300 	addhi	r3, r9, #0, 6
     318:	01110101 	tsteq	r1, r1, lsl #2
     31c:	00001331 	andeq	r1, r0, r1, lsr r3
     320:	3f012e34 	svccc	0x00012e34
     324:	3a0e0319 	bcc	380f90 <__Stack_Size+0x380b90>
     328:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     32c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     330:	96184006 	ldrls	r4, [r8], -r6
     334:	13011942 	movwne	r1, #6466	; 0x1942
     338:	34350000 	ldrtcc	r0, [r5], #-0
     33c:	3a0e0300 	bcc	380f44 <__Stack_Size+0x380b44>
     340:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     344:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     348:	36000018 			; <UNDEFINED> instruction: 0x36000018
     34c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     350:	0b3b0b3a 	bleq	ec3040 <__Stack_Size+0xec2c40>
     354:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     358:	0000193c 	andeq	r1, r0, ip, lsr r9
     35c:	49010137 	stmdbmi	r1, {r0, r1, r2, r4, r5, r8}
     360:	00130113 	andseq	r0, r3, r3, lsl r1
     364:	00213800 	eoreq	r3, r1, r0, lsl #16
     368:	0b2f1349 	bleq	bc5094 <__Stack_Size+0xbc4c94>
     36c:	24390000 	ldrtcs	r0, [r9], #-0
     370:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     374:	0008030b 	andeq	r0, r8, fp, lsl #6
     378:	00213a00 	eoreq	r3, r1, r0, lsl #20
     37c:	2e3b0000 	cdpcs	0, 3, cr0, cr11, cr0, {0}
     380:	03193f00 	tsteq	r9, #0, 30
     384:	3b0b3a0e 	blcc	2cebc4 <__Stack_Size+0x2ce7c4>
     388:	3c19270b 	ldccc	7, cr2, [r9], {11}
     38c:	3c000019 	stccc	0, cr0, [r0], {25}
     390:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     394:	0b3a0e03 	bleq	e83ba8 <__Stack_Size+0xe837a8>
     398:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     39c:	1301193c 	movwne	r1, #6460	; 0x193c
     3a0:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
     3a4:	03193f01 	tsteq	r9, #1, 30
     3a8:	3b0b3a0e 	blcc	2cebe8 <__Stack_Size+0x2ce7e8>
     3ac:	3c19270b 	ldccc	7, cr2, [r9], {11}
     3b0:	00130119 	andseq	r0, r3, r9, lsl r1
     3b4:	002e3e00 	eoreq	r3, lr, r0, lsl #28
     3b8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     3bc:	0b3b0b3a 	bleq	ec30ac <__Stack_Size+0xec2cac>
     3c0:	13491927 	movtne	r1, #39207	; 0x9927
     3c4:	0000193c 	andeq	r1, r0, ip, lsr r9
     3c8:	3f012e3f 	svccc	0x00012e3f
     3cc:	3a0e0319 	bcc	381038 <__Stack_Size+0x380c38>
     3d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     3d4:	3c134919 	ldccc	9, cr4, [r3], {25}
     3d8:	00130119 	andseq	r0, r3, r9, lsl r1
     3dc:	002e4000 	eoreq	r4, lr, r0
     3e0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     3e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     3e8:	13491927 	movtne	r1, #39207	; 0x9927
     3ec:	0000193c 	andeq	r1, r0, ip, lsr r9
     3f0:	01110100 	tsteq	r1, r0, lsl #2
     3f4:	0b130e25 	bleq	4c3c90 <__Stack_Size+0x4c3890>
     3f8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     3fc:	00001710 	andeq	r1, r0, r0, lsl r7
     400:	0b002402 	bleq	9410 <__Stack_Size+0x9010>
     404:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     408:	0300000e 	movweq	r0, #14
     40c:	08030016 	stmdaeq	r3, {r1, r2, r4}
     410:	0b3b0b3a 	bleq	ec3100 <__Stack_Size+0xec2d00>
     414:	00001349 	andeq	r1, r0, r9, asr #6
     418:	03011304 	movweq	r1, #4868	; 0x1304
     41c:	3a0b0b0e 	bcc	2c305c <__Stack_Size+0x2c2c5c>
     420:	010b3b0b 	tsteq	fp, fp, lsl #22
     424:	05000013 	streq	r0, [r0, #-19]
     428:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     42c:	0b3b0b3a 	bleq	ec311c <__Stack_Size+0xec2d1c>
     430:	0b381349 	bleq	e0515c <__Stack_Size+0xe04d5c>
     434:	0f060000 	svceq	0x00060000
     438:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     43c:	07000013 	smladeq	r0, r3, r0, r0
     440:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     444:	0b3b0b3a 	bleq	ec3134 <__Stack_Size+0xec2d34>
     448:	00001349 	andeq	r1, r0, r9, asr #6
     44c:	03003408 	movweq	r3, #1032	; 0x408
     450:	3b0b3a0e 	blcc	2cec90 <__Stack_Size+0x2ce890>
     454:	3f13490b 	svccc	0x0013490b
     458:	00180219 	andseq	r0, r8, r9, lsl r2
     45c:	00240900 	eoreq	r0, r4, r0, lsl #18
     460:	0b3e0b0b 	bleq	f83094 <__Stack_Size+0xf82c94>
     464:	00000803 	andeq	r0, r0, r3, lsl #16
     468:	4901010a 	stmdbmi	r1, {r1, r3, r8}
     46c:	00130113 	andseq	r0, r3, r3, lsl r1
     470:	00210b00 	eoreq	r0, r1, r0, lsl #22
     474:	0b2f1349 	bleq	bc51a0 <__Stack_Size+0xbc4da0>
     478:	340c0000 	strcc	r0, [ip], #-0
     47c:	3a0e0300 	bcc	381084 <__Stack_Size+0x380c84>
     480:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     484:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     488:	00000018 	andeq	r0, r0, r8, lsl r0
     48c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     490:	030b130e 	movweq	r1, #45838	; 0xb30e
     494:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     498:	10011117 	andne	r1, r1, r7, lsl r1
     49c:	02000017 	andeq	r0, r0, #23
     4a0:	0b0b0024 	bleq	2c0538 <__Stack_Size+0x2c0138>
     4a4:	0e030b3e 	vmoveq.16	d3[0], r0
     4a8:	16030000 	strne	r0, [r3], -r0
     4ac:	3a080300 	bcc	2010b4 <__Stack_Size+0x200cb4>
     4b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4b4:	04000013 	streq	r0, [r0], #-19
     4b8:	0b0b0104 	bleq	2c08d0 <__Stack_Size+0x2c04d0>
     4bc:	0b3b0b3a 	bleq	ec31ac <__Stack_Size+0xec2dac>
     4c0:	00001301 	andeq	r1, r0, r1, lsl #6
     4c4:	03002805 	movweq	r2, #2053	; 0x805
     4c8:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     4cc:	00160600 	andseq	r0, r6, r0, lsl #12
     4d0:	0b3a0e03 	bleq	e83ce4 <__Stack_Size+0xe838e4>
     4d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4d8:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
     4dc:	03193f01 	tsteq	r9, #1, 30
     4e0:	3b0b3a0e 	blcc	2ced20 <__Stack_Size+0x2ce920>
     4e4:	1113490b 	tstne	r3, fp, lsl #18
     4e8:	40061201 	andmi	r1, r6, r1, lsl #4
     4ec:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     4f0:	00001301 	andeq	r1, r0, r1, lsl #6
     4f4:	03003408 	movweq	r3, #1032	; 0x408
     4f8:	3b0b3a0e 	blcc	2ced38 <__Stack_Size+0x2ce938>
     4fc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     500:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
     504:	0111010b 	tsteq	r1, fp, lsl #2
     508:	13010612 	movwne	r0, #5650	; 0x1612
     50c:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     510:	03193f01 	tsteq	r9, #1, 30
     514:	3b0b3a0e 	blcc	2ced54 <__Stack_Size+0x2ce954>
     518:	3c13490b 	ldccc	9, cr4, [r3], {11}
     51c:	00130119 	andseq	r0, r3, r9, lsl r1
     520:	00180b00 	andseq	r0, r8, r0, lsl #22
     524:	890c0000 	stmdbhi	ip, {}	; <UNPREDICTABLE>
     528:	11010182 	smlabbne	r1, r2, r1, r0
     52c:	01133101 	tsteq	r3, r1, lsl #2
     530:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     534:	0001828a 	andeq	r8, r1, sl, lsl #5
     538:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     53c:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
     540:	00018289 	andeq	r8, r1, r9, lsl #5
     544:	13310111 	teqne	r1, #1073741828	; 0x40000004
     548:	890f0000 	stmdbhi	pc, {}	; <UNPREDICTABLE>
     54c:	11010182 	smlabbne	r1, r2, r1, r0
     550:	00133101 	andseq	r3, r3, r1, lsl #2
     554:	00341000 	eorseq	r1, r4, r0
     558:	0b3a0e03 	bleq	e83d6c <__Stack_Size+0xe8396c>
     55c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     560:	24110000 	ldrcs	r0, [r1], #-0
     564:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     568:	0008030b 	andeq	r0, r8, fp, lsl #6
     56c:	00341200 	eorseq	r1, r4, r0, lsl #4
     570:	0b3a0e03 	bleq	e83d84 <__Stack_Size+0xe83984>
     574:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     578:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     57c:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     580:	03193f01 	tsteq	r9, #1, 30
     584:	3b0b3a0e 	blcc	2cedc4 <__Stack_Size+0x2ce9c4>
     588:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     58c:	01193c13 	tsteq	r9, r3, lsl ip
     590:	14000013 	strne	r0, [r0], #-19
     594:	13490005 	movtne	r0, #36869	; 0x9005
     598:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     59c:	03193f01 	tsteq	r9, #1, 30
     5a0:	3b0b3a0e 	blcc	2cede0 <__Stack_Size+0x2ce9e0>
     5a4:	01193c0b 	tsteq	r9, fp, lsl #24
     5a8:	16000013 			; <UNDEFINED> instruction: 0x16000013
     5ac:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     5b0:	0b3a0e03 	bleq	e83dc4 <__Stack_Size+0xe839c4>
     5b4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     5b8:	0000193c 	andeq	r1, r0, ip, lsr r9
     5bc:	3f012e17 	svccc	0x00012e17
     5c0:	3a0e0319 	bcc	38122c <__Stack_Size+0x380e2c>
     5c4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     5c8:	01193c19 	tsteq	r9, r9, lsl ip
     5cc:	00000013 	andeq	r0, r0, r3, lsl r0
     5d0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     5d4:	030b130e 	movweq	r1, #45838	; 0xb30e
     5d8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     5dc:	10011117 	andne	r1, r1, r7, lsl r1
     5e0:	02000017 	andeq	r0, r0, #23
     5e4:	0b0b0024 	bleq	2c067c <__Stack_Size+0x2c027c>
     5e8:	0e030b3e 	vmoveq.16	d3[0], r0
     5ec:	16030000 	strne	r0, [r3], -r0
     5f0:	3a080300 	bcc	2011f8 <__Stack_Size+0x200df8>
     5f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5f8:	04000013 	streq	r0, [r0], #-19
     5fc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     600:	0b3b0b3a 	bleq	ec32f0 <__Stack_Size+0xec2ef0>
     604:	00001349 	andeq	r1, r0, r9, asr #6
     608:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     60c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     610:	13490026 	movtne	r0, #36902	; 0x9026
     614:	04070000 	streq	r0, [r7], #-0
     618:	3a0b0b01 	bcc	2c3224 <__Stack_Size+0x2c2e24>
     61c:	010b3b0b 	tsteq	fp, fp, lsl #22
     620:	08000013 	stmdaeq	r0, {r0, r1, r4}
     624:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     628:	00000d1c 	andeq	r0, r0, ip, lsl sp
     62c:	0b011309 	bleq	45258 <__Stack_Size+0x44e58>
     630:	3b0b3a0b 	blcc	2cee64 <__Stack_Size+0x2cea64>
     634:	0013010b 	andseq	r0, r3, fp, lsl #2
     638:	000d0a00 	andeq	r0, sp, r0, lsl #20
     63c:	0b3a0803 	bleq	e82650 <__Stack_Size+0xe82250>
     640:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     644:	00000b38 	andeq	r0, r0, r8, lsr fp
     648:	03000d0b 	movweq	r0, #3339	; 0xd0b
     64c:	3b0b3a0e 	blcc	2cee8c <__Stack_Size+0x2cea8c>
     650:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     654:	0c00000b 	stceq	0, cr0, [r0], {11}
     658:	050b0113 	streq	r0, [fp, #-275]	; 0x113
     65c:	0b3b0b3a 	bleq	ec334c <__Stack_Size+0xec2f4c>
     660:	00001301 	andeq	r1, r0, r1, lsl #6
     664:	03000d0d 	movweq	r0, #3341	; 0xd0d
     668:	3b0b3a0e 	blcc	2ceea8 <__Stack_Size+0x2ceaa8>
     66c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     670:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
     674:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     678:	0b3b0b3a 	bleq	ec3368 <__Stack_Size+0xec2f68>
     67c:	05381349 	ldreq	r1, [r8, #-841]!	; 0x349
     680:	010f0000 	mrseq	r0, CPSR
     684:	01134901 	tsteq	r3, r1, lsl #18
     688:	10000013 	andne	r0, r0, r3, lsl r0
     68c:	13490021 	movtne	r0, #36897	; 0x9021
     690:	00000b2f 	andeq	r0, r0, pc, lsr #22
     694:	03011311 	movweq	r1, #4881	; 0x1311
     698:	3a0b0b0e 	bcc	2c32d8 <__Stack_Size+0x2c2ed8>
     69c:	010b3b0b 	tsteq	fp, fp, lsl #22
     6a0:	12000013 	andne	r0, r0, #19
     6a4:	19270015 	stmdbne	r7!, {r0, r2, r4}
     6a8:	0f130000 	svceq	0x00130000
     6ac:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     6b0:	14000013 	strne	r0, [r0], #-19
     6b4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     6b8:	0b3a0e03 	bleq	e83ecc <__Stack_Size+0xe83acc>
     6bc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     6c0:	00000b20 	andeq	r0, r0, r0, lsr #22
     6c4:	3f012e15 	svccc	0x00012e15
     6c8:	3a0e0319 	bcc	381334 <__Stack_Size+0x380f34>
     6cc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     6d0:	010b2019 	tsteq	fp, r9, lsl r0
     6d4:	16000013 			; <UNDEFINED> instruction: 0x16000013
     6d8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     6dc:	0b3b0b3a 	bleq	ec33cc <__Stack_Size+0xec2fcc>
     6e0:	00001349 	andeq	r1, r0, r9, asr #6
     6e4:	03000517 	movweq	r0, #1303	; 0x517
     6e8:	3b0b3a08 	blcc	2cef10 <__Stack_Size+0x2ceb10>
     6ec:	0013490b 	andseq	r4, r3, fp, lsl #18
     6f0:	012e1800 	teqeq	lr, r0, lsl #16
     6f4:	01111331 	tsteq	r1, r1, lsr r3
     6f8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     6fc:	01194297 			; <UNDEFINED> instruction: 0x01194297
     700:	19000013 	stmdbne	r0, {r0, r1, r4}
     704:	13310005 	teqne	r1, #5
     708:	00001802 	andeq	r1, r0, r2, lsl #16
     70c:	3100051a 	tstcc	r0, sl, lsl r5
     710:	00170213 	andseq	r0, r7, r3, lsl r2
     714:	012e1b00 	teqeq	lr, r0, lsl #22
     718:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     71c:	0b3b0b3a 	bleq	ec340c <__Stack_Size+0xec300c>
     720:	13491927 	movtne	r1, #39207	; 0x9927
     724:	06120111 			; <UNDEFINED> instruction: 0x06120111
     728:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     72c:	00130119 	andseq	r0, r3, r9, lsl r1
     730:	00051c00 	andeq	r1, r5, r0, lsl #24
     734:	0b3a0e03 	bleq	e83f48 <__Stack_Size+0xe83b48>
     738:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     73c:	00001702 	andeq	r1, r0, r2, lsl #14
     740:	0300051d 	movweq	r0, #1309	; 0x51d
     744:	3b0b3a08 	blcc	2cef6c <__Stack_Size+0x2ceb6c>
     748:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     74c:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
     750:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     754:	0b3a0e03 	bleq	e83f68 <__Stack_Size+0xe83b68>
     758:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     75c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     760:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     764:	00130119 	andseq	r0, r3, r9, lsl r1
     768:	00341f00 	eorseq	r1, r4, r0, lsl #30
     76c:	0b3a0e03 	bleq	e83f80 <__Stack_Size+0xe83b80>
     770:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     774:	00001702 	andeq	r1, r0, r2, lsl #14
     778:	3f012e20 	svccc	0x00012e20
     77c:	3a0e0319 	bcc	3813e8 <__Stack_Size+0x380fe8>
     780:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     784:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     788:	97184006 	ldrls	r4, [r8, -r6]
     78c:	13011942 	movwne	r1, #6466	; 0x1942
     790:	05210000 	streq	r0, [r1, #-0]!
     794:	3a0e0300 	bcc	38139c <__Stack_Size+0x380f9c>
     798:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     79c:	00180213 	andseq	r0, r8, r3, lsl r2
     7a0:	00342200 	eorseq	r2, r4, r0, lsl #4
     7a4:	0b3a0803 	bleq	e827b8 <__Stack_Size+0xe823b8>
     7a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     7ac:	00001702 	andeq	r1, r0, r2, lsl #14
     7b0:	01828923 	orreq	r8, r2, r3, lsr #18
     7b4:	31011101 	tstcc	r1, r1, lsl #2
     7b8:	00130113 	andseq	r0, r3, r3, lsl r1
     7bc:	828a2400 	addhi	r2, sl, #0, 8
     7c0:	18020001 	stmdane	r2, {r0}
     7c4:	00184291 	mulseq	r8, r1, r2
     7c8:	82892500 	addhi	r2, r9, #0, 10
     7cc:	01110101 	tsteq	r1, r1, lsl #2
     7d0:	00001331 	andeq	r1, r0, r1, lsr r3
     7d4:	3f002e26 	svccc	0x00002e26
     7d8:	3a0e0319 	bcc	381444 <__Stack_Size+0x381044>
     7dc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     7e0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     7e4:	97184006 	ldrls	r4, [r8, -r6]
     7e8:	00001942 	andeq	r1, r0, r2, asr #18
     7ec:	03003427 	movweq	r3, #1063	; 0x427
     7f0:	3b0b3a0e 	blcc	2cf030 <__Stack_Size+0x2cec30>
     7f4:	1c13490b 	ldcne	9, cr4, [r3], {11}
     7f8:	2800000b 	stmdacs	r0, {r0, r1, r3}
     7fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     800:	0b3a0e03 	bleq	e84014 <__Stack_Size+0xe83c14>
     804:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     808:	0b201349 	bleq	805534 <__Stack_Size+0x805134>
     80c:	00001301 	andeq	r1, r0, r1, lsl #6
     810:	03000529 	movweq	r0, #1321	; 0x529
     814:	3b0b3a08 	blcc	2cf03c <__Stack_Size+0x2cec3c>
     818:	00134905 	andseq	r4, r3, r5, lsl #18
     81c:	00342a00 	eorseq	r2, r4, r0, lsl #20
     820:	0b3a0e03 	bleq	e84034 <__Stack_Size+0xe83c34>
     824:	1349053b 	movtne	r0, #38203	; 0x953b
     828:	242b0000 	strtcs	r0, [fp], #-0
     82c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     830:	0008030b 	andeq	r0, r8, fp, lsl #6
     834:	011d2c00 	tsteq	sp, r0, lsl #24
     838:	01111331 	tsteq	r1, r1, lsr r3
     83c:	0b580612 	bleq	160208c <__Stack_Size+0x1601c8c>
     840:	00000b59 	andeq	r0, r0, r9, asr fp
     844:	3100052d 	tstcc	r0, sp, lsr #10
     848:	000b1c13 	andeq	r1, fp, r3, lsl ip
     84c:	00052e00 	andeq	r2, r5, r0, lsl #28
     850:	061c1331 			; <UNDEFINED> instruction: 0x061c1331
     854:	0b2f0000 	bleq	bc085c <__Stack_Size+0xbc045c>
     858:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     85c:	30000006 	andcc	r0, r0, r6
     860:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     864:	0b3a0e03 	bleq	e84078 <__Stack_Size+0xe83c78>
     868:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     86c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     870:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     874:	00130119 	andseq	r0, r3, r9, lsl r1
     878:	012e3100 	teqeq	lr, r0, lsl #2
     87c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     880:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     884:	01111927 	tsteq	r1, r7, lsr #18
     888:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     88c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     890:	32000013 	andcc	r0, r0, #19
     894:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     898:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     89c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     8a0:	34330000 	ldrtcc	r0, [r3], #-0
     8a4:	3a0e0300 	bcc	3814ac <__Stack_Size+0x3810ac>
     8a8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     8ac:	00170213 	andseq	r0, r7, r3, lsl r2
     8b0:	00343400 	eorseq	r3, r4, r0, lsl #8
     8b4:	0b3a0e03 	bleq	e840c8 <__Stack_Size+0xe83cc8>
     8b8:	1349053b 	movtne	r0, #38203	; 0x953b
     8bc:	00000d1c 	andeq	r0, r0, ip, lsl sp
     8c0:	31001d35 	tstcc	r0, r5, lsr sp
     8c4:	55015213 	strpl	r5, [r1, #-531]	; 0x213
     8c8:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
     8cc:	3600000b 	strcc	r0, [r0], -fp
     8d0:	00018289 	andeq	r8, r1, r9, lsl #5
     8d4:	13310111 	teqne	r1, #1073741828	; 0x40000004
     8d8:	89370000 	ldmdbhi	r7!, {}	; <UNPREDICTABLE>
     8dc:	11010182 	smlabbne	r1, r2, r1, r0
     8e0:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     8e4:	00001331 	andeq	r1, r0, r1, lsr r3
     8e8:	3f012e38 	svccc	0x00012e38
     8ec:	3a0e0319 	bcc	381558 <__Stack_Size+0x381158>
     8f0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     8f4:	11134919 	tstne	r3, r9, lsl r9
     8f8:	40061201 	andmi	r1, r6, r1, lsl #4
     8fc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     900:	00001301 	andeq	r1, r0, r1, lsl #6
     904:	03000539 	movweq	r0, #1337	; 0x539
     908:	3b0b3a0e 	blcc	2cf148 <__Stack_Size+0x2ced48>
     90c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     910:	3a000017 	bcc	974 <__Stack_Size+0x574>
     914:	08030005 	stmdaeq	r3, {r0, r2}
     918:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     91c:	17021349 	strne	r1, [r2, -r9, asr #6]
     920:	343b0000 	ldrtcc	r0, [fp], #-0
     924:	3a0e0300 	bcc	38152c <__Stack_Size+0x38112c>
     928:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     92c:	00180213 	andseq	r0, r8, r3, lsl r2
     930:	002e3c00 	eoreq	r3, lr, r0, lsl #24
     934:	01111331 	tsteq	r1, r1, lsr r3
     938:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     93c:	00194297 	mulseq	r9, r7, r2
     940:	002e3d00 	eoreq	r3, lr, r0, lsl #26
     944:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     948:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     94c:	01111927 	tsteq	r1, r7, lsr #18
     950:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     954:	00194297 	mulseq	r9, r7, r2
     958:	00343e00 	eorseq	r3, r4, r0, lsl #28
     95c:	17021331 	smladxne	r2, r1, r3, r1
     960:	343f0000 	ldrtcc	r0, [pc], #-0	; 968 <__Stack_Size+0x568>
     964:	3a0e0300 	bcc	38156c <__Stack_Size+0x38116c>
     968:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     96c:	00061c13 	andeq	r1, r6, r3, lsl ip
     970:	00344000 	eorseq	r4, r4, r0
     974:	0b3a0e03 	bleq	e84188 <__Stack_Size+0xe83d88>
     978:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     97c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     980:	2e410000 	cdpcs	0, 4, cr0, cr1, cr0, {0}
     984:	03193f00 	tsteq	r9, #0, 30
     988:	3b0b3a0e 	blcc	2cf1c8 <__Stack_Size+0x2cedc8>
     98c:	3c19270b 	ldccc	7, cr2, [r9], {11}
     990:	00000019 	andeq	r0, r0, r9, lsl r0
     994:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     998:	030b130e 	movweq	r1, #45838	; 0xb30e
     99c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     9a0:	10011117 	andne	r1, r1, r7, lsl r1
     9a4:	02000017 	andeq	r0, r0, #23
     9a8:	0b0b0024 	bleq	2c0a40 <__Stack_Size+0x2c0640>
     9ac:	0e030b3e 	vmoveq.16	d3[0], r0
     9b0:	16030000 	strne	r0, [r3], -r0
     9b4:	3a080300 	bcc	2015bc <__Stack_Size+0x2011bc>
     9b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9bc:	04000013 	streq	r0, [r0], #-19
     9c0:	0b0b0104 	bleq	2c0dd8 <__Stack_Size+0x2c09d8>
     9c4:	0b3b0b3a 	bleq	ec36b4 <__Stack_Size+0xec32b4>
     9c8:	00001301 	andeq	r1, r0, r1, lsl #6
     9cc:	03002805 	movweq	r2, #2053	; 0x805
     9d0:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     9d4:	00160600 	andseq	r0, r6, r0, lsl #12
     9d8:	0b3a0e03 	bleq	e841ec <__Stack_Size+0xe83dec>
     9dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9e0:	0f070000 	svceq	0x00070000
     9e4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     9e8:	08000013 	stmdaeq	r0, {r0, r1, r4}
     9ec:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     9f0:	0b3a0b0b 	bleq	e83624 <__Stack_Size+0xe83224>
     9f4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     9f8:	0d090000 	stceq	0, cr0, [r9, #-0]
     9fc:	3a0e0300 	bcc	381604 <__Stack_Size+0x381204>
     a00:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a04:	000b3813 	andeq	r3, fp, r3, lsl r8
     a08:	01150a00 	tsteq	r5, r0, lsl #20
     a0c:	13491927 	movtne	r1, #39207	; 0x9927
     a10:	00001301 	andeq	r1, r0, r1, lsl #6
     a14:	4900050b 	stmdbmi	r0, {r0, r1, r3, r8, sl}
     a18:	0c000013 	stceq	0, cr0, [r0], {19}
     a1c:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
     a20:	0b3a0b0b 	bleq	e83654 <__Stack_Size+0xe83254>
     a24:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     a28:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     a2c:	3a080300 	bcc	201634 <__Stack_Size+0x201234>
     a30:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a34:	000b3813 	andeq	r3, fp, r3, lsl r8
     a38:	01170e00 	tsteq	r7, r0, lsl #28
     a3c:	0b3a0b0b 	bleq	e83670 <__Stack_Size+0xe83270>
     a40:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     a44:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; a4c <__Stack_Size+0x64c>
     a48:	3a080300 	bcc	201650 <__Stack_Size+0x201250>
     a4c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a50:	10000013 	andne	r0, r0, r3, lsl r0
     a54:	0e030104 	adfeqs	f0, f3, f4
     a58:	0b3a0b0b 	bleq	e8368c <__Stack_Size+0xe8328c>
     a5c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     a60:	28110000 	ldmdacs	r1, {}	; <UNPREDICTABLE>
     a64:	1c080300 	stcne	3, cr0, [r8], {-0}
     a68:	1200000d 	andne	r0, r0, #13
     a6c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     a70:	0b3a0e03 	bleq	e84284 <__Stack_Size+0xe83e84>
     a74:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     a78:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a7c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     a80:	13000019 	movwne	r0, #25
     a84:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     a88:	0b3a0e03 	bleq	e8429c <__Stack_Size+0xe83e9c>
     a8c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     a90:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a94:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     a98:	00130119 	andseq	r0, r3, r9, lsl r1
     a9c:	00341400 	eorseq	r1, r4, r0, lsl #8
     aa0:	0b3a0e03 	bleq	e842b4 <__Stack_Size+0xe83eb4>
     aa4:	1349053b 	movtne	r0, #38203	; 0x953b
     aa8:	00001702 	andeq	r1, r0, r2, lsl #14
     aac:	01828915 	orreq	r8, r2, r5, lsl r9
     ab0:	31011100 	mrscc	r1, (UNDEF: 17)
     ab4:	16000013 			; <UNDEFINED> instruction: 0x16000013
     ab8:	00018289 	andeq	r8, r1, r9, lsl #5
     abc:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     ac0:	00133119 	andseq	r3, r3, r9, lsl r1
     ac4:	002e1700 	eoreq	r1, lr, r0, lsl #14
     ac8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     acc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     ad0:	01111927 	tsteq	r1, r7, lsr #18
     ad4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     ad8:	00194297 	mulseq	r9, r7, r2
     adc:	012e1800 	teqeq	lr, r0, lsl #16
     ae0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ae4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     ae8:	13491927 	movtne	r1, #39207	; 0x9927
     aec:	06120111 			; <UNDEFINED> instruction: 0x06120111
     af0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     af4:	00130119 	andseq	r0, r3, r9, lsl r1
     af8:	00051900 	andeq	r1, r5, r0, lsl #18
     afc:	0b3a0e03 	bleq	e84310 <__Stack_Size+0xe83f10>
     b00:	1349053b 	movtne	r0, #38203	; 0x953b
     b04:	00001702 	andeq	r1, r0, r2, lsl #14
     b08:	0300341a 	movweq	r3, #1050	; 0x41a
     b0c:	3b0b3a08 	blcc	2cf334 <__Stack_Size+0x2cef34>
     b10:	02134905 	andseq	r4, r3, #81920	; 0x14000
     b14:	1b000017 	blne	b78 <__Stack_Size+0x778>
     b18:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b1c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     b20:	00001349 	andeq	r1, r0, r9, asr #6
     b24:	0182891c 	orreq	r8, r2, ip, lsl r9
     b28:	31011101 	tstcc	r1, r1, lsl #2
     b2c:	00130113 	andseq	r0, r3, r3, lsl r1
     b30:	828a1d00 	addhi	r1, sl, #0, 26
     b34:	18020001 	stmdane	r2, {r0}
     b38:	00184291 	mulseq	r8, r1, r2
     b3c:	82891e00 	addhi	r1, r9, #0, 28
     b40:	01110101 	tsteq	r1, r1, lsl #2
     b44:	00001331 	andeq	r1, r0, r1, lsr r3
     b48:	0b00241f 	bleq	9bcc <__Stack_Size+0x97cc>
     b4c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     b50:	20000008 	andcs	r0, r0, r8
     b54:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     b58:	0b3a0e03 	bleq	e8436c <__Stack_Size+0xe83f6c>
     b5c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     b60:	01111349 	tsteq	r1, r9, asr #6
     b64:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b68:	01194297 			; <UNDEFINED> instruction: 0x01194297
     b6c:	21000013 	tstcs	r0, r3, lsl r0
     b70:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b74:	0b3b0b3a 	bleq	ec3864 <__Stack_Size+0xec3464>
     b78:	17021349 	strne	r1, [r2, -r9, asr #6]
     b7c:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
     b80:	03193f00 	tsteq	r9, #0, 30
     b84:	3b0b3a0e 	blcc	2cf3c4 <__Stack_Size+0x2cefc4>
     b88:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     b8c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     b90:	97184006 	ldrls	r4, [r8, -r6]
     b94:	00001942 	andeq	r1, r0, r2, asr #18
     b98:	03000523 	movweq	r0, #1315	; 0x523
     b9c:	3b0b3a0e 	blcc	2cf3dc <__Stack_Size+0x2cefdc>
     ba0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     ba4:	24000018 	strcs	r0, [r0], #-24
     ba8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     bac:	0b3a0e03 	bleq	e843c0 <__Stack_Size+0xe83fc0>
     bb0:	1349053b 	movtne	r0, #38203	; 0x953b
     bb4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     bb8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     bbc:	25000019 	strcs	r0, [r0, #-25]
     bc0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     bc4:	0b3a0e03 	bleq	e843d8 <__Stack_Size+0xe83fd8>
     bc8:	0111053b 	tsteq	r1, fp, lsr r5
     bcc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     bd0:	00194297 	mulseq	r9, r7, r2
     bd4:	00342600 	eorseq	r2, r4, r0, lsl #12
     bd8:	0b3a0e03 	bleq	e843ec <__Stack_Size+0xe83fec>
     bdc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     be0:	00001802 	andeq	r1, r0, r2, lsl #16
     be4:	49003527 	stmdbmi	r0, {r0, r1, r2, r5, r8, sl, ip, sp}
     be8:	28000013 	stmdacs	r0, {r0, r1, r4}
     bec:	13490101 	movtne	r0, #37121	; 0x9101
     bf0:	00001301 	andeq	r1, r0, r1, lsl #6
     bf4:	49002129 	stmdbmi	r0, {r0, r3, r5, r8, sp}
     bf8:	00052f13 	andeq	r2, r5, r3, lsl pc
     bfc:	00342a00 	eorseq	r2, r4, r0, lsl #20
     c00:	0b3a0e03 	bleq	e84414 <__Stack_Size+0xe84014>
     c04:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c08:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     c0c:	342b0000 	strtcc	r0, [fp], #-0
     c10:	3a0e0300 	bcc	381818 <__Stack_Size+0x381418>
     c14:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c18:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     c1c:	2c000018 	stccs	0, cr0, [r0], {24}
     c20:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     c24:	0b3a0e03 	bleq	e84438 <__Stack_Size+0xe84038>
     c28:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     c2c:	0000193c 	andeq	r1, r0, ip, lsr r9
     c30:	3f002e2d 	svccc	0x00002e2d
     c34:	3a0e0319 	bcc	3818a0 <__Stack_Size+0x3814a0>
     c38:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     c3c:	00193c19 	andseq	r3, r9, r9, lsl ip
     c40:	012e2e00 	teqeq	lr, r0, lsl #28
     c44:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     c48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     c4c:	13491927 	movtne	r1, #39207	; 0x9927
     c50:	1301193c 	movwne	r1, #6460	; 0x193c
     c54:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
     c58:	03193f01 	tsteq	r9, #1, 30
     c5c:	3b0b3a0e 	blcc	2cf49c <__Stack_Size+0x2cf09c>
     c60:	3c19270b 	ldccc	7, cr2, [r9], {11}
     c64:	00130119 	andseq	r0, r3, r9, lsl r1
     c68:	002e3000 	eoreq	r3, lr, r0
     c6c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     c70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     c74:	13491927 	movtne	r1, #39207	; 0x9927
     c78:	0000193c 	andeq	r1, r0, ip, lsr r9
     c7c:	01110100 	tsteq	r1, r0, lsl #2
     c80:	0b130e25 	bleq	4c451c <__Stack_Size+0x4c411c>
     c84:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     c88:	01111755 	tsteq	r1, r5, asr r7
     c8c:	00001710 	andeq	r1, r0, r0, lsl r7
     c90:	0b002402 	bleq	9ca0 <__Stack_Size+0x98a0>
     c94:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     c98:	0300000e 	movweq	r0, #14
     c9c:	08030016 	stmdaeq	r3, {r1, r2, r4}
     ca0:	0b3b0b3a 	bleq	ec3990 <__Stack_Size+0xec3590>
     ca4:	00001349 	andeq	r1, r0, r9, asr #6
     ca8:	03010404 	movweq	r0, #5124	; 0x1404
     cac:	3a0b0b0e 	bcc	2c38ec <__Stack_Size+0x2c34ec>
     cb0:	010b3b0b 	tsteq	fp, fp, lsl #22
     cb4:	05000013 	streq	r0, [r0, #-19]
     cb8:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     cbc:	00000d1c 	andeq	r0, r0, ip, lsl sp
     cc0:	03001606 	movweq	r1, #1542	; 0x606
     cc4:	3b0b3a0e 	blcc	2cf504 <__Stack_Size+0x2cf104>
     cc8:	0013490b 	andseq	r4, r3, fp, lsl #18
     ccc:	012e0700 	teqeq	lr, r0, lsl #14
     cd0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     cd4:	0b3b0b3a 	bleq	ec39c4 <__Stack_Size+0xec35c4>
     cd8:	13491927 	movtne	r1, #39207	; 0x9927
     cdc:	13010b20 	movwne	r0, #6944	; 0x1b20
     ce0:	05080000 	streq	r0, [r8, #-0]
     ce4:	3a0e0300 	bcc	3818ec <__Stack_Size+0x3814ec>
     ce8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cec:	09000013 	stmdbeq	r0, {r0, r1, r4}
     cf0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     cf4:	0b3a0e03 	bleq	e84508 <__Stack_Size+0xe84108>
     cf8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     cfc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     d00:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     d04:	00130119 	andseq	r0, r3, r9, lsl r1
     d08:	00050a00 	andeq	r0, r5, r0, lsl #20
     d0c:	0b3a0e03 	bleq	e84520 <__Stack_Size+0xe84120>
     d10:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d14:	00001802 	andeq	r1, r0, r2, lsl #16
     d18:	3f002e0b 	svccc	0x00002e0b
     d1c:	3a0e0319 	bcc	381988 <__Stack_Size+0x381588>
     d20:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     d24:	11134919 	tstne	r3, r9, lsl r9
     d28:	40061201 	andmi	r1, r6, r1, lsl #4
     d2c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     d30:	050c0000 	streq	r0, [ip, #-0]
     d34:	3a0e0300 	bcc	38193c <__Stack_Size+0x38153c>
     d38:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d3c:	00170213 	andseq	r0, r7, r3, lsl r2
     d40:	012e0d00 	teqeq	lr, r0, lsl #26
     d44:	01111331 	tsteq	r1, r1, lsr r3
     d48:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d4c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     d50:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     d54:	13310005 	teqne	r1, #5
     d58:	00001702 	andeq	r1, r0, r2, lsl #14
     d5c:	3f012e0f 	svccc	0x00012e0f
     d60:	3a0e0319 	bcc	3819cc <__Stack_Size+0x3815cc>
     d64:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     d68:	11134919 	tstne	r3, r9, lsl r9
     d6c:	40061201 	andmi	r1, r6, r1, lsl #4
     d70:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     d74:	00001301 	andeq	r1, r0, r1, lsl #6
     d78:	11010b10 	tstne	r1, r0, lsl fp
     d7c:	00061201 	andeq	r1, r6, r1, lsl #4
     d80:	00341100 	eorseq	r1, r4, r0, lsl #2
     d84:	0b3a0e03 	bleq	e84598 <__Stack_Size+0xe84198>
     d88:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d8c:	00001802 	andeq	r1, r0, r2, lsl #16
     d90:	03003412 	movweq	r3, #1042	; 0x412
     d94:	3b0b3a0e 	blcc	2cf5d4 <__Stack_Size+0x2cf1d4>
     d98:	0013490b 	andseq	r4, r3, fp, lsl #18
     d9c:	011d1300 	tsteq	sp, r0, lsl #6
     da0:	01521331 	cmpeq	r2, r1, lsr r3
     da4:	0b581755 	bleq	1606b00 <__Stack_Size+0x1606700>
     da8:	00000b59 	andeq	r0, r0, r9, asr fp
     dac:	3f012e14 	svccc	0x00012e14
     db0:	3a0e0319 	bcc	381a1c <__Stack_Size+0x38161c>
     db4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     db8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     dbc:	97184006 	ldrls	r4, [r8, -r6]
     dc0:	13011942 	movwne	r1, #6466	; 0x1942
     dc4:	05150000 	ldreq	r0, [r5, #-0]
     dc8:	3a0e0300 	bcc	3819d0 <__Stack_Size+0x3815d0>
     dcc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     dd0:	00170213 	andseq	r0, r7, r3, lsl r2
     dd4:	00341600 	eorseq	r1, r4, r0, lsl #12
     dd8:	0b3a0e03 	bleq	e845ec <__Stack_Size+0xe841ec>
     ddc:	1349053b 	movtne	r0, #38203	; 0x953b
     de0:	00001702 	andeq	r1, r0, r2, lsl #14
     de4:	3f012e17 	svccc	0x00012e17
     de8:	3a0e0319 	bcc	381a54 <__Stack_Size+0x381654>
     dec:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     df0:	11134919 	tstne	r3, r9, lsl r9
     df4:	40061201 	andmi	r1, r6, r1, lsl #4
     df8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     dfc:	00001301 	andeq	r1, r0, r1, lsl #6
     e00:	03000518 	movweq	r0, #1304	; 0x518
     e04:	3b0b3a0e 	blcc	2cf644 <__Stack_Size+0x2cf244>
     e08:	02134905 	andseq	r4, r3, #81920	; 0x14000
     e0c:	19000018 	stmdbne	r0, {r3, r4}
     e10:	0b0b000f 	bleq	2c0e54 <__Stack_Size+0x2c0a54>
     e14:	00001349 	andeq	r1, r0, r9, asr #6
     e18:	0300341a 	movweq	r3, #1050	; 0x41a
     e1c:	3b0b3a0e 	blcc	2cf65c <__Stack_Size+0x2cf25c>
     e20:	02134905 	andseq	r4, r3, #81920	; 0x14000
     e24:	1b000018 	blne	e8c <__Stack_Size+0xa8c>
     e28:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
     e2c:	0b1c0000 	bleq	700e34 <__Stack_Size+0x700a34>
     e30:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     e34:	00130106 	andseq	r0, r3, r6, lsl #2
     e38:	00051d00 	andeq	r1, r5, r0, lsl #26
     e3c:	0b3a0803 	bleq	e82e50 <__Stack_Size+0xe82a50>
     e40:	1349053b 	movtne	r0, #38203	; 0x953b
     e44:	00001702 	andeq	r1, r0, r2, lsl #14
     e48:	0300051e 	movweq	r0, #1310	; 0x51e
     e4c:	3b0b3a08 	blcc	2cf674 <__Stack_Size+0x2cf274>
     e50:	02134905 	andseq	r4, r3, #81920	; 0x14000
     e54:	1f000018 	svcne	0x00000018
     e58:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     e5c:	0b3a0e03 	bleq	e84670 <__Stack_Size+0xe84270>
     e60:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     e64:	01111349 	tsteq	r1, r9, asr #6
     e68:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     e6c:	00194297 	mulseq	r9, r7, r2
     e70:	11010000 	mrsne	r0, (UNDEF: 1)
     e74:	130e2501 	movwne	r2, #58625	; 0xe501
     e78:	1b0e030b 	blne	381aac <__Stack_Size+0x3816ac>
     e7c:	1117550e 	tstne	r7, lr, lsl #10
     e80:	00171001 	andseq	r1, r7, r1
     e84:	00240200 	eoreq	r0, r4, r0, lsl #4
     e88:	0b3e0b0b 	bleq	f83abc <__Stack_Size+0xf836bc>
     e8c:	00000e03 	andeq	r0, r0, r3, lsl #28
     e90:	03001603 	movweq	r1, #1539	; 0x603
     e94:	3b0b3a08 	blcc	2cf6bc <__Stack_Size+0x2cf2bc>
     e98:	0013490b 	andseq	r4, r3, fp, lsl #18
     e9c:	00150400 	andseq	r0, r5, r0, lsl #8
     ea0:	00001927 	andeq	r1, r0, r7, lsr #18
     ea4:	0b000f05 	bleq	4ac0 <__Stack_Size+0x46c0>
     ea8:	0013490b 	andseq	r4, r3, fp, lsl #18
     eac:	012e0600 	teqeq	lr, r0, lsl #12
     eb0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     eb4:	0b3b0b3a 	bleq	ec3ba4 <__Stack_Size+0xec37a4>
     eb8:	01111927 	tsteq	r1, r7, lsr #18
     ebc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     ec0:	01194296 			; <UNDEFINED> instruction: 0x01194296
     ec4:	07000013 	smladeq	r0, r3, r0, r0
     ec8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ecc:	0b3b0b3a 	bleq	ec3bbc <__Stack_Size+0xec37bc>
     ed0:	17021349 	strne	r1, [r2, -r9, asr #6]
     ed4:	0b080000 	bleq	200edc <__Stack_Size+0x200adc>
     ed8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     edc:	00130106 	andseq	r0, r3, r6, lsl #2
     ee0:	82890900 	addhi	r0, r9, #0, 18
     ee4:	01110001 	tsteq	r1, r1
     ee8:	00001331 	andeq	r1, r0, r1, lsr r3
     eec:	0300340a 	movweq	r3, #1034	; 0x40a
     ef0:	3b0b3a0e 	blcc	2cf730 <__Stack_Size+0x2cf330>
     ef4:	3f134905 	svccc	0x00134905
     ef8:	00193c19 	andseq	r3, r9, r9, lsl ip
     efc:	00350b00 	eorseq	r0, r5, r0, lsl #22
     f00:	00001349 	andeq	r1, r0, r9, asr #6
     f04:	0300340c 	movweq	r3, #1036	; 0x40c
     f08:	3b0b3a0e 	blcc	2cf748 <__Stack_Size+0x2cf348>
     f0c:	3f13490b 	svccc	0x0013490b
     f10:	00180219 	andseq	r0, r8, r9, lsl r2
     f14:	00340d00 	eorseq	r0, r4, r0, lsl #26
     f18:	0b3a0e03 	bleq	e8472c <__Stack_Size+0xe8432c>
     f1c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f20:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     f24:	010e0000 	mrseq	r0, (UNDEF: 14)
     f28:	01134901 	tsteq	r3, r1, lsl #18
     f2c:	0f000013 	svceq	0x00000013
     f30:	13490021 	movtne	r0, #36897	; 0x9021
     f34:	00000b2f 	andeq	r0, r0, pc, lsr #22
     f38:	3f002e10 	svccc	0x00002e10
     f3c:	3a0e0319 	bcc	381ba8 <__Stack_Size+0x3817a8>
     f40:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     f44:	3c134919 	ldccc	9, cr4, [r3], {25}
     f48:	00000019 	andeq	r0, r0, r9, lsl r0
     f4c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     f50:	030b130e 	movweq	r1, #45838	; 0xb30e
     f54:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     f58:	10011117 	andne	r1, r1, r7, lsl r1
     f5c:	02000017 	andeq	r0, r0, #23
     f60:	0b0b0024 	bleq	2c0ff8 <__Stack_Size+0x2c0bf8>
     f64:	0e030b3e 	vmoveq.16	d3[0], r0
     f68:	16030000 	strne	r0, [r3], -r0
     f6c:	3a080300 	bcc	201b74 <__Stack_Size+0x201774>
     f70:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f74:	04000013 	streq	r0, [r0], #-19
     f78:	0b0b000f 	bleq	2c0fbc <__Stack_Size+0x2c0bbc>
     f7c:	00001349 	andeq	r1, r0, r9, asr #6
     f80:	03010405 	movweq	r0, #5125	; 0x1405
     f84:	3a0b0b0e 	bcc	2c3bc4 <__Stack_Size+0x2c37c4>
     f88:	010b3b0b 	tsteq	fp, fp, lsl #22
     f8c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     f90:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     f94:	00000d1c 	andeq	r0, r0, ip, lsl sp
     f98:	03001607 	movweq	r1, #1543	; 0x607
     f9c:	3b0b3a0e 	blcc	2cf7dc <__Stack_Size+0x2cf3dc>
     fa0:	0013490b 	andseq	r4, r3, fp, lsl #18
     fa4:	01130800 	tsteq	r3, r0, lsl #16
     fa8:	0b0b0e03 	bleq	2c47bc <__Stack_Size+0x2c43bc>
     fac:	0b3b0b3a 	bleq	ec3c9c <__Stack_Size+0xec389c>
     fb0:	00001301 	andeq	r1, r0, r1, lsl #6
     fb4:	03000d09 	movweq	r0, #3337	; 0xd09
     fb8:	3b0b3a0e 	blcc	2cf7f8 <__Stack_Size+0x2cf3f8>
     fbc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     fc0:	0a00000b 	beq	ff4 <__Stack_Size+0xbf4>
     fc4:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     fc8:	13011349 	movwne	r1, #4937	; 0x1349
     fcc:	050b0000 	streq	r0, [fp, #-0]
     fd0:	00134900 	andseq	r4, r3, r0, lsl #18
     fd4:	01130c00 	tsteq	r3, r0, lsl #24
     fd8:	0b0b0803 	bleq	2c2fec <__Stack_Size+0x2c2bec>
     fdc:	0b3b0b3a 	bleq	ec3ccc <__Stack_Size+0xec38cc>
     fe0:	00001301 	andeq	r1, r0, r1, lsl #6
     fe4:	03000d0d 	movweq	r0, #3341	; 0xd0d
     fe8:	3b0b3a08 	blcc	2cf810 <__Stack_Size+0x2cf410>
     fec:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     ff0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
     ff4:	0b0b0117 	bleq	2c1458 <__Stack_Size+0x2c1058>
     ff8:	0b3b0b3a 	bleq	ec3ce8 <__Stack_Size+0xec38e8>
     ffc:	00001301 	andeq	r1, r0, r1, lsl #6
    1000:	03000d0f 	movweq	r0, #3343	; 0xd0f
    1004:	3b0b3a08 	blcc	2cf82c <__Stack_Size+0x2cf42c>
    1008:	0013490b 	andseq	r4, r3, fp, lsl #18
    100c:	00151000 	andseq	r1, r5, r0
    1010:	00001927 	andeq	r1, r0, r7, lsr #18
    1014:	3f002e11 	svccc	0x00002e11
    1018:	3a0e0319 	bcc	381c84 <__Stack_Size+0x381884>
    101c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1020:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1024:	96184006 	ldrls	r4, [r8], -r6
    1028:	00001942 	andeq	r1, r0, r2, asr #18
    102c:	03003412 	movweq	r3, #1042	; 0x412
    1030:	3b0b3a0e 	blcc	2cf870 <__Stack_Size+0x2cf470>
    1034:	3f13490b 	svccc	0x0013490b
    1038:	00193c19 	andseq	r3, r9, r9, lsl ip
    103c:	00341300 	eorseq	r1, r4, r0, lsl #6
    1040:	0b3a0e03 	bleq	e84854 <__Stack_Size+0xe84454>
    1044:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1048:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    104c:	01000000 	mrseq	r0, (UNDEF: 0)
    1050:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1054:	0e030b13 	vmoveq.32	d3[0], r0
    1058:	17550e1b 	smmlane	r5, fp, lr, r0
    105c:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1060:	24020000 	strcs	r0, [r2], #-0
    1064:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1068:	000e030b 	andeq	r0, lr, fp, lsl #6
    106c:	00160300 	andseq	r0, r6, r0, lsl #6
    1070:	0b3a0803 	bleq	e83084 <__Stack_Size+0xe82c84>
    1074:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1078:	16040000 	strne	r0, [r4], -r0
    107c:	3a0e0300 	bcc	381c84 <__Stack_Size+0x381884>
    1080:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1084:	05000013 	streq	r0, [r0, #-19]
    1088:	13490035 	movtne	r0, #36917	; 0x9035
    108c:	04060000 	streq	r0, [r6], #-0
    1090:	3a0b0b01 	bcc	2c3c9c <__Stack_Size+0x2c389c>
    1094:	010b3b0b 	tsteq	fp, fp, lsl #22
    1098:	07000013 	smladeq	r0, r3, r0, r0
    109c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    10a0:	00000d1c 	andeq	r0, r0, ip, lsl sp
    10a4:	03010408 	movweq	r0, #5128	; 0x1408
    10a8:	3a0b0b0e 	bcc	2c3ce8 <__Stack_Size+0x2c38e8>
    10ac:	010b3b0b 	tsteq	fp, fp, lsl #22
    10b0:	09000013 	stmdbeq	r0, {r0, r1, r4}
    10b4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    10b8:	0b3a0b0b 	bleq	e83cec <__Stack_Size+0xe838ec>
    10bc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    10c0:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    10c4:	3a0e0300 	bcc	381ccc <__Stack_Size+0x3818cc>
    10c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10cc:	000b3813 	andeq	r3, fp, r3, lsl r8
    10d0:	000f0b00 	andeq	r0, pc, r0, lsl #22
    10d4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    10d8:	150c0000 	strne	r0, [ip, #-0]
    10dc:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    10e0:	00130113 	andseq	r0, r3, r3, lsl r1
    10e4:	00050d00 	andeq	r0, r5, r0, lsl #26
    10e8:	00001349 	andeq	r1, r0, r9, asr #6
    10ec:	0301130e 	movweq	r1, #4878	; 0x130e
    10f0:	3a0b0b08 	bcc	2c3d18 <__Stack_Size+0x2c3918>
    10f4:	010b3b0b 	tsteq	fp, fp, lsl #22
    10f8:	0f000013 	svceq	0x00000013
    10fc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1100:	0b3b0b3a 	bleq	ec3df0 <__Stack_Size+0xec39f0>
    1104:	0b381349 	bleq	e05e30 <__Stack_Size+0xe05a30>
    1108:	17100000 	ldrne	r0, [r0, -r0]
    110c:	3a0b0b01 	bcc	2c3d18 <__Stack_Size+0x2c3918>
    1110:	010b3b0b 	tsteq	fp, fp, lsl #22
    1114:	11000013 	tstne	r0, r3, lsl r0
    1118:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    111c:	0b3b0b3a 	bleq	ec3e0c <__Stack_Size+0xec3a0c>
    1120:	00001349 	andeq	r1, r0, r9, asr #6
    1124:	27001512 	smladcs	r0, r2, r5, r1
    1128:	13000019 	movwne	r0, #25
    112c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1130:	0b3a0e03 	bleq	e84944 <__Stack_Size+0xe84544>
    1134:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1138:	01111349 	tsteq	r1, r9, asr #6
    113c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1140:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1144:	14000013 	strne	r0, [r0], #-19
    1148:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    114c:	0b3b0b3a 	bleq	ec3e3c <__Stack_Size+0xec3a3c>
    1150:	17021349 	strne	r1, [r2, -r9, asr #6]
    1154:	0b150000 	bleq	54115c <__Stack_Size+0x540d5c>
    1158:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    115c:	00130106 	andseq	r0, r3, r6, lsl #2
    1160:	00341600 	eorseq	r1, r4, r0, lsl #12
    1164:	0b3a0e03 	bleq	e84978 <__Stack_Size+0xe84578>
    1168:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    116c:	00001702 	andeq	r1, r0, r2, lsl #14
    1170:	11010b17 	tstne	r1, r7, lsl fp
    1174:	00061201 	andeq	r1, r6, r1, lsl #4
    1178:	00341800 	eorseq	r1, r4, r0, lsl #16
    117c:	0b3a0e03 	bleq	e84990 <__Stack_Size+0xe84590>
    1180:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1184:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    1188:	3a0e0301 	bcc	381d94 <__Stack_Size+0x381994>
    118c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1190:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1194:	97184006 	ldrls	r4, [r8, -r6]
    1198:	13011942 	movwne	r1, #6466	; 0x1942
    119c:	341a0000 	ldrcc	r0, [sl], #-0
    11a0:	3a0e0300 	bcc	381da8 <__Stack_Size+0x3819a8>
    11a4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    11a8:	00170213 	andseq	r0, r7, r3, lsl r2
    11ac:	000a1b00 	andeq	r1, sl, r0, lsl #22
    11b0:	0b3a0e03 	bleq	e849c4 <__Stack_Size+0xe845c4>
    11b4:	0111053b 	tsteq	r1, fp, lsr r5
    11b8:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
    11bc:	11010182 	smlabbne	r1, r2, r1, r0
    11c0:	00130101 	andseq	r0, r3, r1, lsl #2
    11c4:	828a1d00 	addhi	r1, sl, #0, 26
    11c8:	18020001 	stmdane	r2, {r0}
    11cc:	00184291 	mulseq	r8, r1, r2
    11d0:	82891e00 	addhi	r1, r9, #0, 28
    11d4:	01110101 	tsteq	r1, r1, lsl #2
    11d8:	13011331 	movwne	r1, #4913	; 0x1331
    11dc:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
    11e0:	11010182 	smlabbne	r1, r2, r1, r0
    11e4:	00133101 	andseq	r3, r3, r1, lsl #2
    11e8:	002e2000 	eoreq	r2, lr, r0
    11ec:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    11f0:	0b3b0b3a 	bleq	ec3ee0 <__Stack_Size+0xec3ae0>
    11f4:	13491927 	movtne	r1, #39207	; 0x9927
    11f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    11fc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1200:	21000019 	tstcs	r0, r9, lsl r0
    1204:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1208:	0b3b0b3a 	bleq	ec3ef8 <__Stack_Size+0xec3af8>
    120c:	17021349 	strne	r1, [r2, -r9, asr #6]
    1210:	89220000 	stmdbhi	r2!, {}	; <UNPREDICTABLE>
    1214:	11000182 	smlabbne	r0, r2, r1, r0
    1218:	00133101 	andseq	r3, r3, r1, lsl #2
    121c:	012e2300 	teqeq	lr, r0, lsl #6
    1220:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1224:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1228:	13491927 	movtne	r1, #39207	; 0x9927
    122c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1230:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1234:	00130119 	andseq	r0, r3, r9, lsl r1
    1238:	00342400 	eorseq	r2, r4, r0, lsl #8
    123c:	0b3a0803 	bleq	e83250 <__Stack_Size+0xe82e50>
    1240:	1349053b 	movtne	r0, #38203	; 0x953b
    1244:	00001702 	andeq	r1, r0, r2, lsl #14
    1248:	55010b25 	strpl	r0, [r1, #-2853]	; 0xb25
    124c:	00130117 	andseq	r0, r3, r7, lsl r1
    1250:	002e2600 	eoreq	r2, lr, r0, lsl #12
    1254:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1258:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    125c:	13491927 	movtne	r1, #39207	; 0x9927
    1260:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1264:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1268:	27000019 	smladcs	r0, r9, r0, r0
    126c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1270:	0b3a0e03 	bleq	e84a84 <__Stack_Size+0xe84684>
    1274:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1278:	01111349 	tsteq	r1, r9, asr #6
    127c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1280:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1284:	28000013 	stmdacs	r0, {r0, r1, r4}
    1288:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    128c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1290:	17021349 	strne	r1, [r2, -r9, asr #6]
    1294:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
    1298:	3a0e0301 	bcc	381ea4 <__Stack_Size+0x381aa4>
    129c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    12a0:	010b2019 	tsteq	fp, r9, lsl r0
    12a4:	2a000013 	bcs	12f8 <__Stack_Size+0xef8>
    12a8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    12ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    12b0:	00001349 	andeq	r1, r0, r9, asr #6
    12b4:	03000a2b 	movweq	r0, #2603	; 0xa2b
    12b8:	3b0b3a0e 	blcc	2cfaf8 <__Stack_Size+0x2cf6f8>
    12bc:	2c000005 	stccs	0, cr0, [r0], {5}
    12c0:	1301010b 	movwne	r0, #4363	; 0x110b
    12c4:	0b2d0000 	bleq	b412cc <__Stack_Size+0xb40ecc>
    12c8:	2e000001 	cdpcs	0, 0, cr0, cr0, cr1, {0}
    12cc:	0b0b0117 	bleq	2c1730 <__Stack_Size+0x2c1330>
    12d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    12d4:	00001301 	andeq	r1, r0, r1, lsl #6
    12d8:	03000d2f 	movweq	r0, #3375	; 0xd2f
    12dc:	3b0b3a08 	blcc	2cfb04 <__Stack_Size+0x2cf704>
    12e0:	00134905 	andseq	r4, r3, r5, lsl #18
    12e4:	011d3000 	tsteq	sp, r0
    12e8:	01111331 	tsteq	r1, r1, lsr r3
    12ec:	0b580612 	bleq	1602b3c <__Stack_Size+0x160273c>
    12f0:	13010559 	movwne	r0, #5465	; 0x1559
    12f4:	34310000 	ldrtcc	r0, [r1], #-0
    12f8:	02133100 	andseq	r3, r3, #0, 2
    12fc:	32000017 	andcc	r0, r0, #23
    1300:	1331000a 	teqne	r1, #10
    1304:	00000111 	andeq	r0, r0, r1, lsl r1
    1308:	31011d33 	tstcc	r1, r3, lsr sp
    130c:	55015213 	strpl	r5, [r1, #-531]	; 0x213
    1310:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    1314:	00130105 	andseq	r0, r3, r5, lsl #2
    1318:	010b3400 	tsteq	fp, r0, lsl #8
    131c:	00001755 	andeq	r1, r0, r5, asr r7
    1320:	31003435 	tstcc	r0, r5, lsr r4
    1324:	00180213 	andseq	r0, r8, r3, lsl r2
    1328:	82893600 	addhi	r3, r9, #0, 12
    132c:	01110101 	tsteq	r1, r1, lsl #2
    1330:	89370000 	ldmdbhi	r7!, {}	; <UNPREDICTABLE>
    1334:	11000182 	smlabbne	r0, r2, r1, r0
    1338:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    133c:	00001331 	andeq	r1, r0, r1, lsr r3
    1340:	3f012e38 	svccc	0x00012e38
    1344:	3a0e0319 	bcc	381fb0 <__Stack_Size+0x381bb0>
    1348:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    134c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1350:	97184006 	ldrls	r4, [r8, -r6]
    1354:	13011942 	movwne	r1, #6466	; 0x1942
    1358:	05390000 	ldreq	r0, [r9, #-0]!
    135c:	3a080300 	bcc	201f64 <__Stack_Size+0x201b64>
    1360:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1364:	00170213 	andseq	r0, r7, r3, lsl r2
    1368:	002e3a00 	eoreq	r3, lr, r0, lsl #20
    136c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1370:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1374:	01111927 	tsteq	r1, r7, lsr #18
    1378:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    137c:	00194297 	mulseq	r9, r7, r2
    1380:	00343b00 	eorseq	r3, r4, r0, lsl #22
    1384:	0b3a0e03 	bleq	e84b98 <__Stack_Size+0xe84798>
    1388:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    138c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1390:	343c0000 	ldrtcc	r0, [ip], #-0
    1394:	3a0e0300 	bcc	381f9c <__Stack_Size+0x381b9c>
    1398:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    139c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    13a0:	3d000018 	stccc	0, cr0, [r0, #-96]	; 0xffffffa0
    13a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    13a8:	0b3a0e03 	bleq	e84bbc <__Stack_Size+0xe847bc>
    13ac:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    13b0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    13b4:	00001301 	andeq	r1, r0, r1, lsl #6
    13b8:	3f012e3e 	svccc	0x00012e3e
    13bc:	3a0e0319 	bcc	382028 <__Stack_Size+0x381c28>
    13c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    13c4:	01193c19 	tsteq	r9, r9, lsl ip
    13c8:	3f000013 	svccc	0x00000013
    13cc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    13d0:	0b3a0e03 	bleq	e84be4 <__Stack_Size+0xe847e4>
    13d4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    13d8:	1301193c 	movwne	r1, #6460	; 0x193c
    13dc:	2e400000 	cdpcs	0, 4, cr0, cr0, cr0, {0}
    13e0:	03193f01 	tsteq	r9, #1, 30
    13e4:	3b0b3a0e 	blcc	2cfc24 <__Stack_Size+0x2cf824>
    13e8:	3c19270b 	ldccc	7, cr2, [r9], {11}
    13ec:	00000019 	andeq	r0, r0, r9, lsl r0
    13f0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    13f4:	030b130e 	movweq	r1, #45838	; 0xb30e
    13f8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    13fc:	10011117 	andne	r1, r1, r7, lsl r1
    1400:	02000017 	andeq	r0, r0, #23
    1404:	0b0b0024 	bleq	2c149c <__Stack_Size+0x2c109c>
    1408:	0e030b3e 	vmoveq.16	d3[0], r0
    140c:	16030000 	strne	r0, [r3], -r0
    1410:	3a080300 	bcc	202018 <__Stack_Size+0x201c18>
    1414:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1418:	04000013 	streq	r0, [r0], #-19
    141c:	0b0b000f 	bleq	2c1460 <__Stack_Size+0x2c1060>
    1420:	00001349 	andeq	r1, r0, r9, asr #6
    1424:	3f012e05 	svccc	0x00012e05
    1428:	3a0e0319 	bcc	382094 <__Stack_Size+0x381c94>
    142c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1430:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1434:	97184006 	ldrls	r4, [r8, -r6]
    1438:	13011942 	movwne	r1, #6466	; 0x1942
    143c:	05060000 	streq	r0, [r6, #-0]
    1440:	3a0e0300 	bcc	382048 <__Stack_Size+0x381c48>
    1444:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1448:	00170213 	andseq	r0, r7, r3, lsl r2
    144c:	00340700 	eorseq	r0, r4, r0, lsl #14
    1450:	0b3a0803 	bleq	e83464 <__Stack_Size+0xe83064>
    1454:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1458:	00001802 	andeq	r1, r0, r2, lsl #16
    145c:	03003408 	movweq	r3, #1032	; 0x408
    1460:	3b0b3a08 	blcc	2cfc88 <__Stack_Size+0x2cf888>
    1464:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1468:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    146c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1470:	0b3b0b3a 	bleq	ec4160 <__Stack_Size+0xec3d60>
    1474:	17021349 	strne	r1, [r2, -r9, asr #6]
    1478:	Address 0x0000000000001478 is out of bounds.


Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000071 	andeq	r0, r0, r1, ror r0
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00310002 	eorseq	r0, r1, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	73010000 	movwvc	r0, #4096	; 0x1000
      1c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
      24:	5f630000 	svcpl	0x00630000
      28:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	6174735f 	cmnvs	r4, pc, asr r3
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	70757472 	rsbsvc	r7, r5, r2, ror r4
      34:	0100732e 	tsteq	r0, lr, lsr #6
      38:	00000000 	andeq	r0, r0, r0

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	00f00205 	rscseq	r0, r0, r5, lsl #4

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	c1030800 	tstgt	r3, r0, lsl #16
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	31210100 	teqcc	r1, r0, lsl #2
      48:	23212121 	teqcs	r1, #1073741832	; 0x40000008
      4c:	21212121 	teqcs	r1, r1, lsr #2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	2131212f 	teqcs	r1, pc, lsr #2
      54:	30212131 	eorcc	r2, r1, r1, lsr r1
      58:	2068032f 	rsbcs	r0, r8, pc, lsr #6
      5c:	36322f34 	shasxcc	r2, r2, r4
      60:	01000202 	tsteq	r0, r2, lsl #4
      64:	02050001 	andeq	r0, r5, #1
      68:	08000138 	stmdaeq	r0, {r3, r4, r5, r8}
      6c:	0100eb03 	tsteq	r0, r3, lsl #22
      70:	01000202 	tsteq	r0, r2, lsl #4
      74:	0000a201 	andeq	sl, r0, r1, lsl #4
      78:	33000200 	movwcc	r0, #512	; 0x200
      7c:	02000000 	andeq	r0, r0, #0
      80:	0d0efb01 	vstreq	d15, [lr, #-4]
      84:	01010100 	mrseq	r0, (UNDEF: 17)
      88:	00000001 	andeq	r0, r0, r1
      8c:	01000001 	tsteq	r0, r1
      90:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
      94:	5f32336d 	svcpl	0x0032336d
      98:	0062696c 	rsbeq	r6, r2, ip, ror #18
      9c:	726f6300 	rsbvc	r6, pc, #0, 6
      a0:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
      a4:	616d5f33 	cmnvs	sp, r3, lsr pc
      a8:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
      ac:	00010053 	andeq	r0, r1, r3, asr r0
      b0:	05000000 	streq	r0, [r0, #-0]
      b4:	00000002 	andeq	r0, r0, r2
      b8:	01370300 	teqeq	r7, r0, lsl #6
      bc:	200b0321 	andcs	r0, fp, r1, lsr #6
      c0:	200b0321 	andcs	r0, fp, r1, lsr #6
      c4:	200b0321 	andcs	r0, fp, r1, lsr #6
      c8:	200b032f 	andcs	r0, fp, pc, lsr #6
      cc:	200b032f 	andcs	r0, fp, pc, lsr #6
      d0:	200b032f 	andcs	r0, fp, pc, lsr #6
      d4:	200b0321 	andcs	r0, fp, r1, lsr #6
      d8:	200b032f 	andcs	r0, fp, pc, lsr #6
      dc:	0a032f2f 	beq	cbda0 <__Stack_Size+0xcb9a0>
      e0:	0b032f20 	bleq	cbd68 <__Stack_Size+0xcb968>
      e4:	0b032f20 	bleq	cbd6c <__Stack_Size+0xcb96c>
      e8:	0b032f20 	bleq	cbd70 <__Stack_Size+0xcb970>
      ec:	0b032f20 	bleq	cbd74 <__Stack_Size+0xcb974>
      f0:	0b032120 	bleq	c8578 <__Stack_Size+0xc8178>
      f4:	0b032120 	bleq	c857c <__Stack_Size+0xc817c>
      f8:	0b032f20 	bleq	cbd80 <__Stack_Size+0xcb980>
      fc:	0b032120 	bleq	c8584 <__Stack_Size+0xc8184>
     100:	0b032120 	bleq	c8588 <__Stack_Size+0xc8188>
     104:	0b032f20 	bleq	cbd8c <__Stack_Size+0xcb98c>
     108:	0b032f20 	bleq	cbd90 <__Stack_Size+0xcb990>
     10c:	0a032f20 	beq	cbd94 <__Stack_Size+0xcb994>
     110:	0b032120 	bleq	c8598 <__Stack_Size+0xc8198>
     114:	01022120 	tsteq	r2, r0, lsr #2
     118:	85010100 	strhi	r0, [r1, #-256]	; 0x100
     11c:	02000003 	andeq	r0, r0, #3
     120:	0000be00 	andeq	fp, r0, r0, lsl #28
     124:	fb010200 	blx	4092e <__Stack_Size+0x4052e>
     128:	01000d0e 	tsteq	r0, lr, lsl #26
     12c:	00010101 	andeq	r0, r1, r1, lsl #2
     130:	00010000 	andeq	r0, r1, r0
     134:	2f2e0100 	svccs	0x002e0100
     138:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     13c:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     140:	2f2e0062 	svccs	0x002e0062
     144:	5f627375 	svcpl	0x00627375
     148:	0062696c 	rsbeq	r6, r2, ip, ror #18
     14c:	62737500 	rsbsvs	r7, r3, #0, 10
     150:	0000632e 	andeq	r6, r0, lr, lsr #6
     154:	74730000 	ldrbtvc	r0, [r3], #-0
     158:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     15c:	5f783031 	svcpl	0x00783031
     160:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     164:	0100682e 	tsteq	r0, lr, lsr #16
     168:	61680000 	cmnvs	r8, r0
     16c:	61776472 	cmnvs	r7, r2, ror r4
     170:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     174:	00000000 	andeq	r0, r0, r0
     178:	5f627375 	svcpl	0x00627375
     17c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     180:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     184:	73750000 	cmnvc	r5, #0
     188:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     18c:	00682e66 	rsbeq	r2, r8, r6, ror #28
     190:	75000002 	strvc	r0, [r0, #-2]
     194:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
     198:	00000000 	andeq	r0, r0, r0
     19c:	5f627375 	svcpl	0x00627375
     1a0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     1a4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1a8:	73750000 	cmnvc	r5, #0
     1ac:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     1b0:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     1b4:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     1b8:	0000682e 	andeq	r6, r0, lr, lsr #16
     1bc:	66640000 	strbtvs	r0, [r4], -r0
     1c0:	00682e75 	rsbeq	r2, r8, r5, ror lr
     1c4:	75000000 	strvc	r0, [r0, #-0]
     1c8:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
     1cc:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
     1d0:	00020068 	andeq	r0, r2, r8, rrx
     1d4:	62737500 	rsbsvs	r7, r3, #0, 10
     1d8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     1dc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1e0:	00000000 	andeq	r0, r0, r0
     1e4:	013c0205 	teqeq	ip, r5, lsl #4
     1e8:	a1030800 	tstge	r3, r0, lsl #16
     1ec:	01020101 	tsteq	r2, r1, lsl #2
     1f0:	00010100 	andeq	r0, r1, r0, lsl #2
     1f4:	013e0205 	teqeq	lr, r5, lsl #4
     1f8:	b6030800 	strlt	r0, [r3], -r0, lsl #16
     1fc:	01020102 	tsteq	r2, r2, lsl #2
     200:	00010100 	andeq	r0, r1, r0, lsl #2
     204:	01400205 	cmpeq	r0, r5, lsl #4
     208:	b9030800 	stmdblt	r3, {fp}
     20c:	01020102 	tsteq	r2, r2, lsl #2
     210:	00010100 	andeq	r0, r1, r0, lsl #2
     214:	01420205 	cmpeq	r2, r5, lsl #4
     218:	ed030800 	stc	8, cr0, [r3, #-0]
     21c:	24150102 	ldrcs	r0, [r5], #-258	; 0x102
     220:	01000402 	tsteq	r0, r2, lsl #8
     224:	02050001 	andeq	r0, r5, #1
     228:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
     22c:	01039403 	tsteq	r3, r3, lsl #8
     230:	01000102 	tsteq	r0, r2, lsl #2
     234:	02050001 	andeq	r0, r5, #1
     238:	08000150 	stmdaeq	r0, {r4, r6, r8}
     23c:	01039803 	tsteq	r3, r3, lsl #16
     240:	08024b13 	stmdaeq	r2, {r0, r1, r4, r8, r9, fp, lr}
     244:	00010100 	andeq	r0, r1, r0, lsl #2
     248:	01680205 	cmneq	r8, r5, lsl #4
     24c:	9e030800 	cdpls	8, 0, cr0, cr3, cr0, {0}
     250:	01020103 	tsteq	r2, r3, lsl #2
     254:	00010100 	andeq	r0, r1, r0, lsl #2
     258:	016a0205 	cmneq	sl, r5, lsl #4
     25c:	a2030800 	andge	r0, r3, #0, 16
     260:	01020103 	tsteq	r2, r3, lsl #2
     264:	00010100 	andeq	r0, r1, r0, lsl #2
     268:	016c0205 	cmneq	ip, r5, lsl #4
     26c:	a6030800 	strge	r0, [r3], -r0, lsl #16
     270:	01020103 	tsteq	r2, r3, lsl #2
     274:	00010100 	andeq	r0, r1, r0, lsl #2
     278:	016e0205 	cmneq	lr, r5, lsl #4
     27c:	aa030800 	bge	c2284 <__Stack_Size+0xc1e84>
     280:	01020103 	tsteq	r2, r3, lsl #2
     284:	00010100 	andeq	r0, r1, r0, lsl #2
     288:	01700205 	cmneq	r0, r5, lsl #4
     28c:	ae030800 	cdpge	8, 0, cr0, cr3, cr0, {0}
     290:	01020103 	tsteq	r2, r3, lsl #2
     294:	00010100 	andeq	r0, r1, r0, lsl #2
     298:	01720205 	cmneq	r2, r5, lsl #4
     29c:	b2030800 	andlt	r0, r3, #0, 16
     2a0:	01020103 	tsteq	r2, r3, lsl #2
     2a4:	00010100 	andeq	r0, r1, r0, lsl #2
     2a8:	01740205 	cmneq	r4, r5, lsl #4
     2ac:	b6030800 	strlt	r0, [r3], -r0, lsl #16
     2b0:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     2b4:	01010006 	tsteq	r1, r6
     2b8:	80020500 	andhi	r0, r2, r0, lsl #10
     2bc:	03080001 	movweq	r0, #32769	; 0x8001
     2c0:	2101029d 			; <UNDEFINED> instruction: 0x2101029d
     2c4:	2f1f2130 	svccs	0x001f2130
     2c8:	0b03211f 	bleq	c874c <__Stack_Size+0xc834c>
     2cc:	20750320 	rsbscs	r0, r5, r0, lsr #6
     2d0:	231d2322 	tstcs	sp, #-2013265920	; 0x88000000
     2d4:	92759291 	rsbsls	r9, r5, #268435465	; 0x10000009
     2d8:	2f3e7630 	svccs	0x003e7630
     2dc:	08212c21 	stmdaeq	r1!, {r0, r5, sl, fp, sp}
     2e0:	00010100 	andeq	r0, r1, r0, lsl #2
     2e4:	02280205 	eoreq	r0, r8, #1342177280	; 0x50000000
     2e8:	bc030800 	stclt	8, cr0, [r3], {-0}
     2ec:	1b250102 	blne	9406fc <__Stack_Size+0x9402fc>
     2f0:	8a3e7525 	bhi	f9d78c <__Stack_Size+0xf9d38c>
     2f4:	03212221 	teqeq	r1, #268435458	; 0x10000002
     2f8:	03312076 	teqeq	r1, #118	; 0x76
     2fc:	21212010 	teqcs	r1, r0, lsl r0
     300:	2221211e 	eorcs	r2, r1, #-2147483641	; 0x80000007
     304:	0b022131 	bleq	887d0 <__Stack_Size+0x883d0>
     308:	00010100 	andeq	r0, r1, r0, lsl #2
     30c:	02880205 	addeq	r0, r8, #1342177280	; 0x50000000
     310:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
     314:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     318:	01010006 	tsteq	r1, r6
     31c:	94020500 	strls	r0, [r2], #-1280	; 0x500
     320:	03080002 	movweq	r0, #32770	; 0x8002
     324:	130102fa 	movwne	r0, #4858	; 0x12fa
     328:	01000602 	tsteq	r0, r2, lsl #12
     32c:	02050001 	andeq	r0, r5, #1
     330:	080002a0 	stmdaeq	r0, {r5, r7, r9}
     334:	0102fe03 	tsteq	r2, r3, lsl #28
     338:	5a313d13 	bpl	c4f78c <__Stack_Size+0xc4f38c>
     33c:	01000602 	tsteq	r0, r2, lsl #12
     340:	02050001 	andeq	r0, r5, #1
     344:	080002c0 	stmdaeq	r0, {r6, r7, r9}
     348:	01038703 	tsteq	r3, r3, lsl #14
     34c:	00060213 	andeq	r0, r6, r3, lsl r2
     350:	05000101 	streq	r0, [r0, #-257]	; 0x101
     354:	0002cc02 	andeq	ip, r2, r2, lsl #24
     358:	02e30308 	rsceq	r0, r3, #8, 6	; 0x20000000
     35c:	3d762101 	ldfcce	f2, [r6, #-4]!
     360:	0402214d 	streq	r2, [r2], #-333	; 0x14d
     364:	00010100 	andeq	r0, r1, r0, lsl #2
     368:	02f40205 	rscseq	r0, r4, #1342177280	; 0x50000000
     36c:	27030800 	strcs	r0, [r3, -r0, lsl #16]
     370:	20110301 	andscs	r0, r1, r1, lsl #6
     374:	02005b92 	andeq	r5, r0, #149504	; 0x24800
     378:	20060204 	andcs	r0, r6, r4, lsl #4
     37c:	3d888606 	stccc	6, cr8, [r8, #24]
     380:	2d21211f 	stfcss	f2, [r1, #-124]!	; 0xffffff84
     384:	032f302f 	teqeq	pc, #47	; 0x2f
     388:	032000dc 	teqeq	r0, #220	; 0xdc
     38c:	022e7fa8 	eoreq	r7, lr, #168, 30	; 0x2a0
     390:	0101000d 	tsteq	r1, sp
     394:	00020500 	andeq	r0, r2, r0, lsl #10
     398:	03000000 	movweq	r0, #0
     39c:	150101a5 	strne	r0, [r1, #-421]	; 0x1a5
     3a0:	01000202 	tsteq	r0, r2, lsl #4
     3a4:	02050001 	andeq	r0, r5, #1
     3a8:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
     3ac:	0101ab03 	tsteq	r1, r3, lsl #22
     3b0:	023f3e14 	eorseq	r3, pc, #20, 28	; 0x140
     3b4:	01010008 	tsteq	r1, r8
     3b8:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
     3bc:	03080003 	movweq	r0, #32771	; 0x8003
     3c0:	170101b5 			; <UNDEFINED> instruction: 0x170101b5
     3c4:	32222c22 	eorcc	r2, r2, #8704	; 0x2200
     3c8:	01000602 	tsteq	r0, r2, lsl #12
     3cc:	02050001 	andeq	r0, r5, #1
     3d0:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
     3d4:	0101c303 	tsteq	r1, r3, lsl #6
     3d8:	84302131 	ldrthi	r2, [r0], #-305	; 0x131
     3dc:	2f312f40 	svccs	0x00312f40
     3e0:	312f4b31 	teqcc	pc, r1, lsr fp	; <UNPREDICTABLE>
     3e4:	2f2f3d3e 	svccs	0x002f3d3e
     3e8:	222f4b22 	eorcs	r4, pc, #34816	; 0x8800
     3ec:	502f222c 	eorpl	r2, pc, ip, lsr #4
     3f0:	01000702 	tsteq	r0, r2, lsl #14
     3f4:	02050001 	andeq	r0, r5, #1
     3f8:	08000428 	stmdaeq	r0, {r3, r5, sl}
     3fc:	0101f303 	tsteq	r1, r3, lsl #6
     400:	221f4016 	andscs	r4, pc, #22
     404:	3d21211e 	stfccs	f2, [r1, #-120]!	; 0xffffff88
     408:	00080223 	andeq	r0, r8, r3, lsr #4
     40c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     410:	00045002 	andeq	r5, r4, r2
     414:	02820308 	addeq	r0, r2, #8, 6	; 0x20000000
     418:	3d3d1301 	ldccc	3, cr1, [sp, #-4]!
     41c:	00060236 	andeq	r0, r6, r6, lsr r2
     420:	05000101 	streq	r0, [r0, #-257]	; 0x101
     424:	00046c02 	andeq	r6, r4, r2, lsl #24
     428:	00d50308 	sbcseq	r0, r5, r8, lsl #6
     42c:	02021401 	andeq	r1, r2, #16777216	; 0x1000000
     430:	00010100 	andeq	r0, r1, r0, lsl #2
     434:	04700205 	ldrbteq	r0, [r0], #-517	; 0x205
     438:	bc030800 	stclt	8, cr0, [r3], {-0}
     43c:	3d240103 	stfccs	f0, [r4, #-12]!
     440:	3d1f303d 	ldccc	0, cr3, [pc, #-244]	; 354 <_Minimum_Stack_Size+0x254>
     444:	0003022f 	andeq	r0, r3, pc, lsr #4
     448:	05000101 	streq	r0, [r0, #-257]	; 0x101
     44c:	00049402 	andeq	r9, r4, r2, lsl #8
     450:	028f0308 	addeq	r0, pc, #8, 6	; 0x20000000
     454:	4b302101 	blmi	c08860 <__Stack_Size+0xc08460>
     458:	211f2130 	tstcs	pc, r0, lsr r1	; <UNPREDICTABLE>
     45c:	022f303d 	eoreq	r3, pc, #61	; 0x3d
     460:	0101000d 	tsteq	r1, sp
     464:	d4020500 	strle	r0, [r2], #-1280	; 0x500
     468:	03080004 	movweq	r0, #32772	; 0x8004
     46c:	220103c7 	andcs	r0, r1, #469762051	; 0x1c000003
     470:	2f3d1d40 	svccs	0x003d1d40
     474:	03022f2f 	movweq	r2, #12079	; 0x2f2f
     478:	00010100 	andeq	r0, r1, r0, lsl #2
     47c:	04f80205 	ldrbteq	r0, [r8], #517	; 0x205
     480:	d0030800 	andle	r0, r3, r0, lsl #16
     484:	40210103 	eormi	r0, r1, r3, lsl #2
     488:	3d59321c 	lfmcc	f3, 2, [r9, #-112]	; 0xffffff90
     48c:	4b3c0d03 	blmi	f038a0 <__Stack_Size+0xf034a0>
     490:	423d4b50 	eorsmi	r4, sp, #80, 22	; 0x14000
     494:	5942345c 	stmdbpl	r2, {r2, r3, r4, r6, sl, ip, sp}^
     498:	3e4b5e3d 	mcrcc	14, 2, r5, cr11, cr13, {1}
     49c:	022a5f42 	eoreq	r5, sl, #264	; 0x108
     4a0:	0101000e 	tsteq	r1, lr
     4a4:	0000006e 	andeq	r0, r0, lr, rrx
     4a8:	00680002 	rsbeq	r0, r8, r2
     4ac:	01020000 	mrseq	r0, (UNDEF: 2)
     4b0:	000d0efb 	strdeq	r0, [sp], -fp
     4b4:	01010101 	tsteq	r1, r1, lsl #2
     4b8:	01000000 	mrseq	r0, (UNDEF: 0)
     4bc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     4c0:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     4c4:	6c5f3233 	lfmvs	f3, 2, [pc], {51}	; 0x33
     4c8:	2e006269 	cdpcs	2, 0, cr6, cr0, cr9, {3}
     4cc:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
     4d0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     4d4:	74730000 	ldrbtvc	r0, [r3], #-0
     4d8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     4dc:	5f783031 	svcpl	0x00783031
     4e0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     4e4:	0100682e 	tsteq	r0, lr, lsr #16
     4e8:	73750000 	cmnvc	r5, #0
     4ec:	6f635f62 	svcvs	0x00635f62
     4f0:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     4f4:	00000200 	andeq	r0, r0, r0, lsl #4
     4f8:	2e627375 	mcrcs	3, 3, r7, cr2, cr5, {3}
     4fc:	00000068 	andeq	r0, r0, r8, rrx
     500:	62737500 	rsbsvs	r7, r3, #0, 10
     504:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
     508:	70697263 	rsbvc	r7, r9, r3, ror #4
     50c:	2e726f74 	mrccs	15, 3, r6, cr2, cr4, {3}
     510:	00000063 	andeq	r0, r0, r3, rrx
     514:	00930000 	addseq	r0, r3, r0
     518:	00020000 	andeq	r0, r2, r0
     51c:	0000005d 	andeq	r0, r0, sp, asr r0
     520:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     524:	0101000d 	tsteq	r1, sp
     528:	00000101 	andeq	r0, r0, r1, lsl #2
     52c:	00000100 	andeq	r0, r0, r0, lsl #2
     530:	732f2e01 	teqvc	pc, #1, 28
     534:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     538:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     53c:	616d0000 	cmnvs	sp, r0
     540:	632e6e69 	teqvs	lr, #1680	; 0x690
     544:	00000000 	andeq	r0, r0, r0
     548:	2e756664 	cdpcs	6, 7, cr6, cr5, cr4, {3}
     54c:	00000068 	andeq	r0, r0, r8, rrx
     550:	72616800 	rsbvc	r6, r1, #0, 16
     554:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
     558:	00682e65 	rsbeq	r2, r8, r5, ror #28
     55c:	75000000 	strvc	r0, [r0, #-0]
     560:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
     564:	00000000 	andeq	r0, r0, r0
     568:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     56c:	30316632 	eorscc	r6, r1, r2, lsr r6
     570:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     574:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     578:	00000100 	andeq	r0, r0, r0, lsl #2
     57c:	02050000 	andeq	r0, r5, #0
     580:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
     584:	24012603 	strcs	r2, [r1], #-1539	; 0x603
     588:	2f2f2f2f 	svccs	0x002f2f2f
     58c:	661c0330 			; <UNDEFINED> instruction: 0x661c0330
     590:	0402004e 	streq	r0, [r2], #-78	; 0x4e
     594:	02004601 	andeq	r4, r0, #1048576	; 0x100000
     598:	17030104 	strne	r0, [r3, -r4, lsl #2]
     59c:	0a034c66 	beq	d373c <__Stack_Size+0xd333c>
     5a0:	4c324c3c 	ldcmi	12, cr4, [r2], #-240	; 0xffffff10
     5a4:	334a0903 	movtcc	r0, #43267	; 0xa903
     5a8:	01000602 	tsteq	r0, r2, lsl #12
     5ac:	0002e001 	andeq	lr, r2, r1
     5b0:	58000200 	stmdapl	r0, {r9}
     5b4:	02000000 	andeq	r0, r0, #0
     5b8:	0d0efb01 	vstreq	d15, [lr, #-4]
     5bc:	01010100 	mrseq	r0, (UNDEF: 17)
     5c0:	00000001 	andeq	r0, r0, r1
     5c4:	01000001 	tsteq	r0, r1
     5c8:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
     5cc:	5f32336d 	svcpl	0x0032336d
     5d0:	0062696c 	rsbeq	r6, r2, ip, ror #18
     5d4:	72616800 	rsbvc	r6, r1, #0, 16
     5d8:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
     5dc:	00632e65 	rsbeq	r2, r3, r5, ror #28
     5e0:	73000000 	movwvc	r0, #0
     5e4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     5e8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     5ec:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     5f0:	00682e65 	rsbeq	r2, r8, r5, ror #28
     5f4:	68000001 	stmdavs	r0, {r0}
     5f8:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
     5fc:	2e657261 	cdpcs	2, 6, cr7, cr5, cr1, {3}
     600:	00000068 	andeq	r0, r0, r8, rrx
     604:	62737500 	rsbsvs	r7, r3, #0, 10
     608:	0000682e 	andeq	r6, r0, lr, lsr #16
     60c:	00000000 	andeq	r0, r0, r0
     610:	06240205 	strteq	r0, [r4], -r5, lsl #4
     614:	2c030800 	stccs	8, cr0, [r3], {-0}
     618:	4b3b1401 	blmi	ec5624 <__Stack_Size+0xec5224>
     61c:	01000402 	tsteq	r0, r2, lsl #8
     620:	02050001 	andeq	r0, r5, #1
     624:	00000000 	andeq	r0, r0, r0
     628:	14013103 	strne	r3, [r1], #-259	; 0x103
     62c:	0004025d 	andeq	r0, r4, sp, asr r2
     630:	05000101 	streq	r0, [r0, #-257]	; 0x101
     634:	00063c02 	andeq	r3, r6, r2, lsl #24
     638:	013a0308 	teqeq	sl, r8, lsl #6
     63c:	2e0b0316 	mcrcs	3, 0, r0, cr11, cr6, {0}
     640:	01000602 	tsteq	r0, r2, lsl #12
     644:	02050001 	andeq	r0, r5, #1
     648:	00000000 	andeq	r0, r0, r0
     64c:	0100cc03 	tsteq	r0, r3, lsl #24
     650:	3d493d2e 	stclcc	13, cr3, [r9, #-184]	; 0xffffff48
     654:	01040200 	mrseq	r0, R12_usr
     658:	00200631 	eoreq	r0, r0, r1, lsr r6
     65c:	06010402 	streq	r0, [r1], -r2, lsl #8
     660:	04020022 	streq	r0, [r2], #-34	; 0x22
     664:	02002202 	andeq	r2, r0, #536870912	; 0x20000000
     668:	331e0204 	tstcc	lr, #4, 4	; 0x40000000
     66c:	0402005a 	streq	r0, [r2], #-90	; 0x5a
     670:	00200601 	eoreq	r0, r0, r1, lsl #12
     674:	06020402 	streq	r0, [r2], -r2, lsl #8
     678:	04020022 	streq	r0, [r2], #-34	; 0x22
     67c:	02321e02 	eorseq	r1, r2, #2, 28
     680:	0101000a 	tsteq	r1, sl
     684:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
     688:	03080006 	movweq	r0, #32774	; 0x8006
     68c:	130100e1 	movwne	r0, #4321	; 0x10e1
     690:	4b4b1f21 	blmi	12c831c <__Stack_Size+0x12c7f1c>
     694:	024c4b67 	subeq	r4, ip, #105472	; 0x19c00
     698:	0101000c 	tsteq	r1, ip
     69c:	94020500 	strls	r0, [r2], #-1280	; 0x500
     6a0:	03080006 	movweq	r0, #32774	; 0x8006
     6a4:	150100eb 	strne	r0, [r1, #-235]	; 0xeb
     6a8:	01040200 	mrseq	r0, R12_usr
     6ac:	85424d59 	strbhi	r4, [r2, #-3417]	; 0xd59
     6b0:	01040200 	mrseq	r0, R12_usr
     6b4:	4a0c0351 	bmi	301400 <__Stack_Size+0x301000>
     6b8:	01040200 	mrseq	r0, R12_usr
     6bc:	024b3e4b 	subeq	r3, fp, #1200	; 0x4b0
     6c0:	01010009 	tsteq	r1, r9
     6c4:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
     6c8:	03080006 	movweq	r0, #32774	; 0x8006
     6cc:	16010196 			; <UNDEFINED> instruction: 0x16010196
     6d0:	3c7f9403 	cfldrdcc	mvd9, [pc], #-12	; 6cc <__Stack_Size+0x2cc>
     6d4:	01000902 	tsteq	r0, r2, lsl #18
     6d8:	02050001 	andeq	r0, r5, #1
     6dc:	0800070c 	stmdaeq	r0, {r2, r3, r8, r9, sl}
     6e0:	0101a303 	tsteq	r1, r3, lsl #6
     6e4:	2f214b14 	svccs	0x00214b14
     6e8:	01040200 	mrseq	r0, R12_usr
     6ec:	03023d24 	movweq	r3, #11556	; 0x2d24
     6f0:	00010100 	andeq	r0, r1, r0, lsl #2
     6f4:	07280205 	streq	r0, [r8, -r5, lsl #4]!
     6f8:	af030800 	svcge	0x00030800
     6fc:	22130101 	andscs	r0, r3, #1073741824	; 0x40000000
     700:	00070233 	andeq	r0, r7, r3, lsr r2
     704:	05000101 	streq	r0, [r0, #-257]	; 0x101
     708:	00073c02 	andeq	r3, r7, r2, lsl #24
     70c:	01b90308 			; <UNDEFINED> instruction: 0x01b90308
     710:	01090301 	tsteq	r9, r1, lsl #6
     714:	25207703 	strcs	r7, [r0, #-1795]!	; 0x703
     718:	023e2224 	eorseq	r2, lr, #36, 4	; 0x40000002
     71c:	01010005 	tsteq	r1, r5
     720:	54020500 	strpl	r0, [r2], #-1280	; 0x500
     724:	03080007 	movweq	r0, #32775	; 0x8007
     728:	140101de 	strne	r0, [r1], #-478	; 0x1de
     72c:	02316a5c 	eorseq	r6, r1, #92, 20	; 0x5c000
     730:	01010009 	tsteq	r1, r9
     734:	80020500 	andhi	r0, r2, r0, lsl #10
     738:	03080007 	movweq	r0, #32775	; 0x8007
     73c:	240101f0 	strcs	r0, [r1], #-496	; 0x1f0
     740:	8b5a2c22 	blhi	168b7d0 <__Stack_Size+0x168b3d0>
     744:	3e263136 	mcrcc	1, 1, r3, cr6, cr6, {1}
     748:	00060250 	andeq	r0, r6, r0, asr r2
     74c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     750:	0007c802 	andeq	ip, r7, r2, lsl #16
     754:	028e0308 	addeq	r0, lr, #8, 6	; 0x20000000
     758:	010c0301 	tsteq	ip, r1, lsl #6
     75c:	03207403 	teqeq	r0, #50331648	; 0x3000000
     760:	1c24200c 	stcne	0, cr2, [r4], #-48	; 0xffffffd0
     764:	312c313d 	teqcc	ip, sp, lsr r1
     768:	3b311d23 	blcc	c47bfc <__Stack_Size+0xc477fc>
     76c:	73231d24 	teqvc	r3, #36, 26	; 0x900
     770:	22212f30 	eorcs	r2, r1, #48, 30	; 0xc0
     774:	211f2131 	tstcs	pc, r1, lsr r1	; <UNPREDICTABLE>
     778:	00090249 	andeq	r0, r9, r9, asr #4
     77c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     780:	00083402 	andeq	r3, r8, r2, lsl #8
     784:	02b10308 	adcseq	r0, r1, #8, 6	; 0x20000000
     788:	2f591401 	svccs	0x00591401
     78c:	0702302f 	streq	r3, [r2, -pc, lsr #32]
     790:	00010100 	andeq	r0, r1, r0, lsl #2
     794:	08580205 	ldmdaeq	r8, {r0, r2, r9}^
     798:	ca030800 	bgt	c27a0 <__Stack_Size+0xc23a0>
     79c:	b7030101 	strlt	r0, [r3, -r1, lsl #2]
     7a0:	c9032001 	stmdbgt	r3, {r0, sp}
     7a4:	b7032e7e 	smlsdxlt	r3, lr, lr, r2
     7a8:	cf032001 	svcgt	0x00032001
     7ac:	312f207e 	teqcc	pc, lr, ror r0	; <UNPREDICTABLE>
     7b0:	2d213032 	stccs	0, cr3, [r1, #-200]!	; 0xffffff38
     7b4:	01000402 	tsteq	r0, r2, lsl #8
     7b8:	02050001 	andeq	r0, r5, #1
     7bc:	08000880 	stmdaeq	r0, {r7, fp}
     7c0:	0102bb03 	tsteq	r2, r3, lsl #22
     7c4:	04020016 	streq	r0, [r2], #-22
     7c8:	07024001 	streq	r4, [r2, -r1]
     7cc:	00010100 	andeq	r0, r1, r0, lsl #2
     7d0:	08940205 	ldmeq	r4, {r0, r2, r9}
     7d4:	c7030800 	strgt	r0, [r3, -r0, lsl #16]
     7d8:	1f130102 	svcne	0x00130102
     7dc:	02002221 	andeq	r2, r0, #268435458	; 0x10000002
     7e0:	67300104 	ldrvs	r0, [r0, -r4, lsl #2]!
     7e4:	04020021 	streq	r0, [r2], #-33	; 0x21
     7e8:	234f2f01 	movtcs	r2, #65281	; 0xff01
     7ec:	01000702 	tsteq	r0, r2, lsl #14
     7f0:	02050001 	andeq	r0, r5, #1
     7f4:	00000000 	andeq	r0, r0, r0
     7f8:	0102d803 	tsteq	r2, r3, lsl #16
     7fc:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     800:	b14b2f01 	cmplt	fp, r1, lsl #30
     804:	00040221 	andeq	r0, r4, r1, lsr #4
     808:	05000101 	streq	r0, [r0, #-257]	; 0x101
     80c:	0008c802 	andeq	ip, r8, r2, lsl #16
     810:	02e20308 	rsceq	r0, r2, #8, 6	; 0x20000000
     814:	302f2201 	eorcc	r2, pc, r1, lsl #4
     818:	00211f21 	eoreq	r1, r1, r1, lsr #30
     81c:	24010402 	strcs	r0, [r1], #-1026	; 0x402
     820:	0402004b 	streq	r0, [r2], #-75	; 0x4b
     824:	003d3d01 	eorseq	r3, sp, r1, lsl #26
     828:	3d010402 	cfstrscc	mvf0, [r1, #-8]
     82c:	25232f3e 	strcs	r2, [r3, #-3902]!	; 0xf3e
     830:	01000902 	tsteq	r0, r2, lsl #18
     834:	02050001 	andeq	r0, r5, #1
     838:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
     83c:	0102fd03 	tsteq	r2, r3, lsl #26
     840:	00060216 	andeq	r0, r6, r6, lsl r2
     844:	05000101 	streq	r0, [r0, #-257]	; 0x101
     848:	00092002 	andeq	r2, r9, r2
     84c:	03840308 	orreq	r0, r4, #8, 6	; 0x20000000
     850:	023d1401 	eorseq	r1, sp, #16777216	; 0x1000000
     854:	01010009 	tsteq	r1, r9
     858:	38020500 	stmdacc	r2, {r8, sl}
     85c:	03080009 	movweq	r0, #32777	; 0x8009
     860:	1401038d 	strne	r0, [r1], #-909	; 0x38d
     864:	024c3022 	subeq	r3, ip, #34	; 0x22
     868:	01010002 	tsteq	r1, r2
     86c:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
     870:	03080009 	movweq	r0, #32777	; 0x8009
     874:	14010399 	strne	r0, [r1], #-921	; 0x399
     878:	0004024b 	andeq	r0, r4, fp, asr #4
     87c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     880:	00095c02 	andeq	r5, r9, r2, lsl #24
     884:	039f0308 	orrseq	r0, pc, #8, 6	; 0x20000000
     888:	26301501 	ldrtcs	r1, [r0], -r1, lsl #10
     88c:	01000902 	tsteq	r0, r2, lsl #18
     890:	00022501 	andeq	r2, r2, r1, lsl #10
     894:	82000200 	andhi	r0, r0, #0, 4
     898:	02000000 	andeq	r0, r0, #0
     89c:	0d0efb01 	vstreq	d15, [lr, #-4]
     8a0:	01010100 	mrseq	r0, (UNDEF: 17)
     8a4:	00000001 	andeq	r0, r0, r1
     8a8:	01000001 	tsteq	r0, r1
     8ac:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
     8b0:	5f32336d 	svcpl	0x0032336d
     8b4:	0062696c 	rsbeq	r6, r2, ip, ror #18
     8b8:	73752f2e 	cmnvc	r5, #46, 30	; 0xb8
     8bc:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
     8c0:	64000062 	strvs	r0, [r0], #-98	; 0x62
     8c4:	632e7566 	teqvs	lr, #427819008	; 0x19800000
     8c8:	00000000 	andeq	r0, r0, r0
     8cc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     8d0:	30316632 	eorscc	r6, r1, r2, lsr r6
     8d4:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     8d8:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     8dc:	00000100 	andeq	r0, r0, r0, lsl #2
     8e0:	5f627375 	svcpl	0x00627375
     8e4:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     8e8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     8ec:	66640000 	strbtvs	r0, [r4], -r0
     8f0:	00682e75 	rsbeq	r2, r8, r5, ror lr
     8f4:	75000000 	strvc	r0, [r0, #-0]
     8f8:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
     8fc:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
     900:	00020068 	andeq	r0, r2, r8, rrx
     904:	62737500 	rsbsvs	r7, r3, #0, 10
     908:	0000682e 	andeq	r6, r0, lr, lsr #16
     90c:	61680000 	cmnvs	r8, r0
     910:	61776472 	cmnvs	r7, r2, ror r4
     914:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     918:	00000000 	andeq	r0, r0, r0
     91c:	02050000 	andeq	r0, r5, #0
     920:	08000974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp}
     924:	13013703 	movwne	r3, #5891	; 0x1703
     928:	21211c32 	teqcs	r1, r2, lsr ip
     92c:	21212121 	teqcs	r1, r1, lsr #2
     930:	2f211e22 	svccs	0x00211e22
     934:	1f214b2f 	svcne	0x00214b2f
     938:	15022f21 	strne	r2, [r2, #-3873]	; 0xf21
     93c:	00010100 	andeq	r0, r1, r0, lsl #2
     940:	09d00205 	ldmibeq	r0, {r0, r2, r9}^
     944:	ff030800 			; <UNDEFINED> instruction: 0xff030800
     948:	21210102 	teqcs	r1, r2, lsl #2
     94c:	231f211f 	tstcs	pc, #-1073741817	; 0xc0000007
     950:	2f21221e 	svccs	0x0021221e
     954:	2e0e0322 	cdpcs	3, 0, cr0, cr14, cr2, {1}
     958:	302e7303 	eorcc	r7, lr, r3, lsl #6
     95c:	2c242f42 	stccs	15, cr2, [r4], #-264	; 0xfffffef8
     960:	01000802 	tsteq	r0, r2, lsl #16
     964:	02050001 	andeq	r0, r5, #1
     968:	00000000 	andeq	r0, r0, r0
     96c:	01039703 	tsteq	r3, r3, lsl #14
     970:	01000102 	tsteq	r0, r2, lsl #2
     974:	02050001 	andeq	r0, r5, #1
     978:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
     97c:	01039a03 	tsteq	r3, r3, lsl #20
     980:	224b2113 	subcs	r2, fp, #-1073741820	; 0xc0000004
     984:	00050222 	andeq	r0, r5, r2, lsr #4
     988:	05000101 	streq	r0, [r0, #-257]	; 0x101
     98c:	000a2c02 	andeq	r2, sl, r2, lsl #24
     990:	03a30308 			; <UNDEFINED> instruction: 0x03a30308
     994:	4b211301 	blmi	8455a0 <__Stack_Size+0x8451a0>
     998:	05022222 	streq	r2, [r2, #-546]	; 0x222
     99c:	00010100 	andeq	r0, r1, r0, lsl #2
     9a0:	0a440205 	beq	11011bc <__Stack_Size+0x1100dbc>
     9a4:	ad030800 	stcge	8, cr0, [r3, #-0]
     9a8:	1f220103 	svcne	0x00220103
     9ac:	222f4b21 	eorcs	r4, pc, #33792	; 0x8400
     9b0:	0007023e 	andeq	r0, r7, lr, lsr r2
     9b4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     9b8:	000a6c02 	andeq	r6, sl, r2, lsl #24
     9bc:	03b70308 			; <UNDEFINED> instruction: 0x03b70308
     9c0:	67212101 	strvs	r2, [r1, -r1, lsl #2]!
     9c4:	09028422 	stmdbeq	r2, {r1, r5, sl, pc}
     9c8:	00010100 	andeq	r0, r1, r0, lsl #2
     9cc:	0aa00205 	beq	fe8011e8 <BootRAM+0xd771989>
     9d0:	c0030800 	andgt	r0, r3, r0, lsl #16
     9d4:	13030103 	movwne	r0, #12547	; 0x3103
     9d8:	221e3e20 	andscs	r3, lr, #32, 28	; 0x200
     9dc:	003e315c 	eorseq	r3, lr, ip, asr r1
     9e0:	06010402 	streq	r0, [r1], -r2, lsl #8
     9e4:	04020020 	streq	r0, [r2], #-32
     9e8:	00590602 	subseq	r0, r9, r2, lsl #12
     9ec:	57020402 	strpl	r0, [r2, -r2, lsl #8]
     9f0:	0c025a33 	stceq	10, cr5, [r2], {51}	; 0x33
     9f4:	00010100 	andeq	r0, r1, r0, lsl #2
     9f8:	0afc0205 	beq	fff01214 <BootRAM+0xee719b5>
     9fc:	ca030800 	bgt	c2a04 <__Stack_Size+0xc2604>
     a00:	24310100 	ldrtcs	r0, [r1], #-256	; 0x100
     a04:	1f21321c 	svcne	0x0021321c
     a08:	22221e23 	eorcs	r1, r2, #560	; 0x230
     a0c:	304b5a22 	subcc	r5, fp, r2, lsr #20
     a10:	0b032f1f 	bleq	cc694 <__Stack_Size+0xcc294>
     a14:	2f3e2f20 	svccs	0x003e2f20
     a18:	29034c2f 	stmdbcs	r3, {r0, r1, r2, r3, r5, sl, fp, lr}
     a1c:	312f4420 	teqcc	pc, r0, lsr #8
     a20:	03674c3d 	cmneq	r7, #15616	; 0x3d00
     a24:	242a5816 	strtcs	r5, [sl], #-2070	; 0x816
     a28:	2f264b2f 	svccs	0x00264b2f
     a2c:	35303131 	ldrcc	r3, [r0, #-305]!	; 0x131
     a30:	581d0331 	ldmdapl	sp, {r0, r4, r5, r8, r9}
     a34:	30353f2f 	eorscc	r3, r5, pc, lsr #30
     a38:	21211f4c 	teqcs	r1, ip, asr #30
     a3c:	2f593041 	svccs	0x00593041
     a40:	303e3131 	eorscc	r3, lr, r1, lsr r1
     a44:	59314330 	ldmdbpl	r1!, {r4, r5, r8, r9, lr}
     a48:	35432f2f 	strbcc	r2, [r3, #-3887]	; 0xf2f
     a4c:	30593135 	subscc	r3, r9, r5, lsr r1
     a50:	1f3d1f3d 	svcne	0x003d1f3d
     a54:	764fc921 	strbvc	ip, [pc], -r1, lsr #18
     a58:	302f414b 	eorcc	r4, pc, fp, asr #2
     a5c:	2f302f2f 	svccs	0x00302f2f
     a60:	2f5a3135 	svccs	0x005a3135
     a64:	362f3030 			; <UNDEFINED> instruction: 0x362f3030
     a68:	0225312f 	eoreq	r3, r5, #-1073741813	; 0xc000000b
     a6c:	0101001f 	tsteq	r1, pc, lsl r0
     a70:	00020500 	andeq	r0, r2, r0, lsl #10
     a74:	03000000 	movweq	r0, #0
     a78:	130103e8 	movwne	r0, #5096	; 0x13e8
     a7c:	0004022f 	andeq	r0, r4, pc, lsr #4
     a80:	05000101 	streq	r0, [r0, #-257]	; 0x101
     a84:	00000002 	andeq	r0, r0, r2
     a88:	03ec0300 	mvneq	r0, #0, 6
     a8c:	06021301 	streq	r1, [r2], -r1, lsl #6
     a90:	00010100 	andeq	r0, r1, r0, lsl #2
     a94:	0d180205 	lfmeq	f0, 4, [r8, #-20]	; 0xffffffec
     a98:	f0030800 			; <UNDEFINED> instruction: 0xf0030800
     a9c:	2f130103 	svccs	0x00130103
     aa0:	01000402 	tsteq	r0, r2, lsl #8
     aa4:	02050001 	andeq	r0, r5, #1
     aa8:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
     aac:	0103f403 	tsteq	r3, r3, lsl #8
     ab0:	01040200 	mrseq	r0, R12_usr
     ab4:	00020215 	andeq	r0, r2, r5, lsl r2
     ab8:	04c70101 	strbeq	r0, [r7], #257	; 0x101
     abc:	00020000 	andeq	r0, r2, r0
     ac0:	00000045 	andeq	r0, r0, r5, asr #32
     ac4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     ac8:	0101000d 	tsteq	r1, sp
     acc:	00000101 	andeq	r0, r0, r1, lsl #2
     ad0:	00000100 	andeq	r0, r0, r0, lsl #2
     ad4:	62737501 	rsbsvs	r7, r3, #4194304	; 0x400000
     ad8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     adc:	73750000 	cmnvc	r5, #0
     ae0:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xf62
     ae4:	632e7367 	teqvs	lr, #-1677721599	; 0x9c000001
     ae8:	00000100 	andeq	r0, r0, r0, lsl #2
     aec:	5f627375 	svcpl	0x00627375
     af0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     af4:	0100682e 	tsteq	r0, lr, lsr #16
     af8:	73750000 	cmnvc	r5, #0
     afc:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xf62
     b00:	682e7367 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}
     b04:	00000100 	andeq	r0, r0, r0, lsl #2
     b08:	02050000 	andeq	r0, r5, #0
     b0c:	00000000 	andeq	r0, r0, r0
     b10:	13012203 	movwne	r2, #4611	; 0x1203
     b14:	01000602 	tsteq	r0, r2, lsl #12
     b18:	02050001 	andeq	r0, r5, #1
     b1c:	00000000 	andeq	r0, r0, r0
     b20:	13012e03 	movwne	r2, #7683	; 0x1e03
     b24:	0004022f 	andeq	r0, r4, pc, lsr #4
     b28:	05000101 	streq	r0, [r0, #-257]	; 0x101
     b2c:	00000002 	andeq	r0, r0, r2
     b30:	013a0300 	teqeq	sl, r0, lsl #6
     b34:	00060213 	andeq	r0, r6, r3, lsl r2
     b38:	05000101 	streq	r0, [r0, #-257]	; 0x101
     b3c:	00000002 	andeq	r0, r0, r2
     b40:	00c60300 	sbceq	r0, r6, r0, lsl #6
     b44:	022f1301 	eoreq	r1, pc, #67108864	; 0x4000000
     b48:	01010004 	tsteq	r1, r4
     b4c:	00020500 	andeq	r0, r2, r0, lsl #10
     b50:	03000000 	movweq	r0, #0
     b54:	130100d2 	movwne	r0, #4306	; 0x10d2
     b58:	0004022f 	andeq	r0, r4, pc, lsr #4
     b5c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     b60:	00000002 	andeq	r0, r0, r2
     b64:	00de0300 	sbcseq	r0, lr, r0, lsl #6
     b68:	06021301 	streq	r1, [r2], -r1, lsl #6
     b6c:	00010100 	andeq	r0, r1, r0, lsl #2
     b70:	00000205 	andeq	r0, r0, r5, lsl #4
     b74:	ea030000 	b	c0b7c <__Stack_Size+0xc077c>
     b78:	2f130100 	svccs	0x00130100
     b7c:	01000402 	tsteq	r0, r2, lsl #8
     b80:	02050001 	andeq	r0, r5, #1
     b84:	00000000 	andeq	r0, r0, r0
     b88:	0100f603 	tsteq	r0, r3, lsl #12
     b8c:	00080213 	andeq	r0, r8, r3, lsl r2
     b90:	05000101 	streq	r0, [r0, #-257]	; 0x101
     b94:	00000002 	andeq	r0, r0, r2
     b98:	01820300 	orreq	r0, r2, r0, lsl #6
     b9c:	022f1301 	eoreq	r1, pc, #67108864	; 0x4000000
     ba0:	01010004 	tsteq	r1, r4
     ba4:	00020500 	andeq	r0, r2, r0, lsl #10
     ba8:	03000000 	movweq	r0, #0
     bac:	1301018f 	movwne	r0, #4495	; 0x118f
     bb0:	01000702 	tsteq	r0, r2, lsl #14
     bb4:	02050001 	andeq	r0, r5, #1
     bb8:	00000000 	andeq	r0, r0, r0
     bbc:	01019b03 	tsteq	r1, r3, lsl #22
     bc0:	02026713 	andeq	r6, r2, #4980736	; 0x4c0000
     bc4:	00010100 	andeq	r0, r1, r0, lsl #2
     bc8:	00000205 	andeq	r0, r0, r5, lsl #4
     bcc:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
     bd0:	02130101 	andseq	r0, r3, #1073741824	; 0x40000000
     bd4:	0101000e 	tsteq	r1, lr
     bd8:	00020500 	andeq	r0, r2, r0, lsl #10
     bdc:	03000000 	movweq	r0, #0
     be0:	130101b4 	movwne	r0, #4532	; 0x11b4
     be4:	00030267 	andeq	r0, r3, r7, ror #4
     be8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     bec:	000d2802 	andeq	r2, sp, r2, lsl #16
     bf0:	01c10308 	biceq	r0, r1, r8, lsl #6
     bf4:	15021301 	strne	r1, [r2, #-769]	; 0x301
     bf8:	00010100 	andeq	r0, r1, r0, lsl #2
     bfc:	00000205 	andeq	r0, r0, r5, lsl #4
     c00:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
     c04:	02130101 	andseq	r0, r3, #1073741824	; 0x40000000
     c08:	01010015 	tsteq	r1, r5, lsl r0
     c0c:	00020500 	andeq	r0, r2, r0, lsl #10
     c10:	03000000 	movweq	r0, #0
     c14:	030101db 	movweq	r0, #4571	; 0x11db
     c18:	c2030141 	andgt	r0, r3, #1073741840	; 0x40000010
     c1c:	be035800 	cdplt	8, 0, cr5, cr3, cr0, {0}
     c20:	c203207f 	andgt	r2, r3, #127	; 0x7f
     c24:	3e222000 	cdpcc	0, 2, cr2, cr2, cr0, {0}
     c28:	00050230 	andeq	r0, r5, r0, lsr r2
     c2c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c30:	00000002 	andeq	r0, r0, r2
     c34:	01f00300 	mvnseq	r0, r0, lsl #6
     c38:	02671301 	rsbeq	r1, r7, #67108864	; 0x4000000
     c3c:	01010003 	tsteq	r1, r3
     c40:	00020500 	andeq	r0, r2, r0, lsl #10
     c44:	03000000 	movweq	r0, #0
     c48:	130101fc 	movwne	r0, #4604	; 0x11fc
     c4c:	00030267 	andeq	r0, r3, r7, ror #4
     c50:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c54:	00000002 	andeq	r0, r0, r2
     c58:	02880300 	addeq	r0, r8, #0, 6
     c5c:	0f021301 	svceq	0x00021301
     c60:	00010100 	andeq	r0, r1, r0, lsl #2
     c64:	0d520205 	lfmeq	f0, 2, [r2, #-20]	; 0xffffffec
     c68:	94030800 	strls	r0, [r3], #-2048	; 0x800
     c6c:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     c70:	0101000f 	tsteq	r1, pc
     c74:	00020500 	andeq	r0, r2, r0, lsl #10
     c78:	03000000 	movweq	r0, #0
     c7c:	130102a0 	movwne	r0, #4768	; 0x12a0
     c80:	01000f02 	tsteq	r0, r2, lsl #30
     c84:	02050001 	andeq	r0, r5, #1
     c88:	00000000 	andeq	r0, r0, r0
     c8c:	0102ac03 	tsteq	r2, r3, lsl #24
     c90:	000e0213 	andeq	r0, lr, r3, lsl r2
     c94:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c98:	000d7002 	andeq	r7, sp, r2
     c9c:	02b70308 	adcseq	r0, r7, #8, 6	; 0x20000000
     ca0:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
     ca4:	00010100 	andeq	r0, r1, r0, lsl #2
     ca8:	00000205 	andeq	r0, r0, r5, lsl #4
     cac:	c2030000 	andgt	r0, r3, #0
     cb0:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     cb4:	0101000f 	tsteq	r1, pc
     cb8:	00020500 	andeq	r0, r2, r0, lsl #10
     cbc:	03000000 	movweq	r0, #0
     cc0:	130102cd 	movwne	r0, #4813	; 0x12cd
     cc4:	01000f02 	tsteq	r0, r2, lsl #30
     cc8:	02050001 	andeq	r0, r5, #1
     ccc:	00000000 	andeq	r0, r0, r0
     cd0:	0102d803 	tsteq	r2, r3, lsl #16
     cd4:	000e0213 	andeq	r0, lr, r3, lsl r2
     cd8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     cdc:	00000002 	andeq	r0, r0, r2
     ce0:	02e30300 	rsceq	r0, r3, #0, 6
     ce4:	02831301 	addeq	r1, r3, #67108864	; 0x4000000
     ce8:	01010005 	tsteq	r1, r5
     cec:	00020500 	andeq	r0, r2, r0, lsl #10
     cf0:	03000000 	movweq	r0, #0
     cf4:	130102ee 	movwne	r0, #4846	; 0x12ee
     cf8:	00050283 	andeq	r0, r5, r3, lsl #5
     cfc:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d00:	00000002 	andeq	r0, r0, r2
     d04:	02f90300 	rscseq	r0, r9, #0, 6
     d08:	0c021301 	stceq	3, cr1, [r2], {1}
     d0c:	00010100 	andeq	r0, r1, r0, lsl #2
     d10:	00000205 	andeq	r0, r0, r5, lsl #4
     d14:	84030000 	strhi	r0, [r3], #-0
     d18:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     d1c:	0101000e 	tsteq	r1, lr
     d20:	00020500 	andeq	r0, r2, r0, lsl #10
     d24:	03000000 	movweq	r0, #0
     d28:	1301038f 	movwne	r0, #5007	; 0x138f
     d2c:	01001002 	tsteq	r0, r2
     d30:	02050001 	andeq	r0, r5, #1
     d34:	00000000 	andeq	r0, r0, r0
     d38:	01039a03 	tsteq	r3, r3, lsl #20
     d3c:	00100213 	andseq	r0, r0, r3, lsl r2
     d40:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d44:	000d8c02 	andeq	r8, sp, r2, lsl #24
     d48:	03a50308 			; <UNDEFINED> instruction: 0x03a50308
     d4c:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
     d50:	82060104 	andhi	r0, r6, #4, 2
     d54:	01000802 	tsteq	r0, r2, lsl #16
     d58:	02050001 	andeq	r0, r5, #1
     d5c:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
     d60:	0103b003 	tsteq	r3, r3
     d64:	04020013 	streq	r0, [r2], #-19
     d68:	02820601 	addeq	r0, r2, #1048576	; 0x100000
     d6c:	01010008 	tsteq	r1, r8
     d70:	00020500 	andeq	r0, r2, r0, lsl #10
     d74:	03000000 	movweq	r0, #0
     d78:	130103bc 	movwne	r0, #5052	; 0x13bc
     d7c:	01000f02 	tsteq	r0, r2, lsl #30
     d80:	02050001 	andeq	r0, r5, #1
     d84:	00000000 	andeq	r0, r0, r0
     d88:	0103c703 	tsteq	r3, r3, lsl #14
     d8c:	03026713 	movweq	r6, #10003	; 0x2713
     d90:	00010100 	andeq	r0, r1, r0, lsl #2
     d94:	00000205 	andeq	r0, r0, r5, lsl #4
     d98:	d3030000 	movwle	r0, #12288	; 0x3000
     d9c:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     da0:	01010010 	tsteq	r1, r0, lsl r0
     da4:	00020500 	andeq	r0, r2, r0, lsl #10
     da8:	03000000 	movweq	r0, #0
     dac:	130103df 	movwne	r0, #5087	; 0x13df
     db0:	01001002 	tsteq	r0, r2
     db4:	02050001 	andeq	r0, r5, #1
     db8:	08000dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp}
     dbc:	0103ea03 	tsteq	r3, r3, lsl #20
     dc0:	04029f13 	streq	r9, [r2], #-3859	; 0xf13
     dc4:	00010100 	andeq	r0, r1, r0, lsl #2
     dc8:	0de80205 	sfmeq	f0, 2, [r8, #20]!
     dcc:	f5030800 			; <UNDEFINED> instruction: 0xf5030800
     dd0:	83130103 	tsthi	r3, #-1073741824	; 0xc0000000
     dd4:	01000602 	tsteq	r0, r2, lsl #12
     dd8:	02050001 	andeq	r0, r5, #1
     ddc:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
     de0:	01048103 	tsteq	r4, r3, lsl #2
     de4:	000e0213 	andeq	r0, lr, r3, lsl r2
     de8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     dec:	00000002 	andeq	r0, r0, r2
     df0:	048d0300 	streq	r0, [sp], #768	; 0x300
     df4:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
     df8:	2e060104 	adfcss	f0, f6, f4
     dfc:	02040200 	andeq	r0, r4, #0, 4
     e00:	0007029e 	muleq	r7, lr, r2
     e04:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e08:	000e2002 	andeq	r2, lr, r2
     e0c:	04990308 	ldreq	r0, [r9], #776	; 0x308
     e10:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
     e14:	ac060104 	stfges	f0, [r6], {4}
     e18:	02040200 	andeq	r0, r4, #0, 4
     e1c:	000b029e 	muleq	fp, lr, r2
     e20:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e24:	00000002 	andeq	r0, r0, r2
     e28:	04a40300 	strteq	r0, [r4], #768	; 0x300
     e2c:	02911301 	addseq	r1, r1, #67108864	; 0x4000000
     e30:	01010007 	tsteq	r1, r7
     e34:	00020500 	andeq	r0, r2, r0, lsl #10
     e38:	03000000 	movweq	r0, #0
     e3c:	130104af 	movwne	r0, #5295	; 0x14af
     e40:	00070291 	muleq	r7, r1, r2
     e44:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e48:	00000002 	andeq	r0, r0, r2
     e4c:	04bc0300 	ldrteq	r0, [ip], #768	; 0x300
     e50:	1b022101 	blne	8925c <__Stack_Size+0x88e5c>
     e54:	00010100 	andeq	r0, r1, r0, lsl #2
     e58:	00000205 	andeq	r0, r0, r5, lsl #4
     e5c:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
     e60:	02130104 	andseq	r0, r3, #4, 2
     e64:	01010010 	tsteq	r1, r0, lsl r0
     e68:	00020500 	andeq	r0, r2, r0, lsl #10
     e6c:	03000000 	movweq	r0, #0
     e70:	130104d4 	movwne	r0, #5332	; 0x14d4
     e74:	01001002 	tsteq	r0, r2
     e78:	02050001 	andeq	r0, r5, #1
     e7c:	00000000 	andeq	r0, r0, r0
     e80:	0104df03 	tsteq	r4, r3, lsl #30
     e84:	04029f13 	streq	r9, [r2], #-3859	; 0xf13
     e88:	00010100 	andeq	r0, r1, r0, lsl #2
     e8c:	00000205 	andeq	r0, r0, r5, lsl #4
     e90:	ea030000 	b	c0e98 <__Stack_Size+0xc0a98>
     e94:	83130104 	tsthi	r3, #4, 2
     e98:	01000602 	tsteq	r0, r2, lsl #12
     e9c:	02050001 	andeq	r0, r5, #1
     ea0:	00000000 	andeq	r0, r0, r0
     ea4:	0104f603 	tsteq	r4, r3, lsl #12
     ea8:	00211f13 	eoreq	r1, r1, r3, lsl pc
     eac:	06010402 	streq	r0, [r1], -r2, lsl #8
     eb0:	04020020 	streq	r0, [r2], #-32
     eb4:	00580802 	subseq	r0, r8, r2, lsl #16
     eb8:	f2010402 	vshl.s8	d0, d2, d1
     ebc:	02040200 	andeq	r0, r4, #0, 4
     ec0:	0402009e 	streq	r0, [r2], #-158	; 0x9e
     ec4:	02002e01 	andeq	r2, r0, #1, 28
     ec8:	12080204 	andne	r0, r8, #4, 4	; 0x40000000
     ecc:	01000e02 	tsteq	r0, r2, lsl #28
     ed0:	02050001 	andeq	r0, r5, #1
     ed4:	00000000 	andeq	r0, r0, r0
     ed8:	01058203 	tsteq	r5, r3, lsl #4
     edc:	04020013 	streq	r0, [r2], #-19
     ee0:	002e0601 	eoreq	r0, lr, r1, lsl #12
     ee4:	08020402 	stmdaeq	r2, {r1, sl}
     ee8:	0402004a 	streq	r0, [r2], #-74	; 0x4a
     eec:	0e029001 	cdpeq	0, 0, cr9, cr2, cr1, {0}
     ef0:	00010100 	andeq	r0, r1, r0, lsl #2
     ef4:	00000205 	andeq	r0, r0, r5, lsl #4
     ef8:	8e030000 	cdphi	0, 0, cr0, cr3, cr0, {0}
     efc:	00130105 	andseq	r0, r3, r5, lsl #2
     f00:	06010402 	streq	r0, [r1], -r2, lsl #8
     f04:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     f08:	004a0802 	subeq	r0, sl, r2, lsl #16
     f0c:	90010402 	andls	r0, r1, r2, lsl #8
     f10:	01000e02 	tsteq	r0, r2, lsl #28
     f14:	02050001 	andeq	r0, r5, #1
     f18:	00000000 	andeq	r0, r0, r0
     f1c:	01059a03 	tsteq	r5, r3, lsl #20
     f20:	07029113 	smladeq	r2, r3, r1, r9
     f24:	00010100 	andeq	r0, r1, r0, lsl #2
     f28:	00000205 	andeq	r0, r0, r5, lsl #4
     f2c:	a6030000 	strge	r0, [r3], -r0
     f30:	91130105 	tstls	r3, r5, lsl #2
     f34:	01000702 	tsteq	r0, r2, lsl #14
     f38:	02050001 	andeq	r0, r5, #1
     f3c:	00000000 	andeq	r0, r0, r0
     f40:	0105b203 	tsteq	r5, r3, lsl #4
     f44:	489fbc13 	ldmmi	pc, {r0, r1, r4, sl, fp, ip, sp, pc}	; <UNPREDICTABLE>
     f48:	00070225 	andeq	r0, r7, r5, lsr #4
     f4c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     f50:	00000002 	andeq	r0, r0, r2
     f54:	05c30300 	strbeq	r0, [r3, #768]	; 0x300
     f58:	bc301301 	ldclt	3, cr1, [r0], #-4
     f5c:	000d0230 	andeq	r0, sp, r0, lsr r2
     f60:	05000101 	streq	r0, [r0, #-257]	; 0x101
     f64:	00000002 	andeq	r0, r0, r2
     f68:	05d60300 	ldrbeq	r0, [r6, #768]	; 0x300
     f6c:	03021601 	movweq	r1, #9729	; 0x2601
     f70:	00010100 	andeq	r0, r1, r0, lsl #2
     f74:	00000205 	andeq	r0, r0, r5, lsl #4
     f78:	e3030000 	movw	r0, #12288	; 0x3000
     f7c:	30160105 	andscc	r0, r6, r5, lsl #2
     f80:	01000302 	tsteq	r0, r2, lsl #6
     f84:	0000b401 	andeq	fp, r0, r1, lsl #8
     f88:	60000200 	andvs	r0, r0, r0, lsl #4
     f8c:	02000000 	andeq	r0, r0, #0
     f90:	0d0efb01 	vstreq	d15, [lr, #-4]
     f94:	01010100 	mrseq	r0, (UNDEF: 17)
     f98:	00000001 	andeq	r0, r0, r1
     f9c:	01000001 	tsteq	r0, r1
     fa0:	5f627375 	svcpl	0x00627375
     fa4:	0062696c 	rsbeq	r6, r2, ip, ror #18
     fa8:	62737500 	rsbsvs	r7, r3, #0, 10
     fac:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     fb0:	0100632e 	tsteq	r0, lr, lsr #6
     fb4:	73750000 	cmnvc	r5, #0
     fb8:	79745f62 	ldmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
     fbc:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     fc0:	00000100 	andeq	r0, r0, r0, lsl #2
     fc4:	5f627375 	svcpl	0x00627375
     fc8:	73676572 	cmnvc	r7, #478150656	; 0x1c800000
     fcc:	0100682e 	tsteq	r0, lr, lsr #16
     fd0:	73750000 	cmnvc	r5, #0
     fd4:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
     fd8:	682e7469 	stmdavs	lr!, {r0, r3, r5, r6, sl, ip, sp, lr}
     fdc:	00000100 	andeq	r0, r0, r0, lsl #2
     fe0:	5f627375 	svcpl	0x00627375
     fe4:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     fe8:	0100682e 	tsteq	r0, lr, lsr #16
     fec:	00000000 	andeq	r0, r0, r0
     ff0:	0e600205 	cdpeq	2, 6, cr0, cr0, cr5, {0}
     ff4:	29030800 	stmdbcs	r3, {fp}
     ff8:	3e842301 	cdpcc	3, 8, cr2, cr4, cr1, {0}
     ffc:	1f3d3659 	svcne	0x003d3659
    1000:	95914b3d 	ldrls	r4, [r1, #2877]	; 0xb3d
    1004:	213c1703 	teqcs	ip, r3, lsl #14
    1008:	30425930 	subcc	r5, r2, r0, lsr r9
    100c:	59304359 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, r9, lr}
    1010:	f3130830 	vceq.i16	d0, d3, d16
    1014:	67200903 	strvs	r0, [r0, -r3, lsl #18]!
    1018:	3f5c5b31 	svccc	0x005c5b31
    101c:	02311d93 	eorseq	r1, r1, #9408	; 0x24c0
    1020:	01010016 	tsteq	r1, r6, lsl r0
    1024:	00020500 	andeq	r0, r2, r0, lsl #10
    1028:	03000000 	movweq	r0, #0
    102c:	2301019e 	movwcs	r0, #4510	; 0x119e
    1030:	675a3e76 			; <UNDEFINED> instruction: 0x675a3e76
    1034:	313f5b31 	teqcc	pc, r1, lsr fp	; <UNPREDICTABLE>
    1038:	0100085b 	tsteq	r0, fp, asr r8
    103c:	00006301 	andeq	r6, r0, r1, lsl #6
    1040:	45000200 	strmi	r0, [r0, #-512]	; 0x200
    1044:	02000000 	andeq	r0, r0, #0
    1048:	0d0efb01 	vstreq	d15, [lr, #-4]
    104c:	01010100 	mrseq	r0, (UNDEF: 17)
    1050:	00000001 	andeq	r0, r0, r1
    1054:	01000001 	tsteq	r0, r1
    1058:	5f627375 	svcpl	0x00627375
    105c:	0062696c 	rsbeq	r6, r2, ip, ror #18
    1060:	62737500 	rsbsvs	r7, r3, #0, 10
    1064:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1068:	00632e74 	rsbeq	r2, r3, r4, ror lr
    106c:	75000001 	strvc	r0, [r0, #-1]
    1070:	745f6273 	ldrbvc	r6, [pc], #-627	; 1078 <__Stack_Size+0xc78>
    1074:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    1078:	00010068 	andeq	r0, r1, r8, rrx
    107c:	62737500 	rsbsvs	r7, r3, #0, 10
    1080:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    1084:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1088:	00000001 	andeq	r0, r0, r1
    108c:	b4020500 	strlt	r0, [r2], #-1280	; 0x500
    1090:	0308000f 	movweq	r0, #32783	; 0x800f
    1094:	31210135 	teqcc	r1, r5, lsr r1
    1098:	3d2f211d 	stfccs	f2, [pc, #-116]!	; 102c <__Stack_Size+0xc2c>
    109c:	02231d23 	eoreq	r1, r3, #2240	; 0x8c0
    10a0:	0101000f 	tsteq	r1, pc
    10a4:	00000350 	andeq	r0, r0, r0, asr r3
    10a8:	007b0002 	rsbseq	r0, fp, r2
    10ac:	01020000 	mrseq	r0, (UNDEF: 2)
    10b0:	000d0efb 	strdeq	r0, [sp], -fp
    10b4:	01010101 	tsteq	r1, r1, lsl #2
    10b8:	01000000 	mrseq	r0, (UNDEF: 0)
    10bc:	75010000 	strvc	r0, [r1, #-0]
    10c0:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    10c4:	00006269 	andeq	r6, r0, r9, ror #4
    10c8:	5f627375 	svcpl	0x00627375
    10cc:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    10d0:	0100632e 	tsteq	r0, lr, lsr #6
    10d4:	73750000 	cmnvc	r5, #0
    10d8:	79745f62 	ldmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    10dc:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    10e0:	00000100 	andeq	r0, r0, r0, lsl #2
    10e4:	5f627375 	svcpl	0x00627375
    10e8:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    10ec:	00010068 	andeq	r0, r1, r8, rrx
    10f0:	62737500 	rsbsvs	r7, r3, #0, 10
    10f4:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    10f8:	00682e65 	rsbeq	r2, r8, r5, ror #28
    10fc:	75000001 	strvc	r0, [r0, #-1]
    1100:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    1104:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
    1108:	00010068 	andeq	r0, r1, r8, rrx
    110c:	62737500 	rsbsvs	r7, r3, #0, 10
    1110:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
    1114:	0100682e 	tsteq	r0, lr, lsr #16
    1118:	73750000 	cmnvc	r5, #0
    111c:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xf62
    1120:	682e7367 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}
    1124:	00000100 	andeq	r0, r0, r0, lsl #2
    1128:	02050000 	andeq	r0, r5, #0
    112c:	08000fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp}
    1130:	2f013503 	svccs	0x00013503
    1134:	4b223e22 	blmi	8909c4 <__Stack_Size+0x8905c4>
    1138:	0005022f 	andeq	r0, r5, pc, lsr #4
    113c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1140:	00101002 	andseq	r1, r0, r2
    1144:	00e30308 	rsceq	r0, r3, r8, lsl #6
    1148:	3e222f01 	cdpcc	15, 2, cr2, cr2, cr1, {0}
    114c:	022f4b22 	eoreq	r4, pc, #34816	; 0x8800
    1150:	01010005 	tsteq	r1, r5
    1154:	34020500 	strcc	r0, [r2], #-1280	; 0x500
    1158:	03080010 	movweq	r0, #32784	; 0x8010
    115c:	2f01019b 	svccs	0x0001019b
    1160:	23233d22 	teqcs	r3, #2176	; 0x880
    1164:	235b311d 	cmpcs	fp, #1073741831	; 0x40000007
    1168:	4e304022 	cdpmi	0, 3, cr4, cr0, cr2, {1}
    116c:	22313340 	eorscs	r3, r1, #64, 6
    1170:	1d314740 	ldcne	7, cr4, [r1, #-256]!	; 0xffffff00
    1174:	03424c23 	movteq	r4, #11299	; 0x2c23
    1178:	034b580b 	movteq	r5, #47115	; 0xb80b
    117c:	21032e60 	tstcs	r3, r0, ror #28
    1180:	00070220 	andeq	r0, r7, r0, lsr #4
    1184:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1188:	0010c402 	andseq	ip, r0, r2, lsl #8
    118c:	03e00308 	mvneq	r0, #8, 6	; 0x20000000
    1190:	2f1f1301 	svccs	0x001f1301
    1194:	0033212f 	eorseq	r2, r3, pc, lsr #2
    1198:	06010402 	streq	r0, [r1], -r2, lsl #8
    119c:	4d300620 	ldcmi	6, cr0, [r0, #-128]!	; 0xffffff80
    11a0:	352d3492 	strcc	r3, [sp, #-1170]!	; 0x492
    11a4:	84765121 	ldrbthi	r5, [r6], #-289	; 0x121
    11a8:	2f2a244c 	svccs	0x002a244c
    11ac:	231d302f 	tstcs	sp, #47	; 0x2f
    11b0:	00120223 	andseq	r0, r2, r3, lsr #4
    11b4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    11b8:	00116c02 	andseq	r6, r1, r2, lsl #24
    11bc:	00ca0308 	sbceq	r0, sl, r8, lsl #6
    11c0:	1f212201 	svcne	0x00212201
    11c4:	21302f59 	teqcs	r0, r9, asr pc
    11c8:	0222324b 	eoreq	r3, r2, #-1342177276	; 0xb0000004
    11cc:	01010008 	tsteq	r1, r8
    11d0:	a4020500 	strge	r0, [r2], #-1280	; 0x500
    11d4:	03080011 	movweq	r0, #32785	; 0x8011
    11d8:	240100f8 	strcs	r0, [r1], #-248	; 0xf8
    11dc:	02003e84 	andeq	r3, r0, #132, 28	; 0x840
    11e0:	20060104 	andcs	r0, r6, r4, lsl #2
    11e4:	4b342f06 	blmi	d0ce04 <__Stack_Size+0xd0ca04>
    11e8:	2f2f1e22 	svccs	0x002f1e22
    11ec:	07022125 	streq	r2, [r2, -r5, lsr #2]
    11f0:	00010100 	andeq	r0, r1, r0, lsl #2
    11f4:	11ec0205 	mvnne	r0, r5, lsl #4
    11f8:	e9030800 	stmdb	r3, {fp}
    11fc:	40210101 	eormi	r0, r1, r1, lsl #2
    1200:	35224b3e 	strcc	r4, [r2, #-2878]!	; 0xb3e
    1204:	0f03423d 	svceq	0x0003423d
    1208:	20720320 	rsbscs	r0, r2, r0, lsr #6
    120c:	75035f43 	strvc	r5, [r3, #-3907]	; 0xf43
    1210:	31403220 	cmpcc	r0, r0, lsr #4
    1214:	01040200 	mrseq	r0, R12_usr
    1218:	2f062e06 	svccs	0x00062e06
    121c:	472e0903 	strmi	r0, [lr, -r3, lsl #18]!
    1220:	4c231d23 	stcmi	13, cr1, [r3], #-140	; 0xffffff74
    1224:	235a5e4b 	cmpcs	sl, #1200	; 0x4b0
    1228:	4b942f6b 	blmi	fe50cfdc <BootRAM+0xd47d77d>
    122c:	0a022131 	beq	896f8 <__Stack_Size+0x892f8>
    1230:	00010100 	andeq	r0, r1, r0, lsl #2
    1234:	12bc0205 	adcsne	r0, ip, #1342177280	; 0x50000000
    1238:	c2030800 	andgt	r0, r3, #0, 16
    123c:	03260102 	teqeq	r6, #-2147483648	; 0x80000000
    1240:	7103200f 	tstvc	r3, pc
    1244:	200f0320 	andcs	r0, pc, r0, lsr #6
    1248:	21207103 	teqcs	r0, r3, lsl #2
    124c:	40325443 	eorsmi	r5, r2, r3, asr #8
    1250:	02002f31 	andeq	r2, r0, #49, 30	; 0xc4
    1254:	2e060104 	adfcss	f0, f6, f4
    1258:	09032106 	stmdbeq	r3, {r1, r2, r8, sp}
    125c:	1d31472e 	ldcne	7, cr4, [r1, #-184]!	; 0xffffff48
    1260:	4b858823 	blmi	fe1632f4 <BootRAM+0xd0d3a95>
    1264:	032e6f03 	teqeq	lr, #3, 30
    1268:	07022012 	smladeq	r2, r2, r0, r2
    126c:	00010100 	andeq	r0, r1, r0, lsl #2
    1270:	13400205 	movtne	r0, #517	; 0x205
    1274:	f8030800 			; <UNDEFINED> instruction: 0xf8030800
    1278:	67210102 	strvs	r0, [r1, -r2, lsl #2]!
    127c:	0007024c 	andeq	r0, r7, ip, asr #4
    1280:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1284:	00136402 	andseq	r6, r3, r2, lsl #8
    1288:	03920308 	orrseq	r0, r2, #8, 6	; 0x20000000
    128c:	223d1501 	eorscs	r1, sp, #4194304	; 0x400000
    1290:	022f233d 	eoreq	r2, pc, #-201326592	; 0xf4000000
    1294:	01010004 	tsteq	r1, r4
    1298:	80020500 	andhi	r0, r2, r0, lsl #10
    129c:	03080013 	movweq	r0, #32787	; 0x8013
    12a0:	210107c9 	smlabtcs	r1, r9, r7, r0
    12a4:	404b5a68 	submi	r5, fp, r8, ror #20
    12a8:	01000d02 	tsteq	r0, r2, lsl #26
    12ac:	02050001 	andeq	r0, r5, #1
    12b0:	080013c0 	stmdaeq	r0, {r6, r7, r8, r9, ip}
    12b4:	0106cc03 	tsteq	r6, r3, lsl #24
    12b8:	3e2c3e28 	cdpcc	14, 2, cr3, cr12, cr8, {1}
    12bc:	302f5c56 	eorcc	r5, pc, r6, asr ip	; <UNPREDICTABLE>
    12c0:	2f313030 	svccs	0x00313030
    12c4:	4a7dbd03 	bmi	1f706d8 <__Stack_Size+0x1f702d8>
    12c8:	3040304e 	subcc	r3, r0, lr, asr #32
    12cc:	3d3d294f 	ldccc	9, cr2, [sp, #-316]!	; 0xfffffec4
    12d0:	304a0c03 	subcc	r0, sl, r3, lsl #24
    12d4:	593c3c03 	ldmdbpl	ip!, {r0, r1, sl, fp, ip, sp}
    12d8:	3d3c4403 	cfldrscc	mvf4, [ip, #-12]!
    12dc:	3d30443e 	cfldrscc	mvf4, [r0, #-248]!	; 0xffffff08
    12e0:	0b033e3d 	bleq	d0bdc <__Stack_Size+0xd07dc>
    12e4:	4130313c 	teqmi	r0, ip, lsr r1
    12e8:	03303331 	teqeq	r0, #-1006632960	; 0xc4000000
    12ec:	0a032e09 	beq	ccb18 <__Stack_Size+0xcc718>
    12f0:	039c362e 	orrseq	r3, ip, #48234496	; 0x2e00000
    12f4:	10032e75 	andne	r2, r3, r5, ror lr
    12f8:	3c190320 	ldccc	3, cr0, [r9], {32}
    12fc:	302f3e30 	eorcc	r3, pc, r0, lsr lr	; <UNPREDICTABLE>
    1300:	303e303e 	eorscc	r3, lr, lr, lsr r0
    1304:	5a42303d 	bpl	108d400 <__Stack_Size+0x108d000>
    1308:	305e4b69 	subscc	r4, lr, r9, ror #22
    130c:	03306d75 	teqeq	r0, #7488	; 0x1d40
    1310:	7203200e 	andvc	r2, r3, #14
    1314:	035f4320 	cmpeq	pc, #32, 6	; 0x80000000
    1318:	40322075 	eorsmi	r2, r2, r5, ror r0
    131c:	09035931 	stmdbeq	r3, {r0, r4, r5, r8, fp, ip, lr}
    1320:	3050303c 	subscc	r3, r0, ip, lsr r0
    1324:	89674b59 	stmdbhi	r7!, {r0, r3, r4, r6, r8, r9, fp, lr}^
    1328:	2f233d22 	svccs	0x00233d22
    132c:	41306732 	teqmi	r0, r2, lsr r7
    1330:	413f3169 	teqmi	pc, r9, ror #2
    1334:	084c314d 	stmdaeq	ip, {r0, r2, r3, r6, r8, ip, sp}^
    1338:	305a3023 	subscc	r3, sl, r3, lsr #32
    133c:	404b405a 	submi	r4, fp, sl, asr r0
    1340:	4a2f032f 	bmi	bc2004 <__Stack_Size+0xbc1c04>
    1344:	7ed6032f 	cdpvc	3, 13, cr0, cr6, cr15, {1}
    1348:	2e2c032e 	cdpcs	3, 2, cr0, cr12, cr14, {1}
    134c:	022e0b03 	eoreq	r0, lr, #3072	; 0xc00
    1350:	0101000c 	tsteq	r1, ip
    1354:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    1358:	03080016 	movweq	r0, #32790	; 0x8016
    135c:	210107a0 	smlatbcs	r1, r0, r7, r0
    1360:	0402003e 	streq	r0, [r2], #-62	; 0x3e
    1364:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    1368:	2e7c8a03 	vaddcs.f32	s17, s24, s6
    136c:	2633221e 			; <UNDEFINED> instruction: 0x2633221e
    1370:	2f211f59 	svccs	0x00211f59
    1374:	77301e22 	ldrvc	r1, [r0, -r2, lsr #28]!
    1378:	2f1f2130 	svccs	0x001f2130
    137c:	3f2f211f 	svccc	0x002f211f
    1380:	4e22404c 	cdpmi	0, 2, cr4, cr2, cr12, {2}
    1384:	03d3033d 	bicseq	r0, r3, #-201326592	; 0xf4000000
    1388:	51303f9e 			; <UNDEFINED> instruction: 0x51303f9e
    138c:	31200903 	teqcc	r0, r3, lsl #18
    1390:	000f022d 	andeq	r0, pc, sp, lsr #4
    1394:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1398:	00176402 	andseq	r6, r7, r2, lsl #8
    139c:	07dd0308 	ldrbeq	r0, [sp, r8, lsl #6]
    13a0:	00312201 	eorseq	r2, r1, r1, lsl #4
    13a4:	06010402 	streq	r0, [r1], -r2, lsl #8
    13a8:	04020020 	streq	r0, [r2], #-32
    13ac:	00760602 	rsbseq	r0, r6, r2, lsl #12
    13b0:	64020402 	strvs	r0, [r2], #-1026	; 0x402
    13b4:	00090232 	andeq	r0, r9, r2, lsr r2
    13b8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    13bc:	00179c02 	andseq	r9, r7, r2, lsl #24
    13c0:	06f80308 	ldrbteq	r0, [r8], r8, lsl #6
    13c4:	003e2101 	eorseq	r2, lr, r1, lsl #2
    13c8:	06010402 	streq	r0, [r1], -r2, lsl #8
    13cc:	3030062e 	eorscc	r0, r0, lr, lsr #12
    13d0:	0200303f 	andeq	r3, r0, #63	; 0x3f
    13d4:	003d0104 	eorseq	r0, sp, r4, lsl #2
    13d8:	1f010402 	svcne	0x00010402
    13dc:	504c3d31 	subpl	r3, ip, r1, lsr sp
    13e0:	022d3123 	eoreq	r3, sp, #-1073741816	; 0xc0000008
    13e4:	01010009 	tsteq	r1, r9
    13e8:	00020500 	andeq	r0, r2, r0, lsl #10
    13ec:	03000000 	movweq	r0, #0
    13f0:	020107f1 	andeq	r0, r1, #63176704	; 0x3c40000
    13f4:	01010001 	tsteq	r1, r1
    13f8:	0000008f 	andeq	r0, r0, pc, lsl #1
    13fc:	00360002 	eorseq	r0, r6, r2
    1400:	01020000 	mrseq	r0, (UNDEF: 2)
    1404:	000d0efb 	strdeq	r0, [sp], -fp
    1408:	01010101 	tsteq	r1, r1, lsl #2
    140c:	01000000 	mrseq	r0, (UNDEF: 0)
    1410:	75010000 	strvc	r0, [r1, #-0]
    1414:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    1418:	00006269 	andeq	r6, r0, r9, ror #4
    141c:	5f627375 	svcpl	0x00627375
    1420:	2e6d656d 	cdpcs	5, 6, cr6, cr13, cr13, {3}
    1424:	00010063 	andeq	r0, r1, r3, rrx
    1428:	62737500 	rsbsvs	r7, r3, #0, 10
    142c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1430:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1434:	00000001 	andeq	r0, r0, r1
    1438:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    143c:	03080017 	movweq	r0, #32791	; 0x8017
    1440:	2b240123 	blcs	9018d4 <__Stack_Size+0x9014d4>
    1444:	21232b23 	teqcs	r3, r3, lsr #22
    1448:	01040200 	mrseq	r0, R12_usr
    144c:	02002006 	andeq	r2, r0, #6
    1450:	4e060204 	cdpmi	2, 0, cr0, cr6, cr4, {0}
    1454:	02040200 	andeq	r0, r4, #0, 4
    1458:	0402002c 	streq	r0, [r2], #-44	; 0x2c
    145c:	02003002 	andeq	r3, r0, #2
    1460:	4e2f0204 	cdpmi	2, 2, cr0, cr15, cr4, {0}
    1464:	01000102 	tsteq	r0, r2, lsl #2
    1468:	02050001 	andeq	r0, r5, #1
    146c:	08001828 	stmdaeq	r0, {r3, r5, fp, ip}
    1470:	24013c03 	strcs	r3, [r1], #-3075	; 0xc03
    1474:	232b232b 	teqcs	fp, #-1409286144	; 0xac000000
    1478:	04020021 	streq	r0, [r2], #-33	; 0x21
    147c:	00200601 	eoreq	r0, r0, r1, lsl #12
    1480:	06020402 	streq	r0, [r2], -r2, lsl #8
    1484:	01026930 	tsteq	r2, r0, lsr r9
    1488:	Address 0x0000000000001488 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	0800013c 	stmdaeq	r0, {r2, r3, r4, r5, r8}
  1c:	00000002 	andeq	r0, r0, r2
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	0000000c 	andeq	r0, r0, ip
  24:	00000000 	andeq	r0, r0, r0
  28:	0800013e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8}
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	00000002 	andeq	r0, r0, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	0000000c 	andeq	r0, r0, ip
  34:	00000000 	andeq	r0, r0, r0
  38:	08000140 	stmdaeq	r0, {r6, r8}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	00000002 	andeq	r0, r0, r2

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	0000000c 	andeq	r0, r0, ip
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	00000000 	andeq	r0, r0, r0
  48:	08000142 	stmdaeq	r0, {r1, r6, r8}
  4c:	0000000a 	andeq	r0, r0, sl

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	0000000c 	andeq	r0, r0, ip
  54:	00000000 	andeq	r0, r0, r0
  58:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
  5c:	00000002 	andeq	r0, r0, r2
  60:	0000000c 	andeq	r0, r0, ip
  64:	00000000 	andeq	r0, r0, r0
  68:	08000150 	stmdaeq	r0, {r4, r6, r8}
  6c:	00000018 	andeq	r0, r0, r8, lsl r0
  70:	0000000c 	andeq	r0, r0, ip
  74:	00000000 	andeq	r0, r0, r0
  78:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}
  7c:	00000002 	andeq	r0, r0, r2
  80:	0000000c 	andeq	r0, r0, ip
  84:	00000000 	andeq	r0, r0, r0
  88:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
  8c:	00000002 	andeq	r0, r0, r2
  90:	0000000c 	andeq	r0, r0, ip
  94:	00000000 	andeq	r0, r0, r0
  98:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  9c:	00000002 	andeq	r0, r0, r2
  a0:	0000000c 	andeq	r0, r0, ip
  a4:	00000000 	andeq	r0, r0, r0
  a8:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
  ac:	00000002 	andeq	r0, r0, r2
  b0:	0000000c 	andeq	r0, r0, ip
  b4:	00000000 	andeq	r0, r0, r0
  b8:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
  bc:	00000002 	andeq	r0, r0, r2
  c0:	0000000c 	andeq	r0, r0, ip
  c4:	00000000 	andeq	r0, r0, r0
  c8:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
  cc:	00000002 	andeq	r0, r0, r2
  d0:	0000000c 	andeq	r0, r0, ip
  d4:	00000000 	andeq	r0, r0, r0
  d8:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	00000018 	andeq	r0, r0, r8, lsl r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	08000180 	stmdaeq	r0, {r7, r8}
  ec:	000000a8 	andeq	r0, r0, r8, lsr #1
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
  f8:	00000001 	andeq	r0, r0, r1
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	00000000 	andeq	r0, r0, r0
 104:	08000228 	stmdaeq	r0, {r3, r5, r9}
 108:	00000060 	andeq	r0, r0, r0, rrx
 10c:	40100e41 	andsmi	r0, r0, r1, asr #28
 110:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 114:	02854003 	addeq	r4, r5, #3
 118:	00018e40 	andeq	r8, r1, r0, asr #28
 11c:	0000000c 	andeq	r0, r0, ip
 120:	00000000 	andeq	r0, r0, r0
 124:	08000288 	stmdaeq	r0, {r3, r7, r9}
 128:	0000000c 	andeq	r0, r0, ip
 12c:	0000000c 	andeq	r0, r0, ip
 130:	00000000 	andeq	r0, r0, r0
 134:	08000294 	stmdaeq	r0, {r2, r4, r7, r9}
 138:	0000000c 	andeq	r0, r0, ip
 13c:	0000000c 	andeq	r0, r0, ip
 140:	00000000 	andeq	r0, r0, r0
 144:	080002a0 	stmdaeq	r0, {r5, r7, r9}
 148:	00000020 	andeq	r0, r0, r0, lsr #32
 14c:	0000000c 	andeq	r0, r0, ip
 150:	00000000 	andeq	r0, r0, r0
 154:	080002c0 	stmdaeq	r0, {r6, r7, r9}
 158:	0000000c 	andeq	r0, r0, ip
 15c:	00000018 	andeq	r0, r0, r8, lsl r0
 160:	00000000 	andeq	r0, r0, r0
 164:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
 168:	00000028 	andeq	r0, r0, r8, lsr #32
 16c:	40080e41 	andmi	r0, r8, r1, asr #28
 170:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 174:	00000001 	andeq	r0, r0, r1
 178:	00000024 	andeq	r0, r0, r4, lsr #32
 17c:	00000000 	andeq	r0, r0, r0
 180:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
 184:	0000007c 	andeq	r0, r0, ip, ror r0
 188:	40180e41 	andsmi	r0, r8, r1, asr #28
 18c:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 190:	04824005 	streq	r4, [r2], #5
 194:	40038440 	andmi	r8, r3, r0, asr #8
 198:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
 19c:	00000001 	andeq	r0, r0, r1
 1a0:	0000000c 	andeq	r0, r0, ip
	...
 1ac:	00000004 	andeq	r0, r0, r4
 1b0:	0000000c 	andeq	r0, r0, ip
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	0000000c 	andeq	r0, r0, ip
 1c4:	00000000 	andeq	r0, r0, r0
 1c8:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
 1cc:	00000018 	andeq	r0, r0, r8, lsl r0
 1d0:	00000018 	andeq	r0, r0, r8, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
 1dc:	00000084 	andeq	r0, r0, r4, lsl #1
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 1e8:	00000001 	andeq	r0, r0, r1
 1ec:	0000000c 	andeq	r0, r0, ip
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	08000428 	stmdaeq	r0, {r3, r5, sl}
 1f8:	00000028 	andeq	r0, r0, r8, lsr #32
 1fc:	0000000c 	andeq	r0, r0, ip
 200:	00000000 	andeq	r0, r0, r0
 204:	08000450 	stmdaeq	r0, {r4, r6, sl}
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	0000000c 	andeq	r0, r0, ip
 210:	00000000 	andeq	r0, r0, r0
 214:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
 218:	00000004 	andeq	r0, r0, r4
 21c:	0000001c 	andeq	r0, r0, ip, lsl r0
 220:	00000000 	andeq	r0, r0, r0
 224:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
 228:	00000024 	andeq	r0, r0, r4, lsr #32
 22c:	40100e41 	andsmi	r0, r0, r1, asr #28
 230:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
 234:	02824003 	addeq	r4, r2, #3
 238:	00018e40 	andeq	r8, r1, r0, asr #28
 23c:	00000018 	andeq	r0, r0, r8, lsl r0
 240:	00000000 	andeq	r0, r0, r0
 244:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
 248:	00000040 	andeq	r0, r0, r0, asr #32
 24c:	40080e41 	andmi	r0, r8, r1, asr #28
 250:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 254:	00000001 	andeq	r0, r0, r1
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000000 	andeq	r0, r0, r0
 260:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
 264:	00000022 	andeq	r0, r0, r2, lsr #32
 268:	40100e41 	andsmi	r0, r0, r1, asr #28
 26c:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
 270:	02824003 	addeq	r4, r2, #3
 274:	00018e40 	andeq	r8, r1, r0, asr #28
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	080004f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl}
 284:	000000b4 	strheq	r0, [r0], -r4
 288:	40100e41 	andsmi	r0, r0, r1, asr #28
 28c:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
 290:	02864003 	addeq	r4, r6, #3
 294:	00018e40 	andeq	r8, r1, r0, asr #28
 298:	0000000c 	andeq	r0, r0, ip
 29c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a8:	00000018 	andeq	r0, r0, r8, lsl r0
 2ac:	00000298 	muleq	r0, r8, r2
 2b0:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
 2b4:	00000078 	andeq	r0, r0, r8, ror r0
 2b8:	40080e41 	andmi	r0, r8, r1, asr #28
 2bc:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 2c0:	00000001 	andeq	r0, r0, r1
 2c4:	0000000c 	andeq	r0, r0, ip
 2c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2cc:	7c020001 	stcvc	0, cr0, [r2], {1}
 2d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2d4:	0000000c 	andeq	r0, r0, ip
 2d8:	000002c4 	andeq	r0, r0, r4, asr #5
 2dc:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 2e0:	00000016 	andeq	r0, r0, r6, lsl r0
 2e4:	0000000c 	andeq	r0, r0, ip
 2e8:	000002c4 	andeq	r0, r0, r4, asr #5
 2ec:	00000000 	andeq	r0, r0, r0
 2f0:	00000012 	andeq	r0, r0, r2, lsl r0
 2f4:	0000000c 	andeq	r0, r0, ip
 2f8:	000002c4 	andeq	r0, r0, r4, asr #5
 2fc:	0800063c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl}
 300:	00000010 	andeq	r0, r0, r0, lsl r0
 304:	00000028 	andeq	r0, r0, r8, lsr #32
 308:	000002c4 	andeq	r0, r0, r4, asr #5
 30c:	00000000 	andeq	r0, r0, r0
 310:	00000050 	andeq	r0, r0, r0, asr r0
 314:	40200e42 	eormi	r0, r0, r2, asr #28
 318:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
 31c:	06864007 	streq	r4, [r6], r7
 320:	40058740 	andmi	r8, r5, r0, asr #14
 324:	89400488 	stmdbhi	r0, {r3, r7, sl}^
 328:	028a4003 	addeq	r4, sl, #3
 32c:	00018e40 	andeq	r8, r1, r0, asr #28
 330:	0000000c 	andeq	r0, r0, ip
 334:	000002c4 	andeq	r0, r0, r4, asr #5
 338:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
 33c:	00000048 	andeq	r0, r0, r8, asr #32
 340:	0000000c 	andeq	r0, r0, ip
 344:	000002c4 	andeq	r0, r0, r4, asr #5
 348:	08000694 	stmdaeq	r0, {r2, r4, r7, r9, sl}
 34c:	00000060 	andeq	r0, r0, r0, rrx
 350:	0000000c 	andeq	r0, r0, ip
 354:	000002c4 	andeq	r0, r0, r4, asr #5
 358:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
 35c:	00000018 	andeq	r0, r0, r8, lsl r0
 360:	0000000c 	andeq	r0, r0, ip
 364:	000002c4 	andeq	r0, r0, r4, asr #5
 368:	0800070c 	stmdaeq	r0, {r2, r3, r8, r9, sl}
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	0000000c 	andeq	r0, r0, ip
 374:	000002c4 	andeq	r0, r0, r4, asr #5
 378:	08000728 	stmdaeq	r0, {r3, r5, r8, r9, sl}
 37c:	00000014 	andeq	r0, r0, r4, lsl r0
 380:	00000018 	andeq	r0, r0, r8, lsl r0
 384:	000002c4 	andeq	r0, r0, r4, asr #5
 388:	0800073c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl}
 38c:	00000018 	andeq	r0, r0, r8, lsl r0
 390:	40080e42 	andmi	r0, r8, r2, asr #28
 394:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 398:	00000001 	andeq	r0, r0, r1
 39c:	0000000c 	andeq	r0, r0, ip
 3a0:	000002c4 	andeq	r0, r0, r4, asr #5
 3a4:	08000754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl}
 3a8:	0000002c 	andeq	r0, r0, ip, lsr #32
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	000002c4 	andeq	r0, r0, r4, asr #5
 3b4:	08000780 	stmdaeq	r0, {r7, r8, r9, sl}
 3b8:	00000048 	andeq	r0, r0, r8, asr #32
 3bc:	40100e41 	andsmi	r0, r0, r1, asr #28
 3c0:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 3c4:	02854003 	addeq	r4, r5, #3
 3c8:	00018e40 	andeq	r8, r1, r0, asr #28
 3cc:	00000018 	andeq	r0, r0, r8, lsl r0
 3d0:	000002c4 	andeq	r0, r0, r4, asr #5
 3d4:	080007c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl}
 3d8:	0000006c 	andeq	r0, r0, ip, rrx
 3dc:	400c0e42 	andmi	r0, ip, r2, asr #28
 3e0:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
 3e4:	018e4002 	orreq	r4, lr, r2
 3e8:	0000000c 	andeq	r0, r0, ip
 3ec:	000002c4 	andeq	r0, r0, r4, asr #5
 3f0:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
 3f4:	00000024 	andeq	r0, r0, r4, lsr #32
 3f8:	00000018 	andeq	r0, r0, r8, lsl r0
 3fc:	000002c4 	andeq	r0, r0, r4, asr #5
 400:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
 404:	00000028 	andeq	r0, r0, r8, lsr #32
 408:	40080e41 	andmi	r0, r8, r1, asr #28
 40c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 410:	00000001 	andeq	r0, r0, r1
 414:	0000000c 	andeq	r0, r0, ip
 418:	000002c4 	andeq	r0, r0, r4, asr #5
 41c:	08000880 	stmdaeq	r0, {r7, fp}
 420:	00000014 	andeq	r0, r0, r4, lsl r0
 424:	00000018 	andeq	r0, r0, r8, lsl r0
 428:	000002c4 	andeq	r0, r0, r4, asr #5
 42c:	08000894 	stmdaeq	r0, {r2, r4, r7, fp}
 430:	00000034 	andeq	r0, r0, r4, lsr r0
 434:	40080e42 	andmi	r0, r8, r2, asr #28
 438:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 43c:	00000001 	andeq	r0, r0, r1
 440:	0000001c 	andeq	r0, r0, ip, lsl r0
 444:	000002c4 	andeq	r0, r0, r4, asr #5
 448:	00000000 	andeq	r0, r0, r0
 44c:	00000030 	andeq	r0, r0, r0, lsr r0
 450:	40100e42 	andsmi	r0, r0, r2, asr #28
 454:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 458:	02854003 	addeq	r4, r5, #3
 45c:	00018e40 	andeq	r8, r1, r0, asr #28
 460:	00000024 	andeq	r0, r0, r4, lsr #32
 464:	000002c4 	andeq	r0, r0, r4, asr #5
 468:	080008c8 	stmdaeq	r0, {r3, r6, r7, fp}
 46c:	0000004c 	andeq	r0, r0, ip, asr #32
 470:	40180e41 	andsmi	r0, r8, r1, asr #28
 474:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 478:	04824005 	streq	r4, [r2], #5
 47c:	40038440 	andmi	r8, r3, r0, asr #8
 480:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
 484:	00000001 	andeq	r0, r0, r1
 488:	0000000c 	andeq	r0, r0, ip
 48c:	000002c4 	andeq	r0, r0, r4, asr #5
 490:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
 494:	0000000c 	andeq	r0, r0, ip
 498:	0000000c 	andeq	r0, r0, ip
 49c:	000002c4 	andeq	r0, r0, r4, asr #5
 4a0:	08000920 	stmdaeq	r0, {r5, r8, fp}
 4a4:	00000018 	andeq	r0, r0, r8, lsl r0
 4a8:	0000000c 	andeq	r0, r0, ip
 4ac:	000002c4 	andeq	r0, r0, r4, asr #5
 4b0:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
 4b4:	00000012 	andeq	r0, r0, r2, lsl r0
 4b8:	0000000c 	andeq	r0, r0, ip
 4bc:	000002c4 	andeq	r0, r0, r4, asr #5
 4c0:	0800094c 	stmdaeq	r0, {r2, r3, r6, r8, fp}
 4c4:	00000010 	andeq	r0, r0, r0, lsl r0
 4c8:	0000000c 	andeq	r0, r0, ip
 4cc:	000002c4 	andeq	r0, r0, r4, asr #5
 4d0:	0800095c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp}
 4d4:	00000018 	andeq	r0, r0, r8, lsl r0
 4d8:	0000000c 	andeq	r0, r0, ip
 4dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4e0:	7c020001 	stcvc	0, cr0, [r2], {1}
 4e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4e8:	0000000c 	andeq	r0, r0, ip
 4ec:	000004d8 	ldrdeq	r0, [r0], -r8
 4f0:	08000974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp}
 4f4:	0000005c 	andeq	r0, r0, ip, asr r0
 4f8:	00000018 	andeq	r0, r0, r8, lsl r0
 4fc:	000004d8 	ldrdeq	r0, [r0], -r8
 500:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
 504:	00000044 	andeq	r0, r0, r4, asr #32
 508:	40080e41 	andmi	r0, r8, r1, asr #28
 50c:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 510:	00000001 	andeq	r0, r0, r1
 514:	0000000c 	andeq	r0, r0, ip
 518:	000004d8 	ldrdeq	r0, [r0], -r8
 51c:	00000000 	andeq	r0, r0, r0
 520:	00000002 	andeq	r0, r0, r2
 524:	0000000c 	andeq	r0, r0, ip
 528:	000004d8 	ldrdeq	r0, [r0], -r8
 52c:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
 530:	00000018 	andeq	r0, r0, r8, lsl r0
 534:	0000000c 	andeq	r0, r0, ip
 538:	000004d8 	ldrdeq	r0, [r0], -r8
 53c:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
 540:	00000018 	andeq	r0, r0, r8, lsl r0
 544:	0000000c 	andeq	r0, r0, ip
 548:	000004d8 	ldrdeq	r0, [r0], -r8
 54c:	08000a44 	stmdaeq	r0, {r2, r6, r9, fp}
 550:	00000028 	andeq	r0, r0, r8, lsr #32
 554:	0000000c 	andeq	r0, r0, ip
 558:	000004d8 	ldrdeq	r0, [r0], -r8
 55c:	08000a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp}
 560:	00000034 	andeq	r0, r0, r4, lsr r0
 564:	0000001c 	andeq	r0, r0, ip, lsl r0
 568:	000004d8 	ldrdeq	r0, [r0], -r8
 56c:	08000aa0 	stmdaeq	r0, {r5, r7, r9, fp}
 570:	0000005c 	andeq	r0, r0, ip, asr r0
 574:	40100e41 	andsmi	r0, r0, r1, asr #28
 578:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
 57c:	02864003 	addeq	r4, r6, #3
 580:	00018e40 	andeq	r8, r1, r0, asr #28
 584:	00000024 	andeq	r0, r0, r4, lsr #32
 588:	000004d8 	ldrdeq	r0, [r0], -r8
 58c:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
 590:	0000021c 	andeq	r0, r0, ip, lsl r2
 594:	40180e42 	andsmi	r0, r8, r2, asr #28
 598:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
 59c:	04864005 	streq	r4, [r6], #5
 5a0:	40038740 	andmi	r8, r3, r0, asr #14
 5a4:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
 5a8:	00000001 	andeq	r0, r0, r1
 5ac:	0000000c 	andeq	r0, r0, ip
 5b0:	000004d8 	ldrdeq	r0, [r0], -r8
 5b4:	00000000 	andeq	r0, r0, r0
 5b8:	0000000c 	andeq	r0, r0, ip
 5bc:	0000000c 	andeq	r0, r0, ip
 5c0:	000004d8 	ldrdeq	r0, [r0], -r8
 5c4:	00000000 	andeq	r0, r0, r0
 5c8:	0000000c 	andeq	r0, r0, ip
 5cc:	0000000c 	andeq	r0, r0, ip
 5d0:	000004d8 	ldrdeq	r0, [r0], -r8
 5d4:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
 5d8:	0000000c 	andeq	r0, r0, ip
 5dc:	0000000c 	andeq	r0, r0, ip
 5e0:	000004d8 	ldrdeq	r0, [r0], -r8
 5e4:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
 5e8:	00000004 	andeq	r0, r0, r4
 5ec:	0000000c 	andeq	r0, r0, ip
 5f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 5f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5fc:	0000000c 	andeq	r0, r0, ip
 600:	000005ec 	andeq	r0, r0, ip, ror #11
 604:	00000000 	andeq	r0, r0, r0
 608:	0000000c 	andeq	r0, r0, ip
 60c:	0000000c 	andeq	r0, r0, ip
 610:	000005ec 	andeq	r0, r0, ip, ror #11
 614:	00000000 	andeq	r0, r0, r0
 618:	0000000c 	andeq	r0, r0, ip
 61c:	0000000c 	andeq	r0, r0, ip
 620:	000005ec 	andeq	r0, r0, ip, ror #11
 624:	00000000 	andeq	r0, r0, r0
 628:	0000000c 	andeq	r0, r0, ip
 62c:	0000000c 	andeq	r0, r0, ip
 630:	000005ec 	andeq	r0, r0, ip, ror #11
 634:	00000000 	andeq	r0, r0, r0
 638:	0000000c 	andeq	r0, r0, ip
 63c:	0000000c 	andeq	r0, r0, ip
 640:	000005ec 	andeq	r0, r0, ip, ror #11
 644:	00000000 	andeq	r0, r0, r0
 648:	0000000c 	andeq	r0, r0, ip
 64c:	0000000c 	andeq	r0, r0, ip
 650:	000005ec 	andeq	r0, r0, ip, ror #11
 654:	00000000 	andeq	r0, r0, r0
 658:	0000000c 	andeq	r0, r0, ip
 65c:	0000000c 	andeq	r0, r0, ip
 660:	000005ec 	andeq	r0, r0, ip, ror #11
 664:	00000000 	andeq	r0, r0, r0
 668:	0000000c 	andeq	r0, r0, ip
 66c:	0000000c 	andeq	r0, r0, ip
 670:	000005ec 	andeq	r0, r0, ip, ror #11
 674:	00000000 	andeq	r0, r0, r0
 678:	00000010 	andeq	r0, r0, r0, lsl r0
 67c:	0000000c 	andeq	r0, r0, ip
 680:	000005ec 	andeq	r0, r0, ip, ror #11
 684:	00000000 	andeq	r0, r0, r0
 688:	0000000c 	andeq	r0, r0, ip
 68c:	0000000c 	andeq	r0, r0, ip
 690:	000005ec 	andeq	r0, r0, ip, ror #11
 694:	00000000 	andeq	r0, r0, r0
 698:	0000000e 	andeq	r0, r0, lr
 69c:	0000000c 	andeq	r0, r0, ip
 6a0:	000005ec 	andeq	r0, r0, ip, ror #11
 6a4:	00000000 	andeq	r0, r0, r0
 6a8:	00000010 	andeq	r0, r0, r0, lsl r0
 6ac:	0000000c 	andeq	r0, r0, ip
 6b0:	000005ec 	andeq	r0, r0, ip, ror #11
 6b4:	00000000 	andeq	r0, r0, r0
 6b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6bc:	0000000c 	andeq	r0, r0, ip
 6c0:	000005ec 	andeq	r0, r0, ip, ror #11
 6c4:	00000000 	andeq	r0, r0, r0
 6c8:	00000012 	andeq	r0, r0, r2, lsl r0
 6cc:	0000000c 	andeq	r0, r0, ip
 6d0:	000005ec 	andeq	r0, r0, ip, ror #11
 6d4:	08000d28 	stmdaeq	r0, {r3, r5, r8, sl, fp}
 6d8:	0000002a 	andeq	r0, r0, sl, lsr #32
 6dc:	0000000c 	andeq	r0, r0, ip
 6e0:	000005ec 	andeq	r0, r0, ip, ror #11
 6e4:	00000000 	andeq	r0, r0, r0
 6e8:	0000002a 	andeq	r0, r0, sl, lsr #32
 6ec:	0000000c 	andeq	r0, r0, ip
 6f0:	000005ec 	andeq	r0, r0, ip, ror #11
 6f4:	00000000 	andeq	r0, r0, r0
 6f8:	00000024 	andeq	r0, r0, r4, lsr #32
 6fc:	0000000c 	andeq	r0, r0, ip
 700:	000005ec 	andeq	r0, r0, ip, ror #11
 704:	00000000 	andeq	r0, r0, r0
 708:	00000012 	andeq	r0, r0, r2, lsl r0
 70c:	0000000c 	andeq	r0, r0, ip
 710:	000005ec 	andeq	r0, r0, ip, ror #11
 714:	00000000 	andeq	r0, r0, r0
 718:	00000012 	andeq	r0, r0, r2, lsl r0
 71c:	0000000c 	andeq	r0, r0, ip
 720:	000005ec 	andeq	r0, r0, ip, ror #11
 724:	00000000 	andeq	r0, r0, r0
 728:	0000001e 	andeq	r0, r0, lr, lsl r0
 72c:	0000000c 	andeq	r0, r0, ip
 730:	000005ec 	andeq	r0, r0, ip, ror #11
 734:	08000d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp}
 738:	0000001e 	andeq	r0, r0, lr, lsl r0
 73c:	0000000c 	andeq	r0, r0, ip
 740:	000005ec 	andeq	r0, r0, ip, ror #11
 744:	00000000 	andeq	r0, r0, r0
 748:	0000001e 	andeq	r0, r0, lr, lsl r0
 74c:	0000000c 	andeq	r0, r0, ip
 750:	000005ec 	andeq	r0, r0, ip, ror #11
 754:	00000000 	andeq	r0, r0, r0
 758:	0000001c 	andeq	r0, r0, ip, lsl r0
 75c:	0000000c 	andeq	r0, r0, ip
 760:	000005ec 	andeq	r0, r0, ip, ror #11
 764:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
 768:	0000001c 	andeq	r0, r0, ip, lsl r0
 76c:	0000000c 	andeq	r0, r0, ip
 770:	000005ec 	andeq	r0, r0, ip, ror #11
 774:	00000000 	andeq	r0, r0, r0
 778:	0000001e 	andeq	r0, r0, lr, lsl r0
 77c:	0000000c 	andeq	r0, r0, ip
 780:	000005ec 	andeq	r0, r0, ip, ror #11
 784:	00000000 	andeq	r0, r0, r0
 788:	0000001e 	andeq	r0, r0, lr, lsl r0
 78c:	0000000c 	andeq	r0, r0, ip
 790:	000005ec 	andeq	r0, r0, ip, ror #11
 794:	00000000 	andeq	r0, r0, r0
 798:	0000001c 	andeq	r0, r0, ip, lsl r0
 79c:	0000000c 	andeq	r0, r0, ip
 7a0:	000005ec 	andeq	r0, r0, ip, ror #11
 7a4:	00000000 	andeq	r0, r0, r0
 7a8:	0000001a 	andeq	r0, r0, sl, lsl r0
 7ac:	0000000c 	andeq	r0, r0, ip
 7b0:	000005ec 	andeq	r0, r0, ip, ror #11
 7b4:	00000000 	andeq	r0, r0, r0
 7b8:	0000001a 	andeq	r0, r0, sl, lsl r0
 7bc:	0000000c 	andeq	r0, r0, ip
 7c0:	000005ec 	andeq	r0, r0, ip, ror #11
 7c4:	00000000 	andeq	r0, r0, r0
 7c8:	00000018 	andeq	r0, r0, r8, lsl r0
 7cc:	0000000c 	andeq	r0, r0, ip
 7d0:	000005ec 	andeq	r0, r0, ip, ror #11
 7d4:	00000000 	andeq	r0, r0, r0
 7d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7dc:	0000000c 	andeq	r0, r0, ip
 7e0:	000005ec 	andeq	r0, r0, ip, ror #11
 7e4:	00000000 	andeq	r0, r0, r0
 7e8:	00000020 	andeq	r0, r0, r0, lsr #32
 7ec:	0000000c 	andeq	r0, r0, ip
 7f0:	000005ec 	andeq	r0, r0, ip, ror #11
 7f4:	00000000 	andeq	r0, r0, r0
 7f8:	00000020 	andeq	r0, r0, r0, lsr #32
 7fc:	0000000c 	andeq	r0, r0, ip
 800:	000005ec 	andeq	r0, r0, ip, ror #11
 804:	08000d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp}
 808:	00000020 	andeq	r0, r0, r0, lsr #32
 80c:	0000000c 	andeq	r0, r0, ip
 810:	000005ec 	andeq	r0, r0, ip, ror #11
 814:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 818:	00000020 	andeq	r0, r0, r0, lsr #32
 81c:	0000000c 	andeq	r0, r0, ip
 820:	000005ec 	andeq	r0, r0, ip, ror #11
 824:	00000000 	andeq	r0, r0, r0
 828:	0000001e 	andeq	r0, r0, lr, lsl r0
 82c:	0000000c 	andeq	r0, r0, ip
 830:	000005ec 	andeq	r0, r0, ip, ror #11
 834:	00000000 	andeq	r0, r0, r0
 838:	00000012 	andeq	r0, r0, r2, lsl r0
 83c:	0000000c 	andeq	r0, r0, ip
 840:	000005ec 	andeq	r0, r0, ip, ror #11
 844:	00000000 	andeq	r0, r0, r0
 848:	00000020 	andeq	r0, r0, r0, lsr #32
 84c:	0000000c 	andeq	r0, r0, ip
 850:	000005ec 	andeq	r0, r0, ip, ror #11
 854:	00000000 	andeq	r0, r0, r0
 858:	00000020 	andeq	r0, r0, r0, lsr #32
 85c:	0000000c 	andeq	r0, r0, ip
 860:	000005ec 	andeq	r0, r0, ip, ror #11
 864:	08000dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp}
 868:	0000001c 	andeq	r0, r0, ip, lsl r0
 86c:	0000000c 	andeq	r0, r0, ip
 870:	000005ec 	andeq	r0, r0, ip, ror #11
 874:	08000de8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, fp}
 878:	0000001c 	andeq	r0, r0, ip, lsl r0
 87c:	0000000c 	andeq	r0, r0, ip
 880:	000005ec 	andeq	r0, r0, ip, ror #11
 884:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
 888:	0000001c 	andeq	r0, r0, ip, lsl r0
 88c:	0000000c 	andeq	r0, r0, ip
 890:	000005ec 	andeq	r0, r0, ip, ror #11
 894:	00000000 	andeq	r0, r0, r0
 898:	00000026 	andeq	r0, r0, r6, lsr #32
 89c:	0000000c 	andeq	r0, r0, ip
 8a0:	000005ec 	andeq	r0, r0, ip, ror #11
 8a4:	08000e20 	stmdaeq	r0, {r5, r9, sl, fp}
 8a8:	00000040 	andeq	r0, r0, r0, asr #32
 8ac:	0000000c 	andeq	r0, r0, ip
 8b0:	000005ec 	andeq	r0, r0, ip, ror #11
 8b4:	00000000 	andeq	r0, r0, r0
 8b8:	00000020 	andeq	r0, r0, r0, lsr #32
 8bc:	0000000c 	andeq	r0, r0, ip
 8c0:	000005ec 	andeq	r0, r0, ip, ror #11
 8c4:	00000000 	andeq	r0, r0, r0
 8c8:	00000020 	andeq	r0, r0, r0, lsr #32
 8cc:	00000018 	andeq	r0, r0, r8, lsl r0
 8d0:	000005ec 	andeq	r0, r0, ip, ror #11
 8d4:	00000000 	andeq	r0, r0, r0
 8d8:	00000038 	andeq	r0, r0, r8, lsr r0
 8dc:	40080e41 	andmi	r0, r8, r1, asr #28
 8e0:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 8e4:	00000001 	andeq	r0, r0, r1
 8e8:	0000000c 	andeq	r0, r0, ip
 8ec:	000005ec 	andeq	r0, r0, ip, ror #11
 8f0:	00000000 	andeq	r0, r0, r0
 8f4:	00000020 	andeq	r0, r0, r0, lsr #32
 8f8:	0000000c 	andeq	r0, r0, ip
 8fc:	000005ec 	andeq	r0, r0, ip, ror #11
 900:	00000000 	andeq	r0, r0, r0
 904:	00000020 	andeq	r0, r0, r0, lsr #32
 908:	0000000c 	andeq	r0, r0, ip
 90c:	000005ec 	andeq	r0, r0, ip, ror #11
 910:	00000000 	andeq	r0, r0, r0
 914:	0000001c 	andeq	r0, r0, ip, lsl r0
 918:	0000000c 	andeq	r0, r0, ip
 91c:	000005ec 	andeq	r0, r0, ip, ror #11
 920:	00000000 	andeq	r0, r0, r0
 924:	0000001c 	andeq	r0, r0, ip, lsl r0
 928:	00000018 	andeq	r0, r0, r8, lsl r0
 92c:	000005ec 	andeq	r0, r0, ip, ror #11
 930:	00000000 	andeq	r0, r0, r0
 934:	000000a8 	andeq	r0, r0, r8, lsr #1
 938:	40080e42 	andmi	r0, r8, r2, asr #28
 93c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 940:	00000001 	andeq	r0, r0, r1
 944:	0000000c 	andeq	r0, r0, ip
 948:	000005ec 	andeq	r0, r0, ip, ror #11
 94c:	00000000 	andeq	r0, r0, r0
 950:	0000005c 	andeq	r0, r0, ip, asr r0
 954:	0000000c 	andeq	r0, r0, ip
 958:	000005ec 	andeq	r0, r0, ip, ror #11
 95c:	00000000 	andeq	r0, r0, r0
 960:	0000005c 	andeq	r0, r0, ip, asr r0
 964:	0000000c 	andeq	r0, r0, ip
 968:	000005ec 	andeq	r0, r0, ip, ror #11
 96c:	00000000 	andeq	r0, r0, r0
 970:	00000020 	andeq	r0, r0, r0, lsr #32
 974:	0000000c 	andeq	r0, r0, ip
 978:	000005ec 	andeq	r0, r0, ip, ror #11
 97c:	00000000 	andeq	r0, r0, r0
 980:	00000020 	andeq	r0, r0, r0, lsr #32
 984:	0000000c 	andeq	r0, r0, ip
 988:	000005ec 	andeq	r0, r0, ip, ror #11
 98c:	00000000 	andeq	r0, r0, r0
 990:	00000044 	andeq	r0, r0, r4, asr #32
 994:	0000000c 	andeq	r0, r0, ip
 998:	000005ec 	andeq	r0, r0, ip, ror #11
 99c:	00000000 	andeq	r0, r0, r0
 9a0:	0000003a 	andeq	r0, r0, sl, lsr r0
 9a4:	0000000c 	andeq	r0, r0, ip
 9a8:	000005ec 	andeq	r0, r0, ip, ror #11
 9ac:	00000000 	andeq	r0, r0, r0
 9b0:	00000006 	andeq	r0, r0, r6
 9b4:	0000000c 	andeq	r0, r0, ip
 9b8:	000005ec 	andeq	r0, r0, ip, ror #11
 9bc:	00000000 	andeq	r0, r0, r0
 9c0:	0000000a 	andeq	r0, r0, sl
 9c4:	0000000c 	andeq	r0, r0, ip
 9c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 9cc:	7c020001 	stcvc	0, cr0, [r2], {1}
 9d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 9d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 9d8:	000009c4 	andeq	r0, r0, r4, asr #19
 9dc:	08000e60 	stmdaeq	r0, {r5, r6, r9, sl, fp}
 9e0:	00000154 	andeq	r0, r0, r4, asr r1
 9e4:	40100e41 	andsmi	r0, r0, r1, asr #28
 9e8:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
 9ec:	02864003 	addeq	r4, r6, #3
 9f0:	00018e40 	andeq	r8, r1, r0, asr #28
 9f4:	00000018 	andeq	r0, r0, r8, lsl r0
 9f8:	000009c4 	andeq	r0, r0, r4, asr #19
 9fc:	00000000 	andeq	r0, r0, r0
 a00:	00000070 	andeq	r0, r0, r0, ror r0
 a04:	40080e41 	andmi	r0, r8, r1, asr #28
 a08:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 a0c:	00000001 	andeq	r0, r0, r1
 a10:	0000000c 	andeq	r0, r0, ip
 a14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a18:	7c020001 	stcvc	0, cr0, [r2], {1}
 a1c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a20:	00000018 	andeq	r0, r0, r8, lsl r0
 a24:	00000a10 	andeq	r0, r0, r0, lsl sl
 a28:	08000fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp}
 a2c:	00000038 	andeq	r0, r0, r8, lsr r0
 a30:	40080e41 	andmi	r0, r8, r1, asr #28
 a34:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 a38:	00000001 	andeq	r0, r0, r1
 a3c:	0000000c 	andeq	r0, r0, ip
 a40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a44:	7c020001 	stcvc	0, cr0, [r2], {1}
 a48:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a4c:	00000018 	andeq	r0, r0, r8, lsl r0
 a50:	00000a3c 	andeq	r0, r0, ip, lsr sl
 a54:	08000fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp}
 a58:	00000024 	andeq	r0, r0, r4, lsr #32
 a5c:	40080e41 	andmi	r0, r8, r1, asr #28
 a60:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 a64:	00000001 	andeq	r0, r0, r1
 a68:	00000018 	andeq	r0, r0, r8, lsl r0
 a6c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 a70:	08001010 	stmdaeq	r0, {r4, ip}
 a74:	00000024 	andeq	r0, r0, r4, lsr #32
 a78:	40080e41 	andmi	r0, r8, r1, asr #28
 a7c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 a80:	00000001 	andeq	r0, r0, r1
 a84:	00000018 	andeq	r0, r0, r8, lsl r0
 a88:	00000a3c 	andeq	r0, r0, ip, lsr sl
 a8c:	08001034 	stmdaeq	r0, {r2, r4, r5, ip}
 a90:	00000090 	muleq	r0, r0, r0
 a94:	40080e41 	andmi	r0, r8, r1, asr #28
 a98:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 a9c:	00000001 	andeq	r0, r0, r1
 aa0:	00000028 	andeq	r0, r0, r8, lsr #32
 aa4:	00000a3c 	andeq	r0, r0, ip, lsr sl
 aa8:	080010c4 	stmdaeq	r0, {r2, r6, r7, ip}
 aac:	000000a8 	andeq	r0, r0, r8, lsr #1
 ab0:	40200e43 	eormi	r0, r0, r3, asr #28
 ab4:	84400883 	strbhi	r0, [r0], #-2179	; 0x883
 ab8:	06854007 	streq	r4, [r5], r7
 abc:	40058640 	andmi	r8, r5, r0, asr #12
 ac0:	88400487 	stmdahi	r0, {r0, r1, r2, r7, sl}^
 ac4:	02894003 	addeq	r4, r9, #3
 ac8:	00018e40 	andeq	r8, r1, r0, asr #28
 acc:	00000018 	andeq	r0, r0, r8, lsl r0
 ad0:	00000a3c 	andeq	r0, r0, ip, lsr sl
 ad4:	0800116c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip}
 ad8:	00000038 	andeq	r0, r0, r8, lsr r0
 adc:	40080e41 	andmi	r0, r8, r1, asr #28
 ae0:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 ae4:	00000001 	andeq	r0, r0, r1
 ae8:	0000001c 	andeq	r0, r0, ip, lsl r0
 aec:	00000a3c 	andeq	r0, r0, ip, lsr sl
 af0:	080011a4 	stmdaeq	r0, {r2, r5, r7, r8, ip}
 af4:	00000048 	andeq	r0, r0, r8, asr #32
 af8:	40100e41 	andsmi	r0, r0, r1, asr #28
 afc:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 b00:	02854003 	addeq	r4, r5, #3
 b04:	00018e40 	andeq	r8, r1, r0, asr #28
 b08:	0000001c 	andeq	r0, r0, ip, lsl r0
 b0c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b10:	080011ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip}
 b14:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 b18:	40100e41 	andsmi	r0, r0, r1, asr #28
 b1c:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 b20:	02854003 	addeq	r4, r5, #3
 b24:	00018e40 	andeq	r8, r1, r0, asr #28
 b28:	0000001c 	andeq	r0, r0, ip, lsl r0
 b2c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b30:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
 b34:	00000084 	andeq	r0, r0, r4, lsl #1
 b38:	40100e41 	andsmi	r0, r0, r1, asr #28
 b3c:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 b40:	02854003 	addeq	r4, r5, #3
 b44:	00018e40 	andeq	r8, r1, r0, asr #28
 b48:	00000018 	andeq	r0, r0, r8, lsl r0
 b4c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b50:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
 b54:	00000024 	andeq	r0, r0, r4, lsr #32
 b58:	40080e41 	andmi	r0, r8, r1, asr #28
 b5c:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 b60:	00000001 	andeq	r0, r0, r1
 b64:	0000000c 	andeq	r0, r0, ip
 b68:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b6c:	08001364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip}
 b70:	0000001c 	andeq	r0, r0, ip, lsl r0
 b74:	00000018 	andeq	r0, r0, r8, lsl r0
 b78:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b7c:	08001380 	stmdaeq	r0, {r7, r8, r9, ip}
 b80:	00000040 	andeq	r0, r0, r0, asr #32
 b84:	40080e41 	andmi	r0, r8, r1, asr #28
 b88:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 b8c:	00000001 	andeq	r0, r0, r1
 b90:	00000024 	andeq	r0, r0, r4, lsr #32
 b94:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b98:	080013c0 	stmdaeq	r0, {r6, r7, r8, r9, ip}
 b9c:	000002dc 	ldrdeq	r0, [r0], -ip
 ba0:	40180e41 	andsmi	r0, r8, r1, asr #28
 ba4:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 ba8:	04844005 	streq	r4, [r4], #5
 bac:	40038540 	andmi	r8, r3, r0, asr #10
 bb0:	8e400286 	cdphi	2, 4, cr0, cr0, cr6, {4}
 bb4:	00000001 	andeq	r0, r0, r1
 bb8:	00000024 	andeq	r0, r0, r4, lsr #32
 bbc:	00000a3c 	andeq	r0, r0, ip, lsr sl
 bc0:	0800169c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip}
 bc4:	000000c8 	andeq	r0, r0, r8, asr #1
 bc8:	40180e41 	andsmi	r0, r8, r1, asr #28
 bcc:	84400683 	strbhi	r0, [r0], #-1667	; 0x683
 bd0:	04854005 	streq	r4, [r5], #5
 bd4:	40038640 	andmi	r8, r3, r0, asr #12
 bd8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bdc:	00000001 	andeq	r0, r0, r1
 be0:	00000018 	andeq	r0, r0, r8, lsl r0
 be4:	00000a3c 	andeq	r0, r0, ip, lsr sl
 be8:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
 bec:	00000038 	andeq	r0, r0, r8, lsr r0
 bf0:	400c0e41 	andmi	r0, ip, r1, asr #28
 bf4:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
 bf8:	018e4002 	orreq	r4, lr, r2
 bfc:	00000018 	andeq	r0, r0, r8, lsl r0
 c00:	00000a3c 	andeq	r0, r0, ip, lsr sl
 c04:	0800179c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip}
 c08:	0000005c 	andeq	r0, r0, ip, asr r0
 c0c:	40080e41 	andmi	r0, r8, r1, asr #28
 c10:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 c14:	00000001 	andeq	r0, r0, r1
 c18:	0000000c 	andeq	r0, r0, ip
 c1c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 c20:	00000000 	andeq	r0, r0, r0
 c24:	00000002 	andeq	r0, r0, r2
 c28:	0000000c 	andeq	r0, r0, ip
 c2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 c30:	7c020001 	stcvc	0, cr0, [r2], {1}
 c34:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 c38:	00000018 	andeq	r0, r0, r8, lsl r0
 c3c:	00000c28 	andeq	r0, r0, r8, lsr #24
 c40:	080017f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, ip}
 c44:	00000030 	andeq	r0, r0, r0, lsr r0
 c48:	400c0e41 	andmi	r0, ip, r1, asr #28
 c4c:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
 c50:	018e4002 	orreq	r4, lr, r2
 c54:	00000018 	andeq	r0, r0, r8, lsl r0
 c58:	00000c28 	andeq	r0, r0, r8, lsr #24
 c5c:	08001828 	stmdaeq	r0, {r3, r5, fp, ip}
 c60:	00000024 	andeq	r0, r0, r4, lsr #32
 c64:	40080e41 	andmi	r0, r8, r1, asr #28
 c68:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 c6c:	00000001 	andeq	r0, r0, r1

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4349564e 	movtmi	r5, #38478	; 0x964e
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	5152495f 	cmppl	r2, pc, asr r9
       8:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
       c:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	7300646d 	movwvc	r6, #1133	; 0x46d
      14:	6e497274 	mcrvs	2, 2, r7, cr9, cr4, {3}
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	00786564 	rsbseq	r6, r8, r4, ror #10
      1c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
      24:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
      28:	64416563 	strbvs	r6, [r1], #-1379	; 0x563
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	6d2f0073 	stcvs	0, cr0, [pc, #-460]!	; fffffe6c <BootRAM+0xef7060d>
      34:	61696465 	cmnvs	r9, r5, ror #8
      38:	5f66732f 	svcpl	0x0066732f

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	4d2f6275 	sfmmi	f6, 4, [pc, #-468]!	; fffffe74 <BootRAM+0xef70615>
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	69727461 	ldmdbvs	r2!, {r0, r5, r6, sl, ip, sp, lr}^
      48:	6f532f78 	svcvs	0x00532f78
      4c:	61777466 	cmnvs	r7, r6, ror #8

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	422f6572 	eormi	r6, pc, #478150656	; 0x1c800000
      54:	6c746f6f 	ldclvs	15, cr6, [r4], #-444	; 0xfffffe44
      58:	6564616f 	strbvs	r6, [r4, #-367]!	; 0x16f
      5c:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
      60:	445f0063 	ldrbmi	r0, [pc], #-99	; 68 <_Minimum_Stack_Size-0x98>
      64:	43495645 	movtmi	r5, #38469	; 0x9645
      68:	4e495f45 	cdpmi	15, 4, cr5, cr9, cr5, {2}
      6c:	62004f46 	andvs	r4, r0, #280	; 0x118
      70:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
      74:	74536563 	ldrbvc	r6, [r3], #-1379	; 0x563
      78:	00657461 	rsbeq	r7, r5, r1, ror #8
      7c:	45627375 	strbmi	r7, [r2, #-885]!	; 0x375
      80:	5349626e 	movtpl	r6, #37486	; 0x926e
      84:	45520052 	ldrbmi	r0, [r2, #-82]	; 0x52
      88:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
      8c:	4941575f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
      90:	73550054 	cmpvc	r5, #84	; 0x54
      94:	535f7265 	cmppl	pc, #1342177286	; 0x50000006
      98:	6e457465 	cdpvs	4, 4, cr7, cr5, cr5, {3}
      9c:	696f5064 	stmdbvs	pc!, {r2, r5, r6, ip, lr}^	; <UNPREDICTABLE>
      a0:	6546746e 	strbvs	r7, [r6, #-1134]	; 0x46e
      a4:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
      a8:	66640065 	strbtvs	r0, [r4], -r5, rrx
      ac:	696e4975 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r8, fp, lr}^
      b0:	6e4f0074 	mcrvs	0, 2, r0, cr15, cr4, {3}
      b4:	73654465 	cmnvc	r5, #1694498816	; 0x65000000
      b8:	70697263 	rsbvc	r7, r9, r3, ror #4
      bc:	00726f74 	rsbseq	r6, r2, r4, ror pc
      c0:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
      c4:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0x375
      c8:	6200646e 	andvs	r6, r0, #1845493760	; 0x6e000000
      cc:	464f5345 	strbmi	r5, [pc], -r5, asr #6
      d0:	00746e63 	rsbseq	r6, r4, r3, ror #28
      d4:	52627375 	rsbpl	r7, r2, #-738197503	; 0xd4000001
      d8:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
      dc:	55530065 	ldrbpl	r0, [r3, #-101]	; 0x65
      e0:	4e455053 	mcrmi	0, 2, r5, cr5, cr3, {2}
      e4:	00444544 	subeq	r4, r4, r4, asr #10
      e8:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
      ec:	535f454d 	cmppl	pc, #322961408	; 0x13400000
      f0:	54524154 	ldrbpl	r4, [r2], #-340	; 0x154
      f4:	62737500 	rsbsvs	r7, r3, #0, 10
      f8:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
      fc:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     100:	61654665 	cmnvs	r5, r5, ror #12
     104:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     108:	706f4300 	rsbvc	r4, pc, r0, lsl #6
     10c:	74614479 	strbtvc	r4, [r1], #-1145	; 0x479
     110:	73550061 	cmpvc	r5, #97	; 0x61
     114:	535f7265 	cmppl	pc, #1342177286	; 0x50000006
     118:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
     11c:	66726574 			; <UNDEFINED> instruction: 0x66726574
     120:	00656361 	rsbeq	r6, r5, r1, ror #6
     124:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
     128:	525f4543 	subspl	r4, pc, #281018368	; 0x10c00000
     12c:	50494345 	subpl	r4, r9, r5, asr #6
     130:	544e4549 	strbpl	r4, [lr], #-1353	; 0x549
     134:	574f5000 	strbpl	r5, [pc, -r0]
     138:	44455245 	strbmi	r5, [r5], #-581	; 0x245
     13c:	62737500 	rsbsvs	r7, r3, #0, 10
     140:	7500632e 	strvc	r6, [r0, #-814]	; 0x32e
     144:	74536273 	ldrbvc	r6, [r3], #-627	; 0x273
     148:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     14c:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     150:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     154:	7500726f 	strvc	r7, [r0, #-623]	; 0x26f
     158:	65476273 	strbvs	r6, [r7, #-627]	; 0x273
     15c:	76654474 			; <UNDEFINED> instruction: 0x76654474
     160:	44656369 	strbtmi	r6, [r5], #-873	; 0x369
     164:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     168:	6f747069 	svcvs	0x00747069
     16c:	53550072 	cmppl	r5, #114	; 0x72
     170:	6e497742 	cdpvs	7, 4, cr7, cr9, cr2, {2}
     174:	73786564 	cmnvc	r8, #100, 10	; 0x19000000
     178:	31757600 	cmncc	r5, r0, lsl #12
     17c:	4e470036 	mcrmi	0, 2, r0, cr7, cr6, {1}
     180:	20432055 	subcs	r2, r3, r5, asr r0
     184:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     188:	30322033 	eorscc	r2, r2, r3, lsr r0
     18c:	32303431 	eorscc	r3, r0, #822083584	; 0x31000000
     190:	28203832 	stmdacs	r0!, {r1, r4, r5, fp, ip, sp}
     194:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0x572
     198:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     19c:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
     1a0:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
     1a4:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
     1a8:	342d6465 	strtcc	r6, [sp], #-1125	; 0x465
     1ac:	622d385f 	eorvs	r3, sp, #6225920	; 0x5f0000
     1b0:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
     1b4:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0x68
     1b8:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     1bc:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
     1c0:	32333830 	eorscc	r3, r3, #48, 16	; 0x300000
     1c4:	2d205d32 	stccs	13, cr5, [r0, #-200]!	; 0xffffff38
     1c8:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0x46d
     1cc:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
     1d0:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0x36d
     1d4:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
     1d8:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
     1dc:	2d20336d 	stccs	3, cr3, [r0, #-436]!	; 0xfffffe4c
     1e0:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0x46d
     1e4:	692d626d 	pushvs	{r0, r2, r3, r5, r6, r9, sp, lr}
     1e8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     1ec:	6b726f77 	blvs	1c9bfd0 <__Stack_Size+0x1c9bbd0>
     1f0:	20672d20 	rsbcs	r2, r7, r0, lsr #26
     1f4:	20734f2d 	rsbscs	r4, r3, sp, lsr #30
     1f8:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0x62d
     1fc:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     200:	732d6e6f 	teqvc	sp, #1776	; 0x6f0
     204:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     208:	20736e6f 	rsbscs	r6, r3, pc, ror #28
     20c:	6164662d 	cmnvs	r4, sp, lsr #12
     210:	732d6174 	teqvc	sp, #116, 2
     214:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     218:	00736e6f 	rsbseq	r6, r3, pc, ror #28
     21c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     220:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
     224:	62737500 	rsbsvs	r7, r3, #0, 10
     228:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
     22c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     230:	73654467 	cmnvc	r5, #1728053248	; 0x67000000
     234:	70697263 	rsbvc	r7, r9, r3, ror #4
     238:	00726f74 	rsbseq	r6, r2, r4, ror pc
     23c:	62425355 	subvs	r5, r2, #1409286145	; 0x54000001
     240:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0x552
     244:	00747365 	rsbseq	r7, r4, r5, ror #6
     248:	5f425355 	svcpl	0x00425355
     24c:	5f544f4e 	svcpl	0x00544f4e
     250:	44414552 	strbmi	r4, [r1], #-1362	; 0x552
     254:	49770059 	ldmdbmi	r7!, {r0, r3, r4, r6}^
     258:	00727473 	rsbseq	r7, r2, r3, ror r4
     25c:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     260:	455f454d 	ldrbmi	r4, [pc, #-1357]	; fffffd1b <BootRAM+0xef704bc>
     264:	52455458 	subpl	r5, r5, #88, 8	; 0x58000000
     268:	004c414e 	subeq	r4, ip, lr, asr #2
     26c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     270:	545f6563 	ldrbpl	r6, [pc], #-1379	; 278 <_Minimum_Stack_Size+0x178>
     274:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
     278:	74657300 	strbtvc	r7, [r5], #-768	; 0x300
     27c:	53557075 	cmppl	r5, #117	; 0x75
     280:	73750042 	cmnvc	r5, #66	; 0x42
     284:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
     288:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     28c:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     290:	6f697461 	svcvs	0x00697461
     294:	4962006e 	stmdbmi	r2!, {r1, r2, r3, r5, r6}^
     298:	6150746e 	cmpvs	r0, lr, ror #8
     29c:	4f536b63 	svcmi	0x00536b63
     2a0:	49700046 	ldmdbmi	r0!, {r1, r2, r6}^
     2a4:	726f666e 	rsbvc	r6, pc, #115343360	; 0x6e00000
     2a8:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     2ac:	63006e6f 	movwvs	r6, #3695	; 0xe6f
     2b0:	73614d72 	cmnvc	r1, #7296	; 0x1c80
     2b4:	7355006b 	cmpvc	r5, #107	; 0x6b
     2b8:	4c775f62 	ldclmi	15, cr5, [r7], #-392	; 0xfffffe78
     2bc:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
     2c0:	52650068 	rsbpl	r0, r5, #104	; 0x68
     2c4:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
     2c8:	74655365 	strbtvc	r5, [r5], #-869	; 0x365
     2cc:	006c6156 	rsbeq	r6, ip, r6, asr r1
     2d0:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xe49
     2d4:	43414652 	movtmi	r4, #5714	; 0x1652
     2d8:	45525f45 	ldrbmi	r5, [r2, #-3909]	; 0xf45
     2dc:	49504943 	ldmdbmi	r0, {r0, r1, r6, r8, fp, lr}^
     2e0:	00544e45 	subseq	r4, r4, r5, asr #28
     2e4:	544e4377 	strbpl	r4, [lr], #-887	; 0x377
     2e8:	65670052 	strbvs	r0, [r7, #-82]!	; 0x52
     2ec:	616c4674 	smcvs	50276	; 0xc464
     2f0:	61506873 	cmpvs	r0, r3, ror r8
     2f4:	69536567 	ldmdbvs	r3, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
     2f8:	5000657a 	andpl	r6, r0, sl, ror r5
     2fc:	5f454e4f 	svcpl	0x00454e4f
     300:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
     304:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
     308:	7500524f 	strvc	r5, [r0, #-591]	; 0x24f
     30c:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
     310:	76654474 			; <UNDEFINED> instruction: 0x76654474
     314:	41656369 	cmnmi	r5, r9, ror #6
     318:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
     31c:	4e007373 	mcrmi	3, 0, r7, cr0, cr3, {3}
     320:	5f434956 	svcpl	0x00434956
     324:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     328:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     32c:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
     330:	73750065 	cmnvc	r5, #101	; 0x65
     334:	61745362 	cmnvs	r4, r2, ror #6
     338:	4f737574 	svcmi	0x00737574
     33c:	55007475 	strpl	r7, [r0, #-1141]	; 0x475
     340:	775f6273 			; <UNDEFINED> instruction: 0x775f6273
     344:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
     348:	64007465 	strvs	r7, [r0], #-1125	; 0x465
     34c:	70557566 	subsvc	r7, r5, r6, ror #10
     350:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0x164
     354:	65527942 	ldrbvs	r7, [r2, #-2370]	; 0x942
     358:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     35c:	54410074 	strbpl	r0, [r1], #-116	; 0x74
     360:	48434154 	stmdami	r3, {r2, r4, r6, r8, lr}^
     364:	75004445 	strvc	r4, [r0, #-1093]	; 0x445
     368:	6f4e6273 	svcvs	0x004e6273
     36c:	61746144 	cmnvs	r4, r4, asr #2
     370:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
     374:	564e0070 			; <UNDEFINED> instruction: 0x564e0070
     378:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     37c:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     380:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     384:	6275536c 	rsbsvs	r5, r5, #108, 6	; 0xb0000001
     388:	6f697250 	svcvs	0x00697250
     38c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     390:	45525f00 	ldrbmi	r5, [r2, #-3840]	; 0xf00
     394:	49504943 	ldmdbmi	r0, {r0, r1, r6, r8, fp, lr}^
     398:	5f544e45 	svcpl	0x00544e45
     39c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0x954
     3a0:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     3a4:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
     3a8:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     3ac:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     3b0:	4300746e 	movwmi	r7, #1134	; 0x46e
     3b4:	4c5f5254 	lfmmi	f5, 2, [pc], {84}	; 0x54
     3b8:	73750050 	cmnvc	r5, #80	; 0x50
     3bc:	61745362 	cmnvs	r4, r2, ror #6
     3c0:	49737574 	ldmdbmi	r3!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
     3c4:	7543006e 	strbvc	r0, [r3, #-110]	; 0x6e
     3c8:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     3cc:	65465f74 	strbvs	r5, [r6, #-3956]	; 0xf74
     3d0:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
     3d4:	6f540065 	svcvs	0x00540065
     3d8:	5f6c6174 	svcpl	0x006c6174
     3dc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     3e0:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     3e4:	6f697461 	svcvs	0x00697461
     3e8:	7375006e 	cmnvc	r5, #110	; 0x6e
     3ec:	73655262 	cmnvc	r5, #536870918	; 0x20000006
     3f0:	75007465 	strvc	r7, [r0, #-1125]	; 0x465
     3f4:	73446273 	movtvc	r6, #17011	; 0x4273
     3f8:	52534962 	subspl	r4, r3, #1605632	; 0x188000
     3fc:	6f687300 	svcvs	0x00687300
     400:	75207472 	strvc	r7, [r0, #-1138]!	; 0x472
     404:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     408:	2064656e 	rsbcs	r6, r4, lr, ror #10
     40c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     410:	5f425355 	svcpl	0x00425355
     414:	4f525245 	svcmi	0x00525245
     418:	45520052 	ldrbmi	r0, [r2, #-82]	; 0x52
     41c:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
     420:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
     424:	36317500 	ldrtcc	r7, [r1], -r0, lsl #10
     428:	0038755f 	eorseq	r7, r8, pc, asr r5
     42c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     430:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
     434:	65467261 	strbvs	r7, [r6, #-609]	; 0x261
     438:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
     43c:	53550065 	cmppl	r5, #101	; 0x65
     440:	61567742 	cmpvs	r6, r2, asr #14
     444:	7365756c 	cmnvc	r5, #108, 10	; 0x1b000000
     448:	48544f00 	ldmdami	r4, {r8, r9, sl, fp, lr}^
     44c:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
     450:	50494345 	subpl	r4, r9, r5, asr #6
     454:	544e4549 	strbpl	r4, [lr], #-1353	; 0x549
     458:	6f6f6200 	svcvs	0x006f6200
     45c:	5477006c 	ldrbtpl	r0, [r7], #-108	; 0x6c
     460:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
     464:	53726566 	cmnpl	r2, #427819008	; 0x19800000
     468:	00657a69 	rsbeq	r7, r5, r9, ror #20
     46c:	32337576 	eorscc	r7, r3, #494927872	; 0x1d800000
     470:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     474:	52495f43 	subpl	r5, r9, #268	; 0x10c
     478:	61684351 	cmnvs	r8, r1, asr r3
     47c:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     480:	52775f00 	rsbspl	r5, r7, #0, 30
     484:	61566765 	cmpvs	r6, r5, ror #14
     488:	6e69006c 	cdpvs	0, 6, cr0, cr9, cr12, {3}
     48c:	66726574 			; <UNDEFINED> instruction: 0x66726574
     490:	00656361 	rsbeq	r6, r5, r1, ror #6
     494:	4349564e 	movtmi	r5, #38478	; 0x964e
     498:	5152495f 	cmppl	r2, pc, asr r9
     49c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     4a0:	506c656e 	rsbpl	r6, ip, lr, ror #10
     4a4:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
     4a8:	6f697470 	svcvs	0x00697470
     4ac:	6972506e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, lr}^
     4b0:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     4b4:	45700079 	ldrbmi	r0, [r0, #-121]!	; 0x79
     4b8:	746e4970 	strbtvc	r4, [lr], #-2416	; 0x970
     4bc:	004e495f 	subeq	r4, lr, pc, asr r9
     4c0:	4349564e 	movtmi	r5, #38478	; 0x964e
     4c4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     4c8:	70795474 	rsbsvc	r5, r9, r4, ror r4
     4cc:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     4d0:	72754300 	rsbsvc	r4, r5, #0, 6
     4d4:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
     4d8:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     4dc:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     4e0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     4e4:	75006e6f 	strvc	r6, [r0, #-3695]	; 0xe6f
     4e8:	70416273 	subvc	r6, r1, r3, ror r2
     4ec:	696e4970 	stmdbvs	lr!, {r4, r5, r6, r8, fp, lr}^
     4f0:	49770074 	ldmdbmi	r7!, {r2, r4, r5, r6}^
     4f4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     4f8:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
     4fc:	73614d5f 	cmnvc	r1, #6080	; 0x17c0
     500:	7375006b 	cmnvc	r5, #107	; 0x6b
     504:	74655362 	strbtvc	r5, [r5], #-866	; 0x362
     508:	70646e45 	rsbvc	r6, r4, r5, asr #28
     50c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
     510:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     514:	00657275 	rsbeq	r7, r5, r5, ror r2
     518:	73616c43 	cmnvc	r1, #17152	; 0x4300
     51c:	65475f73 	strbvs	r5, [r7, #-3955]	; 0xf73
     520:	6e495f74 	mcrvs	15, 2, r5, cr9, cr4, {3}
     524:	66726574 			; <UNDEFINED> instruction: 0x66726574
     528:	5f656361 	svcpl	0x00656361
     52c:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0x553
     530:	00676e69 	rsbeq	r6, r7, r9, ror #28
     534:	55756664 	ldrbpl	r6, [r5, #-1636]!	; 0x664
     538:	74616470 	strbtvc	r6, [r1], #-1136	; 0x470
     53c:	52794265 	rsbspl	r4, r9, #1342177286	; 0x50000006
     540:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     544:	7a697300 	bvc	1a5d14c <__Stack_Size+0x1a5cd4c>
     548:	70797465 	rsbsvc	r7, r9, r5, ror #8
     54c:	6c430065 	mcrrvs	0, 6, r0, r3, cr5
     550:	5f737361 	svcpl	0x00737361
     554:	61746144 	cmnvs	r4, r4, asr #2
     558:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     55c:	70007075 	andvc	r7, r0, r5, ror r0
     560:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
     564:	79747265 	ldmdbvc	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     568:	42535500 	subsmi	r5, r3, #0, 10
     56c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     570:	445f0074 	ldrbmi	r0, [pc], #-116	; 578 <__Stack_Size+0x178>
     574:	43495645 	movtmi	r5, #38469	; 0x9645
     578:	54535f45 	ldrbpl	r5, [r3], #-3909	; 0xf45
     57c:	00455441 	subeq	r5, r5, r1, asr #8
     580:	62425355 	subvs	r5, r2, #1409286145	; 0x54000001
     584:	7165526d 	cmnvc	r5, sp, ror #4
     588:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
     58c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     590:	62737500 	rsbsvs	r7, r3, #0, 10
     594:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xf50
     598:	006e4f72 	rsbeq	r4, lr, r2, ror pc
     59c:	6f697067 	svcvs	0x00697067
     5a0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     5a4:	625f6574 	subsvs	r6, pc, #116, 10	; 0x1d000000
     5a8:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
     5ac:	5f504578 	svcpl	0x00504578
     5b0:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     5b4:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     5b8:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
     5bc:	53455f45 	movtpl	r5, #24389	; 0x5f45
     5c0:	4400464f 	strmi	r4, [r0], #-1615	; 0x64f
     5c4:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     5c8:	6f747069 	svcvs	0x00747069
     5cc:	69535f72 	ldmdbvs	r3, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     5d0:	5500657a 	strpl	r6, [r0, #-1402]	; 0x57a
     5d4:	5f726573 	svcpl	0x00726573
     5d8:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
     5dc:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     5e0:	61654665 	cmnvs	r5, r5, ror #12
     5e4:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     5e8:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     5ec:	65535f72 	ldrbvs	r5, [r3, #-3954]	; 0xf72
     5f0:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     5f4:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     5f8:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     5fc:	46006e6f 	strmi	r6, [r0], -pc, ror #28
     600:	45534c41 	ldrbmi	r4, [r3, #-3137]	; 0xc41
     604:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     608:	65475f72 	strbvs	r5, [r7, #-3954]	; 0xf72
     60c:	746e4974 	strbtvc	r4, [lr], #-2420	; 0x974
     610:	61667265 	cmnvs	r6, r5, ror #4
     614:	44006563 	strmi	r6, [r0], #-1379	; 0x563
     618:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     61c:	72505f65 	subsvc	r5, r0, #404	; 0x194
     620:	7265706f 	rsbvc	r7, r5, #111	; 0x6f
     624:	52007974 	andpl	r7, r0, #116, 18	; 0x1d0000
     628:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
     62c:	4e4f5f45 	cdpmi	15, 4, cr5, cr15, cr5, {2}
     630:	62737500 	rsbsvs	r7, r3, #0, 10
     634:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     638:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
     63c:	616e6f69 	cmnvs	lr, r9, ror #30
     640:	7365446c 	cmnvc	r5, #108, 8	; 0x6c000000
     644:	70697263 	rsbvc	r7, r9, r3, ror #4
     648:	00726f74 	rsbseq	r6, r2, r4, ror pc
     64c:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     650:	5f746e65 	svcpl	0x00746e65
     654:	65746c41 	ldrbvs	r6, [r4, #-3137]!	; 0xc41
     658:	74616e72 	strbtvc	r6, [r1], #-3698	; 0xe72
     65c:	74655365 	strbtvc	r5, [r5], #-869	; 0x365
     660:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     664:	62737500 	rsbsvs	r7, r3, #0, 10
     668:	61746144 	cmnvs	r4, r4, asr #2
     66c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
     670:	6e750070 	mrcvs	0, 3, r0, cr5, cr0, {3}
     674:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     678:	63206465 	teqvs	r0, #1694498816	; 0x65000000
     67c:	00726168 	rsbseq	r6, r2, r8, ror #2
     680:	4553555f 	ldrbmi	r5, [r3, #-1375]	; 0x55f
     684:	54535f52 	ldrbpl	r5, [r3], #-3922	; 0xf52
     688:	41444e41 	cmpmi	r4, r1, asr #28
     68c:	525f4452 	subspl	r4, pc, #1375731712	; 0x52000000
     690:	45555145 	ldrbmi	r5, [r5, #-325]	; 0x145
     694:	00535453 	subseq	r5, r3, r3, asr r4
     698:	5f425355 	svcpl	0x00425355
     69c:	435f504c 	cmpmi	pc, #76	; 0x4c
     6a0:	5f314e41 	svcpl	0x00314e41
     6a4:	5f305852 	svcpl	0x00305852
     6a8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     6ac:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     6b0:	64007265 	strvs	r7, [r0], #-613	; 0x265
     6b4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     6b8:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     6bc:	65475f72 	strbvs	r5, [r7, #-3954]	; 0xf72
     6c0:	61745374 	cmnvs	r4, r4, ror r3
     6c4:	00737574 	rsbseq	r7, r3, r4, ror r5
     6c8:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     6cc:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
     6d0:	38750074 	ldmdacc	r5!, {r2, r4, r5, r6}^
     6d4:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     6d8:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
     6dc:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     6e0:	65446c61 	strbvs	r6, [r4, #-3169]	; 0xc61
     6e4:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     6e8:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     6ec:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     6f0:	65475f72 	strbvs	r5, [r7, #-3954]	; 0xf72
     6f4:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     6f8:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     6fc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     700:	52006e6f 	andpl	r6, r0, #1776	; 0x6f0
     704:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
     708:	414c5f45 	cmpmi	ip, r5, asr #30
     70c:	00524554 	subseq	r4, r2, r4, asr r5
     710:	47627375 			; <UNDEFINED> instruction: 0x47627375
     714:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
     718:	66726574 			; <UNDEFINED> instruction: 0x66726574
     71c:	53656361 	cmnpl	r5, #-2080374783	; 0x84000001
     720:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     724:	4300676e 	movwmi	r6, #1902	; 0x76e
     728:	7373616c 	cmnvc	r3, #108, 2
     72c:	446f4e5f 	strbtmi	r4, [pc], #-3679	; 734 <__Stack_Size+0x334>
     730:	5f617461 	svcpl	0x00617461
     734:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
     738:	766e0070 			; <UNDEFINED> instruction: 0x766e0070
     73c:	6e496369 	cdpvs	3, 4, cr6, cr9, cr9, {3}
     740:	43007469 	movwmi	r7, #1129	; 0x469
     744:	5f6c7274 	svcpl	0x006c7274
     748:	6f666e49 	svcvs	0x00666e49
     74c:	73655200 	cmnvc	r5, #0, 4
     750:	53656d75 	cmnpl	r5, #7488	; 0x1d40
     754:	62737500 	rsbsvs	r7, r3, #0, 10
     758:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
     75c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     760:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     764:	45525f00 	ldrbmi	r5, [r2, #-3840]	; 0xf00
     768:	544c5553 	strbpl	r5, [ip], #-1363	; 0x553
     76c:	55525400 	ldrbpl	r5, [r2, #-1024]	; 0x400
     770:	445f0045 	ldrbmi	r0, [pc], #-69	; 778 <__Stack_Size+0x378>
     774:	43495645 	movtmi	r5, #38469	; 0x9645
     778:	52505f45 	subspl	r5, r0, #276	; 0x114
     77c:	7500504f 	strvc	r5, [r0, #-79]	; 0x4f
     780:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
     784:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     788:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     78c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     790:	43006e6f 	movwmi	r6, #3695	; 0xe6f
     794:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     798:	6174535f 	cmnvs	r4, pc, asr r3
     79c:	5f737574 	svcpl	0x00737574
     7a0:	0074754f 	rsbseq	r7, r4, pc, asr #10
     7a4:	5f425355 	svcpl	0x00425355
     7a8:	55534e55 	ldrbpl	r4, [r3, #-3669]	; 0xe55
     7ac:	524f5050 	subpl	r5, pc, #80	; 0x50
     7b0:	6c610054 	stclvs	0, cr0, [r1], #-336	; 0xfffffeb0
     7b4:	74655374 	strbtvc	r5, [r5], #-884	; 0x374
     7b8:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     7bc:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
     7c0:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
     7c4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     7c8:	72500074 	subsvc	r0, r0, #116	; 0x74
     7cc:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
     7d0:	74535f73 	ldrbvc	r5, [r3], #-3955	; 0xf73
     7d4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     7d8:	004e495f 	subeq	r4, lr, pc, asr r9
     7dc:	636f7250 	cmnvs	pc, #80, 4
     7e0:	5f737365 	svcpl	0x00737365
     7e4:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     7e8:	4f5f7375 	svcmi	0x005f7375
     7ec:	75005455 	strvc	r5, [r0, #-1109]	; 0x455
     7f0:	65526273 	ldrbvs	r6, [r2, #-627]	; 0x273
     7f4:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0x573
     7f8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     7fc:	45445f00 	strbmi	r5, [r4, #-3840]	; 0xf00
     800:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
     804:	62737500 	rsbsvs	r7, r3, #0, 10
     808:	42627344 	rsbmi	r7, r2, #68, 6	; 0x10000001
     80c:	70007375 	andvc	r7, r0, r5, ror r3
     810:	6e497045 	cdpvs	0, 4, cr7, cr9, cr5, {2}
     814:	554f5f74 	strbpl	r5, [pc, #-3956]	; fffff8a8 <BootRAM+0xef70049>
     818:	65720054 	ldrbvs	r0, [r2, #-84]!	; 0x54
     81c:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     820:	4e450074 	mcrmi	0, 2, r0, cr5, cr4, {3}
     824:	494f5044 	stmdbmi	pc, {r2, r6, ip, lr}^	; <UNPREDICTABLE>
     828:	525f544e 	subspl	r5, pc, #1308622848	; 0x4e000000
     82c:	50494345 	subpl	r4, r9, r5, asr #6
     830:	544e4549 	strbpl	r4, [lr], #-1353	; 0x549
     834:	62737500 	rsbsvs	r7, r3, #0, 10
     838:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     83c:	42535500 	subsmi	r5, r3, #0, 10
     840:	6e654c77 	mcrvs	12, 3, r4, cr5, cr7, {3}
     844:	73687467 	cmnvc	r8, #1728053248	; 0x67000000
     848:	62737500 	rsbsvs	r7, r3, #0, 10
     84c:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     850:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     854:	73654467 	cmnvc	r5, #1728053248	; 0x67000000
     858:	70697263 	rsbvc	r7, r9, r3, ror #4
     85c:	00726f74 	rsbseq	r6, r2, r4, ror pc
     860:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
     864:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
     868:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     86c:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     870:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     874:	6144726f 	cmpvs	r4, pc, ror #4
     878:	43006174 	movwmi	r6, #372	; 0x174
     87c:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
     880:	45525547 	ldrbmi	r5, [r2, #-1351]	; 0x547
     884:	73750044 	cmnvc	r5, #68	; 0x44
     888:	776f5062 	strbvc	r5, [pc, -r2, rrx]!
     88c:	664f7265 	strbvs	r7, [pc], -r5, ror #4
     890:	75430066 	strbvc	r0, [r3, #-102]	; 0x66
     894:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     898:	6e495f74 	mcrvs	15, 2, r5, cr9, cr4, {3}
     89c:	66726574 			; <UNDEFINED> instruction: 0x66726574
     8a0:	00656361 	rsbeq	r6, r5, r1, ror #6
     8a4:	47627375 			; <UNDEFINED> instruction: 0x47627375
     8a8:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
     8ac:	66726574 			; <UNDEFINED> instruction: 0x66726574
     8b0:	00656361 	rsbeq	r6, r5, r1, ror #6
     8b4:	755f3875 	ldrbvc	r3, [pc, #-2165]	; 47 <_Minimum_Stack_Size-0xb9>
     8b8:	6f436273 	svcvs	0x00436273
     8bc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     8c0:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     8c4:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     8c8:	4644726f 	strbmi	r7, [r4], -pc, ror #4
     8cc:	44410055 	strbmi	r0, [r1], #-85	; 0x55
     8d0:	53455244 	movtpl	r5, #21060	; 0x5244
     8d4:	00444553 	subeq	r4, r4, r3, asr r5
     8d8:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     8dc:	495f454d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, sl, lr}^	; <UNPREDICTABLE>
     8e0:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
     8e4:	004c414e 	subeq	r4, ip, lr, asr #2
     8e8:	5345525f 	movtpl	r5, #21087	; 0x525f
     8ec:	5f454d55 	svcpl	0x00454d55
     8f0:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
     8f4:	53550045 	cmppl	r5, #69	; 0x45
     8f8:	55535f42 	ldrbpl	r5, [r3, #-3906]	; 0xf42
     8fc:	53454343 	movtpl	r4, #21315	; 0x5343
     900:	4e550053 	mrcmi	0, 2, r0, cr5, cr3, {2}
     904:	4e4e4f43 	cdpmi	15, 4, cr4, cr14, cr3, {2}
     908:	45544345 	ldrbmi	r4, [r4, #-837]	; 0x345
     90c:	73750044 	cmnvc	r5, #68	; 0x44
     910:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
     914:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     918:	5f007375 	svcpl	0x00007375
     91c:	50444e45 	subpl	r4, r4, r5, asr #28
     920:	544e494f 	strbpl	r4, [lr], #-2383	; 0x94f
     924:	464e495f 			; <UNDEFINED> instruction: 0x464e495f
     928:	7375004f 	cmnvc	r5, #79	; 0x4f
     92c:	656c4362 	strbvs	r4, [ip, #-866]!	; 0x362
     930:	65467261 	strbvs	r7, [r6, #-609]	; 0x261
     934:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
     938:	6f540065 	svcvs	0x00540065
     93c:	5f6c6174 	svcpl	0x006c6174
     940:	70646e45 	rsbvc	r6, r4, r5, asr #28
     944:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
     948:	6e6f4300 	cdpvs	3, 6, cr4, cr15, cr0, {0}
     94c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 784 <__Stack_Size+0x384>
     950:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     954:	6f430065 	svcvs	0x00430065
     958:	6f527970 	svcvs	0x00527970
     95c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     960:	65530065 	ldrbvs	r0, [r3, #-101]	; 0x65
     964:	52504574 	subspl	r4, r0, #116, 10	; 0x1d000000
     968:	6c615678 	stclvs	6, cr5, [r1], #-480	; 0xfffffe20
     96c:	6e006469 	cdpvs	4, 0, cr6, cr0, cr9, {3}
     970:	6968746f 	stmdbvs	r8!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     974:	7250676e 	subsvc	r6, r0, #28835840	; 0x1b80000
     978:	7500636f 	strvc	r6, [r0, #-879]	; 0x36f
     97c:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     980:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     984:	56676e69 	strbtpl	r6, [r7], -r9, ror #28
     988:	6f646e65 	svcvs	0x00646e65
     98c:	38750072 	ldmdacc	r5!, {r1, r4, r5, r6}^
     990:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     994:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     998:	6e49676e 	cdpvs	7, 4, cr6, cr9, cr14, {3}
     99c:	66726574 			; <UNDEFINED> instruction: 0x66726574
     9a0:	00656361 	rsbeq	r6, r5, r1, ror #6
     9a4:	755f3875 	ldrbvc	r3, [pc, #-2165]	; 137 <_Minimum_Stack_Size+0x37>
     9a8:	65446273 	strbvs	r6, [r4, #-627]	; 0x273
     9ac:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     9b0:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     9b4:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     9b8:	4644726f 	strbmi	r7, [r4], -pc, ror #4
     9bc:	38750055 	ldmdacc	r5!, {r0, r2, r4, r6}^
     9c0:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     9c4:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     9c8:	6553676e 	ldrbvs	r6, [r3, #-1902]	; 0x76e
     9cc:	6c616972 	stclvs	9, cr6, [r1], #-456	; 0xfffffe38
     9d0:	5f387500 	svcpl	0x00387500
     9d4:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     9d8:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     9dc:	746c4167 	strbtvc	r4, [ip], #-359	; 0x167
     9e0:	38750030 	ldmdacc	r5!, {r4, r5}^
     9e4:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     9e8:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     9ec:	7250676e 	subsvc	r6, r0, #28835840	; 0x1b80000
     9f0:	6375646f 	cmnvs	r5, #1862270976	; 0x6f000000
     9f4:	38750074 	ldmdacc	r5!, {r2, r4, r5, r6}^
     9f8:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     9fc:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     a00:	614c676e 	cmpvs	ip, lr, ror #14
     a04:	6449676e 	strbvs	r6, [r9], #-1902	; 0x76e
     a08:	62737500 	rsbsvs	r7, r3, #0, 10
     a0c:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
     a10:	70697263 	rsbvc	r7, r9, r3, ror #4
     a14:	2e726f74 	mrccs	15, 3, r6, cr2, cr4, {3}
     a18:	66640063 	strbtvs	r0, [r4], -r3, rrx
     a1c:	6e694675 	mcrvs	6, 3, r4, cr9, cr5, {3}
     a20:	55687369 	strbpl	r7, [r8, #-873]!	; 0x369
     a24:	616f6c70 	smcvs	63168	; 0xf6c0
     a28:	756a0064 	strbvc	r0, [sl, #-100]!	; 0x64
     a2c:	6f54706d 	svcvs	0x0054706d
     a30:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     a34:	74657300 	strbtvc	r7, [r5], #-768	; 0x300
     a38:	454c7075 	strbmi	r7, [ip, #-117]	; 0x75
     a3c:	646e4144 	strbtvs	r4, [lr], #-324	; 0x144
     a40:	74747542 	ldrbtvc	r7, [r4], #-1346	; 0x542
     a44:	63006e6f 	movwvs	r6, #3695	; 0xe6f
     a48:	6b636568 	blvs	18d9ff0 <__Stack_Size+0x18d9bf0>
     a4c:	43646e41 	cmnmi	r4, #1040	; 0x410
     a50:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     a54:	746f6f42 	strbtvc	r6, [pc], #-3906	; a5c <__Stack_Size+0x65c>
     a58:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
     a5c:	6c467265 	sfmvs	f7, 2, [r6], {101}	; 0x65
     a60:	64006761 	strvs	r6, [r0], #-1889	; 0x761
     a64:	5f746e6f 	svcpl	0x00746e6f
     a68:	74696177 	strbtvc	r6, [r9], #-375	; 0x177
     a6c:	65686300 	strbvs	r6, [r8, #-768]!	; 0x300
     a70:	73556b63 	cmpvc	r5, #101376	; 0x18c00
     a74:	6f437265 	svcvs	0x00437265
     a78:	73006564 	movwvc	r6, #1380	; 0x564
     a7c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     a80:	7365526d 	cmnvc	r5, #-805306362	; 0xd0000006
     a84:	72007465 	andvc	r7, r0, #1694498816	; 0x65000000
     a88:	42646165 	rsbmi	r6, r4, #1073741849	; 0x40000019
     a8c:	6f747475 	svcvs	0x00747475
     a90:	6174536e 	cmnvs	r4, lr, ror #6
     a94:	73006574 	movwvc	r6, #1396	; 0x574
     a98:	70757465 	rsbsvc	r7, r5, r5, ror #8
     a9c:	53414c46 	movtpl	r4, #7238	; 0x1c46
     aa0:	65730048 	ldrbvs	r0, [r3, #-72]!	; 0x48
     aa4:	43707574 	cmnmi	r0, #116, 10	; 0x1d000000
     aa8:	6d004b4c 	vstrvs	d4, [r0, #-304]	; 0xfffffed0
     aac:	006e6961 	rsbeq	r6, lr, r1, ror #18
     ab0:	755f6f6e 	ldrbvc	r6, [pc, #-3950]	; fffffb4a <BootRAM+0xef702eb>
     ab4:	5f726573 	svcpl	0x00726573
     ab8:	706d756a 	rsbvc	r7, sp, sl, ror #10
     abc:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     ac0:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     ac4:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
     ac8:	61486d65 	cmpvs	r8, r5, ror #26
     acc:	65526472 	ldrbvs	r6, [r2, #-1138]	; 0x472
     ad0:	00746573 	rsbseq	r6, r4, r3, ror r5
     ad4:	616c6564 	cmnvs	ip, r4, ror #10
     ad8:	6f635f79 	svcvs	0x00635f79
     adc:	00746e75 	rsbseq	r6, r4, r5, ror lr
     ae0:	55756664 	ldrbpl	r6, [r5, #-1636]!	; 0x664
     ae4:	616f6c70 	smcvs	63168	; 0xf6c0
     ae8:	61745364 	cmnvs	r4, r4, ror #6
     aec:	64657472 	strbtvs	r7, [r5], #-1138	; 0x472
     af0:	74657300 	strbtvc	r7, [r5], #-768	; 0x300
     af4:	4170734d 	cmnmi	r0, sp, asr #6
     af8:	754a646e 	strbvc	r6, [sl, #-1134]	; 0x46e
     afc:	4900706d 	stmdbmi	r0, {r0, r2, r3, r5, r6, ip, sp, lr}
     b00:	00525043 	subseq	r5, r2, r3, asr #32
     b04:	65676170 	strbvs	r6, [r7, #-368]!	; 0x170
     b08:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
     b0c:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     b10:	00627573 	rsbeq	r7, r2, r3, ror r5
     b14:	566d7772 			; <UNDEFINED> instruction: 0x566d7772
     b18:	49006c61 	stmdbmi	r0, {r0, r5, r6, sl, fp, sp, lr}
     b1c:	00525053 	subseq	r5, r2, r3, asr r0
     b20:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
     b24:	006e6950 	rsbeq	r6, lr, r0, asr r9
     b28:	73616c66 	cmnvc	r1, #26112	; 0x6600
     b2c:	61724568 	cmnvs	r2, r8, ror #10
     b30:	61506573 	cmpvs	r0, r3, ror r5
     b34:	00736567 	rsbseq	r6, r3, r7, ror #10
     b38:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0x172
     b3c:	72747300 	rsbsvc	r7, r4, #0, 6
     b40:	5065626f 	rsbpl	r6, r5, pc, ror #4
     b44:	61006e69 	tstvs	r0, r9, ror #28
     b48:	00726464 	rsbseq	r6, r2, r4, ror #8
     b4c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     b50:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     b54:	52003031 	andpl	r3, r0, #49	; 0x31
     b58:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     b5c:	31444556 	cmpcc	r4, r6, asr r5
     b60:	6d740031 	ldclvs	0, cr0, [r4, #-196]!	; 0xffffff3c
     b64:	67657270 			; <UNDEFINED> instruction: 0x67657270
     b68:	61747300 	cmnvs	r4, r0, lsl #6
     b6c:	41006574 	tstmi	r0, r4, ror r5
     b70:	52324250 	eorspl	r4, r2, #80, 4
     b74:	00525453 	subseq	r5, r2, r3, asr r4
     b78:	70706d74 	rsbsvc	r6, r0, r4, ror sp
     b7c:	66006572 			; <UNDEFINED> instruction: 0x66006572
     b80:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     b84:	6f6c6e55 	svcvs	0x006c6e55
     b88:	67006b63 	strvs	r6, [r0, -r3, ror #22]
     b8c:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
     b90:	45687361 	strbmi	r7, [r8, #-865]!	; 0x361
     b94:	4200646e 	andmi	r6, r0, #1845493760	; 0x6e000000
     b98:	00524146 	subseq	r4, r2, r6, asr #2
     b9c:	49564e72 	ldmdbmi	r6, {r1, r4, r5, r6, r9, sl, fp, lr}^
     ba0:	766e0043 	strbtvc	r0, [lr], -r3, asr #32
     ba4:	69446369 	stmdbvs	r4, {r0, r3, r5, r6, r8, r9, sp, lr}^
     ba8:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     bac:	746e4965 	strbtvc	r4, [lr], #-2405	; 0x965
     bb0:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
     bb4:	00737470 	rsbseq	r7, r3, r0, ror r4
     bb8:	756c6176 	strbvc	r6, [ip, #-374]!	; 0x176
     bbc:	54560065 	ldrbpl	r0, [r6], #-101	; 0x65
     bc0:	6a00524f 	bvs	15504 <__Stack_Size+0x15104>
     bc4:	41706d75 	cmnmi	r0, r5, ror sp
     bc8:	00726464 	rsbseq	r6, r2, r4, ror #8
     bcc:	5f434352 	svcpl	0x00434352
     bd0:	53676552 	cmnpl	r7, #343932928	; 0x14800000
     bd4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     bd8:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
     bdc:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     be0:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     be4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     be8:	43490074 	movtmi	r0, #36980	; 0x9074
     bec:	74005253 	strvc	r5, [r0], #-595	; 0x253
     bf0:	616d706d 	cmnvs	sp, sp, rrx
     bf4:	41006b73 	tstmi	r0, r3, ror fp
     bf8:	4e454248 	cdpmi	2, 4, cr4, cr5, cr8, {2}
     bfc:	49410052 	stmdbmi	r1, {r1, r4, r6}^
     c00:	00524352 	subseq	r4, r2, r2, asr r3
     c04:	41464d4d 	cmpmi	r6, sp, asr #26
     c08:	686c0052 	stmdavs	ip!, {r1, r4, r6}^
     c0c:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
     c10:	616c6600 	cmnvs	ip, r0, lsl #12
     c14:	6f4c6873 	svcvs	0x004c6873
     c18:	70006b63 	andvc	r6, r0, r3, ror #22
     c1c:	725f7277 	subsvc	r7, pc, #1879048199	; 0x70000007
     c20:	6d5f6765 	ldclvs	7, cr6, [pc, #-404]	; a94 <__Stack_Size+0x694>
     c24:	43007061 	movwmi	r7, #97	; 0x61
     c28:	00525346 	subseq	r5, r2, r6, asr #6
     c2c:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
     c30:	726f7700 	rsbvc	r7, pc, #0, 14
     c34:	43490064 	movtmi	r0, #36964	; 0x9064
     c38:	41005245 	tstmi	r0, r5, asr #4
     c3c:	52314250 	eorspl	r4, r1, #80, 4
     c40:	00525453 	subseq	r5, r2, r3, asr r4
     c44:	5f706b62 	svcpl	0x00706b62
     c48:	5f676572 	svcpl	0x00676572
     c4c:	0070616d 	rsbseq	r6, r0, sp, ror #2
     c50:	49555043 	ldmdbmi	r5, {r0, r1, r6, ip, lr}^
     c54:	53720044 	cmnpl	r2, #68	; 0x44
     c58:	52004243 	andpl	r4, r0, #805306372	; 0x30000004
     c5c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     c60:	30444556 	subcc	r4, r4, r6, asr r5
     c64:	53464400 	movtpl	r4, #25600	; 0x6400
     c68:	45520052 	ldrbmi	r0, [r2, #-82]	; 0x52
     c6c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     c70:	00324445 	eorseq	r4, r2, r5, asr #8
     c74:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     c78:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     c7c:	45520033 	ldrbmi	r0, [r2, #-51]	; 0x33
     c80:	56524553 			; <UNDEFINED> instruction: 0x56524553
     c84:	00344445 	eorseq	r4, r4, r5, asr #8
     c88:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     c8c:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     c90:	45520035 	ldrbmi	r0, [r2, #-53]	; 0x35
     c94:	56524553 			; <UNDEFINED> instruction: 0x56524553
     c98:	00364445 	eorseq	r4, r6, r5, asr #8
     c9c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     ca0:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     ca4:	48530037 	ldmdami	r3, {r0, r1, r2, r4, r5}^
     ca8:	00525343 	subseq	r5, r2, r3, asr #6
     cac:	52455349 	subpl	r5, r5, #603979777	; 0x24000001
     cb0:	61745300 	cmnvs	r4, r0, lsl #6
     cb4:	70557472 	subsvc	r7, r5, r2, ror r4
     cb8:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     cbc:	00726574 	rsbseq	r6, r2, r4, ror r5
     cc0:	30315244 	eorscc	r5, r1, r4, asr #4
     cc4:	42504100 	subsmi	r4, r0, #0, 2
     cc8:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
     ccc:	616c6600 	cmnvs	ip, r0, lsl #12
     cd0:	74655367 	strbtvc	r5, [r5], #-871	; 0x367
     cd4:	53455200 	movtpl	r5, #20992	; 0x5200
     cd8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     cdc:	75003144 	strvc	r3, [r0, #-324]	; 0x144
     ce0:	614d7273 	hvcvs	55075	; 0xd723
     ce4:	41006e69 	tstmi	r0, r9, ror #28
     ce8:	00525346 	subseq	r5, r2, r6, asr #6
     cec:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     cf0:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     cf4:	61680039 	cmnvs	r8, r9, lsr r0
     cf8:	61776472 	cmnvs	r7, r2, ror r4
     cfc:	632e6572 	teqvs	lr, #478150656	; 0x1c800000
     d00:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     d04:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     d08:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     d0c:	50410066 	subpl	r0, r1, r6, rrx
     d10:	4e453142 	dvfmism	f3, f5, f2
     d14:	6c660052 	stclvs	0, cr0, [r6], #-328	; 0xfffffeb8
     d18:	57687361 	strbpl	r7, [r8, -r1, ror #6]!
     d1c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
     d20:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
     d24:	616c6600 	cmnvs	ip, r0, lsl #12
     d28:	69536873 	ldmdbvs	r3, {r0, r1, r4, r5, r6, fp, sp, lr}^
     d2c:	5300657a 	movwpl	r6, #1402	; 0x57a
     d30:	00525048 	subseq	r5, r2, r8, asr #32
     d34:	43435452 	movtmi	r5, #13394	; 0x3452
     d38:	61620052 	qdsubvs	r0, r2, r2
     d3c:	66006b6e 	strvs	r6, [r0], -lr, ror #22
     d40:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     d44:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
     d48:	6e756600 	cdpvs	6, 7, cr6, cr5, cr0, {0}
     d4c:	72745063 	rsbsvc	r5, r4, #99	; 0x63
     d50:	72737500 	rsbsvc	r7, r3, #0, 10
     d54:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
     d58:	53455200 	movtpl	r5, #20992	; 0x5200
     d5c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     d60:	66003844 	strvs	r3, [r0], -r4, asr #16
     d64:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     d68:	73617245 	cmnvc	r1, #1342177284	; 0x50000004
     d6c:	67615065 	strbvs	r5, [r1, -r5, rrx]!
     d70:	6b620065 	blvs	1880f0c <__Stack_Size+0x1880b0c>
     d74:	57303170 			; <UNDEFINED> instruction: 0x57303170
     d78:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
     d7c:	43444200 	movtmi	r4, #16896	; 0x4200
     d80:	6d740052 	ldclvs	0, cr0, [r4, #-328]!	; 0xfffffeb8
     d84:	69727070 	ldmdbvs	r2!, {r4, r5, r6, ip, sp, lr}^
     d88:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     d8c:	68680079 	stmdavs	r8!, {r0, r3, r4, r5, r6}^
     d90:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
     d94:	45535200 	ldrbmi	r5, [r3, #-512]	; 0x200
     d98:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     d9c:	46430031 			; <UNDEFINED> instruction: 0x46430031
     da0:	76005247 	strvc	r5, [r0], -r7, asr #4
     da4:	32336375 	eorscc	r6, r3, #-738197503	; 0xd4000001
     da8:	42435300 	submi	r5, r3, #0, 6
     dac:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     db0:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     db4:	53464800 	movtpl	r4, #26624	; 0x6800
     db8:	53690052 	cmnpl	r9, #82	; 0x52
     dbc:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     dc0:	65720067 	ldrbvs	r0, [r2, #-103]!	; 0x67
     dc4:	75427663 	strbvc	r7, [r2, #-1635]	; 0x663
     dc8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     dcc:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     dd0:	5f00632e 	svcpl	0x0000632e
     dd4:	544f4c50 	strbpl	r4, [pc], #-3152	; ddc <__Stack_Size+0x9dc>
     dd8:	55464400 	strbpl	r4, [r6, #-1024]	; 0x400
     ddc:	4c50555f 	cfldr64mi	mvdx5, [r0], {95}	; 0x5f
     de0:	5f44414f 	svcpl	0x0044414f
     de4:	53414c46 	movtpl	r4, #7238	; 0x1c46
     de8:	58305f48 	ldmdapl	r0!, {r3, r6, r8, r9, sl, fp, ip, lr}
     dec:	35303038 	ldrcc	r3, [r0, #-56]!	; 0x38
     df0:	00303030 	eorseq	r3, r0, r0, lsr r0
     df4:	5546445f 	strbpl	r4, [r6, #-1119]	; 0x45f
     df8:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     dfc:	75007375 	strvc	r7, [r0, #-885]	; 0x375
     e00:	41726573 	cmnmi	r2, r3, ror r5
     e04:	64417070 	strbvs	r7, [r1], #-112	; 0x70
     e08:	62007264 	andvs	r7, r0, #100, 4	; 0x40000006
     e0c:	6c6f5077 	stclvs	0, cr5, [pc], #-476	; c38 <__Stack_Size+0x838>
     e10:	6d69546c 	cfstrdvs	mvd5, [r9, #-432]!	; 0xfffffe50
     e14:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
     e18:	77620030 			; <UNDEFINED> instruction: 0x77620030
     e1c:	6c6c6f50 	stclvs	15, cr6, [ip], #-320	; 0xfffffec0
     e20:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
     e24:	3174756f 	cmncc	r4, pc, ror #10
     e28:	50776200 	rsbspl	r6, r7, r0, lsl #4
     e2c:	546c6c6f 	strbtpl	r6, [ip], #-3183	; 0xc6f
     e30:	6f656d69 	svcvs	0x00656d69
     e34:	00327475 	eorseq	r7, r2, r5, ror r4
     e38:	5f554644 	svcpl	0x00554644
     e3c:	4f4c5055 	svcmi	0x004c5055
     e40:	4e5f4441 	cdpmi	4, 5, cr4, cr15, cr1, {2}
     e44:	00454e4f 	subeq	r4, r5, pc, asr #28
     e48:	43756664 	cmnmi	r5, #100, 12	; 0x6400000
     e4c:	5579706f 	ldrbpl	r7, [r9, #-111]!	; 0x6f
     e50:	414f4c50 	cmpmi	pc, r0, asr ip	; <UNPREDICTABLE>
     e54:	73750044 	cmnvc	r5, #68	; 0x44
     e58:	70557265 	subsvc	r7, r5, r5, ror #4
     e5c:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
     e60:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     e64:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     e68:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
     e6c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     e70:	6f547265 	svcvs	0x00547265
     e74:	63657845 	cmnvs	r5, #4521984	; 0x450000
     e78:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     e7c:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
     e80:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     e84:	63007375 	movwvs	r7, #885	; 0x375
     e88:	5f65646f 	svcpl	0x0065646f
     e8c:	79706f63 	ldmdbvc	r0!, {r0, r1, r5, r6, r8, r9, sl, fp, sp, lr}^
     e90:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     e94:	6664006b 	strbtvs	r0, [r4], -fp, rrx
     e98:	706f4375 	rsbvc	r4, pc, r5, ror r3	; <UNPREDICTABLE>
     e9c:	61745379 	cmnvs	r4, r9, ror r3
     ea0:	64006574 	strvs	r6, [r0], #-1396	; 0x574
     ea4:	6f437566 	svcvs	0x00437566
     ea8:	4e447970 	mcrmi	9, 2, r7, cr4, cr0, {3}
     eac:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
     eb0:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     eb4:	61647055 	qdsubvs	r7, r5, r4
     eb8:	79426574 	stmdbvc	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
     ebc:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
     ec0:	0074756f 	rsbseq	r7, r4, pc, ror #10
     ec4:	5f554644 	svcpl	0x00554644
     ec8:	4f4c5055 	svcmi	0x004c5055
     ecc:	465f4441 	ldrbmi	r4, [pc], -r1, asr #8
     ed0:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     ed4:	3858305f 	ldmdacc	r8, {r0, r1, r2, r3, r4, r6, ip, sp}^
     ed8:	30323030 	eorscc	r3, r2, r0, lsr r0
     edc:	6e003030 	mcrvs	0, 0, r3, cr0, cr0, {1}
     ee0:	74537765 	ldrbvc	r7, [r3], #-1893	; 0x765
     ee4:	00657461 	rsbeq	r7, r5, r1, ror #8
     ee8:	55756664 	ldrbpl	r6, [r5, #-1636]!	; 0x664
     eec:	616f6c70 	smcvs	63168	; 0xf6c0
     ef0:	70795464 	rsbsvc	r5, r9, r4, ror #8
     ef4:	745f7365 	ldrbvc	r7, [pc], #-869	; efc <__Stack_Size+0xafc>
     ef8:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     efc:	53707041 	cmnpl	r0, #65	; 0x41
     f00:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     f04:	70750073 	rsbsvc	r0, r5, r3, ror r0
     f08:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
     f0c:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     f10:	6e654c6b 	cdpvs	12, 6, cr4, cr5, cr11, {3}
     f14:	69687400 	stmdbvs	r8!, {sl, ip, sp, lr}^
     f18:	6f6c4273 	svcvs	0x006c4273
     f1c:	654c6b63 	strbvs	r6, [ip, #-2915]	; 0xb63
     f20:	7375006e 	cmnvc	r5, #110	; 0x6e
     f24:	69467265 	stmdbvs	r6, {r0, r2, r5, r6, r9, ip, sp, lr}^
     f28:	61776d72 	cmnvs	r7, r2, ror sp
     f2c:	654c6572 	strbvs	r6, [ip, #-1394]	; 0x572
     f30:	6664006e 	strbtvs	r0, [r4], -lr, rrx
     f34:	73754275 	cmnvc	r5, #1342177287	; 0x50000007
     f38:	53620079 	cmnpl	r2, #121	; 0x79
     f3c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     f40:	6e656c00 	cdpvs	12, 6, cr6, cr5, cr0, {0}
     f44:	00687467 	rsbeq	r7, r8, r7, ror #8
     f48:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     f4c:	61745374 	cmnvs	r4, r4, ror r3
     f50:	44006574 	strmi	r6, [r0], #-1396	; 0x574
     f54:	555f5546 	ldrbpl	r5, [pc, #-1350]	; a16 <__Stack_Size+0x616>
     f58:	414f4c50 	cmpmi	pc, r0, asr ip	; <UNPREDICTABLE>
     f5c:	41525f44 	cmpmi	r2, r4, asr #30
     f60:	4542004d 	strbmi	r0, [r2, #-77]	; 0x4d
     f64:	4e4e4947 	cdpmi	9, 4, cr4, cr14, cr7, {2}
     f68:	00474e49 	subeq	r4, r7, r9, asr #28
     f6c:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     f70:	63617053 	cmnvs	r1, #83	; 0x53
     f74:	73750065 	cmnvc	r5, #101	; 0x65
     f78:	70417265 	subvc	r7, r1, r5, ror #4
     f7c:	646e4570 	strbtvs	r4, [lr], #-1392	; 0x570
     f80:	74536200 	ldrbvc	r6, [r3], #-512	; 0x200
     f84:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     f88:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     f8c:	53746553 	cmnpl	r4, #348127232	; 0x14c00000
     f90:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     f94:	44494d00 	strbmi	r4, [r9], #-3328	; 0xd00
     f98:	00454c44 	subeq	r4, r5, r4, asr #24
     f9c:	47756664 	ldrbmi	r6, [r5, -r4, ror #12]!
     fa0:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465
     fa4:	00657461 	rsbeq	r7, r5, r1, ror #8
     fa8:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     fac:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     fb0:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     fb4:	47007265 	strmi	r7, [r0, -r5, ror #4]
     fb8:	78547465 	ldmdavc	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
     fbc:	6c617453 	cfstrdvs	mvd7, [r1], #-332	; 0xfffffeb4
     fc0:	6174536c 	cmnvs	r4, ip, ror #6
     fc4:	00737574 	rsbseq	r7, r3, r4, ror r5
     fc8:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
     fcc:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
     fd0:	31667542 	cmncc	r6, r2, asr #10
     fd4:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
     fd8:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
     fdc:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
     fe0:	696c6156 	stmdbvs	ip!, {r1, r2, r4, r6, r8, sp, lr}^
     fe4:	65530064 	ldrbvs	r0, [r3, #-100]	; 0x64
     fe8:	756f4474 	strbvc	r4, [pc, #-1140]!	; b7c <__Stack_Size+0x77c>
     fec:	42656c42 	rsbmi	r6, r5, #16896	; 0x4200
     ff0:	45666675 	strbmi	r6, [r6, #-1653]!	; 0x675
     ff4:	61745350 	cmnvs	r4, r0, asr r3
     ff8:	45006c6c 	strmi	r6, [r0, #-3180]	; 0xc6c
     ffc:	42445f50 	submi	r5, r4, #80, 30	; 0x140
    1000:	4f5f4655 	svcmi	0x005f4655
    1004:	47005455 	smlsdmi	r0, r5, r4, r5
    1008:	50457465 	subpl	r7, r5, r5, ror #8
    100c:	74537852 	ldrbvc	r7, [r3], #-2130	; 0x852
    1010:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1014:	676f5400 	strbvs	r5, [pc, -r0, lsl #8]!
    1018:	44656c67 	strbtmi	r6, [r5], #-3175	; 0xc67
    101c:	5f474f54 	svcpl	0x00474f54
    1020:	47005854 	smlsdmi	r0, r4, r8, r5
    1024:	50457465 	subpl	r7, r5, r5, ror #8
    1028:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    102c:	00737365 	rsbseq	r7, r3, r5, ror #6
    1030:	5f50455f 	svcpl	0x0050455f
    1034:	46554244 	ldrbmi	r4, [r5], -r4, asr #4
    1038:	5249445f 	subpl	r4, r9, #1593835520	; 0x5f000000
    103c:	64416200 	strbvs	r6, [r1], #-512	; 0x200
    1040:	53007264 	movwpl	r7, #612	; 0x264
    1044:	53497465 	movtpl	r7, #37989	; 0x9465
    1048:	77005254 	smlsdvc	r0, r4, r2, r5
    104c:	6f6c424e 	svcvs	0x006c424e
    1050:	00736b63 	rsbseq	r6, r3, r3, ror #22
    1054:	61656c43 	cmnvs	r5, r3, asr #24
    1058:	4f544472 	svcmi	0x00544472
    105c:	58525f47 	ldmdapl	r2, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    1060:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1064:	52544e43 	subspl	r4, r4, #1072	; 0x430
    1068:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    106c:	74537852 	ldrbvc	r7, [r3], #-2130	; 0x852
    1070:	536c6c61 	cmnpl	ip, #24832	; 0x6100
    1074:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1078:	65470073 	strbvs	r0, [r7, #-115]	; 0x73
    107c:	44414474 	strbmi	r4, [r1], #-1140	; 0x474
    1080:	77005244 	strvc	r5, [r0, -r4, asr #4]
    1084:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1088:	65530074 	ldrbvs	r0, [r3, #-116]	; 0x74
    108c:	41504574 	cmpmi	r0, r4, ror r5
    1090:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    1094:	53007373 	movwpl	r7, #883	; 0x373
    1098:	50457465 	subpl	r7, r5, r5, ror #8
    109c:	74537852 	ldrbvc	r7, [r3], #-2130	; 0x852
    10a0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    10a4:	676f5400 	strbvs	r5, [pc, -r0, lsl #8]!
    10a8:	44656c67 	strbtmi	r6, [r5], #-3175	; 0xc67
    10ac:	5f474f54 	svcpl	0x00474f54
    10b0:	53005852 	movwpl	r5, #2130	; 0x852
    10b4:	50457465 	subpl	r7, r5, r5, ror #8
    10b8:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    10bc:	41666675 	smcmi	26213	; 0x6665
    10c0:	00726464 	rsbseq	r6, r2, r4, ror #8
    10c4:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    10c8:	70795450 	rsbsvc	r5, r9, r0, asr r4
    10cc:	50450065 	subpl	r0, r5, r5, rrx
    10d0:	5542445f 	strbpl	r4, [r2, #-1119]	; 0x45f
    10d4:	4e495f46 	cdpmi	15, 4, cr5, cr9, cr6, {2}
    10d8:	65527700 	ldrbvs	r7, [r2, #-1792]	; 0x700
    10dc:	65470074 	strbvs	r0, [r7, #-116]	; 0x74
    10e0:	52504574 	subspl	r4, r0, #116, 10	; 0x1d000000
    10e4:	64644178 	strbtvs	r4, [r4], #-376	; 0x178
    10e8:	65530072 	ldrbvs	r0, [r3, #-114]	; 0x72
    10ec:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    10f0:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    10f4:	64413066 	strbvs	r3, [r1], #-102	; 0x66
    10f8:	47007264 	strmi	r7, [r0, -r4, ror #4]
    10fc:	50457465 	subpl	r7, r5, r5, ror #8
    1100:	74537854 	ldrbvc	r7, [r3], #-2132	; 0x854
    1104:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1108:	69446200 	stmdbvs	r4, {r9, sp, lr}^
    110c:	54770072 	ldrbtpl	r0, [r7], #-114	; 0x72
    1110:	00657079 	rsbeq	r7, r5, r9, ror r0
    1114:	5f627375 	svcpl	0x00627375
    1118:	2f62696c 	svccs	0x0062696c
    111c:	5f627375 	svcpl	0x00627375
    1120:	73676572 	cmnvc	r7, #478150656	; 0x1c800000
    1124:	4500632e 	strmi	r6, [r0, #-814]	; 0x32e
    1128:	42445f50 	submi	r5, r4, #80, 30	; 0x140
    112c:	455f4655 	ldrbmi	r4, [pc, #-1621]	; adf <__Stack_Size+0x6df>
    1130:	47005252 	smlsdmi	r0, r2, r2, r5
    1134:	50457465 	subpl	r7, r5, r5, ror #8
    1138:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    113c:	69446675 	stmdbvs	r4, {r0, r2, r4, r5, r6, r9, sl, sp, lr}^
    1140:	42770072 	rsbsmi	r0, r7, #114	; 0x72
    1144:	41316675 	teqmi	r1, r5, ror r6
    1148:	00726464 	rsbseq	r6, r2, r4, ror #8
    114c:	57775377 			; <UNDEFINED> instruction: 0x57775377
    1150:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1154:	6f445045 	svcvs	0x00445045
    1158:	656c6275 	strbvs	r6, [ip, #-629]!	; 0x275
    115c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1160:	576f5400 	strbpl	r5, [pc, -r0, lsl #8]!
    1164:	0064726f 	rsbeq	r7, r4, pc, ror #4
    1168:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    116c:	41785450 	cmnmi	r8, r0, asr r4
    1170:	00726464 	rsbseq	r6, r2, r4, ror #8
    1174:	61656c43 	cmnvs	r5, r3, asr #24
    1178:	44504572 	ldrbmi	r4, [r0], #-1394	; 0x572
    117c:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    1180:	66754265 	ldrbtvs	r4, [r5], -r5, ror #4
    1184:	65470066 	strbvs	r0, [r7, #-102]	; 0x66
    1188:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    118c:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    1190:	64413166 	strbvs	r3, [r1], #-358	; 0x166
    1194:	47007264 	strmi	r7, [r0, -r4, ror #4]
    1198:	50457465 	subpl	r7, r5, r5, ror #8
    119c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    11a0:	656c4300 	strbvs	r4, [ip, #-768]!	; 0x300
    11a4:	50457261 	subpl	r7, r5, r1, ror #4
    11a8:	5254435f 	subspl	r4, r4, #2080374785	; 0x7c000001
    11ac:	0058525f 	subseq	r5, r8, pc, asr r2
    11b0:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    11b4:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    11b8:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    11bc:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    11c0:	65530074 	ldrbvs	r0, [r3, #-116]	; 0x74
    11c4:	5f504574 	svcpl	0x00504574
    11c8:	444e494b 	strbmi	r4, [lr], #-2379	; 0x94b
    11cc:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    11d0:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    11d4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    11d8:	6c430074 	mcrrvs	0, 7, r0, r3, cr4
    11dc:	45726165 	ldrbmi	r6, [r2, #-357]!	; 0x165
    11e0:	494b5f50 	stmdbmi	fp, {r4, r6, r8, r9, sl, fp, ip, lr}^
    11e4:	4700444e 	strmi	r4, [r0, -lr, asr #8]
    11e8:	54427465 	strbpl	r7, [r2], #-1125	; 0x465
    11ec:	454c4241 	strbmi	r4, [ip, #-577]	; 0x241
    11f0:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    11f4:	52545349 	subspl	r5, r4, #603979777	; 0x24000001
    11f8:	65527700 	ldrbvs	r7, [r2, #-1792]	; 0x700
    11fc:	6c615667 	stclvs	6, cr5, [r1], #-412	; 0xfffffe64
    1200:	47006575 	smlsdxmi	r0, r5, r5, r6
    1204:	4e457465 	cdpmi	4, 4, cr7, cr5, cr5, {3}
    1208:	494f5044 	stmdbmi	pc, {r2, r6, ip, lr}^	; <UNPREDICTABLE>
    120c:	7700544e 	strvc	r5, [r0, -lr, asr #8]
    1210:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1214:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1218:	62445045 	subvs	r5, r4, #69	; 0x45
    121c:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    1220:	756f4330 	strbvc	r4, [pc, #-816]!	; ef8 <__Stack_Size+0xaf8>
    1224:	5300746e 	movwpl	r7, #1134	; 0x46e
    1228:	41447465 	cmpmi	r4, r5, ror #8
    122c:	00524444 	subseq	r4, r2, r4, asr #8
    1230:	52776470 	rsbspl	r6, r7, #112, 8	; 0x70000000
    1234:	42006765 	andmi	r6, r0, #26476544	; 0x1940000
    1238:	53657479 	cmnpl	r5, #2030043136	; 0x79000000
    123c:	00706177 	rsbseq	r6, r0, r7, ror r1
    1240:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1244:	756f4350 	strbvc	r4, [pc, #-848]!	; efc <__Stack_Size+0xafc>
    1248:	7852746e 	ldmdavc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    124c:	00676552 	rsbeq	r6, r7, r2, asr r5
    1250:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1254:	43785250 	cmnmi	r8, #80, 4
    1258:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    125c:	65546200 	ldrbvs	r6, [r4, #-512]	; 0x200
    1260:	5300706d 	movwpl	r7, #109	; 0x6d
    1264:	4e437465 	cdpmi	4, 4, cr7, cr3, cr5, {3}
    1268:	53005254 	movwpl	r5, #596	; 0x254
    126c:	54427465 	strbpl	r7, [r2], #-1125	; 0x465
    1270:	454c4241 	strbmi	r4, [ip, #-577]	; 0x241
    1274:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1278:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    127c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1280:	6c430074 	mcrrvs	0, 7, r0, r3, cr4
    1284:	45726165 	ldrbmi	r6, [r2, #-357]!	; 0x165
    1288:	54435f50 	strbpl	r5, [r3], #-3920	; 0xf50
    128c:	58545f52 	ldmdapl	r4, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    1290:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1294:	62445045 	subvs	r5, r4, #69	; 0x45
    1298:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    129c:	756f4331 	strbvc	r4, [pc, #-817]!	; f73 <__Stack_Size+0xb73>
    12a0:	5300746e 	movwpl	r7, #1134	; 0x46e
    12a4:	50457465 	subpl	r7, r5, r5, ror #8
    12a8:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    12ac:	43306675 	teqmi	r0, #122683392	; 0x7500000
    12b0:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    12b4:	75427700 	strbvc	r7, [r2, #-1792]	; 0x700
    12b8:	64413066 	strbvs	r3, [r1], #-102	; 0x66
    12bc:	53007264 	movwpl	r7, #612	; 0x264
    12c0:	535f7465 	cmppl	pc, #1694498816	; 0x65000000
    12c4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    12c8:	754f5f73 	strbvc	r5, [pc, #-3955]	; 35d <_Minimum_Stack_Size+0x25d>
    12cc:	65470074 	strbvs	r0, [r7, #-116]	; 0x74
    12d0:	524e4674 	subpl	r4, lr, #116, 12	; 0x7400000
    12d4:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    12d8:	62445045 	subvs	r5, r4, #69	; 0x45
    12dc:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    12e0:	64644130 	strbtvs	r4, [r4], #-304	; 0x130
    12e4:	6e450072 	mcrvs	0, 2, r0, cr5, cr2, {3}
    12e8:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    12ec:	445f746e 	ldrbmi	r7, [pc], #-1134	; 12f4 <__Stack_Size+0xef4>
    12f0:	5f474f54 	svcpl	0x00474f54
    12f4:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    12f8:	47007375 	smlsdxmi	r0, r5, r3, r7
    12fc:	50457465 	subpl	r7, r5, r5, ror #8
    1300:	64417854 	strbvs	r7, [r1], #-2132	; 0x854
    1304:	43007264 	movwmi	r7, #612	; 0x264
    1308:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    130c:	474f5444 	strbmi	r5, [pc, -r4, asr #8]
    1310:	0058545f 	subseq	r5, r8, pc, asr r4
    1314:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1318:	53785450 	cmnpl	r8, #80, 8	; 0x50000000
    131c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1320:	45620073 	strbmi	r0, [r2, #-115]!	; 0x73
    1324:	6d754e70 	ldclvs	14, cr4, [r5, #-448]!	; 0xfffffe40
    1328:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    132c:	50444e45 	subpl	r4, r4, r5, asr #28
    1330:	544e494f 	strbpl	r4, [lr], #-2383	; 0x94f
    1334:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1338:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
    133c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1340:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1344:	62445045 	subvs	r5, r4, #69	; 0x45
    1348:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    134c:	756f4331 	strbvc	r4, [pc, #-817]!	; 1023 <__Stack_Size+0xc23>
    1350:	4300746e 	movwmi	r7, #1134	; 0x46e
    1354:	485f5254 	ldmdami	pc, {r2, r4, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    1358:	65530050 	ldrbvs	r0, [r3, #-80]	; 0x50
    135c:	30707574 	rsbscc	r7, r0, r4, ror r5
    1360:	6f72505f 	svcvs	0x0072505f
    1364:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    1368:	76615300 	strbtvc	r5, [r1], -r0, lsl #6
    136c:	74535265 	ldrbvc	r5, [r3], #-613	; 0x265
    1370:	00657461 	rsbeq	r7, r5, r1, ror #8
    1374:	65766153 	ldrbvs	r6, [r6, #-339]!	; 0x153
    1378:	61745354 	cmnvs	r4, r4, asr r3
    137c:	77006574 	smlsdxvc	r0, r4, r5, r6
    1380:	61565045 	cmpvs	r6, r5, asr #32
    1384:	7375006c 	cmnvc	r5, #108	; 0x6c
    1388:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    138c:	73752f62 	cmnvc	r5, #392	; 0x188
    1390:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
    1394:	00632e74 	rsbeq	r2, r3, r4, ror lr
    1398:	5f306e49 	svcpl	0x00306e49
    139c:	636f7250 	cmnvs	pc, #80, 4
    13a0:	00737365 	rsbseq	r7, r3, r5, ror #6
    13a4:	3074754f 	rsbscc	r7, r4, pc, asr #10
    13a8:	6f72505f 	svcvs	0x0072505f
    13ac:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    13b0:	69504500 	ldmdbvs	r0, {r8, sl, lr}^
    13b4:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    13b8:	76615300 	strbtvc	r5, [r1], -r0, lsl #6
    13bc:	61745365 	cmnvs	r4, r5, ror #6
    13c0:	75006574 	strvc	r6, [r0, #-1396]	; 0x574
    13c4:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    13c8:	752f6269 	strvc	r6, [pc, #-617]!	; 1167 <__Stack_Size+0xd67>
    13cc:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    13d0:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
    13d4:	55700063 	ldrbpl	r0, [r0, #-99]!	; 0x63
    13d8:	5f726573 	svcpl	0x00726573
    13dc:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    13e0:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    13e4:	7165525f 	cmnvc	r5, pc, asr r2
    13e8:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
    13ec:	65440073 	strbvs	r0, [r4, #-115]	; 0x73
    13f0:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    13f4:	666e495f 			; <UNDEFINED> instruction: 0x666e495f
    13f8:	7375006f 	cmnvc	r5, #111	; 0x6f
    13fc:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1400:	73752f62 	cmnvc	r5, #392	; 0x188
    1404:	6f635f62 	svcvs	0x00635f62
    1408:	632e6572 	teqvs	lr, #478150656	; 0x1c800000
    140c:	444e4500 	strbmi	r4, [lr], #-1280	; 0x500
    1410:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
    1414:	54535f54 	ldrbpl	r5, [r3], #-3924	; 0xf54
    1418:	004c4c41 	subeq	r4, ip, r1, asr #24
    141c:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0x552
    1420:	5000746c 	andpl	r7, r0, ip, ror #8
    1424:	3074736f 	rsbscc	r7, r4, pc, ror #6
    1428:	6f72505f 	svcvs	0x0072505f
    142c:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    1430:	74614400 	strbtvc	r4, [r1], #-1024	; 0x400
    1434:	66754261 	ldrbtvs	r4, [r5], -r1, ror #4
    1438:	00726566 	rsbseq	r6, r2, r6, ror #10
    143c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
    1440:	64657672 	strbtvs	r7, [r5], #-1650	; 0x672
    1444:	61745300 	cmnvs	r4, r0, lsl #6
    1448:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    144c:	65535f64 	ldrbvs	r5, [r3, #-3940]	; 0xf64
    1450:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    1454:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
    1458:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    145c:	44006e6f 	strmi	r6, [r0], #-3695	; 0xe6f
    1460:	53617461 	cmnpl	r1, #1627389952	; 0x61000000
    1464:	65676174 	strbvs	r6, [r7, #-372]!	; 0x174
    1468:	44006e49 	strmi	r6, [r0], #-3657	; 0xe49
    146c:	43495645 	movtmi	r5, #38469	; 0x9645
    1470:	45525f45 	ldrbmi	r5, [r2, #-3909]	; 0xf45
    1474:	45544f4d 	ldrbmi	r4, [r4, #-3917]	; 0xf4d
    1478:	4b41575f 	blmi	10571fc <__Stack_Size+0x1056dfc>
    147c:	00505545 	subseq	r5, r0, r5, asr #10
    1480:	4c415453 	cfstrdmi	mvd5, [r1], {83}	; 0x53
    1484:	0044454c 	subeq	r4, r4, ip, asr #10
    1488:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    148c:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    1490:	69786500 	ldmdbvs	r8!, {r8, sl, sp, lr}^
    1494:	6f4e5f74 	svcvs	0x004e5f74
    1498:	61746144 	cmnvs	r4, r4, asr #2
    149c:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    14a0:	00307075 	eorseq	r7, r0, r5, ror r0
    14a4:	6c615677 	stclvs	6, cr5, [r1], #-476	; 0xfffffe24
    14a8:	00316575 	eorseq	r6, r1, r5, ror r5
    14ac:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
    14b0:	445f4543 	ldrbmi	r4, [pc], #-1347	; 14b8 <__Stack_Size+0x10b8>
    14b4:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    14b8:	4f545049 	svcmi	0x00545049
    14bc:	54530052 	ldrbpl	r0, [r3], #-82	; 0x52
    14c0:	474e4952 	smlsldmi	r4, lr, r2, r9
    14c4:	5345445f 	movtpl	r4, #21599	; 0x545f
    14c8:	50495243 	subpl	r5, r9, r3, asr #4
    14cc:	00524f54 	subseq	r4, r2, r4, asr pc
    14d0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    14d4:	4d506f54 	ldclmi	15, cr6, [r0, #-336]	; 0xfffffeb0
    14d8:	66754241 	ldrbtvs	r4, [r5], -r1, asr #4
    14dc:	43726566 	cmnmi	r2, #427819008	; 0x19800000
    14e0:	0079706f 	rsbseq	r7, r9, pc, rrx
    14e4:	65766173 	ldrbvs	r6, [r6, #-371]!	; 0x173
    14e8:	654c725f 	strbvs	r7, [ip, #-607]	; 0x25f
    14ec:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    14f0:	53414c00 	movtpl	r4, #7168	; 0x1c00
    14f4:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    14f8:	5441445f 	strbpl	r4, [r1], #-1119	; 0x45f
    14fc:	4f4e0041 	svcmi	0x004e0041
    1500:	72505f50 	subsvc	r5, r0, #80, 30	; 0x140
    1504:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    1508:	74530073 	ldrbvc	r0, [r3], #-115	; 0x73
    150c:	61646e61 	cmnvs	r4, r1, ror #28
    1510:	535f6472 	cmppl	pc, #1912602624	; 0x72000000
    1514:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
    1518:	66726574 			; <UNDEFINED> instruction: 0x66726574
    151c:	00656361 	rsbeq	r6, r5, r1, ror #6
    1520:	65707845 	ldrbvs	r7, [r0, #-2117]!	; 0x845
    1524:	535f7463 	cmppl	pc, #1660944384	; 0x63000000
    1528:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    152c:	754f5f73 	strbvc	r5, [pc, #-3955]	; 5c1 <__Stack_Size+0x1c1>
    1530:	41500074 	cmpmi	r0, r4, ror r0
    1534:	00455355 	subeq	r5, r5, r5, asr r3
    1538:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0x552
    153c:	4e747365 	cdpmi	3, 7, cr7, cr4, cr5, {3}
    1540:	4547006f 	strbmi	r0, [r7, #-111]	; 0x6f
    1544:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    1548:	46524554 			; <UNDEFINED> instruction: 0x46524554
    154c:	00454341 	subeq	r4, r5, r1, asr #6
    1550:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    1554:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    1558:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    155c:	50646e45 	rsbpl	r6, r4, r5, asr #28
    1560:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
    1564:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
    1568:	00657275 	rsbeq	r7, r5, r5, ror r2
    156c:	5f544547 	svcpl	0x00544547
    1570:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
    1574:	53005355 	movwpl	r5, #853	; 0x355
    1578:	465f5445 	ldrbmi	r5, [pc], -r5, asr #8
    157c:	55544145 	ldrbpl	r4, [r4, #-325]	; 0x145
    1580:	44004552 	strmi	r4, [r0], #-1362	; 0x552
    1584:	5f617461 	svcpl	0x00617461
    1588:	5f6c754d 	svcpl	0x006c754d
    158c:	5078614d 	rsbspl	r6, r8, sp, asr #2
    1590:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
    1594:	7a695374 	bvc	1a5636c <__Stack_Size+0x1a55f6c>
    1598:	44700065 	ldrbtmi	r0, [r0], #-101	; 0x65
    159c:	53007665 	movwpl	r7, #1637	; 0x665
    15a0:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
    15a4:	5f647261 	svcpl	0x00647261
    15a8:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
    15ac:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    15b0:	61654665 	cmnvs	r5, r5, ror #12
    15b4:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    15b8:	65447000 	strbvs	r7, [r4, #-0]
    15bc:	53006373 	movwpl	r6, #883	; 0x373
    15c0:	48434e59 	stmdami	r3, {r0, r3, r4, r6, r9, sl, fp, lr}^
    15c4:	4152465f 	cmpmi	r2, pc, asr r6
    15c8:	5300454d 	movwpl	r4, #1357	; 0x54d
    15cc:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
    15d0:	5f647261 	svcpl	0x00647261
    15d4:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    15d8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    15dc:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
    15e0:	54455300 	strbpl	r5, [r5], #-768	; 0x300
    15e4:	5345445f 	movtpl	r4, #21599	; 0x545f
    15e8:	50495243 	subpl	r5, r9, r3, asr #4
    15ec:	00524f54 	subseq	r4, r2, r4, asr pc
    15f0:	5f544553 	svcpl	0x00544553
    15f4:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xe49
    15f8:	43414652 	movtmi	r4, #5714	; 0x1652
    15fc:	465f0045 	ldrbmi	r0, [pc], -r5, asr #32
    1600:	55544145 	ldrbpl	r4, [r4, #-325]	; 0x145
    1604:	535f4552 	cmppl	pc, #343932928	; 0x14800000
    1608:	43454c45 	movtmi	r4, #23621	; 0x5c45
    160c:	00524f54 	subseq	r4, r2, r4, asr pc
    1610:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    1614:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    1618:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    161c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1620:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
    1624:	6f697461 	svcvs	0x00697461
    1628:	7453006e 	ldrbvc	r0, [r3], #-110	; 0x6e
    162c:	61646e61 	cmnvs	r4, r1, ror #28
    1630:	435f6472 	cmpmi	pc, #1912602624	; 0x72000000
    1634:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1638:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
    163c:	00657275 	rsbeq	r7, r5, r5, ror r2
    1640:	5f544547 	svcpl	0x00544547
    1644:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    1648:	52554749 	subspl	r4, r5, #19136512	; 0x1240000
    164c:	4f495441 	svcmi	0x00495441
    1650:	435f004e 	cmpmi	pc, #78	; 0x4e
    1654:	52544e4f 	subspl	r4, r4, #1264	; 0x4f0
    1658:	535f4c4f 	cmppl	pc, #20224	; 0x4f00
    165c:	45544154 	ldrbmi	r4, [r4, #-340]	; 0x154
    1660:	45445f00 	strbmi	r5, [r4, #-3840]	; 0xf00
    1664:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    1668:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    166c:	5059545f 	subspl	r5, r9, pc, asr r4
    1670:	45530045 	ldrbmi	r0, [r3, #-69]	; 0x45
    1674:	4e495454 	mcrmi	4, 2, r5, cr9, cr4, {2}
    1678:	50555f47 	subspl	r5, r5, r7, asr #30
    167c:	414d5000 	mrsmi	r5, (UNDEF: 77)
    1680:	73556f54 	cmpvc	r5, #84, 30	; 0x150
    1684:	75427265 	strbvc	r7, [r2, #-613]	; 0x265
    1688:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    168c:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
    1690:	54455300 	strbpl	r5, [r5], #-768	; 0x300
    1694:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
    1698:	55474946 	strbpl	r4, [r7, #-2374]	; 0x946
    169c:	49544152 	ldmdbmi	r4, {r1, r4, r6, r8, lr}^
    16a0:	57004e4f 	strpl	r4, [r0, -pc, asr #28]
    16a4:	5f544941 	svcpl	0x00544941
    16a8:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
    16ac:	4f5f5355 	svcmi	0x005f5355
    16b0:	49005455 	stmdbmi	r0, {r0, r2, r4, r6, sl, ip, lr}
    16b4:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    16b8:	45434146 	strbmi	r4, [r3, #-326]	; 0x146
    16bc:	5345445f 	movtpl	r4, #21599	; 0x545f
    16c0:	50495243 	subpl	r5, r9, r3, asr #4
    16c4:	00524f54 	subseq	r4, r2, r4, asr pc
    16c8:	65766173 	ldrbvs	r6, [r6, #-371]!	; 0x173
    16cc:	654c775f 	strbvs	r7, [ip, #-1887]	; 0x75f
    16d0:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    16d4:	544f5400 	strbpl	r5, [pc], #-1024	; 16dc <__Stack_Size+0x12dc>
    16d8:	735f4c41 	cmpvc	pc, #16640	; 0x4100
    16dc:	55514552 	ldrbpl	r4, [r1, #-1362]	; 0x552
    16e0:	00545345 	subseq	r5, r4, r5, asr #6
    16e4:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    16e8:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    16ec:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    16f0:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    16f4:	45007375 	strmi	r7, [r0, #-885]	; 0x375
    16f8:	4f50444e 	svcmi	0x0050444e
    16fc:	5f544e49 	svcpl	0x00544e49
    1700:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    1704:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
    1708:	4300524f 	movwmi	r5, #591	; 0x24f
    170c:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
    1710:	45445f47 	strbmi	r5, [r4, #-3911]	; 0xf47
    1714:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    1718:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    171c:	75427000 	strbvc	r7, [r2, #-0]
    1720:	45700066 	ldrbmi	r0, [r0, #-102]!	; 0x66
    1724:	666e6950 			; <UNDEFINED> instruction: 0x666e6950
    1728:	4553006f 	ldrbmi	r0, [r3, #-111]	; 0x6f
    172c:	44415f54 	strbmi	r5, [r1], #-3924	; 0xf54
    1730:	53455244 	movtpl	r5, #21060	; 0x5244
    1734:	65520053 	ldrbvs	r0, [r2, #-83]	; 0x53
    1738:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0x16c
    173c:	6e455f64 	cdpvs	15, 4, cr5, cr5, cr4, {3}
    1740:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    1744:	5300746e 	movwpl	r7, #1134	; 0x46e
    1748:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    174c:	666e4973 			; <UNDEFINED> instruction: 0x666e4973
    1750:	4977006f 	ldmdbmi	r7!, {r0, r1, r2, r3, r5, r6}^
    1754:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    1758:	45470030 	strbmi	r0, [r7, #-48]	; 0x30
    175c:	45445f54 	strbmi	r5, [r4, #-3924]	; 0xf54
    1760:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    1764:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    1768:	74614400 	strbtvc	r4, [r1], #-1024	; 0x400
    176c:	61745361 	cmnvs	r4, r1, ror #6
    1770:	754f6567 	strbvc	r6, [pc, #-1383]	; 1211 <__Stack_Size+0xe11>
    1774:	41570074 	cmpmi	r7, r4, ror r0
    1778:	535f5449 	cmppl	pc, #1224736768	; 0x49000000
    177c:	50555445 	subspl	r5, r5, r5, asr #8
    1780:	71655200 	cmnvc	r5, r0, lsl #4
    1784:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
    1788:	006f4e5f 	rsbeq	r4, pc, pc, asr lr	; <UNPREDICTABLE>
    178c:	54494157 	strbpl	r4, [r9], #-343	; 0x157
    1790:	4154535f 	cmpmi	r4, pc, asr r3
    1794:	5f535554 	svcpl	0x00535554
    1798:	43004e49 	movwmi	r4, #3657	; 0xe49
    179c:	5241454c 	subpl	r4, r1, #76, 10	; 0x13000000
    17a0:	4145465f 	cmpmi	r5, pc, asr r6
    17a4:	45525554 	ldrbmi	r5, [r2, #-1364]	; 0x554
    17a8:	53414c00 	movtpl	r4, #7168	; 0x1c00
    17ac:	554f5f54 	strbpl	r5, [pc, #-3924]	; 860 <__Stack_Size+0x460>
    17b0:	41445f54 	cmpmi	r4, r4, asr pc
    17b4:	75004154 	strvc	r4, [r0, #-340]	; 0x154
    17b8:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    17bc:	752f6269 	strvc	r6, [pc, #-617]!	; 155b <__Stack_Size+0x115b>
    17c0:	6d5f6273 	lfmvs	f6, 2, [pc, #-460]	; 15fc <__Stack_Size+0x11fc>
    17c4:	632e6d65 	teqvs	lr, #6464	; 0x1940
    17c8:	424e7700 	submi	r7, lr, #0, 14
    17cc:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    17d0:	55627000 	strbpl	r7, [r2, #-0]!
    17d4:	75427273 	strbvc	r7, [r2, #-627]	; 0x273
    17d8:	65740066 	ldrbvs	r0, [r4, #-102]!	; 0x66
    17dc:	0031706d 	eorseq	r7, r1, sp, rrx
    17e0:	706d6574 	rsbvc	r6, sp, r4, ror r5
    17e4:	50770032 	rsbspl	r0, r7, r2, lsr r0
    17e8:	7542414d 	strbvc	r4, [r2, #-333]	; 0x14d
    17ec:	64644166 	strbtvs	r4, [r4], #-358	; 0x166
    17f0:	64700072 	ldrbtvs	r0, [r0], #-114	; 0x72
    17f4:	6c615677 	stclvs	6, cr5, [r1], #-476	; 0xfffffe24
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	08000142 	stmdaeq	r0, {r1, r6, r8}
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	0800014a 	stmdaeq	r0, {r1, r3, r6, r8}
       8:	4a500001 	bmi	1400014 <__Stack_Size+0x13ffc14>
       c:	4c080001 	stcmi	0, cr0, [r8], {1}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	04080001 	streq	r0, [r8], #-1
      14:	5001f300 	andpl	pc, r1, r0, lsl #6
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      1c:	00000000 	andeq	r0, r0, r0
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	0001bc00 	andeq	fp, r1, r0, lsl #24
      24:	0001c008 	andeq	ip, r1, r8
      28:	71000508 	tstvc	r0, r8, lsl #10
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	9f274000 	svcls	0x00274000
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	080001c0 	stmdaeq	r0, {r6, r7, r8}
      34:	080001c4 	stmdaeq	r0, {r2, r6, r7, r8}
      38:	00710007 	rsbseq	r0, r1, r7

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	27402740 	strbcs	r2, [r0, -r0, asr #14]

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	0001c49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	0001c608 	andeq	ip, r1, r8, lsl #12
      48:	73000808 	movwvc	r0, #2056	; 0x808
      4c:	27400600 	strbcs	r0, [r0, -r0, lsl #12]

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	c69f2740 	ldrgt	r2, [pc], r0, asr #14
      54:	e5080001 	str	r0, [r8, #-1]
      58:	0b080001 	bleq	200064 <__Stack_Size+0x1ffc64>
      5c:	5c000c00 	stcpl	12, cr0, [r0], {-0}
      60:	40064000 	andmi	r4, r6, r0
      64:	9f274027 	svcls	0x00274027
	...
      70:	08000228 	stmdaeq	r0, {r3, r5, r9}
      74:	0800023f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r9}
      78:	3f500001 	svccc	0x00500001
      7c:	88080002 	stmdahi	r8, {r1}
      80:	04080002 	streq	r0, [r8], #-2
      84:	5001f300 	andpl	pc, r1, r0, lsl #6
      88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      8c:	00000000 	andeq	r0, r0, r0
      90:	00022800 	andeq	r2, r2, r0, lsl #16
      94:	00025208 	andeq	r5, r2, r8, lsl #4
      98:	30000208 	andcc	r0, r0, r8, lsl #4
      9c:	00025a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
      a0:	00026008 	andeq	r6, r2, r8
      a4:	30000208 	andcc	r0, r0, r8, lsl #4
      a8:	0002609f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
      ac:	00026b08 	andeq	r6, r2, r8, lsl #22
      b0:	53000108 	movwpl	r0, #264	; 0x108
      b4:	08000270 	stmdaeq	r0, {r4, r5, r6, r9}
      b8:	08000288 	stmdaeq	r0, {r3, r7, r9}
      bc:	9f300002 	svcls	0x00300002
	...
      c8:	08000288 	stmdaeq	r0, {r3, r7, r9}
      cc:	0800028d 	stmdaeq	r0, {r0, r2, r3, r7, r9}
      d0:	8d500001 	ldclhi	0, cr0, [r0, #-4]
      d4:	94080002 	strls	r0, [r8], #-2
      d8:	04080002 	streq	r0, [r8], #-2
      dc:	5001f300 	andpl	pc, r1, r0, lsl #6
      e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      e4:	00000000 	andeq	r0, r0, r0
      e8:	00029400 	andeq	r9, r2, r0, lsl #8
      ec:	00029908 	andeq	r9, r2, r8, lsl #18
      f0:	50000108 	andpl	r0, r0, r8, lsl #2
      f4:	08000299 	stmdaeq	r0, {r0, r3, r4, r7, r9}
      f8:	080002a0 	stmdaeq	r0, {r5, r7, r9}
      fc:	01f30004 	mvnseq	r0, r4
     100:	00009f50 	andeq	r9, r0, r0, asr pc
     104:	00000000 	andeq	r0, r0, r0
     108:	02a00000 	adceq	r0, r0, #0
     10c:	02b30800 	adcseq	r0, r3, #0, 16
     110:	00010800 	andeq	r0, r1, r0, lsl #16
     114:	0002b350 	andeq	fp, r2, r0, asr r3
     118:	0002b408 	andeq	fp, r2, r8, lsl #8
     11c:	f3000408 	vshl.u8	d0, d8, d0
     120:	b49f5001 	ldrlt	r5, [pc], #1	; 128 <_Minimum_Stack_Size+0x28>
     124:	b6080002 	strlt	r0, [r8], -r2
     128:	01080002 	tsteq	r8, r2
     12c:	02b65000 	adcseq	r5, r6, #0
     130:	02c00800 	sbceq	r0, r0, #0, 16
     134:	00040800 	andeq	r0, r4, r0, lsl #16
     138:	9f5001f3 	svcls	0x005001f3
	...
     144:	080002c0 	stmdaeq	r0, {r6, r7, r9}
     148:	080002c5 	stmdaeq	r0, {r0, r2, r6, r7, r9}
     14c:	c5500001 	ldrbgt	r0, [r0, #-1]
     150:	cc080002 	stcgt	0, cr0, [r8], {2}
     154:	04080002 	streq	r0, [r8], #-2
     158:	5001f300 	andpl	pc, r1, r0, lsl #6
     15c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     160:	00000000 	andeq	r0, r0, r0
     164:	0002cc00 	andeq	ip, r2, r0, lsl #24
     168:	0002df08 	andeq	sp, r2, r8, lsl #30
     16c:	50000108 	andpl	r0, r0, r8, lsl #2
     170:	080002df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r9}
     174:	080002ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9}
     178:	01f30004 	mvnseq	r0, r4
     17c:	02ea9f50 	rsceq	r9, sl, #80, 30	; 0x140
     180:	02ec0800 	rsceq	r0, ip, #0, 16
     184:	00010800 	andeq	r0, r1, r0, lsl #16
     188:	0002ec50 	andeq	lr, r2, r0, asr ip
     18c:	0002f408 	andeq	pc, r2, r8, lsl #8
     190:	f3000408 	vshl.u8	d0, d8, d0
     194:	009f5001 	addseq	r5, pc, r1
     198:	00000000 	andeq	r0, r0, r0
     19c:	dc000000 	stcle	0, cr0, [r0], {-0}
     1a0:	ea080002 	b	2001b0 <__Stack_Size+0x1ffdb0>
     1a4:	04080002 	streq	r0, [r8], #-2
     1a8:	5001f300 	andpl	pc, r1, r0, lsl #6
     1ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     1b0:	00000000 	andeq	r0, r0, r0
     1b4:	00037600 	andeq	r7, r3, r0, lsl #12
     1b8:	00037a08 	andeq	r7, r3, r8, lsl #20
     1bc:	72000508 	andvc	r0, r0, #8, 10	; 0x2000000
     1c0:	9f213c00 	svcls	0x00213c00
	...
     1cc:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
     1d0:	080003c1 	stmdaeq	r0, {r0, r6, r7, r8, r9}
     1d4:	c1500001 	cmpgt	r0, r1
     1d8:	c4080003 	strgt	r0, [r8], #-3
     1dc:	04080003 	streq	r0, [r8], #-3
     1e0:	5001f300 	andpl	pc, r1, r0, lsl #6
     1e4:	0003c49f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
     1e8:	0003c708 	andeq	ip, r3, r8, lsl #14
     1ec:	50000108 	andpl	r0, r0, r8, lsl #2
     1f0:	080003c7 	stmdaeq	r0, {r0, r1, r2, r6, r7, r8, r9}
     1f4:	080003cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9}
     1f8:	01f30004 	mvnseq	r0, r4
     1fc:	03cc9f50 	biceq	r9, ip, #80, 30	; 0x140
     200:	041a0800 	ldreq	r0, [sl], #-2048	; 0x800
     204:	00010800 	andeq	r0, r1, r0, lsl #16
     208:	00041a50 	andeq	r1, r4, r0, asr sl
     20c:	00042808 	andeq	r2, r4, r8, lsl #16
     210:	f3000408 	vshl.u8	d0, d8, d0
     214:	009f5001 	addseq	r5, pc, r1
     218:	00000000 	andeq	r0, r0, r0
     21c:	ea000000 	b	224 <_Minimum_Stack_Size+0x124>
     220:	ee080003 	cdp	0, 0, cr0, cr8, cr3, {0}
     224:	05080003 	streq	r0, [r8, #-3]
     228:	40007200 	andmi	r7, r0, r0, lsl #4
     22c:	040e9f21 	streq	r9, [lr], #-3873	; 0xf21
     230:	04140800 	ldreq	r0, [r4], #-2048	; 0x800
     234:	00060800 	andeq	r0, r6, r0, lsl #16
     238:	ef090071 	svc	0x00090071
     23c:	00009f1a 	andeq	r9, r0, sl, lsl pc
     240:	00000000 	andeq	r0, r0, r0
     244:	05ac0000 	streq	r0, [ip, #0]!
     248:	05f80800 	ldrbeq	r0, [r8, #2048]!	; 0x800
     24c:	00020800 	andeq	r0, r2, r0, lsl #16
     250:	00009f30 	andeq	r9, r0, r0, lsr pc
     254:	00000000 	andeq	r0, r0, r0
     258:	05ac0000 	streq	r0, [ip, #0]!
     25c:	05ce0800 	strbeq	r0, [lr, #2048]	; 0x800
     260:	00020800 	andeq	r0, r2, r0, lsl #16
     264:	05ce9f30 	strbeq	r9, [lr, #3888]	; 0xf30
     268:	05ea0800 	strbeq	r0, [sl, #2048]!	; 0x800
     26c:	00020800 	andeq	r0, r2, r0, lsl #16
     270:	05f89f31 	ldrbeq	r9, [r8, #3889]!	; 0xf31
     274:	06240800 	strteq	r0, [r4], -r0, lsl #16
     278:	00020800 	andeq	r0, r2, r0, lsl #16
     27c:	00009f31 	andeq	r9, r0, r1, lsr pc
     280:	00000000 	andeq	r0, r0, r0
     284:	06240000 	strteq	r0, [r4], -r0
     288:	062a0800 	strteq	r0, [sl], -r0, lsl #16
     28c:	00010800 	andeq	r0, r1, r0, lsl #16
     290:	00062a51 	andeq	r2, r6, r1, asr sl
     294:	00063a08 	andeq	r3, r6, r8, lsl #20
     298:	f3000408 	vshl.u8	d0, d8, d0
     29c:	009f5101 	addseq	r5, pc, r1, lsl #2
     2a0:	00000000 	andeq	r0, r0, r0
     2a4:	24000000 	strcs	r0, [r0], #-0
     2a8:	24080006 	strcs	r0, [r8], #-6
     2ac:	01080006 	tsteq	r8, r6
     2b0:	06245200 	strteq	r5, [r4], -r0, lsl #4
     2b4:	062e0800 	strteq	r0, [lr], -r0, lsl #16
     2b8:	00070800 	andeq	r0, r7, r0, lsl #16
     2bc:	24480072 	strbcs	r0, [r8], #-114	; 0x72
     2c0:	2e9f2930 	mrccs	9, 4, r2, cr15, cr0, {1}
     2c4:	3a080006 	bcc	2002e4 <__Stack_Size+0x1ffee4>
     2c8:	08080006 	stmdaeq	r8, {r1, r2}
     2cc:	5201f300 	andpl	pc, r1, #0, 6
     2d0:	29302448 	ldmdbcs	r0!, {r3, r6, sl, sp}
     2d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     2e4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     2f0:	01f30004 	mvnseq	r0, r4
     2f4:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     304:	00010000 	andeq	r0, r1, r0
     308:	00000051 	andeq	r0, r0, r1, asr r0
     30c:	00000000 	andeq	r0, r0, r0
     310:	f3000400 	vshl.u8	d0, d0, d0
     314:	009f5101 	addseq	r5, pc, r1, lsl #2
     318:	00000000 	andeq	r0, r0, r0
     31c:	3c000000 	stccc	0, cr0, [r0], {-0}
     320:	40080006 	andmi	r0, r8, r6
     324:	02080006 	andeq	r0, r8, #6
     328:	409f3000 	addsmi	r3, pc, r0
     32c:	44080006 	strmi	r0, [r8], #-6
     330:	08080006 	stmdaeq	r8, {r1, r2}
     334:	08007000 	stmdaeq	r0, {ip, sp, lr}
     338:	2e301a80 	vaddcs.f32	s2, s1, s0
     33c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     34c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     358:	00580001 	subseq	r0, r8, r1
	...
     368:	01000000 	mrseq	r0, (UNDEF: 0)
     36c:	00005100 	andeq	r5, r0, r0, lsl #2
     370:	00000000 	andeq	r0, r0, r0
     374:	00040000 	andeq	r0, r4, r0
     378:	9f5101f3 	svcls	0x005101f3
	...
     38c:	00520001 	subseq	r0, r2, r1
     390:	00000000 	andeq	r0, r0, r0
     394:	04000000 	streq	r0, [r0], #-0
     398:	5201f300 	andpl	pc, r1, #0, 6
     39c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     3a0:	00000000 	andeq	r0, r0, r0
     3a4:	74000300 	strvc	r0, [r0], #-768	; 0x300
     3a8:	00009f7f 	andeq	r9, r0, pc, ror pc
     3ac:	00000000 	andeq	r0, r0, r0
     3b0:	00030000 	andeq	r0, r3, r0
     3b4:	009f0074 	addseq	r0, pc, r4, ror r0	; <UNPREDICTABLE>
     3b8:	00000000 	andeq	r0, r0, r0
     3bc:	03000000 	movweq	r0, #0
     3c0:	9f7f7400 	svcls	0x007f7400
	...
     3d4:	00530001 	subseq	r0, r3, r1
     3d8:	00000000 	andeq	r0, r0, r0
     3dc:	01000000 	mrseq	r0, (UNDEF: 0)
     3e0:	00005600 	andeq	r5, r0, r0, lsl #12
	...
     3f0:	00010000 	andeq	r0, r1, r0
     3f4:	00000055 	andeq	r0, r0, r5, asr r0
     3f8:	00000000 	andeq	r0, r0, r0
     3fc:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     408:	00550001 	subseq	r0, r5, r1
     40c:	00000000 	andeq	r0, r0, r0
     410:	16000000 	strne	r0, [r0], -r0
     414:	1c080007 	stcne	0, cr0, [r8], {7}
     418:	01080007 	tsteq	r8, r7
     41c:	00005200 	andeq	r5, r0, r0, lsl #4
     420:	00000000 	andeq	r0, r0, r0
     424:	07280000 	streq	r0, [r8, -r0]!
     428:	072c0800 	streq	r0, [ip, -r0, lsl #16]!
     42c:	00010800 	andeq	r0, r1, r0, lsl #16
     430:	00072c50 	andeq	r2, r7, r0, asr ip
     434:	00073c08 	andeq	r3, r7, r8, lsl #24
     438:	f3000408 	vshl.u8	d0, d8, d0
     43c:	009f5001 	addseq	r5, pc, r1
     440:	00000000 	andeq	r0, r0, r0
     444:	2a000000 	bcs	44c <__Stack_Size+0x4c>
     448:	32080007 	andcc	r0, r8, #7
     44c:	01080007 	tsteq	r8, r7
     450:	00005300 	andeq	r5, r0, r0, lsl #6
     454:	00000000 	andeq	r0, r0, r0
     458:	073c0000 	ldreq	r0, [ip, -r0]!
     45c:	074b0800 	strbeq	r0, [fp, -r0, lsl #16]
     460:	00010800 	andeq	r0, r1, r0, lsl #16
     464:	00074b50 	andeq	r4, r7, r0, asr fp
     468:	00075408 	andeq	r5, r7, r8, lsl #8
     46c:	f3000408 	vshl.u8	d0, d8, d0
     470:	009f5001 	addseq	r5, pc, r1
     474:	00000000 	andeq	r0, r0, r0
     478:	42000000 	andmi	r0, r0, #0
     47c:	4b080007 	blmi	2004a0 <__Stack_Size+0x2000a0>
     480:	01080007 	tsteq	r8, r7
     484:	00005300 	andeq	r5, r0, r0, lsl #6
     488:	00000000 	andeq	r0, r0, r0
     48c:	07800000 	streq	r0, [r0, r0]
     490:	07ae0800 	streq	r0, [lr, r0, lsl #16]!
     494:	00020800 	andeq	r0, r2, r0, lsl #16
     498:	07ae9f30 			; <UNDEFINED> instruction: 0x07ae9f30
     49c:	07bc0800 	ldreq	r0, [ip, r0, lsl #16]!
     4a0:	00010800 	andeq	r0, r1, r0, lsl #16
     4a4:	00000054 	andeq	r0, r0, r4, asr r0
     4a8:	00000000 	andeq	r0, r0, r0
     4ac:	0007c800 	andeq	ip, r7, r0, lsl #16
     4b0:	0007d608 	andeq	sp, r7, r8, lsl #12
     4b4:	30000208 	andcc	r0, r0, r8, lsl #4
     4b8:	0007d69f 	muleq	r7, pc, r6	; <UNPREDICTABLE>
     4bc:	0007de08 	andeq	sp, r7, r8, lsl #28
     4c0:	53000108 	movwpl	r0, #264	; 0x108
     4c4:	080007de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl}
     4c8:	080007ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, sl}
     4cc:	ea520001 	b	14804d8 <__Stack_Size+0x14800d8>
     4d0:	0c080007 	stceq	0, cr0, [r8], {7}
     4d4:	01080008 	tsteq	r8, r8
     4d8:	080c5400 	stmdaeq	ip, {sl, ip, lr}
     4dc:	080e0800 	stmdaeq	lr, {fp}
     4e0:	00060800 	andeq	r0, r6, r0, lsl #16
     4e4:	00720074 	rsbseq	r0, r2, r4, ror r0
     4e8:	080e9f1a 	stmdaeq	lr, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
     4ec:	08100800 	ldmdaeq	r0, {fp}
     4f0:	00010800 	andeq	r0, r1, r0, lsl #16
     4f4:	00081052 	andeq	r1, r8, r2, asr r0
     4f8:	00081408 	andeq	r1, r8, r8, lsl #8
     4fc:	08001208 	stmdaeq	r0, {r3, r9, ip}
     500:	940070ff 	strls	r7, [r0], #-255	; 0xff
     504:	081a3301 	ldmdaeq	sl, {r0, r8, r9, ip, sp}
     508:	24331aff 	ldrtcs	r1, [r3], #-2815	; 0xaff
     50c:	1a007424 	bne	1d5a4 <__Stack_Size+0x1d1a4>
     510:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     514:	00000000 	andeq	r0, r0, r0
     518:	0007c800 	andeq	ip, r7, r0, lsl #16
     51c:	00080808 	andeq	r0, r8, r8, lsl #16
     520:	30000208 	andcc	r0, r0, r8, lsl #4
     524:	0008089f 	muleq	r8, pc, r8	; <UNPREDICTABLE>
     528:	00080c08 	andeq	r0, r8, r8, lsl #24
     52c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     530:	0800080c 	stmdaeq	r0, {r2, r3, fp}
     534:	08000810 	stmdaeq	r0, {r4, fp}
     538:	10510001 	subsne	r0, r1, r1
     53c:	18080008 	stmdane	r8, {r3}
     540:	01080008 	tsteq	r8, r8
     544:	00005200 	andeq	r5, r0, r0, lsl #4
     548:	00000000 	andeq	r0, r0, r0
     54c:	07c80000 	strbeq	r0, [r8, r0]
     550:	08080800 	stmdaeq	r8, {fp}
     554:	00020800 	andeq	r0, r2, r0, lsl #16
     558:	08089f30 	stmdaeq	r8, {r4, r5, r8, r9, sl, fp, ip, pc}
     55c:	080e0800 	stmdaeq	lr, {fp}
     560:	00010800 	andeq	r0, r1, r0, lsl #16
     564:	00080e52 	andeq	r0, r8, r2, asr lr
     568:	00081408 	andeq	r1, r8, r8, lsl #8
     56c:	08000f08 	stmdaeq	r0, {r3, r8, r9, sl, fp}
     570:	940070ff 	strls	r7, [r0], #-255	; 0xff
     574:	081a3301 	ldmdaeq	sl, {r0, r8, r9, ip, sp}
     578:	24331aff 	ldrtcs	r1, [r3], #-2815	; 0xaff
     57c:	00009f24 	andeq	r9, r0, r4, lsr #30
     580:	00000000 	andeq	r0, r0, r0
     584:	07c80000 	strbeq	r0, [r8, r0]
     588:	07d60800 	ldrbeq	r0, [r6, r0, lsl #16]
     58c:	00020800 	andeq	r0, r2, r0, lsl #16
     590:	07d69f30 			; <UNDEFINED> instruction: 0x07d69f30
     594:	07da0800 	ldrbeq	r0, [sl, r0, lsl #16]
     598:	00050800 	andeq	r0, r5, r0, lsl #16
     59c:	1c007334 	stcne	3, cr7, [r0], {52}	; 0x34
     5a0:	0007da9f 	muleq	r7, pc, sl	; <UNPREDICTABLE>
     5a4:	0007de08 	andeq	sp, r7, r8, lsl #28
     5a8:	52000108 	andpl	r0, r0, #8, 2
     5ac:	080007de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl}
     5b0:	080007e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl}
     5b4:	73340005 	teqvc	r4, #5
     5b8:	009f1c00 	addseq	r1, pc, r0, lsl #24
     5bc:	00000000 	andeq	r0, r0, r0
     5c0:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     5c4:	d6080007 	strle	r0, [r8], -r7
     5c8:	02080007 	andeq	r0, r8, #7
     5cc:	d69f3f00 	ldrle	r3, [pc], r0, lsl #30
     5d0:	e2080007 	and	r0, r8, #7
     5d4:	05080007 	streq	r0, [r8, #-7]
     5d8:	00733f00 	rsbseq	r3, r3, r0, lsl #30
     5dc:	07e29f25 	strbeq	r9, [r2, r5, lsr #30]!
     5e0:	07e80800 	strbeq	r0, [r8, r0, lsl #16]!
     5e4:	00010800 	andeq	r0, r1, r0, lsl #16
     5e8:	00000054 	andeq	r0, r0, r4, asr r0
     5ec:	00000000 	andeq	r0, r0, r0
     5f0:	00085800 	andeq	r5, r8, r0, lsl #16
     5f4:	00086508 	andeq	r6, r8, r8, lsl #10
     5f8:	50000108 	andpl	r0, r0, r8, lsl #2
     5fc:	08000865 	stmdaeq	r0, {r0, r2, r5, r6, fp}
     600:	08000878 	stmdaeq	r0, {r3, r4, r5, r6, fp}
     604:	78540001 	ldmdavc	r4, {r0}^
     608:	7b080008 	blvc	200630 <__Stack_Size+0x200230>
     60c:	01080008 	tsteq	r8, r8
     610:	087b5000 	ldmdaeq	fp!, {ip, lr}^
     614:	08800800 	stmeq	r0, {fp}
     618:	00040800 	andeq	r0, r4, r0, lsl #16
     61c:	9f5001f3 	svcls	0x005001f3
	...
     628:	08000894 	stmdaeq	r0, {r2, r4, r7, fp}
     62c:	080008bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp}
     630:	bc500001 	mrrclt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     634:	c8080008 	stmdagt	r8, {r3}
     638:	04080008 	streq	r0, [r8], #-8
     63c:	5001f300 	andpl	pc, r1, r0, lsl #6
     640:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     644:	00000000 	andeq	r0, r0, r0
     648:	00089a00 	andeq	r9, r8, r0, lsl #20
     64c:	0008b808 	andeq	fp, r8, r8, lsl #16
     650:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
     654:	0008b89f 	muleq	r8, pc, r8	; <UNPREDICTABLE>
     658:	0008c808 	andeq	ip, r8, r8, lsl #16
     65c:	30000208 	andcc	r0, r0, r8, lsl #4
     660:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     670:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     67c:	00550001 	subseq	r0, r5, r1
     680:	00000000 	andeq	r0, r0, r0
     684:	04000000 	streq	r0, [r0], #-0
     688:	5001f300 	andpl	pc, r1, r0, lsl #6
     68c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     69c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     6a8:	01f30004 	mvnseq	r0, r4
     6ac:	00009f51 	andeq	r9, r0, r1, asr pc
     6b0:	00000000 	andeq	r0, r0, r0
     6b4:	00010000 	andeq	r0, r1, r0
     6b8:	00000054 	andeq	r0, r0, r4, asr r0
     6bc:	00000000 	andeq	r0, r0, r0
     6c0:	74000300 	strvc	r0, [r0], #-768	; 0x300
     6c4:	00009f01 	andeq	r9, r0, r1, lsl #30
     6c8:	00000000 	andeq	r0, r0, r0
     6cc:	00010000 	andeq	r0, r1, r0
     6d0:	00000054 	andeq	r0, r0, r4, asr r0
     6d4:	00000000 	andeq	r0, r0, r0
     6d8:	0008c800 	andeq	ip, r8, r0, lsl #16
     6dc:	00090208 	andeq	r0, r9, r8, lsl #4
     6e0:	50000108 	andpl	r0, r0, r8, lsl #2
     6e4:	08000902 	stmdaeq	r0, {r1, r8, fp}
     6e8:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
     6ec:	01f30004 	mvnseq	r0, r4
     6f0:	00009f50 	andeq	r9, r0, r0, asr pc
     6f4:	00000000 	andeq	r0, r0, r0
     6f8:	08d80000 	ldmeq	r8, {}^	; <UNPREDICTABLE>
     6fc:	08fe0800 	ldmeq	lr!, {fp}^
     700:	00010800 	andeq	r0, r1, r0, lsl #16
     704:	0008fe54 	andeq	pc, r8, r4, asr lr	; <UNPREDICTABLE>
     708:	00091408 	andeq	r1, r9, r8, lsl #8
     70c:	52000108 	andpl	r0, r0, #8, 2
	...
     718:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
     71c:	0800093e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, fp}
     720:	3e500001 	cdpcc	0, 5, cr0, cr0, cr1, {0}
     724:	42080009 	andmi	r0, r8, #9
     728:	01080009 	tsteq	r8, r9
     72c:	00005000 	andeq	r5, r0, r0
     730:	00000000 	andeq	r0, r0, r0
     734:	093e0000 	ldmdbeq	lr!, {}	; <UNPREDICTABLE>
     738:	09420800 	stmdbeq	r2, {fp}^
     73c:	00070800 	andeq	r0, r7, r0, lsl #16
     740:	3200703f 	andcc	r7, r0, #63	; 0x3f
     744:	469f2424 	ldrmi	r2, [pc], r4, lsr #8
     748:	48080009 	stmdami	r8, {r0, r3}
     74c:	01080009 	tsteq	r8, r9
     750:	09485000 	stmdbeq	r8, {ip, lr}^
     754:	094a0800 	stmdbeq	sl, {fp}^
     758:	00040800 	andeq	r0, r4, r0, lsl #16
     75c:	9f200070 	svcls	0x00200070
	...
     768:	080009dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp}
     76c:	080009e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp}
     770:	f4510001 			; <UNDEFINED> instruction: 0xf4510001
     774:	fc080009 	stc2	0, cr0, [r8], {9}
     778:	01080009 	tsteq	r8, r9
     77c:	0a085100 	beq	214b84 <__Stack_Size+0x214784>
     780:	0a140800 	beq	502788 <__Stack_Size+0x502388>
     784:	00010800 	andeq	r0, r1, r0, lsl #16
     788:	00000051 	andeq	r0, r0, r1, asr r0
     78c:	00000000 	andeq	r0, r0, r0
     790:	000a1400 	andeq	r1, sl, r0, lsl #8
     794:	000a2208 	andeq	r2, sl, r8, lsl #4
     798:	50000108 	andpl	r0, r0, r8, lsl #2
     79c:	08000a22 	stmdaeq	r0, {r1, r5, r9, fp}
     7a0:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
     7a4:	01f30004 	mvnseq	r0, r4
     7a8:	00009f50 	andeq	r9, r0, r0, asr pc
     7ac:	00000000 	andeq	r0, r0, r0
     7b0:	0a2c0000 	beq	b007b8 <__Stack_Size+0xb003b8>
     7b4:	0a3a0800 	beq	e827bc <__Stack_Size+0xe823bc>
     7b8:	00010800 	andeq	r0, r1, r0, lsl #16
     7bc:	000a3a50 	andeq	r3, sl, r0, asr sl
     7c0:	000a4408 	andeq	r4, sl, r8, lsl #8
     7c4:	f3000408 	vshl.u8	d0, d8, d0
     7c8:	009f5001 	addseq	r5, pc, r1
     7cc:	00000000 	andeq	r0, r0, r0
     7d0:	44000000 	strmi	r0, [r0], #-0
     7d4:	5c08000a 	stcpl	0, cr0, [r8], {10}
     7d8:	0108000a 	tsteq	r8, sl
     7dc:	0a5c5000 	beq	17147e4 <__Stack_Size+0x17143e4>
     7e0:	0a6c0800 	beq	1b027e8 <__Stack_Size+0x1b023e8>
     7e4:	00040800 	andeq	r0, r4, r0, lsl #16
     7e8:	9f5001f3 	svcls	0x005001f3
	...
     7f4:	08000a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp}
     7f8:	08000a88 	stmdaeq	r0, {r3, r7, r9, fp}
     7fc:	88500001 	ldmdahi	r0, {r0}^
     800:	a008000a 	andge	r0, r8, sl
     804:	0408000a 	streq	r0, [r8], #-10
     808:	5001f300 	andpl	pc, r1, r0, lsl #6
     80c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     810:	00000000 	andeq	r0, r0, r0
     814:	000ac000 	andeq	ip, sl, r0
     818:	000ac208 	andeq	ip, sl, r8, lsl #4
     81c:	30000208 	andcc	r0, r0, r8, lsl #4
     820:	000ac29f 	muleq	sl, pc, r2	; <UNPREDICTABLE>
     824:	000aea08 	andeq	lr, sl, r8, lsl #20
     828:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
     834:	08000b0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, fp}
     838:	08000b22 	stmdaeq	r0, {r1, r5, r8, r9, fp}
     83c:	56530001 	ldrbpl	r0, [r3], -r1
     840:	5c08000b 	stcpl	0, cr0, [r8], {11}
     844:	0108000b 	tsteq	r8, fp
     848:	0b9e5300 	bleq	fe795450 <BootRAM+0xd705bf1>
     84c:	0bba0800 	bleq	fee82854 <BootRAM+0xddf2ff5>
     850:	00010800 	andeq	r0, r1, r0, lsl #16
     854:	000bc253 	andeq	ip, fp, r3, asr r2
     858:	000bd408 	andeq	sp, fp, r8, lsl #8
     85c:	53000108 	movwpl	r0, #264	; 0x108
     860:	08000bde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, fp}
     864:	08000be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp}
     868:	0c530001 	mrrceq	0, 0, r0, r3, cr1
     86c:	1c08000c 	stcne	0, cr0, [r8], {12}
     870:	0108000c 	tsteq	r8, ip
     874:	0c225300 	stceq	3, cr5, [r2], #-0
     878:	0c360800 	ldceq	8, cr0, [r6], #-0
     87c:	00010800 	andeq	r0, r1, r0, lsl #16
     880:	000cae53 	andeq	sl, ip, r3, asr lr
     884:	000cb408 	andeq	fp, ip, r8, lsl #8
     888:	53000108 	movwpl	r0, #264	; 0x108
	...
     89c:	00500001 	subseq	r0, r0, r1
     8a0:	00000000 	andeq	r0, r0, r0
     8a4:	04000000 	streq	r0, [r0], #-0
     8a8:	5001f300 	andpl	pc, r1, r0, lsl #6
     8ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     8bc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     8c8:	01f30004 	mvnseq	r0, r4
     8cc:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     8dc:	00010000 	andeq	r0, r1, r0
     8e0:	00000050 	andeq	r0, r0, r0, asr r0
     8e4:	00000000 	andeq	r0, r0, r0
     8e8:	f3000400 	vshl.u8	d0, d0, d0
     8ec:	009f5001 	addseq	r5, pc, r1
	...
     8fc:	01000000 	mrseq	r0, (UNDEF: 0)
     900:	00005100 	andeq	r5, r0, r0, lsl #2
     904:	00000000 	andeq	r0, r0, r0
     908:	00040000 	andeq	r0, r4, r0
     90c:	9f5101f3 	svcls	0x005101f3
	...
     920:	00500001 	subseq	r0, r0, r1
     924:	00000000 	andeq	r0, r0, r0
     928:	04000000 	streq	r0, [r0], #-0
     92c:	5001f300 	andpl	pc, r1, r0, lsl #6
     930:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     934:	00000000 	andeq	r0, r0, r0
     938:	000d2800 	andeq	r2, sp, r0, lsl #16
     93c:	000d2a08 	andeq	r2, sp, r8, lsl #20
     940:	50000108 	andpl	r0, r0, r8, lsl #2
     944:	08000d2a 	stmdaeq	r0, {r1, r3, r5, r8, sl, fp}
     948:	08000d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp}
     94c:	01f30004 	mvnseq	r0, r4
     950:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     960:	00010000 	andeq	r0, r1, r0
     964:	00000050 	andeq	r0, r0, r0, asr r0
     968:	00000000 	andeq	r0, r0, r0
     96c:	f3000400 	vshl.u8	d0, d0, d0
     970:	009f5001 	addseq	r5, pc, r1
	...
     980:	01000000 	mrseq	r0, (UNDEF: 0)
     984:	00005000 	andeq	r5, r0, r0
     988:	00000000 	andeq	r0, r0, r0
     98c:	00040000 	andeq	r0, r4, r0
     990:	9f5001f3 	svcls	0x005001f3
	...
     9a4:	00500001 	subseq	r0, r0, r1
     9a8:	00000000 	andeq	r0, r0, r0
     9ac:	04000000 	streq	r0, [r0], #-0
     9b0:	5001f300 	andpl	pc, r1, r0, lsl #6
     9b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     9c4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     9d0:	01f30004 	mvnseq	r0, r4
     9d4:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     9e4:	00010000 	andeq	r0, r1, r0
     9e8:	00000050 	andeq	r0, r0, r0, asr r0
     9ec:	00000000 	andeq	r0, r0, r0
     9f0:	f3000400 	vshl.u8	d0, d0, d0
     9f4:	009f5001 	addseq	r5, pc, r1
	...
     a04:	06000000 	streq	r0, [r0], -r0
     a08:	08007300 	stmdaeq	r0, {r8, r9, ip, sp, lr}
     a0c:	009f2730 	addseq	r2, pc, r0, lsr r7	; <UNPREDICTABLE>
     a10:	00000000 	andeq	r0, r0, r0
     a14:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     a18:	08007300 	stmdaeq	r0, {r8, r9, ip, sp, lr}
     a1c:	30082730 	andcc	r2, r8, r0, lsr r7
     a20:	00009f27 	andeq	r9, r0, r7, lsr #30
     a24:	00000000 	andeq	r0, r0, r0
     a28:	0d520000 	ldcleq	0, cr0, [r2, #-0]
     a2c:	0d540800 	ldcleq	8, cr0, [r4, #-0]
     a30:	00010800 	andeq	r0, r1, r0, lsl #16
     a34:	000d5450 	andeq	r5, sp, r0, asr r4
     a38:	000d7008 	andeq	r7, sp, r8
     a3c:	f3000408 	vshl.u8	d0, d8, d0
     a40:	009f5001 	addseq	r5, pc, r1
     a44:	00000000 	andeq	r0, r0, r0
     a48:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     a4c:	6c08000d 	stcvs	0, cr0, [r8], {13}
     a50:	0708000d 	streq	r0, [r8, -sp]
     a54:	0a007300 	beq	1d65c <__Stack_Size+0x1d25c>
     a58:	9f273000 	svcls	0x00273000
     a5c:	08000d6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp}
     a60:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
     a64:	0073000b 	rsbseq	r0, r3, fp
     a68:	2730000a 	ldrcs	r0, [r0, -sl]!
     a6c:	2730000a 	ldrcs	r0, [r0, -sl]!
     a70:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     a80:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     a8c:	01f30004 	mvnseq	r0, r4
     a90:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     aa0:	00010000 	andeq	r0, r1, r0
     aa4:	00000050 	andeq	r0, r0, r0, asr r0
     aa8:	00000000 	andeq	r0, r0, r0
     aac:	f3000400 	vshl.u8	d0, d0, d0
     ab0:	009f5001 	addseq	r5, pc, r1
     ab4:	00000000 	andeq	r0, r0, r0
     ab8:	70000000 	andvc	r0, r0, r0
     abc:	7208000d 	andvc	r0, r8, #13
     ac0:	0108000d 	tsteq	r8, sp
     ac4:	0d725000 	ldcleq	0, cr5, [r2, #-0]
     ac8:	0d8c0800 	stceq	8, cr0, [ip]
     acc:	00040800 	andeq	r0, r4, r0, lsl #16
     ad0:	9f5001f3 	svcls	0x005001f3
	...
     ae4:	00500001 	subseq	r0, r0, r1
     ae8:	00000000 	andeq	r0, r0, r0
     aec:	04000000 	streq	r0, [r0], #-0
     af0:	5001f300 	andpl	pc, r1, r0, lsl #6
     af4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     b04:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     b10:	01f30004 	mvnseq	r0, r4
     b14:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     b24:	00010000 	andeq	r0, r1, r0
     b28:	00000050 	andeq	r0, r0, r0, asr r0
     b2c:	00000000 	andeq	r0, r0, r0
     b30:	f3000400 	vshl.u8	d0, d0, d0
     b34:	009f5001 	addseq	r5, pc, r1
	...
     b44:	01000000 	mrseq	r0, (UNDEF: 0)
     b48:	00005000 	andeq	r5, r0, r0
     b4c:	00000000 	andeq	r0, r0, r0
     b50:	00040000 	andeq	r0, r4, r0
     b54:	9f5001f3 	svcls	0x005001f3
	...
     b68:	00500001 	subseq	r0, r0, r1
     b6c:	00000000 	andeq	r0, r0, r0
     b70:	04000000 	streq	r0, [r0], #-0
     b74:	5001f300 	andpl	pc, r1, r0, lsl #6
     b78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     b88:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     b94:	01f30004 	mvnseq	r0, r4
     b98:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     ba8:	00010000 	andeq	r0, r1, r0
     bac:	00000050 	andeq	r0, r0, r0, asr r0
     bb0:	00000000 	andeq	r0, r0, r0
     bb4:	f3000400 	vshl.u8	d0, d0, d0
     bb8:	009f5001 	addseq	r5, pc, r1
	...
     bc8:	01000000 	mrseq	r0, (UNDEF: 0)
     bcc:	00005000 	andeq	r5, r0, r0
     bd0:	00000000 	andeq	r0, r0, r0
     bd4:	00040000 	andeq	r0, r4, r0
     bd8:	9f5001f3 	svcls	0x005001f3
	...
     bec:	00500001 	subseq	r0, r0, r1
     bf0:	00000000 	andeq	r0, r0, r0
     bf4:	04000000 	streq	r0, [r0], #-0
     bf8:	5001f300 	andpl	pc, r1, r0, lsl #6
     bfc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c00:	00000000 	andeq	r0, r0, r0
     c04:	000d8c00 	andeq	r8, sp, r0, lsl #24
     c08:	000d8e08 	andeq	r8, sp, r8, lsl #28
     c0c:	50000108 	andpl	r0, r0, r8, lsl #2
     c10:	08000d8e 	stmdaeq	r0, {r1, r2, r3, r7, r8, sl, fp}
     c14:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
     c18:	01f30004 	mvnseq	r0, r4
     c1c:	00009f50 	andeq	r9, r0, r0, asr pc
     c20:	00000000 	andeq	r0, r0, r0
     c24:	0dac0000 	stceq	0, cr0, [ip]
     c28:	0dae0800 	stceq	8, cr0, [lr]
     c2c:	00010800 	andeq	r0, r1, r0, lsl #16
     c30:	000dae50 	andeq	sl, sp, r0, asr lr
     c34:	000dcc08 	andeq	ip, sp, r8, lsl #24
     c38:	f3000408 	vshl.u8	d0, d8, d0
     c3c:	009f5001 	addseq	r5, pc, r1
	...
     c4c:	01000000 	mrseq	r0, (UNDEF: 0)
     c50:	00005000 	andeq	r5, r0, r0
     c54:	00000000 	andeq	r0, r0, r0
     c58:	00040000 	andeq	r0, r4, r0
     c5c:	9f5001f3 	svcls	0x005001f3
	...
     c70:	00510001 	subseq	r0, r1, r1
     c74:	00000000 	andeq	r0, r0, r0
     c78:	04000000 	streq	r0, [r0], #-0
     c7c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     c80:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     c90:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     c9c:	01f30004 	mvnseq	r0, r4
     ca0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     cb0:	00010000 	andeq	r0, r1, r0
     cb4:	00000050 	andeq	r0, r0, r0, asr r0
     cb8:	00000000 	andeq	r0, r0, r0
     cbc:	f3000400 	vshl.u8	d0, d0, d0
     cc0:	009f5001 	addseq	r5, pc, r1
	...
     cd0:	01000000 	mrseq	r0, (UNDEF: 0)
     cd4:	00005100 	andeq	r5, r0, r0, lsl #2
     cd8:	00000000 	andeq	r0, r0, r0
     cdc:	00040000 	andeq	r0, r4, r0
     ce0:	9f5101f3 	svcls	0x005101f3
	...
     cf4:	00500001 	subseq	r0, r0, r1
     cf8:	00000000 	andeq	r0, r0, r0
     cfc:	04000000 	streq	r0, [r0], #-0
     d00:	5001f300 	andpl	pc, r1, r0, lsl #6
     d04:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     d14:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     d20:	01f30004 	mvnseq	r0, r4
     d24:	00009f51 	andeq	r9, r0, r1, asr pc
     d28:	00000000 	andeq	r0, r0, r0
     d2c:	0dcc0000 	stcleq	0, cr0, [ip]
     d30:	0dd60800 	ldcleq	8, cr0, [r6]
     d34:	00010800 	andeq	r0, r1, r0, lsl #16
     d38:	000dd650 	andeq	sp, sp, r0, asr r6
     d3c:	000de808 	andeq	lr, sp, r8, lsl #16
     d40:	f3000408 	vshl.u8	d0, d8, d0
     d44:	009f5001 	addseq	r5, pc, r1
     d48:	00000000 	andeq	r0, r0, r0
     d4c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
     d50:	f208000d 	vhadd.s8	d0, d8, d13
     d54:	0108000d 	tsteq	r8, sp
     d58:	0df25000 	ldcleq	0, cr5, [r2]
     d5c:	0e040800 	cdpeq	8, 0, cr0, cr4, cr0, {0}
     d60:	00040800 	andeq	r0, r4, r0, lsl #16
     d64:	9f5001f3 	svcls	0x005001f3
	...
     d70:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
     d74:	08000e0e 	stmdaeq	r0, {r1, r2, r3, r9, sl, fp}
     d78:	0e500001 	cdpeq	0, 5, cr0, cr0, cr1, {0}
     d7c:	2008000e 	andcs	r0, r8, lr
     d80:	0408000e 	streq	r0, [r8], #-14
     d84:	5001f300 	andpl	pc, r1, r0, lsl #6
     d88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     d98:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     da4:	01f30004 	mvnseq	r0, r4
     da8:	00009f51 	andeq	r9, r0, r1, asr pc
     dac:	00000000 	andeq	r0, r0, r0
     db0:	00010000 	andeq	r0, r1, r0
     db4:	00000051 	andeq	r0, r0, r1, asr r0
     db8:	00000000 	andeq	r0, r0, r0
     dbc:	f3000400 	vshl.u8	d0, d0, d0
     dc0:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     dd0:	01000000 	mrseq	r0, (UNDEF: 0)
     dd4:	00005300 	andeq	r5, r0, r0, lsl #6
     dd8:	00000000 	andeq	r0, r0, r0
     ddc:	00010000 	andeq	r0, r1, r0
     de0:	00000053 	andeq	r0, r0, r3, asr r0
     de4:	00000000 	andeq	r0, r0, r0
     de8:	53000100 	movwpl	r0, #256	; 0x100
	...
     df4:	08000e20 	stmdaeq	r0, {r5, r9, sl, fp}
     df8:	08000e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp}
     dfc:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     e00:	6008000e 	andvs	r0, r8, lr
     e04:	0408000e 	streq	r0, [r8], #-14
     e08:	5001f300 	andpl	pc, r1, r0, lsl #6
     e0c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     e10:	00000000 	andeq	r0, r0, r0
     e14:	000e2000 	andeq	r2, lr, r0
     e18:	000e4e08 	andeq	r4, lr, r8, lsl #28
     e1c:	51000108 	tstpl	r0, r8, lsl #2
     e20:	08000e4e 	stmdaeq	r0, {r1, r2, r3, r6, r9, sl, fp}
     e24:	08000e60 	stmdaeq	r0, {r5, r6, r9, sl, fp}
     e28:	01f30004 	mvnseq	r0, r4
     e2c:	00009f51 	andeq	r9, r0, r1, asr pc
     e30:	00000000 	andeq	r0, r0, r0
     e34:	0e380000 	cdpeq	0, 3, cr0, cr8, cr0, {0}
     e38:	0e400800 	cdpeq	8, 4, cr0, cr0, cr0, {0}
     e3c:	00010800 	andeq	r0, r1, r0, lsl #16
     e40:	000e4053 	andeq	r4, lr, r3, asr r0
     e44:	000e4208 	andeq	r4, lr, r8, lsl #4
     e48:	71000508 	tstvc	r0, r8, lsl #10
     e4c:	9f253500 	svcls	0x00253500
     e50:	08000e42 	stmdaeq	r0, {r1, r6, r9, sl, fp}
     e54:	08000e44 	stmdaeq	r0, {r2, r6, r9, sl, fp}
     e58:	4c530001 	mrrcmi	0, 0, r0, r3, cr1
     e5c:	5408000e 	strpl	r0, [r8], #-14
     e60:	0108000e 	tsteq	r8, lr
     e64:	00005300 	andeq	r5, r0, r0, lsl #6
	...
     e74:	00010000 	andeq	r0, r1, r0
     e78:	00000050 	andeq	r0, r0, r0, asr r0
     e7c:	00000000 	andeq	r0, r0, r0
     e80:	f3000400 	vshl.u8	d0, d0, d0
     e84:	009f5001 	addseq	r5, pc, r1
	...
     e94:	01000000 	mrseq	r0, (UNDEF: 0)
     e98:	00005000 	andeq	r5, r0, r0
     e9c:	00000000 	andeq	r0, r0, r0
     ea0:	00040000 	andeq	r0, r4, r0
     ea4:	9f5001f3 	svcls	0x005001f3
	...
     eb8:	00500001 	subseq	r0, r0, r1
     ebc:	00000000 	andeq	r0, r0, r0
     ec0:	04000000 	streq	r0, [r0], #-0
     ec4:	5001f300 	andpl	pc, r1, r0, lsl #6
     ec8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     ed8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     ee4:	01f30004 	mvnseq	r0, r4
     ee8:	00009f51 	andeq	r9, r0, r1, asr pc
	...
     ef8:	00010000 	andeq	r0, r1, r0
     efc:	00000052 	andeq	r0, r0, r2, asr r0
     f00:	00000000 	andeq	r0, r0, r0
     f04:	f3000400 	vshl.u8	d0, d0, d0
     f08:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
     f18:	01000000 	mrseq	r0, (UNDEF: 0)
     f1c:	00005000 	andeq	r5, r0, r0
     f20:	00000000 	andeq	r0, r0, r0
     f24:	00040000 	andeq	r0, r4, r0
     f28:	9f5001f3 	svcls	0x005001f3
	...
     f3c:	00510001 	subseq	r0, r1, r1
     f40:	00000000 	andeq	r0, r0, r0
     f44:	04000000 	streq	r0, [r0], #-0
     f48:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     f4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     f5c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     f68:	01f30004 	mvnseq	r0, r4
     f6c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     f7c:	00010000 	andeq	r0, r1, r0
     f80:	00000051 	andeq	r0, r0, r1, asr r0
     f84:	00000000 	andeq	r0, r0, r0
     f88:	f3000400 	vshl.u8	d0, d0, d0
     f8c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     f9c:	01000000 	mrseq	r0, (UNDEF: 0)
     fa0:	00005000 	andeq	r5, r0, r0
     fa4:	00000000 	andeq	r0, r0, r0
     fa8:	00040000 	andeq	r0, r4, r0
     fac:	9f5001f3 	svcls	0x005001f3
	...
     fc0:	00500001 	subseq	r0, r0, r1
     fc4:	00000000 	andeq	r0, r0, r0
     fc8:	04000000 	streq	r0, [r0], #-0
     fcc:	5001f300 	andpl	pc, r1, r0, lsl #6
     fd0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     fe0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     fec:	01f30004 	mvnseq	r0, r4
     ff0:	00009f50 	andeq	r9, r0, r0, asr pc
     ff4:	00000000 	andeq	r0, r0, r0
     ff8:	00010000 	andeq	r0, r1, r0
     ffc:	00000050 	andeq	r0, r0, r0, asr r0
    1000:	00000000 	andeq	r0, r0, r0
    1004:	f3000400 	vshl.u8	d0, d0, d0
    1008:	009f5001 	addseq	r5, pc, r1
    100c:	00000000 	andeq	r0, r0, r0
    1010:	01000000 	mrseq	r0, (UNDEF: 0)
    1014:	00005000 	andeq	r5, r0, r0
	...
    1024:	00010000 	andeq	r0, r1, r0
    1028:	00000051 	andeq	r0, r0, r1, asr r0
    102c:	00000000 	andeq	r0, r0, r0
    1030:	f3000400 	vshl.u8	d0, d0, d0
    1034:	009f5101 	addseq	r5, pc, r1, lsl #2
    1038:	00000000 	andeq	r0, r0, r0
    103c:	01000000 	mrseq	r0, (UNDEF: 0)
    1040:	00005100 	andeq	r5, r0, r0, lsl #2
    1044:	00000000 	andeq	r0, r0, r0
    1048:	00040000 	andeq	r0, r4, r0
    104c:	9f5101f3 	svcls	0x005101f3
	...
    1058:	00510001 	subseq	r0, r1, r1
	...
    1068:	01000000 	mrseq	r0, (UNDEF: 0)
    106c:	00005200 	andeq	r5, r0, r0, lsl #4
    1070:	00000000 	andeq	r0, r0, r0
    1074:	00040000 	andeq	r0, r4, r0
    1078:	9f5201f3 	svcls	0x005201f3
	...
    1084:	00520001 	subseq	r0, r2, r1
	...
    1094:	01000000 	mrseq	r0, (UNDEF: 0)
    1098:	00005100 	andeq	r5, r0, r0, lsl #2
    109c:	00000000 	andeq	r0, r0, r0
    10a0:	00010000 	andeq	r0, r1, r0
    10a4:	00000051 	andeq	r0, r0, r1, asr r0
	...
    10b4:	53000100 	movwpl	r0, #256	; 0x100
	...
    10c0:	00720005 	rsbseq	r0, r2, r5
    10c4:	009f2535 	addseq	r2, pc, r5, lsr r5	; <UNPREDICTABLE>
    10c8:	00000000 	andeq	r0, r0, r0
    10cc:	01000000 	mrseq	r0, (UNDEF: 0)
    10d0:	00005300 	andeq	r5, r0, r0, lsl #6
    10d4:	00000000 	andeq	r0, r0, r0
    10d8:	00010000 	andeq	r0, r1, r0
    10dc:	00000053 	andeq	r0, r0, r3, asr r0
	...
    10ec:	53000100 	movwpl	r0, #256	; 0x100
	...
    10f8:	00530001 	subseq	r0, r3, r1
	...
    1108:	01000000 	mrseq	r0, (UNDEF: 0)
    110c:	00005100 	andeq	r5, r0, r0, lsl #2
    1110:	00000000 	andeq	r0, r0, r0
    1114:	00050000 	andeq	r0, r5, r0
    1118:	25350072 	ldrcs	r0, [r5, #-114]!	; 0x72
    111c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1120:	00000000 	andeq	r0, r0, r0
    1124:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1130:	00510001 	subseq	r0, r1, r1
	...
    1140:	01000000 	mrseq	r0, (UNDEF: 0)
    1144:	00005000 	andeq	r5, r0, r0
    1148:	00000000 	andeq	r0, r0, r0
    114c:	00040000 	andeq	r0, r4, r0
    1150:	9f5001f3 	svcls	0x005001f3
	...
    115c:	00500001 	subseq	r0, r0, r1
    1160:	00000000 	andeq	r0, r0, r0
    1164:	04000000 	streq	r0, [r0], #-0
    1168:	5001f300 	andpl	pc, r1, r0, lsl #6
    116c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    117c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1188:	01f30004 	mvnseq	r0, r4
    118c:	00009f51 	andeq	r9, r0, r1, asr pc
    1190:	00000000 	andeq	r0, r0, r0
    1194:	00010000 	andeq	r0, r1, r0
    1198:	00000051 	andeq	r0, r0, r1, asr r0
	...
    11a8:	52000100 	andpl	r0, r0, #0, 2
	...
    11b4:	01f30004 	mvnseq	r0, r4
    11b8:	00009f52 	andeq	r9, r0, r2, asr pc
    11bc:	00000000 	andeq	r0, r0, r0
    11c0:	00010000 	andeq	r0, r1, r0
    11c4:	00000052 	andeq	r0, r0, r2, asr r0
	...
    11d4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    11e8:	00530001 	subseq	r0, r3, r1
    11ec:	00000000 	andeq	r0, r0, r0
    11f0:	05000000 	streq	r0, [r0, #-0]
    11f4:	35007200 	strcc	r7, [r0, #-512]	; 0x200
    11f8:	00009f25 	andeq	r9, r0, r5, lsr #30
    11fc:	00000000 	andeq	r0, r0, r0
    1200:	00010000 	andeq	r0, r1, r0
    1204:	00000053 	andeq	r0, r0, r3, asr r0
    1208:	00000000 	andeq	r0, r0, r0
    120c:	53000100 	movwpl	r0, #256	; 0x100
	...
    1220:	00500001 	subseq	r0, r0, r1
    1224:	00000000 	andeq	r0, r0, r0
    1228:	04000000 	streq	r0, [r0], #-0
    122c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1230:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1234:	00000000 	andeq	r0, r0, r0
    1238:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1244:	01f30004 	mvnseq	r0, r4
    1248:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    1258:	00010000 	andeq	r0, r1, r0
    125c:	00000051 	andeq	r0, r0, r1, asr r0
    1260:	00000000 	andeq	r0, r0, r0
    1264:	f3000400 	vshl.u8	d0, d0, d0
    1268:	009f5101 	addseq	r5, pc, r1, lsl #2
    126c:	00000000 	andeq	r0, r0, r0
    1270:	01000000 	mrseq	r0, (UNDEF: 0)
    1274:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    1284:	00010000 	andeq	r0, r1, r0
    1288:	00000052 	andeq	r0, r0, r2, asr r0
    128c:	00000000 	andeq	r0, r0, r0
    1290:	f3000400 	vshl.u8	d0, d0, d0
    1294:	009f5201 	addseq	r5, pc, r1, lsl #4
    1298:	00000000 	andeq	r0, r0, r0
    129c:	01000000 	mrseq	r0, (UNDEF: 0)
    12a0:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    12b0:	00010000 	andeq	r0, r1, r0
    12b4:	00000051 	andeq	r0, r0, r1, asr r0
	...
    12c4:	53000100 	movwpl	r0, #256	; 0x100
	...
    12d0:	00720005 	rsbseq	r0, r2, r5
    12d4:	009f2535 	addseq	r2, pc, r5, lsr r5	; <UNPREDICTABLE>
    12d8:	00000000 	andeq	r0, r0, r0
    12dc:	01000000 	mrseq	r0, (UNDEF: 0)
    12e0:	00005300 	andeq	r5, r0, r0, lsl #6
    12e4:	00000000 	andeq	r0, r0, r0
    12e8:	00010000 	andeq	r0, r1, r0
    12ec:	00000053 	andeq	r0, r0, r3, asr r0
	...
    12fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1308:	01f30004 	mvnseq	r0, r4
    130c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    131c:	00010000 	andeq	r0, r1, r0
    1320:	00000050 	andeq	r0, r0, r0, asr r0
    1324:	00000000 	andeq	r0, r0, r0
    1328:	f3000400 	vshl.u8	d0, d0, d0
    132c:	009f5001 	addseq	r5, pc, r1
	...
    133c:	01000000 	mrseq	r0, (UNDEF: 0)
    1340:	00005000 	andeq	r5, r0, r0
    1344:	00000000 	andeq	r0, r0, r0
    1348:	00040000 	andeq	r0, r4, r0
    134c:	9f5001f3 	svcls	0x005001f3
	...
    1360:	00500001 	subseq	r0, r0, r1
    1364:	00000000 	andeq	r0, r0, r0
    1368:	04000000 	streq	r0, [r0], #-0
    136c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1370:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1374:	00000000 	andeq	r0, r0, r0
    1378:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1384:	01f30004 	mvnseq	r0, r4
    1388:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    1398:	00010000 	andeq	r0, r1, r0
    139c:	00000050 	andeq	r0, r0, r0, asr r0
    13a0:	00000000 	andeq	r0, r0, r0
    13a4:	f3000400 	vshl.u8	d0, d0, d0
    13a8:	009f5001 	addseq	r5, pc, r1
	...
    13b8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    13bc:	08007000 	stmdaeq	r0, {ip, sp, lr}
    13c0:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    13c4:	ff080071 			; <UNDEFINED> instruction: 0xff080071
    13c8:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    13cc:	00000000 	andeq	r0, r0, r0
    13d0:	0f000000 	svceq	0x00000000
    13d4:	5001f300 	andpl	pc, r1, r0, lsl #6
    13d8:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    13dc:	08007124 	stmdaeq	r0, {r2, r5, r8, ip, sp, lr}
    13e0:	9f211aff 	svcls	0x00211aff
	...
    13f4:	00500001 	subseq	r0, r0, r1
    13f8:	00000000 	andeq	r0, r0, r0
    13fc:	04000000 	streq	r0, [r0], #-0
    1400:	5001f300 	andpl	pc, r1, r0, lsl #6
    1404:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1414:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1428:	0070000d 	rsbseq	r0, r0, sp
    142c:	00702538 	rsbseq	r2, r0, r8, lsr r5
    1430:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    1434:	009f2124 	addseq	r2, pc, r4, lsr #2
    1438:	00000000 	andeq	r0, r0, r0
    143c:	62000000 	andvs	r0, r0, #0
    1440:	c808000e 	stmdagt	r8, {r1, r2, r3}
    1444:	0208000e 	andeq	r0, r8, #14
    1448:	c89f3000 	ldmgt	pc, {ip, sp}	; <UNPREDICTABLE>
    144c:	cc08000e 	stcgt	0, cr0, [r8], {14}
    1450:	0708000e 	streq	r0, [r8, -lr]
    1454:	0a007300 	beq	1e05c <__Stack_Size+0x1dc5c>
    1458:	9f1affff 	svcls	0x001affff
    145c:	08000edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp}
    1460:	08000ee6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, fp}
    1464:	00730007 	rsbseq	r0, r3, r7
    1468:	1affff0a 	bne	1098 <__Stack_Size+0xc98>
    146c:	000ef09f 	muleq	lr, pc, r0	; <UNPREDICTABLE>
    1470:	000efa08 	andeq	pc, lr, r8, lsl #20
    1474:	73000708 	movwvc	r0, #1800	; 0x708
    1478:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    147c:	0f469f1a 	svceq	0x00469f1a
    1480:	0f520800 	svceq	0x00520800
    1484:	00020800 	andeq	r0, r2, r0, lsl #16
    1488:	0f529f30 	svceq	0x00529f30
    148c:	0f920800 	svceq	0x00920800
    1490:	00070800 	andeq	r0, r7, r0, lsl #16
    1494:	ff0a0075 			; <UNDEFINED> instruction: 0xff0a0075
    1498:	929f1aff 	addsls	r1, pc, #1044480	; 0xff000
    149c:	b408000f 	strlt	r0, [r8], #-15
    14a0:	0208000f 	andeq	r0, r8, #15
    14a4:	009f3000 	addseq	r3, pc, r0
    14a8:	00000000 	andeq	r0, r0, r0
    14ac:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    14b0:	ac08000e 	stcge	0, cr0, [r8], {14}
    14b4:	0708000e 	streq	r0, [r8, -lr]
    14b8:	0a007200 	beq	1dcc0 <__Stack_Size+0x1d8c0>
    14bc:	9f272000 	svcls	0x00272000
    14c0:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
    14c4:	08000eb0 	stmdaeq	r0, {r4, r5, r7, r9, sl, fp}
    14c8:	0072000b 	rsbseq	r0, r2, fp
    14cc:	2720000a 	strcs	r0, [r0, -sl]!
    14d0:	2720000a 	strcs	r0, [r0, -sl]!
    14d4:	000eb09f 	muleq	lr, pc, r0	; <UNPREDICTABLE>
    14d8:	000ec008 	andeq	ip, lr, r8
    14dc:	74000c08 	strvc	r0, [r0], #-3080	; 0xc08
    14e0:	000a0600 	andeq	r0, sl, r0, lsl #12
    14e4:	000a2720 	andeq	r2, sl, r0, lsr #14
    14e8:	009f2720 	addseq	r2, pc, r0, lsr #14
    14ec:	00000000 	andeq	r0, r0, r0
    14f0:	ba000000 	blt	14f8 <__Stack_Size+0x10f8>
    14f4:	be08000e 	cdplt	0, 0, cr0, cr8, cr14, {0}
    14f8:	0608000e 	streq	r0, [r8], -lr
    14fc:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    1500:	be9f2720 	cdplt	7, 9, cr2, cr15, cr0, {1}
    1504:	ce08000e 	cdpgt	0, 0, cr0, cr8, cr14, {0}
    1508:	0908000e 	stmdbeq	r8, {r1, r2, r3}
    150c:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    1510:	20082720 	andcs	r2, r8, r0, lsr #14
    1514:	0ece9f27 	cdpeq	15, 12, cr9, cr14, cr7, {1}
    1518:	0ed60800 	cdpeq	8, 13, cr0, cr6, cr0, {0}
    151c:	000a0800 	andeq	r0, sl, r0, lsl #16
    1520:	08060074 	stmdaeq	r6, {r2, r4, r5, r6}
    1524:	20082720 	andcs	r2, r8, r0, lsr #14
    1528:	0edc9f27 	cdpeq	15, 13, cr9, cr12, cr7, {1}
    152c:	0ede0800 	cdpeq	8, 13, cr0, cr14, cr0, {0}
    1530:	00090800 	andeq	r0, r9, r0, lsl #16
    1534:	20080072 	andcs	r0, r8, r2, ror r0
    1538:	27200827 	strcs	r0, [r0, -r7, lsr #16]!
    153c:	000ede9f 	muleq	lr, pc, lr	; <UNPREDICTABLE>
    1540:	000eea08 	andeq	lr, lr, r8, lsl #20
    1544:	74000a08 	strvc	r0, [r0], #-2568	; 0xa08
    1548:	20080600 	andcs	r0, r8, r0, lsl #12
    154c:	27200827 	strcs	r0, [r0, -r7, lsr #16]!
    1550:	000ef09f 	muleq	lr, pc, r0	; <UNPREDICTABLE>
    1554:	000efe08 	andeq	pc, lr, r8, lsl #28
    1558:	74000a08 	strvc	r0, [r0], #-2568	; 0xa08
    155c:	20080600 	andcs	r0, r8, r0, lsl #12
    1560:	27200827 	strcs	r0, [r0, -r7, lsr #16]!
    1564:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1568:	00000000 	andeq	r0, r0, r0
    156c:	000f1000 	andeq	r1, pc, r0
    1570:	000f2608 	andeq	r2, pc, r8, lsl #12
    1574:	53000108 	movwpl	r0, #264	; 0x108
    1578:	08000f26 	stmdaeq	r0, {r1, r2, r5, r8, r9, sl, fp}
    157c:	08000f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp}
    1580:	00720004 	rsbseq	r0, r2, r4
    1584:	00009f06 	andeq	r9, r0, r6, lsl #30
    1588:	00000000 	andeq	r0, r0, r0
    158c:	0f320000 	svceq	0x00320000
    1590:	0f460800 	svceq	0x00460800
    1594:	00010800 	andeq	r0, r1, r0, lsl #16
    1598:	00000053 	andeq	r0, r0, r3, asr r0
	...
    15a8:	30000200 	andcc	r0, r0, r0, lsl #4
    15ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    15b0:	00000000 	andeq	r0, r0, r0
    15b4:	71000700 	tstvc	r0, r0, lsl #14
    15b8:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    15bc:	00009f1a 	andeq	r9, r0, sl, lsl pc
    15c0:	00000000 	andeq	r0, r0, r0
    15c4:	00070000 	andeq	r0, r7, r0
    15c8:	ff0a0071 			; <UNDEFINED> instruction: 0xff0a0071
    15cc:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    15d0:	00000000 	andeq	r0, r0, r0
    15d4:	02000000 	andeq	r0, r0, #0
    15d8:	009f3000 	addseq	r3, pc, r0
    15dc:	00000000 	andeq	r0, r0, r0
    15e0:	ec000000 	stc	0, cr0, [r0], {-0}
    15e4:	0108000f 	tsteq	r8, pc
    15e8:	01080010 	tsteq	r8, r0, lsl r0
    15ec:	10015000 	andne	r5, r1, r0
    15f0:	10100800 	andsne	r0, r0, r0, lsl #16
    15f4:	00040800 	andeq	r0, r4, r0, lsl #16
    15f8:	9f5001f3 	svcls	0x005001f3
	...
    1604:	08001010 	stmdaeq	r0, {r4, ip}
    1608:	08001025 	stmdaeq	r0, {r0, r2, r5, ip}
    160c:	25500001 	ldrbcs	r0, [r0, #-1]
    1610:	34080010 	strcc	r0, [r8], #-16
    1614:	04080010 	streq	r0, [r8], #-16
    1618:	5001f300 	andpl	pc, r1, r0, lsl #6
    161c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1620:	00000000 	andeq	r0, r0, r0
    1624:	00103400 	andseq	r3, r0, r0, lsl #8
    1628:	00104808 	andseq	r4, r0, r8, lsl #16
    162c:	50000108 	andpl	r0, r0, r8, lsl #2
    1630:	08001048 	stmdaeq	r0, {r3, r6, ip}
    1634:	080010c4 	stmdaeq	r0, {r2, r6, r7, ip}
    1638:	01f30004 	mvnseq	r0, r4
    163c:	00009f50 	andeq	r9, r0, r0, asr pc
    1640:	00000000 	andeq	r0, r0, r0
    1644:	10560000 	subsne	r0, r6, r0
    1648:	10580800 	subsne	r0, r8, r0, lsl #16
    164c:	00020800 	andeq	r0, r2, r0, lsl #16
    1650:	00000971 	andeq	r0, r0, r1, ror r9
    1654:	00000000 	andeq	r0, r0, r0
    1658:	107e0000 	rsbsne	r0, lr, r0
    165c:	10800800 	addne	r0, r0, r0, lsl #16
    1660:	00010800 	andeq	r0, r1, r0, lsl #16
    1664:	00108052 	andseq	r8, r0, r2, asr r0
    1668:	00109a08 	andseq	r9, r0, r8, lsl #20
    166c:	71000508 	tstvc	r0, r8, lsl #10
    1670:	9f1a3f00 	svcls	0x001a3f00
    1674:	0800109e 	stmdaeq	r0, {r1, r2, r3, r4, r7, ip}
    1678:	080010a8 	stmdaeq	r0, {r3, r5, r7, ip}
    167c:	00710005 	rsbseq	r0, r1, r5
    1680:	009f1a3f 	addseq	r1, pc, pc, lsr sl	; <UNPREDICTABLE>
    1684:	00000000 	andeq	r0, r0, r0
    1688:	cc000000 	stcgt	0, cr0, [r0], {-0}
    168c:	52080010 	andpl	r0, r8, #16
    1690:	03080011 	movweq	r0, #32785	; 0x8011
    1694:	9f107400 	svcls	0x00107400
	...
    16a0:	080010d0 	stmdaeq	r0, {r4, r6, r7, ip}
    16a4:	080010fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, ip}
    16a8:	fa530001 	blx	14c16b4 <__Stack_Size+0x14c12b4>
    16ac:	00080010 	andeq	r0, r8, r0, lsl r0
    16b0:	09080011 	stmdbeq	r8, {r0, r4}
    16b4:	94107400 	ldrls	r7, [r0], #-1024	; 0x400
    16b8:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    16bc:	11009f1a 	tstne	r0, sl, lsl pc
    16c0:	11140800 	tstne	r4, r0, lsl #16
    16c4:	00010800 	andeq	r0, r1, r0, lsl #16
    16c8:	00111453 	andseq	r1, r1, r3, asr r4
    16cc:	00111508 	andseq	r1, r1, r8, lsl #10
    16d0:	74000908 	strvc	r0, [r0], #-2312	; 0x908
    16d4:	0a029410 	beq	a671c <__Stack_Size+0xa631c>
    16d8:	9f1affff 	svcls	0x001affff
	...
    16e4:	080010d2 	stmdaeq	r0, {r1, r4, r6, r7, ip}
    16e8:	080010f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, ip}
    16ec:	00760006 	rsbseq	r0, r6, r6
    16f0:	9f1aff08 	svcls	0x001aff08
    16f4:	080010f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, ip}
    16f8:	080010f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip}
    16fc:	9f340002 	svcls	0x00340002
    1700:	080010f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip}
    1704:	08001100 	stmdaeq	r0, {r8, ip}
    1708:	9f370002 	svcls	0x00370002
    170c:	08001100 	stmdaeq	r0, {r8, ip}
    1710:	0800110a 	stmdaeq	r0, {r1, r3, r8, ip}
    1714:	00760006 	rsbseq	r0, r6, r6
    1718:	9f1aff08 	svcls	0x001aff08
    171c:	0800110a 	stmdaeq	r0, {r1, r3, r8, ip}
    1720:	08001152 	stmdaeq	r0, {r1, r4, r6, r8, ip}
    1724:	00560001 	subseq	r0, r6, r1
    1728:	00000000 	andeq	r0, r0, r0
    172c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1730:	1a080011 	bne	20177c <__Stack_Size+0x20137c>
    1734:	01080011 	tsteq	r8, r1, lsl r0
    1738:	111a5000 	tstne	sl, r0
    173c:	11480800 	cmpne	r8, r0, lsl #16
    1740:	00010800 	andeq	r0, r1, r0, lsl #16
    1744:	00000059 	andeq	r0, r0, r9, asr r0
    1748:	00000000 	andeq	r0, r0, r0
    174c:	00110200 	andseq	r0, r1, r0, lsl #4
    1750:	00110a08 	andseq	r0, r1, r8, lsl #20
    1754:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    1758:	0800110a 	stmdaeq	r0, {r1, r3, r8, ip}
    175c:	08001110 	stmdaeq	r0, {r4, r8, ip}
    1760:	00750016 	rsbseq	r0, r5, r6, lsl r0
    1764:	244b4012 	strbcs	r4, [fp], #-18
    1768:	16007322 	strne	r7, [r0], -r2, lsr #6
    176c:	244b4014 	strbcs	r4, [fp], #-20
    1770:	01282d22 	teqeq	r8, r2, lsr #26
    1774:	9f131600 	svcls	0x00131600
    1778:	08001110 	stmdaeq	r0, {r4, r8, ip}
    177c:	0800113e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, ip}
    1780:	00550001 	subseq	r0, r5, r1
    1784:	00000000 	andeq	r0, r0, r0
    1788:	b6000000 	strlt	r0, [r0], -r0
    178c:	cd080011 	stcgt	0, cr0, [r8, #-68]	; 0xffffffbc
    1790:	01080011 	tsteq	r8, r1, lsl r0
    1794:	11dc5000 	bicsne	r5, ip, r0
    1798:	11de0800 	bicsne	r0, lr, r0, lsl #16
    179c:	00010800 	andeq	r0, r1, r0, lsl #16
    17a0:	00000050 	andeq	r0, r0, r0, asr r0
    17a4:	00000000 	andeq	r0, r0, r0
    17a8:	0011f400 	andseq	pc, r1, r0, lsl #8
    17ac:	0011f808 	andseq	pc, r1, r8, lsl #16
    17b0:	70000608 	andvc	r0, r0, r8, lsl #12
    17b4:	1a7f0800 	bne	1fc37bc <__Stack_Size+0x1fc33bc>
    17b8:	0011f89f 	mulseq	r1, pc, r8	; <UNPREDICTABLE>
    17bc:	00121c08 	andseq	r1, r2, r8, lsl #24
    17c0:	50000108 	andpl	r0, r0, r8, lsl #2
    17c4:	0800121c 	stmdaeq	r0, {r2, r3, r4, r9, ip}
    17c8:	08001242 	stmdaeq	r0, {r1, r6, r9, ip}
    17cc:	0073000b 	rsbseq	r0, r3, fp
    17d0:	7f080194 	svcvc	0x00080194
    17d4:	1aff081a 	bne	fffc3844 <BootRAM+0xef33fe5>
    17d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    17dc:	00000000 	andeq	r0, r0, r0
    17e0:	00123400 	andseq	r3, r2, r0, lsl #8
    17e4:	00126108 	andseq	r6, r2, r8, lsl #2
    17e8:	51000108 	tstpl	r0, r8, lsl #2
    17ec:	0800126c 	stmdaeq	r0, {r2, r3, r5, r6, r9, ip}
    17f0:	0800127e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, ip}
    17f4:	84510001 	ldrbhi	r0, [r1], #-1
    17f8:	87080012 	smladhi	r8, r2, r0, r0
    17fc:	01080012 	tsteq	r8, r2, lsl r0
    1800:	00005100 	andeq	r5, r0, r0, lsl #2
    1804:	00000000 	andeq	r0, r0, r0
    1808:	121c0000 	andsne	r0, ip, #0
    180c:	125e0800 	subsne	r0, lr, #0, 16
    1810:	00010800 	andeq	r0, r1, r0, lsl #16
    1814:	00126c50 	andseq	r6, r2, r0, asr ip
    1818:	00128108 	andseq	r8, r2, r8, lsl #2
    181c:	50000108 	andpl	r0, r0, r8, lsl #2
    1820:	08001284 	stmdaeq	r0, {r2, r7, r9, ip}
    1824:	08001287 	stmdaeq	r0, {r0, r1, r2, r7, r9, ip}
    1828:	00500001 	subseq	r0, r0, r1
    182c:	00000000 	andeq	r0, r0, r0
    1830:	16000000 	strne	r0, [r0], -r0
    1834:	4e080012 	mcrmi	0, 0, r0, cr8, cr2, {0}
    1838:	06080012 			; <UNDEFINED> instruction: 0x06080012
    183c:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    1840:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    1844:	00000000 	andeq	r0, r0, r0
    1848:	94000000 	strls	r0, [r0], #-0
    184c:	98080012 	stmdals	r8, {r1, r4}
    1850:	07080012 	smladeq	r8, r2, r0, r0
    1854:	0a007300 	beq	1e45c <__Stack_Size+0x1e05c>
    1858:	9f273000 	svcls	0x00273000
    185c:	08001298 	stmdaeq	r0, {r3, r4, r7, r9, ip}
    1860:	0800129a 	stmdaeq	r0, {r1, r3, r4, r7, r9, ip}
    1864:	0073000b 	rsbseq	r0, r3, fp
    1868:	2730000a 	ldrcs	r0, [r0, -sl]!
    186c:	2730000a 	ldrcs	r0, [r0, -sl]!
    1870:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1874:	00000000 	andeq	r0, r0, r0
    1878:	0012c800 	andseq	ip, r2, r0, lsl #16
    187c:	00130208 	andseq	r0, r3, r8, lsl #4
    1880:	72000608 	andvc	r0, r0, #8, 12	; 0x800000
    1884:	1aff0800 	bne	fffc388c <BootRAM+0xef3402d>
    1888:	0013309f 	mulseq	r3, pc, r0	; <UNPREDICTABLE>
    188c:	00134008 	andseq	r4, r3, r8
    1890:	72000608 	andvc	r0, r0, #8, 12	; 0x800000
    1894:	1aff0800 	bne	fffc389c <BootRAM+0xef3403d>
    1898:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    189c:	00000000 	andeq	r0, r0, r0
    18a0:	0012cc00 	andseq	ip, r2, r0, lsl #24
    18a4:	0012ec08 	andseq	lr, r2, r8, lsl #24
    18a8:	54000108 	strpl	r0, [r0], #-264	; 0x108
    18ac:	080012ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip}
    18b0:	08001302 	stmdaeq	r0, {r1, r8, r9, ip}
    18b4:	00720007 	rsbseq	r0, r2, r7
    18b8:	1aff7f0b 	bne	fffe14ec <BootRAM+0xef51c8d>
    18bc:	0013309f 	mulseq	r3, pc, r0	; <UNPREDICTABLE>
    18c0:	00134008 	andseq	r4, r3, r8
    18c4:	72000708 	andvc	r0, r0, #8, 14	; 0x200000
    18c8:	ff7f0b00 			; <UNDEFINED> instruction: 0xff7f0b00
    18cc:	00009f1a 	andeq	r9, r0, sl, lsl pc
    18d0:	00000000 	andeq	r0, r0, r0
    18d4:	12e20000 	rscne	r0, r2, #0
    18d8:	132b0800 	teqne	fp, #0, 16
    18dc:	00010800 	andeq	r0, r1, r0, lsl #16
    18e0:	00133050 	andseq	r3, r3, r0, asr r0
    18e4:	00133208 	andseq	r3, r3, r8, lsl #4
    18e8:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    18f4:	0800130e 	stmdaeq	r0, {r1, r2, r3, r8, r9, ip}
    18f8:	08001312 	stmdaeq	r0, {r1, r4, r8, r9, ip}
    18fc:	00720005 	rsbseq	r0, r2, r5
    1900:	129f2740 	addsne	r2, pc, #64, 14	; 0x1000000
    1904:	14080013 	strne	r0, [r8], #-19
    1908:	07080013 	smladeq	r8, r3, r0, r0
    190c:	40007200 	andmi	r7, r0, r0, lsl #4
    1910:	9f274027 	svcls	0x00274027
	...
    191c:	0800131e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, ip}
    1920:	08001322 	stmdaeq	r0, {r1, r5, r8, r9, ip}
    1924:	00720007 	rsbseq	r0, r2, r7
    1928:	2710000a 	ldrcs	r0, [r0, -sl]
    192c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1930:	00000000 	andeq	r0, r0, r0
    1934:	00136400 	andseq	r6, r3, r0, lsl #8
    1938:	00137608 	andseq	r7, r3, r8, lsl #12
    193c:	50000108 	andpl	r0, r0, r8, lsl #2
    1940:	08001376 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, ip}
    1944:	08001380 	stmdaeq	r0, {r7, r8, r9, ip}
    1948:	01f30004 	mvnseq	r0, r4
    194c:	00009f50 	andeq	r9, r0, r0, asr pc
    1950:	00000000 	andeq	r0, r0, r0
    1954:	13640000 	cmnne	r4, #0
    1958:	136e0800 	cmnne	lr, #0, 16
    195c:	00010800 	andeq	r0, r1, r0, lsl #16
    1960:	00136e51 	andseq	r6, r3, r1, asr lr
    1964:	00137408 	andseq	r7, r3, r8, lsl #8
    1968:	f3000408 	vshl.u8	d0, d8, d0
    196c:	749f5101 	ldrvc	r5, [pc], #257	; 1974 <__Stack_Size+0x1574>
    1970:	80080013 	andhi	r0, r8, r3, lsl r0
    1974:	01080013 	tsteq	r8, r3, lsl r0
    1978:	00005100 	andeq	r5, r0, r0, lsl #2
    197c:	00000000 	andeq	r0, r0, r0
    1980:	136a0000 	cmnne	sl, #0
    1984:	13700800 	cmnne	r0, #0, 16
    1988:	00010800 	andeq	r0, r1, r0, lsl #16
    198c:	00137053 	andseq	r7, r3, r3, asr r0
    1990:	00137408 	andseq	r7, r3, r8, lsl #8
    1994:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    1998:	0a029412 	beq	a69e8 <__Stack_Size+0xa65e8>
    199c:	9f1affff 	svcls	0x001affff
    19a0:	08001374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip}
    19a4:	08001380 	stmdaeq	r0, {r7, r8, r9, ip}
    19a8:	00530001 	subseq	r0, r3, r1
    19ac:	00000000 	andeq	r0, r0, r0
    19b0:	d2000000 	andle	r0, r0, #0
    19b4:	dc080013 	stcle	0, cr0, [r8], {19}
    19b8:	11080013 	tstne	r8, r3, lsl r0
    19bc:	0a007200 	beq	1e1c4 <__Stack_Size+0x1ddc4>
    19c0:	311affff 			; <UNDEFINED> instruction: 0x311affff
    19c4:	c0802324 	addgt	r2, r0, r4, lsr #6
    19c8:	9f048081 	svcls	0x00048081
    19cc:	00000493 	muleq	r0, r3, r4
    19d0:	00000000 	andeq	r0, r0, r0
    19d4:	14060000 	strne	r0, [r6], #-0
    19d8:	14160800 	ldrne	r0, [r6], #-2048	; 0x800
    19dc:	00020800 	andeq	r0, r2, r0, lsl #16
    19e0:	14169f32 	ldrne	r9, [r6], #-3890	; 0xf32
    19e4:	14180800 	ldrne	r0, [r8], #-2048	; 0x800
    19e8:	00010800 	andeq	r0, r1, r0, lsl #16
    19ec:	00141850 	andseq	r1, r4, r0, asr r8
    19f0:	00142408 	andseq	r2, r4, r8, lsl #8
    19f4:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    19f8:	0014289f 	mulseq	r4, pc, r8	; <UNPREDICTABLE>
    19fc:	00144608 	andseq	r4, r4, r8, lsl #12
    1a00:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    1a04:	0014509f 	mulseq	r4, pc, r0	; <UNPREDICTABLE>
    1a08:	00145608 	andseq	r5, r4, r8, lsl #12
    1a0c:	50000108 	andpl	r0, r0, r8, lsl #2
    1a10:	08001456 	stmdaeq	r0, {r1, r2, r4, r6, sl, ip}
    1a14:	08001466 	stmdaeq	r0, {r1, r2, r5, r6, sl, ip}
    1a18:	9f320002 	svcls	0x00320002
    1a1c:	08001466 	stmdaeq	r0, {r1, r2, r5, r6, sl, ip}
    1a20:	08001468 	stmdaeq	r0, {r3, r5, r6, sl, ip}
    1a24:	68500001 	ldmdavs	r0, {r0}^
    1a28:	82080014 	andhi	r0, r8, #20
    1a2c:	02080014 	andeq	r0, r8, #20
    1a30:	829f3200 	addshi	r3, pc, #0, 4
    1a34:	84080014 	strhi	r0, [r8], #-20
    1a38:	01080014 	tsteq	r8, r4, lsl r0
    1a3c:	14845000 	strne	r5, [r4], #0
    1a40:	14900800 	ldrne	r0, [r0], #2048	; 0x800
    1a44:	00020800 	andeq	r0, r2, r0, lsl #16
    1a48:	14909f32 	ldrne	r9, [r0], #3890	; 0xf32
    1a4c:	14920800 	ldrne	r0, [r2], #2048	; 0x800
    1a50:	00010800 	andeq	r0, r1, r0, lsl #16
    1a54:	00149250 	andseq	r9, r4, r0, asr r2
    1a58:	0014a208 	andseq	sl, r4, r8, lsl #4
    1a5c:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    1a60:	0014a29f 	mulseq	r4, pc, r2	; <UNPREDICTABLE>
    1a64:	0014aa08 	andseq	sl, r4, r8, lsl #20
    1a68:	50000108 	andpl	r0, r0, r8, lsl #2
    1a6c:	080014c2 	stmdaeq	r0, {r1, r6, r7, sl, ip}
    1a70:	080014c4 	stmdaeq	r0, {r2, r6, r7, sl, ip}
    1a74:	00500001 	subseq	r0, r0, r1
    1a78:	00000000 	andeq	r0, r0, r0
    1a7c:	06000000 	streq	r0, [r0], -r0
    1a80:	ca080014 	bgt	201ad8 <__Stack_Size+0x2016d8>
    1a84:	01080014 	tsteq	r8, r4, lsl r0
    1a88:	00005400 	andeq	r5, r0, r0, lsl #8
    1a8c:	00000000 	andeq	r0, r0, r0
    1a90:	14aa0000 	strtne	r0, [sl], #0
    1a94:	14c20800 	strbne	r0, [r2], #2048	; 0x800
    1a98:	00020800 	andeq	r0, r2, r0, lsl #16
    1a9c:	14c49f36 	strbne	r9, [r4], #3894	; 0xf36
    1aa0:	14ca0800 	strbne	r0, [sl], #2048	; 0x800
    1aa4:	00010800 	andeq	r0, r1, r0, lsl #16
    1aa8:	00000053 	andeq	r0, r0, r3, asr r0
    1aac:	00000000 	andeq	r0, r0, r0
    1ab0:	0014ca00 	andseq	ip, r4, r0, lsl #20
    1ab4:	0014e008 	andseq	lr, r4, r8
    1ab8:	30000208 	andcc	r0, r0, r8, lsl #4
    1abc:	0014e09f 	mulseq	r4, pc, r0	; <UNPREDICTABLE>
    1ac0:	0014e208 	andseq	lr, r4, r8, lsl #4
    1ac4:	53000108 	movwpl	r0, #264	; 0x108
    1ac8:	080014e2 	stmdaeq	r0, {r1, r5, r6, r7, sl, ip}
    1acc:	080014ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, ip}
    1ad0:	9f300002 	svcls	0x00300002
    1ad4:	080014ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, ip}
    1ad8:	080014ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, ip}
    1adc:	ec530001 	mrrc	0, 0, r0, r3, cr1
    1ae0:	f4080014 	vst4.8	{d0-d3}, [r8 :64], r4
    1ae4:	02080014 	andeq	r0, r8, #20
    1ae8:	f49f3000 			; <UNDEFINED> instruction: 0xf49f3000
    1aec:	f6080014 			; <UNDEFINED> instruction: 0xf6080014
    1af0:	01080014 	tsteq	r8, r4, lsl r0
    1af4:	14f65300 	ldrbtne	r5, [r6], #768	; 0x300
    1af8:	14fe0800 	ldrbtne	r0, [lr], #2048	; 0x800
    1afc:	00020800 	andeq	r0, r2, r0, lsl #16
    1b00:	14fe9f30 	ldrbtne	r9, [lr], #3888	; 0xf30
    1b04:	15000800 	strne	r0, [r0, #-2048]	; 0x800
    1b08:	00010800 	andeq	r0, r1, r0, lsl #16
    1b0c:	00150053 	andseq	r0, r5, r3, asr r0
    1b10:	0015bc08 	andseq	fp, r5, r8, lsl #24
    1b14:	30000208 	andcc	r0, r0, r8, lsl #4
    1b18:	0015bc9f 	mulseq	r5, pc, ip	; <UNPREDICTABLE>
    1b1c:	0015c908 	andseq	ip, r5, r8, lsl #18
    1b20:	53000108 	movwpl	r0, #264	; 0x108
    1b24:	0800167c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip}
    1b28:	08001686 	stmdaeq	r0, {r1, r2, r7, r9, sl, ip}
    1b2c:	9f300002 	svcls	0x00300002
    1b30:	08001686 	stmdaeq	r0, {r1, r2, r7, r9, sl, ip}
    1b34:	0800169c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip}
    1b38:	11030006 	tstne	r3, r6
    1b3c:	9f080010 	svcls	0x00080010
	...
    1b48:	080015ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sl, ip}
    1b4c:	080015ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, ip}
    1b50:	9f300002 	svcls	0x00300002
    1b54:	080015da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, ip}
    1b58:	080015f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip}
    1b5c:	f4500001 			; <UNDEFINED> instruction: 0xf4500001
    1b60:	fc080015 	stc2	0, cr0, [r8], {21}
    1b64:	01080015 	tsteq	r8, r5, lsl r0
    1b68:	16005000 	strne	r5, [r0], -r0
    1b6c:	160e0800 	strne	r0, [lr], -r0, lsl #16
    1b70:	00010800 	andeq	r0, r1, r0, lsl #16
    1b74:	00166850 	andseq	r6, r6, r0, asr r8
    1b78:	00167408 	andseq	r7, r6, r8, lsl #8
    1b7c:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    1b88:	080014ca 	stmdaeq	r0, {r1, r3, r6, r7, sl, ip}
    1b8c:	080015c2 	stmdaeq	r0, {r1, r6, r7, r8, sl, ip}
    1b90:	ce540001 	cdpgt	0, 5, cr0, cr4, cr1, {0}
    1b94:	e4080015 	str	r0, [r8], #-21
    1b98:	01080015 	tsteq	r8, r5, lsl r0
    1b9c:	167c5400 	ldrbtne	r5, [ip], -r0, lsl #8
    1ba0:	169c0800 	ldrne	r0, [ip], r0, lsl #16
    1ba4:	00010800 	andeq	r0, r1, r0, lsl #16
    1ba8:	00000054 	andeq	r0, r0, r4, asr r0
    1bac:	00000000 	andeq	r0, r0, r0
    1bb0:	00155200 	andseq	r5, r5, r0, lsl #4
    1bb4:	00157e08 	andseq	r7, r5, r8, lsl #28
    1bb8:	51000108 	tstpl	r0, r8, lsl #2
	...
    1bc4:	08001552 	stmdaeq	r0, {r1, r4, r6, r8, sl, ip}
    1bc8:	0800157e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, ip}
    1bcc:	00730009 	rsbseq	r0, r3, r9
    1bd0:	081a7008 	ldmdaeq	sl, {r3, ip, sp, lr}
    1bd4:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    1bd8:	00000000 	andeq	r0, r0, r0
    1bdc:	ca000000 	bgt	1be4 <__Stack_Size+0x17e4>
    1be0:	74080014 	strvc	r0, [r8], #-20
    1be4:	02080016 	andeq	r0, r8, #22
    1be8:	7c9f3000 	ldcvc	0, cr3, [pc], {0}
    1bec:	9c080016 	stcls	0, cr0, [r8], {22}
    1bf0:	02080016 	andeq	r0, r8, #22
    1bf4:	009f3000 	addseq	r3, pc, r0
    1bf8:	00000000 	andeq	r0, r0, r0
    1bfc:	6a000000 	bvs	1c04 <__Stack_Size+0x1804>
    1c00:	7e080015 	mcrvc	0, 0, r0, cr8, cr5, {0}
    1c04:	01080015 	tsteq	r8, r5, lsl r0
    1c08:	00005200 	andeq	r5, r0, r0, lsl #4
    1c0c:	00000000 	andeq	r0, r0, r0
    1c10:	14d60000 	ldrbne	r0, [r6], #0
    1c14:	14d80800 	ldrbne	r0, [r8], #2048	; 0x800
    1c18:	00020800 	andeq	r0, r2, r0, lsl #16
    1c1c:	14d80373 	ldrbne	r0, [r8], #883	; 0x373
    1c20:	15000800 	strne	r0, [r0, #-2048]	; 0x800
    1c24:	00010800 	andeq	r0, r1, r0, lsl #16
    1c28:	0015bc52 	andseq	fp, r5, r2, asr ip
    1c2c:	0015be08 	andseq	fp, r5, r8, lsl #28
    1c30:	52000108 	andpl	r0, r0, #8, 2
	...
    1c3c:	080016a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, ip}
    1c40:	080016ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sl, ip}
    1c44:	ae530001 	cdpge	0, 5, cr0, cr3, cr1, {0}
    1c48:	bf080016 	svclt	0x00080016
    1c4c:	08080016 	stmdaeq	r8, {r1, r2, r4}
    1c50:	94087400 	strls	r7, [r8], #-1024	; 0x400
    1c54:	1aff0801 	bne	fffc3c60 <BootRAM+0xef34401>
    1c58:	00172e9f 	mulseq	r7, pc, lr	; <UNPREDICTABLE>
    1c5c:	00173608 	andseq	r3, r7, r8, lsl #12
    1c60:	53000108 	movwpl	r0, #264	; 0x108
    1c64:	08001736 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, sl, ip}
    1c68:	0800173b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r8, r9, sl, ip}
    1c6c:	08740008 	ldmdaeq	r4!, {r3}^
    1c70:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    1c74:	173e9f1a 			; <UNDEFINED> instruction: 0x173e9f1a
    1c78:	17460800 	strbne	r0, [r6, -r0, lsl #16]
    1c7c:	00010800 	andeq	r0, r1, r0, lsl #16
    1c80:	00000053 	andeq	r0, r0, r3, asr r0
    1c84:	00000000 	andeq	r0, r0, r0
    1c88:	0016ac00 	andseq	sl, r6, r0, lsl #24
    1c8c:	00173008 	andseq	r3, r7, r8
    1c90:	74000308 	strvc	r0, [r0], #-776	; 0x308
    1c94:	00009f10 	andeq	r9, r0, r0, lsl pc
    1c98:	00000000 	andeq	r0, r0, r0
    1c9c:	16b00000 	ldrtne	r0, [r0], r0
    1ca0:	16bf0800 	ldrtne	r0, [pc], r0, lsl #16
    1ca4:	00010800 	andeq	r0, r1, r0, lsl #16
    1ca8:	00000052 	andeq	r0, r0, r2, asr r0
    1cac:	00000000 	andeq	r0, r0, r0
    1cb0:	0016c400 	andseq	ip, r6, r0, lsl #8
    1cb4:	0016cc08 	andseq	ip, r6, r8, lsl #24
    1cb8:	50000108 	andpl	r0, r0, r8, lsl #2
    1cbc:	080016cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip}
    1cc0:	080016de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, ip}
    1cc4:	00570001 	subseq	r0, r7, r1
    1cc8:	00000000 	andeq	r0, r0, r0
    1ccc:	b6000000 	strlt	r0, [r0], -r0
    1cd0:	bc080016 	stclt	0, cr0, [r8], {22}
    1cd4:	16080016 			; <UNDEFINED> instruction: 0x16080016
    1cd8:	12007600 	andne	r7, r0, #0, 12
    1cdc:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    1ce0:	14160072 	ldrne	r0, [r6], #-114	; 0x72
    1ce4:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    1ce8:	0001282d 	andeq	r2, r1, sp, lsr #16
    1cec:	bc9f1316 	ldclt	3, cr1, [pc], {22}
    1cf0:	de080016 	mcrle	0, 0, r0, cr8, cr6, {0}
    1cf4:	01080016 	tsteq	r8, r6, lsl r0
    1cf8:	00005600 	andeq	r5, r0, r0, lsl #12
    1cfc:	00000000 	andeq	r0, r0, r0
    1d00:	17640000 	strbne	r0, [r4, -r0]!
    1d04:	17900800 	ldrne	r0, [r0, r0, lsl #16]
    1d08:	00010800 	andeq	r0, r1, r0, lsl #16
    1d0c:	00179050 	andseq	r9, r7, r0, asr r0
    1d10:	00179c08 	andseq	r9, r7, r8, lsl #24
    1d14:	f3000408 	vshl.u8	d0, d8, d0
    1d18:	009f5001 	addseq	r5, pc, r1
    1d1c:	00000000 	andeq	r0, r0, r0
    1d20:	6a000000 	bvs	1d28 <__Stack_Size+0x1928>
    1d24:	6c080017 	stcvs	0, cr0, [r8], {23}
    1d28:	02080017 	andeq	r0, r8, #23
    1d2c:	6c9f3000 	ldcvs	0, cr3, [pc], {0}
    1d30:	8c080017 	stchi	0, cr0, [r8], {23}
    1d34:	01080017 	tsteq	r8, r7, lsl r0
    1d38:	00005300 	andeq	r5, r0, r0, lsl #6
    1d3c:	00000000 	andeq	r0, r0, r0
    1d40:	176a0000 	strbne	r0, [sl, -r0]!
    1d44:	17940800 	ldrne	r0, [r4, r0, lsl #16]
    1d48:	00010800 	andeq	r0, r1, r0, lsl #16
    1d4c:	00000054 	andeq	r0, r0, r4, asr r0
    1d50:	00000000 	andeq	r0, r0, r0
    1d54:	0017a400 	andseq	sl, r7, r0, lsl #8
    1d58:	0017af08 	andseq	sl, r7, r8, lsl #30
    1d5c:	52000108 	andpl	r0, r0, #8, 2
    1d60:	080017b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, ip}
    1d64:	080017b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl, ip}
    1d68:	b6530001 	ldrblt	r0, [r3], -r1
    1d6c:	bc080017 	stclt	0, cr0, [r8], {23}
    1d70:	01080017 	tsteq	r8, r7, lsl r0
    1d74:	17bc5200 	ldrne	r5, [ip, r0, lsl #4]!
    1d78:	17cb0800 	strbne	r0, [fp, r0, lsl #16]
    1d7c:	00080800 	andeq	r0, r8, r0, lsl #16
    1d80:	01940873 	orrseq	r0, r4, r3, ror r8
    1d84:	9f1aff08 	svcls	0x001aff08
    1d88:	080017de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, ip}
    1d8c:	080017e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, r9, sl, ip}
    1d90:	00530001 	subseq	r0, r3, r1
    1d94:	00000000 	andeq	r0, r0, r0
    1d98:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    1d9c:	10080017 	andne	r0, r8, r7, lsl r0
    1da0:	01080018 	tsteq	r8, r8, lsl r0
    1da4:	18105000 	ldmdane	r0, {ip, lr}
    1da8:	18120800 	ldmdane	r2, {fp}
    1dac:	00030800 	andeq	r0, r3, r0, lsl #16
    1db0:	129f7e70 	addsne	r7, pc, #112, 28	; 0x700
    1db4:	22080018 	andcs	r0, r8, #24
    1db8:	03080018 	movweq	r0, #32792	; 0x8018
    1dbc:	9f7f7000 	svcls	0x007f7000
    1dc0:	08001822 	stmdaeq	r0, {r1, r5, fp, ip}
    1dc4:	08001826 	stmdaeq	r0, {r1, r2, r5, fp, ip}
    1dc8:	26500001 	ldrbcs	r0, [r0], -r1
    1dcc:	28080018 	stmdacs	r8, {r3, r4}
    1dd0:	03080018 	movweq	r0, #32792	; 0x8018
    1dd4:	9f7e7000 	svcls	0x007e7000
	...
    1de0:	080017f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, ip}
    1de4:	080017fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, ip}
    1de8:	fe510001 	cdp2	0, 5, cr0, cr1, cr1, {0}
    1dec:	28080017 	stmdacs	r8, {r0, r1, r2, r4}
    1df0:	04080018 	streq	r0, [r8], #-24
    1df4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1df8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1dfc:	00000000 	andeq	r0, r0, r0
    1e00:	0017f800 	andseq	pc, r7, r0, lsl #16
    1e04:	00180008 	andseq	r0, r8, r8
    1e08:	52000108 	andpl	r0, r0, #8, 2
    1e0c:	08001800 	stmdaeq	r0, {fp, ip}
    1e10:	08001828 	stmdaeq	r0, {r3, r5, fp, ip}
    1e14:	01f30004 	mvnseq	r0, r4
    1e18:	00009f52 	andeq	r9, r0, r2, asr pc
    1e1c:	00000000 	andeq	r0, r0, r0
    1e20:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    1e24:	180a0800 	stmdane	sl, {fp}
    1e28:	00010800 	andeq	r0, r1, r0, lsl #16
    1e2c:	00180a52 	andseq	r0, r8, r2, asr sl
    1e30:	00182208 	andseq	r2, r8, r8, lsl #4
    1e34:	f3000f08 	vpmax.f32	d0, d0, d8
    1e38:	ff0a5201 			; <UNDEFINED> instruction: 0xff0a5201
    1e3c:	01231aff 	strdeq	r1, [r3, -pc]!
    1e40:	00732631 	rsbseq	r2, r3, r1, lsr r6
    1e44:	18229f1c 	stmdane	r2!, {r2, r3, r4, r8, r9, sl, fp, ip, pc}
    1e48:	18240800 	stmdane	r4!, {fp}
    1e4c:	00100800 	andseq	r0, r0, r0, lsl #16
    1e50:	0a5201f3 	beq	1482624 <__Stack_Size+0x1482224>
    1e54:	231affff 	tstcs	sl, #1020	; 0x3fc
    1e58:	73263101 	teqvc	r6, #1073741824	; 0x40000000
    1e5c:	9f222000 	svcls	0x00222000
    1e60:	08001824 	stmdaeq	r0, {r2, r5, fp, ip}
    1e64:	08001828 	stmdaeq	r0, {r3, r5, fp, ip}
    1e68:	01f3000f 	mvnseq	r0, pc
    1e6c:	ffff0a52 			; <UNDEFINED> instruction: 0xffff0a52
    1e70:	3101231a 	tstcc	r1, sl, lsl r3
    1e74:	1c007326 	stcne	3, cr7, [r0], {38}	; 0x26
    1e78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1e7c:	00000000 	andeq	r0, r0, r0
    1e80:	00181200 	andseq	r1, r8, r0, lsl #4
    1e84:	00181a08 	andseq	r1, r8, r8, lsl #20
    1e88:	70000808 	andvc	r0, r0, r8, lsl #16
    1e8c:	0801947e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sl, ip, pc}
    1e90:	1a9f1aff 	bne	fe7c8a94 <BootRAM+0xd739235>
    1e94:	1e080018 	mcrne	0, 0, r0, cr8, cr8, {0}
    1e98:	01080018 	tsteq	r8, r8, lsl r0
    1e9c:	181e5400 	ldmdane	lr, {sl, ip, lr}
    1ea0:	18220800 	stmdane	r2!, {fp}
    1ea4:	00080800 	andeq	r0, r8, r0, lsl #16
    1ea8:	01947e70 	orrseq	r7, r4, r0, ror lr
    1eac:	9f1aff08 	svcls	0x001aff08
	...
    1eb8:	08001812 	stmdaeq	r0, {r1, r4, fp, ip}
    1ebc:	08001822 	stmdaeq	r0, {r1, r5, fp, ip}
    1ec0:	7f700012 	svcvc	0x00700012
    1ec4:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    1ec8:	7024381a 	eorvc	r3, r4, sl, lsl r8
    1ecc:	0801947e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sl, ip, pc}
    1ed0:	9f211aff 	svcls	0x00211aff
	...
    1edc:	08001808 	stmdaeq	r0, {r3, fp, ip}
    1ee0:	0800180a 	stmdaeq	r0, {r1, r3, fp, ip}
    1ee4:	22510001 	subscs	r0, r1, #1
    1ee8:	24080018 	strcs	r0, [r8], #-24
    1eec:	0a080018 	beq	201f54 <__Stack_Size+0x201b54>
    1ef0:	32007300 	andcc	r7, r0, #0, 6
    1ef4:	22007124 	andcs	r7, r0, #36, 2
    1ef8:	249f0423 	ldrcs	r0, [pc], #1059	; 1f00 <__Stack_Size+0x1b00>
    1efc:	26080018 			; <UNDEFINED> instruction: 0x26080018
    1f00:	0a080018 	beq	201f68 <__Stack_Size+0x201b68>
    1f04:	327f7300 	rsbscc	r7, pc, #0, 6
    1f08:	22007124 	andcs	r7, r0, #36, 2
    1f0c:	009f0423 	addseq	r0, pc, r3, lsr #8
    1f10:	00000000 	andeq	r0, r0, r0
    1f14:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1f18:	3a080018 	bcc	201f80 <__Stack_Size+0x201b80>
    1f1c:	01080018 	tsteq	r8, r8, lsl r0
    1f20:	18465000 	stmdane	r6, {ip, lr}^
    1f24:	18480800 	stmdane	r8, {fp}^
    1f28:	000a0800 	andeq	r0, sl, r0, lsl #16
    1f2c:	24310073 	ldrtcs	r0, [r1], #-115	; 0x73
    1f30:	23220070 	teqcs	r2, #112	; 0x70
    1f34:	18489f02 	stmdane	r8, {r1, r8, r9, sl, fp, ip, pc}^
    1f38:	184a0800 	stmdane	sl, {fp}^
    1f3c:	000a0800 	andeq	r0, sl, r0, lsl #16
    1f40:	24317f73 	ldrtcs	r7, [r1], #-3955	; 0xf73
    1f44:	23220070 	teqcs	r2, #112	; 0x70
    1f48:	00009f02 	andeq	r9, r0, r2, lsl #30
    1f4c:	00000000 	andeq	r0, r0, r0
    1f50:	18280000 	stmdane	r8!, {}	; <UNPREDICTABLE>
    1f54:	182e0800 	stmdane	lr!, {fp}
    1f58:	00010800 	andeq	r0, r1, r0, lsl #16
    1f5c:	00182e51 	andseq	r2, r8, r1, asr lr
    1f60:	00184c08 	andseq	r4, r8, r8, lsl #24
    1f64:	f3000408 	vshl.u8	d0, d8, d0
    1f68:	009f5101 	addseq	r5, pc, r1, lsl #2
    1f6c:	00000000 	andeq	r0, r0, r0
    1f70:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1f74:	30080018 	andcc	r0, r8, r8, lsl r0
    1f78:	01080018 	tsteq	r8, r8, lsl r0
    1f7c:	18305200 	ldmdane	r0!, {r9, ip, lr}
    1f80:	184c0800 	stmdane	ip, {fp}^
    1f84:	00040800 	andeq	r0, r4, r0, lsl #16
    1f88:	9f5201f3 	svcls	0x005201f3
	...
    1f94:	08001838 	stmdaeq	r0, {r3, r4, r5, fp, ip}
    1f98:	0800183a 	stmdaeq	r0, {r1, r3, r4, r5, fp, ip}
    1f9c:	3a520001 	bcc	1481fa8 <__Stack_Size+0x1481ba8>
    1fa0:	46080018 			; <UNDEFINED> instruction: 0x46080018
    1fa4:	0f080018 	svceq	0x00080018
    1fa8:	5201f300 	andpl	pc, r1, #0, 6
    1fac:	1affff0a 	bne	1bdc <__Stack_Size+0x17dc>
    1fb0:	26310123 	ldrtcs	r0, [r1], -r3, lsr #2
    1fb4:	9f1c0073 	svcls	0x001c0073
    1fb8:	08001846 	stmdaeq	r0, {r1, r2, r6, fp, ip}
    1fbc:	08001848 	stmdaeq	r0, {r3, r6, fp, ip}
    1fc0:	01f30010 	mvnseq	r0, r0, lsl r0
    1fc4:	ffff0a52 			; <UNDEFINED> instruction: 0xffff0a52
    1fc8:	3101231a 	tstcc	r1, sl, lsl r3
    1fcc:	20007326 	andcs	r7, r0, r6, lsr #6
    1fd0:	18489f22 	stmdane	r8, {r1, r5, r8, r9, sl, fp, ip, pc}^
    1fd4:	184c0800 	stmdane	ip, {fp}^
    1fd8:	000f0800 	andeq	r0, pc, r0, lsl #16
    1fdc:	0a5201f3 	beq	14827b0 <__Stack_Size+0x14823b0>
    1fe0:	231affff 	tstcs	sl, #1020	; 0x3fc
    1fe4:	73263101 	teqvc	r6, #1073741824	; 0x40000000
    1fe8:	009f1c00 	addseq	r1, pc, r0, lsl #24
    1fec:	00000000 	andeq	r0, r0, r0
    1ff0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1ff4:	3a080018 	bcc	20205c <__Stack_Size+0x201c5c>
    1ff8:	01080018 	tsteq	r8, r8, lsl r0
    1ffc:	183e5100 	ldmdane	lr!, {r8, ip, lr}
    2000:	18480800 	stmdane	r8, {fp}^
    2004:	000a0800 	andeq	r0, sl, r0, lsl #16
    2008:	24320073 	ldrtcs	r0, [r2], #-115	; 0x73
    200c:	23220071 	teqcs	r2, #113	; 0x71
    2010:	18489f04 	stmdane	r8, {r2, r8, r9, sl, fp, ip, pc}^
    2014:	184a0800 	stmdane	sl, {fp}^
    2018:	000a0800 	andeq	r0, sl, r0, lsl #16
    201c:	24327f73 	ldrtcs	r7, [r2], #-3955	; 0xf73
    2020:	23220071 	teqcs	r2, #113	; 0x71
    2024:	00009f04 	andeq	r9, r0, r4, lsl #30
    2028:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	00000000 	andeq	r0, r0, r0
   8:	080000f0 	stmdaeq	r0, {r4, r5, r6, r7}
   c:	08000138 	stmdaeq	r0, {r3, r4, r5, r8}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	08000138 	stmdaeq	r0, {r3, r4, r5, r8}
  14:	0800013c 	stmdaeq	r0, {r2, r3, r4, r5, r8}
	...
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	0800013c 	stmdaeq	r0, {r2, r3, r4, r5, r8}
  24:	0800013e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8}
  28:	0800013e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8}
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	08000140 	stmdaeq	r0, {r6, r8}
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	08000140 	stmdaeq	r0, {r6, r8}
  34:	08000142 	stmdaeq	r0, {r1, r6, r8}
  38:	08000142 	stmdaeq	r0, {r1, r6, r8}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	0800014e 	stmdaeq	r0, {r1, r2, r3, r6, r8}
  48:	08000150 	stmdaeq	r0, {r4, r6, r8}
  4c:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}
  54:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
  58:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
  5c:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  60:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  64:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
  68:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
  6c:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
  70:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
  74:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
  78:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
  7c:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  80:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  84:	08000180 	stmdaeq	r0, {r7, r8}
  88:	08000180 	stmdaeq	r0, {r7, r8}
  8c:	08000228 	stmdaeq	r0, {r3, r5, r9}
  90:	08000228 	stmdaeq	r0, {r3, r5, r9}
  94:	08000288 	stmdaeq	r0, {r3, r7, r9}
  98:	08000288 	stmdaeq	r0, {r3, r7, r9}
  9c:	08000294 	stmdaeq	r0, {r2, r4, r7, r9}
  a0:	08000294 	stmdaeq	r0, {r2, r4, r7, r9}
  a4:	080002a0 	stmdaeq	r0, {r5, r7, r9}
  a8:	080002a0 	stmdaeq	r0, {r5, r7, r9}
  ac:	080002c0 	stmdaeq	r0, {r6, r7, r9}
  b0:	080002c0 	stmdaeq	r0, {r6, r7, r9}
  b4:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
  b8:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
  bc:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
  c0:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
  c4:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
  c8:	00000001 	andeq	r0, r0, r1
  cc:	00000001 	andeq	r0, r0, r1
  d0:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
  d4:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
  d8:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
  dc:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
  e0:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
  e4:	08000428 	stmdaeq	r0, {r3, r5, sl}
  e8:	08000428 	stmdaeq	r0, {r3, r5, sl}
  ec:	08000450 	stmdaeq	r0, {r4, r6, sl}
  f0:	08000450 	stmdaeq	r0, {r4, r6, sl}
  f4:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
  f8:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
  fc:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
 100:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
 104:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
 108:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
 10c:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
 110:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
 114:	080004f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl}
 118:	080004f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl}
 11c:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
	...
 128:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
 12c:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
	...
 138:	0800085a 	stmdaeq	r0, {r1, r3, r4, r6, fp}
 13c:	0800085e 	stmdaeq	r0, {r1, r2, r3, r4, r6, fp}
 140:	08000860 	stmdaeq	r0, {r5, r6, fp}
 144:	08000862 	stmdaeq	r0, {r1, r5, r6, fp}
	...
 150:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 154:	0800063a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl}
 158:	00000001 	andeq	r0, r0, r1
 15c:	00000001 	andeq	r0, r0, r1
 160:	0800063c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl}
 164:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
 168:	00000001 	andeq	r0, r0, r1
 16c:	00000001 	andeq	r0, r0, r1
 170:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
 174:	08000694 	stmdaeq	r0, {r2, r4, r7, r9, sl}
 178:	08000694 	stmdaeq	r0, {r2, r4, r7, r9, sl}
 17c:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
 180:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
 184:	0800070c 	stmdaeq	r0, {r2, r3, r8, r9, sl}
 188:	0800070c 	stmdaeq	r0, {r2, r3, r8, r9, sl}
 18c:	08000728 	stmdaeq	r0, {r3, r5, r8, r9, sl}
 190:	08000728 	stmdaeq	r0, {r3, r5, r8, r9, sl}
 194:	0800073c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl}
 198:	0800073c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl}
 19c:	08000754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl}
 1a0:	08000754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl}
 1a4:	08000780 	stmdaeq	r0, {r7, r8, r9, sl}
 1a8:	08000780 	stmdaeq	r0, {r7, r8, r9, sl}
 1ac:	080007c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl}
 1b0:	080007c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl}
 1b4:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
 1b8:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
 1bc:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
 1c0:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
 1c4:	08000880 	stmdaeq	r0, {r7, fp}
 1c8:	08000880 	stmdaeq	r0, {r7, fp}
 1cc:	08000894 	stmdaeq	r0, {r2, r4, r7, fp}
 1d0:	08000894 	stmdaeq	r0, {r2, r4, r7, fp}
 1d4:	080008c8 	stmdaeq	r0, {r3, r6, r7, fp}
 1d8:	00000001 	andeq	r0, r0, r1
 1dc:	00000001 	andeq	r0, r0, r1
 1e0:	080008c8 	stmdaeq	r0, {r3, r6, r7, fp}
 1e4:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
 1e8:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
 1ec:	08000920 	stmdaeq	r0, {r5, r8, fp}
 1f0:	08000920 	stmdaeq	r0, {r5, r8, fp}
 1f4:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
 1f8:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
 1fc:	0800094a 	stmdaeq	r0, {r1, r3, r6, r8, fp}
 200:	0800094c 	stmdaeq	r0, {r2, r3, r6, r8, fp}
 204:	0800095c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp}
 208:	0800095c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp}
 20c:	08000974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp}
	...
 218:	08000974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp}
 21c:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
 220:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
 224:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
 228:	00000001 	andeq	r0, r0, r1
 22c:	00000001 	andeq	r0, r0, r1
 230:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
 234:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
 238:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
 23c:	08000a44 	stmdaeq	r0, {r2, r6, r9, fp}
 240:	08000a44 	stmdaeq	r0, {r2, r6, r9, fp}
 244:	08000a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp}
 248:	08000a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp}
 24c:	08000aa0 	stmdaeq	r0, {r5, r7, r9, fp}
 250:	08000aa0 	stmdaeq	r0, {r5, r7, r9, fp}
 254:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
 258:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
 25c:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
 260:	00000001 	andeq	r0, r0, r1
 264:	00000001 	andeq	r0, r0, r1
 268:	00000001 	andeq	r0, r0, r1
 26c:	00000001 	andeq	r0, r0, r1
 270:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
 274:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
 278:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
 27c:	08000d28 	stmdaeq	r0, {r3, r5, r8, sl, fp}
	...
 288:	00000001 	andeq	r0, r0, r1
 28c:	00000001 	andeq	r0, r0, r1
 290:	00000001 	andeq	r0, r0, r1
 294:	00000001 	andeq	r0, r0, r1
	...
 2a0:	08000e22 	stmdaeq	r0, {r1, r5, r9, sl, fp}
 2a4:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
 2a8:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
 2ac:	08000e60 	stmdaeq	r0, {r5, r6, r9, sl, fp}
	...
 2b8:	00000001 	andeq	r0, r0, r1
 2bc:	00000001 	andeq	r0, r0, r1
 2c0:	00000001 	andeq	r0, r0, r1
 2c4:	00000001 	andeq	r0, r0, r1
	...
 2d0:	00000001 	andeq	r0, r0, r1
 2d4:	00000001 	andeq	r0, r0, r1
 2d8:	00000001 	andeq	r0, r0, r1
 2dc:	00000001 	andeq	r0, r0, r1
	...
 2e8:	00000001 	andeq	r0, r0, r1
 2ec:	00000001 	andeq	r0, r0, r1
 2f0:	00000001 	andeq	r0, r0, r1
 2f4:	00000001 	andeq	r0, r0, r1
 2f8:	00000001 	andeq	r0, r0, r1
 2fc:	00000001 	andeq	r0, r0, r1
	...
 308:	00000001 	andeq	r0, r0, r1
 30c:	00000001 	andeq	r0, r0, r1
 310:	00000001 	andeq	r0, r0, r1
 314:	00000001 	andeq	r0, r0, r1
	...
 320:	00000001 	andeq	r0, r0, r1
 324:	00000001 	andeq	r0, r0, r1
 328:	00000001 	andeq	r0, r0, r1
 32c:	00000001 	andeq	r0, r0, r1
	...
 338:	00000001 	andeq	r0, r0, r1
 33c:	00000001 	andeq	r0, r0, r1
 340:	00000001 	andeq	r0, r0, r1
 344:	00000001 	andeq	r0, r0, r1
 348:	00000001 	andeq	r0, r0, r1
 34c:	00000001 	andeq	r0, r0, r1
 350:	00000001 	andeq	r0, r0, r1
 354:	00000001 	andeq	r0, r0, r1
 358:	00000001 	andeq	r0, r0, r1
 35c:	00000001 	andeq	r0, r0, r1
 360:	00000001 	andeq	r0, r0, r1
 364:	00000001 	andeq	r0, r0, r1
 368:	00000001 	andeq	r0, r0, r1
 36c:	00000001 	andeq	r0, r0, r1
 370:	00000001 	andeq	r0, r0, r1
 374:	00000001 	andeq	r0, r0, r1
 378:	00000001 	andeq	r0, r0, r1
 37c:	00000001 	andeq	r0, r0, r1
 380:	00000001 	andeq	r0, r0, r1
 384:	00000001 	andeq	r0, r0, r1
 388:	00000001 	andeq	r0, r0, r1
 38c:	00000001 	andeq	r0, r0, r1
 390:	00000001 	andeq	r0, r0, r1
 394:	00000001 	andeq	r0, r0, r1
 398:	00000001 	andeq	r0, r0, r1
 39c:	00000001 	andeq	r0, r0, r1
 3a0:	08000d28 	stmdaeq	r0, {r3, r5, r8, sl, fp}
 3a4:	08000d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp}
 3a8:	00000001 	andeq	r0, r0, r1
 3ac:	00000001 	andeq	r0, r0, r1
 3b0:	00000001 	andeq	r0, r0, r1
 3b4:	00000001 	andeq	r0, r0, r1
 3b8:	00000001 	andeq	r0, r0, r1
 3bc:	00000001 	andeq	r0, r0, r1
 3c0:	00000001 	andeq	r0, r0, r1
 3c4:	00000001 	andeq	r0, r0, r1
 3c8:	00000001 	andeq	r0, r0, r1
 3cc:	00000001 	andeq	r0, r0, r1
 3d0:	08000d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp}
 3d4:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
 3d8:	00000001 	andeq	r0, r0, r1
 3dc:	00000001 	andeq	r0, r0, r1
 3e0:	00000001 	andeq	r0, r0, r1
 3e4:	00000001 	andeq	r0, r0, r1
 3e8:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
 3ec:	08000d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp}
 3f0:	00000001 	andeq	r0, r0, r1
 3f4:	00000001 	andeq	r0, r0, r1
 3f8:	00000001 	andeq	r0, r0, r1
 3fc:	00000001 	andeq	r0, r0, r1
 400:	00000001 	andeq	r0, r0, r1
 404:	00000001 	andeq	r0, r0, r1
 408:	00000001 	andeq	r0, r0, r1
 40c:	00000001 	andeq	r0, r0, r1
 410:	00000001 	andeq	r0, r0, r1
 414:	00000001 	andeq	r0, r0, r1
 418:	00000001 	andeq	r0, r0, r1
 41c:	00000001 	andeq	r0, r0, r1
 420:	00000001 	andeq	r0, r0, r1
 424:	00000001 	andeq	r0, r0, r1
 428:	00000001 	andeq	r0, r0, r1
 42c:	00000001 	andeq	r0, r0, r1
 430:	00000001 	andeq	r0, r0, r1
 434:	00000001 	andeq	r0, r0, r1
 438:	08000d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp}
 43c:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 440:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 444:	08000dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp}
 448:	00000001 	andeq	r0, r0, r1
 44c:	00000001 	andeq	r0, r0, r1
 450:	00000001 	andeq	r0, r0, r1
 454:	00000001 	andeq	r0, r0, r1
 458:	00000001 	andeq	r0, r0, r1
 45c:	00000001 	andeq	r0, r0, r1
 460:	00000001 	andeq	r0, r0, r1
 464:	00000001 	andeq	r0, r0, r1
 468:	08000dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp}
 46c:	08000de8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, fp}
 470:	08000de8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, fp}
 474:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
 478:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
 47c:	08000e20 	stmdaeq	r0, {r5, r9, sl, fp}
 480:	00000001 	andeq	r0, r0, r1
 484:	00000001 	andeq	r0, r0, r1
 488:	08000e20 	stmdaeq	r0, {r5, r9, sl, fp}
 48c:	08000e60 	stmdaeq	r0, {r5, r6, r9, sl, fp}
 490:	00000001 	andeq	r0, r0, r1
 494:	00000001 	andeq	r0, r0, r1
 498:	00000001 	andeq	r0, r0, r1
 49c:	00000001 	andeq	r0, r0, r1
 4a0:	00000001 	andeq	r0, r0, r1
 4a4:	00000001 	andeq	r0, r0, r1
 4a8:	00000001 	andeq	r0, r0, r1
 4ac:	00000001 	andeq	r0, r0, r1
 4b0:	00000001 	andeq	r0, r0, r1
 4b4:	00000001 	andeq	r0, r0, r1
 4b8:	00000001 	andeq	r0, r0, r1
 4bc:	00000001 	andeq	r0, r0, r1
 4c0:	00000001 	andeq	r0, r0, r1
 4c4:	00000001 	andeq	r0, r0, r1
 4c8:	00000001 	andeq	r0, r0, r1
 4cc:	00000001 	andeq	r0, r0, r1
 4d0:	00000001 	andeq	r0, r0, r1
 4d4:	00000001 	andeq	r0, r0, r1
 4d8:	00000001 	andeq	r0, r0, r1
 4dc:	00000001 	andeq	r0, r0, r1
 4e0:	00000001 	andeq	r0, r0, r1
 4e4:	00000001 	andeq	r0, r0, r1
 4e8:	00000001 	andeq	r0, r0, r1
 4ec:	00000001 	andeq	r0, r0, r1
 4f0:	00000001 	andeq	r0, r0, r1
 4f4:	00000001 	andeq	r0, r0, r1
 4f8:	00000001 	andeq	r0, r0, r1
 4fc:	00000001 	andeq	r0, r0, r1
 500:	00000001 	andeq	r0, r0, r1
 504:	00000001 	andeq	r0, r0, r1
 508:	00000001 	andeq	r0, r0, r1
 50c:	00000001 	andeq	r0, r0, r1
	...
 518:	08000e60 	stmdaeq	r0, {r5, r6, r9, sl, fp}
 51c:	08000fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp}
 520:	00000001 	andeq	r0, r0, r1
 524:	00000001 	andeq	r0, r0, r1
	...
 530:	08000fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp}
 534:	08000fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp}
	...
 540:	080012f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip}
 544:	080012fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, ip}
 548:	08001300 	stmdaeq	r0, {r8, r9, ip}
 54c:	08001302 	stmdaeq	r0, {r1, r8, r9, ip}
 550:	08001304 	stmdaeq	r0, {r2, r8, r9, ip}
 554:	08001314 	stmdaeq	r0, {r2, r4, r8, r9, ip}
	...
 560:	080014ca 	stmdaeq	r0, {r1, r3, r6, r7, sl, ip}
 564:	08001674 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, ip}
 568:	0800167c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip}
 56c:	0800169c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip}
	...
 578:	08000fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp}
 57c:	08001010 	stmdaeq	r0, {r4, ip}
 580:	08001010 	stmdaeq	r0, {r4, ip}
 584:	08001034 	stmdaeq	r0, {r2, r4, r5, ip}
 588:	08001034 	stmdaeq	r0, {r2, r4, r5, ip}
 58c:	080010c4 	stmdaeq	r0, {r2, r6, r7, ip}
 590:	080010c4 	stmdaeq	r0, {r2, r6, r7, ip}
 594:	0800116c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip}
 598:	0800116c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip}
 59c:	080011a4 	stmdaeq	r0, {r2, r5, r7, r8, ip}
 5a0:	080011a4 	stmdaeq	r0, {r2, r5, r7, r8, ip}
 5a4:	080011ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip}
 5a8:	080011ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip}
 5ac:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
 5b0:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
 5b4:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
 5b8:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
 5bc:	08001364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip}
 5c0:	08001364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip}
 5c4:	08001380 	stmdaeq	r0, {r7, r8, r9, ip}
 5c8:	08001380 	stmdaeq	r0, {r7, r8, r9, ip}
 5cc:	080013c0 	stmdaeq	r0, {r6, r7, r8, r9, ip}
 5d0:	080013c0 	stmdaeq	r0, {r6, r7, r8, r9, ip}
 5d4:	0800169c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip}
 5d8:	0800169c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip}
 5dc:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
 5e0:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
 5e4:	0800179c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip}
 5e8:	0800179c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip}
 5ec:	080017f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, ip}
 5f0:	00000001 	andeq	r0, r0, r1
 5f4:	00000001 	andeq	r0, r0, r1
	...
 600:	080017f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, ip}
 604:	08001828 	stmdaeq	r0, {r3, r5, fp, ip}
 608:	08001828 	stmdaeq	r0, {r3, r5, fp, ip}
 60c:	0800184c 	stmdaeq	r0, {r2, r3, r6, fp, ip}
	...
