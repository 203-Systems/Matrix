
build/maple_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000f0  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001750  080000f0  080000f0  000080f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000001c4  20000000  08001840  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000044  200001c4  08001a04  000101c4  2**2
                  ALLOC
  4 .bss.bIntPackSOF 00000001  20000208  08001a48  000101c4  2**0
                  ALLOC
  5 .bss.bDeviceState 00000004  2000020c  08001a4c  000101c4  2**2
                  ALLOC
  6 .bss.recvBuffer 00000800  20000210  08001a50  000101c4  2**2
                  ALLOC
  7 .bss.uploadBlockLen 00000002  20000a10  08002250  000101c4  2**1
                  ALLOC
  8 .bss.thisBlockLen 00000002  20000a12  08002252  000101c4  2**1
                  ALLOC
  9 .bss.userFirmwareLen 00000004  20000a14  08002254  000101c4  2**2
                  ALLOC
 10 .bss.userUploadType 00000001  20000a18  08002258  000101c4  2**0
                  ALLOC
 11 .bss.dfuAppStatus 00000006  20000a19  08002259  000101c4  2**0
                  ALLOC
 12 .bss.dfuBusy  00000001  20000a1f  0800225f  000101c4  2**0
                  ALLOC
 13 .bss.Data_Mul_MaxPacketSize 00000001  20000a20  08002260  000101c4  2**0
                  ALLOC
 14 ._usrstack    00000103  20000a21  08002261  000101c4  2**0
                  ALLOC
 15 .comment      00000080  00000000  00000000  000101c4  2**0
                  CONTENTS, READONLY
 16 .ARM.attributes 0000002f  00000000  00000000  00010244  2**0
                  CONTENTS, READONLY
 17 .debug_aranges 000005e8  00000000  00000000  00010278  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_info   000045a7  00000000  00000000  00010860  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00001479  00000000  00000000  00014e07  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00001484  00000000  00000000  00016280  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  00000c70  00000000  00000000  00017704  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    000017f9  00000000  00000000  00018374  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0000201a  00000000  00000000  00019b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_ranges 00000618  00000000  00000000  0001bb88  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20005000 	andcs	r5, r0, r0
 8000004:	080000f1 	stmdaeq	r0, {r0, r4, r5, r6, r7}
 8000008:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800000c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000010:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000014:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000018:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
	...
 800002c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000030:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800003c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000040:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000044:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000048:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800004c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000050:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000054:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000058:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800005c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000060:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000064:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000068:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800006c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000070:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000074:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000078:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800007c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000080:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000084:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000088:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800008c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000090:	080004f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, sl}
 8000094:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000098:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800009c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000a0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000a4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000a8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000ac:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000b0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000b4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000b8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000bc:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000c0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000c4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000c8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000cc:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000d0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000d4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000d8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000dc:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000e0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000e4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000e8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000ec:	f108f85f 			; <UNDEFINED> instruction: 0xf108f85f

Disassembly of section .text:

080000f0 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80000f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80000f2:	f000 b804 	b.w	80000fe <LoopCopyDataInit>

080000f6 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80000f6:	4b0b      	ldr	r3, [pc, #44]	; (8000124 <LoopFillZerobss+0xe>)
	ldr	r3, [r3, r1]
 80000f8:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80000fa:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80000fc:	3104      	adds	r1, #4

080000fe <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80000fe:	480a      	ldr	r0, [pc, #40]	; (8000128 <LoopFillZerobss+0x12>)
	ldr	r3, =_edata
 8000100:	4b0a      	ldr	r3, [pc, #40]	; (800012c <LoopFillZerobss+0x16>)
	adds	r2, r0, r1
 8000102:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000104:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000106:	f4ff aff6 	bcc.w	80000f6 <CopyDataInit>
	ldr	r2, =_sbss
 800010a:	4a09      	ldr	r2, [pc, #36]	; (8000130 <LoopFillZerobss+0x1a>)
	b	LoopFillZerobss
 800010c:	f000 b803 	b.w	8000116 <LoopFillZerobss>

08000110 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000110:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000112:	f842 3b04 	str.w	r3, [r2], #4

08000116 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000116:	4b07      	ldr	r3, [pc, #28]	; (8000134 <LoopFillZerobss+0x1e>)
	cmp	r2, r3
 8000118:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800011a:	f4ff aff9 	bcc.w	8000110 <FillZerobss>
/* Call the application's entry point.*/
	bl	main
 800011e:	f000 fa45 	bl	80005ac <main>
	bx	lr
 8000122:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000124:	08001840 	stmdaeq	r0, {r6, fp, ip}
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000128:	20000000 	andcs	r0, r0, r0
	ldr	r3, =_edata
 800012c:	200001c4 	andcs	r0, r0, r4, asr #3
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000130:	200001c4 	andcs	r0, r0, r4, asr #3
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000134:	20000208 	andcs	r0, r0, r8, lsl #4

08000138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000138:	f7ff bffe 	b.w	8000138 <ADC1_2_IRQHandler>

0800013c <nothingProc>:
    volatile RESUME_STATE eState;
    volatile u8 bESOFcnt;
} ResumeS;

/* dummy proc */
void nothingProc(void) {
 800013c:	4770      	bx	lr

0800013e <usbStatusIn>:

    bDeviceState = ATTACHED;
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
}

void usbStatusIn(void) {
 800013e:	4770      	bx	lr

08000140 <usbStatusOut>:
}

void usbStatusOut(void) {
 8000140:	4770      	bx	lr

08000142 <usbGetInterfaceSetting>:
}

RESULT usbGetInterfaceSetting(u8 interface, u8 altSetting) {
    /* alt setting 0 -> program RAM, alt setting 1 -> FLASH */
    if (interface > NUM_ALT_SETTINGS) {
        return USB_UNSUPPORT;
 8000142:	2803      	cmp	r0, #3
    } else {
        return USB_SUCCESS;
    }
}
 8000144:	bf8c      	ite	hi
 8000146:	2002      	movhi	r0, #2
 8000148:	2000      	movls	r0, #0
 800014a:	4770      	bx	lr

0800014c <usbGetConfiguration>:
 * These are the USER STANDARD REQUESTS, they are handled
 * in the core but we are given these callbacks at the
 * application level
 *******************************************/

void usbGetConfiguration(void) {
 800014c:	4770      	bx	lr
	...

08000150 <usbSetConfiguration>:
    /* nothing process */
}

void usbSetConfiguration(void) {
    if (pInformation->Current_Configuration != 0) {
 8000150:	4b03      	ldr	r3, [pc, #12]	; (8000160 <usbSetConfiguration+0x10>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	7a9b      	ldrb	r3, [r3, #10]
 8000156:	b113      	cbz	r3, 800015e <usbSetConfiguration+0xe>
        bDeviceState = CONFIGURED;
 8000158:	4b02      	ldr	r3, [pc, #8]	; (8000164 <usbSetConfiguration+0x14>)
 800015a:	2205      	movs	r2, #5
 800015c:	601a      	str	r2, [r3, #0]
 800015e:	4770      	bx	lr
 8000160:	20000200 	andcs	r0, r0, r0, lsl #4
 8000164:	2000020c 	andcs	r0, r0, ip, lsl #4

08000168 <usbGetInterface>:
    }
}

void usbGetInterface(void) {
 8000168:	4770      	bx	lr

0800016a <usbSetInterface>:
    /* nothing process */
}

void usbSetInterface(void) {
 800016a:	4770      	bx	lr

0800016c <usbGetStatus>:
    /* nothing process */
}

void usbGetStatus(void) {
 800016c:	4770      	bx	lr

0800016e <usbClearFeature>:
    /* nothing process */
}

void usbClearFeature(void) {
 800016e:	4770      	bx	lr

08000170 <usbSetEndpointFeature>:
    /* nothing process */
}

void usbSetEndpointFeature(void) {
 8000170:	4770      	bx	lr

08000172 <usbSetDeviceFeature>:
    /* nothing process */
}

void usbSetDeviceFeature(void) {
 8000172:	4770      	bx	lr

08000174 <usbSetDeviceAddress>:
    /* nothing process */
}

void usbSetDeviceAddress(void) {
    bDeviceState = ADDRESSED;
 8000174:	4b01      	ldr	r3, [pc, #4]	; (800017c <usbSetDeviceAddress+0x8>)
 8000176:	2204      	movs	r2, #4
 8000178:	601a      	str	r2, [r3, #0]
 800017a:	4770      	bx	lr
 800017c:	2000020c 	andcs	r0, r0, ip, lsl #4

08000180 <usbReset>:

    usbEnbISR(); /* configure the cortex M3 private peripheral NVIC */
    bDeviceState = UNCONNECTED;
}

void usbReset(void) {
 8000180:	b510      	push	{r4, lr}
    dfuUpdateByReset();
 8000182:	f000 fc25 	bl	80009d0 <dfuUpdateByReset>

    pInformation->Current_Configuration = 0;
 8000186:	4b21      	ldr	r3, [pc, #132]	; (800020c <usbReset+0x8c>)
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000188:	4a21      	ldr	r2, [pc, #132]	; (8000210 <usbReset+0x90>)
}

void usbReset(void) {
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2400      	movs	r4, #0
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 800018e:	6812      	ldr	r2, [r2, #0]
}

void usbReset(void) {
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 8000190:	729c      	strb	r4, [r3, #10]
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000192:	79d2      	ldrb	r2, [r2, #7]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);

    Clear_Status_Out(ENDP0);
 8000194:	4620      	mov	r0, r4

void usbReset(void) {
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000196:	725a      	strb	r2, [r3, #9]

    _SetBTABLE(BTABLE_ADDRESS);
 8000198:	4a1e      	ldr	r2, [pc, #120]	; (8000214 <usbReset+0x94>)

    /* setup the ctrl endpoint */
    _SetEPType(ENDP0, EP_CONTROL);
 800019a:	4b1f      	ldr	r3, [pc, #124]	; (8000218 <usbReset+0x98>)
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];

    _SetBTABLE(BTABLE_ADDRESS);
 800019c:	6014      	str	r4, [r2, #0]

    /* setup the ctrl endpoint */
    _SetEPType(ENDP0, EP_CONTROL);
 800019e:	6819      	ldr	r1, [r3, #0]
 80001a0:	f421 41ec 	bic.w	r1, r1, #30208	; 0x7600
 80001a4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80001a8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80001ac:	b289      	uxth	r1, r1
 80001ae:	6019      	str	r1, [r3, #0]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);
 80001b0:	6819      	ldr	r1, [r3, #0]
 80001b2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80001b6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80001ba:	b289      	uxth	r1, r1
 80001bc:	f081 0110 	eor.w	r1, r1, #16
 80001c0:	6019      	str	r1, [r3, #0]

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 80001c2:	6811      	ldr	r1, [r2, #0]
 80001c4:	4b15      	ldr	r3, [pc, #84]	; (800021c <usbReset+0x9c>)
 80001c6:	b289      	uxth	r1, r1
 80001c8:	440b      	add	r3, r1
 80001ca:	005b      	lsls	r3, r3, #1
 80001cc:	2140      	movs	r1, #64	; 0x40
 80001ce:	6019      	str	r1, [r3, #0]
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 80001d0:	6813      	ldr	r3, [r2, #0]
 80001d2:	2280      	movs	r2, #128	; 0x80
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80001da:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80001de:	005b      	lsls	r3, r3, #1
 80001e0:	601a      	str	r2, [r3, #0]

    Clear_Status_Out(ENDP0);
 80001e2:	f000 fdbf 	bl	8000d64 <Clear_Status_Out>

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
 80001e6:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <usbReset+0xa0>)
 80001e8:	4620      	mov	r0, r4
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80001f0:	f000 fe10 	bl	8000e14 <SetEPRxCount>
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);
 80001f4:	4620      	mov	r0, r4
 80001f6:	f000 fda6 	bl	8000d46 <SetEPRxValid>

    bDeviceState = ATTACHED;
 80001fa:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <usbReset+0xa4>)
 80001fc:	2201      	movs	r2, #1
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 80001fe:	4620      	mov	r0, r4
}
 8000200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);

    bDeviceState = ATTACHED;
 8000204:	601a      	str	r2, [r3, #0]
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 8000206:	f001 baa7 	b.w	8001758 <SetDeviceAddress>
 800020a:	bf00      	nop
 800020c:	20000200 	andcs	r0, r0, r0, lsl #4
 8000210:	200001b4 			; <UNDEFINED> instruction: 0x200001b4
 8000214:	40005c50 	andmi	r5, r0, r0, asr ip
 8000218:	40005c00 	andmi	r5, r0, r0, lsl #24
 800021c:	20003004 	andcs	r3, r0, r4
 8000220:	200001d8 	ldrdcs	r0, [r0], -r8
 8000224:	2000020c 	andcs	r0, r0, ip, lsl #4

08000228 <usbDataSetup>:
}

void usbStatusOut(void) {
}

RESULT usbDataSetup(u8 request) {
 8000228:	b538      	push	{r3, r4, r5, lr}
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    /* handle dfu class requests */
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 800022a:	4b12      	ldr	r3, [pc, #72]	; (8000274 <usbDataSetup+0x4c>)
}

void usbStatusOut(void) {
}

RESULT usbDataSetup(u8 request) {
 800022c:	4605      	mov	r5, r0
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    /* handle dfu class requests */
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	461c      	mov	r4, r3
 8000232:	7812      	ldrb	r2, [r2, #0]
 8000234:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000238:	2a21      	cmp	r2, #33	; 0x21
 800023a:	d119      	bne.n	8000270 <usbDataSetup+0x48>
        if (dfuUpdateByRequest()) {
 800023c:	f000 fc5e 	bl	8000afc <dfuUpdateByRequest>
 8000240:	b1b0      	cbz	r0, 8000270 <usbDataSetup+0x48>
            /* successfull state transition, handle the request */
            switch (request) {
 8000242:	1e68      	subs	r0, r5, #1
 8000244:	2804      	cmp	r0, #4
 8000246:	d813      	bhi.n	8000270 <usbDataSetup+0x48>
 8000248:	e8df f000 	tbb	[pc, r0]
 800024c:	12070503 	andne	r0, r7, #12582912	; 0xc00000
 8000250:	4b090009 	blmi	824027c <_etext+0x23ea3c>
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
                break;
            case(DFU_DNLOAD):
                CopyRoutine = dfuCopyDNLOAD;
                break;
 8000254:	e004      	b.n	8000260 <usbDataSetup+0x38>
            case(DFU_UPLOAD):
                CopyRoutine = dfuCopyUPLOAD;
 8000256:	4b09      	ldr	r3, [pc, #36]	; (800027c <usbDataSetup+0x54>)
                break;
 8000258:	e002      	b.n	8000260 <usbDataSetup+0x38>
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
        if (dfuUpdateByRequest()) {
            /* successfull state transition, handle the request */
            switch (request) {
            case(DFU_GETSTATUS):
                CopyRoutine = dfuCopyStatus;
 800025a:	4b09      	ldr	r3, [pc, #36]	; (8000280 <usbDataSetup+0x58>)
 800025c:	e000      	b.n	8000260 <usbDataSetup+0x38>
                break;
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <usbDataSetup+0x5c>)
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000260:	6822      	ldr	r2, [r4, #0]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000262:	2400      	movs	r4, #0
        (*CopyRoutine)(0);
 8000264:	4620      	mov	r0, r4
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000266:	6193      	str	r3, [r2, #24]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000268:	8254      	strh	r4, [r2, #18]
        (*CopyRoutine)(0);
 800026a:	4798      	blx	r3

        return USB_SUCCESS;
 800026c:	4620      	mov	r0, r4
 800026e:	bd38      	pop	{r3, r4, r5, pc}
    }

    return USB_UNSUPPORT;
 8000270:	2002      	movs	r0, #2
}
 8000272:	bd38      	pop	{r3, r4, r5, pc}
 8000274:	20000200 	andcs	r0, r0, r0, lsl #4
 8000278:	08000a45 	stmdaeq	r0, {r0, r2, r6, r9, fp}
 800027c:	08000a6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, fp}
 8000280:	08000a2d 	stmdaeq	r0, {r0, r2, r3, r5, r9, fp}
 8000284:	08000a15 	stmdaeq	r0, {r0, r2, r4, r9, fp}

08000288 <usbGetDeviceDescriptor>:
        return USB_SUCCESS;
    }
}

u8 *usbGetDeviceDescriptor(u16 len) {
    return Standard_GetDescriptorData(len, &usbDeviceDescriptorDFU);
 8000288:	4901      	ldr	r1, [pc, #4]	; (8000290 <usbGetDeviceDescriptor+0x8>)
 800028a:	f001 b865 	b.w	8001358 <Standard_GetDescriptorData>
 800028e:	bf00      	nop
 8000290:	20000144 	andcs	r0, r0, r4, asr #2

08000294 <usbGetConfigDescriptor>:
}

u8 *usbGetConfigDescriptor(u16 len) {
    return Standard_GetDescriptorData(len, &usbConfigDescriptorDFU);
 8000294:	4901      	ldr	r1, [pc, #4]	; (800029c <usbGetConfigDescriptor+0x8>)
 8000296:	f001 b85f 	b.w	8001358 <Standard_GetDescriptorData>
 800029a:	bf00      	nop
 800029c:	200001b4 			; <UNDEFINED> instruction: 0x200001b4

080002a0 <usbGetStringDescriptor>:
}

u8 *usbGetStringDescriptor(u16 len) {
    u8 strIndex = pInformation->USBwValue0;
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <usbGetStringDescriptor+0x18>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	789b      	ldrb	r3, [r3, #2]
    if (strIndex > STR_DESC_LEN) {
 80002a6:	2b07      	cmp	r3, #7
 80002a8:	d804      	bhi.n	80002b4 <usbGetStringDescriptor+0x14>
        return NULL;
    } else {
        return Standard_GetDescriptorData(len, &usbStringDescriptor[strIndex]);
 80002aa:	4904      	ldr	r1, [pc, #16]	; (80002bc <usbGetStringDescriptor+0x1c>)
 80002ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80002b0:	f001 b852 	b.w	8001358 <Standard_GetDescriptorData>
    }
}
 80002b4:	2000      	movs	r0, #0
 80002b6:	4770      	bx	lr
 80002b8:	20000200 	andcs	r0, r0, r0, lsl #4
 80002bc:	20000094 	mulcs	r0, r4, r0

080002c0 <usbGetFunctionalDescriptor>:

u8 *usbGetFunctionalDescriptor(u16 len) {
    return Standard_GetDescriptorData(len, &usbFunctionalDescriptor);
 80002c0:	4901      	ldr	r1, [pc, #4]	; (80002c8 <usbGetFunctionalDescriptor+0x8>)
 80002c2:	f001 b849 	b.w	8001358 <Standard_GetDescriptorData>
 80002c6:	bf00      	nop
 80002c8:	200000e0 	andcs	r0, r0, r0, ror #1

080002cc <usbNoDataSetup>:
    }

    return USB_UNSUPPORT;
}

RESULT usbNoDataSetup(u8 request) {
 80002cc:	b508      	push	{r3, lr}
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 80002ce:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <usbNoDataSetup+0x24>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002d8:	2b21      	cmp	r3, #33	; 0x21
 80002da:	d106      	bne.n	80002ea <usbNoDataSetup+0x1e>
        /* todo, keep track of the destination interface, often stored in wIndex */
        if (dfuUpdateByRequest()) {
 80002dc:	f000 fc0e 	bl	8000afc <dfuUpdateByRequest>
 80002e0:	2800      	cmp	r0, #0
            return USB_SUCCESS;
 80002e2:	bf0c      	ite	eq
 80002e4:	2002      	moveq	r0, #2
 80002e6:	2000      	movne	r0, #0
 80002e8:	bd08      	pop	{r3, pc}
        }
    }
    return USB_UNSUPPORT;
 80002ea:	2002      	movs	r0, #2
}
 80002ec:	bd08      	pop	{r3, pc}
 80002ee:	bf00      	nop
 80002f0:	20000200 	andcs	r0, r0, r0, lsl #4

080002f4 <setupUSB>:


extern u8 u8_usbConfigDescriptorDFU[];
extern u8 u8_usbFunctionalDescriptor[];

void setupUSB (void) {
 80002f4:	b537      	push	{r0, r1, r2, r4, r5, lr}

/* Generic boards don't have disconnect hardware, so we drive PA12 which is connected to the usb D+ line*/
#define USB_DISC_BANK         GPIOA
#define USB_DISC_PIN              12

    SET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN),(GET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN)) & crMask(USB_DISC_PIN)) | CR_OUTPUT_PP << CR_SHITF(USB_DISC_PIN));
 80002f6:	4c19      	ldr	r4, [pc, #100]	; (800035c <setupUSB+0x68>)
 80002f8:	200c      	movs	r0, #12
 80002fa:	6825      	ldr	r5, [r4, #0]
 80002fc:	f000 fb1c 	bl	8000938 <crMask>
 8000300:	4028      	ands	r0, r5
 8000302:	f440 3580 	orr.w	r5, r0, #65536	; 0x10000
 8000306:	6025      	str	r5, [r4, #0]

    gpio_write_bit(USB_DISC_BANK,USB_DISC_PIN,0);  /* present ourselves to the host */
 8000308:	4815      	ldr	r0, [pc, #84]	; (8000360 <setupUSB+0x6c>)
 800030a:	210c      	movs	r1, #12
 800030c:	2200      	movs	r2, #0
 800030e:	f000 f989 	bl	8000624 <gpio_write_bit>

    volatile unsigned int delay;
    for(delay = 0;delay<512;delay++);
 8000312:	2300      	movs	r3, #0
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	9b01      	ldr	r3, [sp, #4]
 8000318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800031c:	d202      	bcs.n	8000324 <setupUSB+0x30>
 800031e:	9b01      	ldr	r3, [sp, #4]
 8000320:	3301      	adds	r3, #1
 8000322:	e7f7      	b.n	8000314 <setupUSB+0x20>

    //  volatile unsigned x = 1024; do { ; }while(--x);// wait a moment
    /* turn on the USB clock */
    SET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN),
 8000324:	200c      	movs	r0, #12
 8000326:	6825      	ldr	r5, [r4, #0]
 8000328:	f000 fb06 	bl	8000938 <crMask>
 800032c:	4028      	ands	r0, r5
 800032e:	f440 2580 	orr.w	r5, r0, #262144	; 0x40000
 8000332:	6025      	str	r5, [r4, #0]
        (GET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN)) & crMask(USB_DISC_PIN)) | CR_INPUT << CR_SHITF(USB_DISC_PIN)); //Sets the PA12 as floating input
    //  pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
#endif
    /* initialize the usb application */

    wTransferSize=getFlashPageSize();
 8000334:	f000 fb12 	bl	800095c <getFlashPageSize>
 8000338:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <setupUSB+0x70>)
    u8_usbConfigDescriptorDFU[41]=(wTransferSize & 0x00FF);
 800033a:	b2c2      	uxtb	r2, r0
        (GET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN)) & crMask(USB_DISC_PIN)) | CR_INPUT << CR_SHITF(USB_DISC_PIN)); //Sets the PA12 as floating input
    //  pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
#endif
    /* initialize the usb application */

    wTransferSize=getFlashPageSize();
 800033c:	6018      	str	r0, [r3, #0]
    u8_usbConfigDescriptorDFU[41]=(wTransferSize & 0x00FF);
 800033e:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <setupUSB+0x74>)
    u8_usbConfigDescriptorDFU[42]=(wTransferSize & 0xFF00)>>8;
 8000340:	f3c0 2007 	ubfx	r0, r0, #8, #8
    //  pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
#endif
    /* initialize the usb application */

    wTransferSize=getFlashPageSize();
    u8_usbConfigDescriptorDFU[41]=(wTransferSize & 0x00FF);
 8000344:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8_usbConfigDescriptorDFU[42]=(wTransferSize & 0xFF00)>>8;
 8000348:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a

    u8_usbFunctionalDescriptor[5]=(wTransferSize & 0x00FF);
 800034c:	4b07      	ldr	r3, [pc, #28]	; (800036c <setupUSB+0x78>)
 800034e:	715a      	strb	r2, [r3, #5]
    u8_usbFunctionalDescriptor[6]=(wTransferSize & 0xFF00)>>8;
 8000350:	7198      	strb	r0, [r3, #6]

/* Function Definitions */
void usbAppInit(void) {
    /* hook in to usb_core, depends on all those damn
       non encapsulated externs! */
    USB_Init();
 8000352:	f000 fe29 	bl	8000fa8 <USB_Init>
    u8_usbFunctionalDescriptor[5]=(wTransferSize & 0x00FF);
    u8_usbFunctionalDescriptor[6]=(wTransferSize & 0xFF00)>>8;

    usbAppInit();

}
 8000356:	b003      	add	sp, #12
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	bf00      	nop
 800035c:	40010804 	andmi	r0, r1, r4, lsl #16
 8000360:	40010800 	andmi	r0, r1, r0, lsl #16
 8000364:	200001c4 	andcs	r0, r0, r4, asr #3
 8000368:	200000ec 	andcs	r0, r0, ip, ror #1
 800036c:	2000011b 	andcs	r0, r0, fp, lsl r1

08000370 <usbSuspend>:
    USB_Init();
}

void usbSuspend(void) {
    u16 wCNTR;
    wCNTR = _GetCNTR();
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <usbSuspend+0x14>)
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	b292      	uxth	r2, r2
    wCNTR |= CNTR_FSUSP | CNTR_LPMODE;
    _SetCNTR(wCNTR);
 8000376:	f042 020c 	orr.w	r2, r2, #12
 800037a:	601a      	str	r2, [r3, #0]

    /* run any power reduction handlers */
    bDeviceState = SUSPENDED;
 800037c:	4b02      	ldr	r3, [pc, #8]	; (8000388 <usbSuspend+0x18>)
 800037e:	2203      	movs	r2, #3
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	4770      	bx	lr
 8000384:	40005c40 	andmi	r5, r0, r0, asr #24
 8000388:	2000020c 	andcs	r0, r0, ip, lsl #4

0800038c <usbResumeInit>:
void usbResumeInit(void) {
    u16 wCNTR;

    /* restart any clocks that had been stopped */

    wCNTR = _GetCNTR();
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <usbResumeInit+0x14>)
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 800038e:	f64f 72fb 	movw	r2, #65531	; 0xfffb
void usbResumeInit(void) {
    u16 wCNTR;

    /* restart any clocks that had been stopped */

    wCNTR = _GetCNTR();
 8000392:	6819      	ldr	r1, [r3, #0]
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000394:	400a      	ands	r2, r1
 8000396:	601a      	str	r2, [r3, #0]

    /* undo power reduction handlers here */

    _SetCNTR(ISR_MSK);
 8000398:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	4770      	bx	lr
 80003a0:	40005c40 	andmi	r5, r0, r0, asr #24

080003a4 <usbResume>:
}

void usbResume(RESUME_STATE eResumeSetVal) {
 80003a4:	b510      	push	{r4, lr}
 80003a6:	4c1e      	ldr	r4, [pc, #120]	; (8000420 <usbResume+0x7c>)
    u16 wCNTR;

    if (eResumeSetVal != RESUME_ESOF)
 80003a8:	2807      	cmp	r0, #7
        ResumeS.eState = eResumeSetVal;
 80003aa:	bf18      	it	ne
 80003ac:	7020      	strbne	r0, [r4, #0]

    switch (ResumeS.eState) {
 80003ae:	7823      	ldrb	r3, [r4, #0]
 80003b0:	2b05      	cmp	r3, #5
 80003b2:	d832      	bhi.n	800041a <usbResume+0x76>
 80003b4:	e8df f003 	tbb	[pc, r3]
 80003b8:	0e0a0603 	cfmadd32eq	mvax0, mvfx0, mvfx10, mvfx3
 80003bc:	f7ff2116 			; <UNDEFINED> instruction: 0xf7ff2116
    case RESUME_EXTERNAL:
        usbResumeInit();
 80003c0:	ffe5 e02a 	vaddl.u32	q15, d5, d26
        ResumeS.eState = RESUME_OFF;
        break;
    case RESUME_INTERNAL:
        usbResumeInit();
 80003c4:	f7ff ffe2 	bl	800038c <usbResumeInit>
        ResumeS.eState = RESUME_START;
 80003c8:	2304      	movs	r3, #4
 80003ca:	e027      	b.n	800041c <usbResume+0x78>
        break;
    case RESUME_LATER:
        ResumeS.bESOFcnt = 2;
 80003cc:	2302      	movs	r3, #2
 80003ce:	7063      	strb	r3, [r4, #1]
        ResumeS.eState = RESUME_WAIT;
 80003d0:	2303      	movs	r3, #3
 80003d2:	e023      	b.n	800041c <usbResume+0x78>
        break;
    case RESUME_WAIT:
        ResumeS.bESOFcnt--;
 80003d4:	7863      	ldrb	r3, [r4, #1]
 80003d6:	3b01      	subs	r3, #1
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	7063      	strb	r3, [r4, #1]
        if (ResumeS.bESOFcnt == 0)
 80003dc:	7863      	ldrb	r3, [r4, #1]
 80003de:	b9f3      	cbnz	r3, 800041e <usbResume+0x7a>
            ResumeS.eState = RESUME_START;
 80003e0:	2204      	movs	r2, #4
 80003e2:	e017      	b.n	8000414 <usbResume+0x70>
        break;
    case RESUME_START:
        wCNTR = _GetCNTR();
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <usbResume+0x80>)
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	b292      	uxth	r2, r2
        wCNTR |= CNTR_RESUME;
        _SetCNTR(wCNTR);
 80003ea:	f042 0210 	orr.w	r2, r2, #16
 80003ee:	601a      	str	r2, [r3, #0]
        ResumeS.eState = RESUME_ON;
 80003f0:	2305      	movs	r3, #5
 80003f2:	7023      	strb	r3, [r4, #0]
        ResumeS.bESOFcnt = 10;
 80003f4:	230a      	movs	r3, #10
 80003f6:	7063      	strb	r3, [r4, #1]
        break;
 80003f8:	bd10      	pop	{r4, pc}
    case RESUME_ON:
        ResumeS.bESOFcnt--;
 80003fa:	7863      	ldrb	r3, [r4, #1]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	7063      	strb	r3, [r4, #1]
        if (ResumeS.bESOFcnt == 0) {
 8000402:	7863      	ldrb	r3, [r4, #1]
 8000404:	b95b      	cbnz	r3, 800041e <usbResume+0x7a>
            wCNTR = _GetCNTR();
 8000406:	4a07      	ldr	r2, [pc, #28]	; (8000424 <usbResume+0x80>)
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 8000408:	f64f 73ef 	movw	r3, #65519	; 0xffef
        ResumeS.bESOFcnt = 10;
        break;
    case RESUME_ON:
        ResumeS.bESOFcnt--;
        if (ResumeS.bESOFcnt == 0) {
            wCNTR = _GetCNTR();
 800040c:	6811      	ldr	r1, [r2, #0]
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 800040e:	400b      	ands	r3, r1
 8000410:	6013      	str	r3, [r2, #0]
            ResumeS.eState = RESUME_OFF;
 8000412:	2206      	movs	r2, #6
 8000414:	4b02      	ldr	r3, [pc, #8]	; (8000420 <usbResume+0x7c>)
 8000416:	701a      	strb	r2, [r3, #0]
 8000418:	bd10      	pop	{r4, pc}
        }
        break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
        ResumeS.eState = RESUME_OFF;
 800041a:	2306      	movs	r3, #6
 800041c:	7023      	strb	r3, [r4, #0]
 800041e:	bd10      	pop	{r4, pc}
 8000420:	200001ca 	andcs	r0, r0, sl, asr #3
 8000424:	40005c40 	andmi	r5, r0, r0, asr #24

08000428 <usbPowerOn>:

RESULT usbPowerOn(void) {
    u16 wRegVal;

    wRegVal = CNTR_FRES;
    _SetCNTR(wRegVal);
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <usbPowerOn+0x1c>)
 800042a:	2201      	movs	r2, #1
 800042c:	601a      	str	r2, [r3, #0]

    wInterrupt_Mask = 0;
    _SetCNTR(wInterrupt_Mask);
    _SetISTR(0);
 800042e:	4a06      	ldr	r2, [pc, #24]	; (8000448 <usbPowerOn+0x20>)

    wRegVal = CNTR_FRES;
    _SetCNTR(wRegVal);

    wInterrupt_Mask = 0;
    _SetCNTR(wInterrupt_Mask);
 8000430:	2000      	movs	r0, #0
    _SetISTR(0);
    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 8000432:	4906      	ldr	r1, [pc, #24]	; (800044c <usbPowerOn+0x24>)

    wRegVal = CNTR_FRES;
    _SetCNTR(wRegVal);

    wInterrupt_Mask = 0;
    _SetCNTR(wInterrupt_Mask);
 8000434:	6018      	str	r0, [r3, #0]
    _SetISTR(0);
 8000436:	6010      	str	r0, [r2, #0]
    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 8000438:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800043c:	800a      	strh	r2, [r1, #0]
    _SetCNTR(wInterrupt_Mask);
 800043e:	601a      	str	r2, [r3, #0]

    return USB_SUCCESS;
}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40005c40 	andmi	r5, r0, r0, asr #24
 8000448:	40005c44 	andmi	r5, r0, r4, asr #24
 800044c:	20000204 	andcs	r0, r0, r4, lsl #4

08000450 <usbPowerOff>:

RESULT usbPowerOff(void) {
    _SetCNTR(CNTR_FRES);
 8000450:	4b04      	ldr	r3, [pc, #16]	; (8000464 <usbPowerOff+0x14>)
 8000452:	2201      	movs	r2, #1
 8000454:	601a      	str	r2, [r3, #0]
    _SetISTR(0);
 8000456:	4a04      	ldr	r2, [pc, #16]	; (8000468 <usbPowerOff+0x18>)
 8000458:	2000      	movs	r0, #0
 800045a:	6010      	str	r0, [r2, #0]
    _SetCNTR(CNTR_FRES + CNTR_PDWN);
 800045c:	2203      	movs	r2, #3
 800045e:	601a      	str	r2, [r3, #0]
       usb peripheral. we have no disabled the clocks,
       pulled the USB_DISC_PIN pin back up, or reset the
       application state machines */

    return USB_SUCCESS;
}
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40005c40 	andmi	r5, r0, r0, asr #24
 8000468:	40005c44 	andmi	r5, r0, r4, asr #24

0800046c <usbDsbBus>:



void usbDsbBus(void) {
// setPin(USB_DISC_BANK,USB_DISC_PIN);
usbPowerOff();
 800046c:	f7ff bff0 	b.w	8000450 <usbPowerOff>

08000470 <usbEnbISR>:
    bDeviceState = ADDRESSED;
}
/***** end of USER STANDARD REQUESTS *****/


void usbEnbISR(void) {
 8000470:	b507      	push	{r0, r1, r2, lr}
    NVIC_InitTypeDef NVIC_InitStructure;


    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 8000472:	2314      	movs	r3, #20
 8000474:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	f88d 3005 	strb.w	r3, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800047e:	f88d 3006 	strb.w	r3, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
 8000482:	a801      	add	r0, sp, #4


    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
 8000484:	2301      	movs	r3, #1
 8000486:	f88d 3007 	strb.w	r3, [sp, #7]
    nvicInit(&NVIC_InitStructure);
 800048a:	f000 f99d 	bl	80007c8 <nvicInit>
}
 800048e:	b003      	add	sp, #12
 8000490:	f85d fb04 	ldr.w	pc, [sp], #4

08000494 <usbInit>:
       application state machines */

    return USB_SUCCESS;
}

void usbInit(void) {
 8000494:	b510      	push	{r4, lr}
    dfuInit();
 8000496:	f000 fa6d 	bl	8000974 <dfuInit>

    pInformation->Current_Configuration = 0;
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <usbInit+0x2c>)
 800049c:	2400      	movs	r4, #0
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	729c      	strb	r4, [r3, #10]
    usbPowerOn();
 80004a2:	f7ff ffc1 	bl	8000428 <usbPowerOn>

    _SetISTR(0);
 80004a6:	4b07      	ldr	r3, [pc, #28]	; (80004c4 <usbInit+0x30>)
    wInterrupt_Mask = ISR_MSK;
 80004a8:	4a07      	ldr	r2, [pc, #28]	; (80004c8 <usbInit+0x34>)
    dfuInit();

    pInformation->Current_Configuration = 0;
    usbPowerOn();

    _SetISTR(0);
 80004aa:	601c      	str	r4, [r3, #0]
    wInterrupt_Mask = ISR_MSK;
 80004ac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80004b0:	8013      	strh	r3, [r2, #0]
    _SetCNTR(wInterrupt_Mask);
 80004b2:	4a06      	ldr	r2, [pc, #24]	; (80004cc <usbInit+0x38>)
 80004b4:	6013      	str	r3, [r2, #0]

    usbEnbISR(); /* configure the cortex M3 private peripheral NVIC */
 80004b6:	f7ff ffdb 	bl	8000470 <usbEnbISR>
    bDeviceState = UNCONNECTED;
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <usbInit+0x3c>)
 80004bc:	601c      	str	r4, [r3, #0]
 80004be:	bd10      	pop	{r4, pc}
 80004c0:	20000200 	andcs	r0, r0, r0, lsl #4
 80004c4:	40005c44 	andmi	r5, r0, r4, asr #24
 80004c8:	20000204 	andcs	r0, r0, r4, lsl #4
 80004cc:	40005c40 	andmi	r5, r0, r0, asr #24
 80004d0:	2000020c 	andcs	r0, r0, ip, lsl #4

080004d4 <usbDsbISR>:
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
}

void usbDsbISR(void) {
 80004d4:	b507      	push	{r0, r1, r2, lr}
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 80004d6:	2314      	movs	r3, #20
 80004d8:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
    nvicInit(&NVIC_InitStructure);
 80004dc:	a801      	add	r0, sp, #4
}

void usbDsbISR(void) {
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	f88d 3005 	strb.w	r3, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80004e4:	f88d 3006 	strb.w	r3, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
 80004e8:	f88d 3007 	strb.w	r3, [sp, #7]
    nvicInit(&NVIC_InitStructure);
 80004ec:	f000 f96c 	bl	80007c8 <nvicInit>
}
 80004f0:	b003      	add	sp, #12
 80004f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080004f8 <USB_LP_CAN1_RX0_IRQHandler>:

void USB_LP_CAN1_RX0_IRQHandler(void) {
 80004f8:	b570      	push	{r4, r5, r6, lr}
    wIstr = _GetISTR();
 80004fa:	4d27      	ldr	r5, [pc, #156]	; (8000598 <USB_LP_CAN1_RX0_IRQHandler+0xa0>)
 80004fc:	4c27      	ldr	r4, [pc, #156]	; (800059c <USB_LP_CAN1_RX0_IRQHandler+0xa4>)
 80004fe:	682b      	ldr	r3, [r5, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
 8000500:	4e27      	ldr	r6, [pc, #156]	; (80005a0 <USB_LP_CAN1_RX0_IRQHandler+0xa8>)
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
    nvicInit(&NVIC_InitStructure);
}

void USB_LP_CAN1_RX0_IRQHandler(void) {
    wIstr = _GetISTR();
 8000502:	b29b      	uxth	r3, r3
 8000504:	8023      	strh	r3, [r4, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
 8000506:	8822      	ldrh	r2, [r4, #0]
 8000508:	8833      	ldrh	r3, [r6, #0]
 800050a:	4013      	ands	r3, r2
 800050c:	0559      	lsls	r1, r3, #21
 800050e:	d505      	bpl.n	800051c <USB_LP_CAN1_RX0_IRQHandler+0x24>
        _SetISTR((u16)CLR_RESET);
 8000510:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8000514:	602b      	str	r3, [r5, #0]
        Device_Property.Reset();
 8000516:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <USB_LP_CAN1_RX0_IRQHandler+0xac>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	4798      	blx	r3
    }
#endif


#if (ISR_MSK & ISTR_ERR)
    if (wIstr & ISTR_ERR & wInterrupt_Mask) {
 800051c:	8822      	ldrh	r2, [r4, #0]
 800051e:	8833      	ldrh	r3, [r6, #0]
 8000520:	401a      	ands	r2, r3
 8000522:	0492      	lsls	r2, r2, #18
        _SetISTR((u16)CLR_ERR);
 8000524:	bf44      	itt	mi
 8000526:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 800052a:	602a      	strmi	r2, [r5, #0]
    }
#endif


#if (ISR_MSK & ISTR_WKUP)
    if (wIstr & ISTR_WKUP & wInterrupt_Mask) {
 800052c:	8822      	ldrh	r2, [r4, #0]
 800052e:	4013      	ands	r3, r2
 8000530:	04db      	lsls	r3, r3, #19
 8000532:	d505      	bpl.n	8000540 <USB_LP_CAN1_RX0_IRQHandler+0x48>
        _SetISTR((u16)CLR_WKUP);
 8000534:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000538:	602b      	str	r3, [r5, #0]
        usbResume(RESUME_EXTERNAL);
 800053a:	2000      	movs	r0, #0
 800053c:	f7ff ff32 	bl	80003a4 <usbResume>
    }
#endif

    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_SUSP)
    if (wIstr & ISTR_SUSP & wInterrupt_Mask) {
 8000540:	8822      	ldrh	r2, [r4, #0]
 8000542:	8833      	ldrh	r3, [r6, #0]
 8000544:	4013      	ands	r3, r2
 8000546:	0518      	lsls	r0, r3, #20
 8000548:	d504      	bpl.n	8000554 <USB_LP_CAN1_RX0_IRQHandler+0x5c>

        /* check if SUSPEND is possible */
        if (F_SUSPEND_ENABLED) {
            usbSuspend();
 800054a:	f7ff ff11 	bl	8000370 <usbSuspend>
        } else {
            /* if not possible then resume after xx ms */
            usbResume(RESUME_LATER);
        }
        /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
        _SetISTR((u16)CLR_SUSP);
 800054e:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8000552:	602b      	str	r3, [r5, #0]
    }
#endif


#if (ISR_MSK & ISTR_SOF)
    if (wIstr & ISTR_SOF & wInterrupt_Mask) {
 8000554:	8822      	ldrh	r2, [r4, #0]
 8000556:	8833      	ldrh	r3, [r6, #0]
 8000558:	401a      	ands	r2, r3
 800055a:	0591      	lsls	r1, r2, #22
 800055c:	d507      	bpl.n	800056e <USB_LP_CAN1_RX0_IRQHandler+0x76>
        _SetISTR((u16)CLR_SOF);
 800055e:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8000562:	602a      	str	r2, [r5, #0]
        bIntPackSOF++;
 8000564:	4a10      	ldr	r2, [pc, #64]	; (80005a8 <USB_LP_CAN1_RX0_IRQHandler+0xb0>)
 8000566:	7811      	ldrb	r1, [r2, #0]
 8000568:	3101      	adds	r1, #1
 800056a:	b2c9      	uxtb	r1, r1
 800056c:	7011      	strb	r1, [r2, #0]
    }
#endif


#if (ISR_MSK & ISTR_ESOF)
    if (wIstr & ISTR_ESOF & wInterrupt_Mask) {
 800056e:	8822      	ldrh	r2, [r4, #0]
 8000570:	4013      	ands	r3, r2
 8000572:	05da      	lsls	r2, r3, #23
 8000574:	d505      	bpl.n	8000582 <USB_LP_CAN1_RX0_IRQHandler+0x8a>
        _SetISTR((u16)CLR_ESOF);
 8000576:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800057a:	602b      	str	r3, [r5, #0]
        /* resume handling timing is made with ESOFs */
        usbResume(RESUME_ESOF); /* request without change of the machine state */
 800057c:	2007      	movs	r0, #7
 800057e:	f7ff ff11 	bl	80003a4 <usbResume>
    }
#endif

    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
 8000582:	8822      	ldrh	r2, [r4, #0]
 8000584:	8833      	ldrh	r3, [r6, #0]
 8000586:	4013      	ands	r3, r2
 8000588:	041b      	lsls	r3, r3, #16
 800058a:	d503      	bpl.n	8000594 <USB_LP_CAN1_RX0_IRQHandler+0x9c>
        /* clear of the CTR flag into the sub */
        CTR_LP(); /* low priority ISR defined in the usb core lib */
    }
#endif

}
 800058c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
        /* servicing of the endpoint correct transfer interrupt */
        /* clear of the CTR flag into the sub */
        CTR_LP(); /* low priority ISR defined in the usb core lib */
 8000590:	f000 bc60 	b.w	8000e54 <CTR_LP>
 8000594:	bd70      	pop	{r4, r5, r6, pc}
 8000596:	bf00      	nop
 8000598:	40005c44 	andmi	r5, r0, r4, asr #24
 800059c:	200001c8 	andcs	r0, r0, r8, asr #3
 80005a0:	20000204 	andcs	r0, r0, r4, lsl #4
 80005a4:	20000000 	andcs	r0, r0, r0
 80005a8:	20000208 	andcs	r0, r0, r8, lsl #4

080005ac <main>:
#include "common.h"
#include "dfu.h"
extern volatile dfuUploadTypes_t userUploadType;

int main()
{
 80005ac:	b508      	push	{r3, lr}
  bool no_user_jump = FALSE;
  bool dont_wait = FALSE;

  systemReset(); // peripherals but not PC
 80005ae:	f000 f84d 	bl	800064c <systemReset>
  setupCLK();
 80005b2:	f000 f86f 	bl	8000694 <setupCLK>
  setupLEDAndButton();
 80005b6:	f000 f89d 	bl	80006f4 <setupLEDAndButton>
  setupUSB();
 80005ba:	f7ff fe9b 	bl	80002f4 <setupUSB>
  setupFLASH();
 80005be:	f000 f8a5 	bl	800070c <setupFLASH>

  switch(checkAndClearBootloaderFlag())
 80005c2:	f000 f8dd 	bl	8000780 <checkAndClearBootloaderFlag>
 80005c6:	2801      	cmp	r0, #1
 80005c8:	d00e      	beq.n	80005e8 <main+0x3c>
 80005ca:	2802      	cmp	r0, #2
 80005cc:	d013      	beq.n	80005f6 <main+0x4a>

    #ifndef NOLED
    strobePin(LED_BANK, LED_PIN, STARTUP_BLINKS, BLINK_FAST,LED_ON_STATE);
    #endif

    if ((!checkUserCode(USER_CODE_FLASH0X8005000) && !checkUserCode(USER_CODE_FLASH0X8002000)) || readButtonState())
 80005ce:	4813      	ldr	r0, [pc, #76]	; (800061c <main+0x70>)
 80005d0:	f000 f8aa 	bl	8000728 <checkUserCode>
 80005d4:	b118      	cbz	r0, 80005de <main+0x32>
 80005d6:	f000 f831 	bl	800063c <readButtonState>
 80005da:	b928      	cbnz	r0, 80005e8 <main+0x3c>
 80005dc:	e00b      	b.n	80005f6 <main+0x4a>
 80005de:	4810      	ldr	r0, [pc, #64]	; (8000620 <main+0x74>)
 80005e0:	f000 f8a2 	bl	8000728 <checkUserCode>
 80005e4:	2800      	cmp	r0, #0
 80005e6:	d1f6      	bne.n	80005d6 <main+0x2a>
    while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
    {
      #ifndef NOLED
      strobePin(LED_BANK, LED_PIN, 1, BLINK_SLOW,LED_ON_STATE);
      #endif
      if (dfuUploadStarted())
 80005e8:	f000 fb90 	bl	8000d0c <dfuUploadStarted>
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d0fb      	beq.n	80005e8 <main+0x3c>
      {
        dfuFinishUpload(); // systemHardReset from DFU once done
 80005f0:	f000 fb92 	bl	8000d18 <dfuFinishUpload>
 80005f4:	e7f8      	b.n	80005e8 <main+0x3c>
      //   break;
      // }
    }
  }

  if (checkUserCode(USER_CODE_FLASH0X8002000))
 80005f6:	480a      	ldr	r0, [pc, #40]	; (8000620 <main+0x74>)
 80005f8:	f000 f896 	bl	8000728 <checkUserCode>
 80005fc:	b108      	cbz	r0, 8000602 <main+0x56>
  {
    jumpToUser(USER_CODE_FLASH0X8002000);
 80005fe:	4808      	ldr	r0, [pc, #32]	; (8000620 <main+0x74>)
 8000600:	e004      	b.n	800060c <main+0x60>
  }
  else
  {
    if (checkUserCode(USER_CODE_FLASH0X8005000))
 8000602:	4806      	ldr	r0, [pc, #24]	; (800061c <main+0x70>)
 8000604:	f000 f890 	bl	8000728 <checkUserCode>
 8000608:	b118      	cbz	r0, 8000612 <main+0x66>
    {
      jumpToUser(USER_CODE_FLASH0X8005000);
 800060a:	4804      	ldr	r0, [pc, #16]	; (800061c <main+0x70>)
 800060c:	f000 f924 	bl	8000858 <jumpToUser>
 8000610:	e001      	b.n	8000616 <main+0x6a>
      // Nothing to execute in either Flash or RAM
      #ifndef NOLED
      strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);
      #endif

      systemHardReset();
 8000612:	f000 f935 	bl	8000880 <systemHardReset>
    }
  }

  return 0;// Added to please the compiler
}
 8000616:	2000      	movs	r0, #0
 8000618:	bd08      	pop	{r3, pc}
 800061a:	bf00      	nop
 800061c:	08005000 	stmdaeq	r0, {ip, lr}
 8000620:	08002000 	stmdaeq	r0, {sp}

08000624 <gpio_write_bit>:
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 8000624:	2301      	movs	r3, #1
 8000626:	fa03 f101 	lsl.w	r1, r3, r1
    u32 pinMask = 0x1 << (16 + pin);
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits
 800062a:	f1d2 0201 	rsbs	r2, r2, #1
 800062e:	bf38      	it	cc
 8000630:	2200      	movcc	r2, #0
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 8000632:	0113      	lsls	r3, r2, #4
 8000634:	4099      	lsls	r1, r3
 8000636:	6101      	str	r1, [r0, #16]
 8000638:	4770      	bx	lr
	...

0800063c <readButtonState>:

bool readButtonState() {
    // todo, implement read
    bool state=FALSE;
#if defined(BUTTON_BANK) && defined (BUTTON_PIN) && defined (BUTTON_PRESSED_STATE)
    if (GET_REG(GPIO_IDR(BUTTON_BANK)) & (0x01 << BUTTON_PIN))
 800063c:	4b02      	ldr	r3, [pc, #8]	; (8000648 <readButtonState+0xc>)
 800063e:	6818      	ldr	r0, [r3, #0]
    {
        state=!state;
    }
#endif
    return state;
}
 8000640:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40010c08 	andmi	r0, r1, r8, lsl #24

0800064c <systemReset>:
        gpio_write_bit( bank,pin,1-onState);
    }
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <systemReset+0x38>)
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 800064e:	490e      	ldr	r1, [pc, #56]	; (8000688 <systemReset+0x3c>)
        gpio_write_bit( bank,pin,1-onState);
    }
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	f042 0201 	orr.w	r2, r2, #1
 8000656:	601a      	str	r2, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8000658:	4a0c      	ldr	r2, [pc, #48]	; (800068c <systemReset+0x40>)
 800065a:	6810      	ldr	r0, [r2, #0]
 800065c:	4001      	ands	r1, r0
 800065e:	6011      	str	r1, [r2, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
 8000660:	6819      	ldr	r1, [r3, #0]
 8000662:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000666:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800066a:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
 800066c:	6819      	ldr	r1, [r3, #0]
 800066e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000672:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);
 8000674:	6813      	ldr	r3, [r2, #0]
 8000676:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800067a:	6013      	str	r3, [r2, #0]

    SET_REG(RCC_CIR, 0x00000000);  /* disable all RCC interrupts */
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <systemReset+0x44>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	4770      	bx	lr
 8000684:	40021000 	andmi	r1, r2, r0
 8000688:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000
 800068c:	40021004 	andmi	r1, r2, r4
 8000690:	40021008 	andmi	r1, r2, r8

08000694 <setupCLK>:
}

void setupCLK(void) {
    unsigned int StartUpCounter=0;
    /* enable HSE */
    SET_REG(RCC_CR, GET_REG(RCC_CR) | 0x00010001);
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <setupCLK+0x58>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
 800069c:	601a      	str	r2, [r3, #0]
    while ((GET_REG(RCC_CR) & 0x00020000) == 0); /* for it to come on */
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4812      	ldr	r0, [pc, #72]	; (80006ec <setupCLK+0x58>)
 80006a2:	0392      	lsls	r2, r2, #14
 80006a4:	d5fb      	bpl.n	800069e <setupCLK+0xa>

    /* enable flash prefetch buffer */
    SET_REG(FLASH_ACR, 0x00000012);
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <setupCLK+0x5c>)
 80006a8:	2112      	movs	r1, #18
 80006aa:	6011      	str	r1, [r2, #0]

    /* Configure PLL */
#ifdef XTAL12M
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00110400); /* pll=72Mhz(x6),APB1=36Mhz,AHB=72Mhz */
#else
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x001D0400); /* pll=72Mhz(x9),APB1=36Mhz,AHB=72Mhz */
 80006ac:	f6a2 72fc 	subw	r2, r2, #4092	; 0xffc
 80006b0:	6811      	ldr	r1, [r2, #0]
 80006b2:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 80006b6:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80006ba:	6011      	str	r1, [r2, #0]
#endif

    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x01000000); /* enable the pll */
 80006bc:	6801      	ldr	r1, [r0, #0]
 80006be:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80006c2:	6001      	str	r1, [r0, #0]

#if !defined  (HSE_STARTUP_TIMEOUT)
#define HSE_STARTUP_TIMEOUT    ((unsigned int)0x0500)   /*!< Time out for HSE start up */
#endif /* HSE_STARTUP_TIMEOUT */

    while ((GET_REG(RCC_CR) & 0x03000000) == 0 && StartUpCounter < HSE_STARTUP_TIMEOUT)
 80006c4:	6819      	ldr	r1, [r3, #0]
 80006c6:	f011 7f40 	tst.w	r1, #50331648	; 0x3000000
 80006ca:	d0fb      	beq.n	80006c4 <setupCLK+0x30>
        // HSE has not started. Try restarting the processor
        systemHardReset();
    }

    /* Set SYSCLK as PLL */
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00000002);
 80006cc:	6811      	ldr	r1, [r2, #0]
 80006ce:	f041 0102 	orr.w	r1, r1, #2
 80006d2:	6011      	str	r1, [r2, #0]
    while ((GET_REG(RCC_CFGR) & 0x00000008) == 0); /* wait for it to come on */
 80006d4:	6811      	ldr	r1, [r2, #0]
 80006d6:	0709      	lsls	r1, r1, #28
 80006d8:	d5fc      	bpl.n	80006d4 <setupCLK+0x40>

    pRCC->APB2ENR |= 0B111111100;// Enable All GPIO channels (A to G)
 80006da:	699a      	ldr	r2, [r3, #24]
 80006dc:	f442 72fe 	orr.w	r2, r2, #508	; 0x1fc
 80006e0:	619a      	str	r2, [r3, #24]
    pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
 80006e2:	69da      	ldr	r2, [r3, #28]
 80006e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80006e8:	61da      	str	r2, [r3, #28]
 80006ea:	4770      	bx	lr
 80006ec:	40021000 	andmi	r1, r2, r0
 80006f0:	40022000 	andmi	r2, r2, r0

080006f4 <setupLEDAndButton>:

void setupLEDAndButton (void) {
    // SET_REG(AFIO_MAPR,(GET_REG(AFIO_MAPR) & ~AFIO_MAPR_SWJ_CFG) | AFIO_MAPR_SWJ_CFG_NO_JTAG_NO_SW);// Try to disable SWD AND JTAG so we can use those pins (not sure if this works).

#if defined(BUTTON_BANK) && defined (BUTTON_PIN) && defined (BUTTON_PRESSED_STATE)
    SET_REG(GPIO_CR(BUTTON_BANK,BUTTON_PIN),(GPIO_CR(BUTTON_BANK,BUTTON_PIN) & crMask(BUTTON_PIN)) | BUTTON_INPUT_MODE << CR_SHITF(BUTTON_PIN));
 80006f4:	4a03      	ldr	r2, [pc, #12]	; (8000704 <setupLEDAndButton+0x10>)
 80006f6:	4b04      	ldr	r3, [pc, #16]	; (8000708 <setupLEDAndButton+0x14>)
 80006f8:	601a      	str	r2, [r3, #0]
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 80006fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006fe:	611a      	str	r2, [r3, #16]
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	80010c00 	andhi	r0, r1, r0, lsl #24
 8000708:	40010c00 	andmi	r0, r1, r0, lsl #24

0800070c <setupFLASH>:
  #endif
}

void setupFLASH() {
    /* configure the HSI oscillator */
    if ((pRCC->CR & 0x01) == 0x00) {
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <setupFLASH+0x18>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	07d1      	lsls	r1, r2, #31
 8000712:	d403      	bmi.n	800071c <setupFLASH+0x10>
        u32 rwmVal = pRCC->CR;
 8000714:	681a      	ldr	r2, [r3, #0]
        rwmVal |= 0x01;
 8000716:	f042 0201 	orr.w	r2, r2, #1
        pRCC->CR = rwmVal;
 800071a:	601a      	str	r2, [r3, #0]
    }

    /* wait for it to come on */
    while ((pRCC->CR & 0x02) == 0x00) {}
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	0792      	lsls	r2, r2, #30
 8000720:	d5fc      	bpl.n	800071c <setupFLASH+0x10>
}
 8000722:	4770      	bx	lr
 8000724:	40021000 	andmi	r1, r2, r0

08000728 <checkUserCode>:

bool checkUserCode(u32 usrAddr) {
    u32 sp = *(vu32 *) usrAddr;
 8000728:	6803      	ldr	r3, [r0, #0]

    if ((sp & 0x2FFE0000) == 0x20000000) {
 800072a:	4803      	ldr	r0, [pc, #12]	; (8000738 <checkUserCode+0x10>)
 800072c:	4018      	ands	r0, r3
        return (TRUE);
    } else {
        return (FALSE);
    }
}
 800072e:	f1b0 5300 	subs.w	r3, r0, #536870912	; 0x20000000
 8000732:	4258      	negs	r0, r3
 8000734:	4158      	adcs	r0, r3
 8000736:	4770      	bx	lr
 8000738:	2ffe0000 	svccs	0x00fe0000

0800073c <setMspAndJump>:
    typedef void (*funcPtr)(void);
    u32 jumpAddr = *(vu32 *)(usrAddr + 0x04); /* reset ptr in vector table */

    funcPtr usrMain = (funcPtr) jumpAddr;

    SET_REG(SCB_VTOR, (vu32) (usrAddr));
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <setMspAndJump+0x14>)
    } else {
        return (FALSE);
    }
}

void setMspAndJump(u32 usrAddr) {
 800073e:	b508      	push	{r3, lr}
    // Dedicated function with no call to any function (appart the last call)
    // This way, there is no manipulation of the stack here, ensuring that GGC
    // didn't insert any pop from the SP after having set the MSP.
    typedef void (*funcPtr)(void);
    u32 jumpAddr = *(vu32 *)(usrAddr + 0x04); /* reset ptr in vector table */
 8000740:	6843      	ldr	r3, [r0, #4]

    funcPtr usrMain = (funcPtr) jumpAddr;

    SET_REG(SCB_VTOR, (vu32) (usrAddr));
 8000742:	6010      	str	r0, [r2, #0]

    asm volatile("msr msp, %0"::"g"(*(volatile u32 *)usrAddr));
 8000744:	6802      	ldr	r2, [r0, #0]
 8000746:	f382 8808 	msr	MSP, r2

    usrMain();                                /* go! */
 800074a:	4798      	blx	r3
 800074c:	bd08      	pop	{r3, pc}
 800074e:	bf00      	nop
 8000750:	e000ed08 	and	lr, r0, r8, lsl #26

08000754 <bkp10Write>:
}

void bkp10Write(u16 value)
{
        // Enable clocks for the backup domain registers
        pRCC->APB1ENR |= (RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <bkp10Write+0x24>)
 8000756:	69da      	ldr	r2, [r3, #28]
 8000758:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
 800075c:	61da      	str	r2, [r3, #28]
        //pRCC->APB1ENR = 0;

        // Disable backup register write protection
        pPWR->CR |= PWR_CR_DBP;
 800075e:	f5a3 33d0 	sub.w	r3, r3, #106496	; 0x1a000
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000768:	601a      	str	r2, [r3, #0]
        //pPWR->CR |= (1 << 8)

        // store value in pBK DR10
        pBKP->DR10 = value;
 800076a:	4a04      	ldr	r2, [pc, #16]	; (800077c <bkp10Write+0x28>)
 800076c:	8510      	strh	r0, [r2, #40]	; 0x28

        // Re-enable backup register write protection
        pPWR->CR &=~ PWR_CR_DBP;
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	4770      	bx	lr
 8000778:	40021000 	andmi	r1, r2, r0
 800077c:	40006c00 	andmi	r6, r0, r0, lsl #24

08000780 <checkAndClearBootloaderFlag>:
        //pPWR->CR &=~ (1 << 8)
}

int checkAndClearBootloaderFlag()
{
 8000780:	b538      	push	{r3, r4, r5, lr}
    bool flagSet = 0x00;// Flag not used

    // Enable clocks for the backup domain registers
    pRCC->APB1ENR |= (RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <checkAndClearBootloaderFlag+0x40>)

    switch (pBKP->DR10)
 8000784:	f244 214c 	movw	r1, #16972	; 0x424c
int checkAndClearBootloaderFlag()
{
    bool flagSet = 0x00;// Flag not used

    // Enable clocks for the backup domain registers
    pRCC->APB1ENR |= (RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
 8000788:	69da      	ldr	r2, [r3, #28]
 800078a:	461d      	mov	r5, r3
 800078c:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
 8000790:	61da      	str	r2, [r3, #28]

    switch (pBKP->DR10)
 8000792:	4a0c      	ldr	r2, [pc, #48]	; (80007c4 <checkAndClearBootloaderFlag+0x44>)
 8000794:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8000796:	b292      	uxth	r2, r2
 8000798:	428a      	cmp	r2, r1
 800079a:	d005      	beq.n	80007a8 <checkAndClearBootloaderFlag+0x28>
 800079c:	f244 234d 	movw	r3, #16973	; 0x424d
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d003      	beq.n	80007ac <checkAndClearBootloaderFlag+0x2c>
        //pPWR->CR &=~ (1 << 8)
}

int checkAndClearBootloaderFlag()
{
    bool flagSet = 0x00;// Flag not used
 80007a4:	2400      	movs	r4, #0
 80007a6:	e009      	b.n	80007bc <checkAndClearBootloaderFlag+0x3c>
    pRCC->APB1ENR |= (RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);

    switch (pBKP->DR10)
    {
        case RTC_BOOTLOADER_FLAG:
            flagSet = 0x01;
 80007a8:	2401      	movs	r4, #1
 80007aa:	e000      	b.n	80007ae <checkAndClearBootloaderFlag+0x2e>
            break;
        case RTC_BOOTLOADER_JUST_UPLOADED:
            flagSet = 0x02;
 80007ac:	2402      	movs	r4, #2
            break;
    }

    if (flagSet!=0x00)
    {
        bkp10Write(0x0000);// Clear the flag
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff ffd0 	bl	8000754 <bkp10Write>
        // Disable clocks
        pRCC->APB1ENR &= ~(RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
 80007b4:	69eb      	ldr	r3, [r5, #28]
 80007b6:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 80007ba:	61eb      	str	r3, [r5, #28]
    }



    return flagSet;
}
 80007bc:	4620      	mov	r0, r4
 80007be:	bd38      	pop	{r3, r4, r5, pc}
 80007c0:	40021000 	andmi	r1, r2, r0
 80007c4:	40006c00 	andmi	r6, r0, r0, lsl #24

080007c8 <nvicInit>:
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <nvicInit+0x64>)
    return flagSet;
}



void nvicInit(NVIC_InitTypeDef *NVIC_InitStruct) {
 80007ca:	b530      	push	{r4, r5, lr}
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 80007cc:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80007ce:	7844      	ldrb	r4, [r0, #1]
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 80007d0:	43db      	mvns	r3, r3
 80007d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 80007d6:	f1c3 0204 	rsb	r2, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80007da:	fa04 f202 	lsl.w	r2, r4, r2


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80007de:	240f      	movs	r4, #15
 80007e0:	40dc      	lsrs	r4, r3

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80007e2:	7881      	ldrb	r1, [r0, #2]

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007e4:	7803      	ldrb	r3, [r0, #0]
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80007e6:	400c      	ands	r4, r1
 80007e8:	4314      	orrs	r4, r2

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007ea:	f003 0103 	and.w	r1, r3, #3
 80007ee:	00c9      	lsls	r1, r1, #3
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 80007f0:	0124      	lsls	r4, r4, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007f2:	22ff      	movs	r2, #255	; 0xff

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007f4:	408c      	lsls	r4, r1

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007f6:	408a      	lsls	r2, r1
 80007f8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80007fc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000800:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 8000804:	f8d3 5300 	ldr.w	r5, [r3, #768]	; 0x300
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 8000808:	ea25 0102 	bic.w	r1, r5, r2
    tmppriority &= tmpmask;
 800080c:	4022      	ands	r2, r4
    tmpreg |= tmppriority;
 800080e:	430a      	orrs	r2, r1

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 8000810:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8000814:	7803      	ldrb	r3, [r0, #0]
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8000816:	2201      	movs	r2, #1
    tmpreg |= tmppriority;

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8000818:	0959      	lsrs	r1, r3, #5
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 800081a:	f003 031f 	and.w	r3, r3, #31
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
    tmpreg |= tmppriority;

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8000822:	4a03      	ldr	r2, [pc, #12]	; (8000830 <nvicInit+0x68>)
 8000824:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8000828:	bd30      	pop	{r4, r5, pc}
 800082a:	bf00      	nop
 800082c:	e000ed00 	and	lr, r0, r0, lsl #26
 8000830:	e000e100 	and	lr, r0, r0, lsl #2

08000834 <nvicDisableInterrupts>:
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
}

void nvicDisableInterrupts() {
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;
    rNVIC->ICER[0] = 0xFFFFFFFF;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <nvicDisableInterrupts+0x20>)
 8000836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800083a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    rNVIC->ICER[1] = 0xFFFFFFFF;
 800083e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    rNVIC->ICPR[0] = 0xFFFFFFFF;
 8000842:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    rNVIC->ICPR[1] = 0xFFFFFFFF;
 8000846:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    SET_REG(STK_CTRL, 0x04); /* disable the systick, which operates separately from nvic */
 800084a:	2204      	movs	r2, #4
 800084c:	f843 2cf0 	str.w	r2, [r3, #-240]
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000e100 	and	lr, r0, r0, lsl #2

08000858 <jumpToUser>:

    usrMain();                                /* go! */
}


void jumpToUser(u32 usrAddr) {
 8000858:	b510      	push	{r4, lr}

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <jumpToUser+0x24>)
 800085c:	2280      	movs	r2, #128	; 0x80

    usrMain();                                /* go! */
}


void jumpToUser(u32 usrAddr) {
 800085e:	4604      	mov	r4, r0

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 8000860:	601a      	str	r2, [r3, #0]

    /* tear down all the dfu related setup */
    // disable usb interrupts, clear them, turn off usb, set the disc pin
    // todo pick exactly what we want to do here, now its just a conservative
    flashLock();
    usbDsbISR();
 8000862:	f7ff fe37 	bl	80004d4 <usbDsbISR>
    nvicDisableInterrupts();
 8000866:	f7ff ffe5 	bl	8000834 <nvicDisableInterrupts>

#ifndef HAS_MAPLE_HARDWARE
    usbDsbBus();
 800086a:	f7ff fdff 	bl	800046c <usbDsbBus>
#endif

// Does nothing, as PC12 is not connected on teh Maple mini according to the schemmatic     setPin(GPIOC, 12); // disconnect usb from host. todo, macroize pin
    systemReset(); // resets clocks and periphs, not core regs
 800086e:	f7ff feed 	bl	800064c <systemReset>

    setMspAndJump(usrAddr);
 8000872:	4620      	mov	r0, r4
}
 8000874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif

// Does nothing, as PC12 is not connected on teh Maple mini according to the schemmatic     setPin(GPIOC, 12); // disconnect usb from host. todo, macroize pin
    systemReset(); // resets clocks and periphs, not core regs

    setMspAndJump(usrAddr);
 8000878:	f7ff bf60 	b.w	800073c <setMspAndJump>
 800087c:	40022010 	andmi	r2, r2, r0, lsl r0

08000880 <systemHardReset>:

void systemHardReset(void) {
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;

    /* Reset  */
    rSCB->AIRCR = (u32)AIRCR_RESET_REQ;
 8000880:	4a02      	ldr	r2, [pc, #8]	; (800088c <systemHardReset+0xc>)
 8000882:	4b03      	ldr	r3, [pc, #12]	; (8000890 <systemHardReset+0x10>)
 8000884:	60da      	str	r2, [r3, #12]

    /*  should never get here */
    while (1) {
        asm volatile("nop");
 8000886:	bf00      	nop
 8000888:	e7fd      	b.n	8000886 <systemHardReset+0x6>
 800088a:	bf00      	nop
 800088c:	05fa0004 	ldrbeq	r0, [sl, #4]!
 8000890:	e000ed00 	and	lr, r0, r0, lsl #26

08000894 <flashErasePage>:
    }
}

bool flashErasePage(u32 pageAddr) {
    u32 rwmVal = GET_REG(FLASH_CR);
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <flashErasePage+0x2c>)
    while (1) {
        asm volatile("nop");
    }
}

bool flashErasePage(u32 pageAddr) {
 8000896:	b510      	push	{r4, lr}
    u32 rwmVal = GET_REG(FLASH_CR);
 8000898:	681a      	ldr	r2, [r3, #0]
    rwmVal = FLASH_CR_PER;
    SET_REG(FLASH_CR, rwmVal);
 800089a:	2202      	movs	r2, #2
 800089c:	601a      	str	r2, [r3, #0]

    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 800089e:	4a09      	ldr	r2, [pc, #36]	; (80008c4 <flashErasePage+0x30>)
 80008a0:	6811      	ldr	r1, [r2, #0]
 80008a2:	4614      	mov	r4, r2
 80008a4:	f011 0f01 	tst.w	r1, #1
 80008a8:	d1f9      	bne.n	800089e <flashErasePage+0xa>
    SET_REG(FLASH_AR, pageAddr);
 80008aa:	6090      	str	r0, [r2, #8]
    SET_REG(FLASH_CR, FLASH_CR_START | FLASH_CR_PER);
 80008ac:	2242      	movs	r2, #66	; 0x42
 80008ae:	601a      	str	r2, [r3, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80008b0:	6822      	ldr	r2, [r4, #0]
 80008b2:	f012 0101 	ands.w	r1, r2, #1
 80008b6:	d1fb      	bne.n	80008b0 <flashErasePage+0x1c>

    /* todo: verify the page was erased */

    rwmVal = 0x00;
    SET_REG(FLASH_CR, rwmVal);
 80008b8:	6019      	str	r1, [r3, #0]

    return TRUE;
}
 80008ba:	2001      	movs	r0, #1
 80008bc:	bd10      	pop	{r4, pc}
 80008be:	bf00      	nop
 80008c0:	40022010 	andmi	r2, r2, r0, lsl r0
 80008c4:	4002200c 	andmi	r2, r2, ip

080008c8 <flashWriteWord>:
    }

    return TRUE;
}

bool flashWriteWord(u32 addr, u32 word) {
 80008c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
 80008ca:	b28b      	uxth	r3, r1
 80008cc:	9300      	str	r3, [sp, #0]
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;
 80008ce:	0c0b      	lsrs	r3, r1, #16
 80008d0:	9301      	str	r3, [sp, #4]

    u32 rwmVal = GET_REG(FLASH_CR);
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <flashWriteWord+0x44>)
    SET_REG(FLASH_CR, FLASH_CR_PG);
 80008d4:	2201      	movs	r2, #1
bool flashWriteWord(u32 addr, u32 word) {
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;

    u32 rwmVal = GET_REG(FLASH_CR);
 80008d6:	681c      	ldr	r4, [r3, #0]
    SET_REG(FLASH_CR, FLASH_CR_PG);
 80008d8:	601a      	str	r2, [r3, #0]

    /* apparently we need not write to FLASH_AR and can
       simply do a native write of a half word */
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80008da:	4a0d      	ldr	r2, [pc, #52]	; (8000910 <flashWriteWord+0x48>)
 80008dc:	6815      	ldr	r5, [r2, #0]
 80008de:	07ed      	lsls	r5, r5, #31
 80008e0:	d4fb      	bmi.n	80008da <flashWriteWord+0x12>
    *(flashAddr + 0x01) = (vu16)hhWord;
 80008e2:	9d01      	ldr	r5, [sp, #4]
 80008e4:	b2ad      	uxth	r5, r5
 80008e6:	8045      	strh	r5, [r0, #2]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80008e8:	6815      	ldr	r5, [r2, #0]
 80008ea:	07ed      	lsls	r5, r5, #31
 80008ec:	d4fc      	bmi.n	80008e8 <flashWriteWord+0x20>
    *(flashAddr) = (vu16)lhWord;
 80008ee:	9d00      	ldr	r5, [sp, #0]
 80008f0:	b2ad      	uxth	r5, r5
 80008f2:	8005      	strh	r5, [r0, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80008f4:	6815      	ldr	r5, [r2, #0]
 80008f6:	07ed      	lsls	r5, r5, #31
 80008f8:	d4fc      	bmi.n	80008f4 <flashWriteWord+0x2c>

    rwmVal &= 0xFFFFFFFE;
 80008fa:	f024 0201 	bic.w	r2, r4, #1
    SET_REG(FLASH_CR, rwmVal);
 80008fe:	601a      	str	r2, [r3, #0]

    /* verify the write */
    if (*(vu32 *)addr != word) {
 8000900:	6800      	ldr	r0, [r0, #0]
        return FALSE;
    }

    return TRUE;
}
 8000902:	1a43      	subs	r3, r0, r1
 8000904:	4258      	negs	r0, r3
 8000906:	4158      	adcs	r0, r3
 8000908:	b003      	add	sp, #12
 800090a:	bd30      	pop	{r4, r5, pc}
 800090c:	40022010 	andmi	r2, r2, r0, lsl r0
 8000910:	4002200c 	andmi	r2, r2, ip

08000914 <flashLock>:

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 8000914:	4b01      	ldr	r3, [pc, #4]	; (800091c <flashLock+0x8>)
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	4770      	bx	lr
 800091c:	40022010 	andmi	r2, r2, r0, lsl r0

08000920 <flashUnlock>:
}

void flashUnlock() {
    /* unlock the flash */
    SET_REG(FLASH_KEYR, FLASH_KEY1);
 8000920:	4b03      	ldr	r3, [pc, #12]	; (8000930 <flashUnlock+0x10>)
 8000922:	4a04      	ldr	r2, [pc, #16]	; (8000934 <flashUnlock+0x14>)
 8000924:	601a      	str	r2, [r3, #0]
    SET_REG(FLASH_KEYR, FLASH_KEY2);
 8000926:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40022004 	andmi	r2, r2, r4
 8000934:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123

08000938 <crMask>:

// Used to create the control register masking pattern, when setting control register mode.
unsigned int crMask(int pin)
{
    unsigned int mask;
    if (pin>=8)
 8000938:	2807      	cmp	r0, #7
    {
        pin-=8;
 800093a:	bfc8      	it	gt
 800093c:	3808      	subgt	r0, #8
    }
    mask = 0x0F << (pin<<2);
 800093e:	230f      	movs	r3, #15
 8000940:	0080      	lsls	r0, r0, #2
 8000942:	fa03 f000 	lsl.w	r0, r3, r0
    return ~mask;
}
 8000946:	43c0      	mvns	r0, r0
 8000948:	4770      	bx	lr
	...

0800094c <getFlashEnd>:

#define FLASH_SIZE_REG 0x1FFFF7E0
int getFlashEnd(void)
{
    unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register
    return ((int)(*flashSize & 0xffff) * 1024) + 0x08000000;
 800094c:	4b02      	ldr	r3, [pc, #8]	; (8000958 <getFlashEnd+0xc>)
 800094e:	8818      	ldrh	r0, [r3, #0]
 8000950:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
}
 8000954:	0280      	lsls	r0, r0, #10
 8000956:	4770      	bx	lr
 8000958:	1ffff7e0 	svcne	0x00fff7e0

0800095c <getFlashPageSize>:

int getFlashPageSize(void)
{

    unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register
    if ((*flashSize & 0xffff) > 128)
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <getFlashPageSize+0x14>)
 800095e:	881b      	ldrh	r3, [r3, #0]
    {
        return 0x800;
 8000960:	2b81      	cmp	r3, #129	; 0x81
    }
    else
    {
        return 0x400;
    }
}
 8000962:	bf34      	ite	cc
 8000964:	f44f 6080 	movcc.w	r0, #1024	; 0x400
 8000968:	f44f 6000 	movcs.w	r0, #2048	; 0x800
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	1ffff7e0 	svcne	0x00fff7e0

08000974 <dfuInit>:

volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <dfuInit+0x38>)
 8000976:	2300      	movs	r3, #0
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
 8000978:	2102      	movs	r1, #2

volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
 800097a:	7013      	strb	r3, [r2, #0]
    dfuAppStatus.bwPollTimeout0 = 0x00;
 800097c:	7053      	strb	r3, [r2, #1]
    dfuAppStatus.bwPollTimeout1 = 0x00;
 800097e:	7093      	strb	r3, [r2, #2]
    dfuAppStatus.bwPollTimeout2 = 0x00;
 8000980:	70d3      	strb	r3, [r2, #3]
    dfuAppStatus.bState = dfuIDLE;
 8000982:	7111      	strb	r1, [r2, #4]
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
 8000984:	7153      	strb	r3, [r2, #5]
    userFirmwareLen = 0;
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <dfuInit+0x3c>)
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 8000988:	490a      	ldr	r1, [pc, #40]	; (80009b4 <dfuInit+0x40>)
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
 800098a:	6013      	str	r3, [r2, #0]
    thisBlockLen = 0;;
 800098c:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <dfuInit+0x44>)
 800098e:	8013      	strh	r3, [r2, #0]
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 8000990:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <dfuInit+0x48>)
 8000992:	6011      	str	r1, [r2, #0]
    userAppEnd = RAM_END;
 8000994:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <dfuInit+0x4c>)
 8000996:	f501 4188 	add.w	r1, r1, #17408	; 0x4400
 800099a:	6011      	str	r1, [r2, #0]
    userUploadType=DFU_UPLOAD_NONE;
 800099c:	4a09      	ldr	r2, [pc, #36]	; (80009c4 <dfuInit+0x50>)
    code_copy_lock = WAIT;
 800099e:	2103      	movs	r1, #3
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
    userAppEnd = RAM_END;
    userUploadType=DFU_UPLOAD_NONE;
 80009a0:	7013      	strb	r3, [r2, #0]
    code_copy_lock = WAIT;
 80009a2:	4a09      	ldr	r2, [pc, #36]	; (80009c8 <dfuInit+0x54>)
 80009a4:	7011      	strb	r1, [r2, #0]
    dfuBusy = FALSE;
 80009a6:	4a09      	ldr	r2, [pc, #36]	; (80009cc <dfuInit+0x58>)
 80009a8:	7013      	strb	r3, [r2, #0]
 80009aa:	4770      	bx	lr
 80009ac:	20000a19 	andcs	r0, r0, r9, lsl sl
 80009b0:	20000a14 	andcs	r0, r0, r4, lsl sl
 80009b4:	20000c00 	andcs	r0, r0, r0, lsl #24
 80009b8:	20000a12 	andcs	r0, r0, r2, lsl sl
 80009bc:	200001c0 	andcs	r0, r0, r0, asr #3
 80009c0:	200001bc 			; <UNDEFINED> instruction: 0x200001bc
 80009c4:	20000a18 	andcs	r0, r0, r8, lsl sl
 80009c8:	200001cc 	andcs	r0, r0, ip, asr #3
 80009cc:	20000a1f 	andcs	r0, r0, pc, lsl sl

080009d0 <dfuUpdateByReset>:
    } else {
        return FALSE;
    }
}

void dfuUpdateByReset(void) {
 80009d0:	b508      	push	{r3, lr}
    u8 startState = dfuAppStatus.bState;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <dfuUpdateByReset+0x3c>)
    userFirmwareLen = 0;
 80009d4:	480e      	ldr	r0, [pc, #56]	; (8000a10 <dfuUpdateByReset+0x40>)
        return FALSE;
    }
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 80009d6:	7919      	ldrb	r1, [r3, #4]
    userFirmwareLen = 0;
 80009d8:	2200      	movs	r2, #0
        return FALSE;
    }
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 80009da:	b2c9      	uxtb	r1, r1
    userFirmwareLen = 0;

    if (startState == appDETACH) {
 80009dc:	2901      	cmp	r1, #1
    }
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
    userFirmwareLen = 0;
 80009de:	6002      	str	r2, [r0, #0]

    if (startState == appDETACH) {
 80009e0:	d108      	bne.n	80009f4 <dfuUpdateByReset+0x24>
        dfuAppStatus.bState = dfuIDLE;
 80009e2:	2102      	movs	r1, #2
 80009e4:	7119      	strb	r1, [r3, #4]
        dfuAppStatus.bStatus = OK;
 80009e6:	701a      	strb	r2, [r3, #0]

        nvicDisableInterrupts();
 80009e8:	f7ff ff24 	bl	8000834 <nvicDisableInterrupts>
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
    }
}
 80009ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (startState == appDETACH) {
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        nvicDisableInterrupts();
        usbEnbISR();
 80009f0:	f7ff bd3e 	b.w	8000470 <usbEnbISR>

    } else if (startState == appIDLE || startState == dfuIDLE) {
 80009f4:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 80009f8:	d006      	beq.n	8000a08 <dfuUpdateByReset+0x38>
        /* do nothing...might be normal usb bus activity */
    } else {
        /* we reset from the dfu, reset everything and startover,
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
 80009fa:	2102      	movs	r1, #2
 80009fc:	7119      	strb	r1, [r3, #4]
        dfuAppStatus.bStatus = OK;
 80009fe:	701a      	strb	r2, [r3, #0]

        systemHardReset();
    }
}
 8000a00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
 8000a04:	f7ff bf3c 	b.w	8000880 <systemHardReset>
 8000a08:	bd08      	pop	{r3, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000a19 	andcs	r0, r0, r9, lsl sl
 8000a10:	20000a14 	andcs	r0, r0, r4, lsl sl

08000a14 <dfuCopyState>:

void dfuUpdateByTimeout(void) {
}

u8 *dfuCopyState(u16 length) {
    if (length == 0) {
 8000a14:	b920      	cbnz	r0, 8000a20 <dfuCopyState+0xc>
        pInformation->Ctrl_Info.Usb_wLength = 1;
 8000a16:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <dfuCopyState+0x10>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	821a      	strh	r2, [r3, #16]
        return NULL;
 8000a1e:	4770      	bx	lr
    } else {
        return (&(dfuAppStatus.bState));
 8000a20:	4801      	ldr	r0, [pc, #4]	; (8000a28 <dfuCopyState+0x14>)
    }
}
 8000a22:	4770      	bx	lr
 8000a24:	20000200 	andcs	r0, r0, r0, lsl #4
 8000a28:	20000a1d 	andcs	r0, r0, sp, lsl sl

08000a2c <dfuCopyStatus>:

u8 *dfuCopyStatus(u16 length) {
    if (length == 0) {
 8000a2c:	b920      	cbnz	r0, 8000a38 <dfuCopyStatus+0xc>
        pInformation->Ctrl_Info.Usb_wLength = 6;
 8000a2e:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <dfuCopyStatus+0x10>)
 8000a30:	2206      	movs	r2, #6
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	821a      	strh	r2, [r3, #16]
        return NULL;
 8000a36:	4770      	bx	lr
    } else {
        return (u8*)(&dfuAppStatus);
 8000a38:	4801      	ldr	r0, [pc, #4]	; (8000a40 <dfuCopyStatus+0x14>)
    }
}
 8000a3a:	4770      	bx	lr
 8000a3c:	20000200 	andcs	r0, r0, r0, lsl #4
 8000a40:	20000a19 	andcs	r0, r0, r9, lsl sl

08000a44 <dfuCopyDNLOAD>:


u8 *dfuCopyDNLOAD(u16 length) {
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <dfuCopyDNLOAD+0x1c>)
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8000a46:	681b      	ldr	r3, [r3, #0]
    }
}


u8 *dfuCopyDNLOAD(u16 length) {
    if (length == 0) {
 8000a48:	b930      	cbnz	r0, 8000a58 <dfuCopyDNLOAD+0x14>
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8000a4a:	88da      	ldrh	r2, [r3, #6]
 8000a4c:	8a59      	ldrh	r1, [r3, #18]
 8000a4e:	1a51      	subs	r1, r2, r1
 8000a50:	8219      	strh	r1, [r3, #16]
        thisBlockLen = pInformation->USBwLengths.w;
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <dfuCopyDNLOAD+0x20>)
 8000a54:	801a      	strh	r2, [r3, #0]
        return NULL;
 8000a56:	4770      	bx	lr
    } else {
        return ((u8 *)recvBuffer + pInformation->Ctrl_Info.Usb_wOffset);
 8000a58:	8a5b      	ldrh	r3, [r3, #18]
 8000a5a:	4803      	ldr	r0, [pc, #12]	; (8000a68 <dfuCopyDNLOAD+0x24>)
 8000a5c:	4418      	add	r0, r3
    }
}
 8000a5e:	4770      	bx	lr
 8000a60:	20000200 	andcs	r0, r0, r0, lsl #4
 8000a64:	20000a12 	andcs	r0, r0, r2, lsl sl
 8000a68:	20000210 	andcs	r0, r0, r0, lsl r2

08000a6c <dfuCopyUPLOAD>:

u8 *dfuCopyUPLOAD(u16 length) {
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <dfuCopyUPLOAD+0x24>)
    if (length == 0) {
 8000a6e:	b930      	cbnz	r0, 8000a7e <dfuCopyUPLOAD+0x12>
        pInformation->Ctrl_Info.Usb_wLength = thisBlockLen - pInformation->Ctrl_Info.Usb_wOffset;
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <dfuCopyUPLOAD+0x28>)
 8000a74:	8811      	ldrh	r1, [r2, #0]
 8000a76:	8a5a      	ldrh	r2, [r3, #18]
 8000a78:	1a8a      	subs	r2, r1, r2
 8000a7a:	821a      	strh	r2, [r3, #16]
        return NULL;
 8000a7c:	4770      	bx	lr
    } else {
        return((u8*) userAppAddr + userFirmwareLen + pInformation->Ctrl_Info.Usb_wOffset);
 8000a7e:	4906      	ldr	r1, [pc, #24]	; (8000a98 <dfuCopyUPLOAD+0x2c>)
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <dfuCopyUPLOAD+0x30>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	6812      	ldr	r2, [r2, #0]
 8000a86:	6808      	ldr	r0, [r1, #0]
 8000a88:	8a5b      	ldrh	r3, [r3, #18]
 8000a8a:	4410      	add	r0, r2
 8000a8c:	4418      	add	r0, r3
    }
}
 8000a8e:	4770      	bx	lr
 8000a90:	20000200 	andcs	r0, r0, r0, lsl #4
 8000a94:	20000a12 	andcs	r0, r0, r2, lsl sl
 8000a98:	200001c0 	andcs	r0, r0, r0, asr #3
 8000a9c:	20000a14 	andcs	r0, r0, r4, lsl sl

08000aa0 <dfuCopyBufferToExec>:

void dfuCopyBufferToExec() {
 8000aa0:	b570      	push	{r4, r5, r6, lr}
        }
    }
    else
*/
    {
        if (userUploadType == DFU_UPLOAD_FLASH_0X8005000)
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <dfuCopyBufferToExec+0x4c>)
 8000aa4:	4e12      	ldr	r6, [pc, #72]	; (8000af0 <dfuCopyBufferToExec+0x50>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
        {
            userSpace = (u32 *)(USER_CODE_FLASH0X8005000 + userFirmwareLen);
 8000aa8:	6834      	ldr	r4, [r6, #0]
        }
    }
    else
*/
    {
        if (userUploadType == DFU_UPLOAD_FLASH_0X8005000)
 8000aaa:	2b02      	cmp	r3, #2
        {
            userSpace = (u32 *)(USER_CODE_FLASH0X8005000 + userFirmwareLen);
 8000aac:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
 8000ab0:	bf0c      	ite	eq
 8000ab2:	f504 44a0 	addeq.w	r4, r4, #20480	; 0x5000
        }
        else
        {
            userSpace = (u32 *)(USER_CODE_FLASH0X8002000 + userFirmwareLen);
 8000ab6:	f504 5400 	addne.w	r4, r4, #8192	; 0x2000
        }

        flashErasePage((u32)(userSpace));
 8000aba:	4620      	mov	r0, r4
 8000abc:	f7ff feea 	bl	8000894 <flashErasePage>

        for (i = 0; i < thisBlockLen; i = i + 4) {
 8000ac0:	2500      	movs	r5, #0
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <dfuCopyBufferToExec+0x54>)
 8000ac4:	881a      	ldrh	r2, [r3, #0]
 8000ac6:	b292      	uxth	r2, r2
 8000ac8:	4295      	cmp	r5, r2
 8000aca:	da06      	bge.n	8000ada <dfuCopyBufferToExec+0x3a>
            flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <dfuCopyBufferToExec+0x58>)
 8000ace:	1960      	adds	r0, r4, r5
 8000ad0:	58e9      	ldr	r1, [r5, r3]
 8000ad2:	f7ff fef9 	bl	80008c8 <flashWriteWord>
            userSpace = (u32 *)(USER_CODE_FLASH0X8002000 + userFirmwareLen);
        }

        flashErasePage((u32)(userSpace));

        for (i = 0; i < thisBlockLen; i = i + 4) {
 8000ad6:	3504      	adds	r5, #4
 8000ad8:	e7f3      	b.n	8000ac2 <dfuCopyBufferToExec+0x22>
            flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
        }

    }
    userFirmwareLen += thisBlockLen;
 8000ada:	6831      	ldr	r1, [r6, #0]
 8000adc:	881a      	ldrh	r2, [r3, #0]
 8000ade:	b292      	uxth	r2, r2
 8000ae0:	440a      	add	r2, r1
 8000ae2:	6032      	str	r2, [r6, #0]

    thisBlockLen = 0;
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	801a      	strh	r2, [r3, #0]
 8000ae8:	bd70      	pop	{r4, r5, r6, pc}
 8000aea:	bf00      	nop
 8000aec:	20000a18 	andcs	r0, r0, r8, lsl sl
 8000af0:	20000a14 	andcs	r0, r0, r4, lsl sl
 8000af4:	20000a12 	andcs	r0, r0, r2, lsl sl
 8000af8:	20000210 	andcs	r0, r0, r0, lsl r2

08000afc <dfuUpdateByRequest>:
}




bool dfuUpdateByRequest(void) {
 8000afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 8000b00:	4977      	ldr	r1, [pc, #476]	; (8000ce0 <dfuUpdateByRequest+0x1e4>)



    u8 startState = dfuAppStatus.bState;
 8000b02:	4c78      	ldr	r4, [pc, #480]	; (8000ce4 <dfuUpdateByRequest+0x1e8>)


bool dfuUpdateByRequest(void) {
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 8000b04:	2001      	movs	r0, #1
 8000b06:	7008      	strb	r0, [r1, #0]



    u8 startState = dfuAppStatus.bState;
 8000b08:	7923      	ldrb	r3, [r4, #4]
    dfuAppStatus.bStatus = OK;
 8000b0a:	2200      	movs	r2, #0
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;



    u8 startState = dfuAppStatus.bState;
 8000b0c:	b2db      	uxtb	r3, r3
    dfuAppStatus.bStatus = OK;
    /* often leaner to nest if's then embed a switch/case */
    if (startState == dfuIDLE)  {
 8000b0e:	2b02      	cmp	r3, #2
    dfuBusy = TRUE;



    u8 startState = dfuAppStatus.bState;
    dfuAppStatus.bStatus = OK;
 8000b10:	7022      	strb	r2, [r4, #0]
    /* often leaner to nest if's then embed a switch/case */
    if (startState == dfuIDLE)  {
 8000b12:	d146      	bne.n	8000ba2 <dfuUpdateByRequest+0xa6>
        /*  device running inside DFU mode */
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop
 8000b14:	7008      	strb	r0, [r1, #0]

        if (pInformation->USBbRequest == DFU_DNLOAD) {
 8000b16:	4974      	ldr	r1, [pc, #464]	; (8000ce8 <dfuUpdateByRequest+0x1ec>)
 8000b18:	6809      	ldr	r1, [r1, #0]
 8000b1a:	7848      	ldrb	r0, [r1, #1]
 8000b1c:	2801      	cmp	r0, #1
 8000b1e:	d11a      	bne.n	8000b56 <dfuUpdateByRequest+0x5a>

            if (pInformation->USBwLengths.w > 0) {
 8000b20:	88cb      	ldrh	r3, [r1, #6]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 80b0 	beq.w	8000c88 <dfuUpdateByRequest+0x18c>
                userFirmwareLen = 0;
 8000b28:	4b70      	ldr	r3, [pc, #448]	; (8000cec <dfuUpdateByRequest+0x1f0>)
 8000b2a:	601a      	str	r2, [r3, #0]
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
                switch(pInformation->Current_AlternateSetting)
 8000b2c:	7b0a      	ldrb	r2, [r1, #12]

        if (pInformation->USBbRequest == DFU_DNLOAD) {

            if (pInformation->USBwLengths.w > 0) {
                userFirmwareLen = 0;
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	7123      	strb	r3, [r4, #4]
                switch(pInformation->Current_AlternateSetting)
 8000b32:	b96a      	cbnz	r2, 8000b50 <dfuUpdateByRequest+0x54>
                {
                    case 0:
                        userUploadType = DFU_UPLOAD_FLASH_0X8002000;
 8000b34:	4a6e      	ldr	r2, [pc, #440]	; (8000cf0 <dfuUpdateByRequest+0x1f4>)
 8000b36:	7013      	strb	r3, [r2, #0]
                        userAppAddr = USER_CODE_FLASH0X8002000;
 8000b38:	4a6e      	ldr	r2, [pc, #440]	; (8000cf4 <dfuUpdateByRequest+0x1f8>)
 8000b3a:	4b6f      	ldr	r3, [pc, #444]	; (8000cf8 <dfuUpdateByRequest+0x1fc>)
 8000b3c:	601a      	str	r2, [r3, #0]
                        /* make sure the flash is setup properly, unlock it */
                        setupFLASH();
 8000b3e:	f7ff fde5 	bl	800070c <setupFLASH>
                        flashUnlock();
 8000b42:	f7ff feed 	bl	8000920 <flashUnlock>
                        bkp10Write(RTC_BOOTLOADER_JUST_UPLOADED);
 8000b46:	f244 204d 	movw	r0, #16973	; 0x424d
 8000b4a:	f7ff fe03 	bl	8000754 <bkp10Write>

                        break;
 8000b4e:	e0bf      	b.n	8000cd0 <dfuUpdateByRequest+0x1d4>

                    default:
                    // Roger Clark. Report error
                        dfuAppStatus.bState  = dfuERROR;
 8000b50:	220a      	movs	r2, #10
 8000b52:	7122      	strb	r2, [r4, #4]
 8000b54:	e0bb      	b.n	8000cce <dfuUpdateByRequest+0x1d2>
                }
            } else {
                dfuAppStatus.bState  = dfuERROR;
                dfuAppStatus.bStatus = errNOTDONE;
            }
        } else if (pInformation->USBbRequest == DFU_UPLOAD) {
 8000b56:	2802      	cmp	r0, #2
 8000b58:	d11c      	bne.n	8000b94 <dfuUpdateByRequest+0x98>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 8000b5a:	2309      	movs	r3, #9
 8000b5c:	7123      	strb	r3, [r4, #4]
            /* record length of first block for calculating target
               address from wValue in consecutive blocks */
            uploadBlockLen = pInformation->USBwLengths.w;
 8000b5e:	88ca      	ldrh	r2, [r1, #6]
 8000b60:	4b66      	ldr	r3, [pc, #408]	; (8000cfc <dfuUpdateByRequest+0x200>)
 8000b62:	801a      	strh	r2, [r3, #0]
            thisBlockLen = uploadBlockLen; /* for this first block as well */
 8000b64:	8818      	ldrh	r0, [r3, #0]
 8000b66:	4a66      	ldr	r2, [pc, #408]	; (8000d00 <dfuUpdateByRequest+0x204>)
 8000b68:	b280      	uxth	r0, r0
 8000b6a:	8010      	strh	r0, [r2, #0]
            /* calculate where the data should be copied from */
            userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000b6c:	881a      	ldrh	r2, [r3, #0]
 8000b6e:	884b      	ldrh	r3, [r1, #2]
 8000b70:	b292      	uxth	r2, r2
 8000b72:	435a      	muls	r2, r3
 8000b74:	4b5d      	ldr	r3, [pc, #372]	; (8000cec <dfuUpdateByRequest+0x1f0>)
 8000b76:	601a      	str	r2, [r3, #0]
            switch(pInformation->Current_AlternateSetting)
 8000b78:	7b0b      	ldrb	r3, [r1, #12]
 8000b7a:	b93b      	cbnz	r3, 8000b8c <dfuUpdateByRequest+0x90>
            {
                case 0:
                    userAppAddr = USER_CODE_FLASH0X8002000;
 8000b7c:	4b5e      	ldr	r3, [pc, #376]	; (8000cf8 <dfuUpdateByRequest+0x1fc>)
 8000b7e:	4a5d      	ldr	r2, [pc, #372]	; (8000cf4 <dfuUpdateByRequest+0x1f8>)
 8000b80:	601a      	str	r2, [r3, #0]
                    userAppEnd = getFlashEnd();
 8000b82:	f7ff fee3 	bl	800094c <getFlashEnd>
 8000b86:	4b5f      	ldr	r3, [pc, #380]	; (8000d04 <dfuUpdateByRequest+0x208>)
 8000b88:	6018      	str	r0, [r3, #0]
                    break;
 8000b8a:	e0a1      	b.n	8000cd0 <dfuUpdateByRequest+0x1d4>
                default:
                // Roger Clark.
                // Changed this to report error that its unable to write to this memory
                // However the code should never get here as only AlternateSetting 1 and 2 are allowed (see above)
                    dfuAppStatus.bState  = dfuERROR;
 8000b8c:	230a      	movs	r3, #10
 8000b8e:	7123      	strb	r3, [r4, #4]
                    dfuAppStatus.bStatus = errWRITE;
 8000b90:	2303      	movs	r3, #3
 8000b92:	e09c      	b.n	8000cce <dfuUpdateByRequest+0x1d2>
                    break;
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8000b94:	2806      	cmp	r0, #6
 8000b96:	d03c      	beq.n	8000c12 <dfuUpdateByRequest+0x116>
            dfuAppStatus.bState  = dfuIDLE;
            dfuAppStatus.bStatus = OK;  /* are we really ok? we were just aborted */
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000b98:	2803      	cmp	r0, #3
 8000b9a:	f000 808b 	beq.w	8000cb4 <dfuUpdateByRequest+0x1b8>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000b9e:	2805      	cmp	r0, #5
 8000ba0:	e03b      	b.n	8000c1a <dfuUpdateByRequest+0x11e>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuDNLOAD_SYNC)         {
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d10b      	bne.n	8000bbe <dfuUpdateByRequest+0xc2>
        /* device received block, waiting for DFU_GETSTATUS request */

        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000ba6:	4a50      	ldr	r2, [pc, #320]	; (8000ce8 <dfuUpdateByRequest+0x1ec>)
 8000ba8:	6812      	ldr	r2, [r2, #0]
 8000baa:	7852      	ldrb	r2, [r2, #1]
 8000bac:	2a03      	cmp	r2, #3
 8000bae:	d104      	bne.n	8000bba <dfuUpdateByRequest+0xbe>

            }
            else
            */
            {
                dfuAppStatus.bState = dfuDNLOAD_IDLE;
 8000bb0:	2305      	movs	r3, #5
 8000bb2:	7123      	strb	r3, [r4, #4]
                dfuCopyBufferToExec();
 8000bb4:	f7ff ff74 	bl	8000aa0 <dfuCopyBufferToExec>
 8000bb8:	e08a      	b.n	8000cd0 <dfuUpdateByRequest+0x1d4>
            }

        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000bba:	2a05      	cmp	r2, #5
 8000bbc:	e02d      	b.n	8000c1a <dfuUpdateByRequest+0x11e>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuDNBUSY)              {
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	d108      	bne.n	8000bd4 <dfuUpdateByRequest+0xd8>
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {
 8000bc2:	4951      	ldr	r1, [pc, #324]	; (8000d08 <dfuUpdateByRequest+0x20c>)
 8000bc4:	7808      	ldrb	r0, [r1, #0]
 8000bc6:	2802      	cmp	r0, #2
 8000bc8:	d174      	bne.n	8000cb4 <dfuUpdateByRequest+0x1b8>
            dfuAppStatus.bwPollTimeout0 = 0x00;
            code_copy_lock = WAIT;
 8000bca:	2303      	movs	r3, #3
        }

    } else if (startState == dfuDNBUSY)              {
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {
            dfuAppStatus.bwPollTimeout0 = 0x00;
 8000bcc:	7062      	strb	r2, [r4, #1]
            code_copy_lock = WAIT;
 8000bce:	700b      	strb	r3, [r1, #0]
            dfuAppStatus.bState = dfuDNLOAD_IDLE;
 8000bd0:	2305      	movs	r3, #5
 8000bd2:	e06f      	b.n	8000cb4 <dfuUpdateByRequest+0x1b8>
        } else {
            dfuAppStatus.bState = dfuDNBUSY;
        }

    } else if (startState == dfuDNLOAD_IDLE)         {
 8000bd4:	2b05      	cmp	r3, #5
 8000bd6:	d114      	bne.n	8000c02 <dfuUpdateByRequest+0x106>
        /* device is expecting dfu_dnload requests */
        if (pInformation->USBbRequest == DFU_DNLOAD) {
 8000bd8:	4b43      	ldr	r3, [pc, #268]	; (8000ce8 <dfuUpdateByRequest+0x1ec>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	7853      	ldrb	r3, [r2, #1]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d108      	bne.n	8000bf4 <dfuUpdateByRequest+0xf8>
            if (pInformation->USBwLengths.w > 0) {
 8000be2:	88d3      	ldrh	r3, [r2, #6]
 8000be4:	b10b      	cbz	r3, 8000bea <dfuUpdateByRequest+0xee>
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 8000be6:	2303      	movs	r3, #3
 8000be8:	e064      	b.n	8000cb4 <dfuUpdateByRequest+0x1b8>
            } else {
                /* todo, support "disagreement" if device expects more data than this */
                dfuAppStatus.bState  = dfuMANIFEST_SYNC;
 8000bea:	2306      	movs	r3, #6
 8000bec:	7123      	strb	r3, [r4, #4]

                /* relock the flash */
                flashLock();
 8000bee:	f7ff fe91 	bl	8000914 <flashLock>
 8000bf2:	e06d      	b.n	8000cd0 <dfuUpdateByRequest+0x1d4>
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8000bf4:	2b06      	cmp	r3, #6
 8000bf6:	d04d      	beq.n	8000c94 <dfuUpdateByRequest+0x198>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000bf8:	2b03      	cmp	r3, #3
 8000bfa:	d04b      	beq.n	8000c94 <dfuUpdateByRequest+0x198>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000bfc:	2b05      	cmp	r3, #5
 8000bfe:	d163      	bne.n	8000cc8 <dfuUpdateByRequest+0x1cc>
 8000c00:	e048      	b.n	8000c94 <dfuUpdateByRequest+0x198>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuMANIFEST_SYNC)       {
 8000c02:	2b06      	cmp	r3, #6
 8000c04:	d10b      	bne.n	8000c1e <dfuUpdateByRequest+0x122>
        /* device has received last block, waiting DFU_GETSTATUS request */

        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000c06:	4938      	ldr	r1, [pc, #224]	; (8000ce8 <dfuUpdateByRequest+0x1ec>)
 8000c08:	6809      	ldr	r1, [r1, #0]
 8000c0a:	7849      	ldrb	r1, [r1, #1]
 8000c0c:	2903      	cmp	r1, #3
 8000c0e:	d103      	bne.n	8000c18 <dfuUpdateByRequest+0x11c>
            dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
 8000c10:	2308      	movs	r3, #8
 8000c12:	7123      	strb	r3, [r4, #4]
            dfuAppStatus.bStatus = OK;
 8000c14:	7022      	strb	r2, [r4, #0]
 8000c16:	e05b      	b.n	8000cd0 <dfuUpdateByRequest+0x1d4>
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000c18:	2905      	cmp	r1, #5
 8000c1a:	d155      	bne.n	8000cc8 <dfuUpdateByRequest+0x1cc>
 8000c1c:	e04a      	b.n	8000cb4 <dfuUpdateByRequest+0x1b8>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuMANIFEST)            {
 8000c1e:	2b07      	cmp	r3, #7
 8000c20:	d0f6      	beq.n	8000c10 <dfuUpdateByRequest+0x114>

        /* should never receive request while in manifest! */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
        dfuAppStatus.bStatus = OK;

    } else if (startState == dfuMANIFEST_WAIT_RESET) {
 8000c22:	2b08      	cmp	r3, #8
 8000c24:	d046      	beq.n	8000cb4 <dfuUpdateByRequest+0x1b8>
           usb reset or power on reset to run the new code */

        /* consider timing out and self-resetting */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;

    } else if (startState == dfuUPLOAD_IDLE)         {
 8000c26:	2b09      	cmp	r3, #9
 8000c28:	d13c      	bne.n	8000ca4 <dfuUpdateByRequest+0x1a8>
        /* device expecting further dfu_upload requests */

        if (pInformation->USBbRequest == DFU_UPLOAD) {
 8000c2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <dfuUpdateByRequest+0x1ec>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	7853      	ldrb	r3, [r2, #1]
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d12d      	bne.n	8000c90 <dfuUpdateByRequest+0x194>
            if (pInformation->USBwLengths.w > 0) {
 8000c34:	88d0      	ldrh	r0, [r2, #6]
 8000c36:	b338      	cbz	r0, 8000c88 <dfuUpdateByRequest+0x18c>
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000c38:	4930      	ldr	r1, [pc, #192]	; (8000cfc <dfuUpdateByRequest+0x200>)
 8000c3a:	8852      	ldrh	r2, [r2, #2]
 8000c3c:	880b      	ldrh	r3, [r1, #0]
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8000c3e:	4d2e      	ldr	r5, [pc, #184]	; (8000cf8 <dfuUpdateByRequest+0x1fc>)
        /* device expecting further dfu_upload requests */

        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	4353      	muls	r3, r2
 8000c44:	4a29      	ldr	r2, [pc, #164]	; (8000cec <dfuUpdateByRequest+0x1f0>)
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8000c46:	4e2f      	ldr	r6, [pc, #188]	; (8000d04 <dfuUpdateByRequest+0x208>)
        /* device expecting further dfu_upload requests */

        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000c48:	6013      	str	r3, [r2, #0]
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8000c4a:	682f      	ldr	r7, [r5, #0]
 8000c4c:	f8d2 8000 	ldr.w	r8, [r2]
 8000c50:	f8b1 c000 	ldrh.w	ip, [r1]
 8000c54:	4447      	add	r7, r8
 8000c56:	6833      	ldr	r3, [r6, #0]
 8000c58:	fa1f fc8c 	uxth.w	ip, ip
 8000c5c:	4467      	add	r7, ip
 8000c5e:	429f      	cmp	r7, r3
 8000c60:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <dfuUpdateByRequest+0x204>)
 8000c62:	d803      	bhi.n	8000c6c <dfuUpdateByRequest+0x170>
                    thisBlockLen = uploadBlockLen;
 8000c64:	880a      	ldrh	r2, [r1, #0]
 8000c66:	b292      	uxth	r2, r2
 8000c68:	801a      	strh	r2, [r3, #0]
 8000c6a:	e019      	b.n	8000ca0 <dfuUpdateByRequest+0x1a4>
                    dfuAppStatus.bState  = dfuUPLOAD_IDLE;
                } else {
                    /* if above comparison was just equal, thisBlockLen becomes zero
                    next time when USBWValue has been increased by one */
                    thisBlockLen = userAppEnd - userAppAddr - userFirmwareLen;
 8000c6c:	6836      	ldr	r6, [r6, #0]
 8000c6e:	682d      	ldr	r5, [r5, #0]
 8000c70:	6811      	ldr	r1, [r2, #0]
 8000c72:	1b72      	subs	r2, r6, r5
 8000c74:	1a52      	subs	r2, r2, r1
 8000c76:	b292      	uxth	r2, r2
 8000c78:	801a      	strh	r2, [r3, #0]
                    /* check for overflow due to USBwValue out of range */
                    if (thisBlockLen >= pInformation->USBwLengths.w) {
 8000c7a:	881a      	ldrh	r2, [r3, #0]
 8000c7c:	b292      	uxth	r2, r2
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	d308      	bcc.n	8000c94 <dfuUpdateByRequest+0x198>
                        thisBlockLen = 0;
 8000c82:	2200      	movs	r2, #0
 8000c84:	801a      	strh	r2, [r3, #0]
 8000c86:	e005      	b.n	8000c94 <dfuUpdateByRequest+0x198>
                    }
                    dfuAppStatus.bState  = dfuIDLE;
                }
            } else {
                dfuAppStatus.bState  = dfuERROR;
 8000c88:	230a      	movs	r3, #10
 8000c8a:	7123      	strb	r3, [r4, #4]
                dfuAppStatus.bStatus = errNOTDONE;
 8000c8c:	2309      	movs	r3, #9
 8000c8e:	e01e      	b.n	8000cce <dfuUpdateByRequest+0x1d2>
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8000c90:	2b06      	cmp	r3, #6
 8000c92:	d101      	bne.n	8000c98 <dfuUpdateByRequest+0x19c>
            dfuAppStatus.bState  = dfuIDLE;
 8000c94:	2302      	movs	r3, #2
 8000c96:	e00d      	b.n	8000cb4 <dfuUpdateByRequest+0x1b8>
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000c98:	2b03      	cmp	r3, #3
 8000c9a:	d001      	beq.n	8000ca0 <dfuUpdateByRequest+0x1a4>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000c9c:	2b05      	cmp	r3, #5
 8000c9e:	d113      	bne.n	8000cc8 <dfuUpdateByRequest+0x1cc>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 8000ca0:	2309      	movs	r3, #9
 8000ca2:	e007      	b.n	8000cb4 <dfuUpdateByRequest+0x1b8>
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }


    } else if (startState == dfuERROR)               {
 8000ca4:	2b0a      	cmp	r3, #10
 8000ca6:	d10f      	bne.n	8000cc8 <dfuUpdateByRequest+0x1cc>
        /* status is in error, awaiting DFU_CLRSTATUS request */

        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <dfuUpdateByRequest+0x1ec>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	785b      	ldrb	r3, [r3, #1]
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d102      	bne.n	8000cb8 <dfuUpdateByRequest+0x1bc>
            /* todo, add routine to wait for last block write to finish */
            dfuAppStatus.bState  = dfuERROR;
 8000cb2:	230a      	movs	r3, #10
 8000cb4:	7123      	strb	r3, [r4, #4]
 8000cb6:	e00b      	b.n	8000cd0 <dfuUpdateByRequest+0x1d4>
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000cb8:	2b05      	cmp	r3, #5
 8000cba:	d0fa      	beq.n	8000cb2 <dfuUpdateByRequest+0x1b6>
            dfuAppStatus.bState  = dfuERROR;
        } else if (pInformation->USBbRequest == DFU_CLRSTATUS) {
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d103      	bne.n	8000cc8 <dfuUpdateByRequest+0x1cc>
            /* todo handle any cleanup we need here */
            dfuAppStatus.bState  = dfuIDLE;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	7123      	strb	r3, [r4, #4]
            dfuAppStatus.bStatus = OK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e002      	b.n	8000cce <dfuUpdateByRequest+0x1d2>
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else {
        /* some kind of error... */
        dfuAppStatus.bState  = dfuERROR;
 8000cc8:	230a      	movs	r3, #10
 8000cca:	7123      	strb	r3, [r4, #4]
        dfuAppStatus.bStatus = errSTALLEDPKT;
 8000ccc:	230f      	movs	r3, #15
 8000cce:	7023      	strb	r3, [r4, #0]
    }

    if (dfuAppStatus.bStatus == OK) {
 8000cd0:	7820      	ldrb	r0, [r4, #0]
        return TRUE;
    } else {
        return FALSE;
    }
}
 8000cd2:	f1d0 0001 	rsbs	r0, r0, #1
 8000cd6:	bf38      	it	cc
 8000cd8:	2000      	movcc	r0, #0
 8000cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000a1f 	andcs	r0, r0, pc, lsl sl
 8000ce4:	20000a19 	andcs	r0, r0, r9, lsl sl
 8000ce8:	20000200 	andcs	r0, r0, r0, lsl #4
 8000cec:	20000a14 	andcs	r0, r0, r4, lsl sl
 8000cf0:	20000a18 	andcs	r0, r0, r8, lsl sl
 8000cf4:	08002000 	stmdaeq	r0, {sp}
 8000cf8:	200001c0 	andcs	r0, r0, r0, asr #3
 8000cfc:	20000a10 	andcs	r0, r0, r0, lsl sl
 8000d00:	20000a12 	andcs	r0, r0, r2, lsl sl
 8000d04:	200001bc 			; <UNDEFINED> instruction: 0x200001bc
 8000d08:	200001cc 	andcs	r0, r0, ip, asr #3

08000d0c <dfuUploadStarted>:
void dfuSetState(u8 newState) {
    dfuAppStatus.bState = newState;
}

bool dfuUploadStarted() {
    return dfuBusy;
 8000d0c:	4b01      	ldr	r3, [pc, #4]	; (8000d14 <dfuUploadStarted+0x8>)
 8000d0e:	7818      	ldrb	r0, [r3, #0]
}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000a1f 	andcs	r0, r0, pc, lsl sl

08000d18 <dfuFinishUpload>:

void dfuFinishUpload() {
    while (1)
    {
        __asm("nop");
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <dfuFinishUpload>

08000d1c <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(u8 bEpNum, u16 wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8000d1c:	0080      	lsls	r0, r0, #2
 8000d1e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000d22:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000d26:	6803      	ldr	r3, [r0, #0]
 8000d28:	06ca      	lsls	r2, r1, #27
 8000d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	bf48      	it	mi
 8000d36:	f083 0310 	eormi.w	r3, r3, #16
 8000d3a:	068a      	lsls	r2, r1, #26
 8000d3c:	bf48      	it	mi
 8000d3e:	f083 0320 	eormi.w	r3, r3, #32
 8000d42:	6003      	str	r3, [r0, #0]
 8000d44:	4770      	bx	lr

08000d46 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(u8 bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8000d46:	0080      	lsls	r0, r0, #2
 8000d48:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000d4c:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000d50:	6803      	ldr	r3, [r0, #0]
 8000d52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000d60:	6003      	str	r3, [r0, #0]
 8000d62:	4770      	bx	lr

08000d64 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(u8 bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8000d64:	0080      	lsls	r0, r0, #2
 8000d66:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000d6a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000d6e:	6803      	ldr	r3, [r0, #0]
 8000d70:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8000d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d78:	041b      	lsls	r3, r3, #16
 8000d7a:	0c1b      	lsrs	r3, r3, #16
 8000d7c:	6003      	str	r3, [r0, #0]
 8000d7e:	4770      	bx	lr

08000d80 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(u8 bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8000d80:	0080      	lsls	r0, r0, #2
 8000d82:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000d86:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000d8a:	6803      	ldr	r3, [r0, #0]
 8000d8c:	045b      	lsls	r3, r3, #17
 8000d8e:	d506      	bpl.n	8000d9e <ClearDTOG_RX+0x1e>
 8000d90:	6802      	ldr	r2, [r0, #0]
 8000d92:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8000d96:	4013      	ands	r3, r2
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9c:	6003      	str	r3, [r0, #0]
 8000d9e:	4770      	bx	lr

08000da0 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(u8 bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8000da0:	0080      	lsls	r0, r0, #2
 8000da2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000da6:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000daa:	6803      	ldr	r3, [r0, #0]
 8000dac:	065b      	lsls	r3, r3, #25
 8000dae:	d506      	bpl.n	8000dbe <ClearDTOG_TX+0x1e>
 8000db0:	6802      	ldr	r2, [r0, #0]
 8000db2:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8000db6:	4013      	ands	r3, r2
 8000db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dbc:	6003      	str	r3, [r0, #0]
 8000dbe:	4770      	bx	lr

08000dc0 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPTxAddr(u8 bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <GetEPTxAddr+0x18>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000dca:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8000dce:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8000dd2:	0040      	lsls	r0, r0, #1
}
 8000dd4:	8800      	ldrh	r0, [r0, #0]
 8000dd6:	4770      	bx	lr
 8000dd8:	40005c50 	andmi	r5, r0, r0, asr ip

08000ddc <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPRxAddr(u8 bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <GetEPRxAddr+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000de6:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <GetEPRxAddr+0x18>)
 8000de8:	4403      	add	r3, r0
 8000dea:	005b      	lsls	r3, r3, #1
}
 8000dec:	8818      	ldrh	r0, [r3, #0]
 8000dee:	4770      	bx	lr
 8000df0:	40005c50 	andmi	r5, r0, r0, asr ip
 8000df4:	20003004 	andcs	r3, r0, r4

08000df8 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(u8 bEpNum, u16 wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <SetEPTxCount+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e02:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <SetEPTxCount+0x18>)
 8000e04:	4403      	add	r3, r0
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	6019      	str	r1, [r3, #0]
 8000e0a:	4770      	bx	lr
 8000e0c:	40005c50 	andmi	r5, r0, r0, asr ip
 8000e10:	20003002 	andcs	r3, r0, r2

08000e14 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(u8 bEpNum, u16 wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8000e14:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <SetEPRxCount+0x38>)
 8000e16:	293e      	cmp	r1, #62	; 0x3e
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <SetEPRxCount+0x3c>)
 8000e22:	4403      	add	r3, r0
 8000e24:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8000e28:	d909      	bls.n	8000e3e <SetEPRxCount+0x2a>
 8000e2a:	094b      	lsrs	r3, r1, #5
 8000e2c:	06c8      	lsls	r0, r1, #27
 8000e2e:	bf04      	itt	eq
 8000e30:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 8000e34:	b29b      	uxtheq	r3, r3
 8000e36:	029b      	lsls	r3, r3, #10
 8000e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e3c:	e004      	b.n	8000e48 <SetEPRxCount+0x34>
 8000e3e:	084b      	lsrs	r3, r1, #1
 8000e40:	07c9      	lsls	r1, r1, #31
 8000e42:	bf48      	it	mi
 8000e44:	3301      	addmi	r3, #1
 8000e46:	029b      	lsls	r3, r3, #10
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	4770      	bx	lr
 8000e4c:	40005c50 	andmi	r5, r0, r0, asr ip
 8000e50:	20003006 	andcs	r3, r0, r6

08000e54 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8000e54:	b570      	push	{r4, r5, r6, lr}
  u32 wEPVal = 0;
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8000e56:	4a4c      	ldr	r2, [pc, #304]	; (8000f88 <CTR_LP+0x134>)
 8000e58:	4b4c      	ldr	r3, [pc, #304]	; (8000f8c <CTR_LP+0x138>)
 8000e5a:	6811      	ldr	r1, [r2, #0]
 8000e5c:	b288      	uxth	r0, r1
 8000e5e:	040c      	lsls	r4, r1, #16
 8000e60:	8018      	strh	r0, [r3, #0]
 8000e62:	f140 8090 	bpl.w	8000f86 <CTR_LP+0x132>
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
 8000e66:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000e6a:	6011      	str	r1, [r2, #0]
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
 8000e6c:	881a      	ldrh	r2, [r3, #0]
 8000e6e:	4c48      	ldr	r4, [pc, #288]	; (8000f90 <CTR_LP+0x13c>)
 8000e70:	f002 020f 	and.w	r2, r2, #15
 8000e74:	7022      	strb	r2, [r4, #0]
    if (EPindex == 0)
 8000e76:	2a00      	cmp	r2, #0
 8000e78:	d15f      	bne.n	8000f3a <CTR_LP+0xe6>
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 8000e7a:	4c46      	ldr	r4, [pc, #280]	; (8000f94 <CTR_LP+0x140>)
 8000e7c:	4d46      	ldr	r5, [pc, #280]	; (8000f98 <CTR_LP+0x144>)
 8000e7e:	6822      	ldr	r2, [r4, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 8000e80:	4e46      	ldr	r6, [pc, #280]	; (8000f9c <CTR_LP+0x148>)
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 8000e82:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8000e86:	802a      	strh	r2, [r5, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 8000e88:	6822      	ldr	r2, [r4, #0]
 8000e8a:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8000e8e:	8032      	strh	r2, [r6, #0]
      _SetEPRxStatus(ENDP0, EP_RX_NAK);
 8000e90:	6822      	ldr	r2, [r4, #0]
 8000e92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e9a:	b292      	uxth	r2, r2
 8000e9c:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8000ea0:	6022      	str	r2, [r4, #0]
      _SetEPTxStatus(ENDP0, EP_TX_NAK);
 8000ea2:	6822      	ldr	r2, [r4, #0]
 8000ea4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000eac:	b292      	uxth	r2, r2
 8000eae:	f082 0220 	eor.w	r2, r2, #32
 8000eb2:	6022      	str	r2, [r4, #0]


      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	06d8      	lsls	r0, r3, #27
 8000eb8:	d502      	bpl.n	8000ec0 <CTR_LP+0x6c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8000eba:	6823      	ldr	r3, [r4, #0]
        if ((wEPVal & EP_CTR_TX) != 0)
 8000ebc:	0619      	lsls	r1, r3, #24
 8000ebe:	d507      	bpl.n	8000ed0 <CTR_LP+0x7c>
        {
          _ClearEP_CTR_TX(ENDP0);
 8000ec0:	6822      	ldr	r2, [r4, #0]
 8000ec2:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	6023      	str	r3, [r4, #0]
          In0_Process();
 8000eca:	f000 fc61 	bl	8001790 <In0_Process>
 8000ece:	e012      	b.n	8000ef6 <CTR_LP+0xa2>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }
        else if ((wEPVal &EP_SETUP) != 0)
 8000ed0:	051a      	lsls	r2, r3, #20
 8000ed2:	d507      	bpl.n	8000ee4 <CTR_LP+0x90>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8000ed4:	6822      	ldr	r2, [r4, #0]
 8000ed6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000eda:	4013      	ands	r3, r2
 8000edc:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 8000ede:	f000 fa69 	bl	80013b4 <Setup0_Process>
 8000ee2:	e008      	b.n	8000ef6 <CTR_LP+0xa2>
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8000ee4:	0418      	lsls	r0, r3, #16
 8000ee6:	d5b6      	bpl.n	8000e56 <CTR_LP+0x2>
        {
          _ClearEP_CTR_RX(ENDP0);
 8000ee8:	6822      	ldr	r2, [r4, #0]
 8000eea:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000eee:	4013      	ands	r3, r2
 8000ef0:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8000ef2:	f000 fbcd 	bl	8001690 <Out0_Process>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
 8000ef6:	6823      	ldr	r3, [r4, #0]
 8000ef8:	882a      	ldrh	r2, [r5, #0]
 8000efa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	04d1      	lsls	r1, r2, #19
 8000f06:	bf48      	it	mi
 8000f08:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 8000f0c:	0495      	lsls	r5, r2, #18
 8000f0e:	4a21      	ldr	r2, [pc, #132]	; (8000f94 <CTR_LP+0x140>)
 8000f10:	bf48      	it	mi
 8000f12:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 8000f16:	6013      	str	r3, [r2, #0]
          _SetEPTxStatus(ENDP0, SaveTState);
 8000f18:	6813      	ldr	r3, [r2, #0]
 8000f1a:	8831      	ldrh	r1, [r6, #0]
 8000f1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	06cc      	lsls	r4, r1, #27
 8000f28:	bf48      	it	mi
 8000f2a:	f083 0310 	eormi.w	r3, r3, #16
 8000f2e:	0688      	lsls	r0, r1, #26
 8000f30:	bf48      	it	mi
 8000f32:	f083 0320 	eormi.w	r3, r3, #32
 8000f36:	6013      	str	r3, [r2, #0]
          return;
 8000f38:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8000f3a:	0093      	lsls	r3, r2, #2
 8000f3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f40:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000f44:	681d      	ldr	r5, [r3, #0]
      if ((wEPVal & EP_CTR_RX) != 0)
 8000f46:	0429      	lsls	r1, r5, #16
 8000f48:	d509      	bpl.n	8000f5e <CTR_LP+0x10a>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	f640 718f 	movw	r1, #3983	; 0xf8f
 8000f50:	4001      	ands	r1, r0
 8000f52:	6019      	str	r1, [r3, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <CTR_LP+0x14c>)
 8000f56:	3a01      	subs	r2, #1
 8000f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5c:	4798      	blx	r3

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8000f5e:	062b      	lsls	r3, r5, #24
 8000f60:	f57f af79 	bpl.w	8000e56 <CTR_LP+0x2>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8000f64:	7821      	ldrb	r1, [r4, #0]
 8000f66:	f648 720f 	movw	r2, #36623	; 0x8f0f
 8000f6a:	008b      	lsls	r3, r1, #2
 8000f6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f70:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000f74:	6818      	ldr	r0, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8000f76:	3901      	subs	r1, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8000f78:	4002      	ands	r2, r0
 8000f7a:	601a      	str	r2, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <CTR_LP+0x150>)
 8000f7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f82:	4798      	blx	r3
 8000f84:	e767      	b.n	8000e56 <CTR_LP+0x2>
 8000f86:	bd70      	pop	{r4, r5, r6, pc}
 8000f88:	40005c44 	andmi	r5, r0, r4, asr #24
 8000f8c:	200001c8 	andcs	r0, r0, r8, asr #3
 8000f90:	200001dc 	ldrdcs	r0, [r0], -ip
 8000f94:	40005c00 	andmi	r5, r0, r0, lsl #24
 8000f98:	200001ce 	andcs	r0, r0, lr, asr #3
 8000f9c:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8000fa0:	20000050 	andcs	r0, r0, r0, asr r0
 8000fa4:	20000034 	andcs	r0, r0, r4, lsr r0

08000fa8 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8000fa8:	b508      	push	{r3, lr}
  pInformation = &Device_Info;
 8000faa:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <USB_Init+0x20>)
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <USB_Init+0x24>)
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <USB_Init+0x28>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 8000fb0:	6013      	str	r3, [r2, #0]
  pInformation->ControlState = 2;
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	721a      	strb	r2, [r3, #8]
  pProperty = &Device_Property;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <USB_Init+0x2c>)
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <USB_Init+0x30>)
 8000fba:	6013      	str	r3, [r2, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <USB_Init+0x34>)
  /* Initialize devices one by one */

  pProperty->Init();
 8000fbe:	681b      	ldr	r3, [r3, #0]
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8000fc0:	6011      	str	r1, [r2, #0]
  /* Initialize devices one by one */

  pProperty->Init();
 8000fc2:	4798      	blx	r3
 8000fc4:	bd08      	pop	{r3, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000200 	andcs	r0, r0, r0, lsl #4
 8000fcc:	200001e0 	andcs	r0, r0, r0, ror #3
 8000fd0:	2000006c 	andcs	r0, r0, ip, rrx
 8000fd4:	20000000 	andcs	r0, r0, r0
 8000fd8:	200001d8 	ldrdcs	r0, [r0], -r8
 8000fdc:	200001fc 	strdcs	r0, [r0], -ip

08000fe0 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetConfiguration(u16 Length)
{
 8000fe0:	b510      	push	{r4, lr}
 8000fe2:	4c06      	ldr	r4, [pc, #24]	; (8000ffc <Standard_GetConfiguration+0x1c>)
  if (Length == 0)
 8000fe4:	b918      	cbnz	r0, 8000fee <Standard_GetConfiguration+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8000fe6:	6823      	ldr	r3, [r4, #0]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8000fec:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <Standard_GetConfiguration+0x20>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4798      	blx	r3
  return (u8 *)&pInformation->Current_Configuration;
 8000ff6:	6820      	ldr	r0, [r4, #0]
 8000ff8:	300a      	adds	r0, #10
}
 8000ffa:	bd10      	pop	{r4, pc}
 8000ffc:	20000200 	andcs	r0, r0, r0, lsl #4
 8001000:	200001fc 	strdcs	r0, [r0], -ip

08001004 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetInterface(u16 Length)
{
 8001004:	b510      	push	{r4, lr}
 8001006:	4c06      	ldr	r4, [pc, #24]	; (8001020 <Standard_GetInterface+0x1c>)
  if (Length == 0)
 8001008:	b918      	cbnz	r0, 8001012 <Standard_GetInterface+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	2201      	movs	r2, #1
 800100e:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8001010:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetInterface();
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <Standard_GetInterface+0x20>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	4798      	blx	r3
  return (u8 *)&pInformation->Current_AlternateSetting;
 800101a:	6820      	ldr	r0, [r4, #0]
 800101c:	300c      	adds	r0, #12
}
 800101e:	bd10      	pop	{r4, pc}
 8001020:	20000200 	andcs	r0, r0, r0, lsl #4
 8001024:	200001fc 	strdcs	r0, [r0], -ip

08001028 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
u8 *Standard_GetStatus(u16 Length)
{
 8001028:	b510      	push	{r4, lr}
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <Standard_GetStatus+0x84>)
  if (Length == 0)
 800102c:	b918      	cbnz	r0, 8001036 <Standard_GetStatus+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2202      	movs	r2, #2
 8001032:	821a      	strh	r2, [r3, #16]
    return 0;
 8001034:	bd10      	pop	{r4, pc}
  }

  StatusInfo.w = 0;
 8001036:	4a1e      	ldr	r2, [pc, #120]	; (80010b0 <Standard_GetStatus+0x88>)
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001038:	6819      	ldr	r1, [r3, #0]
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  StatusInfo.w = 0;
 800103a:	2000      	movs	r0, #0
 800103c:	8010      	strh	r0, [r2, #0]
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800103e:	780c      	ldrb	r4, [r1, #0]
 8001040:	4613      	mov	r3, r2
 8001042:	f014 047f 	ands.w	r4, r4, #127	; 0x7f
 8001046:	d10d      	bne.n	8001064 <Standard_GetStatus+0x3c>
  {
    /*Get Device Status */
    u8 Feature = pInformation->Current_Feature;
 8001048:	7a4a      	ldrb	r2, [r1, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 800104a:	0691      	lsls	r1, r2, #26
    {
      SetBit(StatusInfo0, 1);
 800104c:	bf44      	itt	mi
 800104e:	2102      	movmi	r1, #2
 8001050:	7019      	strbmi	r1, [r3, #0]
    }

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8001052:	f012 0f40 	tst.w	r2, #64	; 0x40
    {
      ClrBit(StatusInfo0, 0);
 8001056:	781a      	ldrb	r2, [r3, #0]
 8001058:	bf14      	ite	ne
 800105a:	f022 0201 	bicne.w	r2, r2, #1
    }
    else /* Self-powered */
    {
      SetBit(StatusInfo0, 0);
 800105e:	f042 0201 	orreq.w	r2, r2, #1
 8001062:	e014      	b.n	800108e <Standard_GetStatus+0x66>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001064:	2c01      	cmp	r4, #1
 8001066:	d01f      	beq.n	80010a8 <Standard_GetStatus+0x80>
  {
    return (u8 *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001068:	2c02      	cmp	r4, #2
 800106a:	d11e      	bne.n	80010aa <Standard_GetStatus+0x82>
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;
 800106c:	7909      	ldrb	r1, [r1, #4]

    Related_Endpoint = (wIndex0 & 0x0f);
 800106e:	f001 020f 	and.w	r2, r1, #15
 8001072:	0092      	lsls	r2, r2, #2
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001074:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001078:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 800107c:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001080:	6812      	ldr	r2, [r2, #0]
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8001082:	d006      	beq.n	8001092 <Standard_GetStatus+0x6a>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001084:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001088:	2a10      	cmp	r2, #16
 800108a:	d107      	bne.n	800109c <Standard_GetStatus+0x74>
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	e004      	b.n	800109c <Standard_GetStatus+0x74>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8001092:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8001096:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800109a:	e7f6      	b.n	800108a <Standard_GetStatus+0x62>
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <Standard_GetStatus+0x8c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	4798      	blx	r3
  return (u8 *)&StatusInfo;
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <Standard_GetStatus+0x88>)
 80010a6:	bd10      	pop	{r4, pc}
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    return (u8 *)&StatusInfo;
 80010a8:	4610      	mov	r0, r2
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
  return (u8 *)&StatusInfo;
}
 80010aa:	bd10      	pop	{r4, pc}
 80010ac:	20000200 	andcs	r0, r0, r0, lsl #4
 80010b0:	20000206 	andcs	r0, r0, r6, lsl #4
 80010b4:	200001fc 	strdcs	r0, [r0], -ip

080010b8 <DataStageIn>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 80010b8:	4a23      	ldr	r2, [pc, #140]	; (8001148 <DataStageIn+0x90>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 80010ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 80010be:	6814      	ldr	r4, [r2, #0]
 80010c0:	4690      	mov	r8, r2
  u32 save_wLength = pEPinfo->Usb_wLength;
 80010c2:	8a23      	ldrh	r3, [r4, #16]
  u32 ControlState = pInformation->ControlState;
 80010c4:	7a26      	ldrb	r6, [r4, #8]
 80010c6:	4f21      	ldr	r7, [pc, #132]	; (800114c <DataStageIn+0x94>)

  u8 *DataBuffer;
  u32 Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 80010c8:	b9a3      	cbnz	r3, 80010f4 <DataStageIn+0x3c>
 80010ca:	2e04      	cmp	r6, #4
 80010cc:	d112      	bne.n	80010f4 <DataStageIn+0x3c>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 80010ce:	4920      	ldr	r1, [pc, #128]	; (8001150 <DataStageIn+0x98>)
 80010d0:	780a      	ldrb	r2, [r1, #0]
 80010d2:	2a01      	cmp	r2, #1
 80010d4:	d10a      	bne.n	80010ec <DataStageIn+0x34>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 80010d6:	4a1f      	ldr	r2, [pc, #124]	; (8001154 <DataStageIn+0x9c>)
 80010d8:	6810      	ldr	r0, [r2, #0]
 80010da:	4a1f      	ldr	r2, [pc, #124]	; (8001158 <DataStageIn+0xa0>)
 80010dc:	b280      	uxth	r0, r0
 80010de:	4402      	add	r2, r0
 80010e0:	0052      	lsls	r2, r2, #1
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	2230      	movs	r2, #48	; 0x30
 80010e6:	803a      	strh	r2, [r7, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 80010e8:	700b      	strb	r3, [r1, #0]
 80010ea:	e027      	b.n	800113c <DataStageIn+0x84>
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 80010ec:	2310      	movs	r3, #16
 80010ee:	803b      	strh	r3, [r7, #0]
      Data_Mul_MaxPacketSize = FALSE;
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
 80010f0:	2607      	movs	r6, #7
 80010f2:	e023      	b.n	800113c <DataStageIn+0x84>
    }

    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 80010f4:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 80010f6:	42ab      	cmp	r3, r5
 80010f8:	bf8c      	ite	hi
 80010fa:	2602      	movhi	r6, #2
 80010fc:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 80010fe:	429d      	cmp	r5, r3
 8001100:	bf28      	it	cs
 8001102:	461d      	movcs	r5, r3
 8001104:	4628      	mov	r0, r5
 8001106:	69a3      	ldr	r3, [r4, #24]
 8001108:	4798      	blx	r3
 800110a:	4681      	mov	r9, r0

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff fe57 	bl	8000dc0 <GetEPTxAddr>
 8001112:	462a      	mov	r2, r5
 8001114:	4601      	mov	r1, r0
 8001116:	4648      	mov	r0, r9
 8001118:	f000 fb68 	bl	80017ec <UserToPMABufferCopy>

  SetEPTxCount(ENDP0, Length);
 800111c:	4629      	mov	r1, r5
 800111e:	2000      	movs	r0, #0
 8001120:	f7ff fe6a 	bl	8000df8 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
 8001124:	8a23      	ldrh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001126:	f44f 5240 	mov.w	r2, #12288	; 0x3000

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 800112a:	1b5b      	subs	r3, r3, r5
 800112c:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 800112e:	8a63      	ldrh	r3, [r4, #18]
 8001130:	441d      	add	r5, r3
  vSetEPTxStatus(EP_TX_VALID);
 8001132:	2330      	movs	r3, #48	; 0x30
 8001134:	803b      	strh	r3, [r7, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <DataStageIn+0xa4>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8001138:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800113a:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800113c:	f8d8 3000 	ldr.w	r3, [r8]
 8001140:	721e      	strb	r6, [r3, #8]
 8001142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001146:	bf00      	nop
 8001148:	20000200 	andcs	r0, r0, r0, lsl #4
 800114c:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8001150:	20000a20 	andcs	r0, r0, r0, lsr #20
 8001154:	40005c50 	andmi	r5, r0, r0, asr ip
 8001158:	20003002 	andcs	r3, r0, r2
 800115c:	200001ce 	andcs	r0, r0, lr, asr #3

08001160 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8001160:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <Standard_SetConfiguration+0x2c>)
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001164:	490a      	ldr	r1, [pc, #40]	; (8001190 <Standard_SetConfiguration+0x30>)
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	7849      	ldrb	r1, [r1, #1]
 800116a:	789a      	ldrb	r2, [r3, #2]
 800116c:	4291      	cmp	r1, r2
 800116e:	d30a      	bcc.n	8001186 <Standard_SetConfiguration+0x26>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001170:	78d9      	ldrb	r1, [r3, #3]
 8001172:	b941      	cbnz	r1, 8001186 <Standard_SetConfiguration+0x26>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8001174:	889c      	ldrh	r4, [r3, #4]
 8001176:	b934      	cbnz	r4, 8001186 <Standard_SetConfiguration+0x26>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8001178:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <Standard_SetConfiguration+0x34>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	4798      	blx	r3
    return USB_SUCCESS;
 8001182:	4620      	mov	r0, r4
 8001184:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USB_UNSUPPORT;
 8001186:	2002      	movs	r0, #2
  }
}
 8001188:	bd10      	pop	{r4, pc}
 800118a:	bf00      	nop
 800118c:	20000200 	andcs	r0, r0, r0, lsl #4
 8001190:	20000090 	mulcs	r0, r0, r0
 8001194:	200001fc 	strdcs	r0, [r0], -ip

08001198 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 8001198:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800119a:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <Standard_SetInterface+0x3c>)
 800119c:	4c0e      	ldr	r4, [pc, #56]	; (80011d8 <Standard_SetInterface+0x40>)
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	6992      	ldr	r2, [r2, #24]
 80011a4:	7918      	ldrb	r0, [r3, #4]
 80011a6:	7899      	ldrb	r1, [r3, #2]
 80011a8:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 80011aa:	6823      	ldr	r3, [r4, #0]
 80011ac:	7a9a      	ldrb	r2, [r3, #10]
 80011ae:	b17a      	cbz	r2, 80011d0 <Standard_SetInterface+0x38>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 80011b0:	b970      	cbnz	r0, 80011d0 <Standard_SetInterface+0x38>
 80011b2:	795a      	ldrb	r2, [r3, #5]
 80011b4:	b962      	cbnz	r2, 80011d0 <Standard_SetInterface+0x38>
        || (pInformation->USBwValue1 != 0))
 80011b6:	78dd      	ldrb	r5, [r3, #3]
 80011b8:	b955      	cbnz	r5, 80011d0 <Standard_SetInterface+0x38>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <Standard_SetInterface+0x44>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80011c2:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 80011c4:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80011c6:	791a      	ldrb	r2, [r3, #4]
 80011c8:	72da      	strb	r2, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 80011ca:	789a      	ldrb	r2, [r3, #2]
 80011cc:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 80011ce:	bd38      	pop	{r3, r4, r5, pc}
    }

  }

  return USB_UNSUPPORT;
 80011d0:	2002      	movs	r0, #2
}
 80011d2:	bd38      	pop	{r3, r4, r5, pc}
 80011d4:	200001d8 	ldrdcs	r0, [r0], -r8
 80011d8:	20000200 	andcs	r0, r0, r0, lsl #4
 80011dc:	200001fc 	strdcs	r0, [r0], -ip

080011e0 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 80011e0:	b538      	push	{r3, r4, r5, lr}
  u32     Type_Rec = Type_Recipient;
 80011e2:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <Standard_ClearFeature+0xc0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	7818      	ldrb	r0, [r3, #0]
  u32     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80011e8:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 80011ec:	d104      	bne.n	80011f8 <Standard_ClearFeature+0x18>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 80011ee:	7a5a      	ldrb	r2, [r3, #9]
 80011f0:	f022 0220 	bic.w	r2, r2, #32
 80011f4:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 80011f6:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80011f8:	2802      	cmp	r0, #2
 80011fa:	d14e      	bne.n	800129a <Standard_ClearFeature+0xba>
    DEVICE* pDev;
    u32 Related_Endpoint;
    u32 wIndex0;
    u32 rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 80011fc:	885a      	ldrh	r2, [r3, #2]
 80011fe:	2a00      	cmp	r2, #0
 8001200:	d14c      	bne.n	800129c <Standard_ClearFeature+0xbc>
        || (pInformation->USBwIndex1 != 0))
 8001202:	795a      	ldrb	r2, [r3, #5]
 8001204:	2a00      	cmp	r2, #0
 8001206:	d149      	bne.n	800129c <Standard_ClearFeature+0xbc>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 8001208:	791a      	ldrb	r2, [r3, #4]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800120a:	4d26      	ldr	r5, [pc, #152]	; (80012a4 <Standard_ClearFeature+0xc4>)
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
 800120c:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 8001210:	0084      	lsls	r4, r0, #2

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8001212:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 8001216:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 800121a:	6809      	ldr	r1, [r1, #0]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800121c:	782d      	ldrb	r5, [r5, #0]
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 800121e:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8001222:	bf14      	ite	ne
 8001224:	f001 0130 	andne.w	r1, r1, #48	; 0x30
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8001228:	f401 5140 	andeq.w	r1, r1, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800122c:	42a8      	cmp	r0, r5
 800122e:	d234      	bcs.n	800129a <Standard_ClearFeature+0xba>
 8001230:	2900      	cmp	r1, #0
 8001232:	d032      	beq.n	800129a <Standard_ClearFeature+0xba>
        || (pInformation->Current_Configuration == 0))
 8001234:	7a9b      	ldrb	r3, [r3, #10]
 8001236:	b383      	cbz	r3, 800129a <Standard_ClearFeature+0xba>


    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001238:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800123c:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8001240:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001242:	6823      	ldr	r3, [r4, #0]
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8001244:	d50c      	bpl.n	8001260 <Standard_ClearFeature+0x80>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001246:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800124a:	2b10      	cmp	r3, #16
 800124c:	d11f      	bne.n	800128e <Standard_ClearFeature+0xae>
      {
        ClearDTOG_TX(Related_Endpoint);
 800124e:	b2c4      	uxtb	r4, r0
 8001250:	4620      	mov	r0, r4
 8001252:	f7ff fda5 	bl	8000da0 <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8001256:	4620      	mov	r0, r4
 8001258:	2130      	movs	r1, #48	; 0x30
 800125a:	f7ff fd5f 	bl	8000d1c <SetEPTxStatus>
 800125e:	e016      	b.n	800128e <Standard_ClearFeature+0xae>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8001260:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001268:	d111      	bne.n	800128e <Standard_ClearFeature+0xae>
      {
        if (Related_Endpoint == ENDP0)
 800126a:	b928      	cbnz	r0, 8001278 <Standard_ClearFeature+0x98>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <Standard_ClearFeature+0xc8>)
 800126e:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8001272:	f7ff fdcf 	bl	8000e14 <SetEPRxCount>
 8001276:	e001      	b.n	800127c <Standard_ClearFeature+0x9c>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 8001278:	f7ff fd82 	bl	8000d80 <ClearDTOG_RX>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 800127c:	6823      	ldr	r3, [r4, #0]
 800127e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001286:	b29b      	uxth	r3, r3
 8001288:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800128c:	6023      	str	r3, [r4, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <Standard_ClearFeature+0xcc>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	4798      	blx	r3
    return USB_SUCCESS;
 8001296:	2000      	movs	r0, #0
 8001298:	bd38      	pop	{r3, r4, r5, pc}
  }

  return USB_UNSUPPORT;
 800129a:	2002      	movs	r0, #2
}
 800129c:	bd38      	pop	{r3, r4, r5, pc}
 800129e:	bf00      	nop
 80012a0:	20000200 	andcs	r0, r0, r0, lsl #4
 80012a4:	20000090 	mulcs	r0, r0, r0
 80012a8:	20000000 	andcs	r0, r0, r0
 80012ac:	200001fc 	strdcs	r0, [r0], -ip

080012b0 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 80012b0:	b538      	push	{r3, r4, r5, lr}
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <Standard_SetEndPointFeature+0x78>)
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80012b4:	4d1d      	ldr	r5, [pc, #116]	; (800132c <Standard_SetEndPointFeature+0x7c>)
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 80012b6:	6819      	ldr	r1, [r3, #0]
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80012b8:	782d      	ldrb	r5, [r5, #0]
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 80012ba:	790a      	ldrb	r2, [r1, #4]
  rEP = wIndex0 & ~0x80;
 80012bc:	f022 0480 	bic.w	r4, r2, #128	; 0x80
 80012c0:	00a3      	lsls	r3, r4, #2

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80012c2:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 80012c6:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80012ca:	6800      	ldr	r0, [r0, #0]

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 80012cc:	f012 0f80 	tst.w	r2, #128	; 0x80
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80012d0:	bf14      	ite	ne
 80012d2:	f000 0030 	andne.w	r0, r0, #48	; 0x30
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 80012d6:	f400 5040 	andeq.w	r0, r0, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80012da:	42ac      	cmp	r4, r5
 80012dc:	d222      	bcs.n	8001324 <Standard_SetEndPointFeature+0x74>
      || pInformation->USBwValue != 0 || Status == 0
 80012de:	884c      	ldrh	r4, [r1, #2]
 80012e0:	bb04      	cbnz	r4, 8001324 <Standard_SetEndPointFeature+0x74>
 80012e2:	b1f8      	cbz	r0, 8001324 <Standard_SetEndPointFeature+0x74>
      || pInformation->Current_Configuration == 0)
 80012e4:	7a89      	ldrb	r1, [r1, #10]
 80012e6:	b1e9      	cbz	r1, 8001324 <Standard_SetEndPointFeature+0x74>
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80012e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012ec:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80012f0:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80012f4:	681a      	ldr	r2, [r3, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80012f6:	d007      	beq.n	8001308 <Standard_SetEndPointFeature+0x58>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80012f8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80012fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001300:	b292      	uxth	r2, r2
 8001302:	f082 0210 	eor.w	r2, r2, #16
 8001306:	e006      	b.n	8001316 <Standard_SetEndPointFeature+0x66>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8001308:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800130c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001310:	b292      	uxth	r2, r2
 8001312:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8001316:	601a      	str	r2, [r3, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <Standard_SetEndPointFeature+0x80>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	4798      	blx	r3
  return USB_SUCCESS;
 8001320:	2000      	movs	r0, #0
 8001322:	bd38      	pop	{r3, r4, r5, pc}

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8001324:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 8001326:	bd38      	pop	{r3, r4, r5, pc}
 8001328:	20000200 	andcs	r0, r0, r0, lsl #4
 800132c:	20000090 	mulcs	r0, r0, r0
 8001330:	200001fc 	strdcs	r0, [r0], -ip

08001334 <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 8001334:	b508      	push	{r3, lr}
  SetBit(pInformation->Current_Feature, 5);
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <Standard_SetDeviceFeature+0x1c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	7a5a      	ldrb	r2, [r3, #9]
 800133c:	f042 0220 	orr.w	r2, r2, #32
 8001340:	725a      	strb	r2, [r3, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <Standard_SetDeviceFeature+0x20>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	4798      	blx	r3
  return USB_SUCCESS;
}
 800134a:	2000      	movs	r0, #0
 800134c:	bd08      	pop	{r3, pc}
 800134e:	bf00      	nop
 8001350:	20000200 	andcs	r0, r0, r0, lsl #4
 8001354:	200001fc 	strdcs	r0, [r0], -ip

08001358 <Standard_GetDescriptorData>:
*******************************************************************************/
u8 *Standard_GetDescriptorData(u16 Length, ONE_DESCRIPTOR *pDesc)
{
  u32  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <Standard_GetDescriptorData+0x18>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	8a53      	ldrh	r3, [r2, #18]
  if (Length == 0)
 800135e:	b918      	cbnz	r0, 8001368 <Standard_GetDescriptorData+0x10>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8001360:	8889      	ldrh	r1, [r1, #4]
 8001362:	1acb      	subs	r3, r1, r3
 8001364:	8213      	strh	r3, [r2, #16]
    return 0;
 8001366:	4770      	bx	lr
  }

  return pDesc->Descriptor + wOffset;
 8001368:	6808      	ldr	r0, [r1, #0]
 800136a:	4418      	add	r0, r3
}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000200 	andcs	r0, r0, r0, lsl #4

08001374 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
u8 Post0_Process(void)
{
 8001374:	b508      	push	{r3, lr}
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <Post0_Process+0x30>)
 8001378:	2000      	movs	r0, #0
 800137a:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 800137e:	f7ff fd49 	bl	8000e14 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <Post0_Process+0x34>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	7a18      	ldrb	r0, [r3, #8]
 8001388:	2808      	cmp	r0, #8
 800138a:	d106      	bne.n	800139a <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <Post0_Process+0x38>)
 800138e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001392:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <Post0_Process+0x3c>)
 8001396:	2210      	movs	r2, #16
 8001398:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 800139a:	f1b0 0309 	subs.w	r3, r0, #9
 800139e:	4258      	negs	r0, r3
 80013a0:	4158      	adcs	r0, r3
 80013a2:	bd08      	pop	{r3, pc}
 80013a4:	20000000 	andcs	r0, r0, r0
 80013a8:	20000200 	andcs	r0, r0, r0, lsl #4
 80013ac:	200001ce 	andcs	r0, r0, lr, asr #3
 80013b0:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>

080013b4 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Setup0_Process(void)
{
 80013b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80013b6:	4e96      	ldr	r6, [pc, #600]	; (8001610 <Setup0_Process+0x25c>)
 80013b8:	4b96      	ldr	r3, [pc, #600]	; (8001614 <Setup0_Process+0x260>)
 80013ba:	6832      	ldr	r2, [r6, #0]

  if (pInformation->ControlState != PAUSE)
 80013bc:	4d96      	ldr	r5, [pc, #600]	; (8001618 <Setup0_Process+0x264>)
 80013be:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80013c0:	4413      	add	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 80013c6:	682b      	ldr	r3, [r5, #0]
 80013c8:	7a19      	ldrb	r1, [r3, #8]
 80013ca:	2909      	cmp	r1, #9
 80013cc:	d00f      	beq.n	80013ee <Setup0_Process+0x3a>
 80013ce:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80013d0:	0052      	lsls	r2, r2, #1
 80013d2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80013d6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 80013da:	7811      	ldrb	r1, [r2, #0]
 80013dc:	7019      	strb	r1, [r3, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 80013de:	7851      	ldrb	r1, [r2, #1]
 80013e0:	7059      	strb	r1, [r3, #1]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = *pBuf.w++; /* wValue in Little Endian */
 80013e2:	8891      	ldrh	r1, [r2, #4]
 80013e4:	8059      	strh	r1, [r3, #2]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = *pBuf.w++; /* wIndex in Little Endian */
 80013e6:	8911      	ldrh	r1, [r2, #8]
 80013e8:	8099      	strh	r1, [r3, #4]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength in Little Endian */
 80013ea:	8992      	ldrh	r2, [r2, #12]
 80013ec:	80da      	strh	r2, [r3, #6]
  }

  pInformation->ControlState = SETTING_UP;
 80013ee:	2201      	movs	r2, #1
 80013f0:	721a      	strb	r2, [r3, #8]
  if (pInformation->USBwLength == 0)
 80013f2:	88da      	ldrh	r2, [r3, #6]
 80013f4:	785c      	ldrb	r4, [r3, #1]
 80013f6:	2a00      	cmp	r2, #0
 80013f8:	d161      	bne.n	80014be <Setup0_Process+0x10a>
{
  RESULT Result = USB_UNSUPPORT;
  u32 RequestNo = pInformation->USBbRequest;
  u32 ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80013fa:	781a      	ldrb	r2, [r3, #0]
 80013fc:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 8001400:	d13a      	bne.n	8001478 <Setup0_Process+0xc4>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8001402:	2c09      	cmp	r4, #9
 8001404:	d102      	bne.n	800140c <Setup0_Process+0x58>
    {
      Result = Standard_SetConfiguration();
 8001406:	f7ff feab 	bl	8001160 <Standard_SetConfiguration>
 800140a:	e044      	b.n	8001496 <Setup0_Process+0xe2>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 800140c:	2c05      	cmp	r4, #5
 800140e:	d10f      	bne.n	8001430 <Setup0_Process+0x7c>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8001410:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8001414:	2a00      	cmp	r2, #0
 8001416:	da01      	bge.n	800141c <Setup0_Process+0x68>
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 8001418:	2308      	movs	r3, #8
 800141a:	e04d      	b.n	80014b8 <Setup0_Process+0x104>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 800141c:	78da      	ldrb	r2, [r3, #3]
 800141e:	2a00      	cmp	r2, #0
 8001420:	d1fa      	bne.n	8001418 <Setup0_Process+0x64>
          || (pInformation->USBwIndex != 0)
 8001422:	889a      	ldrh	r2, [r3, #4]
 8001424:	2a00      	cmp	r2, #0
 8001426:	d1f7      	bne.n	8001418 <Setup0_Process+0x64>
          || (pInformation->Current_Configuration != 0))
 8001428:	7a9b      	ldrb	r3, [r3, #10]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d037      	beq.n	800149e <Setup0_Process+0xea>
 800142e:	e7f3      	b.n	8001418 <Setup0_Process+0x64>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8001430:	2c03      	cmp	r4, #3
 8001432:	d113      	bne.n	800145c <Setup0_Process+0xa8>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 8001434:	789a      	ldrb	r2, [r3, #2]
 8001436:	2a01      	cmp	r2, #1
 8001438:	d007      	beq.n	800144a <Setup0_Process+0x96>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 800143a:	4b78      	ldr	r3, [pc, #480]	; (800161c <Setup0_Process+0x268>)
 800143c:	4620      	mov	r0, r4
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8001444:	2803      	cmp	r0, #3
 8001446:	d128      	bne.n	800149a <Setup0_Process+0xe6>
 8001448:	e035      	b.n	80014b6 <Setup0_Process+0x102>
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
          && (pInformation->USBwIndex == 0)
 800144a:	889a      	ldrh	r2, [r3, #4]
 800144c:	2a00      	cmp	r2, #0
 800144e:	d1f4      	bne.n	800143a <Setup0_Process+0x86>
          && (ValBit(pInformation->Current_Feature, 5)))
 8001450:	7a5b      	ldrb	r3, [r3, #9]
 8001452:	0698      	lsls	r0, r3, #26
 8001454:	d5f1      	bpl.n	800143a <Setup0_Process+0x86>
      {
        Result = Standard_SetDeviceFeature();
 8001456:	f7ff ff6d 	bl	8001334 <Standard_SetDeviceFeature>
 800145a:	e01c      	b.n	8001496 <Setup0_Process+0xe2>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 800145c:	2c01      	cmp	r4, #1
 800145e:	d1ec      	bne.n	800143a <Setup0_Process+0x86>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8001460:	789a      	ldrb	r2, [r3, #2]
 8001462:	2a01      	cmp	r2, #1
 8001464:	d1e9      	bne.n	800143a <Setup0_Process+0x86>
          && pInformation->USBwIndex == 0
 8001466:	889a      	ldrh	r2, [r3, #4]
 8001468:	2a00      	cmp	r2, #0
 800146a:	d1e6      	bne.n	800143a <Setup0_Process+0x86>
          && ValBit(pInformation->Current_Feature, 5))
 800146c:	7a5b      	ldrb	r3, [r3, #9]
 800146e:	0699      	lsls	r1, r3, #26
 8001470:	d5e3      	bpl.n	800143a <Setup0_Process+0x86>
      {
        Result = Standard_ClearFeature();
 8001472:	f7ff feb5 	bl	80011e0 <Standard_ClearFeature>
 8001476:	e00e      	b.n	8001496 <Setup0_Process+0xe2>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001478:	2a01      	cmp	r2, #1
 800147a:	d104      	bne.n	8001486 <Setup0_Process+0xd2>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 800147c:	2c0b      	cmp	r4, #11
 800147e:	d1dc      	bne.n	800143a <Setup0_Process+0x86>
    {
      Result = Standard_SetInterface();
 8001480:	f7ff fe8a 	bl	8001198 <Standard_SetInterface>
 8001484:	e007      	b.n	8001496 <Setup0_Process+0xe2>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001486:	2a02      	cmp	r2, #2
 8001488:	d1d7      	bne.n	800143a <Setup0_Process+0x86>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 800148a:	2c01      	cmp	r4, #1
 800148c:	d0f1      	beq.n	8001472 <Setup0_Process+0xbe>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 800148e:	2c03      	cmp	r4, #3
 8001490:	d1d3      	bne.n	800143a <Setup0_Process+0x86>
    {
      Result = Standard_SetEndPointFeature();
 8001492:	f7ff ff0d 	bl	80012b0 <Standard_SetEndPointFeature>
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8001496:	b110      	cbz	r0, 800149e <Setup0_Process+0xea>
 8001498:	e7cf      	b.n	800143a <Setup0_Process+0x86>
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 800149a:	2800      	cmp	r0, #0
 800149c:	d1bc      	bne.n	8001418 <Setup0_Process+0x64>
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 800149e:	6832      	ldr	r2, [r6, #0]
 80014a0:	4b5f      	ldr	r3, [pc, #380]	; (8001620 <Setup0_Process+0x26c>)
 80014a2:	b292      	uxth	r2, r2
 80014a4:	4413      	add	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	4b5d      	ldr	r3, [pc, #372]	; (8001624 <Setup0_Process+0x270>)
 80014ae:	2230      	movs	r2, #48	; 0x30
 80014b0:	801a      	strh	r2, [r3, #0]
  {
    ControlState = STALLED;
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 80014b2:	2306      	movs	r3, #6
 80014b4:	e000      	b.n	80014b8 <Setup0_Process+0x104>
  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
    {
      ControlState = PAUSE;
 80014b6:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 80014b8:	682a      	ldr	r2, [r5, #0]
 80014ba:	7213      	strb	r3, [r2, #8]
 80014bc:	e0d4      	b.n	8001668 <Setup0_Process+0x2b4>


  CopyRoutine = NULL;
  wOffset = 0;

  if (Request_No == GET_DESCRIPTOR)
 80014be:	2c06      	cmp	r4, #6
 80014c0:	d118      	bne.n	80014f4 <Setup0_Process+0x140>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80014c2:	781a      	ldrb	r2, [r3, #0]
 80014c4:	0652      	lsls	r2, r2, #25
 80014c6:	d17c      	bne.n	80015c2 <Setup0_Process+0x20e>
    {
      u8 wValue1 = pInformation->USBwValue1;
 80014c8:	78da      	ldrb	r2, [r3, #3]
 80014ca:	4b54      	ldr	r3, [pc, #336]	; (800161c <Setup0_Process+0x268>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 80014cc:	2a01      	cmp	r2, #1
 80014ce:	d102      	bne.n	80014d6 <Setup0_Process+0x122>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	e06c      	b.n	80015b0 <Setup0_Process+0x1fc>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 80014d6:	2a02      	cmp	r2, #2
 80014d8:	d102      	bne.n	80014e0 <Setup0_Process+0x12c>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	e067      	b.n	80015b0 <Setup0_Process+0x1fc>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 80014e0:	2a03      	cmp	r2, #3
 80014e2:	d102      	bne.n	80014ea <Setup0_Process+0x136>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	e062      	b.n	80015b0 <Setup0_Process+0x1fc>
      } else if (wValue1 == 0x21) /* added to support functional descriptors */
 80014ea:	2a21      	cmp	r2, #33	; 0x21
 80014ec:	d169      	bne.n	80015c2 <Setup0_Process+0x20e>
      {
	CopyRoutine = pProperty->GetFunctionalDescriptor;
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f2:	e05d      	b.n	80015b0 <Setup0_Process+0x1fc>
      } /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 80014f4:	2c00      	cmp	r4, #0
 80014f6:	d13c      	bne.n	8001572 <Setup0_Process+0x1be>
 80014f8:	8859      	ldrh	r1, [r3, #2]
 80014fa:	2900      	cmp	r1, #0
 80014fc:	d161      	bne.n	80015c2 <Setup0_Process+0x20e>
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001504:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001508:	d15b      	bne.n	80015c2 <Setup0_Process+0x20e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800150a:	781a      	ldrb	r2, [r3, #0]
 800150c:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 8001510:	d104      	bne.n	800151c <Setup0_Process+0x168>
        && (pInformation->USBwIndex == 0))
 8001512:	889b      	ldrh	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 80ab 	beq.w	8001670 <Setup0_Process+0x2bc>
 800151a:	e052      	b.n	80015c2 <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800151c:	2a01      	cmp	r2, #1
 800151e:	d10c      	bne.n	800153a <Setup0_Process+0x186>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8001520:	4a3e      	ldr	r2, [pc, #248]	; (800161c <Setup0_Process+0x268>)
 8001522:	7918      	ldrb	r0, [r3, #4]
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	6992      	ldr	r2, [r2, #24]
 8001528:	4790      	blx	r2
 800152a:	2800      	cmp	r0, #0
 800152c:	d149      	bne.n	80015c2 <Setup0_Process+0x20e>
          && (pInformation->Current_Configuration != 0))
 800152e:	682b      	ldr	r3, [r5, #0]
 8001530:	7a9b      	ldrb	r3, [r3, #10]
 8001532:	2b00      	cmp	r3, #0
 8001534:	f040 809c 	bne.w	8001670 <Setup0_Process+0x2bc>
 8001538:	e043      	b.n	80015c2 <Setup0_Process+0x20e>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800153a:	2a02      	cmp	r2, #2
 800153c:	d141      	bne.n	80015c2 <Setup0_Process+0x20e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800153e:	791b      	ldrb	r3, [r3, #4]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001540:	4839      	ldr	r0, [pc, #228]	; (8001628 <Setup0_Process+0x274>)
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8001542:	f003 010f 	and.w	r1, r3, #15
 8001546:	008a      	lsls	r2, r1, #2

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001548:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800154c:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8001550:	6812      	ldr	r2, [r2, #0]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001552:	7800      	ldrb	r0, [r0, #0]
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8001554:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001558:	bf14      	ite	ne
 800155a:	f002 0230 	andne.w	r2, r2, #48	; 0x30
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 800155e:	f402 5240 	andeq.w	r2, r2, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001562:	4281      	cmp	r1, r0
 8001564:	d22d      	bcs.n	80015c2 <Setup0_Process+0x20e>
 8001566:	f013 0f70 	tst.w	r3, #112	; 0x70
 800156a:	d12a      	bne.n	80015c2 <Setup0_Process+0x20e>
          && (Status != 0))
 800156c:	2a00      	cmp	r2, #0
 800156e:	d17f      	bne.n	8001670 <Setup0_Process+0x2bc>
 8001570:	e027      	b.n	80015c2 <Setup0_Process+0x20e>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8001572:	2c08      	cmp	r4, #8
 8001574:	d103      	bne.n	800157e <Setup0_Process+0x1ca>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	065b      	lsls	r3, r3, #25
 800157a:	d07b      	beq.n	8001674 <Setup0_Process+0x2c0>
 800157c:	e021      	b.n	80015c2 <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 800157e:	2c0a      	cmp	r4, #10
 8001580:	d11f      	bne.n	80015c2 <Setup0_Process+0x20e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001582:	781a      	ldrb	r2, [r3, #0]
 8001584:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001588:	2a01      	cmp	r2, #1
 800158a:	d11a      	bne.n	80015c2 <Setup0_Process+0x20e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 800158c:	7a9a      	ldrb	r2, [r3, #10]
 800158e:	b1c2      	cbz	r2, 80015c2 <Setup0_Process+0x20e>
 8001590:	8859      	ldrh	r1, [r3, #2]
 8001592:	b9b1      	cbnz	r1, 80015c2 <Setup0_Process+0x20e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800159a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800159e:	d110      	bne.n	80015c2 <Setup0_Process+0x20e>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 80015a0:	4a1e      	ldr	r2, [pc, #120]	; (800161c <Setup0_Process+0x268>)
 80015a2:	7918      	ldrb	r0, [r3, #4]
 80015a4:	6812      	ldr	r2, [r2, #0]
 80015a6:	6992      	ldr	r2, [r2, #24]
 80015a8:	4790      	blx	r2
 80015aa:	2800      	cmp	r0, #0
 80015ac:	d064      	beq.n	8001678 <Setup0_Process+0x2c4>
 80015ae:	e008      	b.n	80015c2 <Setup0_Process+0x20e>
      CopyRoutine = Standard_GetInterface;
    }

  }

  if (CopyRoutine)
 80015b0:	b13b      	cbz	r3, 80015c2 <Setup0_Process+0x20e>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 80015b2:	682a      	ldr	r2, [r5, #0]
 80015b4:	2400      	movs	r4, #0
 80015b6:	8254      	strh	r4, [r2, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80015b8:	6193      	str	r3, [r2, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 80015ba:	4620      	mov	r0, r4
 80015bc:	4798      	blx	r3
    Result = USB_SUCCESS;
 80015be:	4620      	mov	r0, r4
 80015c0:	e00a      	b.n	80015d8 <Setup0_Process+0x224>
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <Setup0_Process+0x268>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	682b      	ldr	r3, [r5, #0]
 80015c8:	6912      	ldr	r2, [r2, #16]
 80015ca:	7858      	ldrb	r0, [r3, #1]
 80015cc:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 80015ce:	2803      	cmp	r0, #3
 80015d0:	d102      	bne.n	80015d8 <Setup0_Process+0x224>
    {
      pInformation->ControlState = PAUSE;
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <Setup0_Process+0x264>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	e005      	b.n	80015e4 <Setup0_Process+0x230>
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 80015d8:	682b      	ldr	r3, [r5, #0]
 80015da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015de:	8a1a      	ldrh	r2, [r3, #16]
 80015e0:	428a      	cmp	r2, r1
 80015e2:	d101      	bne.n	80015e8 <Setup0_Process+0x234>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 80015e4:	2209      	movs	r2, #9
 80015e6:	e003      	b.n	80015f0 <Setup0_Process+0x23c>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 80015e8:	2802      	cmp	r0, #2
 80015ea:	d000      	beq.n	80015ee <Setup0_Process+0x23a>
 80015ec:	b912      	cbnz	r2, 80015f4 <Setup0_Process+0x240>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 80015ee:	2208      	movs	r2, #8
 80015f0:	721a      	strb	r2, [r3, #8]
 80015f2:	e039      	b.n	8001668 <Setup0_Process+0x2b4>
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 80015f4:	f993 1000 	ldrsb.w	r1, [r3]
 80015f8:	2900      	cmp	r1, #0
 80015fa:	da2f      	bge.n	800165c <Setup0_Process+0x2a8>
  {
    /* Device ==> Host */
    vu32 wLength = pInformation->USBwLength;
 80015fc:	88d9      	ldrh	r1, [r3, #6]
 80015fe:	9101      	str	r1, [sp, #4]

    /* Restrict the data length to be the one host asks */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8001600:	9801      	ldr	r0, [sp, #4]
 8001602:	4282      	cmp	r2, r0
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <Setup0_Process+0x268>)
 8001606:	d911      	bls.n	800162c <Setup0_Process+0x278>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8001608:	9a01      	ldr	r2, [sp, #4]
 800160a:	821a      	strh	r2, [r3, #16]
 800160c:	e01f      	b.n	800164e <Setup0_Process+0x29a>
 800160e:	bf00      	nop
 8001610:	40005c50 	andmi	r5, r0, r0, asr ip
 8001614:	20003004 	andcs	r3, r0, r4
 8001618:	20000200 	andcs	r0, r0, r0, lsl #4
 800161c:	200001d8 	ldrdcs	r0, [r0], -r8
 8001620:	20003002 	andcs	r3, r0, r2
 8001624:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8001628:	20000090 	mulcs	r0, r0, r0
    }

    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 800162c:	428a      	cmp	r2, r1
 800162e:	d20e      	bcs.n	800164e <Setup0_Process+0x29a>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8001630:	6801      	ldr	r1, [r0, #0]
 8001632:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 8001636:	428a      	cmp	r2, r1
 8001638:	d201      	bcs.n	800163e <Setup0_Process+0x28a>
      {
        Data_Mul_MaxPacketSize = FALSE;
 800163a:	2100      	movs	r1, #0
 800163c:	e005      	b.n	800164a <Setup0_Process+0x296>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800163e:	fb92 f4f1 	sdiv	r4, r2, r1
 8001642:	fb01 2214 	mls	r2, r1, r4, r2
 8001646:	b912      	cbnz	r2, 800164e <Setup0_Process+0x29a>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8001648:	2101      	movs	r1, #1
 800164a:	4a0c      	ldr	r2, [pc, #48]	; (800167c <Setup0_Process+0x2c8>)
 800164c:	7011      	strb	r1, [r2, #0]
      }
    }

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 800164e:	6802      	ldr	r2, [r0, #0]
 8001650:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8001654:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8001656:	f7ff fd2f 	bl	80010b8 <DataStageIn>
 800165a:	e005      	b.n	8001668 <Setup0_Process+0x2b4>
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 800165c:	2203      	movs	r2, #3
 800165e:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <Setup0_Process+0x2cc>)
 8001662:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001666:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8001668:	f7ff fe84 	bl	8001374 <Post0_Process>
}
 800166c:	b002      	add	sp, #8
 800166e:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
        && (pInformation->USBwIndex == 0))
    {
      CopyRoutine = Standard_GetStatus;
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <Setup0_Process+0x2d0>)
 8001672:	e79e      	b.n	80015b2 <Setup0_Process+0x1fe>
  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      CopyRoutine = Standard_GetConfiguration;
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <Setup0_Process+0x2d4>)
 8001676:	e79c      	b.n	80015b2 <Setup0_Process+0x1fe>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
    {
      CopyRoutine = Standard_GetInterface;
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <Setup0_Process+0x2d8>)
 800167a:	e79a      	b.n	80015b2 <Setup0_Process+0x1fe>
 800167c:	20000a20 	andcs	r0, r0, r0, lsr #20
 8001680:	200001ce 	andcs	r0, r0, lr, asr #3
 8001684:	08001029 	stmdaeq	r0, {r0, r3, r5, ip}
 8001688:	08000fe1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, sl, fp}
 800168c:	08001005 	stmdaeq	r0, {r0, r2, ip}

08001690 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Out0_Process(void)
{
 8001690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32 ControlState = pInformation->ControlState;
 8001692:	4d2b      	ldr	r5, [pc, #172]	; (8001740 <Out0_Process+0xb0>)
 8001694:	682c      	ldr	r4, [r5, #0]
 8001696:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8001698:	2b03      	cmp	r3, #3
 800169a:	d001      	beq.n	80016a0 <Out0_Process+0x10>
 800169c:	2b05      	cmp	r3, #5
 800169e:	d141      	bne.n	8001724 <Out0_Process+0x94>
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 80016a0:	69a3      	ldr	r3, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 80016a2:	8a22      	ldrh	r2, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 80016a4:	b1ab      	cbz	r3, 80016d2 <Out0_Process+0x42>
 80016a6:	b1a2      	cbz	r2, 80016d2 <Out0_Process+0x42>
  {
    u8 *Buffer;
    u32 Length;

    Length = pEPinfo->PacketSize;
 80016a8:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80016aa:	4296      	cmp	r6, r2
 80016ac:	bf28      	it	cs
 80016ae:	4616      	movcs	r6, r2
 80016b0:	4630      	mov	r0, r6
 80016b2:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 80016b4:	8a23      	ldrh	r3, [r4, #16]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80016b6:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 80016b8:	1b9b      	subs	r3, r3, r6
 80016ba:	8223      	strh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 80016bc:	8a63      	ldrh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 80016be:	2000      	movs	r0, #0
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 80016c0:	4433      	add	r3, r6
 80016c2:	8263      	strh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 80016c4:	f7ff fb8a 	bl	8000ddc <GetEPRxAddr>
 80016c8:	4632      	mov	r2, r6
 80016ca:	4601      	mov	r1, r0
 80016cc:	4638      	mov	r0, r7
 80016ce:	f000 f8a5 	bl	800181c <PMAToUserBufferCopy>
  }

  if (pEPinfo->Usb_rLength != 0)
 80016d2:	8a23      	ldrh	r3, [r4, #16]
 80016d4:	b153      	cbz	r3, 80016ec <Out0_Process+0x5c>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80016d6:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <Out0_Process+0xb4>)
    SetEPTxCount(ENDP0, 0);
 80016d8:	2000      	movs	r0, #0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80016da:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 80016de:	4601      	mov	r1, r0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80016e0:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 80016e2:	f7ff fb89 	bl	8000df8 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <Out0_Process+0xb8>)
 80016e8:	2230      	movs	r2, #48	; 0x30
 80016ea:	801a      	strh	r2, [r3, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80016ec:	8a23      	ldrh	r3, [r4, #16]
 80016ee:	8aa2      	ldrh	r2, [r4, #20]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d802      	bhi.n	80016fa <Out0_Process+0x6a>
  {
    pInformation->ControlState = OUT_DATA;
 80016f4:	682b      	ldr	r3, [r5, #0]
 80016f6:	2203      	movs	r2, #3
 80016f8:	e002      	b.n	8001700 <Out0_Process+0x70>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 80016fa:	b11b      	cbz	r3, 8001704 <Out0_Process+0x74>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 80016fc:	682b      	ldr	r3, [r5, #0]
 80016fe:	2205      	movs	r2, #5
 8001700:	721a      	strb	r2, [r3, #8]
 8001702:	e00c      	b.n	800171e <Out0_Process+0x8e>
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8001704:	682a      	ldr	r2, [r5, #0]
 8001706:	2106      	movs	r1, #6
 8001708:	7211      	strb	r1, [r2, #8]
      USB_StatusIn();
 800170a:	4a10      	ldr	r2, [pc, #64]	; (800174c <Out0_Process+0xbc>)
 800170c:	6811      	ldr	r1, [r2, #0]
 800170e:	4a10      	ldr	r2, [pc, #64]	; (8001750 <Out0_Process+0xc0>)
 8001710:	b289      	uxth	r1, r1
 8001712:	440a      	add	r2, r1
 8001714:	0052      	lsls	r2, r2, #1
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <Out0_Process+0xb8>)
 800171a:	2230      	movs	r2, #48	; 0x30
 800171c:	801a      	strh	r2, [r3, #0]
  u32 ControlState = pInformation->ControlState;

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 800171e:	682b      	ldr	r3, [r5, #0]
 8001720:	7a1b      	ldrb	r3, [r3, #8]
 8001722:	e006      	b.n	8001732 <Out0_Process+0xa2>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8001724:	2b07      	cmp	r3, #7
 8001726:	d103      	bne.n	8001730 <Out0_Process+0xa0>
  {
    (*pProperty->Process_Status_OUT)();
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <Out0_Process+0xc4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	4798      	blx	r3
  }

  else if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 8001730:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8001732:	682a      	ldr	r2, [r5, #0]
 8001734:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 8001736:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 800173a:	f7ff be1b 	b.w	8001374 <Post0_Process>
 800173e:	bf00      	nop
 8001740:	20000200 	andcs	r0, r0, r0, lsl #4
 8001744:	200001ce 	andcs	r0, r0, lr, asr #3
 8001748:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800174c:	40005c50 	andmi	r5, r0, r0, asr ip
 8001750:	20003002 	andcs	r3, r0, r2
 8001754:	200001d8 	ldrdcs	r0, [r0], -r8

08001758 <SetDeviceAddress>:
* Input          : - Val: device adress.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(u8 Val)
{
 8001758:	b530      	push	{r4, r5, lr}
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <SetDeviceAddress+0x30>)
 800175c:	781c      	ldrb	r4, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800175e:	2300      	movs	r3, #0
 8001760:	42a3      	cmp	r3, r4
 8001762:	d20c      	bcs.n	800177e <SetDeviceAddress+0x26>
 8001764:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8001768:	f502 52b8 	add.w	r2, r2, #5888	; 0x1700
 800176c:	0091      	lsls	r1, r2, #2
  {
    _SetEPAddress((u8)i, (u8)i);
 800176e:	680d      	ldr	r5, [r1, #0]
 8001770:	f648 728f 	movw	r2, #36751	; 0x8f8f
 8001774:	402a      	ands	r2, r5
 8001776:	431a      	orrs	r2, r3
 8001778:	600a      	str	r2, [r1, #0]
{
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800177a:	3301      	adds	r3, #1
 800177c:	e7f0      	b.n	8001760 <SetDeviceAddress+0x8>
  {
    _SetEPAddress((u8)i, (u8)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800177e:	4b03      	ldr	r3, [pc, #12]	; (800178c <SetDeviceAddress+0x34>)
 8001780:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8001784:	6018      	str	r0, [r3, #0]
 8001786:	bd30      	pop	{r4, r5, pc}
 8001788:	20000090 	mulcs	r0, r0, r0
 800178c:	40005c4c 	andmi	r5, r0, ip, asr #24

08001790 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 In0_Process(void)
{
 8001790:	b510      	push	{r4, lr}
  u32 ControlState = pInformation->ControlState;
 8001792:	4c13      	ldr	r4, [pc, #76]	; (80017e0 <In0_Process+0x50>)
 8001794:	6823      	ldr	r3, [r4, #0]
 8001796:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8001798:	2a02      	cmp	r2, #2
 800179a:	d001      	beq.n	80017a0 <In0_Process+0x10>
 800179c:	2a04      	cmp	r2, #4
 800179e:	d104      	bne.n	80017aa <In0_Process+0x1a>
  {
    DataStageIn();
 80017a0:	f7ff fc8a 	bl	80010b8 <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 80017a4:	6823      	ldr	r3, [r4, #0]
 80017a6:	7a1b      	ldrb	r3, [r3, #8]
 80017a8:	e013      	b.n	80017d2 <In0_Process+0x42>
  }

  else if (ControlState == WAIT_STATUS_IN)
 80017aa:	2a06      	cmp	r2, #6
 80017ac:	d110      	bne.n	80017d0 <In0_Process+0x40>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80017ae:	785a      	ldrb	r2, [r3, #1]
 80017b0:	2a05      	cmp	r2, #5
 80017b2:	d109      	bne.n	80017c8 <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 80017b4:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80017b6:	0652      	lsls	r2, r2, #25
 80017b8:	d106      	bne.n	80017c8 <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 80017ba:	7898      	ldrb	r0, [r3, #2]
 80017bc:	f7ff ffcc 	bl	8001758 <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <In0_Process+0x54>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	4798      	blx	r3
    }
    (*pProperty->Process_Status_IN)();
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <In0_Process+0x58>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	4798      	blx	r3
    ControlState = STALLED;
  }

  else
  {
    ControlState = STALLED;
 80017d0:	2308      	movs	r3, #8
  }

  pInformation->ControlState = ControlState;
 80017d2:	6822      	ldr	r2, [r4, #0]
 80017d4:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 80017d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 80017da:	f7ff bdcb 	b.w	8001374 <Post0_Process>
 80017de:	bf00      	nop
 80017e0:	20000200 	andcs	r0, r0, r0, lsl #4
 80017e4:	200001fc 	strdcs	r0, [r0], -ip
 80017e8:	200001d8 	ldrdcs	r0, [r0], -r8

080017ec <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 80017ec:	b530      	push	{r4, r5, lr}
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 80017ee:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 80017f2:	3201      	adds	r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 80017f4:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 80017f8:	1052      	asrs	r2, r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 80017fa:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 80017fc:	2300      	movs	r3, #0
 80017fe:	4293      	cmp	r3, r2
 8001800:	f100 0002 	add.w	r0, r0, #2
 8001804:	d009      	beq.n	800181a <UserToPMABufferCopy+0x2e>
  {
    temp1 = (u16) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 8001806:	f810 5c01 	ldrb.w	r5, [r0, #-1]
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (u16) * pbUsrBuf;
 800180a:	f810 4c02 	ldrb.w	r4, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 800180e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    *pdwVal++ = temp2;
 8001812:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 8001816:	3301      	adds	r3, #1
 8001818:	e7f1      	b.n	80017fe <UserToPMABufferCopy+0x12>
    pdwVal++;
    pbUsrBuf++;
  }
}
 800181a:	bd30      	pop	{r4, r5, pc}

0800181c <PMAToUserBufferCopy>:
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 800181c:	b510      	push	{r4, lr}
  u32 n = (wNBytes + 1) >> 1;/* /2*/
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 800181e:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 8001822:	3201      	adds	r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 8001824:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 8001828:	1052      	asrs	r2, r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 800182a:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 800182c:	2300      	movs	r3, #0
 800182e:	4293      	cmp	r3, r2
 8001830:	d005      	beq.n	800183e <PMAToUserBufferCopy+0x22>
  {
    *(u16*)pbUsrBuf++ = *pdwVal++;
 8001832:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8001836:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 800183a:	3301      	adds	r3, #1
 800183c:	e7f7      	b.n	800182e <PMAToUserBufferCopy+0x12>
    pbUsrBuf++;
  }
}
 800183e:	bd10      	pop	{r4, pc}

Disassembly of section .data:

20000000 <Device_Property>:
20000000:	08000495 	stmdaeq	r0, {r0, r2, r4, r7, sl}
20000004:	08000181 	stmdaeq	r0, {r0, r7, r8}
20000008:	0800013f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r8}
2000000c:	08000141 	stmdaeq	r0, {r0, r6, r8}
20000010:	08000229 	stmdaeq	r0, {r0, r3, r5, r9}
20000014:	080002cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9}
20000018:	08000143 	stmdaeq	r0, {r0, r1, r6, r8}
2000001c:	08000289 	stmdaeq	r0, {r0, r3, r7, r9}
20000020:	08000295 	stmdaeq	r0, {r0, r2, r4, r7, r9}
20000024:	080002a1 	stmdaeq	r0, {r0, r5, r7, r9}
20000028:	080002c1 	stmdaeq	r0, {r0, r6, r7, r9}
2000002c:	00000000 	andeq	r0, r0, r0
20000030:	00000040 	andeq	r0, r0, r0, asr #32

20000034 <pEpInt_IN>:
20000034:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000038:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
2000003c:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000040:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000044:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000048:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
2000004c:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}

20000050 <pEpInt_OUT>:
20000050:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000054:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000058:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
2000005c:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000060:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000064:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000068:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}

2000006c <User_Standard_Requests>:
2000006c:	0800014d 	stmdaeq	r0, {r0, r2, r3, r6, r8}
20000070:	08000151 	stmdaeq	r0, {r0, r4, r6, r8}
20000074:	08000169 	stmdaeq	r0, {r0, r3, r5, r6, r8}
20000078:	0800016b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r8}
2000007c:	0800016d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8}
20000080:	0800016f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r8}
20000084:	08000171 	stmdaeq	r0, {r0, r4, r5, r6, r8}
20000088:	08000173 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8}
2000008c:	08000175 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8}

20000090 <Device_Table>:
20000090:	00000101 	andeq	r0, r0, r1, lsl #2

20000094 <usbStringDescriptor>:
20000094:	200000e8 	andcs	r0, r0, r8, ror #1
20000098:	00000004 	andeq	r0, r0, r4
2000009c:	20000124 	andcs	r0, r0, r4, lsr #2
200000a0:	0000001e 	andeq	r0, r0, lr, lsl r0
200000a4:	2000014c 	andcs	r0, r0, ip, asr #2
200000a8:	00000016 	andeq	r0, r0, r6, lsl r0
200000ac:	20000107 	andcs	r0, r0, r7, lsl #2
200000b0:	00000014 	andeq	r0, r0, r4, lsl r0
200000b4:	20000162 	andcs	r0, r0, r2, ror #2
200000b8:	00000050 	andeq	r0, r0, r0, asr r0
	...

200000cc <u8_usbDeviceDescriptorDFU>:
200000cc:	01000112 	tsteq	r0, r2, lsl r1
200000d0:	40000000 	andmi	r0, r0, r0
200000d4:	00030203 	andeq	r0, r3, r3, lsl #4
200000d8:	02010201 	andeq	r0, r1, #268435456	; 0x10000000
200000dc:	00000103 	andeq	r0, r0, r3, lsl #2

200000e0 <usbFunctionalDescriptor>:
200000e0:	2000011b 	andcs	r0, r0, fp, lsl r1
200000e4:	00000009 	andeq	r0, r0, r9

200000e8 <u8_usbStringLangId>:
200000e8:	04090304 	streq	r0, [r9], #-772	; 0x304

200000ec <u8_usbConfigDescriptorDFU>:
200000ec:	001b0209 	andseq	r0, fp, r9, lsl #4
200000f0:	80000101 	andhi	r0, r0, r1, lsl #2
200000f4:	00040932 	andeq	r0, r4, r2, lsr r9
200000f8:	01fe0000 	mvnseq	r0, r0
200000fc:	21090402 	tstcs	r9, r2, lsl #8
20000100:	0000ff03 	andeq	pc, r0, r3, lsl #30
20000104:	14011008 	strne	r1, [r1], #-8

20000107 <u8_usbStringSerial>:
20000107:	00300314 	eorseq	r0, r0, r4, lsl r3
2000010b:	00300032 	eorseq	r0, r0, r2, lsr r0
2000010f:	00200033 	eoreq	r0, r0, r3, lsr r0
20000113:	00300030 	eorseq	r0, r0, r0, lsr r0
20000117:	00330030 	eorseq	r0, r3, r0, lsr r0

2000011b <u8_usbFunctionalDescriptor>:
2000011b:	ff032109 			; <UNDEFINED> instruction: 0xff032109
2000011f:	10080000 	andne	r0, r8, r0
20000123:	32031e01 	andcc	r1, r3, #1, 28

20000124 <u8_usbStringVendor>:
20000124:	0032031e 	eorseq	r0, r2, lr, lsl r3
20000128:	00330030 	eorseq	r0, r3, r0, lsr r0
2000012c:	00490020 	subeq	r0, r9, r0, lsr #32
20000130:	0064006e 	rsbeq	r0, r4, lr, rrx
20000134:	00730075 	rsbseq	r0, r3, r5, ror r0
20000138:	00720074 	rsbseq	r0, r2, r4, ror r0
2000013c:	00650069 	rsbeq	r0, r5, r9, rrx
20000140:	00000073 	andeq	r0, r0, r3, ror r0

20000144 <usbDeviceDescriptorDFU>:
20000144:	200000cc 	andcs	r0, r0, ip, asr #1
20000148:	00000012 	andeq	r0, r0, r2, lsl r0

2000014c <u8_usbStringProduct>:
2000014c:	004d0316 	subeq	r0, sp, r6, lsl r3
20000150:	00740061 	rsbseq	r0, r4, r1, rrx
20000154:	00690072 	rsbeq	r0, r9, r2, ror r0
20000158:	00200078 	eoreq	r0, r0, r8, ror r0
2000015c:	00460044 	subeq	r0, r6, r4, asr #32
20000160:	03500055 	cmpeq	r0, #85	; 0x55

20000162 <u8_usbStringAlt0>:
20000162:	004d0350 	subeq	r0, sp, r0, asr r3
20000166:	00740061 	rsbseq	r0, r4, r1, rrx
2000016a:	00690072 	rsbeq	r0, r9, r2, ror r0
2000016e:	00200078 	eoreq	r0, r0, r8, ror r0
20000172:	006f0042 	rsbeq	r0, pc, r2, asr #32
20000176:	0074006f 	rsbseq	r0, r4, pc, rrx
2000017a:	006f006c 	rsbeq	r0, pc, ip, rrx
2000017e:	00640061 	rsbeq	r0, r4, r1, rrx
20000182:	00720065 	rsbseq	r0, r2, r5, rrx
20000186:	00760020 	rsbseq	r0, r6, r0, lsr #32
2000018a:	002e0031 	eoreq	r0, lr, r1, lsr r0
2000018e:	00200032 	eoreq	r0, r0, r2, lsr r0
20000192:	00550020 	subseq	r0, r5, r0, lsr #32
20000196:	006c0070 	rsbeq	r0, ip, r0, ror r0
2000019a:	0061006f 	rsbeq	r0, r1, pc, rrx
2000019e:	00200064 	eoreq	r0, r0, r4, rrx
200001a2:	00690046 	rsbeq	r0, r9, r6, asr #32
200001a6:	006d0072 	rsbeq	r0, sp, r2, ror r0
200001aa:	00610077 	rsbeq	r0, r1, r7, ror r0
200001ae:	00650072 	rsbeq	r0, r5, r2, ror r0
	...

200001b4 <usbConfigDescriptorDFU>:
200001b4:	200000ec 	andcs	r0, r0, ip, ror #1
200001b8:	0000001b 	andeq	r0, r0, fp, lsl r0

200001bc <userAppEnd>:
200001bc:	20005000 	andcs	r5, r0, r0

200001c0 <userAppAddr>:
200001c0:	20000c00 	andcs	r0, r0, r0, lsl #24

Disassembly of section .bss:

200001c4 <_sbss>:
200001c4:	00000000 	andeq	r0, r0, r0

200001c8 <wIstr>:
	...

200001ca <ResumeS>:
	...

200001cc <code_copy_lock>:
	...

200001ce <SaveRState>:
	...

200001d0 <SaveTState>:
200001d0:	00000000 	andeq	r0, r0, r0

200001d4 <SaveState>:
200001d4:	00000000 	andeq	r0, r0, r0

200001d8 <pProperty>:
200001d8:	00000000 	andeq	r0, r0, r0

200001dc <EPindex>:
200001dc:	00000000 	andeq	r0, r0, r0

200001e0 <Device_Info>:
	...

200001fc <pUser_Standard_Requests>:
200001fc:	00000000 	andeq	r0, r0, r0

20000200 <pInformation>:
20000200:	00000000 	andeq	r0, r0, r0

20000204 <wInterrupt_Mask>:
	...

20000206 <StatusInfo>:
	...

Disassembly of section .bss.bIntPackSOF:

20000208 <bIntPackSOF>:
	...

Disassembly of section .bss.bDeviceState:

2000020c <bDeviceState>:
2000020c:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.recvBuffer:

20000210 <recvBuffer>:
	...

Disassembly of section .bss.uploadBlockLen:

20000a10 <uploadBlockLen>:
	...

Disassembly of section .bss.thisBlockLen:

20000a12 <thisBlockLen>:
	...

Disassembly of section .bss.userFirmwareLen:

20000a14 <userFirmwareLen>:
20000a14:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.userUploadType:

20000a18 <userUploadType>:
	...

Disassembly of section .bss.dfuAppStatus:

20000a19 <dfuAppStatus>:
20000a19:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .bss.dfuBusy:

20000a1f <dfuBusy>:
	...

Disassembly of section .bss.Data_Mul_MaxPacketSize:

20000a20 <Data_Mul_MaxPacketSize>:
	...

Disassembly of section ._usrstack:

20000a21 <_susrstack-0x3>:
20000a21:	00000000 	andeq	r0, r0, r0

20000a24 <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
   0:	3a434347 	bcc	10d0d24 <__Stack_Size+0x10d0924>
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xd45
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	64724128 	ldrbtvs	r4, [r2], #-296	; 0x128
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	6f6e6975 	svcvs	0x006e6975
  34:	69756220 	ldmdbvs	r5!, {r5, r9, sp, lr}^
  38:	2929646c 	stmdbcs	r9!, {r2, r3, r5, r6, sl, sp, lr}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	3220332e 	eorcc	r3, r0, #-1207959552	; 0xb8000000
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	30343130 	eorscc	r3, r4, r0, lsr r1
  48:	20383232 	eorscs	r3, r8, r2, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <BootRAM+0xef6faaf>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	2d385f34 	ldccs	15, cr5, [r8, #-208]!	; 0xffffff30
  68:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  6c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(u8 bEpNum, u8 bDir, u16 wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
  70:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  74:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  78:	33383032 	teqcc	r8, #50	; 0x32
  7c:	005d3232 	subseq	r3, sp, r2, lsr r2

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	14041202 	strne	r1, [r4], #-514	; 0x202
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	1a011803 	bne	4603c <__Stack_Size+0x45c3c>
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	080000f0 	stmdaeq	r0, {r4, r5, r6, r7}
  14:	00000048 	andeq	r0, r0, r8, asr #32
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	08000138 	stmdaeq	r0, {r3, r4, r5, r8}
  1c:	00000004 	andeq	r0, r0, r4
	...
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	006f0002 	rsbeq	r0, pc, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	00040000 	andeq	r0, r4, r0
	...

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	0000007a 	andeq	r0, r0, sl, ror r0
	...

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  48:	00000114 	andeq	r0, r0, r4, lsl r1
  4c:	00e40002 	rsceq	r0, r4, r2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	0800013c 	stmdaeq	r0, {r2, r3, r4, r5, r8}
  5c:	00000002 	andeq	r0, r0, r2
  60:	0800013e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8}
  64:	00000002 	andeq	r0, r0, r2
  68:	08000140 	stmdaeq	r0, {r6, r8}
  6c:	00000002 	andeq	r0, r0, r2
  70:	08000142 	stmdaeq	r0, {r1, r6, r8}
  74:	0000000a 	andeq	r0, r0, sl
  78:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
  7c:	00000002 	andeq	r0, r0, r2
  80:	08000150 	stmdaeq	r0, {r4, r6, r8}
  84:	00000018 	andeq	r0, r0, r8, lsl r0
  88:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}
  8c:	00000002 	andeq	r0, r0, r2
  90:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
  94:	00000002 	andeq	r0, r0, r2
  98:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  9c:	00000002 	andeq	r0, r0, r2
  a0:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
  a4:	00000002 	andeq	r0, r0, r2
  a8:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
  ac:	00000002 	andeq	r0, r0, r2
  b0:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
  b4:	00000002 	andeq	r0, r0, r2
  b8:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	08000180 	stmdaeq	r0, {r7, r8}
  c4:	000000a8 	andeq	r0, r0, r8, lsr #1
  c8:	08000228 	stmdaeq	r0, {r3, r5, r9}
  cc:	00000060 	andeq	r0, r0, r0, rrx
  d0:	08000288 	stmdaeq	r0, {r3, r7, r9}
  d4:	0000000c 	andeq	r0, r0, ip
  d8:	08000294 	stmdaeq	r0, {r2, r4, r7, r9}
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	080002a0 	stmdaeq	r0, {r5, r7, r9}
  e4:	00000020 	andeq	r0, r0, r0, lsr #32
  e8:	080002c0 	stmdaeq	r0, {r6, r7, r9}
  ec:	0000000c 	andeq	r0, r0, ip
  f0:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
  f8:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
  fc:	0000007c 	andeq	r0, r0, ip, ror r0
 100:	00000000 	andeq	r0, r0, r0
 104:	00000004 	andeq	r0, r0, r4
 108:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
 10c:	0000001c 	andeq	r0, r0, ip, lsl r0
 110:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
 114:	00000018 	andeq	r0, r0, r8, lsl r0
 118:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
 11c:	00000084 	andeq	r0, r0, r4, lsl #1
 120:	08000428 	stmdaeq	r0, {r3, r5, sl}
 124:	00000028 	andeq	r0, r0, r8, lsr #32
 128:	08000450 	stmdaeq	r0, {r4, r6, sl}
 12c:	0000001c 	andeq	r0, r0, ip, lsl r0
 130:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
 134:	00000004 	andeq	r0, r0, r4
 138:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
 13c:	00000024 	andeq	r0, r0, r4, lsr #32
 140:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
 144:	00000040 	andeq	r0, r0, r0, asr #32
 148:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
 14c:	00000022 	andeq	r0, r0, r2, lsr #32
 150:	080004f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl}
 154:	000000b4 	strheq	r0, [r0], -r4
	...
 160:	00000014 	andeq	r0, r0, r4, lsl r0
 164:	0df60002 	ldcleq	0, cr0, [r6, #8]!
 168:	00040000 	andeq	r0, r4, r0
	...
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	10150002 	andsne	r0, r5, r2
 180:	00040000 	andeq	r0, r4, r0
 184:	00000000 	andeq	r0, r0, r0
 188:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
 18c:	00000078 	andeq	r0, r0, r8, ror r0
	...
 198:	000000d4 	ldrdeq	r0, [r0], -r4
 19c:	12670002 	rsbne	r0, r7, #2
 1a0:	00040000 	andeq	r0, r4, r0
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 1ac:	00000016 	andeq	r0, r0, r6, lsl r0
 1b0:	00000000 	andeq	r0, r0, r0
 1b4:	00000012 	andeq	r0, r0, r2, lsl r0
 1b8:	0800063c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl}
 1bc:	00000010 	andeq	r0, r0, r0, lsl r0
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	00000050 	andeq	r0, r0, r0, asr r0
 1c8:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
 1cc:	00000048 	andeq	r0, r0, r8, asr #32
 1d0:	08000694 	stmdaeq	r0, {r2, r4, r7, r9, sl}
 1d4:	00000060 	andeq	r0, r0, r0, rrx
 1d8:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
 1dc:	00000018 	andeq	r0, r0, r8, lsl r0
 1e0:	0800070c 	stmdaeq	r0, {r2, r3, r8, r9, sl}
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e8:	08000728 	stmdaeq	r0, {r3, r5, r8, r9, sl}
 1ec:	00000014 	andeq	r0, r0, r4, lsl r0
 1f0:	0800073c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl}
 1f4:	00000018 	andeq	r0, r0, r8, lsl r0
 1f8:	08000754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl}
 1fc:	0000002c 	andeq	r0, r0, ip, lsr #32
 200:	08000780 	stmdaeq	r0, {r7, r8, r9, sl}
 204:	00000048 	andeq	r0, r0, r8, asr #32
 208:	080007c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl}
 20c:	0000006c 	andeq	r0, r0, ip, rrx
 210:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
 214:	00000024 	andeq	r0, r0, r4, lsr #32
 218:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
 21c:	00000028 	andeq	r0, r0, r8, lsr #32
 220:	08000880 	stmdaeq	r0, {r7, fp}
 224:	00000014 	andeq	r0, r0, r4, lsl r0
 228:	08000894 	stmdaeq	r0, {r2, r4, r7, fp}
 22c:	00000034 	andeq	r0, r0, r4, lsr r0
 230:	00000000 	andeq	r0, r0, r0
 234:	00000030 	andeq	r0, r0, r0, lsr r0
 238:	080008c8 	stmdaeq	r0, {r3, r6, r7, fp}
 23c:	0000004c 	andeq	r0, r0, ip, asr #32
 240:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
 244:	0000000c 	andeq	r0, r0, ip
 248:	08000920 	stmdaeq	r0, {r5, r8, fp}
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
 250:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
 254:	00000012 	andeq	r0, r0, r2, lsl r0
 258:	0800094c 	stmdaeq	r0, {r2, r3, r6, r8, fp}
 25c:	00000010 	andeq	r0, r0, r0, lsl r0
 260:	0800095c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp}
 264:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 270:	0000007c 	andeq	r0, r0, ip, ror r0
 274:	1d8e0002 	stcne	0, cr0, [lr, #8]
 278:	00040000 	andeq	r0, r4, r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	08000974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp}
 284:	0000005c 	andeq	r0, r0, ip, asr r0
 288:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
 28c:	00000044 	andeq	r0, r0, r4, asr #32
 290:	00000000 	andeq	r0, r0, r0
 294:	00000002 	andeq	r0, r0, r2
 298:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
 2a4:	00000018 	andeq	r0, r0, r8, lsl r0
 2a8:	08000a44 	stmdaeq	r0, {r2, r6, r9, fp}
 2ac:	00000028 	andeq	r0, r0, r8, lsr #32
 2b0:	08000a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp}
 2b4:	00000034 	andeq	r0, r0, r4, lsr r0
 2b8:	08000aa0 	stmdaeq	r0, {r5, r7, r9, fp}
 2bc:	0000005c 	andeq	r0, r0, ip, asr r0
 2c0:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
 2c4:	00000210 	andeq	r0, r0, r0, lsl r2
 2c8:	00000000 	andeq	r0, r0, r0
 2cc:	0000000c 	andeq	r0, r0, ip
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	0000000c 	andeq	r0, r0, ip
 2d8:	08000d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp}
 2dc:	0000000c 	andeq	r0, r0, ip
 2e0:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
 2e4:	00000004 	andeq	r0, r0, r4
	...
 2f0:	000001ec 	andeq	r0, r0, ip, ror #3
 2f4:	23ea0002 	mvncs	r0, #2
 2f8:	00040000 	andeq	r0, r4, r0
	...
 304:	0000000c 	andeq	r0, r0, ip
 308:	00000000 	andeq	r0, r0, r0
 30c:	0000000c 	andeq	r0, r0, ip
 310:	00000000 	andeq	r0, r0, r0
 314:	0000000c 	andeq	r0, r0, ip
 318:	00000000 	andeq	r0, r0, r0
 31c:	0000000c 	andeq	r0, r0, ip
 320:	00000000 	andeq	r0, r0, r0
 324:	0000000c 	andeq	r0, r0, ip
 328:	00000000 	andeq	r0, r0, r0
 32c:	0000000c 	andeq	r0, r0, ip
 330:	00000000 	andeq	r0, r0, r0
 334:	0000000c 	andeq	r0, r0, ip
 338:	00000000 	andeq	r0, r0, r0
 33c:	00000010 	andeq	r0, r0, r0, lsl r0
 340:	00000000 	andeq	r0, r0, r0
 344:	0000000c 	andeq	r0, r0, ip
 348:	00000000 	andeq	r0, r0, r0
 34c:	0000000e 	andeq	r0, r0, lr
 350:	00000000 	andeq	r0, r0, r0
 354:	00000010 	andeq	r0, r0, r0, lsl r0
 358:	00000000 	andeq	r0, r0, r0
 35c:	0000001c 	andeq	r0, r0, ip, lsl r0
 360:	00000000 	andeq	r0, r0, r0
 364:	00000012 	andeq	r0, r0, r2, lsl r0
 368:	08000d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp}
 36c:	0000002a 	andeq	r0, r0, sl, lsr #32
 370:	00000000 	andeq	r0, r0, r0
 374:	0000002a 	andeq	r0, r0, sl, lsr #32
 378:	00000000 	andeq	r0, r0, r0
 37c:	00000024 	andeq	r0, r0, r4, lsr #32
 380:	00000000 	andeq	r0, r0, r0
 384:	00000012 	andeq	r0, r0, r2, lsl r0
 388:	00000000 	andeq	r0, r0, r0
 38c:	00000012 	andeq	r0, r0, r2, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	0000001e 	andeq	r0, r0, lr, lsl r0
 398:	08000d46 	stmdaeq	r0, {r1, r2, r6, r8, sl, fp}
 39c:	0000001e 	andeq	r0, r0, lr, lsl r0
 3a0:	00000000 	andeq	r0, r0, r0
 3a4:	0000001e 	andeq	r0, r0, lr, lsl r0
 3a8:	00000000 	andeq	r0, r0, r0
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	08000d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp}
 3b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b8:	00000000 	andeq	r0, r0, r0
 3bc:	0000001e 	andeq	r0, r0, lr, lsl r0
 3c0:	00000000 	andeq	r0, r0, r0
 3c4:	0000001e 	andeq	r0, r0, lr, lsl r0
 3c8:	00000000 	andeq	r0, r0, r0
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	0000001a 	andeq	r0, r0, sl, lsl r0
 3d8:	00000000 	andeq	r0, r0, r0
 3dc:	0000001a 	andeq	r0, r0, sl, lsl r0
 3e0:	00000000 	andeq	r0, r0, r0
 3e4:	00000018 	andeq	r0, r0, r8, lsl r0
 3e8:	00000000 	andeq	r0, r0, r0
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	00000020 	andeq	r0, r0, r0, lsr #32
 3f8:	00000000 	andeq	r0, r0, r0
 3fc:	00000020 	andeq	r0, r0, r0, lsr #32
 400:	08000d80 	stmdaeq	r0, {r7, r8, sl, fp}
 404:	00000020 	andeq	r0, r0, r0, lsr #32
 408:	08000da0 	stmdaeq	r0, {r5, r7, r8, sl, fp}
 40c:	00000020 	andeq	r0, r0, r0, lsr #32
 410:	00000000 	andeq	r0, r0, r0
 414:	0000001e 	andeq	r0, r0, lr, lsl r0
 418:	00000000 	andeq	r0, r0, r0
 41c:	00000012 	andeq	r0, r0, r2, lsl r0
 420:	00000000 	andeq	r0, r0, r0
 424:	00000020 	andeq	r0, r0, r0, lsr #32
 428:	00000000 	andeq	r0, r0, r0
 42c:	00000020 	andeq	r0, r0, r0, lsr #32
 430:	08000dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp}
 434:	0000001c 	andeq	r0, r0, ip, lsl r0
 438:	08000ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp}
 43c:	0000001c 	andeq	r0, r0, ip, lsl r0
 440:	08000df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp}
 444:	0000001c 	andeq	r0, r0, ip, lsl r0
 448:	00000000 	andeq	r0, r0, r0
 44c:	00000026 	andeq	r0, r0, r6, lsr #32
 450:	08000e14 	stmdaeq	r0, {r2, r4, r9, sl, fp}
 454:	00000040 	andeq	r0, r0, r0, asr #32
 458:	00000000 	andeq	r0, r0, r0
 45c:	00000020 	andeq	r0, r0, r0, lsr #32
 460:	00000000 	andeq	r0, r0, r0
 464:	00000020 	andeq	r0, r0, r0, lsr #32
 468:	00000000 	andeq	r0, r0, r0
 46c:	00000038 	andeq	r0, r0, r8, lsr r0
 470:	00000000 	andeq	r0, r0, r0
 474:	00000020 	andeq	r0, r0, r0, lsr #32
 478:	00000000 	andeq	r0, r0, r0
 47c:	00000020 	andeq	r0, r0, r0, lsr #32
 480:	00000000 	andeq	r0, r0, r0
 484:	0000001c 	andeq	r0, r0, ip, lsl r0
 488:	00000000 	andeq	r0, r0, r0
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000000 	andeq	r0, r0, r0
 494:	000000a8 	andeq	r0, r0, r8, lsr #1
 498:	00000000 	andeq	r0, r0, r0
 49c:	0000005c 	andeq	r0, r0, ip, asr r0
 4a0:	00000000 	andeq	r0, r0, r0
 4a4:	0000005c 	andeq	r0, r0, ip, asr r0
 4a8:	00000000 	andeq	r0, r0, r0
 4ac:	00000020 	andeq	r0, r0, r0, lsr #32
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	00000020 	andeq	r0, r0, r0, lsr #32
 4b8:	00000000 	andeq	r0, r0, r0
 4bc:	00000044 	andeq	r0, r0, r4, asr #32
 4c0:	00000000 	andeq	r0, r0, r0
 4c4:	0000003a 	andeq	r0, r0, sl, lsr r0
 4c8:	00000000 	andeq	r0, r0, r0
 4cc:	00000006 	andeq	r0, r0, r6
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	0000000a 	andeq	r0, r0, sl
	...
 4e0:	00000024 	andeq	r0, r0, r4, lsr #32
 4e4:	30760002 	rsbscc	r0, r6, r2
 4e8:	00040000 	andeq	r0, r4, r0
 4ec:	00000000 	andeq	r0, r0, r0
 4f0:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
 4f4:	00000154 	andeq	r0, r0, r4, asr r1
 4f8:	00000000 	andeq	r0, r0, r0
 4fc:	00000070 	andeq	r0, r0, r0, ror r0
	...
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
 50c:	32520002 	subscc	r0, r2, #2
 510:	00040000 	andeq	r0, r4, r0
 514:	00000000 	andeq	r0, r0, r0
 518:	08000fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp}
 51c:	00000038 	andeq	r0, r0, r8, lsr r0
	...
 528:	00000094 	muleq	r0, r4, r0
 52c:	364f0002 	strbcc	r0, [pc], -r2
 530:	00040000 	andeq	r0, r4, r0
 534:	00000000 	andeq	r0, r0, r0
 538:	08000fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp}
 53c:	00000024 	andeq	r0, r0, r4, lsr #32
 540:	08001004 	stmdaeq	r0, {r2, ip}
 544:	00000024 	andeq	r0, r0, r4, lsr #32
 548:	08001028 	stmdaeq	r0, {r3, r5, ip}
 54c:	00000090 	muleq	r0, r0, r0
 550:	080010b8 	stmdaeq	r0, {r3, r4, r5, r7, ip}
 554:	000000a8 	andeq	r0, r0, r8, lsr #1
 558:	08001160 	stmdaeq	r0, {r5, r6, r8, ip}
 55c:	00000038 	andeq	r0, r0, r8, lsr r0
 560:	08001198 	stmdaeq	r0, {r3, r4, r7, r8, ip}
 564:	00000048 	andeq	r0, r0, r8, asr #32
 568:	080011e0 	stmdaeq	r0, {r5, r6, r7, r8, ip}
 56c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 570:	080012b0 	stmdaeq	r0, {r4, r5, r7, r9, ip}
 574:	00000084 	andeq	r0, r0, r4, lsl #1
 578:	08001334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip}
 57c:	00000024 	andeq	r0, r0, r4, lsr #32
 580:	08001358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip}
 584:	0000001c 	andeq	r0, r0, ip, lsl r0
 588:	08001374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip}
 58c:	00000040 	andeq	r0, r0, r0, asr #32
 590:	080013b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, ip}
 594:	000002dc 	ldrdeq	r0, [r0], -ip
 598:	08001690 	stmdaeq	r0, {r4, r7, r9, sl, ip}
 59c:	000000c8 	andeq	r0, r0, r8, asr #1
 5a0:	08001758 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, ip}
 5a4:	00000038 	andeq	r0, r0, r8, lsr r0
 5a8:	08001790 	stmdaeq	r0, {r4, r7, r8, r9, sl, ip}
 5ac:	0000005c 	andeq	r0, r0, ip, asr r0
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	00000002 	andeq	r0, r0, r2
	...
 5c0:	00000024 	andeq	r0, r0, r4, lsr #32
 5c4:	44330002 	ldrtmi	r0, [r3], #-2
 5c8:	00040000 	andeq	r0, r4, r0
 5cc:	00000000 	andeq	r0, r0, r0
 5d0:	080017ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip}
 5d4:	00000030 	andeq	r0, r0, r0, lsr r0
 5d8:	0800181c 	stmdaeq	r0, {r2, r3, r4, fp, ip}
 5dc:	00000024 	andeq	r0, r0, r4, lsr #32
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000006b 	andeq	r0, r0, fp, rrx
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	mrseq	r0, (UNDEF: 4)
	...
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      14:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
      1c:	5f632f62 	svcpl	0x00632f62
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
      24:	6174735f 	cmnvs	r4, pc, asr r3
      28:	70757472 	rsbsvc	r7, r5, r2, ror r4
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	2f00732e 	svccs	0x0000732e
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	6964656d 	stmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
      34:	66732f61 	ldrbtvs	r2, [r3], -r1, ror #30
      38:	7469475f 	strbtvc	r4, [r9], #-1887	; 0x75f

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	2f627548 	svccs	0x00627548

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	7274614d 	rsbsvc	r6, r4, #1073741843	; 0x40000013
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	532f7869 	teqpl	pc, #6881280	; 0x690000
      48:	7774666f 	ldrbvc	r6, [r4, -pc, ror #12]!
      4c:	2f657261 	svccs	0x00657261

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	746f6f42 	strbtvc	r6, [pc], #-3906	; 58 <_Minimum_Stack_Size-0xa8>
      54:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
      58:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
      5c:	47006372 	smlsdxmi	r0, r2, r3, r6
      60:	4120554e 	teqmi	r0, lr, asr #10
      64:	2e322053 	mrccs	0, 1, r2, cr2, cr3, {2}
      68:	322e3332 	eorcc	r3, lr, #-939524096	; 0xc8000000
      6c:	71800100 	orrvc	r0, r0, r0, lsl #2
      70:	02000000 	andeq	r0, r0, #0
      74:	00001200 	andeq	r1, r0, r0, lsl #4
      78:	75010400 	strvc	r0, [r1, #-1024]	; 0x400
	...
      84:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
      88:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
      8c:	6c5f3233 	lfmvs	f3, 2, [pc], {51}	; 0x33
      90:	632f6269 	teqvs	pc, #-1879048186	; 0x90000006
      94:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0x26f
      98:	5f336d78 	svcpl	0x00336d78
      9c:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
      a0:	00532e6f 	subseq	r2, r3, pc, ror #28
      a4:	64656d2f 	strbtvs	r6, [r5], #-3375	; 0xd2f
      a8:	732f6169 	teqvc	pc, #1073741850	; 0x4000001a
      ac:	69475f66 	stmdbvs	r7, {r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
      b0:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
      b4:	74614d2f 	strbtvc	r4, [r1], #-3375	; 0xd2f
      b8:	2f786972 	svccs	0x00786972
      bc:	74666f53 	strbtvc	r6, [r6], #-3923	; 0xf53
      c0:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
      c4:	6f6f422f 	svcvs	0x006f422f
      c8:	616f6c74 	smcvs	63172	; 0xf6c4
      cc:	2f726564 	svccs	0x00726564
      d0:	00637273 	rsbeq	r7, r3, r3, ror r2
      d4:	20554e47 	subscs	r4, r5, r7, asr #28
      d8:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      dc:	2e33322e 	cdpcs	2, 3, cr3, cr3, cr14, {1}
      e0:	80010032 	andhi	r0, r1, r2, lsr r0
      e4:	00000d0e 	andeq	r0, r0, lr, lsl #26
      e8:	00260004 	eoreq	r0, r6, r4
      ec:	01040000 	mrseq	r0, (UNDEF: 4)
      f0:	0000017e 	andeq	r0, r0, lr, ror r1
      f4:	00013d01 	andeq	r3, r1, r1, lsl #26
      f8:	00003200 	andeq	r3, r0, r0, lsl #4
      fc:	00002000 	andeq	r2, r0, r0
     100:	00000000 	andeq	r0, r0, r0
     104:	00011b00 	andeq	r1, r1, r0, lsl #22
     108:	05040200 	streq	r0, [r4, #-512]	; 0x200
     10c:	0000021c 	andeq	r0, r0, ip, lsl r2
     110:	c8050202 	stmdagt	r5, {r1, r9}
     114:	02000006 	andeq	r0, r0, #6
     118:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
     11c:	75030000 	strvc	r0, [r3, #-0]
     120:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
     124:	00004527 	andeq	r4, r0, r7, lsr #10
     128:	07040200 	streq	r0, [r4, -r0, lsl #4]
     12c:	000003a1 	andeq	r0, r0, r1, lsr #7
     130:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
     134:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
     138:	02000000 	andeq	r0, r0, #0
     13c:	03fd0702 	mvnseq	r0, #524288	; 0x80000
     140:	75030000 	strvc	r0, [r3, #-0]
     144:	29020038 	stmdbcs	r2, {r3, r4, r5}
     148:	00000068 	andeq	r0, r0, r8, rrx
     14c:	72080102 	andvc	r0, r8, #-2147483648	; 0x80000000
     150:	04000006 	streq	r0, [r0], #-6
     154:	0000046c 	andeq	r0, r0, ip, ror #8
     158:	007a2f02 	rsbseq	r2, sl, r2, lsl #30
     15c:	45050000 	strmi	r0, [r5, #-0]
     160:	04000000 	streq	r0, [r0], #-0
     164:	00000179 	andeq	r0, r0, r9, ror r1
     168:	008a3002 	addeq	r3, sl, r2
     16c:	57050000 	strpl	r0, [r5, -r0]
     170:	03000000 	movweq	r0, #0
     174:	00387576 	eorseq	r7, r8, r6, ror r5
     178:	009a3102 	addseq	r3, sl, r2, lsl #2
     17c:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
     180:	06000000 	streq	r0, [r0], -r0
     184:	b4370201 	ldrtlt	r0, [r7], #-513	; 0x201
     188:	07000000 	streq	r0, [r0, -r0]
     18c:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     190:	076d0700 	strbeq	r0, [sp, -r0, lsl #14]!
     194:	00010000 	andeq	r0, r1, r0
     198:	00045904 	andeq	r5, r4, r4, lsl #18
     19c:	9f370200 	svcls	0x00370200
     1a0:	02000000 	andeq	r0, r0, #0
     1a4:	05450704 	strbeq	r0, [r5, #-1796]	; 0x704
     1a8:	04080000 	streq	r0, [r8], #-0
     1ac:	00ffa903 	rscseq	sl, pc, r3, lsl #18
     1b0:	71090000 	mrsvc	r0, (UNDEF: 9)
     1b4:	03000004 	movweq	r0, #4
     1b8:	00005eaa 	andeq	r5, r0, sl, lsr #29
     1bc:	94090000 	strls	r0, [r9], #-0
     1c0:	03000004 	movweq	r0, #4
     1c4:	00005eab 	andeq	r5, r0, fp, lsr #29
     1c8:	76090100 	strvc	r0, [r9], -r0, lsl #2
     1cc:	03000003 	movweq	r0, #3
     1d0:	00005eac 	andeq	r5, r0, ip, lsr #29
     1d4:	00090200 	andeq	r0, r9, r0, lsl #4
     1d8:	03000000 	movweq	r0, #0
     1dc:	0000b4ad 	andeq	fp, r0, sp, lsr #9
     1e0:	04000300 	streq	r0, [r0], #-768	; 0x300
     1e4:	000004c0 	andeq	r0, r0, r0, asr #9
     1e8:	00c6ae03 	sbceq	sl, r6, r3, lsl #28
     1ec:	040a0000 	streq	r0, [sl], #-0
     1f0:	00000110 	andeq	r0, r0, r0, lsl r1
     1f4:	03910c0b 	orrseq	r0, r1, #2816	; 0xb00
     1f8:	05010000 	streq	r0, [r1, #-0]
     1fc:	00013616 	andeq	r3, r1, r6, lsl r6
     200:	01240700 	teqeq	r4, r0, lsl #14
     204:	07000000 	streq	r0, [r0, -r0]
     208:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     20c:	08220701 	stmdaeq	r2!, {r0, r8, r9, sl}
     210:	07020000 	streq	r0, [r2, -r0]
     214:	00000449 	andeq	r0, r0, r9, asr #8
     218:	b20d0003 	andlt	r0, sp, #3
     21c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     220:	015b2404 	cmpeq	fp, r4, lsl #8
     224:	63090000 	movwvs	r0, #36864	; 0x9000
     228:	04000001 	streq	r0, [r0], #-1
     22c:	00015b26 	andeq	r5, r1, r6, lsr #22
     230:	c3090000 	movwgt	r0, #36864	; 0x9000
     234:	04000005 	streq	r0, [r0], #-5
     238:	00004c27 	andeq	r4, r0, r7, lsr #24
     23c:	0a000400 	beq	1244 <__Stack_Size+0xe44>
     240:	00005e04 	andeq	r5, r0, r4, lsl #28
     244:	02fc0400 	rscseq	r0, ip, #0, 8
     248:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
     24c:	00000136 	andeq	r0, r0, r6, lsr r1
     250:	0002fb04 	andeq	pc, r2, r4, lsl #22
     254:	77290400 	strvc	r0, [r9, -r0, lsl #8]!
     258:	0a000001 	beq	264 <_Minimum_Stack_Size+0x164>
     25c:	00013604 	andeq	r3, r1, r4, lsl #12
     260:	07650c00 	strbeq	r0, [r5, -r0, lsl #24]!
     264:	04010000 	streq	r0, [r1], #-0
     268:	0001a22d 	andeq	sl, r1, sp, lsr #4
     26c:	08f60700 	ldmeq	r6!, {r8, r9, sl}^
     270:	07000000 	streq	r0, [r0, -r0]
     274:	00000410 	andeq	r0, r0, r0, lsl r4
     278:	07a40701 	streq	r0, [r4, r1, lsl #14]!
     27c:	07020000 	streq	r0, [r2, -r0]
     280:	00000248 	andeq	r0, r0, r8, asr #4
     284:	66040003 	strvs	r0, [r4], -r3
     288:	04000007 	streq	r0, [r0], #-7
     28c:	00017d34 	andeq	r7, r1, r4, lsr sp
     290:	091b0d00 	ldmdbeq	fp, {r8, sl, fp}
     294:	040c0000 	streq	r0, [ip], #-0
     298:	0001ea38 	andeq	lr, r1, r8, lsr sl
     29c:	02b60900 	adcseq	r0, r6, #0, 18
     2a0:	50040000 	andpl	r0, r4, r0
     2a4:	0000004c 	andeq	r0, r0, ip, asr #32
     2a8:	033f0900 	teqeq	pc, #0, 18
     2ac:	51040000 	mrspl	r0, (UNDEF: 4)
     2b0:	0000004c 	andeq	r0, r0, ip, asr #32
     2b4:	158f0902 	strne	r0, [pc, #2306]	; bbe <__Stack_Size+0x7be>
     2b8:	52040000 	andpl	r0, r4, #0
     2bc:	0000004c 	andeq	r0, r0, ip, asr #32
     2c0:	01090904 	tsteq	r9, r4, lsl #18
     2c4:	53040000 	movwpl	r0, #16384	; 0x4000
     2c8:	000001f9 	strdeq	r0, [r0], -r9
     2cc:	5b0e0008 	blpl	3802f4 <__Stack_Size+0x37fef4>
     2d0:	f9000001 			; <UNDEFINED> instruction: 0xf9000001
     2d4:	0f000001 	svceq	0x00000001
     2d8:	0000004c 	andeq	r0, r0, ip, asr #32
     2dc:	ea040a00 	b	102ae4 <__Stack_Size+0x1026e4>
     2e0:	04000001 	streq	r0, [r0], #-1
     2e4:	0000091c 	andeq	r0, r0, ip, lsl r9
     2e8:	01ad5404 			; <UNDEFINED> instruction: 0x01ad5404
     2ec:	fd0d0000 	stc2	0, cr0, [sp, #-0]
     2f0:	02000007 	andeq	r0, r0, #7
     2f4:	022f5804 	eoreq	r5, pc, #4, 16	; 0x40000
     2f8:	3a090000 	bcc	240300 <__Stack_Size+0x23ff00>
     2fc:	04000009 	streq	r0, [r0], #-9
     300:	00005e5a 	andeq	r5, r0, sl, asr lr
     304:	d6090000 	strle	r0, [r9], -r0
     308:	04000003 	streq	r0, [r0], #-3
     30c:	00005e5b 	andeq	r5, r0, fp, asr lr
     310:	04000100 	streq	r0, [r0], #-256	; 0x100
     314:	000007fe 	strdeq	r0, [r0], -lr
     318:	020a5d04 	andeq	r5, sl, #4, 26	; 0x100
     31c:	42100000 	andsmi	r0, r0, #0
     320:	04020057 	streq	r0, [r2], #-87	; 0x57
     324:	00025e62 	andeq	r5, r2, r2, ror #28
     328:	62621100 	rsbvs	r1, r2, #0, 2
     32c:	65040030 	strvs	r0, [r4, #-48]	; 0x30
     330:	0000005e 	andeq	r0, r0, lr, asr r0
     334:	62621100 	rsbvs	r1, r2, #0, 2
     338:	66040031 			; <UNDEFINED> instruction: 0x66040031
     33c:	0000005e 	andeq	r0, r0, lr, asr r0
     340:	02120001 	andseq	r0, r2, #1
     344:	027a5f04 	rsbseq	r5, sl, #4, 30
     348:	77130000 	ldrvc	r0, [r3, -r0]
     34c:	4c610400 	cfstrdmi	mvd0, [r1], #-0
     350:	13000000 	movwne	r0, #0
     354:	04007762 	streq	r7, [r0], #-1890	; 0x762
     358:	00023a68 	andeq	r3, r2, r8, ror #20
     35c:	25040000 	strcs	r0, [r4, #-0]
     360:	04000004 	streq	r0, [r0], #-4
     364:	00025e69 	andeq	r5, r2, r9, ror #28
     368:	00620d00 	rsbeq	r0, r2, r0, lsl #26
     36c:	041c0000 	ldreq	r0, [ip], #-0
     370:	0003166b 	andeq	r1, r3, fp, ror #12
     374:	05800900 	streq	r0, [r0, #2304]	; 0x900
     378:	6d040000 	stcvs	0, cr0, [r4, #-0]
     37c:	0000005e 	andeq	r0, r0, lr, asr r0
     380:	023c0900 	eorseq	r0, ip, #0, 18
     384:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
     388:	0000005e 	andeq	r0, r0, lr, asr r0
     38c:	043e0901 	ldrteq	r0, [lr], #-2305	; 0x901
     390:	6f040000 	svcvs	0x00040000
     394:	0000027a 	andeq	r0, r0, sl, ror r2
     398:	016e0902 	cmneq	lr, r2, lsl #18
     39c:	70040000 	andvc	r0, r4, r0
     3a0:	0000027a 	andeq	r0, r0, sl, ror r2
     3a4:	083d0904 	ldmdaeq	sp!, {r2, r8, fp}
     3a8:	71040000 	mrsvc	r0, (UNDEF: 4)
     3ac:	0000027a 	andeq	r0, r0, sl, ror r2
     3b0:	09490906 	stmdbeq	r9, {r1, r2, r8, fp}^
     3b4:	73040000 	movwvc	r0, #16384	; 0x4000
     3b8:	0000005e 	andeq	r0, r0, lr, asr r0
     3bc:	03c60908 	biceq	r0, r6, #8, 18	; 0x20000
     3c0:	74040000 	strvc	r0, [r4], #-0
     3c4:	0000005e 	andeq	r0, r0, lr, asr r0
     3c8:	04d10909 	ldrbeq	r0, [r1], #2313	; 0x909
     3cc:	75040000 	strvc	r0, [r4, #-0]
     3d0:	0000005e 	andeq	r0, r0, lr, asr r0
     3d4:	0892090a 	ldmeq	r2, {r1, r3, r8, fp}
     3d8:	76040000 	strvc	r0, [r4], -r0
     3dc:	0000005e 	andeq	r0, r0, lr, asr r0
     3e0:	064c090b 	strbeq	r0, [ip], -fp, lsl #18
     3e4:	77040000 	strvc	r0, [r4, -r0]
     3e8:	0000005e 	andeq	r0, r0, lr, asr r0
     3ec:	0743090c 	strbeq	r0, [r3, -ip, lsl #18]
     3f0:	7a040000 	bvc	1003f8 <__Stack_Size+0xffff8>
     3f4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     3f8:	63040010 	movwvs	r0, #16400	; 0x4010
     3fc:	04000000 	streq	r0, [r0], #-0
     400:	0002857b 	andeq	r8, r2, fp, ror r5
     404:	07720d00 	ldrbeq	r0, [r2, -r0, lsl #26]!
     408:	04340000 	ldrteq	r0, [r4], #-0
     40c:	0003ca7d 	andeq	ip, r3, sp, ror sl
     410:	056d0900 	strbeq	r0, [sp, #-2304]!	; 0x900
     414:	7f040000 	svcvc	0x00040000
     418:	0000010a 	andeq	r0, r0, sl, lsl #2
     41c:	03ed0900 	mvneq	r0, #0, 18
     420:	80040000 	andhi	r0, r4, r0
     424:	0000010a 	andeq	r0, r0, sl, lsl #2
     428:	07ca0904 	strbeq	r0, [sl, r4, lsl #18]
     42c:	83040000 	movwhi	r0, #16384	; 0x4000
     430:	0000010a 	andeq	r0, r0, sl, lsl #2
     434:	07dc0908 	ldrbeq	r0, [ip, r8, lsl #18]
     438:	84040000 	strhi	r0, [r4], #-0
     43c:	0000010a 	andeq	r0, r0, sl, lsl #2
     440:	054e090c 	strbeq	r0, [lr, #-2316]	; 0x90c
     444:	96040000 	strls	r0, [r4], -r0
     448:	000003d9 	ldrdeq	r0, [r0], -r9
     44c:	07270910 			; <UNDEFINED> instruction: 0x07270910
     450:	a1040000 	mrsge	r0, (UNDEF: 4)
     454:	000003d9 	ldrdeq	r0, [r0], -r9
     458:	05180914 	ldreq	r0, [r8, #-2324]	; 0x914
     45c:	ab040000 	blge	100464 <__Stack_Size+0x100064>
     460:	000003f3 	strdeq	r0, [r0], -r3
     464:	015a0918 	cmpeq	sl, r8, lsl r9
     468:	ad040000 	stcge	0, cr0, [r4, #-0]
     46c:	000001f9 	strdeq	r0, [r0], -r9
     470:	0228091c 	eoreq	r0, r8, #28, 18	; 0x70000
     474:	ae040000 	cdpge	0, 0, cr0, cr4, cr0, {0}
     478:	000001f9 	strdeq	r0, [r0], -r9
     47c:	084c0920 	stmdaeq	ip, {r5, r8, fp}^
     480:	af040000 	svcge	0x00040000
     484:	000001f9 	strdeq	r0, [r0], -r9
     488:	06340924 	ldrteq	r0, [r4], -r4, lsr #18
     48c:	b0040000 	andlt	r0, r4, r0
     490:	000001f9 	strdeq	r0, [r0], -r9
     494:	05ab0928 	streq	r0, [fp, #2344]!	; 0x928
     498:	b2040000 	andlt	r0, r4, #0
     49c:	0000015b 	andeq	r0, r0, fp, asr r1
     4a0:	158c092c 	strne	r0, [ip, #2348]	; 0x92c
     4a4:	b3040000 	movwlt	r0, #16384	; 0x4000
     4a8:	0000005e 	andeq	r0, r0, lr, asr r0
     4ac:	a20e0030 	andge	r0, lr, #48	; 0x30
     4b0:	d9000001 	stmdble	r0, {r0}
     4b4:	0f000003 	svceq	0x00000003
     4b8:	0000005e 	andeq	r0, r0, lr, asr r0
     4bc:	ca040a00 	bgt	102cc4 <__Stack_Size+0x1028c4>
     4c0:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     4c4:	000001a2 	andeq	r0, r0, r2, lsr #3
     4c8:	000003f3 	strdeq	r0, [r0], -r3
     4cc:	00005e0f 	andeq	r5, r0, pc, lsl #28
     4d0:	005e0f00 	subseq	r0, lr, r0, lsl #30
     4d4:	0a000000 	beq	4dc <__Stack_Size+0xdc>
     4d8:	0003df04 	andeq	sp, r3, r4, lsl #30
     4dc:	07730400 	ldrbeq	r0, [r3, -r0, lsl #8]!
     4e0:	b5040000 	strlt	r0, [r4, #-0]
     4e4:	00000321 	andeq	r0, r0, r1, lsr #6
     4e8:	0006800d 	andeq	r8, r6, sp
     4ec:	b7042400 	strlt	r2, [r4, -r0, lsl #8]
     4f0:	0000047d 	andeq	r0, r0, sp, ror r4
     4f4:	0006ed09 	andeq	lr, r6, r9, lsl #26
     4f8:	0ab90400 	beq	fee41500 <BootRAM+0xddb1ca1>
     4fc:	00000001 	andeq	r0, r0, r1
     500:	0005e909 	andeq	lr, r5, r9, lsl #18
     504:	0aba0400 	beq	fee8150c <BootRAM+0xddf1cad>
     508:	04000001 	streq	r0, [r0], #-1
     50c:	00060509 	andeq	r0, r6, r9, lsl #10
     510:	0abb0400 	beq	feec1518 <BootRAM+0xde31cb9>
     514:	08000001 	stmdaeq	r0, {r0}
     518:	00011209 	andeq	r1, r1, r9, lsl #4
     51c:	0abc0400 	beq	fef01524 <BootRAM+0xde71cc5>
     520:	0c000001 	stceq	0, cr0, [r0], {1}
     524:	0006b909 	andeq	fp, r6, r9, lsl #18
     528:	0abd0400 	beq	fef41530 <BootRAM+0xdeb1cd1>
     52c:	10000001 	andne	r0, r0, r1
     530:	00042c09 	andeq	r2, r4, r9, lsl #24
     534:	0abe0400 	beq	fef8153c <BootRAM+0xdef1cdd>
     538:	14000001 	strne	r0, [r0], #-1
     53c:	00009209 	andeq	r9, r0, r9, lsl #4
     540:	0abf0400 	beq	fefc1548 <BootRAM+0xdf31ce9>
     544:	18000001 	stmdane	r0, {r0}
     548:	0005d309 	andeq	sp, r5, r9, lsl #6
     54c:	0ac00400 	beq	ff001554 <BootRAM+0xdf71cf5>
     550:	1c000001 	stcne	0, cr0, [r0], {1}
     554:	00001c09 	andeq	r1, r0, r9, lsl #24
     558:	0ac10400 	beq	ff041560 <BootRAM+0xdfb1d01>
     55c:	20000001 	andcs	r0, r0, r1
     560:	06810400 	streq	r0, [r1], r0, lsl #8
     564:	c3040000 	movwgt	r0, #16384	; 0x4000
     568:	00000404 	andeq	r0, r0, r4, lsl #8
     56c:	0008e80c 	andeq	lr, r8, ip, lsl #16
     570:	3d060100 	stfccs	f0, [r6, #-0]
     574:	000004c5 	andeq	r0, r0, r5, asr #9
     578:	00025c07 	andeq	r5, r2, r7, lsl #24
     57c:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
     580:	01000008 	tsteq	r0, r8
     584:	00070307 	andeq	r0, r7, r7, lsl #6
     588:	86070200 	strhi	r0, [r7], -r0, lsl #4
     58c:	03000000 	movweq	r0, #0
     590:	0000e807 	andeq	lr, r0, r7, lsl #16
     594:	27070400 	strcs	r0, [r7, -r0, lsl #8]
     598:	05000006 	streq	r0, [r0, #-6]
     59c:	00041a07 	andeq	r1, r4, r7, lsl #20
     5a0:	b7070600 	strlt	r0, [r7, -r0, lsl #12]
     5a4:	07000005 	streq	r0, [r0, -r5]
     5a8:	08e90400 	stmiaeq	r9!, {sl}^
     5ac:	46060000 	strmi	r0, [r6], -r0
     5b0:	00000488 	andeq	r0, r0, r8, lsl #9
     5b4:	0005720c 	andeq	r7, r5, ip, lsl #4
     5b8:	48060100 	stmdami	r6, {r8}
     5bc:	00000501 	andeq	r0, r0, r1, lsl #10
     5c0:	00090207 	andeq	r0, r9, r7, lsl #4
     5c4:	5e070000 	cdppl	0, 0, cr0, cr7, cr0, {0}
     5c8:	01000003 	tsteq	r0, r3
     5cc:	00013507 	andeq	r3, r1, r7, lsl #10
     5d0:	de070200 	cdple	2, 0, cr0, cr7, cr0, {0}
     5d4:	03000000 	movweq	r0, #0
     5d8:	0008ce07 	andeq	ip, r8, r7, lsl #28
     5dc:	7b070400 	blvc	1c15e4 <__Stack_Size+0x1c11e4>
     5e0:	05000008 	streq	r0, [r0, #-8]
     5e4:	01020800 	tsteq	r2, r0, lsl #16
     5e8:	0005229c 	muleq	r5, ip, r2
     5ec:	00750900 	rsbseq	r0, r5, r0, lsl #18
     5f0:	9d010000 	stcls	0, cr0, [r1, #-0]
     5f4:	00000522 	andeq	r0, r0, r2, lsr #10
     5f8:	00cb0900 	sbceq	r0, fp, r0, lsl #18
     5fc:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
     600:	00000527 	andeq	r0, r0, r7, lsr #10
     604:	c5050001 	strgt	r0, [r5, #-1]
     608:	05000004 	streq	r0, [r0, #-4]
     60c:	0000005e 	andeq	r0, r0, lr, asr r0
     610:	00036714 	andeq	r6, r3, r4, lsl r7
     614:	01640100 	cmneq	r4, r0, lsl #2
     618:	000001a2 	andeq	r0, r0, r2, lsr #3
     61c:	00054a01 	andeq	r4, r5, r1, lsl #20
     620:	081a1500 	ldmdaeq	sl, {r8, sl, ip}
     624:	64010000 	strvs	r0, [r1], #-0
     628:	00005e01 	andeq	r5, r0, r1, lsl #28
     62c:	e7160000 	ldr	r0, [r6, -r0]
     630:	01000004 	tsteq	r0, r4
     634:	6f1701a6 	svcvs	0x001701a6
     638:	01000009 	tsteq	r0, r9
     63c:	00013ca2 	andeq	r3, r1, r2, lsr #25
     640:	00000208 	andeq	r0, r0, r8, lsl #4
     644:	189c0100 	ldmne	ip, {r8}
     648:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
     64c:	3e013701 	cdpcc	7, 0, cr3, cr1, cr1, {0}
     650:	02080001 	andeq	r0, r8, #1
     654:	01000000 	mrseq	r0, (UNDEF: 0)
     658:	0332189c 	teqeq	r2, #156, 16	; 0x9c0000
     65c:	3a010000 	bcc	40664 <__Stack_Size+0x40264>
     660:	00014001 	andeq	r4, r1, r1
     664:	00000208 	andeq	r0, r0, r8, lsl #4
     668:	199c0100 	ldmibne	ip, {r8}
     66c:	00000710 	andeq	r0, r0, r0, lsl r7
     670:	a2016e01 	andge	r6, r1, #1, 28
     674:	42000001 	andmi	r0, r0, #1
     678:	0a080001 	beq	200684 <__Stack_Size+0x200284>
     67c:	01000000 	mrseq	r0, (UNDEF: 0)
     680:	0005c09c 	muleq	r5, ip, r0
     684:	048a1a00 	streq	r1, [sl], #2560	; 0xa00
     688:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     68c:	00005e01 	andeq	r5, r0, r1, lsl #28
     690:	00000000 	andeq	r0, r0, r0
     694:	07b21b00 	ldreq	r1, [r2, r0, lsl #22]!
     698:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     69c:	00005e01 	andeq	r5, r0, r1, lsl #28
     6a0:	00510100 	subseq	r0, r1, r0, lsl #2
     6a4:	00028218 	andeq	r8, r2, r8, lsl r2
     6a8:	01950100 	orrseq	r0, r5, r0, lsl #2
     6ac:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
     6b0:	00000002 	andeq	r0, r0, r2
     6b4:	7f189c01 	svcvc	0x00189c01
     6b8:	01000007 	tsteq	r0, r7
     6bc:	01500199 			; <UNDEFINED> instruction: 0x01500199
     6c0:	00180800 	andseq	r0, r8, r0, lsl #16
     6c4:	9c010000 	stcls	0, cr0, [r1], {-0}
     6c8:	0008a418 	andeq	sl, r8, r8, lsl r4
     6cc:	019f0100 	orrseq	r0, pc, r0, lsl #2
     6d0:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}
     6d4:	00000002 	andeq	r0, r0, r2
     6d8:	55189c01 	ldrpl	r9, [r8, #-3073]	; 0xc01
     6dc:	01000007 	tsteq	r0, r7
     6e0:	016a01a3 	smultbeq	sl, r3, r1
     6e4:	00020800 	andeq	r0, r2, r0, lsl #16
     6e8:	9c010000 	stcls	0, cr0, [r1], {-0}
     6ec:	00090e18 	andeq	r0, r9, r8, lsl lr
     6f0:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
     6f4:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
     6f8:	00000002 	andeq	r0, r0, r2
     6fc:	2a189c01 	bcs	627708 <__Stack_Size+0x627308>
     700:	01000009 	tsteq	r0, r9
     704:	016e01ab 	smultbeq	lr, fp, r1
     708:	00020800 	andeq	r0, r2, r0, lsl #16
     70c:	9c010000 	stcls	0, cr0, [r1], {-0}
     710:	00050218 	andeq	r0, r5, r8, lsl r2
     714:	01af0100 			; <UNDEFINED> instruction: 0x01af0100
     718:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
     71c:	00000002 	andeq	r0, r0, r2
     720:	f5189c01 			; <UNDEFINED> instruction: 0xf5189c01
     724:	01000000 	mrseq	r0, (UNDEF: 0)
     728:	017201b3 	ldrheq	r0, [r2, #-19]!	; 0xffffffed
     72c:	00020800 	andeq	r0, r2, r0, lsl #16
     730:	9c010000 	stcls	0, cr0, [r1], {-0}
     734:	00030b18 	andeq	r0, r3, r8, lsl fp
     738:	01b70100 			; <UNDEFINED> instruction: 0x01b70100
     73c:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
     740:	0000000c 	andeq	r0, r0, ip
     744:	ea1c9c01 	b	727750 <__Stack_Size+0x727350>
     748:	01000003 	tsteq	r0, r3
     74c:	0180011e 	orreq	r0, r0, lr, lsl r1
     750:	00a80800 	adceq	r0, r8, r0, lsl #16
     754:	9c010000 	stcls	0, cr0, [r1], {-0}
     758:	000006eb 	andeq	r0, r0, fp, ror #13
     75c:	0001b01d 	andeq	fp, r1, sp, lsl r0
     760:	00001208 	andeq	r1, r0, r8, lsl #4
     764:	00069600 	andeq	r9, r6, r0, lsl #12
     768:	04811e00 	streq	r1, [r1], #3584	; 0xe00
     76c:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
     770:	00004c01 	andeq	r4, r0, r1, lsl #24
     774:	00002100 	andeq	r2, r0, r0, lsl #2
     778:	861f0000 	ldrhi	r0, [pc], -r0
     77c:	30080001 	andcc	r0, r8, r1
     780:	2000000c 	andcs	r0, r0, ip
     784:	080001e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8}
     788:	00000c37 	andeq	r0, r0, r7, lsr ip
     78c:	000006b3 			; <UNDEFINED> instruction: 0x000006b3
     790:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     794:	20000074 	andcs	r0, r0, r4, ror r0
     798:	080001f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8}
     79c:	00000c49 	andeq	r0, r0, r9, asr #24
     7a0:	000006c7 	andeq	r0, r0, r7, asr #13
     7a4:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     7a8:	20000074 	andcs	r0, r0, r4, ror r0
     7ac:	080001fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8}
     7b0:	00000c60 	andeq	r0, r0, r0, ror #24
     7b4:	000006db 	ldrdeq	r0, [r0], -fp
     7b8:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     7bc:	22000074 	andcs	r0, r0, #116	; 0x74
     7c0:	0800020a 	stmdaeq	r0, {r1, r3, r9}
     7c4:	00000c72 	andeq	r0, r0, r2, ror ip
     7c8:	01500121 	cmpeq	r0, r1, lsr #2
     7cc:	19000030 	stmdbne	r0, {r4, r5}
     7d0:	00000665 	andeq	r0, r0, r5, ror #12
     7d4:	a2013d01 	andge	r3, r1, #1, 26	; 0x40
     7d8:	28000001 	stmdacs	r0, {r0}
     7dc:	60080002 	andvs	r0, r8, r2
     7e0:	01000000 	mrseq	r0, (UNDEF: 0)
     7e4:	00073b9c 	muleq	r7, ip, fp
     7e8:	081a1a00 	ldmdaeq	sl, {r9, fp, ip}
     7ec:	3d010000 	stccc	0, cr0, [r1, #-0]
     7f0:	00005e01 	andeq	r5, r0, r1, lsl #28
     7f4:	00007000 	andeq	r7, r0, r0
     7f8:	09561e00 	ldmdbeq	r6, {r9, sl, fp, ip}^
     7fc:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
     800:	0001f901 	andeq	pc, r1, r1, lsl #18
     804:	00009100 	andeq	r9, r0, r0, lsl #2
     808:	02401f00 	subeq	r1, r0, #0, 30
     80c:	0c830800 	stceq	8, cr0, [r3], {0}
     810:	6c230000 	stcvs	0, cr0, [r3], #-0
     814:	21080002 	tstcs	r8, r2
     818:	74025001 	strvc	r5, [r2], #-1
     81c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     820:	00000157 	andeq	r0, r0, r7, asr r1
     824:	5b017701 	blpl	5e430 <__Stack_Size+0x5e030>
     828:	88000001 	stmdahi	r0, {r0}
     82c:	0c080002 	stceq	0, cr0, [r8], {2}
     830:	01000000 	mrseq	r0, (UNDEF: 0)
     834:	00076f9c 	muleq	r7, ip, pc	; <UNPREDICTABLE>
     838:	656c2400 	strbvs	r2, [ip, #-1024]!	; 0x400
     83c:	7701006e 	strvc	r0, [r1, -lr, rrx]
     840:	00004c01 	andeq	r4, r0, r1, lsl #24
     844:	0000c800 	andeq	ip, r0, r0, lsl #16
     848:	028e2500 	addeq	r2, lr, #0, 10
     84c:	0c8e0800 	stceq	8, cr0, [lr], {0}
     850:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     854:	00000225 	andeq	r0, r0, r5, lsr #4
     858:	5b017b01 	blpl	5f464 <__Stack_Size+0x5f064>
     85c:	94000001 	strls	r0, [r0], #-1
     860:	0c080002 	stceq	0, cr0, [r8], {2}
     864:	01000000 	mrseq	r0, (UNDEF: 0)
     868:	0007a39c 	muleq	r7, ip, r3
     86c:	656c2400 	strbvs	r2, [ip, #-1024]!	; 0x400
     870:	7b01006e 	blvc	40a30 <__Stack_Size+0x40630>
     874:	00004c01 	andeq	r4, r0, r1, lsl #24
     878:	0000e900 	andeq	lr, r0, r0, lsl #18
     87c:	029a2500 	addseq	r2, sl, #0, 10
     880:	0c8e0800 	stceq	8, cr0, [lr], {0}
     884:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     888:	00000849 	andeq	r0, r0, r9, asr #16
     88c:	5b017f01 	blpl	60498 <__Stack_Size+0x60098>
     890:	a0000001 	andge	r0, r0, r1
     894:	20080002 	andcs	r0, r8, r2
     898:	01000000 	mrseq	r0, (UNDEF: 0)
     89c:	0007e39c 	muleq	r7, ip, r3
     8a0:	656c2400 	strbvs	r2, [ip, #-1024]!	; 0x400
     8a4:	7f01006e 	svcvc	0x0001006e
     8a8:	00004c01 	andeq	r4, r0, r1, lsl #24
     8ac:	00010a00 	andeq	r0, r1, r0, lsl #20
     8b0:	00132600 	andseq	r2, r3, r0, lsl #12
     8b4:	80010000 	andhi	r0, r1, r0
     8b8:	00005e01 	andeq	r5, r0, r1, lsl #28
     8bc:	02b42500 	adcseq	r2, r4, #0, 10
     8c0:	0c8e0800 	stceq	8, cr0, [lr], {0}
     8c4:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     8c8:	00000631 	andeq	r0, r0, r1, lsr r6
     8cc:	5b018801 	blpl	628d8 <__Stack_Size+0x624d8>
     8d0:	c0000001 	andgt	r0, r0, r1
     8d4:	0c080002 	stceq	0, cr0, [r8], {2}
     8d8:	01000000 	mrseq	r0, (UNDEF: 0)
     8dc:	0008179c 	muleq	r8, ip, r7
     8e0:	656c2400 	strbvs	r2, [ip, #-1024]!	; 0x400
     8e4:	8801006e 	stmdahi	r1, {r1, r2, r3, r5, r6}
     8e8:	00004c01 	andeq	r4, r0, r1, lsl #24
     8ec:	00014400 	andeq	r4, r1, r0, lsl #8
     8f0:	02c62500 	sbceq	r2, r6, #0, 10
     8f4:	0c8e0800 	stceq	8, cr0, [lr], {0}
     8f8:	27000000 	strcs	r0, [r0, -r0]
     8fc:	0000052c 	andeq	r0, r0, ip, lsr #10
     900:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
     904:	00000028 	andeq	r0, r0, r8, lsr #32
     908:	08509c01 	ldmdaeq	r0, {r0, sl, fp, ip, pc}^
     90c:	3d280000 	stccc	0, cr0, [r8, #-0]
     910:	65000005 	strvs	r0, [r0, #-5]
     914:	29000001 	stmdbcs	r0, {r0}
     918:	080002dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9}
     91c:	0000000e 	andeq	r0, r0, lr
     920:	00053d28 	andeq	r3, r5, r8, lsr #26
     924:	00019f00 	andeq	r9, r1, r0, lsl #30
     928:	02e01f00 	rsceq	r1, r0, #0, 30
     92c:	0c830800 	stceq	8, cr0, [r3], {0}
     930:	00000000 	andeq	r0, r0, r0
     934:	0002792a 	andeq	r7, r2, sl, lsr #18
     938:	f4280100 	vld4.8	{d0,d2,d4,d6}, [r8], r0
     93c:	7c080002 	stcvc	0, cr0, [r8], {2}
     940:	01000000 	mrseq	r0, (UNDEF: 0)
     944:	0008e19c 	muleq	r8, ip, r1
     948:	06b32b00 	ldrteq	r2, [r3], r0, lsl #22
     94c:	3d010000 	stccc	0, cr0, [r1, #-0]
     950:	000008e1 	andeq	r0, r0, r1, ror #17
     954:	2c6c9102 	stfcsp	f1, [ip], #-8
     958:	0000054a 	andeq	r0, r0, sl, asr #10
     95c:	08000352 	stmdaeq	r0, {r1, r4, r6, r8, r9}
     960:	00000004 	andeq	r0, r0, r4
     964:	08904f01 	ldmeq	r0, {r0, r8, r9, sl, fp, lr}
     968:	561f0000 	ldrpl	r0, [pc], -r0
     96c:	a8080003 	stmdage	r8, {r0, r1}
     970:	0000000c 	andeq	r0, r0, ip
     974:	00030020 	andeq	r0, r3, r0, lsr #32
     978:	000caf08 	andeq	sl, ip, r8, lsl #30
     97c:	0008a300 	andeq	sl, r8, r0, lsl #6
     980:	50012100 	andpl	r2, r1, r0, lsl #2
     984:	20003c01 	andcs	r3, r0, r1, lsl #24
     988:	08000312 	stmdaeq	r0, {r1, r4, r8, r9}
     98c:	00000cc4 	andeq	r0, r0, r4, asr #25
     990:	000008c4 	andeq	r0, r0, r4, asr #17
     994:	01520121 	cmpeq	r2, r1, lsr #2
     998:	51012130 	tstpl	r1, r0, lsr r1
     99c:	01213c01 	teqeq	r1, r1, lsl #24
     9a0:	000c0550 	andeq	r0, ip, r0, asr r5
     9a4:	00400108 	subeq	r0, r0, r8, lsl #2
     9a8:	00032c20 	andeq	r2, r3, r0, lsr #24
     9ac:	000caf08 	andeq	sl, ip, r8, lsl #30
     9b0:	0008d700 	andeq	sp, r8, r0, lsl #14
     9b4:	50012100 	andpl	r2, r1, r0, lsl #2
     9b8:	1f003c01 	svcne	0x00003c01
     9bc:	08000338 	stmdaeq	r0, {r3, r4, r5, r8, r9}
     9c0:	00000cdf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     9c4:	08e60500 	stmiaeq	r6!, {r8, sl}^
     9c8:	04020000 	streq	r0, [r2], #-0
     9cc:	0003a607 	andeq	sl, r3, r7, lsl #12
     9d0:	054a2700 	strbeq	r2, [sl, #-1792]	; 0x700
     9d4:	00000000 	andeq	r0, r0, r0
     9d8:	00040000 	andeq	r0, r4, r0
     9dc:	9c010000 	stcls	0, cr0, [r1], {-0}
     9e0:	0000090a 	andeq	r0, r0, sl, lsl #18
     9e4:	00000025 	andeq	r0, r0, r5, lsr #32
     9e8:	000ca800 	andeq	sl, ip, r0, lsl #16
     9ec:	c02a0000 	eorgt	r0, sl, r0
     9f0:	01000000 	mrseq	r0, (UNDEF: 0)
     9f4:	000370ac 	andeq	r7, r3, ip, lsr #1
     9f8:	00001c08 	andeq	r1, r0, r8, lsl #24
     9fc:	2f9c0100 	svccs	0x009c0100
     a00:	2d000009 	stccs	0, cr0, [r0, #-36]	; 0xffffffdc
     a04:	000002e4 	andeq	r0, r0, r4, ror #5
     a08:	004cad01 	subeq	sl, ip, r1, lsl #26
     a0c:	01b50000 			; <UNDEFINED> instruction: 0x01b50000
     a10:	2a000000 	bcs	a18 <__Stack_Size+0x618>
     a14:	000007ef 	andeq	r0, r0, pc, ror #15
     a18:	038cb601 	orreq	fp, ip, #1048576	; 0x100000
     a1c:	00180800 	andseq	r0, r8, r0, lsl #16
     a20:	9c010000 	stcls	0, cr0, [r1], {-0}
     a24:	00000957 	andeq	r0, r0, r7, asr r9
     a28:	0002e42b 	andeq	lr, r2, fp, lsr #8
     a2c:	4cb70100 	ldfmis	f0, [r7]
     a30:	06000000 	streq	r0, [r0], -r0
     a34:	fb090071 	blx	240c02 <__Stack_Size+0x240802>
     a38:	2a009f1a 	bcs	286a8 <__Stack_Size+0x282a8>
     a3c:	000000d4 	ldrdeq	r0, [r0], -r4
     a40:	03a4c401 			; <UNDEFINED> instruction: 0x03a4c401
     a44:	00840800 	addeq	r0, r4, r0, lsl #16
     a48:	9c010000 	stcls	0, cr0, [r1], {-0}
     a4c:	0000099d 	muleq	r0, sp, r9
     a50:	0002c22e 	andeq	ip, r2, lr, lsr #4
     a54:	c5c40100 	strbgt	r0, [r4, #256]	; 0x100
     a58:	cc000004 	stcgt	0, cr0, [r0], {4}
     a5c:	2d000001 	stccs	0, cr0, [r0, #-4]
     a60:	000002e4 	andeq	r0, r0, r4, ror #5
     a64:	004cc501 	subeq	ip, ip, r1, lsl #10
     a68:	021f0000 	andseq	r0, pc, #0
     a6c:	c21f0000 	andsgt	r0, pc, #0
     a70:	2f080003 	svccs	0x00080003
     a74:	1f000009 	svcne	0x00000009
     a78:	080003c8 	stmdaeq	r0, {r3, r6, r7, r8, r9}
     a7c:	0000092f 	andeq	r0, r0, pc, lsr #18
     a80:	05912f00 	ldreq	r2, [r1, #3840]	; 0xf00
     a84:	f4010000 	vst4.8	{d0-d3}, [r1], r0
     a88:	000001a2 	andeq	r0, r0, r2, lsr #3
     a8c:	08000428 	stmdaeq	r0, {r3, r5, sl}
     a90:	00000028 	andeq	r0, r0, r8, lsr #32
     a94:	09c39c01 	stmibeq	r3, {r0, sl, fp, ip, pc}^
     a98:	82300000 	eorshi	r0, r0, #0
     a9c:	01000004 	tsteq	r0, r4
     aa0:	00004cf5 	strdeq	r4, [r0], -r5
     aa4:	31000100 	mrscc	r0, (UNDEF: 16)
     aa8:	00000886 	andeq	r0, r0, r6, lsl #17
     aac:	a2010301 	andge	r0, r1, #67108864	; 0x4000000
     ab0:	50000001 	andpl	r0, r0, r1
     ab4:	1c080004 	stcne	0, cr0, [r8], {4}
     ab8:	01000000 	mrseq	r0, (UNDEF: 0)
     abc:	08052a9c 	stmdaeq	r5, {r2, r3, r4, r7, r9, fp, sp}
     ac0:	56010000 	strpl	r0, [r1], -r0
     ac4:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
     ac8:	00000004 	andeq	r0, r0, r4
     acc:	09f89c01 	ldmibeq	r8!, {r0, sl, fp, ip, pc}^
     ad0:	70250000 	eorvc	r0, r5, r0
     ad4:	c3080004 	movwgt	r0, #32772	; 0x8004
     ad8:	00000009 	andeq	r0, r0, r9
     adc:	00007c1c 	andeq	r7, r0, ip, lsl ip
     ae0:	01bd0100 			; <UNDEFINED> instruction: 0x01bd0100
     ae4:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
     ae8:	00000024 	andeq	r0, r0, r4, lsr #32
     aec:	0a2e9c01 	beq	ba7af8 <__Stack_Size+0xba76f8>
     af0:	1f320000 	svcne	0x00320000
     af4:	01000003 	tsteq	r0, r3
     af8:	00ff01be 	ldrhteq	r0, [pc], #30
     afc:	91020000 	mrsls	r0, (UNDEF: 2)
     b00:	048e3374 	streq	r3, [lr], #884	; 0x374
     b04:	0ceb0800 	stcleq	8, cr0, [fp]
     b08:	01210000 	teqeq	r1, r0
     b0c:	047d0250 	ldrbteq	r0, [sp], #-592	; 0x250
     b10:	351c0000 	ldrcc	r0, [ip, #-0]
     b14:	01000008 	tsteq	r0, r8
     b18:	04940110 	ldreq	r0, [r4], #272	; 0x110
     b1c:	00400800 	subeq	r0, r0, r0, lsl #16
     b20:	9c010000 	stcls	0, cr0, [r1], {-0}
     b24:	00000a60 	andeq	r0, r0, r0, ror #20
     b28:	00049a1f 	andeq	r9, r4, pc, lsl sl
     b2c:	000d0308 	andeq	r0, sp, r8, lsl #6
     b30:	04a61f00 	strteq	r1, [r6], #3840	; 0xf00
     b34:	099d0800 	ldmibeq	sp, {fp}
     b38:	ba1f0000 	blt	7c0b40 <__Stack_Size+0x7c0740>
     b3c:	f8080004 			; <UNDEFINED> instruction: 0xf8080004
     b40:	00000009 	andeq	r0, r0, r9
     b44:	0003f31c 	andeq	pc, r3, ip, lsl r3	; <UNPREDICTABLE>
     b48:	01c80100 	biceq	r0, r8, r0, lsl #2
     b4c:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
     b50:	00000022 	andeq	r0, r0, r2, lsr #32
     b54:	0a969c01 	beq	fe5a7b60 <BootRAM+0xd518301>
     b58:	1f320000 	svcne	0x00320000
     b5c:	01000003 	tsteq	r0, r3
     b60:	00ff01c9 	rscseq	r0, pc, r9, asr #3
     b64:	91020000 	mrsls	r0, (UNDEF: 2)
     b68:	04f03374 	ldrbteq	r3, [r0], #884	; 0x374
     b6c:	0ceb0800 	stcleq	8, cr0, [fp]
     b70:	01210000 	teqeq	r1, r0
     b74:	047d0250 	ldrbteq	r0, [sp], #-592	; 0x250
     b78:	98340000 	ldmdals	r4!, {}	; <UNPREDICTABLE>
     b7c:	01000006 	tsteq	r0, r6
     b80:	04f801d1 	ldrbteq	r0, [r8], #465	; 0x1d1
     b84:	00b40800 	adcseq	r0, r4, r0, lsl #16
     b88:	9c010000 	stcls	0, cr0, [r1], {-0}
     b8c:	00000ae5 	andeq	r0, r0, r5, ror #21
     b90:	00054020 	andeq	r4, r5, r0, lsr #32
     b94:	00095708 	andeq	r5, r9, r8, lsl #14
     b98:	000abf00 	andeq	fp, sl, r0, lsl #30
     b9c:	50012100 	andpl	r2, r1, r0, lsl #2
     ba0:	1f003001 	svcne	0x00003001
     ba4:	0800054e 	stmdaeq	r0, {r1, r2, r3, r6, r8, sl}
     ba8:	0000090a 	andeq	r0, r0, sl, lsl #18
     bac:	00058220 	andeq	r8, r5, r0, lsr #4
     bb0:	00095708 	andeq	r5, r9, r8, lsl #14
     bb4:	000adb00 	andeq	sp, sl, r0, lsl #22
     bb8:	50012100 	andpl	r2, r1, r0, lsl #2
     bbc:	25003701 	strcs	r3, [r0, #-1793]	; 0x701
     bc0:	08000594 	stmdaeq	r0, {r2, r4, r7, r8, sl}
     bc4:	00000d0a 	andeq	r0, r0, sl, lsl #26
     bc8:	02563500 	subseq	r3, r6, #0, 10
     bcc:	64010000 	strvs	r0, [r1], #-0
     bd0:	0000007f 	andeq	r0, r0, pc, ror r0
     bd4:	01c80305 	biceq	r0, r8, r5, lsl #6
     bd8:	17352000 	ldrne	r2, [r5, -r0]!
     bdc:	01000006 	tsteq	r0, r6
     be0:	0003f96c 	andeq	pc, r3, ip, ror #18
     be4:	00030500 	andeq	r0, r3, r0, lsl #10
     be8:	35200000 	strcc	r0, [r0, #-0]!
     bec:	000013d7 	ldrdeq	r1, [r0], -r7
     bf0:	047d7c01 	ldrbteq	r7, [sp], #-3073	; 0xc01
     bf4:	03050000 	movweq	r0, #20480	; 0x5000
     bf8:	2000006c 	andcs	r0, r0, ip, rrx
     bfc:	00026c35 	andeq	r6, r2, r5, lsr ip
     c00:	2f670100 	svccs	0x00670100
     c04:	05000002 	streq	r0, [r0, #-2]
     c08:	00009003 	andeq	r9, r0, r3
     c0c:	02a23620 	adceq	r3, r2, #32, 12	; 0x2000000
     c10:	22070000 	andcs	r0, r7, #0
     c14:	00000b34 	andeq	r0, r0, r4, lsr fp
     c18:	0316040a 	tsteq	r6, #167772160	; 0xa000000
     c1c:	5f360000 	svcpl	0x00360000
     c20:	07000005 	streq	r0, [r0, -r5]
     c24:	000b4525 	andeq	r4, fp, r5, lsr #10
     c28:	f9040a00 			; <UNDEFINED> instruction: 0xf9040a00
     c2c:	36000003 	strcc	r0, [r0], -r3
     c30:	000004f2 	strdeq	r0, [r0], -r2
     c34:	004c2d07 	subeq	r2, ip, r7, lsl #26
     c38:	a7360000 	ldrge	r0, [r6, -r0]!
     c3c:	08000009 	stmdaeq	r0, {r0, r3}
     c40:	00016123 	andeq	r6, r1, r3, lsr #2
     c44:	08b73600 	ldmeq	r7!, {r9, sl, ip, sp}
     c48:	24080000 	strcs	r0, [r8], #-0
     c4c:	00000161 	andeq	r0, r0, r1, ror #2
     c50:	00016137 	andeq	r6, r1, r7, lsr r1
     c54:	000b7c00 	andeq	r7, fp, r0, lsl #24
     c58:	00bf3800 	adcseq	r3, pc, r0, lsl #16
     c5c:	00060000 	andeq	r0, r6, r0
     c60:	00014336 	andeq	r4, r1, r6, lsr r3
     c64:	6c250800 	stcvs	8, cr0, [r5], #-0
     c68:	3600000b 	strcc	r0, [r0], -fp
     c6c:	000006d5 	ldrdeq	r0, [r0], -r5
     c70:	01612608 	cmneq	r1, r8, lsl #12
     c74:	5e350000 	cdppl	0, 3, cr0, cr5, cr0, {0}
     c78:	06000004 	streq	r0, [r0], -r4
     c7c:	000ba32c 	andeq	sl, fp, ip, lsr #6
     c80:	c4030500 	strgt	r0, [r3], #-1280	; 0x500
     c84:	39200001 	stmdbcc	r0!, {r0}
     c88:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     c8c:	5e370074 	mrcpl	0, 1, r0, cr7, cr4, {3}
     c90:	b5000000 	strlt	r0, [r0, #-0]
     c94:	3a00000b 	bcc	cc8 <__Stack_Size+0x8c8>
     c98:	08b43600 	ldmeq	r4!, {r9, sl, ip, sp}
     c9c:	25010000 	strcs	r0, [r1, #-0]
     ca0:	00000baa 	andeq	r0, r0, sl, lsr #23
     ca4:	0006d236 	andeq	sp, r6, r6, lsr r2
     ca8:	aa260100 	bge	9810b0 <__Stack_Size+0x980cb0>
     cac:	3500000b 	strcc	r0, [r0, #-11]
     cb0:	0000006f 	andeq	r0, r0, pc, rrx
     cb4:	006f6101 	rsbeq	r6, pc, r1, lsl #2
     cb8:	03050000 	movweq	r0, #20480	; 0x5000
     cbc:	2000020c 	andcs	r0, r0, ip, lsl #4
     cc0:	00029635 	andeq	r9, r2, r5, lsr r6
     cc4:	8f650100 	svchi	0x00650100
     cc8:	05000000 	streq	r0, [r0, #-0]
     ccc:	00020803 	andeq	r0, r2, r3, lsl #16
     cd0:	010a3720 	tsteq	sl, r0, lsr #14
     cd4:	0bfd0000 	bleq	fff40cdc <BootRAM+0xeeb147d>
     cd8:	bf380000 	svclt	0x00380000
     cdc:	06000000 	streq	r0, [r0], -r0
     ce0:	04b63500 	ldrteq	r3, [r6], #1280	; 0x500
     ce4:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
     ce8:	00000bed 	andeq	r0, r0, sp, ror #23
     cec:	00340305 	eorseq	r0, r4, r5, lsl #6
     cf0:	0f352000 	svceq	0x00352000
     cf4:	01000008 	tsteq	r0, r8
     cf8:	000bed92 	muleq	fp, r2, sp
     cfc:	50030500 	andpl	r0, r3, r0, lsl #10
     d00:	35200000 	strcc	r0, [r0, #-0]!
     d04:	0000074d 	andeq	r0, r0, sp, asr #14
     d08:	05019f01 	streq	r9, [r1, #-3841]	; 0xf01
     d0c:	03050000 	movweq	r0, #20480	; 0x5000
     d10:	200001ca 	andcs	r0, r0, sl, asr #3
     d14:	0005343b 	andeq	r3, r5, fp, lsr r4
     d18:	3c6e0900 	stclcc	9, cr0, [lr], #-0
     d1c:	00000793 	muleq	r0, r3, r7
     d20:	4902460a 	stmdbmi	r2, {r1, r3, r9, sl, lr}
     d24:	0f00000c 	svceq	0x0000000c
     d28:	0000005e 	andeq	r0, r0, lr, asr r0
     d2c:	07bd3c00 	ldreq	r3, [sp, r0, lsl #24]!
     d30:	570a0000 	strpl	r0, [sl, -r0]
     d34:	000c6002 	andeq	r6, ip, r2
     d38:	005e0f00 	subseq	r0, lr, r0, lsl #30
     d3c:	4c0f0000 	stcmi	0, cr0, [pc], {-0}
     d40:	00000000 	andeq	r0, r0, r0
     d44:	0009623c 	andeq	r6, r9, ip, lsr r2
     d48:	02400a00 	subeq	r0, r0, #0, 20
     d4c:	00000c72 	andeq	r0, r0, r2, ror ip
     d50:	00005e0f 	andeq	r5, r0, pc, lsl #28
     d54:	213d0000 	teqcs	sp, r0
     d58:	04000000 	streq	r0, [r0], #-0
     d5c:	000c83e9 	andeq	r8, ip, r9, ror #7
     d60:	005e0f00 	subseq	r0, lr, r0, lsl #30
     d64:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
     d68:	0000034b 	andeq	r0, r0, fp, asr #6
     d6c:	00b46d09 	adcseq	r6, r4, r9, lsl #26
     d70:	603f0000 	eorsvs	r0, pc, r0
     d74:	04000008 	streq	r0, [r0], #-8
     d78:	00015be5 	andeq	r5, r1, r5, ror #23
     d7c:	000ca800 	andeq	sl, ip, r0, lsl #16
     d80:	004c0f00 	subeq	r0, ip, r0, lsl #30
     d84:	6c0f0000 	stcvs	0, cr0, [pc], {-0}
     d88:	00000001 	andeq	r0, r0, r1
     d8c:	0005693b 	andeq	r6, r5, fp, lsr r9
     d90:	3f190700 	svccc	0x00190700
     d94:	000002af 	andeq	r0, r0, pc, lsr #5
     d98:	08e6f303 	stmiaeq	r6!, {r0, r1, r8, r9, ip, sp, lr, pc}^
     d9c:	0cc40000 	stcleq	0, cr0, [r4], {0}
     da0:	a30f0000 	movwge	r0, #61440	; 0xf000
     da4:	0000000b 	andeq	r0, r0, fp
     da8:	00059c3d 	andeq	r9, r5, sp, lsr ip
     dac:	dff20300 	svcle	0x00f20300
     db0:	0f00000c 	svceq	0x0000000c
     db4:	0000003a 	andeq	r0, r0, sl, lsr r0
     db8:	00005e0f 	andeq	r5, r0, pc, lsl #28
     dbc:	005e0f00 	subseq	r0, lr, r0, lsl #30
     dc0:	40000000 	andmi	r0, r0, r0
     dc4:	000002ea 	andeq	r0, r0, sl, ror #5
     dc8:	a3010a03 	movwge	r0, #6659	; 0x1a03
     dcc:	3c00000b 	stccc	0, cr0, [r0], {11}
     dd0:	0000073a 	andeq	r0, r0, sl, lsr r7
     dd4:	fd010603 	stc2	6, cr0, [r1, #-12]
     dd8:	0f00000c 	svceq	0x0000000c
     ddc:	00000cfd 	strdeq	r0, [r0], -sp
     de0:	ff040a00 			; <UNDEFINED> instruction: 0xff040a00
     de4:	3b000000 	blcc	dec <__Stack_Size+0x9ec>
     de8:	000000aa 	andeq	r0, r0, sl, lsr #1
     dec:	b33b6a09 	teqlt	fp, #36864	; 0x9000
     df0:	0b000003 	bleq	e04 <__Stack_Size+0xa04>
     df4:	021b001a 	andseq	r0, fp, #26
     df8:	00040000 	andeq	r0, r4, r0
     dfc:	000003f1 	strdeq	r0, [r0], -r1
     e00:	017e0104 	cmneq	lr, r4, lsl #2
     e04:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     e08:	3200000a 	andcc	r0, r0, #10
     e0c:	a4000000 	strge	r0, [r0], #-0
     e10:	02000004 	andeq	r0, r0, #4
     e14:	021c0504 	andseq	r0, ip, #4, 10	; 0x1000000
     e18:	02020000 	andeq	r0, r2, #0
     e1c:	0006c805 	andeq	ip, r6, r5, lsl #16
     e20:	06010200 	streq	r0, [r1], -r0, lsl #4
     e24:	00000674 	andeq	r0, r0, r4, ror r6
     e28:	a1070402 	tstge	r7, r2, lsl #8
     e2c:	03000003 	movweq	r0, #3
     e30:	00363175 	eorseq	r3, r6, r5, ror r1
     e34:	00442801 	subeq	r2, r4, r1, lsl #16
     e38:	02020000 	andeq	r0, r2, #0
     e3c:	0003fd07 	andeq	pc, r3, r7, lsl #26
     e40:	38750300 	ldmdacc	r5!, {r8, r9}^
     e44:	55290100 	strpl	r0, [r9, #-256]!	; 0x100
     e48:	02000000 	andeq	r0, r0, #0
     e4c:	06720801 	ldrbteq	r0, [r2], -r1, lsl #16
     e50:	04020000 	streq	r0, [r2], #-0
     e54:	00054507 	andeq	r4, r5, r7, lsl #10
     e58:	00b20400 	adcseq	r0, r2, r0, lsl #8
     e5c:	02080000 	andeq	r0, r8, #0
     e60:	00008824 	andeq	r8, r0, r4, lsr #16
     e64:	01630500 	cmneq	r3, r0, lsl #10
     e68:	26020000 	strcs	r0, [r2], -r0
     e6c:	00000088 	andeq	r0, r0, r8, lsl #1
     e70:	05c30500 	strbeq	r0, [r3, #1280]	; 0x500
     e74:	27020000 	strcs	r0, [r2, -r0]
     e78:	00000039 	andeq	r0, r0, r9, lsr r0
     e7c:	04060004 	streq	r0, [r6], #-4
     e80:	0000004b 	andeq	r0, r0, fp, asr #32
     e84:	0002fc07 	andeq	pc, r2, r7, lsl #24
     e88:	63290200 	teqvs	r9, #0, 4
     e8c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     e90:	0000045e 	andeq	r0, r0, lr, asr r4
     e94:	00aa2c03 	adceq	r2, sl, r3, lsl #24
     e98:	03050000 	movweq	r0, #20480	; 0x5000
     e9c:	200001c4 	andcs	r0, r0, r4, asr #3
     ea0:	69050409 	stmdbvs	r5, {r0, r3, sl}
     ea4:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     ea8:	000009a7 	andeq	r0, r0, r7, lsr #19
     eac:	008e3c04 	addeq	r3, lr, r4, lsl #24
     eb0:	03050000 	movweq	r0, #20480	; 0x5000
     eb4:	20000144 	andcs	r0, r0, r4, asr #2
     eb8:	0008b708 	andeq	fp, r8, r8, lsl #14
     ebc:	8e7c0400 	cdphi	4, 7, cr0, cr12, cr0, {0}
     ec0:	05000000 	streq	r0, [r0, #-0]
     ec4:	0001b403 	andeq	fp, r1, r3, lsl #8
     ec8:	008e0a20 	addeq	r0, lr, r0, lsr #20
     ecc:	00e30000 	rsceq	r0, r3, r0
     ed0:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
     ed4:	06000000 	streq	r0, [r0], -r0
     ed8:	01430800 	cmpeq	r3, r0, lsl #16
     edc:	a4040000 	strge	r0, [r4], #-0
     ee0:	000000d3 	ldrdeq	r0, [r0], -r3
     ee4:	00940305 	addseq	r0, r4, r5, lsl #6
     ee8:	d5082000 	strle	r2, [r8, #-0]
     eec:	04000006 	streq	r0, [r0], #-6
     ef0:	00008e4e 	andeq	r8, r0, lr, asr #28
     ef4:	e0030500 	and	r0, r3, r0, lsl #10
     ef8:	0a200000 	beq	800f00 <__Stack_Size+0x800b00>
     efc:	0000004b 	andeq	r0, r0, fp, asr #32
     f00:	00000115 	andeq	r0, r0, r5, lsl r1
     f04:	00005c0b 	andeq	r5, r0, fp, lsl #24
     f08:	08001100 	stmdaeq	r0, {r8, ip}
     f0c:	000009a4 	andeq	r0, r0, r4, lsr #19
     f10:	01052504 	tsteq	r5, r4, lsl #10
     f14:	03050000 	movweq	r0, #20480	; 0x5000
     f18:	200000cc 	andcs	r0, r0, ip, asr #1
     f1c:	00004b0a 	andeq	r4, r0, sl, lsl #22
     f20:	00013600 	andeq	r3, r1, r0, lsl #12
     f24:	005c0b00 	subseq	r0, ip, r0, lsl #22
     f28:	00080000 	andeq	r0, r8, r0
     f2c:	0006d208 	andeq	sp, r6, r8, lsl #4
     f30:	26410400 	strbcs	r0, [r1], -r0, lsl #8
     f34:	05000001 	streq	r0, [r0, #-1]
     f38:	00011b03 	andeq	r1, r1, r3, lsl #22
     f3c:	004b0a20 	subeq	r0, fp, r0, lsr #20
     f40:	01570000 	cmpeq	r7, r0
     f44:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
     f48:	1a000000 	bne	f50 <__Stack_Size+0xb50>
     f4c:	08b40800 	ldmeq	r4!, {fp}
     f50:	54040000 	strpl	r0, [r4], #-0
     f54:	00000147 	andeq	r0, r0, r7, asr #2
     f58:	00ec0305 	rsceq	r0, ip, r5, lsl #6
     f5c:	4b0a2000 	blmi	288f64 <__Stack_Size+0x288b64>
     f60:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     f64:	0b000001 	bleq	f70 <__Stack_Size+0xb70>
     f68:	0000005c 	andeq	r0, r0, ip, asr r0
     f6c:	f6080003 			; <UNDEFINED> instruction: 0xf6080003
     f70:	04000009 	streq	r0, [r0], #-9
     f74:	00016882 	andeq	r6, r1, r2, lsl #17
     f78:	e8030500 	stmda	r3, {r8, sl}
     f7c:	0a200000 	beq	800f84 <__Stack_Size+0x800b84>
     f80:	0000004b 	andeq	r0, r0, fp, asr #32
     f84:	00000199 	muleq	r0, r9, r1
     f88:	00005c0b 	andeq	r5, r0, fp, lsl #24
     f8c:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
     f90:	0000097b 	andeq	r0, r0, fp, ror r9
     f94:	01898904 	orreq	r8, r9, r4, lsl #18
     f98:	03050000 	movweq	r0, #20480	; 0x5000
     f9c:	20000124 	andcs	r0, r0, r4, lsr #2
     fa0:	00004b0a 	andeq	r4, r0, sl, lsl #22
     fa4:	0001ba00 	andeq	fp, r1, r0, lsl #20
     fa8:	005c0b00 	subseq	r0, ip, r0, lsl #22
     fac:	00150000 	andseq	r0, r5, r0
     fb0:	0009e208 	andeq	lr, r9, r8, lsl #4
     fb4:	aa8f0400 	bge	fe3c1fbc <BootRAM+0xd33275d>
     fb8:	05000001 	streq	r0, [r0, #-1]
     fbc:	00014c03 	andeq	r4, r1, r3, lsl #24
     fc0:	004b0a20 	subeq	r0, fp, r0, lsr #20
     fc4:	01db0000 	bicseq	r0, fp, r0
     fc8:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
     fcc:	13000000 	movwne	r0, #0
     fd0:	09be0800 	ldmibeq	lr!, {fp}
     fd4:	95040000 	strls	r0, [r4, #-0]
     fd8:	000001cb 	andeq	r0, r0, fp, asr #3
     fdc:	01070305 	tsteq	r7, r5, lsl #6
     fe0:	4b0a2000 	blmi	288fe8 <__Stack_Size+0x288be8>
     fe4:	fc000000 	stc2	0, cr0, [r0], {-0}
     fe8:	0b000001 	bleq	ff4 <__Stack_Size+0xbf4>
     fec:	0000005c 	andeq	r0, r0, ip, asr r0
     ff0:	d108004f 	tstle	r8, pc, asr #32
     ff4:	04000009 	streq	r0, [r0], #-9
     ff8:	0001ec9c 	muleq	r1, ip, ip
     ffc:	62030500 	andvs	r0, r3, #0, 10
    1000:	08200001 	stmdaeq	r0!, {r0}
    1004:	0000098e 	andeq	r0, r0, lr, lsl #19
    1008:	004ba204 	subeq	sl, fp, r4, lsl #4
    100c:	03050000 	movweq	r0, #20480	; 0x5000
    1010:	00000000 	andeq	r0, r0, r0
    1014:	00024e00 	andeq	r4, r2, r0, lsl #28
    1018:	7b000400 	blvc	2020 <__Stack_Size+0x1c20>
    101c:	04000004 	streq	r0, [r0], #-4
    1020:	00017e01 	andeq	r7, r1, r1, lsl #28
    1024:	0abd0100 	beq	fef4142c <BootRAM+0xdeb1bcd>
    1028:	00320000 	eorseq	r0, r2, r0
    102c:	01280000 	teqeq	r8, r0
    1030:	00000000 	andeq	r0, r0, r0
    1034:	05160000 	ldreq	r0, [r6, #-0]
    1038:	04020000 	streq	r0, [r2], #-0
    103c:	00021c05 	andeq	r1, r2, r5, lsl #24
    1040:	05020200 	streq	r0, [r2, #-512]	; 0x200
    1044:	000006c8 	andeq	r0, r0, r8, asr #13
    1048:	74060102 	strvc	r0, [r6], #-258	; 0x102
    104c:	03000006 	movweq	r0, #6
    1050:	00323375 	eorseq	r3, r2, r5, ror r3
    1054:	00452705 	subeq	r2, r5, r5, lsl #14
    1058:	04020000 	streq	r0, [r2], #-0
    105c:	0003a107 	andeq	sl, r3, r7, lsl #2
    1060:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1064:	000003fd 	strdeq	r0, [r0], -sp
    1068:	72080102 	andvc	r0, r8, #-2147483648	; 0x80000000
    106c:	04000006 	streq	r0, [r0], #-6
    1070:	6f370501 	svcvs	0x00370501
    1074:	05000000 	streq	r0, [r0, #-0]
    1078:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    107c:	076d0500 	strbeq	r0, [sp, -r0, lsl #10]!
    1080:	00010000 	andeq	r0, r1, r0
    1084:	00045906 	andeq	r5, r4, r6, lsl #18
    1088:	5a370500 	bpl	dc2490 <__Stack_Size+0xdc2090>
    108c:	02000000 	andeq	r0, r0, #0
    1090:	05450704 	strbeq	r0, [r5, #-1796]	; 0x704
    1094:	ab070000 	blge	1c109c <__Stack_Size+0x1c0c9c>
    1098:	0100000a 	tsteq	r0, sl
    109c:	0001a926 	andeq	sl, r1, r6, lsr #18
    10a0:	0005ac00 	andeq	sl, r5, r0, lsl #24
    10a4:	00007808 	andeq	r7, r0, r8, lsl #16
    10a8:	a99c0100 	ldmibge	ip, {r8}
    10ac:	08000001 	stmdaeq	r0, {r0}
    10b0:	00000ab0 			; <UNDEFINED> instruction: 0x00000ab0
    10b4:	006f2801 	rsbeq	r2, pc, r1, lsl #16
    10b8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    10bc:	00000a63 	andeq	r0, r0, r3, ror #20
    10c0:	006f2901 	rsbeq	r2, pc, r1, lsl #18
    10c4:	02460000 	subeq	r0, r6, #0
    10c8:	ce0a0000 	cdpgt	0, 0, cr0, cr10, cr0, {0}
    10cc:	1a080005 	bne	2010e8 <__Stack_Size+0x200ce8>
    10d0:	07000000 	streq	r0, [r0, -r0]
    10d4:	0b000001 	bleq	10e0 <__Stack_Size+0xce0>
    10d8:	00000a87 	andeq	r0, r0, r7, lsl #21
    10dc:	01a94d01 			; <UNDEFINED> instruction: 0x01a94d01
    10e0:	00d30000 	sbcseq	r0, r3, r0
    10e4:	000c0000 	andeq	r0, ip, r0
    10e8:	0005d40d 	andeq	sp, r5, sp, lsl #8
    10ec:	0001c108 	andeq	ip, r1, r8, lsl #2
    10f0:	0000ea00 	andeq	lr, r0, r0, lsl #20
    10f4:	50010e00 	andpl	r0, r1, r0, lsl #28
    10f8:	50000c05 	andpl	r0, r0, r5, lsl #24
    10fc:	0f000800 	svceq	0x00000800
    1100:	080005da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl}
    1104:	000001d6 	ldrdeq	r0, [r0], -r6
    1108:	0005e410 	andeq	lr, r5, r0, lsl r4
    110c:	0001c108 	andeq	ip, r1, r8, lsl #2
    1110:	50010e00 	andpl	r0, r1, r0, lsl #28
    1114:	20000c05 	andcs	r0, r0, r5, lsl #24
    1118:	00000800 	andeq	r0, r0, r0, lsl #16
    111c:	0005e80a 	andeq	lr, r5, sl, lsl #16
    1120:	00000e08 	andeq	r0, r0, r8, lsl #28
    1124:	00013200 	andeq	r3, r1, r0, lsl #4
    1128:	0ad41100 	beq	ff505530 <BootRAM+0xe475cd1>
    112c:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    1130:	000001a9 	andeq	r0, r0, r9, lsr #3
    1134:	0005ec0f 	andeq	lr, r5, pc, lsl #24
    1138:	0001e708 	andeq	lr, r1, r8, lsl #14
    113c:	05f40f00 	ldrbeq	r0, [r4, #3840]!	; 0xf00
    1140:	01f80800 	mvnseq	r0, r0, lsl #16
    1144:	0f000000 	svceq	0x00000000
    1148:	080005b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, sl}
    114c:	00000205 	andeq	r0, r0, r5, lsl #4
    1150:	0005b60f 	andeq	fp, r5, pc, lsl #12
    1154:	00020c08 	andeq	r0, r2, r8, lsl #24
    1158:	05ba0f00 	ldreq	r0, [sl, #3840]!	; 0xf00
    115c:	02130800 	andseq	r0, r3, #0, 16
    1160:	be0f0000 	cdplt	0, 0, cr0, cr15, cr0, {0}
    1164:	1a080005 	bne	201180 <__Stack_Size+0x200d80>
    1168:	0f000002 	svceq	0x00000002
    116c:	080005c2 	stmdaeq	r0, {r1, r6, r7, r8, sl}
    1170:	00000221 	andeq	r0, r0, r1, lsr #4
    1174:	0005c60f 	andeq	ip, r5, pc, lsl #12
    1178:	00022808 	andeq	r2, r2, r8, lsl #16
    117c:	05fc0d00 	ldrbeq	r0, [ip, #3328]!	; 0xd00
    1180:	01c10800 	biceq	r0, r1, r0, lsl #16
    1184:	017f0000 	cmneq	pc, r0
    1188:	010e0000 	mrseq	r0, (UNDEF: 14)
    118c:	000c0550 	andeq	r0, ip, r0, asr r5
    1190:	00080020 	andeq	r0, r8, r0, lsr #32
    1194:	0006080d 	andeq	r0, r6, sp, lsl #16
    1198:	0001c108 	andeq	ip, r1, r8, lsl #2
    119c:	00019600 	andeq	r9, r1, r0, lsl #12
    11a0:	50010e00 	andpl	r0, r1, r0, lsl #28
    11a4:	50000c05 	andpl	r0, r0, r5, lsl #24
    11a8:	0f000800 	svceq	0x00000800
    11ac:	08000610 	stmdaeq	r0, {r4, r9, sl}
    11b0:	00000239 	andeq	r0, r0, r9, lsr r2
    11b4:	0006160f 	andeq	r1, r6, pc, lsl #12
    11b8:	00024a08 	andeq	r4, r2, r8, lsl #20
    11bc:	04120000 	ldreq	r0, [r2], #-0
    11c0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    11c4:	045e1300 	ldrbeq	r1, [lr], #-768	; 0x300
    11c8:	2c040000 	stccs	0, cr0, [r4], {-0}
    11cc:	000001a9 	andeq	r0, r0, r9, lsr #3
    11d0:	01c40305 	biceq	r0, r4, r5, lsl #6
    11d4:	6d142000 	ldcvs	0, cr2, [r4, #-0]
    11d8:	0300000a 	movweq	r0, #10
    11dc:	00006ffd 	strdeq	r6, [r0], -sp
    11e0:	0001d600 	andeq	sp, r1, r0, lsl #12
    11e4:	003a1500 	eorseq	r1, sl, r0, lsl #10
    11e8:	0b000000 	bleq	11f0 <__Stack_Size+0xdf0>
    11ec:	00000a87 	andeq	r0, r0, r7, lsl #21
    11f0:	01a94d01 			; <UNDEFINED> instruction: 0x01a94d01
    11f4:	01e70000 	mvneq	r0, r0
    11f8:	000c0000 	andeq	r0, ip, r0
    11fc:	000ae00b 	andeq	lr, sl, fp
    1200:	6f7c0200 	svcvs	0x007c0200
    1204:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    1208:	0c000001 	stceq	0, cr0, [r0], {1}
    120c:	0a1a1600 	beq	686a14 <__Stack_Size+0x686614>
    1210:	7d020000 	stcvc	0, cr0, [r2, #-0]
    1214:	00000205 	andeq	r0, r0, r5, lsl #4
    1218:	7b17000c 	blvc	5c1250 <__Stack_Size+0x5c0e50>
    121c:	0300000a 	movweq	r0, #10
    1220:	0aa217f9 	beq	fe88720c <BootRAM+0xd7f79ad>
    1224:	fa030000 	blx	c122c <__Stack_Size+0xc0e2c>
    1228:	000a3517 	andeq	r3, sl, r7, lsl r5
    122c:	17fb0300 	ldrbne	r0, [fp, r0, lsl #6]!
    1230:	00000279 	andeq	r0, r0, r9, ror r2
    1234:	97175104 	ldrls	r5, [r7, -r4, lsl #2]
    1238:	0300000a 	movweq	r0, #10
    123c:	0a470bfc 	beq	11c4234 <__Stack_Size+0x11c3e34>
    1240:	ff030000 			; <UNDEFINED> instruction: 0xff030000
    1244:	000001a9 	andeq	r0, r0, r9, lsr #3
    1248:	00000239 	andeq	r0, r0, r9, lsr r2
    124c:	2a18000c 	bcs	601284 <__Stack_Size+0x600e84>
    1250:	0300000a 	movweq	r0, #10
    1254:	00024afe 	strdeq	r4, [r2], -lr
    1258:	003a1500 	eorseq	r1, sl, r0, lsl #10
    125c:	17000000 	strne	r0, [r0, -r0]
    1260:	00000ac4 	andeq	r0, r0, r4, asr #21
    1264:	2300f803 	movwcs	pc, #2051	; 0x803	; <UNPREDICTABLE>
    1268:	0400000b 	streq	r0, [r0], #-11
    126c:	0005ce00 	andeq	ip, r5, r0, lsl #28
    1270:	7e010400 	cfcpysvc	mvf0, mvf1
    1274:	01000001 	tsteq	r0, r1
    1278:	00000cf6 	strdeq	r0, [r0], -r6
    127c:	00000032 	andeq	r0, r0, r2, lsr r0
    1280:	00000150 	andeq	r0, r0, r0, asr r1
    1284:	00000000 	andeq	r0, r0, r0
    1288:	000005ae 	andeq	r0, r0, lr, lsr #11
    128c:	1c050402 	cfstrsne	mvf0, [r5], {2}
    1290:	02000002 	andeq	r0, r0, #2
    1294:	06c80502 	strbeq	r0, [r8], r2, lsl #10
    1298:	01020000 	mrseq	r0, (UNDEF: 2)
    129c:	00067406 	andeq	r7, r6, r6, lsl #8
    12a0:	33750300 	cmncc	r5, #0, 6
    12a4:	27020032 	smladxcs	r2, r2, r0, r0
    12a8:	00000045 	andeq	r0, r0, r5, asr #32
    12ac:	a1070402 	tstge	r7, r2, lsl #8
    12b0:	03000003 	movweq	r0, #3
    12b4:	00363175 	eorseq	r3, r6, r5, ror r1
    12b8:	00572802 	subseq	r2, r7, r2, lsl #16
    12bc:	02020000 	andeq	r0, r2, #0
    12c0:	0003fd07 	andeq	pc, r3, r7, lsl #26
    12c4:	38750300 	ldmdacc	r5!, {r8, r9}^
    12c8:	68290200 	stmdavs	r9!, {r9}
    12cc:	02000000 	andeq	r0, r0, #0
    12d0:	06720801 	ldrbteq	r0, [r2], -r1, lsl #16
    12d4:	6c040000 	stcvs	0, cr0, [r4], {-0}
    12d8:	02000004 	andeq	r0, r0, #4
    12dc:	00007a2f 	andeq	r7, r0, pc, lsr #20
    12e0:	00450500 	subeq	r0, r5, r0, lsl #10
    12e4:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
    12e8:	02000001 	andeq	r0, r0, #1
    12ec:	00008a30 	andeq	r8, r0, r0, lsr sl
    12f0:	00570500 	subseq	r0, r7, r0, lsl #10
    12f4:	a3040000 	movwge	r0, #16384	; 0x4000
    12f8:	0200000d 	andeq	r0, r0, #13
    12fc:	00009a33 	andeq	r9, r0, r3, lsr sl
    1300:	007a0600 	rsbseq	r0, sl, r0, lsl #12
    1304:	01070000 	mrseq	r0, (UNDEF: 7)
    1308:	00b43702 	adcseq	r3, r4, r2, lsl #14
    130c:	ff080000 			; <UNDEFINED> instruction: 0xff080000
    1310:	00000005 	andeq	r0, r0, r5
    1314:	00076d08 	andeq	r6, r7, r8, lsl #26
    1318:	04000100 	streq	r0, [r0], #-256	; 0x100
    131c:	00000459 	andeq	r0, r0, r9, asr r4
    1320:	009f3702 	addseq	r3, pc, r2, lsl #14
    1324:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
    1328:	013f8d03 	teqeq	pc, r3, lsl #26
    132c:	430a0000 	movwmi	r0, #40960	; 0xa000
    1330:	8e030052 	mcrhi	0, 0, r0, cr3, cr2, {2}
    1334:	0000006f 	andeq	r0, r0, pc, rrx
    1338:	0d9e0b00 	vldreq	d0, [lr]
    133c:	8f030000 	svchi	0x00030000
    1340:	0000006f 	andeq	r0, r0, pc, rrx
    1344:	49430a04 	stmdbmi	r3, {r2, r9, fp}^
    1348:	90030052 	andls	r0, r3, r2, asr r0
    134c:	0000006f 	andeq	r0, r0, pc, rrx
    1350:	0b6f0b08 	bleq	1bc3f78 <__Stack_Size+0x1bc3b78>
    1354:	91030000 	mrsls	r0, (UNDEF: 3)
    1358:	0000006f 	andeq	r0, r0, pc, rrx
    135c:	0c3b0b0c 	ldceq	11, cr0, [fp], #-48	; 0xffffffd0
    1360:	92030000 	andls	r0, r3, #0
    1364:	0000006f 	andeq	r0, r0, pc, rrx
    1368:	0bf70b10 	bleq	ffdc3fb0 <BootRAM+0xed34751>
    136c:	93030000 	movwls	r0, #12288	; 0x3000
    1370:	0000006f 	andeq	r0, r0, pc, rrx
    1374:	0cc50b14 	vstmiaeq	r5, {d16-d25}
    1378:	94030000 	strls	r0, [r3], #-0
    137c:	0000006f 	andeq	r0, r0, pc, rrx
    1380:	0d0e0b18 	vstreq	d0, [lr, #-96]	; 0xffffffa0
    1384:	95030000 	strls	r0, [r3, #-0]
    1388:	0000006f 	andeq	r0, r0, pc, rrx
    138c:	0d7d0b1c 	vldmdbeq	sp!, {d16-d29}
    1390:	96030000 	strls	r0, [r3], -r0
    1394:	0000006f 	andeq	r0, r0, pc, rrx
    1398:	53430a20 	movtpl	r0, #14880	; 0x3a20
    139c:	97030052 	smlsdls	r3, r2, r0, r0
    13a0:	0000006f 	andeq	r0, r0, pc, rrx
    13a4:	cc040024 	stcgt	0, cr0, [r4], {36}	; 0x24
    13a8:	0300000b 	movweq	r0, #11
    13ac:	0000bf98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    13b0:	033c0c00 	teqeq	ip, #0, 24
    13b4:	01df9b03 	bicseq	r9, pc, r3, lsl #22
    13b8:	ac0b0000 	stcge	0, cr0, [fp], {-0}
    13bc:	0300000c 	movweq	r0, #12
    13c0:	0001f69c 	muleq	r1, ip, r6
    13c4:	5b0b0000 	blpl	2c13cc <__Stack_Size+0x2c0fcc>
    13c8:	0300000c 	movweq	r0, #12
    13cc:	0001fb9d 	muleq	r1, sp, fp
    13d0:	360b0800 	strcc	r0, [fp], -r0, lsl #16
    13d4:	0300000c 	movweq	r0, #12
    13d8:	00020b9e 	muleq	r2, lr, fp
    13dc:	950b8000 	strls	r8, [fp, #-0]
    13e0:	0300000d 	movweq	r0, #13
    13e4:	0001fb9f 	muleq	r1, pc, fp	; <UNPREDICTABLE>
    13e8:	1b0d8800 	blne	3633f0 <__Stack_Size+0x362ff0>
    13ec:	0300000b 	movweq	r0, #11
    13f0:	000210a0 	andeq	r1, r2, r0, lsr #1
    13f4:	0d010000 	stceq	0, cr0, [r1, #-0]
    13f8:	00000c6a 	andeq	r0, r0, sl, ror #24
    13fc:	01fba103 	mvnseq	sl, r3, lsl #2
    1400:	01080000 	mrseq	r0, (UNDEF: 8)
    1404:	000aff0d 	andeq	pc, sl, sp, lsl #30
    1408:	15a20300 	strne	r0, [r2, #768]!	; 0x300
    140c:	80000002 	andhi	r0, r0, r2
    1410:	0c740d01 	ldcleq	13, cr0, [r4], #-4
    1414:	a3030000 	movwge	r0, #12288	; 0x3000
    1418:	000001fb 	strdeq	r0, [r0], -fp
    141c:	2c0d0188 	stfcss	f0, [sp], {136}	; 0x88
    1420:	0300000c 	movweq	r0, #12
    1424:	00021aa4 	andeq	r1, r2, r4, lsr #21
    1428:	0d020000 	stceq	0, cr0, [r2, #-0]
    142c:	00000c7e 	andeq	r0, r0, lr, ror ip
    1430:	021fa503 	andseq	sl, pc, #12582912	; 0xc00000
    1434:	02080000 	andeq	r0, r8, #0
    1438:	5250490e 	subspl	r4, r0, #229376	; 0x38000
    143c:	3fa60300 	svccc	0x00a60300
    1440:	00000002 	andeq	r0, r0, r2
    1444:	6f0f0003 	svcvs	0x000f0003
    1448:	ef000000 	svc	0x00000000
    144c:	10000001 	andne	r0, r0, r1
    1450:	000001ef 	andeq	r0, r0, pc, ror #3
    1454:	04020001 	streq	r0, [r2], #-1
    1458:	00054507 	andeq	r4, r5, r7, lsl #10
    145c:	01df0500 	bicseq	r0, pc, r0, lsl #10
    1460:	3a0f0000 	bcc	3c1468 <__Stack_Size+0x3c1068>
    1464:	0b000000 	bleq	146c <__Stack_Size+0x106c>
    1468:	10000002 	andne	r0, r0, r2
    146c:	000001ef 	andeq	r0, r0, pc, ror #3
    1470:	df05001d 	svcle	0x0005001d
    1474:	05000001 	streq	r0, [r0, #-1]
    1478:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    147c:	0001df05 	andeq	sp, r1, r5, lsl #30
    1480:	01df0500 	bicseq	r0, pc, r0, lsl #10
    1484:	3a0f0000 	bcc	3c148c <__Stack_Size+0x3c108c>
    1488:	2f000000 	svccs	0x00000000
    148c:	10000002 	andne	r0, r0, r2
    1490:	000001ef 	andeq	r0, r0, pc, ror #3
    1494:	6f0f003d 	svcvs	0x000f003d
    1498:	3f000000 	svccc	0x00000000
    149c:	10000002 	andne	r0, r0, r2
    14a0:	000001ef 	andeq	r0, r0, pc, ror #3
    14a4:	2f05000e 	svccs	0x0005000e
    14a8:	04000002 	streq	r0, [r0], #-2
    14ac:	00000d01 	andeq	r0, r0, r1, lsl #26
    14b0:	014aa703 	cmpeq	sl, r3, lsl #14
    14b4:	04090000 	streq	r0, [r9], #-0
    14b8:	0288a903 	addeq	sl, r8, #49152	; 0xc000
    14bc:	710b0000 	mrsvc	r0, (UNDEF: 11)
    14c0:	03000004 	movweq	r0, #4
    14c4:	00005eaa 	andeq	r5, r0, sl, lsr #29
    14c8:	940b0000 	strls	r0, [fp], #-0
    14cc:	03000004 	movweq	r0, #4
    14d0:	00005eab 	andeq	r5, r0, fp, lsr #29
    14d4:	760b0100 	strvc	r0, [fp], -r0, lsl #2
    14d8:	03000003 	movweq	r0, #3
    14dc:	00005eac 	andeq	r5, r0, ip, lsr #29
    14e0:	000b0200 	andeq	r0, fp, r0, lsl #4
    14e4:	03000000 	movweq	r0, #0
    14e8:	0000b4ad 	andeq	fp, r0, sp, lsr #9
    14ec:	04000300 	streq	r0, [r0], #-768	; 0x300
    14f0:	000004c0 	andeq	r0, r0, r0, asr #9
    14f4:	024fae03 	subeq	sl, pc, #3, 28	; 0x30
    14f8:	40090000 	andmi	r0, r9, r0
    14fc:	0344b003 	movteq	fp, #16387	; 0x4003
    1500:	500b0000 	andpl	r0, fp, r0
    1504:	0300000c 	movweq	r0, #12
    1508:	00008fb1 			; <UNDEFINED> instruction: 0x00008fb1
    150c:	ea0b0000 	b	2c1514 <__Stack_Size+0x2c1114>
    1510:	0300000b 	movweq	r0, #11
    1514:	00006fb2 			; <UNDEFINED> instruction: 0x00006fb2
    1518:	be0b0400 	cfcpyslt	mvf0, mvf11
    151c:	0300000b 	movweq	r0, #11
    1520:	00006fb3 			; <UNDEFINED> instruction: 0x00006fb3
    1524:	fe0b0800 	cdp2	8, 0, cr0, cr11, cr0, {0}
    1528:	0300000b 	movweq	r0, #11
    152c:	00006fb4 			; <UNDEFINED> instruction: 0x00006fb4
    1530:	530a0c00 	movwpl	r0, #44032	; 0xac00
    1534:	03005243 	movweq	r5, #579	; 0x243
    1538:	00006fb5 			; <UNDEFINED> instruction: 0x00006fb5
    153c:	430a1000 	movwmi	r1, #40960	; 0xa000
    1540:	03005243 	movweq	r5, #579	; 0x243
    1544:	00006fb6 			; <UNDEFINED> instruction: 0x00006fb6
    1548:	2f0b1400 	svccs	0x000b1400
    154c:	0300000d 	movweq	r0, #13
    1550:	000354b7 			; <UNDEFINED> instruction: 0x000354b7
    1554:	a60b1800 	strge	r1, [fp], -r0, lsl #16
    1558:	0300000c 	movweq	r0, #12
    155c:	00006fb8 			; <UNDEFINED> instruction: 0x00006fb8
    1560:	270b2400 	strcs	r2, [fp, -r0, lsl #8]
    1564:	0300000c 	movweq	r0, #12
    1568:	00006fb9 			; <UNDEFINED> instruction: 0x00006fb9
    156c:	b50b2800 	strlt	r2, [fp, #-2048]	; 0x800
    1570:	0300000d 	movweq	r0, #13
    1574:	00006fba 			; <UNDEFINED> instruction: 0x00006fba
    1578:	650b2c00 	strvs	r2, [fp, #-3072]	; 0xc00
    157c:	0300000c 	movweq	r0, #12
    1580:	00006fbb 			; <UNDEFINED> instruction: 0x00006fbb
    1584:	040b3000 	streq	r3, [fp], #-0
    1588:	0300000c 	movweq	r0, #12
    158c:	00006fbc 			; <UNDEFINED> instruction: 0x00006fbc
    1590:	970b3400 	strls	r3, [fp, -r0, lsl #8]
    1594:	0300000b 	movweq	r0, #11
    1598:	00006fbd 			; <UNDEFINED> instruction: 0x00006fbd
    159c:	e70b3800 	str	r3, [fp, -r0, lsl #16]
    15a0:	0300000c 	movweq	r0, #12
    15a4:	00006fbe 			; <UNDEFINED> instruction: 0x00006fbe
    15a8:	0f003c00 	svceq	0x00003c00
    15ac:	0000006f 	andeq	r0, r0, pc, rrx
    15b0:	00000354 	andeq	r0, r0, r4, asr r3
    15b4:	0001ef10 	andeq	lr, r1, r0, lsl pc
    15b8:	05000200 	streq	r0, [r0, #-512]	; 0x200
    15bc:	00000344 	andeq	r0, r0, r4, asr #6
    15c0:	000da904 	andeq	sl, sp, r4, lsl #18
    15c4:	93bf0300 			; <UNDEFINED> instruction: 0x93bf0300
    15c8:	11000002 	tstne	r0, r2
    15cc:	00000c1b 	andeq	r0, r0, fp, lsl ip
    15d0:	88c30308 	stmiahi	r3, {r3, r8, r9}^
    15d4:	0a000003 	beq	15e8 <__Stack_Size+0x11e8>
    15d8:	03005243 	movweq	r5, #579	; 0x243
    15dc:	00006fc4 	andeq	r6, r0, r4, asr #31
    15e0:	430a0000 	movwmi	r0, #40960	; 0xa000
    15e4:	03005253 	movweq	r5, #595	; 0x253
    15e8:	00006fc5 	andeq	r6, r0, r5, asr #31
    15ec:	11000400 	tstne	r0, r0, lsl #8
    15f0:	00000c44 	andeq	r0, r0, r4, asr #24
    15f4:	b4d00338 	ldrblt	r0, [r0], #824	; 0x338
    15f8:	0b000004 	bleq	1610 <__Stack_Size+0x1210>
    15fc:	00000cd5 	ldrdeq	r0, [r0], -r5
    1600:	04b4d103 	ldrteq	sp, [r4], #259	; 0x103
    1604:	0a000000 	beq	160c <__Stack_Size+0x120c>
    1608:	00315244 	eorseq	r5, r1, r4, asr #4
    160c:	007fd203 	rsbseq	sp, pc, r3, lsl #4
    1610:	0b040000 	bleq	101618 <__Stack_Size+0x101218>
    1614:	00000c6a 	andeq	r0, r0, sl, ror #24
    1618:	04b9d303 	ldrteq	sp, [r9], #771	; 0x303
    161c:	0a060000 	beq	181624 <__Stack_Size+0x181224>
    1620:	00325244 	eorseq	r5, r2, r4, asr #4
    1624:	007fd403 	rsbseq	sp, pc, r3, lsl #8
    1628:	0b080000 	bleq	201630 <__Stack_Size+0x201230>
    162c:	00000c74 	andeq	r0, r0, r4, ror ip
    1630:	04b9d503 	ldrteq	sp, [r9], #1283	; 0x503
    1634:	0a0a0000 	beq	28163c <__Stack_Size+0x28123c>
    1638:	00335244 	eorseq	r5, r3, r4, asr #4
    163c:	007fd603 	rsbseq	sp, pc, r3, lsl #12
    1640:	0b0c0000 	bleq	301648 <__Stack_Size+0x301248>
    1644:	00000c7e 	andeq	r0, r0, lr, ror ip
    1648:	04b9d703 	ldrteq	sp, [r9], #1795	; 0x703
    164c:	0a0e0000 	beq	381654 <__Stack_Size+0x381254>
    1650:	00345244 	eorseq	r5, r4, r4, asr #4
    1654:	007fd803 	rsbseq	sp, pc, r3, lsl #16
    1658:	0b100000 	bleq	401660 <__Stack_Size+0x401260>
    165c:	00000c88 	andeq	r0, r0, r8, lsl #25
    1660:	04b9d903 	ldrteq	sp, [r9], #2307	; 0x903
    1664:	0a120000 	beq	48166c <__Stack_Size+0x48126c>
    1668:	00355244 	eorseq	r5, r5, r4, asr #4
    166c:	007fda03 	rsbseq	sp, pc, r3, lsl #20
    1670:	0b140000 	bleq	501678 <__Stack_Size+0x501278>
    1674:	00000c92 	muleq	r0, r2, ip
    1678:	04b9db03 	ldrteq	sp, [r9], #2819	; 0xb03
    167c:	0a160000 	beq	581684 <__Stack_Size+0x581284>
    1680:	00365244 	eorseq	r5, r6, r4, asr #4
    1684:	007fdc03 	rsbseq	sp, pc, r3, lsl #24
    1688:	0b180000 	bleq	601690 <__Stack_Size+0x601290>
    168c:	00000c9c 	muleq	r0, ip, ip
    1690:	04b9dd03 	ldrteq	sp, [r9], #3331	; 0xd03
    1694:	0a1a0000 	beq	68169c <__Stack_Size+0x68129c>
    1698:	00375244 	eorseq	r5, r7, r4, asr #4
    169c:	007fde03 	rsbseq	sp, pc, r3, lsl #28
    16a0:	0b1c0000 	bleq	7016a8 <__Stack_Size+0x7012a8>
    16a4:	00000d59 	andeq	r0, r0, r9, asr sp
    16a8:	04b9df03 	ldrteq	sp, [r9], #3843	; 0xf03
    16ac:	0a1e0000 	beq	7816b4 <__Stack_Size+0x7812b4>
    16b0:	00385244 	eorseq	r5, r8, r4, asr #4
    16b4:	007fe003 	rsbseq	lr, pc, r3
    16b8:	0b200000 	bleq	8016c0 <__Stack_Size+0x8012c0>
    16bc:	00000cec 	andeq	r0, r0, ip, ror #25
    16c0:	04b9e103 	ldrteq	lr, [r9], #259	; 0x103
    16c4:	0a220000 	beq	8816cc <__Stack_Size+0x8812cc>
    16c8:	00395244 	eorseq	r5, r9, r4, asr #4
    16cc:	007fe203 	rsbseq	lr, pc, r3, lsl #4
    16d0:	0b240000 	bleq	9016d8 <__Stack_Size+0x9012d8>
    16d4:	00000b4c 	andeq	r0, r0, ip, asr #22
    16d8:	04b9e303 	ldrteq	lr, [r9], #771	; 0x303
    16dc:	0b260000 	bleq	9816e4 <__Stack_Size+0x9812e4>
    16e0:	00000cc0 	andeq	r0, r0, r0, asr #25
    16e4:	007fe403 	rsbseq	lr, pc, r3, lsl #8
    16e8:	0b280000 	bleq	a016f0 <__Stack_Size+0xa012f0>
    16ec:	00000b57 	andeq	r0, r0, r7, asr fp
    16f0:	04b9e503 	ldrteq	lr, [r9], #1283	; 0x503
    16f4:	0b2a0000 	bleq	a816fc <__Stack_Size+0xa812fc>
    16f8:	00000d34 	andeq	r0, r0, r4, lsr sp
    16fc:	006fe603 	rsbeq	lr, pc, r3, lsl #12
    1700:	0a2c0000 	beq	b01708 <__Stack_Size+0xb01308>
    1704:	03005243 	movweq	r5, #579	; 0x243
    1708:	00006fe7 	andeq	r6, r0, r7, ror #31
    170c:	430a3000 	movwmi	r3, #40960	; 0xa000
    1710:	03005253 	movweq	r5, #595	; 0x253
    1714:	00006fe8 	andeq	r6, r0, r8, ror #31
    1718:	06003400 	streq	r3, [r0], -r0, lsl #8
    171c:	0000003a 	andeq	r0, r0, sl, lsr r0
    1720:	00004c06 	andeq	r4, r0, r6, lsl #24
    1724:	04131200 	ldreq	r1, [r3], #-512	; 0x200
    1728:	000004be 			; <UNDEFINED> instruction: 0x000004be
    172c:	000c1114 	andeq	r1, ip, r4, lsl r1
    1730:	017e0100 	cmneq	lr, r0, lsl #2
    1734:	059c1501 	ldreq	r1, [ip, #1281]	; 0x501
    1738:	2d010000 	stccs	0, cr0, [r1, #-0]
    173c:	0004fc01 	andeq	pc, r4, r1, lsl #24
    1740:	0d3a1600 	ldceq	6, cr1, [sl, #-0]
    1744:	2d010000 	stccs	0, cr0, [r1, #-0]
    1748:	0000003a 	andeq	r0, r0, sl, lsr r0
    174c:	6e697017 	mcrvs	0, 3, r7, cr9, cr7, {0}
    1750:	5e2d0100 	sufple	f0, f5, f0
    1754:	17000000 	strne	r0, [r0, -r0]
    1758:	006c6176 	rsbeq	r6, ip, r6, ror r1
    175c:	005e2d01 	subseq	r2, lr, r1, lsl #26
    1760:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1764:	000004ce 	andeq	r0, r0, lr, asr #9
    1768:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
    176c:	00000016 	andeq	r0, r0, r6, lsl r0
    1770:	05299c01 	streq	r9, [r9, #-3073]!	; 0xc01
    1774:	da190000 	ble	64177c <__Stack_Size+0x64137c>
    1778:	01000004 	tsteq	r0, r4
    177c:	04e51a50 	strbteq	r1, [r5], #2640	; 0xa50
    1780:	02720000 	rsbseq	r0, r2, #0
    1784:	f01a0000 			; <UNDEFINED> instruction: 0xf01a0000
    1788:	93000004 	movwls	r0, #4
    178c:	00000002 	andeq	r0, r0, r2
    1790:	000b201b 	andeq	r2, fp, fp, lsl r0
    1794:	b4320100 	ldrtlt	r0, [r2], #-256	; 0x100
    1798:	00000000 	andeq	r0, r0, r0
    179c:	12000000 	andne	r0, r0, #0
    17a0:	01000000 	mrseq	r0, (UNDEF: 0)
    17a4:	0005619c 	muleq	r5, ip, r1
    17a8:	0d3a1c00 	ldceq	12, cr1, [sl, #-0]
    17ac:	32010000 	andcc	r0, r1, #0
    17b0:	0000003a 	andeq	r0, r0, sl, lsr r0
    17b4:	000002c9 	andeq	r0, r0, r9, asr #5
    17b8:	6e69701d 	mcrvs	0, 3, r7, cr9, cr13, {0}
    17bc:	5e320100 	rsfpls	f0, f2, f0
    17c0:	ea000000 	b	17c8 <__Stack_Size+0x13c8>
    17c4:	00000002 	andeq	r0, r0, r2
    17c8:	000a871e 	andeq	r8, sl, lr, lsl r7
    17cc:	b43b0100 	ldrtlt	r0, [fp], #-256	; 0x100
    17d0:	3c000000 	stccc	0, cr0, [r0], {-0}
    17d4:	10080006 	andne	r0, r8, r6
    17d8:	01000000 	mrseq	r0, (UNDEF: 0)
    17dc:	00058a9c 	muleq	r5, ip, sl
    17e0:	0b691f00 	bleq	1a493e8 <__Stack_Size+0x1a48fe8>
    17e4:	3d010000 	stccc	0, cr0, [r1, #-0]
    17e8:	000000b4 	strheq	r0, [r0], -r4
    17ec:	0000030b 	andeq	r0, r0, fp, lsl #6
    17f0:	0b3d2000 	bleq	f497f8 <__Stack_Size+0xf493f8>
    17f4:	4c010000 	stcmi	0, cr0, [r1], {-0}
    17f8:	00000000 	andeq	r0, r0, r0
    17fc:	00000050 	andeq	r0, r0, r0, asr r0
    1800:	06539c01 	ldrbeq	r9, [r3], -r1, lsl #24
    1804:	3a1c0000 	bcc	70180c <__Stack_Size+0x70140c>
    1808:	0100000d 	tsteq	r0, sp
    180c:	00003a4c 	andeq	r3, r0, ip, asr #20
    1810:	00033100 	andeq	r3, r3, r0, lsl #2
    1814:	69701d00 	ldmdbvs	r0!, {r8, sl, fp, ip}^
    1818:	4c01006e 	stcmi	0, cr0, [r1], {110}	; 0x6e
    181c:	0000005e 	andeq	r0, r0, lr, asr r0
    1820:	0000034f 	andeq	r0, r0, pc, asr #6
    1824:	000ada1c 	andeq	sp, sl, ip, lsl sl
    1828:	5e4c0100 	dvfple	f0, f4, f0
    182c:	70000000 	andvc	r0, r0, r0
    1830:	1c000003 	stcne	0, cr0, [r0], {3}
    1834:	00000b38 	andeq	r0, r0, r8, lsr fp
    1838:	003a4c01 	eorseq	r4, sl, r1, lsl #24
    183c:	03b80000 			; <UNDEFINED> instruction: 0x03b80000
    1840:	8f210000 	svchi	0x00210000
    1844:	0100000a 	tsteq	r0, sl
    1848:	00005e4c 	andeq	r5, r0, ip, asr #28
    184c:	00910200 	addseq	r0, r1, r0, lsl #4
    1850:	01006322 	tsteq	r0, r2, lsr #6
    1854:	00003a50 	andeq	r3, r0, r0, asr sl
    1858:	0003d600 	andeq	sp, r3, r0, lsl #12
    185c:	00002300 	andeq	r2, r0, r0, lsl #6
    1860:	04ce0000 	strbeq	r0, [lr], #0
    1864:	06160000 	ldreq	r0, [r6], -r0
    1868:	01240000 	teqeq	r4, r0
    186c:	00770252 	rsbseq	r0, r7, r2, asr r2
    1870:	02510124 	subseq	r0, r1, #36, 2
    1874:	01240079 	teqeq	r4, r9, ror r0
    1878:	00780250 	rsbseq	r0, r8, r0, asr r2
    187c:	00002300 	andeq	r2, r0, r0, lsl #6
    1880:	04ce0000 	strbeq	r0, [lr], #0
    1884:	06360000 	ldrteq	r0, [r6], -r0
    1888:	01240000 	teqeq	r4, r0
    188c:	007a0252 	rsbseq	r0, sl, r2, asr r2
    1890:	02510124 	subseq	r0, r1, #36, 2
    1894:	01240079 	teqeq	r4, r9, ror r0
    1898:	00780250 	rsbseq	r0, r8, r0, asr r2
    189c:	00002500 	andeq	r2, r0, r0, lsl #10
    18a0:	04ce0000 	strbeq	r0, [lr], #0
    18a4:	01240000 	teqeq	r4, r0
    18a8:	00770252 	rsbseq	r0, r7, r2, asr r2
    18ac:	02510124 	subseq	r0, r1, #36, 2
    18b0:	01240079 	teqeq	r4, r9, ror r0
    18b4:	00780250 	rsbseq	r0, r8, r0, asr r2
    18b8:	7b260000 	blvc	9818c0 <__Stack_Size+0x9814c0>
    18bc:	0100000a 	tsteq	r0, sl
    18c0:	00064c62 	andeq	r4, r6, r2, ror #24
    18c4:	00004808 	andeq	r4, r0, r8, lsl #16
    18c8:	209c0100 	addscs	r0, ip, r0, lsl #2
    18cc:	00000aa2 	andeq	r0, r0, r2, lsr #21
    18d0:	06946c01 	ldreq	r6, [r4], r1, lsl #24
    18d4:	00600800 	rsbeq	r0, r0, r0, lsl #16
    18d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    18dc:	00000686 	andeq	r0, r0, r6, lsl #13
    18e0:	000cb127 	andeq	fp, ip, r7, lsr #2
    18e4:	866d0100 	strbthi	r0, [sp], -r0, lsl #2
    18e8:	00000006 	andeq	r0, r0, r6
    18ec:	07040200 	streq	r0, [r4, -r0, lsl #4]
    18f0:	000003a6 	andeq	r0, r0, r6, lsr #7
    18f4:	0002af28 	andeq	sl, r2, r8, lsr #30
    18f8:	018d0100 	orreq	r0, sp, r0, lsl #2
    18fc:	00000686 	andeq	r0, r0, r6, lsl #13
    1900:	0006b701 	andeq	fp, r6, r1, lsl #14
    1904:	69702900 	ldmdbvs	r0!, {r8, fp, sp}^
    1908:	8d01006e 	stchi	0, cr0, [r1, #-440]	; 0xfffffe48
    190c:	0006b701 	andeq	fp, r6, r1, lsl #14
    1910:	0bf22a00 	bleq	ffc8c118 <BootRAM+0xebfc8b9>
    1914:	8f010000 	svchi	0x00010000
    1918:	00068601 	andeq	r8, r6, r1, lsl #12
    191c:	042b0000 	strteq	r0, [fp], #-0
    1920:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    1924:	0a352000 	beq	d4992c <__Stack_Size+0xd4952c>
    1928:	97010000 	strls	r0, [r1, -r0]
    192c:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
    1930:	00000018 	andeq	r0, r0, r8, lsl r0
    1934:	06f99c01 	ldrbteq	r9, [r9], r1, lsl #24
    1938:	ce2c0000 	cdpgt	0, 2, cr0, cr12, cr0, {0}
    193c:	fa000004 	blx	1954 <__Stack_Size+0x1554>
    1940:	12080006 	andne	r0, r8, #6
    1944:	01000000 	mrseq	r0, (UNDEF: 0)
    1948:	04f02d9d 	ldrbteq	r2, [r0], #3485	; 0xd9d
    194c:	2d010000 	stccs	0, cr0, [r1, #-0]
    1950:	000004e5 	andeq	r0, r0, r5, ror #9
    1954:	04da2e07 	ldrbeq	r2, [sl], #3591	; 0xe07
    1958:	0c000000 	stceq	0, cr0, [r0], {-0}
    195c:	00004001 	andeq	r4, r0, r1
    1960:	000a9720 	andeq	r9, sl, r0, lsr #14
    1964:	0ca40100 	stfeqs	f0, [r4]
    1968:	1c080007 	stcne	0, cr0, [r8], {7}
    196c:	01000000 	mrseq	r0, (UNDEF: 0)
    1970:	0007289c 	muleq	r7, ip, r8
    1974:	07142f00 	ldreq	r2, [r4, -r0, lsl #30]
    1978:	00080800 	andeq	r0, r8, r0, lsl #16
    197c:	141f0000 	ldrne	r0, [pc], #-0	; 1984 <__Stack_Size+0x1584>
    1980:	0100000b 	tsteq	r0, fp
    1984:	00003aa7 	andeq	r3, r0, r7, lsr #21
    1988:	0003ff00 	andeq	pc, r3, r0, lsl #30
    198c:	1b000000 	blne	1994 <__Stack_Size+0x1594>
    1990:	00000a6d 	andeq	r0, r0, sp, ror #20
    1994:	00b4b001 	adcseq	fp, r4, r1
    1998:	07280000 	streq	r0, [r8, -r0]!
    199c:	00140800 	andseq	r0, r4, r0, lsl #16
    19a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    19a4:	0000075f 	andeq	r0, r0, pc, asr r7
    19a8:	000d511c 	andeq	r5, sp, ip, lsl r1
    19ac:	3ab00100 	bcc	fec01db4 <BootRAM+0xdb72555>
    19b0:	12000000 	andne	r0, r0, #0
    19b4:	22000004 	andcs	r0, r0, #4
    19b8:	01007073 	tsteq	r0, r3, ror r0
    19bc:	00003ab1 			; <UNDEFINED> instruction: 0x00003ab1
    19c0:	00043300 	andeq	r3, r4, r0, lsl #6
    19c4:	f1300000 			; <UNDEFINED> instruction: 0xf1300000
    19c8:	0100000a 	tsteq	r0, sl
    19cc:	00073cba 			; <UNDEFINED> instruction: 0x00073cba
    19d0:	00001808 	andeq	r1, r0, r8, lsl #16
    19d4:	ad9c0100 	ldfges	f0, [ip]
    19d8:	1c000007 	stcne	0, cr0, [r0], {7}
    19dc:	00000d51 	andeq	r0, r0, r1, asr sp
    19e0:	003aba01 	eorseq	fp, sl, r1, lsl #20
    19e4:	04460000 	strbeq	r0, [r6], #-0
    19e8:	49040000 	stmdbmi	r4, {}	; <UNPREDICTABLE>
    19ec:	0100000d 	tsteq	r0, sp
    19f0:	0004bfbe 			; <UNDEFINED> instruction: 0x0004bfbe
    19f4:	0bc31f00 	bleq	ff0c95fc <BootRAM+0xe039d9d>
    19f8:	bf010000 	svclt	0x00010000
    19fc:	0000003a 	andeq	r0, r0, sl, lsr r0
    1a00:	00000467 	andeq	r0, r0, r7, ror #8
    1a04:	000cdf1f 	andeq	sp, ip, pc, lsl pc
    1a08:	83c10100 	bichi	r0, r1, #0, 2
    1a0c:	67000007 	strvs	r0, [r0, -r7]
    1a10:	00000004 	andeq	r0, r0, r4
    1a14:	000d7220 	andeq	r7, sp, r0, lsr #4
    1a18:	54de0100 	ldrbpl	r0, [lr], #256	; 0x100
    1a1c:	2c080007 	stccs	0, cr0, [r8], {7}
    1a20:	01000000 	mrseq	r0, (UNDEF: 0)
    1a24:	0007d09c 	muleq	r7, ip, r0
    1a28:	0bb82100 	bleq	fee09e30 <BootRAM+0xdd7a5d1>
    1a2c:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    1a30:	0000004c 	andeq	r0, r0, ip, asr #32
    1a34:	1e005001 	cdpne	0, 0, cr5, cr0, cr1, {0}
    1a38:	00000a47 	andeq	r0, r0, r7, asr #20
    1a3c:	06b7f001 	ldrteq	pc, [r7], r1	; <UNPREDICTABLE>
    1a40:	07800000 	streq	r0, [r0, r0]
    1a44:	00480800 	subeq	r0, r8, r0, lsl #16
    1a48:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a4c:	00000808 	andeq	r0, r0, r8, lsl #16
    1a50:	000ccd1f 	andeq	ip, ip, pc, lsl sp
    1a54:	b4f20100 	ldrbtlt	r0, [r2], #256	; 0x100
    1a58:	7a000000 	bvc	1a60 <__Stack_Size+0x1660>
    1a5c:	25000004 	strcs	r0, [r0, #-4]
    1a60:	080007b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl}
    1a64:	000007ad 	andeq	r0, r0, sp, lsr #15
    1a68:	01500124 	cmpeq	r0, r4, lsr #2
    1a6c:	31000030 	tstcc	r0, r0, lsr r0
    1a70:	0000073a 	andeq	r0, r0, sl, lsr r7
    1a74:	c8010f01 	stmdagt	r1, {r0, r8, r9, sl, fp}
    1a78:	6c080007 	stcvs	0, cr0, [r8], {7}
    1a7c:	01000000 	mrseq	r0, (UNDEF: 0)
    1a80:	00089f9c 	muleq	r8, ip, pc	; <UNPREDICTABLE>
    1a84:	0bda3200 	bleq	ff68e28c <BootRAM+0xe5fea2d>
    1a88:	0f010000 	svceq	0x00010000
    1a8c:	00089f01 	andeq	r9, r8, r1, lsl #30
    1a90:	33500100 	cmpcc	r0, #0, 2
    1a94:	00000d82 	andeq	r0, r0, r2, lsl #27
    1a98:	3a011001 	bcc	45aa4 <__Stack_Size+0x456a4>
    1a9c:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    1aa0:	33000004 	movwcc	r0, #4
    1aa4:	00000b62 	andeq	r0, r0, r2, ror #22
    1aa8:	3a011101 	bcc	45eb4 <__Stack_Size+0x45ab4>
    1aac:	05000000 	streq	r0, [r0, #-0]
    1ab0:	33000005 	movwcc	r0, #5
    1ab4:	00000bef 	andeq	r0, r0, pc, ror #23
    1ab8:	3a011201 	bcc	462c4 <__Stack_Size+0x45ec4>
    1abc:	3a000000 	bcc	1ac4 <__Stack_Size+0x16c4>
    1ac0:	33000005 	movwcc	r0, #5
    1ac4:	00000b78 	andeq	r0, r0, r8, ror fp
    1ac8:	3a011301 	bcc	466d4 <__Stack_Size+0x462d4>
    1acc:	72000000 	andvc	r0, r0, #0
    1ad0:	33000005 	movwcc	r0, #5
    1ad4:	00000b0d 	andeq	r0, r0, sp, lsl #22
    1ad8:	3a011401 	bcc	46ae4 <__Stack_Size+0x466e4>
    1adc:	af000000 	svcge	0x00000000
    1ae0:	34000005 	strcc	r0, [r0], #-5
    1ae4:	00000c56 	andeq	r0, r0, r6, asr ip
    1ae8:	a5011601 	strge	r1, [r1, #-1537]	; 0x601
    1aec:	80000008 	andhi	r0, r0, r8
    1af0:	7e8083da 	mcrvc	3, 4, r8, cr0, cr10, {6}
    1af4:	000b9c34 	andeq	r9, fp, r4, lsr ip
    1af8:	01170100 	tsteq	r7, r0, lsl #2
    1afc:	000008ab 	andeq	r0, r0, fp, lsr #17
    1b00:	8083c280 	addhi	ip, r3, r0, lsl #5
    1b04:	0413007e 	ldreq	r0, [r3], #-126	; 0x7e
    1b08:	00000288 	andeq	r0, r0, r8, lsl #5
    1b0c:	03590413 	cmpeq	r9, #318767104	; 0x13000000
    1b10:	04130000 	ldreq	r0, [r3], #-0
    1b14:	00000244 	andeq	r0, r0, r4, asr #4
    1b18:	000ba231 	andeq	sl, fp, r1, lsr r2
    1b1c:	01320100 	teqeq	r2, r0, lsl #2
    1b20:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
    1b24:	00000024 	andeq	r0, r0, r4, lsr #32
    1b28:	08d99c01 	ldmeq	r9, {r0, sl, fp, ip, pc}^
    1b2c:	9c340000 	ldcls	0, cr0, [r4], #-0
    1b30:	0100000b 	tsteq	r0, fp
    1b34:	08ab0133 	stmiaeq	fp!, {r0, r1, r4, r5, r8}
    1b38:	c2800000 	addgt	r0, r0, #0
    1b3c:	007e8083 	rsbseq	r8, lr, r3, lsl #1
    1b40:	000a2a20 	andeq	r2, sl, r0, lsr #20
    1b44:	58cb0100 	stmiapl	fp, {r8}^
    1b48:	28080008 	stmdacs	r8, {r3}
    1b4c:	01000000 	mrseq	r0, (UNDEF: 0)
    1b50:	0009429c 	muleq	r9, ip, r2
    1b54:	0d511c00 	ldcleq	12, cr1, [r1, #-0]
    1b58:	cb010000 	blgt	41b60 <__Stack_Size+0x41760>
    1b5c:	0000003a 	andeq	r0, r0, sl, lsr r0
    1b60:	000005dd 	ldrdeq	r0, [r0], -sp
    1b64:	0004c535 	andeq	ip, r4, r5, lsr r5
    1b68:	00085a00 	andeq	r5, r8, r0, lsl #20
    1b6c:	00013808 	andeq	r3, r1, r8, lsl #16
    1b70:	36d00100 	ldrbcc	r0, [r0], r0, lsl #2
    1b74:	08000866 	stmdaeq	r0, {r1, r2, r5, r6, fp}
    1b78:	00000b18 	andeq	r0, r0, r8, lsl fp
    1b7c:	00086a36 	andeq	r6, r8, r6, lsr sl
    1b80:	0008b108 	andeq	fp, r8, r8, lsl #2
    1b84:	086e3600 	stmdaeq	lr!, {r9, sl, ip, sp}^
    1b88:	0b1f0800 	bleq	7c3b90 <__Stack_Size+0x7c3790>
    1b8c:	72360000 	eorsvc	r0, r6, #0
    1b90:	53080008 	movwpl	r0, #32776	; 0x8008
    1b94:	37000006 	strcc	r0, [r0, -r6]
    1b98:	0800087c 	stmdaeq	r0, {r2, r3, r4, r5, r6, fp}
    1b9c:	0000075f 	andeq	r0, r0, pc, asr r7
    1ba0:	03500124 	cmpeq	r0, #36, 2
    1ba4:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    1ba8:	0ac43100 	beq	ff10dfb0 <BootRAM+0xe07e751>
    1bac:	3c010000 	stccc	0, cr0, [r1], {-0}
    1bb0:	00088001 	andeq	r8, r8, r1
    1bb4:	00001408 	andeq	r1, r0, r8, lsl #8
    1bb8:	6a9c0100 	bvs	fe701fc0 <BootRAM+0xd672761>
    1bbc:	34000009 	strcc	r0, [r0], #-9
    1bc0:	00000c56 	andeq	r0, r0, r6, asr ip
    1bc4:	a5013d01 	strge	r3, [r1, #-3329]	; 0xd01
    1bc8:	80000008 	andhi	r0, r0, r8
    1bcc:	7e8083da 	mcrvc	3, 4, r8, cr0, cr10, {6}
    1bd0:	0d633800 	stcleq	8, cr3, [r3, #-0]
    1bd4:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    1bd8:	0000b401 	andeq	fp, r0, r1, lsl #8
    1bdc:	00089400 	andeq	r9, r8, r0, lsl #8
    1be0:	00003408 	andeq	r3, r0, r8, lsl #8
    1be4:	a59c0100 	ldrge	r0, [ip, #256]	; 0x100
    1be8:	39000009 	stmdbcc	r0, {r0, r3}
    1bec:	00000b04 	andeq	r0, r0, r4, lsl #22
    1bf0:	3a014801 	bcc	53bfc <__Stack_Size+0x537fc>
    1bf4:	14000000 	strne	r0, [r0], #-0
    1bf8:	33000006 	movwcc	r0, #6
    1bfc:	00000b14 	andeq	r0, r0, r4, lsl fp
    1c00:	3a014901 	bcc	5400c <__Stack_Size+0x53c0c>
    1c04:	35000000 	strcc	r0, [r0, #-0]
    1c08:	00000006 	andeq	r0, r0, r6
    1c0c:	000b2838 	andeq	r2, fp, r8, lsr r8
    1c10:	01590100 	cmpeq	r9, r0, lsl #2
    1c14:	000000b4 	strheq	r0, [r0], -r4
    1c18:	00000000 	andeq	r0, r0, r0
    1c1c:	00000030 	andeq	r0, r0, r0, lsr r0
    1c20:	09e79c01 	stmibeq	r7!, {r0, sl, fp, ip, pc}^
    1c24:	04390000 	ldrteq	r0, [r9], #-0
    1c28:	0100000b 	tsteq	r0, fp
    1c2c:	003a0159 	eorseq	r0, sl, r9, asr r1
    1c30:	06550000 	ldrbeq	r0, [r5], -r0
    1c34:	6e3a0000 	cdpvs	0, 3, cr0, cr10, cr0, {0}
    1c38:	01590100 	cmpeq	r9, r0, lsl #2
    1c3c:	0000004c 	andeq	r0, r0, ip, asr #32
    1c40:	00000681 	andeq	r0, r0, r1, lsl #13
    1c44:	00000036 	andeq	r0, r0, r6, lsr r0
    1c48:	00096a00 	andeq	r6, r9, r0, lsl #20
    1c4c:	16380000 	ldrtne	r0, [r8], -r0
    1c50:	0100000d 	tsteq	r0, sp
    1c54:	00b40163 	adcseq	r0, r4, r3, ror #2
    1c58:	08c80000 	stmiaeq	r8, {}^	; <UNPREDICTABLE>
    1c5c:	004c0800 	subeq	r0, ip, r0, lsl #16
    1c60:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c64:	00000a5e 	andeq	r0, r0, lr, asr sl
    1c68:	000b4739 	andeq	r4, fp, r9, lsr r7
    1c6c:	01630100 	cmneq	r3, r0, lsl #2
    1c70:	0000003a 	andeq	r0, r0, sl, lsr r0
    1c74:	000006c5 	andeq	r0, r0, r5, asr #13
    1c78:	000c3132 	andeq	r3, ip, r2, lsr r1
    1c7c:	01630100 	cmneq	r3, r0, lsl #2
    1c80:	0000003a 	andeq	r0, r0, sl, lsr r0
    1c84:	3f335101 	svccc	0x00335101
    1c88:	0100000d 	tsteq	r0, sp
    1c8c:	0a5e0164 	beq	1782224 <__Stack_Size+0x1781e24>
    1c90:	06c50000 	strbeq	r0, [r5], r0
    1c94:	0a3b0000 	beq	ec1c9c <__Stack_Size+0xec189c>
    1c98:	0100000c 	tsteq	r0, ip
    1c9c:	006f0165 	rsbeq	r0, pc, r5, ror #2
    1ca0:	91020000 	mrsls	r0, (UNDEF: 2)
    1ca4:	0d8e3b68 	vstreq	d3, [lr, #416]	; 0x1a0
    1ca8:	66010000 	strvs	r0, [r1], -r0
    1cac:	00006f01 	andeq	r6, r0, r1, lsl #30
    1cb0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1cb4:	000b1433 	andeq	r1, fp, r3, lsr r4
    1cb8:	01680100 	cmneq	r8, r0, lsl #2
    1cbc:	0000003a 	andeq	r0, r0, sl, lsr r0
    1cc0:	000006e6 	andeq	r0, r0, r6, ror #13
    1cc4:	7f041300 	svcvc	0x00041300
    1cc8:	3c000000 	stccc	0, cr0, [r0], {-0}
    1ccc:	000004c5 	andeq	r0, r0, r5, asr #9
    1cd0:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
    1cd4:	0000000c 	andeq	r0, r0, ip
    1cd8:	7f3d9c01 	svcvc	0x003d9c01
    1cdc:	0100000b 	tsteq	r0, fp
    1ce0:	09200185 	stmdbeq	r0!, {r0, r2, r7, r8}
    1ce4:	00180800 	andseq	r0, r8, r0, lsl #16
    1ce8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1cec:	00068d18 	andeq	r8, r6, r8, lsl sp
    1cf0:	00093800 	andeq	r3, r9, r0, lsl #16
    1cf4:	00001208 	andeq	r1, r0, r8, lsl #4
    1cf8:	ab9c0100 	blge	fe702100 <BootRAM+0xd6728a1>
    1cfc:	1a00000a 	bne	1d2c <__Stack_Size+0x192c>
    1d00:	0000069e 	muleq	r0, lr, r6
    1d04:	00000704 	andeq	r0, r0, r4, lsl #14
    1d08:	0006aa3e 	andeq	sl, r6, lr, lsr sl
    1d0c:	00072200 	andeq	r2, r7, r0, lsl #4
    1d10:	8b380000 	blhi	e01d18 <__Stack_Size+0xe01918>
    1d14:	0100000b 	tsteq	r0, fp
    1d18:	06b70199 	ssateq	r0, #24, r9, lsl #3
    1d1c:	094c0000 	stmdbeq	ip, {}^	; <UNPREDICTABLE>
    1d20:	00100800 	andseq	r0, r0, r0, lsl #16
    1d24:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d28:	00000ad6 	ldrdeq	r0, [r0], -r6
    1d2c:	000d253f 	andeq	r2, sp, pc, lsr r5
    1d30:	019b0100 	orrseq	r0, fp, r0, lsl #2
    1d34:	00000ad6 	ldrdeq	r0, [r0], -r6
    1d38:	1ffff7e0 	svcne	0x00fff7e0
    1d3c:	57041300 	strpl	r1, [r4, -r0, lsl #6]
    1d40:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1d44:	000002ea 	andeq	r0, r0, sl, ror #5
    1d48:	b7019f01 	strlt	r9, [r1, -r1, lsl #30]
    1d4c:	5c000006 	stcpl	0, cr0, [r0], {6}
    1d50:	18080009 	stmdane	r8, {r0, r3}
    1d54:	01000000 	mrseq	r0, (UNDEF: 0)
    1d58:	000b079c 	muleq	fp, ip, r7
    1d5c:	0d253f00 	stceq	15, cr3, [r5, #-0]
    1d60:	a2010000 	andge	r0, r1, #0
    1d64:	000ad601 	andeq	sp, sl, r1, lsl #12
    1d68:	fff7e000 			; <UNDEFINED> instruction: 0xfff7e000
    1d6c:	5e40001f 	mcrpl	0, 2, r0, cr0, cr15, {0}
    1d70:	04000004 	streq	r0, [r0], #-4
    1d74:	0006b72c 	andeq	fp, r6, ip, lsr #14
    1d78:	c4030500 	strgt	r0, [r3], #-1280	; 0x500
    1d7c:	41200001 	teqmi	r0, r1
    1d80:	000003f3 	strdeq	r0, [r0], -r3
    1d84:	05418004 	strbeq	r8, [r1, #-4]
    1d88:	04000008 	streq	r0, [r0], #-8
    1d8c:	06580052 			; <UNDEFINED> instruction: 0x06580052
    1d90:	00040000 	andeq	r0, r4, r0
    1d94:	00000992 	muleq	r0, r2, r9
    1d98:	017e0104 	cmneq	lr, r4, lsl #2
    1d9c:	cd010000 	stcgt	0, cr0, [r1, #-0]
    1da0:	3200000d 	andcc	r0, r0, #13
    1da4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1da8:	00000002 	andeq	r0, r0, r2
    1dac:	92000000 	andls	r0, r0, #0
    1db0:	02000008 	andeq	r0, r0, #8
    1db4:	021c0504 	andseq	r0, ip, #4, 10	; 0x1000000
    1db8:	02020000 	andeq	r0, r2, #0
    1dbc:	0006c805 	andeq	ip, r6, r5, lsl #16
    1dc0:	06010200 	streq	r0, [r1], -r0, lsl #4
    1dc4:	00000674 	andeq	r0, r0, r4, ror r6
    1dc8:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    1dcc:	45270200 	strmi	r0, [r7, #-512]!	; 0x200
    1dd0:	02000000 	andeq	r0, r0, #0
    1dd4:	03a10704 			; <UNDEFINED> instruction: 0x03a10704
    1dd8:	75030000 	strvc	r0, [r3, #-0]
    1ddc:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    1de0:	00005728 	andeq	r5, r0, r8, lsr #14
    1de4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1de8:	000003fd 	strdeq	r0, [r0], -sp
    1dec:	00387503 	eorseq	r7, r8, r3, lsl #10
    1df0:	00682902 	rsbeq	r2, r8, r2, lsl #18
    1df4:	01020000 	mrseq	r0, (UNDEF: 2)
    1df8:	00067208 	andeq	r7, r6, r8, lsl #4
    1dfc:	02010400 	andeq	r0, r1, #0, 8
    1e00:	00008437 	andeq	r8, r0, r7, lsr r4
    1e04:	05ff0500 	ldrbeq	r0, [pc, #1280]!	; 230c <__Stack_Size+0x1f0c>
    1e08:	05000000 	streq	r0, [r0, #-0]
    1e0c:	0000076d 	andeq	r0, r0, sp, ror #14
    1e10:	59060001 	stmdbpl	r6, {r0}
    1e14:	02000004 	andeq	r0, r0, #4
    1e18:	00006f37 	andeq	r6, r0, r7, lsr pc
    1e1c:	5e040700 	cdppl	7, 0, cr0, cr4, cr0, {0}
    1e20:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1e24:	0000091b 	andeq	r0, r0, fp, lsl r9
    1e28:	d238030c 	eorsle	r0, r8, #12, 6	; 0x30000000
    1e2c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1e30:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    1e34:	004c5003 	subeq	r5, ip, r3
    1e38:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1e3c:	0000033f 	andeq	r0, r0, pc, lsr r3
    1e40:	004c5103 	subeq	r5, ip, r3, lsl #2
    1e44:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1e48:	0000158f 	andeq	r1, r0, pc, lsl #11
    1e4c:	004c5203 	subeq	r5, ip, r3, lsl #4
    1e50:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    1e54:	00000109 	andeq	r0, r0, r9, lsl #2
    1e58:	00e15303 	rsceq	r5, r1, r3, lsl #6
    1e5c:	00080000 	andeq	r0, r8, r0
    1e60:	00008f0a 	andeq	r8, r0, sl, lsl #30
    1e64:	0000e100 	andeq	lr, r0, r0, lsl #2
    1e68:	004c0b00 	subeq	r0, ip, r0, lsl #22
    1e6c:	07000000 	streq	r0, [r0, -r0]
    1e70:	0000d204 	andeq	sp, r0, r4, lsl #4
    1e74:	091c0600 	ldmdbeq	ip, {r9, sl}
    1e78:	54030000 	strpl	r0, [r3], #-0
    1e7c:	00000095 	muleq	r0, r5, r0
    1e80:	0057420c 	subseq	r4, r7, ip, lsl #4
    1e84:	16620302 	strbtne	r0, [r2], -r2, lsl #6
    1e88:	0d000001 	stceq	0, cr0, [r0, #-4]
    1e8c:	00306262 	eorseq	r6, r0, r2, ror #4
    1e90:	005e6503 	subseq	r6, lr, r3, lsl #10
    1e94:	0d000000 	stceq	0, cr0, [r0, #-0]
    1e98:	00316262 	eorseq	r6, r1, r2, ror #4
    1e9c:	005e6603 	subseq	r6, lr, r3, lsl #12
    1ea0:	00010000 	andeq	r0, r1, r0
    1ea4:	5f03020e 	svcpl	0x0003020e
    1ea8:	00000132 	andeq	r0, r0, r2, lsr r1
    1eac:	0300770f 	movweq	r7, #1807	; 0x70f
    1eb0:	00004c61 	andeq	r4, r0, r1, ror #24
    1eb4:	77620f00 	strbvc	r0, [r2, -r0, lsl #30]!
    1eb8:	f2680300 	vcgt.s32	d16, d8, d0
    1ebc:	00000000 	andeq	r0, r0, r0
    1ec0:	00042506 	andeq	r2, r4, r6, lsl #10
    1ec4:	16690300 	strbtne	r0, [r9], -r0, lsl #6
    1ec8:	08000001 	stmdaeq	r0, {r0}
    1ecc:	00000062 	andeq	r0, r0, r2, rrx
    1ed0:	ce6b031c 	mcrgt	3, 3, r0, cr11, cr12, {0}
    1ed4:	09000001 	stmdbeq	r0, {r0}
    1ed8:	00000580 	andeq	r0, r0, r0, lsl #11
    1edc:	005e6d03 	subseq	r6, lr, r3, lsl #26
    1ee0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1ee4:	0000023c 	andeq	r0, r0, ip, lsr r2
    1ee8:	005e6e03 	subseq	r6, lr, r3, lsl #28
    1eec:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1ef0:	0000043e 	andeq	r0, r0, lr, lsr r4
    1ef4:	01326f03 	teqeq	r2, r3, lsl #30
    1ef8:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1efc:	0000016e 	andeq	r0, r0, lr, ror #2
    1f00:	01327003 	teqeq	r2, r3
    1f04:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    1f08:	0000083d 	andeq	r0, r0, sp, lsr r8
    1f0c:	01327103 	teqeq	r2, r3, lsl #2
    1f10:	09060000 	stmdbeq	r6, {}	; <UNPREDICTABLE>
    1f14:	00000949 	andeq	r0, r0, r9, asr #18
    1f18:	005e7303 	subseq	r7, lr, r3, lsl #6
    1f1c:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    1f20:	000003c6 	andeq	r0, r0, r6, asr #7
    1f24:	005e7403 	subseq	r7, lr, r3, lsl #8
    1f28:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    1f2c:	000004d1 	ldrdeq	r0, [r0], -r1
    1f30:	005e7503 	subseq	r7, lr, r3, lsl #10
    1f34:	090a0000 	stmdbeq	sl, {}	; <UNPREDICTABLE>
    1f38:	00000892 	muleq	r0, r2, r8
    1f3c:	005e7603 	subseq	r7, lr, r3, lsl #12
    1f40:	090b0000 	stmdbeq	fp, {}	; <UNPREDICTABLE>
    1f44:	0000064c 	andeq	r0, r0, ip, asr #12
    1f48:	005e7703 	subseq	r7, lr, r3, lsl #14
    1f4c:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    1f50:	00000743 	andeq	r0, r0, r3, asr #14
    1f54:	00e77a03 	rsceq	r7, r7, r3, lsl #20
    1f58:	00100000 	andseq	r0, r0, r0
    1f5c:	00006306 	andeq	r6, r0, r6, lsl #6
    1f60:	3d7b0300 	ldclcc	3, cr0, [fp, #-0]
    1f64:	02000001 	andeq	r0, r0, #1
    1f68:	05450704 	strbeq	r0, [r5, #-1796]	; 0x704
    1f6c:	01040000 	mrseq	r0, (UNDEF: 4)
    1f70:	02012304 	andeq	r2, r1, #4, 6	; 0x10000000
    1f74:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    1f78:	0000000e 	andeq	r0, r0, lr
    1f7c:	000f5305 	andeq	r5, pc, r5, lsl #6
    1f80:	d9050100 	stmdble	r5, {r8}
    1f84:	0200000d 	andeq	r0, r0, #13
    1f88:	000ec405 	andeq	ip, lr, r5, lsl #8
    1f8c:	06000300 	streq	r0, [r0], -r0, lsl #6
    1f90:	00000ee8 	andeq	r0, r0, r8, ror #29
    1f94:	01e02304 	mvneq	r2, r4, lsl #6
    1f98:	f4080000 	vst4.8	{d0-d3}, [r8], r0
    1f9c:	0600000d 	streq	r0, [r0], -sp
    1fa0:	02612904 	rsbeq	r2, r1, #4, 18	; 0x10000
    1fa4:	81090000 	mrshi	r0, (UNDEF: 9)
    1fa8:	0400000f 	streq	r0, [r0], #-15
    1fac:	00005e2a 	andeq	r5, r0, sl, lsr #28
    1fb0:	0b090000 	bleq	241fb8 <__Stack_Size+0x241bb8>
    1fb4:	0400000e 	streq	r0, [r0], #-14
    1fb8:	00005e2b 	andeq	r5, r0, fp, lsr #28
    1fbc:	1a090100 	bne	2423c4 <__Stack_Size+0x241fc4>
    1fc0:	0400000e 	streq	r0, [r0], #-14
    1fc4:	00005e2c 	andeq	r5, r0, ip, lsr #28
    1fc8:	29090200 	stmdbcs	r9, {r9}
    1fcc:	0400000e 	streq	r0, [r0], #-14
    1fd0:	00005e2d 	andeq	r5, r0, sp, lsr #28
    1fd4:	3a090300 	bcc	242bdc <__Stack_Size+0x2427dc>
    1fd8:	0400000f 	streq	r0, [r0], #-15
    1fdc:	00005e2e 	andeq	r5, r0, lr, lsr #28
    1fe0:	ba090400 	blt	242fe8 <__Stack_Size+0x242be8>
    1fe4:	0400000d 	streq	r0, [r0], #-13
    1fe8:	00005e2f 	andeq	r5, r0, pc, lsr #28
    1fec:	06000500 	streq	r0, [r0], -r0, lsl #10
    1ff0:	00000df5 	strdeq	r0, [r0], -r5
    1ff4:	020c3004 	andeq	r3, ip, #4
    1ff8:	d3100000 	tstle	r0, #0
    1ffc:	0100000d 	tsteq	r0, sp
    2000:	02913204 	addseq	r3, r1, #4, 4	; 0x40000000
    2004:	62050000 	andvs	r0, r5, #0
    2008:	0000000f 	andeq	r0, r0, pc
    200c:	000f9505 	andeq	r9, pc, r5, lsl #10
    2010:	45110100 	ldrmi	r0, [r1, #-256]	; 0x100
    2014:	0200444e 	andeq	r4, r0, #1308622848	; 0x4e000000
    2018:	00008d05 	andeq	r8, r0, r5, lsl #26
    201c:	06000300 	streq	r0, [r0], -r0, lsl #6
    2020:	00000dd4 	ldrdeq	r0, [r0], -r4
    2024:	026c3704 	rsbeq	r3, ip, #4, 14	; 0x100000
    2028:	aa120000 	bge	482030 <__Stack_Size+0x481c30>
    202c:	01000000 	mrseq	r0, (UNDEF: 0)
    2030:	00097438 	andeq	r7, r9, r8, lsr r4
    2034:	00005c08 	andeq	r5, r0, r8, lsl #24
    2038:	139c0100 	orrsne	r0, ip, #0, 2
    203c:	00000534 	andeq	r0, r0, r4, lsr r5
    2040:	d0013f01 	andle	r3, r1, r1, lsl #30
    2044:	44080009 	strmi	r0, [r8], #-9
    2048:	01000000 	mrseq	r0, (UNDEF: 0)
    204c:	0002ef9c 	muleq	r2, ip, pc	; <UNPREDICTABLE>
    2050:	0f481400 	svceq	0x00481400
    2054:	40010000 	andmi	r0, r1, r0
    2058:	00005e01 	andeq	r5, r0, r1, lsl #28
    205c:	00075400 	andeq	r5, r7, r0, lsl #8
    2060:	09ec1500 	stmibeq	ip!, {r8, sl, ip}^
    2064:	05e00800 	strbeq	r0, [r0, #2048]!	; 0x800
    2068:	f4160000 			; <UNDEFINED> instruction: 0xf4160000
    206c:	e8080009 	stmda	r8, {r0, r3}
    2070:	16000005 	strne	r0, [r0], -r5
    2074:	08000a08 	stmdaeq	r0, {r3, r9, fp}
    2078:	000005ef 	andeq	r0, r0, pc, ror #11
    207c:	0eb11700 	cdpeq	7, 11, cr1, cr1, cr0, {0}
    2080:	57010000 	strpl	r0, [r1, -r0]
    2084:	00000001 	andeq	r0, r0, r1
    2088:	00000200 	andeq	r0, r0, r0, lsl #4
    208c:	189c0100 	ldmne	ip, {r8}
    2090:	00000e96 	muleq	r0, r6, lr
    2094:	8f015a01 	svchi	0x00015a01
    2098:	14000000 	strne	r0, [r0], #-0
    209c:	1808000a 	stmdane	r8, {r1, r3}
    20a0:	01000000 	mrseq	r0, (UNDEF: 0)
    20a4:	00032c9c 	muleq	r3, ip, ip
    20a8:	0f411900 	svceq	0x00411900
    20ac:	5a010000 	bpl	420b4 <__Stack_Size+0x41cb4>
    20b0:	00004c01 	andeq	r4, r0, r1, lsl #24
    20b4:	00077d00 	andeq	r7, r7, r0, lsl #26
    20b8:	79180000 	ldmdbvc	r8, {}	; <UNPREDICTABLE>
    20bc:	0100000e 	tsteq	r0, lr
    20c0:	008f0163 	addeq	r0, pc, r3, ror #2
    20c4:	0a2c0000 	beq	b020cc <__Stack_Size+0xb01ccc>
    20c8:	00180800 	andseq	r0, r8, r0, lsl #16
    20cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    20d0:	00000357 	andeq	r0, r0, r7, asr r3
    20d4:	000f4119 	andeq	r4, pc, r9, lsl r1	; <UNPREDICTABLE>
    20d8:	01630100 	cmneq	r3, r0, lsl #2
    20dc:	0000004c 	andeq	r0, r0, ip, asr #32
    20e0:	0000079e 	muleq	r0, lr, r7
    20e4:	0ea31800 	cdpeq	8, 10, cr1, cr3, cr0, {0}
    20e8:	6d010000 	stcvs	0, cr0, [r1, #-0]
    20ec:	00008f01 	andeq	r8, r0, r1, lsl #30
    20f0:	000a4400 	andeq	r4, sl, r0, lsl #8
    20f4:	00002808 	andeq	r2, r0, r8, lsl #16
    20f8:	829c0100 	addshi	r0, ip, #0, 2
    20fc:	19000003 	stmdbne	r0, {r0, r1}
    2100:	00000f41 	andeq	r0, r0, r1, asr #30
    2104:	4c016d01 	stcmi	13, cr6, [r1], {1}
    2108:	bf000000 	svclt	0x00000000
    210c:	00000007 	andeq	r0, r0, r7
    2110:	000e4818 	andeq	r4, lr, r8, lsl r8
    2114:	01770100 	cmneq	r7, r0, lsl #2
    2118:	0000008f 	andeq	r0, r0, pc, lsl #1
    211c:	08000a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp}
    2120:	00000034 	andeq	r0, r0, r4, lsr r0
    2124:	03ad9c01 			; <UNDEFINED> instruction: 0x03ad9c01
    2128:	41190000 	tstmi	r9, r0
    212c:	0100000f 	tsteq	r0, pc
    2130:	004c0177 	subeq	r0, ip, r7, ror r1
    2134:	07e00000 	strbeq	r0, [r0, r0]!
    2138:	13000000 	movwne	r0, #0
    213c:	00000e65 	andeq	r0, r0, r5, ror #28
    2140:	a0018001 	andge	r8, r1, r1
    2144:	5c08000a 	stcpl	0, cr0, [r8], {10}
    2148:	01000000 	mrseq	r0, (UNDEF: 0)
    214c:	0004059c 	muleq	r4, ip, r5
    2150:	00691a00 	rsbeq	r1, r9, r0, lsl #20
    2154:	05018101 	streq	r8, [r1, #-257]	; 0x101
    2158:	01000004 	tsteq	r0, r4
    215c:	1b000008 	blne	2184 <__Stack_Size+0x1d84>
    2160:	00000f6c 	andeq	r0, r0, ip, ror #30
    2164:	0c018201 	sfmeq	f0, 1, [r1], {1}
    2168:	1c000004 	stcne	0, cr0, [r0], {4}
    216c:	08000ac0 	stmdaeq	r0, {r6, r7, r9, fp}
    2170:	000005f6 	strdeq	r0, [r0], -r6
    2174:	000003f1 	strdeq	r0, [r0], -r1
    2178:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    217c:	1e000074 	mcrne	0, 0, r0, cr0, cr4, {3}
    2180:	08000ad6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, fp}
    2184:	0000060c 	andeq	r0, r0, ip, lsl #12
    2188:	0550011d 	ldrbeq	r0, [r0, #-285]	; 0x11d
    218c:	00750074 	rsbseq	r0, r5, r4, ror r0
    2190:	1f000022 	svcne	0x00000022
    2194:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2198:	04070074 	streq	r0, [r7], #-116	; 0x74
    219c:	0000003a 	andeq	r0, r0, sl, lsr r0
    21a0:	00034b20 	andeq	r4, r3, r0, lsr #22
    21a4:	844b0100 	strbhi	r0, [fp], #-256	; 0x100
    21a8:	fc000000 	stc2	0, cr0, [r0], {-0}
    21ac:	1008000a 	andne	r0, r8, sl
    21b0:	01000002 	tsteq	r0, r2
    21b4:	00047d9c 	muleq	r4, ip, sp
    21b8:	0f482100 	svceq	0x00482100
    21bc:	52010000 	andpl	r0, r1, #0
    21c0:	0000005e 	andeq	r0, r0, lr, asr r0
    21c4:	00000820 	andeq	r0, r0, r0, lsr #16
    21c8:	000b4215 	andeq	r4, fp, r5, lsl r2
    21cc:	00062708 	andeq	r2, r6, r8, lsl #14
    21d0:	0b461500 	bleq	11875d8 <__Stack_Size+0x11871d8>
    21d4:	062e0800 	strteq	r0, [lr], -r0, lsl #16
    21d8:	4e1c0000 	cdpmi	0, 1, cr0, cr12, cr0, {0}
    21dc:	3608000b 	strcc	r0, [r8], -fp
    21e0:	61000006 	tstvs	r0, r6
    21e4:	1d000004 	stcne	0, cr0, [r0, #-16]
    21e8:	0a035001 	beq	d61f4 <__Stack_Size+0xd5df4>
    21ec:	1500424d 	strne	r4, [r0, #-589]	; 0x24d
    21f0:	08000b86 	stmdaeq	r0, {r1, r2, r7, r8, r9, fp}
    21f4:	00000647 	andeq	r0, r0, r7, asr #12
    21f8:	000bb815 	andeq	fp, fp, r5, lsl r8
    21fc:	0003ad08 	andeq	sl, r3, r8, lsl #26
    2200:	0bf21500 	bleq	ffc87608 <BootRAM+0xebf7da9>
    2204:	06530800 	ldrbeq	r0, [r3], -r0, lsl #16
    2208:	22000000 	andcs	r0, r0, #0
    220c:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
    2210:	5e01a801 	cdppl	8, 0, cr10, cr1, cr1, {0}
    2214:	00000000 	andeq	r0, r0, r0
    2218:	0c000000 	stceq	0, cr0, [r0], {-0}
    221c:	01000000 	mrseq	r0, (UNDEF: 0)
    2220:	0f89139c 	svceq	0x0089139c
    2224:	ac010000 	stcge	0, cr0, [r1], {-0}
    2228:	00000001 	andeq	r0, r0, r1
    222c:	00000c00 	andeq	r0, r0, r0, lsl #24
    2230:	b89c0100 	ldmlt	ip, {r8}
    2234:	23000004 	movwcs	r0, #4
    2238:	00000edf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    223c:	5e01ac01 	cdppl	12, 0, cr10, cr1, cr1, {0}
    2240:	01000000 	mrseq	r0, (UNDEF: 0)
    2244:	e0240050 	eor	r0, r4, r0, asr r0
    2248:	0100000a 	tsteq	r0, sl
    224c:	008401b0 			; <UNDEFINED> instruction: 0x008401b0
    2250:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    2254:	000c0800 	andeq	r0, ip, r0, lsl #16
    2258:	9c010000 	stcls	0, cr0, [r1], {-0}
    225c:	000a1a25 	andeq	r1, sl, r5, lsr #20
    2260:	01b40100 			; <UNDEFINED> instruction: 0x01b40100
    2264:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
    2268:	00000004 	andeq	r0, r0, r4
    226c:	ff269c01 			; <UNDEFINED> instruction: 0xff269c01
    2270:	0100000d 	tsteq	r0, sp
    2274:	0004f126 	andeq	pc, r4, r6, lsr #2
    2278:	c0030500 	andgt	r0, r3, r0, lsl #10
    227c:	27200001 	strcs	r0, [r0, -r1]!
    2280:	0000003a 	andeq	r0, r0, sl, lsr r0
    2284:	000f7626 	andeq	r7, pc, r6, lsr #12
    2288:	f1270100 			; <UNDEFINED> instruction: 0xf1270100
    228c:	05000004 	streq	r0, [r0, #-4]
    2290:	0001bc03 	andeq	fp, r1, r3, lsl #24
    2294:	0ef92620 	cdpeq	6, 15, cr2, cr9, cr0, {1}
    2298:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    229c:	00000518 	andeq	r0, r0, r8, lsl r5
    22a0:	0a190305 	beq	642ebc <__Stack_Size+0x642abc>
    22a4:	61272000 	teqvs	r7, r0
    22a8:	28000002 	stmdacs	r0, {r1}
    22ac:	0000005e 	andeq	r0, r0, lr, asr r0
    22b0:	0000052e 	andeq	r0, r0, lr, lsr #10
    22b4:	0001d929 	andeq	sp, r1, r9, lsr #18
    22b8:	0007ff00 	andeq	pc, r7, r0, lsl #30
    22bc:	000dc226 	andeq	ip, sp, r6, lsr #4
    22c0:	3f2e0100 	svccc	0x002e0100
    22c4:	05000005 	streq	r0, [r0, #-5]
    22c8:	00021003 	andeq	r1, r2, r3
    22cc:	051d2720 	ldreq	r2, [sp, #-1824]	; 0x720
    22d0:	22260000 	eorcs	r0, r6, #0
    22d4:	0100000f 	tsteq	r0, pc
    22d8:	0004f130 	andeq	pc, r4, r0, lsr r1	; <UNPREDICTABLE>
    22dc:	14030500 	strne	r0, [r3], #-1280	; 0x500
    22e0:	2620000a 	strtcs	r0, [r0], -sl
    22e4:	00000f15 	andeq	r0, r0, r5, lsl pc
    22e8:	05663101 	strbeq	r3, [r6, #-257]!	; 0x101
    22ec:	03050000 	movweq	r0, #20480	; 0x5000
    22f0:	20000a12 	andcs	r0, r0, r2, lsl sl
    22f4:	00004c27 	andeq	r4, r0, r7, lsr #24
    22f8:	0f062600 	svceq	0x00062600
    22fc:	32010000 	andcc	r0, r1, #0
    2300:	00000566 	andeq	r0, r0, r6, ror #10
    2304:	0a100305 	beq	402f20 <__Stack_Size+0x402b20>
    2308:	a22a2000 	eorge	r2, sl, #0
    230c:	05000002 	streq	r0, [r0, #-2]
    2310:	00058722 	andeq	r8, r5, r2, lsr #14
    2314:	ce040700 	cdpgt	7, 0, cr0, cr4, cr0, {0}
    2318:	2b000001 	blcs	2324 <__Stack_Size+0x1f24>
    231c:	0000045e 	andeq	r0, r0, lr, asr r4
    2320:	04052c06 	streq	r2, [r5], #-3078	; 0xc06
    2324:	03050000 	movweq	r0, #20480	; 0x5000
    2328:	200001c4 	andcs	r0, r0, r4, asr #3
    232c:	000f322b 	andeq	r3, pc, fp, lsr #4
    2330:	af2a0100 	svcge	0x002a0100
    2334:	05000005 	streq	r0, [r0, #-5]
    2338:	000a1f03 	andeq	r1, sl, r3, lsl #30
    233c:	00842720 	addeq	r2, r4, r0, lsr #14
    2340:	562b0000 	strtpl	r0, [fp], -r0
    2344:	0100000e 	tsteq	r0, lr
    2348:	0005c529 	andeq	ip, r5, r9, lsr #10
    234c:	18030500 	stmdane	r3, {r8, sl}
    2350:	2720000a 	strcs	r0, [r0, -sl]!
    2354:	00000201 	andeq	r0, r0, r1, lsl #4
    2358:	000e872b 	andeq	r8, lr, fp, lsr #14
    235c:	db350100 	blle	d42764 <__Stack_Size+0xd42364>
    2360:	05000005 	streq	r0, [r0, #-5]
    2364:	0001cc03 	andeq	ip, r1, r3, lsl #24
    2368:	02912720 	addseq	r2, r1, #32, 14	; 0x800000
    236c:	a22c0000 	eorge	r0, ip, #0
    2370:	0700000b 	streq	r0, [r0, -fp]
    2374:	7c2d0107 	stfvcs	f0, [sp], #-28	; 0xffffffe4
    2378:	06000000 	streq	r0, [r0], -r0
    237c:	0ac42d81 	beq	ff10d988 <BootRAM+0xe07e129>
    2380:	f8070000 			; <UNDEFINED> instruction: 0xf8070000
    2384:	000d632e 	andeq	r6, sp, lr, lsr #6
    2388:	01020700 	tsteq	r2, r0, lsl #14
    238c:	00000084 	andeq	r0, r0, r4, lsl #1
    2390:	0000060c 	andeq	r0, r0, ip, lsl #12
    2394:	00003a0b 	andeq	r3, r0, fp, lsl #20
    2398:	162e0000 	strtne	r0, [lr], -r0
    239c:	0700000d 	streq	r0, [r0, -sp]
    23a0:	00840101 	addeq	r0, r4, r1, lsl #2
    23a4:	06270000 	strteq	r0, [r7], -r0
    23a8:	3a0b0000 	bcc	2c23b0 <__Stack_Size+0x2c1fb0>
    23ac:	0b000000 	bleq	23b4 <__Stack_Size+0x1fb4>
    23b0:	0000003a 	andeq	r0, r0, sl, lsr r0
    23b4:	0a972d00 	beq	fe5cd7bc <BootRAM+0xd53df5d>
    23b8:	fc070000 	stc2	0, cr0, [r7], {-0}
    23bc:	000b7f2c 	andeq	r7, fp, ip, lsr #30
    23c0:	01050700 	tsteq	r5, r0, lsl #14
    23c4:	000d722f 	andeq	r7, sp, pc, lsr #4
    23c8:	47ee0700 	strbmi	r0, [lr, r0, lsl #14]!
    23cc:	0b000006 	bleq	23ec <__Stack_Size+0x1fec>
    23d0:	0000004c 	andeq	r0, r0, ip, asr #32
    23d4:	0b8b3000 	bleq	fe2ce3dc <BootRAM+0xd23eb7d>
    23d8:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    23dc:	00040501 	andeq	r0, r4, r1, lsl #10
    23e0:	0c112c00 	ldceq	12, cr2, [r1], {-0}
    23e4:	04070000 	streq	r0, [r7], #-0
    23e8:	0c880001 	stceq	0, cr0, [r8], {1}
    23ec:	00040000 	andeq	r0, r4, r0
    23f0:	00000c7b 	andeq	r0, r0, fp, ror ip
    23f4:	017e0104 	cmneq	lr, r4, lsl #2
    23f8:	14010000 	strne	r0, [r1], #-0
    23fc:	32000011 	andcc	r0, r0, #17
    2400:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2404:	00000003 	andeq	r0, r0, r3
    2408:	b3000000 	movwlt	r0, #0
    240c:	0200000a 	andeq	r0, r0, #10
    2410:	021c0504 	andseq	r0, ip, #4, 10	; 0x1000000
    2414:	02020000 	andeq	r0, r2, #0
    2418:	0006c805 	andeq	ip, r6, r5, lsl #16
    241c:	06010200 	streq	r0, [r1], -r0, lsl #4
    2420:	00000674 	andeq	r0, r0, r4, ror r6
    2424:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    2428:	45240200 	strmi	r0, [r4, #-512]!	; 0x200
    242c:	02000000 	andeq	r0, r0, #0
    2430:	03a10704 			; <UNDEFINED> instruction: 0x03a10704
    2434:	75030000 	strvc	r0, [r3, #-0]
    2438:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    243c:	00005725 	andeq	r5, r0, r5, lsr #14
    2440:	07020200 	streq	r0, [r2, -r0, lsl #4]
    2444:	000003fd 	strdeq	r0, [r0], -sp
    2448:	00387503 	eorseq	r7, r8, r3, lsl #10
    244c:	00682602 	rsbeq	r2, r8, r2, lsl #12
    2450:	01020000 	mrseq	r0, (UNDEF: 2)
    2454:	00067208 	andeq	r7, r6, r8, lsl #4
    2458:	10300400 	eorsne	r0, r0, r0, lsl #8
    245c:	03010000 	movweq	r0, #4096	; 0x1000
    2460:	00008e16 	andeq	r8, r0, r6, lsl lr
    2464:	11270500 	teqne	r7, r0, lsl #10
    2468:	05000000 	streq	r0, [r0, #-0]
    246c:	00000ffb 	strdeq	r0, [r0], -fp
    2470:	10ce0501 	sbcne	r0, lr, r1, lsl #10
    2474:	00020000 	andeq	r0, r2, r0
    2478:	00103106 	andseq	r3, r0, r6, lsl #2
    247c:	6f1c0300 	svcvs	0x001c0300
    2480:	07000000 	streq	r0, [r0, -r0]
    2484:	00001203 	andeq	r1, r0, r3, lsl #4
    2488:	004c9b01 	subeq	r9, ip, r1, lsl #22
    248c:	b5010000 	strlt	r0, [r1, #-0]
    2490:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2494:	00001322 	andeq	r1, r0, r2, lsr #6
    2498:	005e9b01 	subseq	r9, lr, r1, lsl #22
    249c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    24a0:	00001263 	andeq	r1, r0, r3, ror #4
    24a4:	00002201 	andeq	r2, r0, r1, lsl #4
    24a8:	000c0000 	andeq	r0, ip, r0
    24ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    24b0:	000000d8 	ldrdeq	r0, [r0], -r8
    24b4:	0011f90a 	andseq	pc, r1, sl, lsl #18
    24b8:	4c220100 	stfmis	f0, [r2], #-0
    24bc:	01000000 	mrseq	r0, (UNDEF: 0)
    24c0:	610b0050 	qaddvs	r0, r0, fp
    24c4:	01000010 	tsteq	r0, r0, lsl r0
    24c8:	00004c2e 	andeq	r4, r0, lr, lsr #24
    24cc:	00000000 	andeq	r0, r0, r0
    24d0:	00000c00 	andeq	r0, r0, r0, lsl #24
    24d4:	099c0100 	ldmibeq	ip, {r8}
    24d8:	00001043 	andeq	r1, r0, r3, asr #32
    24dc:	00003a01 	andeq	r3, r0, r1, lsl #20
    24e0:	000c0000 	andeq	r0, ip, r0
    24e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    24e8:	00000110 	andeq	r0, r0, r0, lsl r1
    24ec:	0011f90a 	andseq	pc, r1, sl, lsl #18
    24f0:	4c3a0100 	ldfmis	f0, [sl], #-0
    24f4:	01000000 	mrseq	r0, (UNDEF: 0)
    24f8:	f10b0050 			; <UNDEFINED> instruction: 0xf10b0050
    24fc:	01000011 	tsteq	r0, r1, lsl r0
    2500:	00004c46 	andeq	r4, r0, r6, asr #24
    2504:	00000000 	andeq	r0, r0, r0
    2508:	00000c00 	andeq	r0, r0, r0, lsl #24
    250c:	0b9c0100 	bleq	fe702914 <BootRAM+0xd6730b5>
    2510:	000012ce 	andeq	r1, r0, lr, asr #5
    2514:	004c5201 	subeq	r5, ip, r1, lsl #4
    2518:	00000000 	andeq	r0, r0, r0
    251c:	000c0000 	andeq	r0, ip, r0
    2520:	9c010000 	stcls	0, cr0, [r1], {-0}
    2524:	00122709 	andseq	r2, r2, r9, lsl #14
    2528:	005e0100 	subseq	r0, lr, r0, lsl #2
    252c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2530:	01000000 	mrseq	r0, (UNDEF: 0)
    2534:	00015d9c 	muleq	r1, ip, sp
    2538:	11f90a00 	mvnsne	r0, r0, lsl #20
    253c:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    2540:	0000004c 	andeq	r0, r0, ip, asr #32
    2544:	0b005001 	bleq	16550 <__Stack_Size+0x16150>
    2548:	0000107a 	andeq	r1, r0, sl, ror r0
    254c:	004c6a01 	subeq	r6, ip, r1, lsl #20
    2550:	00000000 	andeq	r0, r0, r0
    2554:	000c0000 	andeq	r0, ip, r0
    2558:	9c010000 	stcls	0, cr0, [r1], {-0}
    255c:	00126b09 	andseq	r6, r2, r9, lsl #22
    2560:	00760100 	rsbseq	r0, r6, r0, lsl #2
    2564:	10000000 	andne	r0, r0, r0
    2568:	01000000 	mrseq	r0, (UNDEF: 0)
    256c:	0001959c 	muleq	r1, ip, r5
    2570:	11f90a00 	mvnsne	r0, r0, lsl #20
    2574:	76010000 	strvc	r0, [r1], -r0
    2578:	0000004c 	andeq	r0, r0, ip, asr #32
    257c:	0b005001 	bleq	16588 <__Stack_Size+0x16188>
    2580:	000011e7 	andeq	r1, r0, r7, ror #3
    2584:	004c8201 	subeq	r8, ip, r1, lsl #4
    2588:	00000000 	andeq	r0, r0, r0
    258c:	000c0000 	andeq	r0, ip, r0
    2590:	9c010000 	stcls	0, cr0, [r1], {-0}
    2594:	00132909 	andseq	r2, r3, r9, lsl #18
    2598:	008f0100 	addeq	r0, pc, r0, lsl #2
    259c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    25a0:	01000000 	mrseq	r0, (UNDEF: 0)
    25a4:	0001dc9c 	muleq	r1, ip, ip
    25a8:	13220c00 	teqne	r2, #0, 24
    25ac:	8f010000 	svchi	0x00010000
    25b0:	0000005e 	andeq	r0, r0, lr, asr r0
    25b4:	00000880 	andeq	r0, r0, r0, lsl #17
    25b8:	0011f90a 	andseq	pc, r1, sl, lsl #18
    25bc:	4c8f0100 	stfmis	f0, [pc], {0}
    25c0:	01000000 	mrseq	r0, (UNDEF: 0)
    25c4:	990d0051 	stmdbls	sp, {r0, r4, r6}
    25c8:	00000000 	andeq	r0, r0, r0
    25cc:	10000000 	andne	r0, r0, r0
    25d0:	01000000 	mrseq	r0, (UNDEF: 0)
    25d4:	0001f99c 	muleq	r1, ip, r9
    25d8:	00a90e00 	adceq	r0, r9, r0, lsl #28
    25dc:	08a10000 	stmiaeq	r1!, {}	; <UNPREDICTABLE>
    25e0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    25e4:	000010c4 	andeq	r1, r0, r4, asr #1
    25e8:	0000a801 	andeq	sl, r0, r1, lsl #16
    25ec:	001c0000 	andseq	r0, ip, r0
    25f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    25f4:	0000022d 	andeq	r0, r0, sp, lsr #4
    25f8:	0013220c 	andseq	r2, r3, ip, lsl #4
    25fc:	5ea80100 	fdvple	f0, f0, f0
    2600:	c2000000 	andgt	r0, r0, #0
    2604:	0c000008 	stceq	0, cr0, [r0], {8}
    2608:	0000110e 	andeq	r1, r0, lr, lsl #2
    260c:	004ca801 	subeq	sl, ip, r1, lsl #16
    2610:	08e30000 	stmiaeq	r3!, {}^	; <UNPREDICTABLE>
    2614:	0f000000 	svceq	0x00000000
    2618:	00001197 	muleq	r0, r7, r1
    261c:	004cb401 	subeq	fp, ip, r1, lsl #8
    2620:	00000000 	andeq	r0, r0, r0
    2624:	00120000 	andseq	r0, r2, r0
    2628:	9c010000 	stcls	0, cr0, [r1], {-0}
    262c:	00000256 	andeq	r0, r0, r6, asr r2
    2630:	0013220c 	andseq	r2, r3, ip, lsl #4
    2634:	5eb40100 	frdpls	f0, f4, f0
    2638:	04000000 	streq	r0, [r0], #-0
    263c:	00000009 	andeq	r0, r0, r9
    2640:	00131409 	andseq	r1, r3, r9, lsl #8
    2644:	1cc10100 	stfnee	f0, [r1], {0}
    2648:	2a08000d 	bcs	202684 <__Stack_Size+0x202284>
    264c:	01000000 	mrseq	r0, (UNDEF: 0)
    2650:	00029f9c 	muleq	r2, ip, pc	; <UNPREDICTABLE>
    2654:	13220c00 	teqne	r2, #0, 24
    2658:	c1010000 	mrsgt	r0, (UNDEF: 1)
    265c:	0000005e 	andeq	r0, r0, lr, asr r0
    2660:	00000925 	andeq	r0, r0, r5, lsr #18
    2664:	000ee10a 	andeq	lr, lr, sl, lsl #2
    2668:	4cc10100 	stfmie	f0, [r1], {0}
    266c:	01000000 	mrseq	r0, (UNDEF: 0)
    2670:	0d1c1051 	ldceq	0, cr1, [ip, #-324]	; 0xfffffebc
    2674:	002a0800 	eoreq	r0, sl, r0, lsl #16
    2678:	81110000 	tsthi	r1, r0
    267c:	01000004 	tsteq	r0, r4
    2680:	00004cc3 	andeq	r4, r0, r3, asr #25
    2684:	00530100 	subseq	r0, r3, r0, lsl #2
    2688:	10970900 	addsne	r0, r7, r0, lsl #18
    268c:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    2690:	00000000 	andeq	r0, r0, r0
    2694:	0000002a 	andeq	r0, r0, sl, lsr #32
    2698:	02e89c01 	rsceq	r9, r8, #256	; 0x100
    269c:	220c0000 	andcs	r0, ip, #0
    26a0:	01000013 	tsteq	r0, r3, lsl r0
    26a4:	00005ece 	andeq	r5, r0, lr, asr #29
    26a8:	00094600 	andeq	r4, r9, r0, lsl #12
    26ac:	0ee10a00 	vfmaeq.f32	s1, s2, s0
    26b0:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    26b4:	0000004c 	andeq	r0, r0, ip, asr #32
    26b8:	00105101 	andseq	r5, r0, r1, lsl #2
    26bc:	2a000000 	bcs	26c4 <__Stack_Size+0x22c4>
    26c0:	11000000 	mrsne	r0, (UNDEF: 0)
    26c4:	00000481 	andeq	r0, r0, r1, lsl #9
    26c8:	004cd001 	subeq	sp, ip, r1
    26cc:	53010000 	movwpl	r0, #4096	; 0x1000
    26d0:	e6090000 	str	r0, [r9], -r0
    26d4:	0100000f 	tsteq	r0, pc
    26d8:	000000db 	ldrdeq	r0, [r0], -fp
    26dc:	00002400 	andeq	r2, r0, r0, lsl #8
    26e0:	3e9c0100 	fmlcce	f0, f4, f0
    26e4:	0c000003 	stceq	0, cr0, [r0], {3}
    26e8:	00001322 	andeq	r1, r0, r2, lsr #6
    26ec:	005edb01 	subseq	sp, lr, r1, lsl #22
    26f0:	09670000 	stmdbeq	r7!, {}^	; <UNPREDICTABLE>
    26f4:	090a0000 	stmdbeq	sl, {}	; <UNPREDICTABLE>
    26f8:	01000011 	tsteq	r0, r1, lsl r0
    26fc:	00005edb 	ldrdeq	r5, [r0], -fp
    2700:	12510100 	subsne	r0, r1, #0, 2
    2704:	000012e6 	andeq	r1, r0, r6, ror #5
    2708:	004cdd01 	subeq	sp, ip, r1, lsl #26
    270c:	99130000 	ldmdbls	r3, {}	; <UNPREDICTABLE>
    2710:	00000000 	andeq	r0, r0, r0
    2714:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    2718:	01000002 	tsteq	r0, r2
    271c:	00a90ede 	ldrdeq	r0, [r9], lr	; <UNPREDICTABLE>
    2720:	09670000 	stmdbeq	r7!, {}^	; <UNPREDICTABLE>
    2724:	00000000 	andeq	r0, r0, r0
    2728:	0010fb0f 	andseq	pc, r0, pc, lsl #22
    272c:	4cf00100 	ldfmie	f0, [r0]
    2730:	00000000 	andeq	r0, r0, r0
    2734:	12000000 	andne	r0, r0, #0
    2738:	01000000 	mrseq	r0, (UNDEF: 0)
    273c:	0003679c 	muleq	r3, ip, r7
    2740:	13220c00 	teqne	r2, #0, 24
    2744:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    2748:	0000005e 	andeq	r0, r0, lr, asr r0
    274c:	00000988 	andeq	r0, r0, r8, lsl #19
    2750:	10070f00 	andne	r0, r7, r0, lsl #30
    2754:	fc010000 	stc2	0, cr0, [r1], {-0}
    2758:	0000004c 	andeq	r0, r0, ip, asr #32
    275c:	00000000 	andeq	r0, r0, r0
    2760:	00000012 	andeq	r0, r0, r2, lsl r0
    2764:	03909c01 	orrseq	r9, r0, #256	; 0x100
    2768:	220c0000 	andcs	r0, ip, #0
    276c:	01000013 	tsteq	r0, r3, lsl r0
    2770:	00005efc 	strdeq	r5, [r0], -ip
    2774:	0009a900 	andeq	sl, r9, r0, lsl #18
    2778:	d9140000 	ldmdble	r4, {}	; <UNPREDICTABLE>
    277c:	0100000f 	tsteq	r0, pc
    2780:	00000108 	andeq	r0, r0, r8, lsl #2
    2784:	001e0000 	andseq	r0, lr, r0
    2788:	9c010000 	stcls	0, cr0, [r1], {-0}
    278c:	000003d1 	ldrdeq	r0, [r0], -r1
    2790:	00132215 	andseq	r2, r3, r5, lsl r2
    2794:	01080100 	mrseq	r0, (UNDEF: 24)
    2798:	0000005e 	andeq	r0, r0, lr, asr r0
    279c:	000009ca 	andeq	r0, r0, sl, asr #19
    27a0:	00000010 	andeq	r0, r0, r0, lsl r0
    27a4:	00001e00 	andeq	r1, r0, r0, lsl #28
    27a8:	04811600 	streq	r1, [r1], #1536	; 0x600
    27ac:	0a010000 	beq	427b4 <__Stack_Size+0x423b4>
    27b0:	00004c01 	andeq	r4, r0, r1, lsl #24
    27b4:	0009eb00 	andeq	lr, r9, r0, lsl #22
    27b8:	14000000 	strne	r0, [r0], #-0
    27bc:	00000962 	andeq	r0, r0, r2, ror #18
    27c0:	46011401 	strmi	r1, [r1], -r1, lsl #8
    27c4:	1e08000d 	cdpne	0, 0, cr0, cr8, cr13, {0}
    27c8:	01000000 	mrseq	r0, (UNDEF: 0)
    27cc:	0004129c 	muleq	r4, ip, r2
    27d0:	13221500 	teqne	r2, #0, 10
    27d4:	14010000 	strne	r0, [r1], #-0
    27d8:	00005e01 	andeq	r5, r0, r1, lsl #28
    27dc:	000a1600 	andeq	r1, sl, r0, lsl #12
    27e0:	0d461000 	stcleq	0, cr1, [r6, #-0]
    27e4:	001e0800 	andseq	r0, lr, r0, lsl #16
    27e8:	81160000 	tsthi	r6, r0
    27ec:	01000004 	tsteq	r0, r4
    27f0:	004c0116 	subeq	r0, ip, r6, lsl r1
    27f4:	0a370000 	beq	dc27fc <__Stack_Size+0xdc23fc>
    27f8:	00000000 	andeq	r0, r0, r0
    27fc:	0011c214 	andseq	ip, r1, r4, lsl r2
    2800:	01200100 	teqeq	r0, r0, lsl #2
    2804:	00000000 	andeq	r0, r0, r0
    2808:	0000001e 	andeq	r0, r0, lr, lsl r0
    280c:	04399c01 	ldrteq	r9, [r9], #-3073	; 0xc01
    2810:	22150000 	andscs	r0, r5, #0
    2814:	01000013 	tsteq	r0, r3, lsl r0
    2818:	005e0120 	subseq	r0, lr, r0, lsr #2
    281c:	0a650000 	beq	1942824 <__Stack_Size+0x1942424>
    2820:	14000000 	strne	r0, [r0], #-0
    2824:	000011da 	ldrdeq	r1, [r0], -sl
    2828:	00012c01 	andeq	r2, r1, r1, lsl #24
    282c:	1c000000 	stcne	0, cr0, [r0], {-0}
    2830:	01000000 	mrseq	r0, (UNDEF: 0)
    2834:	0004609c 	muleq	r4, ip, r0
    2838:	13221500 	teqne	r2, #0, 10
    283c:	2c010000 	stccs	0, cr0, [r1], {-0}
    2840:	00005e01 	andeq	r5, r0, r1, lsl #28
    2844:	000a8600 	andeq	r8, sl, r0, lsl #12
    2848:	93140000 	tstls	r4, #0
    284c:	01000007 	tsteq	r0, r7
    2850:	0d640137 	stfeqe	f0, [r4, #-220]!	; 0xffffff24
    2854:	001c0800 	andseq	r0, ip, r0, lsl #16
    2858:	9c010000 	stcls	0, cr0, [r1], {-0}
    285c:	00000487 	andeq	r0, r0, r7, lsl #9
    2860:	00132215 	andseq	r2, r3, r5, lsl r2
    2864:	01370100 	teqeq	r7, r0, lsl #2
    2868:	0000005e 	andeq	r0, r0, lr, asr r0
    286c:	00000aa7 	andeq	r0, r0, r7, lsr #21
    2870:	12bf1400 	adcsne	r1, pc, #0, 8
    2874:	42010000 	andmi	r0, r1, #0
    2878:	00000001 	andeq	r0, r0, r1
    287c:	00001e00 	andeq	r1, r0, r0, lsl #28
    2880:	ae9c0100 	fmlgee	f0, f4, f0
    2884:	15000004 	strne	r0, [r0, #-4]
    2888:	00001322 	andeq	r1, r0, r2, lsr #6
    288c:	5e014201 	cdppl	2, 0, cr4, cr1, cr1, {0}
    2890:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    2894:	0000000a 	andeq	r0, r0, sl
    2898:	00115114 	andseq	r5, r1, r4, lsl r1
    289c:	014d0100 	mrseq	r0, (UNDEF: 93)
    28a0:	00000000 	andeq	r0, r0, r0
    28a4:	0000001e 	andeq	r0, r0, lr, lsl r0
    28a8:	04d59c01 	ldrbeq	r9, [r5], #3073	; 0xc01
    28ac:	22150000 	andscs	r0, r5, #0
    28b0:	01000013 	tsteq	r0, r3, lsl r0
    28b4:	005e014d 	subseq	r0, lr, sp, asr #2
    28b8:	0ae90000 	beq	ffa428c0 <BootRAM+0xe9b3061>
    28bc:	14000000 	strne	r0, [r0], #-0
    28c0:	00001174 	andeq	r1, r0, r4, ror r1
    28c4:	00015801 	andeq	r5, r1, r1, lsl #16
    28c8:	1c000000 	stcne	0, cr0, [r0], {-0}
    28cc:	01000000 	mrseq	r0, (UNDEF: 0)
    28d0:	0004fc9c 	muleq	r4, ip, ip
    28d4:	13221500 	teqne	r2, #0, 10
    28d8:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    28dc:	00005e01 	andeq	r5, r0, r1, lsl #28
    28e0:	000b0a00 	andeq	r0, fp, r0, lsl #20
    28e4:	b7170000 	ldrlt	r0, [r7, -r0]
    28e8:	0100000f 	tsteq	r0, pc
    28ec:	004c0163 	subeq	r0, ip, r3, ror #2
    28f0:	00000000 	andeq	r0, r0, r0
    28f4:	001a0000 	andseq	r0, sl, r0
    28f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    28fc:	00000527 	andeq	r0, r0, r7, lsr #10
    2900:	00132215 	andseq	r2, r3, r5, lsl r2
    2904:	01630100 	cmneq	r3, r0, lsl #2
    2908:	0000005e 	andeq	r0, r0, lr, asr r0
    290c:	00000b2b 	andeq	r0, r0, fp, lsr #22
    2910:	10691700 	rsbne	r1, r9, r0, lsl #14
    2914:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    2918:	00004c01 	andeq	r4, r0, r1, lsl #24
    291c:	00000000 	andeq	r0, r0, r0
    2920:	00001a00 	andeq	r1, r0, r0, lsl #20
    2924:	529c0100 	addspl	r0, ip, #0, 2
    2928:	15000005 	strne	r0, [r0, #-5]
    292c:	00001322 	andeq	r1, r0, r2, lsr #6
    2930:	5e016e01 	cdppl	14, 0, cr6, cr1, cr1, {0}
    2934:	4c000000 	stcmi	0, cr0, [r0], {-0}
    2938:	0000000b 	andeq	r0, r0, fp
    293c:	0011a114 	andseq	sl, r1, r4, lsl r1
    2940:	01790100 	cmneq	r9, r0, lsl #2
    2944:	00000000 	andeq	r0, r0, r0
    2948:	00000018 	andeq	r0, r0, r8, lsl r0
    294c:	05799c01 	ldrbeq	r9, [r9, #-3073]!	; 0xc01
    2950:	22150000 	andscs	r0, r5, #0
    2954:	01000013 	tsteq	r0, r3, lsl r0
    2958:	005e0179 	subseq	r0, lr, r9, ror r1
    295c:	0b6d0000 	bleq	1b42964 <__Stack_Size+0x1b42564>
    2960:	14000000 	strne	r0, [r0], #-0
    2964:	00001282 	andeq	r1, r0, r2, lsl #5
    2968:	00018401 	andeq	r8, r1, r1, lsl #8
    296c:	1c000000 	stcne	0, cr0, [r0], {-0}
    2970:	01000000 	mrseq	r0, (UNDEF: 0)
    2974:	0005a09c 	muleq	r5, ip, r0
    2978:	13221500 	teqne	r2, #0, 10
    297c:	84010000 	strhi	r0, [r1], #-0
    2980:	00005e01 	andeq	r5, r0, r1, lsl #28
    2984:	000b8e00 	andeq	r8, fp, r0, lsl #28
    2988:	a5140000 	ldrge	r0, [r4, #-0]
    298c:	01000010 	tsteq	r0, r0, lsl r0
    2990:	0000018f 	andeq	r0, r0, pc, lsl #3
    2994:	00200000 	eoreq	r0, r0, r0
    2998:	9c010000 	stcls	0, cr0, [r1], {-0}
    299c:	000005c7 	andeq	r0, r0, r7, asr #11
    29a0:	00132215 	andseq	r2, r3, r5, lsl r2
    29a4:	018f0100 	orreq	r0, pc, r0, lsl #2
    29a8:	0000005e 	andeq	r0, r0, lr, asr r0
    29ac:	00000baf 	andeq	r0, r0, pc, lsr #23
    29b0:	10151400 	andsne	r1, r5, r0, lsl #8
    29b4:	9a010000 	bls	429bc <__Stack_Size+0x425bc>
    29b8:	00000001 	andeq	r0, r0, r1
    29bc:	00002000 	andeq	r2, r0, r0
    29c0:	ee9c0100 	fmle	f0, f4, f0
    29c4:	15000005 	strne	r0, [r0, #-5]
    29c8:	00001322 	andeq	r1, r0, r2, lsr #6
    29cc:	5e019a01 	vmlapl.f32	s18, s2, s2
    29d0:	d0000000 	andle	r0, r0, r0
    29d4:	0000000b 	andeq	r0, r0, fp
    29d8:	00105414 	andseq	r5, r0, r4, lsl r4
    29dc:	01a50100 			; <UNDEFINED> instruction: 0x01a50100
    29e0:	08000d80 	stmdaeq	r0, {r7, r8, sl, fp}
    29e4:	00000020 	andeq	r0, r0, r0, lsr #32
    29e8:	06159c01 	ldreq	r9, [r5], -r1, lsl #24
    29ec:	22150000 	andscs	r0, r5, #0
    29f0:	01000013 	tsteq	r0, r3, lsl r0
    29f4:	005e01a5 	subseq	r0, lr, r5, lsr #3
    29f8:	0bf10000 	bleq	ffc42a00 <BootRAM+0xebb31a1>
    29fc:	14000000 	strne	r0, [r0], #-0
    2a00:	00001307 	andeq	r1, r0, r7, lsl #6
    2a04:	a001b001 	andge	fp, r1, r1
    2a08:	2008000d 	andcs	r0, r8, sp
    2a0c:	01000000 	mrseq	r0, (UNDEF: 0)
    2a10:	00063c9c 	muleq	r6, ip, ip
    2a14:	13221500 	teqne	r2, #0, 10
    2a18:	b0010000 	andlt	r0, r1, r0
    2a1c:	00005e01 	andeq	r5, r0, r1, lsl #28
    2a20:	000c1200 	andeq	r1, ip, r0, lsl #4
    2a24:	8a140000 	bhi	502a2c <__Stack_Size+0x50262c>
    2a28:	01000010 	tsteq	r0, r0, lsl r0
    2a2c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    2a30:	001e0000 	andseq	r0, lr, r0
    2a34:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a38:	00000673 	andeq	r0, r0, r3, ror r6
    2a3c:	00132215 	andseq	r2, r3, r5, lsl r2
    2a40:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
    2a44:	0000005e 	andeq	r0, r0, lr, asr r0
    2a48:	00000c33 	andeq	r0, r0, r3, lsr ip
    2a4c:	00103d15 	andseq	r3, r0, r5, lsl sp
    2a50:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
    2a54:	0000005e 	andeq	r0, r0, lr, asr r0
    2a58:	00000c54 	andeq	r0, r0, r4, asr ip
    2a5c:	10231700 	eorne	r1, r3, r0, lsl #14
    2a60:	c7010000 	strgt	r0, [r1, -r0]
    2a64:	00005e01 	andeq	r5, r0, r1, lsl #28
    2a68:	00000000 	andeq	r0, r0, r0
    2a6c:	00001200 	andeq	r1, r0, r0, lsl #4
    2a70:	9e9c0100 	fmllse	f0, f4, f0
    2a74:	15000006 	strne	r0, [r0, #-6]
    2a78:	00001322 	andeq	r1, r0, r2, lsr #6
    2a7c:	5e01c701 	cdppl	7, 0, cr12, cr1, cr1, {0}
    2a80:	75000000 	strvc	r0, [r0, #-0]
    2a84:	0000000c 	andeq	r0, r0, ip
    2a88:	00116814 	andseq	r6, r1, r4, lsl r8
    2a8c:	01d30100 	bicseq	r0, r3, r0, lsl #2
    2a90:	00000000 	andeq	r0, r0, r0
    2a94:	00000020 	andeq	r0, r0, r0, lsr #32
    2a98:	06d59c01 	ldrbeq	r9, [r5], r1, lsl #24
    2a9c:	22150000 	andscs	r0, r5, #0
    2aa0:	01000013 	tsteq	r0, r3, lsl r0
    2aa4:	005e01d3 	ldrsbeq	r0, [lr], #-19	; 0xffffffed
    2aa8:	0c960000 	ldceq	0, cr0, [r6], {0}
    2aac:	0f150000 	svceq	0x00150000
    2ab0:	01000012 	tsteq	r0, r2, lsl r0
    2ab4:	004c01d3 	ldrdeq	r0, [ip], #-19	; 0xffffffed
    2ab8:	0cb70000 	ldceq	0, cr0, [r7]
    2abc:	14000000 	strne	r0, [r0], #-0
    2ac0:	00001335 	andeq	r1, r0, r5, lsr r3
    2ac4:	0001df01 	andeq	sp, r1, r1, lsl #30
    2ac8:	20000000 	andcs	r0, r0, r0
    2acc:	01000000 	mrseq	r0, (UNDEF: 0)
    2ad0:	00070c9c 	muleq	r7, ip, ip
    2ad4:	13221500 	teqne	r2, #0, 10
    2ad8:	df010000 	svcle	0x00010000
    2adc:	00005e01 	andeq	r5, r0, r1, lsl #28
    2ae0:	000cd800 	andeq	sp, ip, r0, lsl #16
    2ae4:	120f1500 	andne	r1, pc, #0, 10
    2ae8:	df010000 	svcle	0x00010000
    2aec:	00004c01 	andeq	r4, r0, r1, lsl #24
    2af0:	000cf900 	andeq	pc, ip, r0, lsl #18
    2af4:	fb170000 	blx	5c2afe <__Stack_Size+0x5c26fe>
    2af8:	01000012 	tsteq	r0, r2, lsl r0
    2afc:	004c01ea 	subeq	r0, ip, sl, ror #3
    2b00:	0dc00000 	stcleq	0, cr0, [r0]
    2b04:	001c0800 	andseq	r0, ip, r0, lsl #16
    2b08:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b0c:	00000737 	andeq	r0, r0, r7, lsr r7
    2b10:	00132215 	andseq	r2, r3, r5, lsl r2
    2b14:	01ea0100 	mvneq	r0, r0, lsl #2
    2b18:	0000005e 	andeq	r0, r0, lr, asr r0
    2b1c:	00000d1a 	andeq	r0, r0, sl, lsl sp
    2b20:	10de1700 	sbcsne	r1, lr, r0, lsl #14
    2b24:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    2b28:	00004c01 	andeq	r4, r0, r1, lsl #24
    2b2c:	000ddc00 	andeq	sp, sp, r0, lsl #24
    2b30:	00001c08 	andeq	r1, r0, r8, lsl #24
    2b34:	629c0100 	addsvs	r0, ip, #0, 2
    2b38:	15000007 	strne	r0, [r0, #-7]
    2b3c:	00001322 	andeq	r1, r0, r2, lsr #6
    2b40:	5e01f501 	cfsh32pl	mvfx15, mvfx1, #1
    2b44:	3b000000 	blcc	2b4c <__Stack_Size+0x274c>
    2b48:	0000000d 	andeq	r0, r0, sp
    2b4c:	0011cd14 	andseq	ip, r1, r4, lsl sp
    2b50:	02010100 	andeq	r0, r1, #0, 2
    2b54:	08000df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp}
    2b58:	0000001c 	andeq	r0, r0, ip, lsl r0
    2b5c:	07979c01 	ldreq	r9, [r7, r1, lsl #24]
    2b60:	22150000 	andscs	r0, r5, #0
    2b64:	01000013 	tsteq	r0, r3, lsl r0
    2b68:	005e0201 	subseq	r0, lr, r1, lsl #4
    2b6c:	0d5c0000 	ldcleq	0, cr0, [ip, #-0]
    2b70:	83180000 	tsthi	r8, #0
    2b74:	01000010 	tsteq	r0, r0, lsl r0
    2b78:	004c0201 	subeq	r0, ip, r1, lsl #4
    2b7c:	51010000 	mrspl	r0, (UNDEF: 1)
    2b80:	12401400 	subne	r1, r0, #0, 8
    2b84:	0d010000 	stceq	0, cr0, [r1, #-0]
    2b88:	00000002 	andeq	r0, r0, r2
    2b8c:	00002600 	andeq	r2, r0, r0, lsl #12
    2b90:	e69c0100 	ldr	r0, [ip], r0, lsl #2
    2b94:	18000007 	stmdane	r0, {r0, r1, r2}
    2b98:	00001230 	andeq	r1, r0, r0, lsr r2
    2b9c:	e6020d01 	str	r0, [r2], -r1, lsl #26
    2ba0:	01000007 	tsteq	r0, r7
    2ba4:	10831550 	addne	r1, r3, r0, asr r5
    2ba8:	0d010000 	stceq	0, cr0, [r1, #-0]
    2bac:	00004c02 	andeq	r4, r0, r2, lsl #24
    2bb0:	000d7d00 	andeq	r7, sp, r0, lsl #26
    2bb4:	00001000 	andeq	r1, r0, r0
    2bb8:	00260000 	eoreq	r0, r6, r0
    2bbc:	4b160000 	blmi	582bc4 <__Stack_Size+0x5827c4>
    2bc0:	01000010 	tsteq	r0, r0, lsl r0
    2bc4:	004c020f 	subeq	r0, ip, pc, lsl #4
    2bc8:	0db70000 	ldceq	0, cr0, [r7]
    2bcc:	00000000 	andeq	r0, r0, r0
    2bd0:	003a0419 	eorseq	r0, sl, r9, lsl r4
    2bd4:	bd140000 	ldclt	0, cr0, [r4, #-0]
    2bd8:	01000007 	tsteq	r0, r7
    2bdc:	0e140219 	mrceq	2, 0, r0, cr4, cr9, {0}
    2be0:	00400800 	subeq	r0, r0, r0, lsl #16
    2be4:	9c010000 	stcls	0, cr0, [r1], {-0}
    2be8:	00000851 	andeq	r0, r0, r1, asr r8
    2bec:	00132215 	andseq	r2, r3, r5, lsl r2
    2bf0:	02190100 	andseq	r0, r9, #0, 2
    2bf4:	0000005e 	andeq	r0, r0, lr, asr r0
    2bf8:	00000de0 	andeq	r0, r0, r0, ror #27
    2bfc:	00108315 	andseq	r8, r0, r5, lsl r3
    2c00:	02190100 	andseq	r0, r9, #0, 2
    2c04:	0000004c 	andeq	r0, r0, ip, asr #32
    2c08:	00000e01 	andeq	r0, r0, r1, lsl #28
    2c0c:	000e1410 	andeq	r1, lr, r0, lsl r4
    2c10:	00004008 	andeq	r4, r0, r8
    2c14:	12301a00 	eorsne	r1, r0, #0, 20
    2c18:	1b010000 	blne	42c20 <__Stack_Size+0x42820>
    2c1c:	0007e602 	andeq	lr, r7, r2, lsl #12
    2c20:	1b520100 	blne	1483028 <__Stack_Size+0x1482c28>
    2c24:	000002a0 	andeq	r0, r0, r0, lsr #5
    2c28:	00104b16 	andseq	r4, r0, r6, lsl fp
    2c2c:	021b0100 	andseq	r0, fp, #0, 2
    2c30:	0000004c 	andeq	r0, r0, ip, asr #32
    2c34:	00000e22 	andeq	r0, r0, r2, lsr #28
    2c38:	17000000 	strne	r0, [r0, -r0]
    2c3c:	00001275 	andeq	r1, r0, r5, ror r2
    2c40:	4c022401 	cfstrsmi	mvf2, [r2], {1}
    2c44:	00000000 	andeq	r0, r0, r0
    2c48:	20000000 	andcs	r0, r0, r0
    2c4c:	01000000 	mrseq	r0, (UNDEF: 0)
    2c50:	00087c9c 	muleq	r8, ip, ip
    2c54:	13221500 	teqne	r2, #0, 10
    2c58:	24010000 	strcs	r0, [r1], #-0
    2c5c:	00005e02 	andeq	r5, r0, r2, lsl #28
    2c60:	000e5a00 	andeq	r5, lr, r0, lsl #20
    2c64:	50170000 	andspl	r0, r7, r0
    2c68:	01000012 	tsteq	r0, r2, lsl r0
    2c6c:	004c022f 	subeq	r0, ip, pc, lsr #4
    2c70:	00000000 	andeq	r0, r0, r0
    2c74:	00200000 	eoreq	r0, r0, r0
    2c78:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c7c:	000008a7 	andeq	r0, r0, r7, lsr #17
    2c80:	00132215 	andseq	r2, r3, r5, lsl r2
    2c84:	022f0100 	eoreq	r0, pc, #0, 2
    2c88:	0000005e 	andeq	r0, r0, lr, asr r0
    2c8c:	00000e7b 	andeq	r0, r0, fp, ror lr
    2c90:	10b31400 	adcsne	r1, r3, r0, lsl #8
    2c94:	3c010000 	stccc	0, cr0, [r1], {-0}
    2c98:	00000002 	andeq	r0, r0, r2
    2c9c:	00003800 	andeq	r3, r0, r0, lsl #16
    2ca0:	ee9c0100 	fmle	f0, f4, f0
    2ca4:	15000008 	strne	r0, [r0, #-8]
    2ca8:	00001322 	andeq	r1, r0, r2, lsr #6
    2cac:	5e023c01 	cdppl	12, 0, cr3, cr2, cr1, {0}
    2cb0:	9c000000 	stcls	0, cr0, [r0], {-0}
    2cb4:	1500000e 	strne	r0, [r0, #-14]
    2cb8:	000012b5 			; <UNDEFINED> instruction: 0x000012b5
    2cbc:	4c023c01 	stcmi	12, cr3, [r2], {1}
    2cc0:	bd000000 	stclt	0, cr0, [r0, #-0]
    2cc4:	1500000e 	strne	r0, [r0, #-14]
    2cc8:	00001142 	andeq	r1, r0, r2, asr #2
    2ccc:	4c023c01 	stcmi	12, cr3, [r2], {1}
    2cd0:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    2cd4:	0000000e 	andeq	r0, r0, lr
    2cd8:	0010ea14 	andseq	lr, r0, r4, lsl sl
    2cdc:	02480100 	subeq	r0, r8, #0, 2
    2ce0:	00000000 	andeq	r0, r0, r0
    2ce4:	00000020 	andeq	r0, r0, r0, lsr #32
    2ce8:	09259c01 	stmdbeq	r5!, {r0, sl, fp, ip, pc}
    2cec:	22150000 	andscs	r0, r5, #0
    2cf0:	01000013 	tsteq	r0, r3, lsl r0
    2cf4:	005e0248 	subseq	r0, lr, r8, asr #4
    2cf8:	0eff0000 	cdpeq	0, 15, cr0, cr15, cr0, {0}
    2cfc:	b5150000 	ldrlt	r0, [r5, #-0]
    2d00:	01000012 	tsteq	r0, r2, lsl r0
    2d04:	004c0248 	subeq	r0, ip, r8, asr #4
    2d08:	0f200000 	svceq	0x00200000
    2d0c:	14000000 	strne	r0, [r0], #-0
    2d10:	00000fc8 	andeq	r0, r0, r8, asr #31
    2d14:	00025401 	andeq	r5, r2, r1, lsl #8
    2d18:	20000000 	andcs	r0, r0, r0
    2d1c:	01000000 	mrseq	r0, (UNDEF: 0)
    2d20:	00095c9c 	muleq	r9, ip, ip
    2d24:	13221500 	teqne	r2, #0, 10
    2d28:	54010000 	strpl	r0, [r1], #-0
    2d2c:	00005e02 	andeq	r5, r0, r2, lsl #28
    2d30:	000f4100 	andeq	r4, pc, r0, lsl #2
    2d34:	11421500 	cmpne	r2, r0, lsl #10
    2d38:	54010000 	strpl	r0, [r1], #-0
    2d3c:	00004c02 	andeq	r4, r0, r2, lsl #24
    2d40:	000f6200 	andeq	r6, pc, r0, lsl #4
    2d44:	d5170000 	ldrle	r0, [r7, #-0]
    2d48:	01000012 	tsteq	r0, r2, lsl r0
    2d4c:	004c025f 	subeq	r0, ip, pc, asr r2
    2d50:	00000000 	andeq	r0, r0, r0
    2d54:	001c0000 	andseq	r0, ip, r0
    2d58:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d5c:	00000987 	andeq	r0, r0, r7, lsl #19
    2d60:	00132215 	andseq	r2, r3, r5, lsl r2
    2d64:	025f0100 	subseq	r0, pc, #0, 2
    2d68:	0000005e 	andeq	r0, r0, lr, asr r0
    2d6c:	00000f83 	andeq	r0, r0, r3, lsl #31
    2d70:	11861700 	orrne	r1, r6, r0, lsl #14
    2d74:	6a010000 	bvs	42d7c <__Stack_Size+0x4297c>
    2d78:	00004c02 	andeq	r4, r0, r2, lsl #24
    2d7c:	00000000 	andeq	r0, r0, r0
    2d80:	00001c00 	andeq	r1, r0, r0, lsl #24
    2d84:	b29c0100 	addslt	r0, ip, #0, 2
    2d88:	15000009 	strne	r0, [r0, #-9]
    2d8c:	00001322 	andeq	r1, r0, r2, lsr #6
    2d90:	5e026a01 	vmlapl.f32	s12, s4, s2
    2d94:	a4000000 	strge	r0, [r0], #-0
    2d98:	0000000f 	andeq	r0, r0, pc
    2d9c:	0011b014 	andseq	fp, r1, r4, lsl r0
    2da0:	02760100 	rsbseq	r0, r6, #0, 2
    2da4:	00000000 	andeq	r0, r0, r0
    2da8:	000000a8 	andeq	r0, r0, r8, lsr #1
    2dac:	0a599c01 	beq	1669db8 <__Stack_Size+0x16699b8>
    2db0:	22150000 	andscs	r0, r5, #0
    2db4:	01000013 	tsteq	r0, r3, lsl r0
    2db8:	005e0276 	subseq	r0, lr, r6, ror r2
    2dbc:	0fc50000 	svceq	0x00c50000
    2dc0:	09150000 	ldmdbeq	r5, {}	; <UNPREDICTABLE>
    2dc4:	01000011 	tsteq	r0, r1, lsl r0
    2dc8:	005e0276 	subseq	r0, lr, r6, ror r2
    2dcc:	100a0000 	andne	r0, sl, r0
    2dd0:	83150000 	tsthi	r5, #0
    2dd4:	01000010 	tsteq	r0, r0, lsl r0
    2dd8:	004c0276 	subeq	r0, ip, r6, ror r2
    2ddc:	104f0000 	subne	r0, pc, r0
    2de0:	001c0000 	andseq	r0, ip, r0
    2de4:	3a000000 	bcc	2dec <__Stack_Size+0x29ec>
    2de8:	2c000000 	stccs	0, cr0, [r0], {-0}
    2dec:	1600000a 	strne	r0, [r0], -sl
    2df0:	00001230 	andeq	r1, r0, r0, lsr r2
    2df4:	e6027801 	str	r7, [r2], -r1, lsl #16
    2df8:	7b000007 	blvc	2e1c <__Stack_Size+0x2a1c>
    2dfc:	1b000010 	blne	2e44 <__Stack_Size+0x2a44>
    2e00:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    2e04:	00104b16 	andseq	r4, r0, r6, lsl fp
    2e08:	02780100 	rsbseq	r0, r8, #0, 2
    2e0c:	0000004c 	andeq	r0, r0, ip, asr #32
    2e10:	00001099 	muleq	r0, r9, r0
    2e14:	d01b0000 	andsle	r0, fp, r0
    2e18:	16000002 	strne	r0, [r0], -r2
    2e1c:	00001230 	andeq	r1, r0, r0, lsr r2
    2e20:	e6027801 	str	r7, [r2], -r1, lsl #16
    2e24:	d1000007 	tstle	r0, r7
    2e28:	1b000010 	blne	2e70 <__Stack_Size+0x2a70>
    2e2c:	000002e8 	andeq	r0, r0, r8, ror #5
    2e30:	00104b16 	andseq	r4, r0, r6, lsl fp
    2e34:	02780100 	rsbseq	r0, r8, #0, 2
    2e38:	0000004c 	andeq	r0, r0, ip, asr #32
    2e3c:	000010ef 	andeq	r1, r0, pc, ror #1
    2e40:	14000000 	strne	r0, [r0], #-0
    2e44:	000012a3 	andeq	r1, r0, r3, lsr #5
    2e48:	00028201 	andeq	r8, r2, r1, lsl #4
    2e4c:	5c000000 	stcpl	0, cr0, [r0], {-0}
    2e50:	01000000 	mrseq	r0, (UNDEF: 0)
    2e54:	000ad09c 	muleq	sl, ip, r0
    2e58:	13221500 	teqne	r2, #0, 10
    2e5c:	82010000 	andhi	r0, r1, #0
    2e60:	00005e02 	andeq	r5, r0, r2, lsl #28
    2e64:	00112700 	andseq	r2, r1, r0, lsl #14
    2e68:	11091500 	tstne	r9, r0, lsl #10
    2e6c:	82010000 	andhi	r0, r1, #0
    2e70:	00005e02 	andeq	r5, r0, r2, lsl #28
    2e74:	00116100 	andseq	r6, r1, r0, lsl #2
    2e78:	10831500 	addne	r1, r3, r0, lsl #10
    2e7c:	82010000 	andhi	r0, r1, #0
    2e80:	00004c02 	andeq	r4, r0, r2, lsl #24
    2e84:	00118d00 	andseq	r8, r1, r0, lsl #26
    2e88:	00001000 	andeq	r1, r0, r0
    2e8c:	00380000 	eorseq	r0, r8, r0
    2e90:	30160000 	andscc	r0, r6, r0
    2e94:	01000012 	tsteq	r0, r2, lsl r0
    2e98:	07e60284 	strbeq	r0, [r6, r4, lsl #5]!
    2e9c:	11b90000 			; <UNDEFINED> instruction: 0x11b90000
    2ea0:	081b0000 	ldmdaeq	fp, {}	; <UNPREDICTABLE>
    2ea4:	16000003 	strne	r0, [r0], -r3
    2ea8:	0000104b 	andeq	r1, r0, fp, asr #32
    2eac:	4c028401 	cfstrsmi	mvf8, [r2], {1}
    2eb0:	cc000000 	stcgt	0, cr0, [r0], {-0}
    2eb4:	00000011 	andeq	r0, r0, r1, lsl r0
    2eb8:	41140000 	tstmi	r4, r0
    2ebc:	01000013 	tsteq	r0, r3, lsl r0
    2ec0:	0000028e 	andeq	r0, r0, lr, lsl #5
    2ec4:	005c0000 	subseq	r0, ip, r0
    2ec8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ecc:	00000b47 	andeq	r0, r0, r7, asr #22
    2ed0:	00132215 	andseq	r2, r3, r5, lsl r2
    2ed4:	028e0100 	addeq	r0, lr, #0, 2
    2ed8:	0000005e 	andeq	r0, r0, lr, asr r0
    2edc:	00001204 	andeq	r1, r0, r4, lsl #4
    2ee0:	00110915 	andseq	r0, r1, r5, lsl r9
    2ee4:	028e0100 	addeq	r0, lr, #0, 2
    2ee8:	0000005e 	andeq	r0, r0, lr, asr r0
    2eec:	0000123e 	andeq	r1, r0, lr, lsr r2
    2ef0:	00108315 	andseq	r8, r0, r5, lsl r3
    2ef4:	028e0100 	addeq	r0, lr, #0, 2
    2ef8:	0000004c 	andeq	r0, r0, ip, asr #32
    2efc:	0000126a 	andeq	r1, r0, sl, ror #4
    2f00:	00000010 	andeq	r0, r0, r0, lsl r0
    2f04:	00003800 	andeq	r3, r0, r0, lsl #16
    2f08:	12301600 	eorsne	r1, r0, #0, 12
    2f0c:	90010000 	andls	r0, r1, r0
    2f10:	0007e602 	andeq	lr, r7, r2, lsl #12
    2f14:	00129600 	andseq	r9, r2, r0, lsl #12
    2f18:	03201b00 	teqeq	r0, #0, 22
    2f1c:	4b160000 	blmi	582f24 <__Stack_Size+0x582b24>
    2f20:	01000010 	tsteq	r0, r0, lsl r0
    2f24:	004c0290 	umaaleq	r0, ip, r0, r2
    2f28:	12a90000 	adcne	r0, r9, #0
    2f2c:	00000000 	andeq	r0, r0, r0
    2f30:	12151700 	andsne	r1, r5, #0, 14
    2f34:	9a010000 	bls	42f3c <__Stack_Size+0x42b3c>
    2f38:	00004c02 	andeq	r4, r0, r2, lsl #24
    2f3c:	00000000 	andeq	r0, r0, r0
    2f40:	00002000 	andeq	r2, r0, r0
    2f44:	729c0100 	addsvc	r0, ip, #0, 2
    2f48:	1500000b 	strne	r0, [r0, #-11]
    2f4c:	00001322 	andeq	r1, r0, r2, lsr #6
    2f50:	5e029a01 	vmlapl.f32	s18, s4, s2
    2f54:	e1000000 	mrs	r0, (UNDEF: 0)
    2f58:	00000012 	andeq	r0, r0, r2, lsl r0
    2f5c:	00129117 	andseq	r9, r2, r7, lsl r1
    2f60:	02a60100 	adceq	r0, r6, #0, 2
    2f64:	0000004c 	andeq	r0, r0, ip, asr #32
    2f68:	00000000 	andeq	r0, r0, r0
    2f6c:	00000020 	andeq	r0, r0, r0, lsr #32
    2f70:	0b9d9c01 	bleq	fe769f7c <BootRAM+0xd6da71d>
    2f74:	22150000 	andscs	r0, r5, #0
    2f78:	01000013 	tsteq	r0, r3, lsl r0
    2f7c:	005e02a6 	subseq	r0, lr, r6, lsr #5
    2f80:	13020000 	movwne	r0, #8192	; 0x2000
    2f84:	17000000 	strne	r0, [r0, -r0]
    2f88:	00001133 	andeq	r1, r0, r3, lsr r1
    2f8c:	8e02b201 	cdphi	2, 0, cr11, cr2, cr1, {0}
    2f90:	00000000 	andeq	r0, r0, r0
    2f94:	44000000 	strmi	r0, [r0], #-0
    2f98:	01000000 	mrseq	r0, (UNDEF: 0)
    2f9c:	000bc89c 	muleq	fp, ip, r8
    2fa0:	13221500 	teqne	r2, #0, 10
    2fa4:	b2010000 	andlt	r0, r1, #0
    2fa8:	00005e02 	andeq	r5, r0, r2, lsl #28
    2fac:	00132300 	andseq	r2, r3, r0, lsl #6
    2fb0:	a8140000 	ldmdage	r4, {}	; <UNPREDICTABLE>
    2fb4:	0100000f 	tsteq	r0, pc
    2fb8:	000002c3 	andeq	r0, r0, r3, asr #5
    2fbc:	003a0000 	eorseq	r0, sl, r0
    2fc0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2fc4:	00000bfd 	strdeq	r0, [r0], -sp
    2fc8:	00132215 	andseq	r2, r3, r5, lsl r2
    2fcc:	02c30100 	sbceq	r0, r3, #0, 2
    2fd0:	0000005e 	andeq	r0, r0, lr, asr r0
    2fd4:	00001344 	andeq	r1, r0, r4, asr #6
    2fd8:	00110918 	andseq	r0, r1, r8, lsl r9
    2fdc:	02c30100 	sbceq	r0, r3, #0, 2
    2fe0:	0000005e 	andeq	r0, r0, lr, asr r0
    2fe4:	17005101 	strne	r5, [r0, -r1, lsl #2]
    2fe8:	00001161 	andeq	r1, r0, r1, ror #2
    2fec:	4c02d601 	stcmi	6, cr13, [r2], {1}
    2ff0:	00000000 	andeq	r0, r0, r0
    2ff4:	06000000 	streq	r0, [r0], -r0
    2ff8:	01000000 	mrseq	r0, (UNDEF: 0)
    2ffc:	000c449c 	muleq	ip, ip, r4
    3000:	68621d00 	stmdavs	r2!, {r8, sl, fp, ip}^
    3004:	02d60100 	sbcseq	r0, r6, #0, 2
    3008:	0000005e 	andeq	r0, r0, lr, asr r0
    300c:	0000137e 	andeq	r1, r0, lr, ror r3
    3010:	006c621e 	rsbeq	r6, ip, lr, lsl r2
    3014:	5e02d601 	cfmadd32pl	mvax0, mvfx13, mvfx2, mvfx1
    3018:	01000000 	mrseq	r0, (UNDEF: 0)
    301c:	10d91651 	sbcsne	r1, r9, r1, asr r6
    3020:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    3024:	00004c02 	andeq	r4, r0, r2, lsl #24
    3028:	00139f00 	andseq	r9, r3, r0, lsl #30
    302c:	371f0000 	ldrcc	r0, [pc, -r0]
    3030:	01000012 	tsteq	r0, r2, lsl r0
    3034:	004c02e3 	subeq	r0, ip, r3, ror #5
    3038:	00000000 	andeq	r0, r0, r0
    303c:	000a0000 	andeq	r0, sl, r0
    3040:	9c010000 	stcls	0, cr0, [r1], {-0}
    3044:	00114c15 	andseq	r4, r1, r5, lsl ip
    3048:	02e30100 	rsceq	r0, r3, #0, 2
    304c:	0000004c 	andeq	r0, r0, ip, asr #32
    3050:	000013d8 	ldrdeq	r1, [r0], -r8
    3054:	00125d16 	andseq	r5, r2, r6, lsl sp
    3058:	02e50100 	rsceq	r0, r5, #0, 2
    305c:	0000005e 	andeq	r0, r0, lr, asr r0
    3060:	000013f9 	strdeq	r1, [r0], -r9
    3064:	0010d916 	andseq	sp, r0, r6, lsl r9
    3068:	02e60100 	rsceq	r0, r6, #0, 2
    306c:	0000004c 	andeq	r0, r0, ip, asr #32
    3070:	0000140c 	andeq	r1, r0, ip, lsl #8
    3074:	01d80000 	bicseq	r0, r8, r0
    3078:	00040000 	andeq	r0, r4, r0
    307c:	00000e70 	andeq	r0, r0, r0, ror lr
    3080:	017e0104 	cmneq	lr, r4, lsl #2
    3084:	86010000 	strhi	r0, [r1], -r0
    3088:	32000013 	andcc	r0, r0, #19
    308c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3090:	00000005 	andeq	r0, r0, r5
    3094:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    3098:	0200000f 	andeq	r0, r0, #15
    309c:	021c0504 	andseq	r0, ip, #4, 10	; 0x1000000
    30a0:	02020000 	andeq	r0, r2, #0
    30a4:	0006c805 	andeq	ip, r6, r5, lsl #16
    30a8:	06010200 	streq	r0, [r1], -r0, lsl #4
    30ac:	00000674 	andeq	r0, r0, r4, ror r6
    30b0:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    30b4:	45240200 	strmi	r0, [r4, #-512]!	; 0x200
    30b8:	02000000 	andeq	r0, r0, #0
    30bc:	03a10704 			; <UNDEFINED> instruction: 0x03a10704
    30c0:	75030000 	strvc	r0, [r3, #-0]
    30c4:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    30c8:	00005725 	andeq	r5, r0, r5, lsr #14
    30cc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    30d0:	000003fd 	strdeq	r0, [r0], -sp
    30d4:	00387503 	eorseq	r7, r8, r3, lsl #10
    30d8:	00682602 	rsbeq	r2, r8, r2, lsl #12
    30dc:	01020000 	mrseq	r0, (UNDEF: 2)
    30e0:	00067208 	andeq	r7, r6, r8, lsl #4
    30e4:	04050400 	streq	r0, [r5], #-1024	; 0x400
    30e8:	0000006f 	andeq	r0, r0, pc, rrx
    30ec:	0003b306 	andeq	fp, r3, r6, lsl #6
    30f0:	54290100 	strtpl	r0, [r9], #-256	; 0x100
    30f4:	5408000e 	strpl	r0, [r8], #-14
    30f8:	01000001 	tsteq	r0, r1
    30fc:	00012a9c 	muleq	r1, ip, sl
    3100:	137f0700 	cmnne	pc, #0, 14
    3104:	2b010000 	blcs	4310c <__Stack_Size+0x42d0c>
    3108:	0000003a 	andeq	r0, r0, sl, lsr r0
    310c:	0000142b 	andeq	r1, r0, fp, lsr #8
    3110:	000e9008 	andeq	r9, lr, r8
    3114:	00001208 	andeq	r1, r0, r8, lsl #4
    3118:	0000b700 	andeq	fp, r0, r0, lsl #14
    311c:	04810700 	streq	r0, [r1], #1792	; 0x700
    3120:	3c010000 	stccc	0, cr0, [r1], {-0}
    3124:	0000004c 	andeq	r0, r0, ip, asr #32
    3128:	0000149b 	muleq	r0, fp, r4
    312c:	0ea20800 	cdpeq	8, 10, cr0, cr2, cr0, {0}
    3130:	00120800 	andseq	r0, r2, r0, lsl #16
    3134:	00d40000 	sbcseq	r0, r4, r0
    3138:	81070000 	mrshi	r0, (UNDEF: 7)
    313c:	01000004 	tsteq	r0, r4
    3140:	00004c3d 	andeq	r4, r0, sp, lsr ip
    3144:	0014df00 	andseq	sp, r4, r0, lsl #30
    3148:	f6080000 			; <UNDEFINED> instruction: 0xf6080000
    314c:	2208000e 	andcs	r0, r8, #14
    3150:	f1000000 	cps	#0
    3154:	07000000 	streq	r0, [r0, -r0]
    3158:	00000481 	andeq	r0, r0, r1, lsl #9
    315c:	004c7201 	subeq	r7, ip, r1, lsl #4
    3160:	15590000 	ldrbne	r0, [r9, #-0]
    3164:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3168:	08000f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp}
    316c:	00000020 	andeq	r0, r0, r0, lsr #32
    3170:	0000010e 	andeq	r0, r0, lr, lsl #2
    3174:	00048107 	andeq	r8, r4, r7, lsl #2
    3178:	4c730100 	ldfmie	f0, [r3], #-0
    317c:	7a000000 	bvc	3184 <__Stack_Size+0x2d84>
    3180:	00000015 	andeq	r0, r0, r5, lsl r0
    3184:	000ece09 	andeq	ip, lr, r9, lsl #28
    3188:	0001ba08 	andeq	fp, r1, r8, lsl #20
    318c:	0ee20900 	cdpeq	9, 14, cr0, cr2, cr0, {0}
    3190:	01c50800 	biceq	r0, r5, r0, lsl #16
    3194:	f6090000 			; <UNDEFINED> instruction: 0xf6090000
    3198:	d008000e 	andle	r0, r8, lr
    319c:	00000001 	andeq	r0, r0, r1
    31a0:	00135306 	andseq	r5, r3, r6, lsl #6
    31a4:	009e0100 	addseq	r0, lr, r0, lsl #2
    31a8:	70000000 	andvc	r0, r0, r0
    31ac:	01000000 	mrseq	r0, (UNDEF: 0)
    31b0:	00014f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
    31b4:	137f0700 	cmnne	pc, #0, 14
    31b8:	a0010000 	andge	r0, r1, r0
    31bc:	0000003a 	andeq	r0, r0, sl, lsr r0
    31c0:	0000158d 	andeq	r1, r0, sp, lsl #11
    31c4:	02560a00 	subseq	r0, r6, #0, 20
    31c8:	2a030000 	bcs	c31d0 <__Stack_Size+0xc2dd0>
    31cc:	00015b02 	andeq	r5, r1, r2, lsl #22
    31d0:	004c0b00 	subeq	r0, ip, r0, lsl #22
    31d4:	690c0000 	stmdbvs	ip, {}	; <UNPREDICTABLE>
    31d8:	01000013 	tsteq	r0, r3, lsl r0
    31dc:	00004c17 	andeq	r4, r0, r7, lsl ip
    31e0:	ce030500 	cfsh32gt	mvfx0, mvfx3, #0
    31e4:	0c200001 	stceq	0, cr0, [r0], #-4
    31e8:	00001374 	andeq	r1, r0, r4, ror r3
    31ec:	004c1801 	subeq	r1, ip, r1, lsl #16
    31f0:	03050000 	movweq	r0, #20480	; 0x5000
    31f4:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    31f8:	0013b10d 	andseq	fp, r3, sp, lsl #2
    31fc:	5e1d0400 	cfmulspl	mvf0, mvf13, mvf0
    3200:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    3204:	00000070 	andeq	r0, r0, r0, ror r0
    3208:	0000019d 	muleq	r0, sp, r1
    320c:	00019d0f 	andeq	r9, r1, pc, lsl #26
    3210:	02000600 	andeq	r0, r0, #0, 12
    3214:	05450704 	strbeq	r0, [r5, #-1796]	; 0x704
    3218:	b60d0000 	strlt	r0, [sp], -r0
    321c:	01000004 	tsteq	r0, r4
    3220:	00018d1b 	andeq	r8, r1, fp, lsl sp
    3224:	080f0d00 	stmdaeq	pc, {r8, sl, fp}	; <UNPREDICTABLE>
    3228:	1c010000 	stcne	0, cr0, [r1], {-0}
    322c:	0000018d 	andeq	r0, r0, sp, lsl #3
    3230:	00139810 	andseq	r9, r3, r0, lsl r8
    3234:	5edc0500 	cdppl	5, 13, cr0, cr12, cr0, {0}
    3238:	10000000 	andne	r0, r0, r0
    323c:	0000135a 	andeq	r1, r0, sl, asr r3
    3240:	005ed905 	subseq	sp, lr, r5, lsl #18
    3244:	a4100000 	ldrge	r0, [r0], #-0
    3248:	05000013 	streq	r0, [r0, #-19]
    324c:	00005edb 	ldrdeq	r5, [r0], -fp
    3250:	03f90000 	mvnseq	r0, #0
    3254:	00040000 	andeq	r0, r4, r0
    3258:	00000f4a 	andeq	r0, r0, sl, asr #30
    325c:	017e0104 	cmneq	lr, r4, lsl #2
    3260:	c3010000 	movwgt	r0, #4096	; 0x1000
    3264:	32000013 	andcc	r0, r0, #19
    3268:	30000000 	andcc	r0, r0, r0
    326c:	00000005 	andeq	r0, r0, r5
    3270:	36000000 	strcc	r0, [r0], -r0
    3274:	02000010 	andeq	r0, r0, #16
    3278:	021c0504 	andseq	r0, ip, #4, 10	; 0x1000000
    327c:	02020000 	andeq	r0, r2, #0
    3280:	0006c805 	andeq	ip, r6, r5, lsl #16
    3284:	06010200 	streq	r0, [r1], -r0, lsl #4
    3288:	00000674 	andeq	r0, r0, r4, ror r6
    328c:	a1070402 	tstge	r7, r2, lsl #8
    3290:	03000003 	movweq	r0, #3
    3294:	00363175 	eorseq	r3, r6, r5, ror r1
    3298:	004c2502 	subeq	r2, ip, r2, lsl #10
    329c:	02020000 	andeq	r0, r2, #0
    32a0:	0003fd07 	andeq	pc, r3, r7, lsl #26
    32a4:	38750300 	ldmdacc	r5!, {r8, r9}^
    32a8:	5d260200 	sfmpl	f0, 4, [r6, #-0]
    32ac:	02000000 	andeq	r0, r0, #0
    32b0:	06720801 	ldrbteq	r0, [r2], -r1, lsl #16
    32b4:	04040000 	streq	r0, [r4], #-0
    32b8:	00000053 	andeq	r0, r0, r3, asr r0
    32bc:	00076505 	andeq	r6, r7, r5, lsl #10
    32c0:	2d030100 	stfcss	f0, [r3, #-0]
    32c4:	0000008f 	andeq	r0, r0, pc, lsl #1
    32c8:	0008f606 	andeq	pc, r8, r6, lsl #12
    32cc:	10060000 	andne	r0, r6, r0
    32d0:	01000004 	tsteq	r0, r4
    32d4:	0007a406 	andeq	sl, r7, r6, lsl #8
    32d8:	48060200 	stmdami	r6, {r9}
    32dc:	03000002 	movweq	r0, #2
    32e0:	07660700 	strbeq	r0, [r6, -r0, lsl #14]!
    32e4:	34030000 	strcc	r0, [r3], #-0
    32e8:	0000006a 	andeq	r0, r0, sl, rrx
    32ec:	00091b08 	andeq	r1, r9, r8, lsl #22
    32f0:	38030c00 	stmdacc	r3, {sl, fp}
    32f4:	000000d7 	ldrdeq	r0, [r0], -r7
    32f8:	0002b609 	andeq	fp, r2, r9, lsl #12
    32fc:	41500300 	cmpmi	r0, r0, lsl #6
    3300:	00000000 	andeq	r0, r0, r0
    3304:	00033f09 	andeq	r3, r3, r9, lsl #30
    3308:	41510300 	cmpmi	r1, r0, lsl #6
    330c:	02000000 	andeq	r0, r0, #0
    3310:	00158f09 	andseq	r8, r5, r9, lsl #30
    3314:	41520300 	cmpmi	r2, r0, lsl #6
    3318:	04000000 	streq	r0, [r0], #-0
    331c:	00010909 	andeq	r0, r1, r9, lsl #18
    3320:	e6530300 	ldrb	r0, [r3], -r0, lsl #6
    3324:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3328:	00640a00 	rsbeq	r0, r4, r0, lsl #20
    332c:	00e60000 	rsceq	r0, r6, r0
    3330:	410b0000 	mrsmi	r0, (UNDEF: 11)
    3334:	00000000 	andeq	r0, r0, r0
    3338:	00d70404 	sbcseq	r0, r7, r4, lsl #8
    333c:	1c070000 	stcne	0, cr0, [r7], {-0}
    3340:	03000009 	movweq	r0, #9
    3344:	00009a54 	andeq	r9, r0, r4, asr sl
    3348:	57420c00 	strbpl	r0, [r2, -r0, lsl #24]
    334c:	62030200 	andvs	r0, r3, #0, 4
    3350:	0000011b 	andeq	r0, r0, fp, lsl r1
    3354:	3062620d 	rsbcc	r6, r2, sp, lsl #4
    3358:	53650300 	cmnpl	r5, #0, 6
    335c:	00000000 	andeq	r0, r0, r0
    3360:	3162620d 	cmncc	r2, sp, lsl #4
    3364:	53660300 	cmnpl	r6, #0, 6
    3368:	01000000 	mrseq	r0, (UNDEF: 0)
    336c:	03020e00 	movweq	r0, #11776	; 0x2e00
    3370:	0001375f 	andeq	r3, r1, pc, asr r7
    3374:	00770f00 	rsbseq	r0, r7, r0, lsl #30
    3378:	00416103 	subeq	r6, r1, r3, lsl #2
    337c:	620f0000 	andvs	r0, pc, #0
    3380:	68030077 	stmdavs	r3, {r0, r1, r2, r4, r5, r6}
    3384:	000000f7 	strdeq	r0, [r0], -r7
    3388:	04250700 	strteq	r0, [r5], #-1792	; 0x700
    338c:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
    3390:	0000011b 	andeq	r0, r0, fp, lsl r1
    3394:	00006208 	andeq	r6, r0, r8, lsl #4
    3398:	6b031c00 	blvs	ca3a0 <__Stack_Size+0xc9fa0>
    339c:	000001d3 	ldrdeq	r0, [r0], -r3
    33a0:	00058009 	andeq	r8, r5, r9
    33a4:	536d0300 	cmnpl	sp, #0, 6
    33a8:	00000000 	andeq	r0, r0, r0
    33ac:	00023c09 	andeq	r3, r2, r9, lsl #24
    33b0:	536e0300 	cmnpl	lr, #0, 6
    33b4:	01000000 	mrseq	r0, (UNDEF: 0)
    33b8:	00043e09 	andeq	r3, r4, r9, lsl #28
    33bc:	376f0300 	strbcc	r0, [pc, -r0, lsl #6]!
    33c0:	02000001 	andeq	r0, r0, #1
    33c4:	00016e09 	andeq	r6, r1, r9, lsl #28
    33c8:	37700300 	ldrbcc	r0, [r0, -r0, lsl #6]!
    33cc:	04000001 	streq	r0, [r0], #-1
    33d0:	00083d09 	andeq	r3, r8, r9, lsl #26
    33d4:	37710300 	ldrbcc	r0, [r1, -r0, lsl #6]!
    33d8:	06000001 	streq	r0, [r0], -r1
    33dc:	00094909 	andeq	r4, r9, r9, lsl #18
    33e0:	53730300 	cmnpl	r3, #0, 6
    33e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    33e8:	0003c609 	andeq	ip, r3, r9, lsl #12
    33ec:	53740300 	cmnpl	r4, #0, 6
    33f0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    33f4:	0004d109 	andeq	sp, r4, r9, lsl #2
    33f8:	53750300 	cmnpl	r5, #0, 6
    33fc:	0a000000 	beq	3404 <__Stack_Size+0x3004>
    3400:	00089209 	andeq	r9, r8, r9, lsl #4
    3404:	53760300 	cmnpl	r6, #0, 6
    3408:	0b000000 	bleq	3410 <__Stack_Size+0x3010>
    340c:	00064c09 	andeq	r4, r6, r9, lsl #24
    3410:	53770300 	cmnpl	r7, #0, 6
    3414:	0c000000 	stceq	0, cr0, [r0], {-0}
    3418:	00074309 	andeq	r4, r7, r9, lsl #6
    341c:	ec7a0300 	ldcl	3, cr0, [sl], #-0
    3420:	10000000 	andne	r0, r0, r0
    3424:	00630700 	rsbeq	r0, r3, r0, lsl #14
    3428:	7b030000 	blvc	c3430 <__Stack_Size+0xc3030>
    342c:	00000142 	andeq	r0, r0, r2, asr #2
    3430:	00077208 	andeq	r7, r7, r8, lsl #4
    3434:	7d033400 	cfstrsvc	mvf3, [r3, #-0]
    3438:	00000287 	andeq	r0, r0, r7, lsl #5
    343c:	00056d09 	andeq	r6, r5, r9, lsl #26
    3440:	887f0300 	ldmdahi	pc!, {r8, r9}^	; <UNPREDICTABLE>
    3444:	00000002 	andeq	r0, r0, r2
    3448:	0003ed09 	andeq	lr, r3, r9, lsl #26
    344c:	88800300 	stmhi	r0, {r8, r9}
    3450:	04000002 	streq	r0, [r0], #-2
    3454:	0007ca09 	andeq	ip, r7, r9, lsl #20
    3458:	88830300 	stmhi	r3, {r8, r9}
    345c:	08000002 	stmdaeq	r0, {r1}
    3460:	0007dc09 	andeq	sp, r7, r9, lsl #24
    3464:	88840300 	stmhi	r4, {r8, r9}
    3468:	0c000002 	stceq	0, cr0, [r0], {2}
    346c:	00054e09 	andeq	r4, r5, r9, lsl #28
    3470:	9d960300 	ldcls	3, cr0, [r6]
    3474:	10000002 	andne	r0, r0, r2
    3478:	00072709 	andeq	r2, r7, r9, lsl #14
    347c:	9da10300 	stcls	3, cr0, [r1]
    3480:	14000002 	strne	r0, [r0], #-2
    3484:	00051809 	andeq	r1, r5, r9, lsl #16
    3488:	b7ab0300 	strlt	r0, [fp, r0, lsl #6]!
    348c:	18000002 	stmdane	r0, {r1}
    3490:	00015a09 	andeq	r5, r1, r9, lsl #20
    3494:	e6ad0300 	strt	r0, [sp], r0, lsl #6
    3498:	1c000000 	stcne	0, cr0, [r0], {-0}
    349c:	00022809 	andeq	r2, r2, r9, lsl #16
    34a0:	e6ae0300 	strt	r0, [lr], r0, lsl #6
    34a4:	20000000 	andcs	r0, r0, r0
    34a8:	00084c09 	andeq	r4, r8, r9, lsl #24
    34ac:	e6af0300 	strt	r0, [pc], r0, lsl #6
    34b0:	24000000 	strcs	r0, [r0], #-0
    34b4:	00063409 	andeq	r3, r6, r9, lsl #8
    34b8:	e6b00300 	ldrt	r0, [r0], r0, lsl #6
    34bc:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    34c0:	0005ab09 	andeq	sl, r5, r9, lsl #22
    34c4:	64b20300 	ldrtvs	r0, [r2], #768	; 0x300
    34c8:	2c000000 	stccs	0, cr0, [r0], {-0}
    34cc:	00158c09 	andseq	r8, r5, r9, lsl #24
    34d0:	53b30300 			; <UNDEFINED> instruction: 0x53b30300
    34d4:	30000000 	andcc	r0, r0, r0
    34d8:	04041000 	streq	r1, [r4], #-0
    34dc:	00000287 	andeq	r0, r0, r7, lsl #5
    34e0:	00008f0a 	andeq	r8, r0, sl, lsl #30
    34e4:	00029d00 	andeq	r9, r2, r0, lsl #26
    34e8:	00530b00 	subseq	r0, r3, r0, lsl #22
    34ec:	04000000 	streq	r0, [r0], #-0
    34f0:	00028e04 	andeq	r8, r2, r4, lsl #28
    34f4:	008f0a00 	addeq	r0, pc, r0, lsl #20
    34f8:	02b70000 	adcseq	r0, r7, #0
    34fc:	530b0000 	movwpl	r0, #45056	; 0xb000
    3500:	0b000000 	bleq	3508 <__Stack_Size+0x3108>
    3504:	00000053 	andeq	r0, r0, r3, asr r0
    3508:	a3040400 	movwge	r0, #17408	; 0x4400
    350c:	07000002 	streq	r0, [r0, -r2]
    3510:	00000773 	andeq	r0, r0, r3, ror r7
    3514:	01deb503 	bicseq	fp, lr, r3, lsl #10
    3518:	80080000 	andhi	r0, r8, r0
    351c:	24000006 	strcs	r0, [r0], #-6
    3520:	0341b703 	movteq	fp, #5891	; 0x1703
    3524:	ed090000 	stc	0, cr0, [r9, #-0]
    3528:	03000006 	movweq	r0, #6
    352c:	000288b9 			; <UNDEFINED> instruction: 0x000288b9
    3530:	e9090000 	stmdb	r9, {}	; <UNPREDICTABLE>
    3534:	03000005 	movweq	r0, #5
    3538:	000288ba 			; <UNDEFINED> instruction: 0x000288ba
    353c:	05090400 	streq	r0, [r9, #-1024]	; 0x400
    3540:	03000006 	movweq	r0, #6
    3544:	000288bb 			; <UNDEFINED> instruction: 0x000288bb
    3548:	12090800 	andne	r0, r9, #0, 16
    354c:	03000001 	movweq	r0, #1
    3550:	000288bc 			; <UNDEFINED> instruction: 0x000288bc
    3554:	b9090c00 	stmdblt	r9, {sl, fp}
    3558:	03000006 	movweq	r0, #6
    355c:	000288bd 			; <UNDEFINED> instruction: 0x000288bd
    3560:	2c091000 	stccs	0, cr1, [r9], {-0}
    3564:	03000004 	movweq	r0, #4
    3568:	000288be 			; <UNDEFINED> instruction: 0x000288be
    356c:	92091400 	andls	r1, r9, #0, 8
    3570:	03000000 	movweq	r0, #0
    3574:	000288bf 			; <UNDEFINED> instruction: 0x000288bf
    3578:	d3091800 	movwle	r1, #38912	; 0x9800
    357c:	03000005 	movweq	r0, #5
    3580:	000288c0 	andeq	r8, r2, r0, asr #17
    3584:	1c091c00 	stcne	12, cr1, [r9], {-0}
    3588:	03000000 	movweq	r0, #0
    358c:	000288c1 	andeq	r8, r2, r1, asr #17
    3590:	07002000 	streq	r2, [r0, -r0]
    3594:	00000681 	andeq	r0, r0, r1, lsl #13
    3598:	02c8c303 	sbceq	ip, r8, #201326592	; 0xc000000
    359c:	69110000 	ldmdbvs	r1, {}	; <UNPREDICTABLE>
    35a0:	01000005 	tsteq	r0, r5
    35a4:	000fa835 	andeq	sl, pc, r5, lsr r8	; <UNPREDICTABLE>
    35a8:	00003808 	andeq	r3, r0, r8, lsl #16
    35ac:	129c0100 	addsne	r0, ip, #0, 2
    35b0:	00000617 	andeq	r0, r0, r7, lsl r6
    35b4:	02bdec03 	adcseq	lr, sp, #768	; 0x300
    35b8:	d7120000 	ldrle	r0, [r2, -r0]
    35bc:	03000013 	movweq	r0, #19
    35c0:	000341ed 	andeq	r4, r3, sp, ror #3
    35c4:	13ee1300 	mvnne	r1, #0, 6
    35c8:	27010000 	strcs	r0, [r1, -r0]
    35cc:	000001d3 	ldrdeq	r0, [r0], -r3
    35d0:	01e00305 	mvneq	r0, r5, lsl #6
    35d4:	b1132000 	tstlt	r3, r0
    35d8:	01000013 	tsteq	r0, r3, lsl r0
    35dc:	00005318 	andeq	r5, r0, r8, lsl r3
    35e0:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
    35e4:	13200001 	teqne	r0, #1
    35e8:	000002a2 	andeq	r0, r0, r2, lsr #5
    35ec:	03a61d01 			; <UNDEFINED> instruction: 0x03a61d01
    35f0:	03050000 	movweq	r0, #20480	; 0x5000
    35f4:	20000200 	andcs	r0, r0, r0, lsl #4
    35f8:	01d30404 	bicseq	r0, r3, r4, lsl #8
    35fc:	5f130000 	svcpl	0x00130000
    3600:	01000005 	tsteq	r0, r5
    3604:	0003bd20 	andeq	fp, r3, r0, lsr #26
    3608:	d8030500 	stmdale	r3, {r8, sl}
    360c:	04200001 	strteq	r0, [r0], #-1
    3610:	0002bd04 	andeq	fp, r2, r4, lsl #26
    3614:	13d61300 	bicsne	r1, r6, #0, 6
    3618:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    361c:	000003d4 	ldrdeq	r0, [r0], -r4
    3620:	01fc0305 	mvnseq	r0, r5, lsl #6
    3624:	04042000 	streq	r2, [r4], #-0
    3628:	00000341 	andeq	r0, r0, r1, asr #6
    362c:	0013b913 	andseq	fp, r3, r3, lsl r9
    3630:	41250100 	teqmi	r5, r0, lsl #2
    3634:	05000000 	streq	r0, [r0, #-0]
    3638:	0001d403 	andeq	sp, r1, r3, lsl #8
    363c:	04f21320 	ldrbteq	r1, [r2], #800	; 0x320
    3640:	26010000 	strcs	r0, [r1], -r0
    3644:	00000041 	andeq	r0, r0, r1, asr #32
    3648:	02040305 	andeq	r0, r4, #335544320	; 0x14000000
    364c:	e0002000 	and	r2, r0, r0
    3650:	0400000d 	streq	r0, [r0], #-13
    3654:	00104d00 	andseq	r4, r0, r0, lsl #26
    3658:	7e010400 	cfcpysvc	mvf0, mvf1
    365c:	01000001 	tsteq	r0, r1
    3660:	000013fa 	strdeq	r1, [r0], -sl
    3664:	00000032 	andeq	r0, r0, r2, lsr r0
    3668:	00000578 	andeq	r0, r0, r8, ror r5
    366c:	00000000 	andeq	r0, r0, r0
    3670:	0000109d 	muleq	r0, sp, r0
    3674:	1c050402 	cfstrsne	mvf0, [r5], {2}
    3678:	02000002 	andeq	r0, r0, #2
    367c:	06c80502 	strbeq	r0, [r8], r2, lsl #10
    3680:	01020000 	mrseq	r0, (UNDEF: 2)
    3684:	00067406 	andeq	r7, r6, r6, lsl #8
    3688:	33750300 	cmncc	r5, #0, 6
    368c:	24020032 	strcs	r0, [r2], #-50	; 0x32
    3690:	00000045 	andeq	r0, r0, r5, asr #32
    3694:	a1070402 	tstge	r7, r2, lsl #8
    3698:	03000003 	movweq	r0, #3
    369c:	00363175 	eorseq	r3, r6, r5, ror r1
    36a0:	00572502 	subseq	r2, r7, r2, lsl #10
    36a4:	02020000 	andeq	r0, r2, #0
    36a8:	0003fd07 	andeq	pc, r3, r7, lsl #26
    36ac:	38750300 	ldmdacc	r5!, {r8, r9}^
    36b0:	68260200 	stmdavs	r6!, {r9}
    36b4:	02000000 	andeq	r0, r0, #0
    36b8:	06720801 	ldrbteq	r0, [r2], -r1, lsl #16
    36bc:	6c040000 	stcvs	0, cr0, [r4], {-0}
    36c0:	02000004 	andeq	r0, r0, #4
    36c4:	00007a2c 	andeq	r7, r0, ip, lsr #20
    36c8:	00450500 	subeq	r0, r5, r0, lsl #10
    36cc:	01060000 	mrseq	r0, (UNDEF: 6)
    36d0:	00943602 	addseq	r3, r4, r2, lsl #12
    36d4:	ff070000 			; <UNDEFINED> instruction: 0xff070000
    36d8:	00000005 	andeq	r0, r0, r5
    36dc:	00076d07 	andeq	r6, r7, r7, lsl #26
    36e0:	04000100 	streq	r0, [r0], #-256	; 0x100
    36e4:	00000459 	andeq	r0, r0, r9, asr r4
    36e8:	007f3902 	rsbseq	r3, pc, r2, lsl #18
    36ec:	91080000 	mrsls	r0, (UNDEF: 8)
    36f0:	01000003 	tsteq	r0, r3
    36f4:	00c41603 	sbceq	r1, r4, r3, lsl #12
    36f8:	24070000 	strcs	r0, [r7], #-0
    36fc:	00000001 	andeq	r0, r0, r1
    3700:	0002d007 	andeq	sp, r2, r7
    3704:	22070100 	andcs	r0, r7, #0, 2
    3708:	02000008 	andeq	r0, r0, #8
    370c:	00044907 	andeq	r4, r4, r7, lsl #18
    3710:	08000300 	stmdaeq	r0, {r8, r9}
    3714:	00000685 	andeq	r0, r0, r5, lsl #13
    3718:	251f0301 	ldrcs	r0, [pc, #-769]	; 341f <__Stack_Size+0x301f>
    371c:	07000001 	streq	r0, [r0, -r1]
    3720:	0000156c 	andeq	r1, r0, ip, ror #10
    3724:	179b0700 	ldrne	r0, [fp, r0, lsl #14]
    3728:	07010000 	streq	r0, [r1, -r0]
    372c:	00000cd5 	ldrdeq	r0, [r0], -r5
    3730:	15770702 	ldrbne	r0, [r7, #-1794]!	; 0x702
    3734:	07030000 	streq	r0, [r3, -r0]
    3738:	00000c6a 	andeq	r0, r0, sl, ror #24
    373c:	172a0704 	strne	r0, [sl, -r4, lsl #14]!
    3740:	07050000 	streq	r0, [r5, -r0]
    3744:	0000175a 	andeq	r1, r0, sl, asr r7
    3748:	15e10706 	strbne	r0, [r1, #1798]!	; 0x706
    374c:	07070000 	streq	r0, [r7, -r0]
    3750:	00001640 	andeq	r1, r0, r0, asr #12
    3754:	16910708 	ldrne	r0, [r1], r8, lsl #14
    3758:	07090000 	streq	r0, [r9, -r0]
    375c:	00001542 	andeq	r1, r0, r2, asr #10
    3760:	15f0070a 	ldrbne	r0, [r0, #1802]!	; 0x70a
    3764:	070b0000 	streq	r0, [fp, -r0]
    3768:	000016d5 	ldrdeq	r1, [r0], -r5
    376c:	15bf070c 	ldrne	r0, [pc, #1804]!	; 3e80 <__Stack_Size+0x3a80>
    3770:	000c0000 	andeq	r0, ip, r0
    3774:	00166108 	andseq	r6, r6, r8, lsl #2
    3778:	32030100 	andcc	r0, r3, #0, 2
    377c:	00000150 	andeq	r0, r0, r0, asr r1
    3780:	0014ac07 	andseq	sl, r4, r7, lsl #24
    3784:	0b070100 	bleq	1c3b8c <__Stack_Size+0x1c378c>
    3788:	02000017 	andeq	r0, r0, #23
    378c:	0014be07 	andseq	fp, r4, r7, lsl #28
    3790:	b3070300 	movwlt	r0, #29440	; 0x7300
    3794:	04000016 	streq	r0, [r0], #-22
    3798:	0016f707 	andseq	pc, r6, r7, lsl #14
    379c:	08000500 	stmdaeq	r0, {r8, sl}
    37a0:	000015fe 	strdeq	r1, [r0], -lr
    37a4:	693c0301 	ldmdbvs	ip!, {r0, r8, r9}
    37a8:	07000001 	streq	r0, [r0, -r1]
    37ac:	0000140d 	andeq	r1, r0, sp, lsl #8
    37b0:	146b0700 	strbtne	r0, [fp], #-1792	; 0x700
    37b4:	00010000 	andeq	r0, r1, r0
    37b8:	00165208 	andseq	r5, r6, r8, lsl #4
    37bc:	16040100 	strne	r0, [r4], -r0, lsl #2
    37c0:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    37c4:	00177607 	andseq	r7, r7, r7, lsl #12
    37c8:	72070000 	andvc	r0, r7, #0
    37cc:	01000016 	tsteq	r0, r6, lsl r0
    37d0:	0014f607 	andseq	pc, r4, r7, lsl #12
    37d4:	ae070200 	cdpge	2, 0, cr0, cr7, cr0, {0}
    37d8:	03000017 	movweq	r0, #23
    37dc:	0014f107 	andseq	pc, r4, r7, lsl #2
    37e0:	a9070400 	stmdbge	r7, {sl}
    37e4:	05000017 	streq	r0, [r0, #-23]
    37e8:	00178c07 	andseq	r8, r7, r7, lsl #24
    37ec:	a3070600 	movwge	r0, #30208	; 0x7600
    37f0:	07000016 	smladeq	r0, r6, r0, r0
    37f4:	00148007 	andseq	r8, r4, r7
    37f8:	32070800 	andcc	r0, r7, #0, 16
    37fc:	09000015 	stmdbeq	r0, {r0, r2, r4}
    3800:	00b20900 	adcseq	r0, r2, r0, lsl #18
    3804:	04080000 	streq	r0, [r8], #-0
    3808:	0001d724 	andeq	sp, r1, r4, lsr #14
    380c:	01630a00 	cmneq	r3, r0, lsl #20
    3810:	26040000 	strcs	r0, [r4], -r0
    3814:	000001d7 	ldrdeq	r0, [r0], -r7
    3818:	05c30a00 	strbeq	r0, [r3, #2560]	; 0xa00
    381c:	27040000 	strcs	r0, [r4, -r0]
    3820:	0000004c 	andeq	r0, r0, ip, asr #32
    3824:	040b0004 	streq	r0, [fp], #-4
    3828:	0000005e 	andeq	r0, r0, lr, asr r0
    382c:	0002fc04 	andeq	pc, r2, r4, lsl #24
    3830:	b2290400 	eorlt	r0, r9, #0, 8
    3834:	08000001 	stmdaeq	r0, {r0}
    3838:	00000765 	andeq	r0, r0, r5, ror #14
    383c:	0d2d0401 	cfstrseq	mvf0, [sp, #-4]!
    3840:	07000002 	streq	r0, [r0, -r2]
    3844:	000008f6 	strdeq	r0, [r0], -r6
    3848:	04100700 	ldreq	r0, [r0], #-1792	; 0x700
    384c:	07010000 	streq	r0, [r1, -r0]
    3850:	000007a4 	andeq	r0, r0, r4, lsr #15
    3854:	02480702 	subeq	r0, r8, #524288	; 0x80000
    3858:	00030000 	andeq	r0, r3, r0
    385c:	00076604 	andeq	r6, r7, r4, lsl #12
    3860:	e8340400 	ldmda	r4!, {sl}
    3864:	09000001 	stmdbeq	r0, {r0}
    3868:	0000091b 	andeq	r0, r0, fp, lsl r9
    386c:	5538040c 	ldrpl	r0, [r8, #-1036]!	; 0x40c
    3870:	0a000002 	beq	3880 <__Stack_Size+0x3480>
    3874:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    3878:	004c5004 	subeq	r5, ip, r4
    387c:	0a000000 	beq	3884 <__Stack_Size+0x3484>
    3880:	0000033f 	andeq	r0, r0, pc, lsr r3
    3884:	004c5104 	subeq	r5, ip, r4, lsl #2
    3888:	0a020000 	beq	83890 <__Stack_Size+0x83490>
    388c:	0000158f 	andeq	r1, r0, pc, lsl #11
    3890:	004c5204 	subeq	r5, ip, r4, lsl #4
    3894:	0a040000 	beq	10389c <__Stack_Size+0x10349c>
    3898:	00000109 	andeq	r0, r0, r9, lsl #2
    389c:	02645304 	rsbeq	r5, r4, #4, 6	; 0x10000000
    38a0:	00080000 	andeq	r0, r8, r0
    38a4:	0001d70c 	andeq	sp, r1, ip, lsl #14
    38a8:	00026400 	andeq	r6, r2, r0, lsl #8
    38ac:	004c0d00 	subeq	r0, ip, r0, lsl #26
    38b0:	0b000000 	bleq	38b8 <__Stack_Size+0x34b8>
    38b4:	00025504 	andeq	r5, r2, r4, lsl #10
    38b8:	091c0400 	ldmdbeq	ip, {sl}
    38bc:	54040000 	strpl	r0, [r4], #-0
    38c0:	00000218 	andeq	r0, r0, r8, lsl r2
    38c4:	0007fd09 	andeq	pc, r7, r9, lsl #26
    38c8:	58040200 	stmdapl	r4, {r9}
    38cc:	0000029a 	muleq	r0, sl, r2
    38d0:	00093a0a 	andeq	r3, r9, sl, lsl #20
    38d4:	5e5a0400 	cdppl	4, 5, cr0, cr10, cr0, {0}
    38d8:	00000000 	andeq	r0, r0, r0
    38dc:	0003d60a 	andeq	sp, r3, sl, lsl #12
    38e0:	5e5b0400 	cdppl	4, 5, cr0, cr11, cr0, {0}
    38e4:	01000000 	mrseq	r0, (UNDEF: 0)
    38e8:	07fe0400 	ldrbeq	r0, [lr, r0, lsl #8]!
    38ec:	5d040000 	stcpl	0, cr0, [r4, #-0]
    38f0:	00000275 	andeq	r0, r0, r5, ror r2
    38f4:	0057420e 	subseq	r4, r7, lr, lsl #4
    38f8:	c9620402 	stmdbgt	r2!, {r1, sl}^
    38fc:	0f000002 	svceq	0x00000002
    3900:	00306262 	eorseq	r6, r0, r2, ror #4
    3904:	005e6504 	subseq	r6, lr, r4, lsl #10
    3908:	0f000000 	svceq	0x00000000
    390c:	00316262 	eorseq	r6, r1, r2, ror #4
    3910:	005e6604 	subseq	r6, lr, r4, lsl #12
    3914:	00010000 	andeq	r0, r1, r0
    3918:	5f040210 	svcpl	0x00040210
    391c:	000002e5 	andeq	r0, r0, r5, ror #5
    3920:	04007711 	streq	r7, [r0], #-1809	; 0x711
    3924:	00004c61 	andeq	r4, r0, r1, ror #24
    3928:	77621100 	strbvc	r1, [r2, -r0, lsl #2]!
    392c:	a5680400 	strbge	r0, [r8, #-1024]!	; 0x400
    3930:	00000002 	andeq	r0, r0, r2
    3934:	00042504 	andeq	r2, r4, r4, lsl #10
    3938:	c9690400 	stmdbgt	r9!, {sl}^
    393c:	09000002 	stmdbeq	r0, {r1}
    3940:	00000062 	andeq	r0, r0, r2, rrx
    3944:	816b041c 	cmnhi	fp, ip, lsl r4
    3948:	0a000003 	beq	395c <__Stack_Size+0x355c>
    394c:	00000580 	andeq	r0, r0, r0, lsl #11
    3950:	005e6d04 	subseq	r6, lr, r4, lsl #26
    3954:	0a000000 	beq	395c <__Stack_Size+0x355c>
    3958:	0000023c 	andeq	r0, r0, ip, lsr r2
    395c:	005e6e04 	subseq	r6, lr, r4, lsl #28
    3960:	0a010000 	beq	43968 <__Stack_Size+0x43568>
    3964:	0000043e 	andeq	r0, r0, lr, lsr r4
    3968:	02e56f04 	rsceq	r6, r5, #4, 30
    396c:	0a020000 	beq	83974 <__Stack_Size+0x83574>
    3970:	0000016e 	andeq	r0, r0, lr, ror #2
    3974:	02e57004 	rsceq	r7, r5, #4
    3978:	0a040000 	beq	103980 <__Stack_Size+0x103580>
    397c:	0000083d 	andeq	r0, r0, sp, lsr r8
    3980:	02e57104 	rsceq	r7, r5, #4, 2
    3984:	0a060000 	beq	18398c <__Stack_Size+0x18358c>
    3988:	00000949 	andeq	r0, r0, r9, asr #18
    398c:	005e7304 	subseq	r7, lr, r4, lsl #6
    3990:	0a080000 	beq	203998 <__Stack_Size+0x203598>
    3994:	000003c6 	andeq	r0, r0, r6, asr #7
    3998:	005e7404 	subseq	r7, lr, r4, lsl #8
    399c:	0a090000 	beq	2439a4 <__Stack_Size+0x2435a4>
    39a0:	000004d1 	ldrdeq	r0, [r0], -r1
    39a4:	005e7504 	subseq	r7, lr, r4, lsl #10
    39a8:	0a0a0000 	beq	2839b0 <__Stack_Size+0x2835b0>
    39ac:	00000892 	muleq	r0, r2, r8
    39b0:	005e7604 	subseq	r7, lr, r4, lsl #12
    39b4:	0a0b0000 	beq	2c39bc <__Stack_Size+0x2c35bc>
    39b8:	0000064c 	andeq	r0, r0, ip, asr #12
    39bc:	005e7704 	subseq	r7, lr, r4, lsl #14
    39c0:	0a0c0000 	beq	3039c8 <__Stack_Size+0x3035c8>
    39c4:	00000743 	andeq	r0, r0, r3, asr #14
    39c8:	026a7a04 	rsbeq	r7, sl, #4, 20	; 0x4000
    39cc:	00100000 	andseq	r0, r0, r0
    39d0:	00006304 	andeq	r6, r0, r4, lsl #6
    39d4:	f07b0400 			; <UNDEFINED> instruction: 0xf07b0400
    39d8:	09000002 	stmdbeq	r0, {r1}
    39dc:	00000772 	andeq	r0, r0, r2, ror r7
    39e0:	357d0434 	ldrbcc	r0, [sp, #-1076]!	; 0x434
    39e4:	0a000004 	beq	39fc <__Stack_Size+0x35fc>
    39e8:	0000056d 	andeq	r0, r0, sp, ror #10
    39ec:	04367f04 	ldrteq	r7, [r6], #-3844	; 0xf04
    39f0:	0a000000 	beq	39f8 <__Stack_Size+0x35f8>
    39f4:	000003ed 	andeq	r0, r0, sp, ror #7
    39f8:	04368004 	ldrteq	r8, [r6], #-4
    39fc:	0a040000 	beq	103a04 <__Stack_Size+0x103604>
    3a00:	000007ca 	andeq	r0, r0, sl, asr #15
    3a04:	04368304 	ldrteq	r8, [r6], #-772	; 0x304
    3a08:	0a080000 	beq	203a10 <__Stack_Size+0x203610>
    3a0c:	000007dc 	ldrdeq	r0, [r0], -ip
    3a10:	04368404 	ldrteq	r8, [r6], #-1028	; 0x404
    3a14:	0a0c0000 	beq	303a1c <__Stack_Size+0x30361c>
    3a18:	0000054e 	andeq	r0, r0, lr, asr #10
    3a1c:	044b9604 	strbeq	r9, [fp], #-1540	; 0x604
    3a20:	0a100000 	beq	403a28 <__Stack_Size+0x403628>
    3a24:	00000727 	andeq	r0, r0, r7, lsr #14
    3a28:	044ba104 	strbeq	sl, [fp], #-260	; 0x104
    3a2c:	0a140000 	beq	503a34 <__Stack_Size+0x503634>
    3a30:	00000518 	andeq	r0, r0, r8, lsl r5
    3a34:	0465ab04 	strbteq	sl, [r5], #-2820	; 0xb04
    3a38:	0a180000 	beq	603a40 <__Stack_Size+0x603640>
    3a3c:	0000015a 	andeq	r0, r0, sl, asr r1
    3a40:	0264ad04 	rsbeq	sl, r4, #4, 26	; 0x100
    3a44:	0a1c0000 	beq	703a4c <__Stack_Size+0x70364c>
    3a48:	00000228 	andeq	r0, r0, r8, lsr #4
    3a4c:	0264ae04 	rsbeq	sl, r4, #4, 28	; 0x40
    3a50:	0a200000 	beq	803a58 <__Stack_Size+0x803658>
    3a54:	0000084c 	andeq	r0, r0, ip, asr #16
    3a58:	0264af04 	rsbeq	sl, r4, #4, 30
    3a5c:	0a240000 	beq	903a64 <__Stack_Size+0x903664>
    3a60:	00000634 	andeq	r0, r0, r4, lsr r6
    3a64:	0264b004 	rsbeq	fp, r4, #4
    3a68:	0a280000 	beq	a03a70 <__Stack_Size+0xa03670>
    3a6c:	000005ab 	andeq	r0, r0, fp, lsr #11
    3a70:	01d7b204 	bicseq	fp, r7, r4, lsl #4
    3a74:	0a2c0000 	beq	b03a7c <__Stack_Size+0xb0367c>
    3a78:	0000158c 	andeq	r1, r0, ip, lsl #11
    3a7c:	005eb304 	subseq	fp, lr, r4, lsl #6
    3a80:	00300000 	eorseq	r0, r0, r0
    3a84:	35040b12 	strcc	r0, [r4, #-2834]	; 0xb12
    3a88:	0c000004 	stceq	0, cr0, [r0], {4}
    3a8c:	0000020d 	andeq	r0, r0, sp, lsl #4
    3a90:	0000044b 	andeq	r0, r0, fp, asr #8
    3a94:	00005e0d 	andeq	r5, r0, sp, lsl #28
    3a98:	040b0000 	streq	r0, [fp], #-0
    3a9c:	0000043c 	andeq	r0, r0, ip, lsr r4
    3aa0:	00020d0c 	andeq	r0, r2, ip, lsl #26
    3aa4:	00046500 	andeq	r6, r4, r0, lsl #10
    3aa8:	005e0d00 	subseq	r0, lr, r0, lsl #26
    3aac:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    3ab0:	00000000 	andeq	r0, r0, r0
    3ab4:	0451040b 	ldrbeq	r0, [r1], #-1035	; 0x40b
    3ab8:	73040000 	movwvc	r0, #16384	; 0x4000
    3abc:	04000007 	streq	r0, [r0], #-7
    3ac0:	00038cb5 			; <UNDEFINED> instruction: 0x00038cb5
    3ac4:	06800900 	streq	r0, [r0], r0, lsl #18
    3ac8:	04240000 	strteq	r0, [r4], #-0
    3acc:	0004efb7 			; <UNDEFINED> instruction: 0x0004efb7
    3ad0:	06ed0a00 	strbteq	r0, [sp], r0, lsl #20
    3ad4:	b9040000 	stmdblt	r4, {}	; <UNPREDICTABLE>
    3ad8:	00000436 	andeq	r0, r0, r6, lsr r4
    3adc:	05e90a00 	strbeq	r0, [r9, #2560]!	; 0xa00
    3ae0:	ba040000 	blt	103ae8 <__Stack_Size+0x1036e8>
    3ae4:	00000436 	andeq	r0, r0, r6, lsr r4
    3ae8:	06050a04 	streq	r0, [r5], -r4, lsl #20
    3aec:	bb040000 	bllt	103af4 <__Stack_Size+0x1036f4>
    3af0:	00000436 	andeq	r0, r0, r6, lsr r4
    3af4:	01120a08 	tsteq	r2, r8, lsl #20
    3af8:	bc040000 	stclt	0, cr0, [r4], {-0}
    3afc:	00000436 	andeq	r0, r0, r6, lsr r4
    3b00:	06b90a0c 	ldrteq	r0, [r9], ip, lsl #20
    3b04:	bd040000 	stclt	0, cr0, [r4, #-0]
    3b08:	00000436 	andeq	r0, r0, r6, lsr r4
    3b0c:	042c0a10 	strteq	r0, [ip], #-2576	; 0xa10
    3b10:	be040000 	cdplt	0, 0, cr0, cr4, cr0, {0}
    3b14:	00000436 	andeq	r0, r0, r6, lsr r4
    3b18:	00920a14 	addseq	r0, r2, r4, lsl sl
    3b1c:	bf040000 	svclt	0x00040000
    3b20:	00000436 	andeq	r0, r0, r6, lsr r4
    3b24:	05d30a18 	ldrbeq	r0, [r3, #2584]	; 0xa18
    3b28:	c0040000 	andgt	r0, r4, r0
    3b2c:	00000436 	andeq	r0, r0, r6, lsr r4
    3b30:	001c0a1c 	andseq	r0, ip, ip, lsl sl
    3b34:	c1040000 	mrsgt	r0, (UNDEF: 4)
    3b38:	00000436 	andeq	r0, r0, r6, lsr r4
    3b3c:	81040020 	tsthi	r4, r0, lsr #32
    3b40:	04000006 	streq	r0, [r0], #-6
    3b44:	000476c3 	andeq	r7, r4, r3, asr #13
    3b48:	16101300 	ldrne	r1, [r0], -r0, lsl #6
    3b4c:	35010000 	strcc	r0, [r1, #-0]
    3b50:	000001d7 	ldrdeq	r0, [r0], -r7
    3b54:	08000fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp}
    3b58:	00000024 	andeq	r0, r0, r4, lsr #32
    3b5c:	05239c01 	streq	r9, [r3, #-3073]!	; 0xc01
    3b60:	ea140000 	b	503b68 <__Stack_Size+0x503768>
    3b64:	01000014 	tsteq	r0, r4, lsl r0
    3b68:	00004c35 	andeq	r4, r0, r5, lsr ip
    3b6c:	0015cf00 	andseq	ip, r5, r0, lsl #30
    3b70:	cb130000 	blgt	4c3b78 <__Stack_Size+0x4c3778>
    3b74:	01000015 	tsteq	r0, r5, lsl r0
    3b78:	0001d763 	andeq	sp, r1, r3, ror #14
    3b7c:	00100400 	andseq	r0, r0, r0, lsl #8
    3b80:	00002408 	andeq	r2, r0, r8, lsl #8
    3b84:	4c9c0100 	ldfmis	f0, [ip], {0}
    3b88:	14000005 	strne	r0, [r0], #-5
    3b8c:	000014ea 	andeq	r1, r0, sl, ror #9
    3b90:	004c6301 	subeq	r6, ip, r1, lsl #6
    3b94:	15f00000 	ldrbne	r0, [r0, #0]!
    3b98:	13000000 	movwne	r0, #0
    3b9c:	000016e4 	andeq	r1, r0, r4, ror #13
    3ba0:	01d79b01 	bicseq	r9, r7, r1, lsl #22
    3ba4:	10280000 	eorne	r0, r8, r0
    3ba8:	00900800 	addseq	r0, r0, r0, lsl #16
    3bac:	9c010000 	stcls	0, cr0, [r1], {-0}
    3bb0:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    3bb4:	0014ea14 	andseq	lr, r4, r4, lsl sl
    3bb8:	4c9b0100 	ldfmis	f0, [fp], {0}
    3bbc:	11000000 	mrsne	r0, (UNDEF: 0)
    3bc0:	15000016 	strne	r0, [r0, #-22]
    3bc4:	08001048 	stmdaeq	r0, {r3, r6, ip}
    3bc8:	0000001c 	andeq	r0, r0, ip, lsl r0
    3bcc:	00000591 	muleq	r0, r1, r5
    3bd0:	0003ce16 	andeq	ip, r3, r6, lsl lr
    3bd4:	5ea90100 	fdvple	f0, f1, f0
    3bd8:	32000000 	andcc	r0, r0, #0
    3bdc:	00000016 	andeq	r0, r0, r6, lsl r0
    3be0:	00106c17 	andseq	r6, r0, r7, lsl ip
    3be4:	00003008 	andeq	r3, r0, r8
    3be8:	17361600 	ldrne	r1, [r6, -r0, lsl #12]!
    3bec:	c3010000 	movwgt	r0, #4096	; 0x1000
    3bf0:	0000005e 	andeq	r0, r0, lr, asr r0
    3bf4:	00001646 	andeq	r1, r0, r6, asr #12
    3bf8:	00175218 	andseq	r5, r7, r8, lsl r2
    3bfc:	5ec40100 	polpls	f0, f4, f0
    3c00:	00000000 	andeq	r0, r0, r0
    3c04:	145f1900 	ldrbne	r1, [pc], #-2304	; 3c0c <__Stack_Size+0x380c>
    3c08:	e0010000 	and	r0, r1, r0
    3c0c:	0010b801 	andseq	fp, r0, r1, lsl #16
    3c10:	0000a808 	andeq	sl, r0, r8, lsl #16
    3c14:	7b9c0100 	blvc	fe70401c <BootRAM+0xd6747bd>
    3c18:	1a000006 	bne	3c38 <__Stack_Size+0x3838>
    3c1c:	00001722 	andeq	r1, r0, r2, lsr #14
    3c20:	7b01e201 	blvc	7c42c <__Stack_Size+0x7c02c>
    3c24:	77000006 	strvc	r0, [r0, -r6]
    3c28:	1a000016 	bne	3c88 <__Stack_Size+0x3888>
    3c2c:	000016c8 	andeq	r1, r0, r8, asr #13
    3c30:	3a01e301 	bcc	7c83c <__Stack_Size+0x7c43c>
    3c34:	8c000000 	stchi	0, cr0, [r0], {-0}
    3c38:	1a000016 	bne	3c98 <__Stack_Size+0x3898>
    3c3c:	00000949 	andeq	r0, r0, r9, asr #18
    3c40:	3a01e401 	bcc	7cc4c <__Stack_Size+0x7c84c>
    3c44:	d0000000 	andle	r0, r0, r0
    3c48:	1a000016 	bne	3ca8 <__Stack_Size+0x38a8>
    3c4c:	00001431 	andeq	r1, r0, r1, lsr r4
    3c50:	d701e601 	strle	lr, [r1, -r1, lsl #12]
    3c54:	1b000001 	blne	3c60 <__Stack_Size+0x3860>
    3c58:	1a000017 	bne	3cbc <__Stack_Size+0x38bc>
    3c5c:	000014ea 	andeq	r1, r0, sl, ror #9
    3c60:	3a01e701 	bcc	7d86c <__Stack_Size+0x7d46c>
    3c64:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    3c68:	1b000017 	blne	3ccc <__Stack_Size+0x38cc>
    3c6c:	00001520 	andeq	r1, r0, r0, lsr #10
    3c70:	3c021001 	stccc	0, cr1, [r2], {1}
    3c74:	1c080011 	stcne	0, cr0, [r8], {17}
    3c78:	0800110a 	stmdaeq	r0, {r1, r3, r8, ip}
    3c7c:	00000638 	andeq	r0, r0, r8, lsr r6
    3c80:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    3c84:	1e000075 	mcrne	0, 0, r0, cr0, cr5, {3}
    3c88:	08001112 	stmdaeq	r0, {r1, r4, r8, ip}
    3c8c:	00000d1c 	andeq	r0, r0, ip, lsl sp
    3c90:	0000064b 	andeq	r0, r0, fp, asr #12
    3c94:	0150011d 	cmpeq	r0, sp, lsl r1
    3c98:	1c1e0030 	ldcne	0, cr0, [lr], {48}	; 0x30
    3c9c:	32080011 	andcc	r0, r8, #17
    3ca0:	6500000d 	strvs	r0, [r0, #-13]
    3ca4:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    3ca8:	75025201 	strvc	r5, [r2, #-513]	; 0x201
    3cac:	50011d00 	andpl	r1, r1, r0, lsl #26
    3cb0:	00007902 	andeq	r7, r0, r2, lsl #18
    3cb4:	0011241f 	andseq	r2, r1, pc, lsl r4
    3cb8:	000d4d08 	andeq	r4, sp, r8, lsl #26
    3cbc:	51011d00 	tstpl	r1, r0, lsl #26
    3cc0:	1d007502 	cfstr32ne	mvfx7, [r0, #-8]
    3cc4:	30015001 	andcc	r5, r1, r1
    3cc8:	040b0000 	streq	r0, [fp], #-0
    3ccc:	0000026a 	andeq	r0, r0, sl, ror #4
    3cd0:	00144520 	andseq	r4, r4, r0, lsr #10
    3cd4:	0d4a0100 	stfeqe	f0, [sl, #-0]
    3cd8:	60000002 	andvs	r0, r0, r2
    3cdc:	38080011 	stmdacc	r8, {r0, r4}
    3ce0:	01000000 	mrseq	r0, (UNDEF: 0)
    3ce4:	150a139c 	strne	r1, [sl, #-924]	; 0x39c
    3ce8:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    3cec:	0000020d 	andeq	r0, r0, sp, lsl #4
    3cf0:	08001198 	stmdaeq	r0, {r3, r4, r7, r8, ip}
    3cf4:	00000048 	andeq	r0, r0, r8, asr #32
    3cf8:	06be9c01 	ldrteq	r9, [lr], r1, lsl #24
    3cfc:	52210000 	eorpl	r0, r1, #0
    3d00:	7a010065 	bvc	43e9c <__Stack_Size+0x43a9c>
    3d04:	0000020d 	andeq	r0, r0, sp, lsl #4
    3d08:	00001777 	andeq	r1, r0, r7, ror r7
    3d0c:	162a1300 	strtne	r1, [sl], -r0, lsl #6
    3d10:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    3d14:	0000020d 	andeq	r0, r0, sp, lsl #4
    3d18:	080011e0 	stmdaeq	r0, {r5, r6, r7, r8, ip}
    3d1c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3d20:	07969c01 	ldreq	r9, [r6, r1, lsl #24]
    3d24:	88160000 	ldmdahi	r6, {}	; <UNPREDICTABLE>
    3d28:	01000014 	tsteq	r0, r4, lsl r0
    3d2c:	00003aeb 	andeq	r3, r0, fp, ror #21
    3d30:	00179500 	andseq	r9, r7, r0, lsl #10
    3d34:	0df81600 	ldcleq	6, cr1, [r8]
    3d38:	ec010000 	stc	0, cr0, [r1], {-0}
    3d3c:	0000003a 	andeq	r0, r0, sl, lsr r0
    3d40:	000017cd 	andeq	r1, r0, sp, asr #15
    3d44:	0011fc17 	andseq	pc, r1, r7, lsl ip	; <UNPREDICTABLE>
    3d48:	00009e08 	andeq	r9, r0, r8, lsl #28
    3d4c:	159a1800 	ldrne	r1, [sl, #2048]	; 0x800
    3d50:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    3d54:	00000796 	muleq	r0, r6, r7
    3d58:	00173616 	andseq	r3, r7, r6, lsl r6
    3d5c:	3af70100 	bcc	ffdc4164 <BootRAM+0xed34905>
    3d60:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    3d64:	16000017 			; <UNDEFINED> instruction: 0x16000017
    3d68:	00001752 	andeq	r1, r0, r2, asr r7
    3d6c:	003af801 	eorseq	pc, sl, r1, lsl #16
    3d70:	181f0000 	ldmdane	pc, {}	; <UNPREDICTABLE>
    3d74:	72210000 	eorvc	r0, r1, #0
    3d78:	01005045 	tsteq	r0, r5, asr #32
    3d7c:	00003af9 	strdeq	r3, [r0], -r9
    3d80:	0017f600 	andseq	pc, r7, r0, lsl #12
    3d84:	127c1500 	rsbsne	r1, ip, #0, 10
    3d88:	00120800 	andseq	r0, r2, r0, lsl #16
    3d8c:	07540000 	ldrbeq	r0, [r4, -r0]
    3d90:	811a0000 	tsthi	sl, r0
    3d94:	01000004 	tsteq	r0, r4
    3d98:	004c012f 	subeq	r0, ip, pc, lsr #2
    3d9c:	18370000 	ldmdane	r7!, {}	; <UNPREDICTABLE>
    3da0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    3da4:	08001256 	stmdaeq	r0, {r1, r2, r4, r6, r9, ip}
    3da8:	00000d64 	andeq	r0, r0, r4, ror #26
    3dac:	00000768 	andeq	r0, r0, r8, ror #14
    3db0:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    3db4:	1e000074 	mcrne	0, 0, r0, cr0, cr4, {3}
    3db8:	0800125e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, ip}
    3dbc:	00000d76 	andeq	r0, r0, r6, ror sp
    3dc0:	00000782 	andeq	r0, r0, r2, lsl #15
    3dc4:	0251011d 	subseq	r0, r1, #1073741831	; 0x40000007
    3dc8:	011d3008 	tsteq	sp, r8
    3dcc:	00740250 	rsbseq	r0, r4, r0, asr r2
    3dd0:	12762200 	rsbsne	r2, r6, #0, 4
    3dd4:	0d8d0800 	stceq	8, cr0, [sp]
    3dd8:	7c220000 	stcvc	0, cr0, [r2], #-0
    3ddc:	a4080012 	strge	r0, [r8], #-18
    3de0:	0000000d 	andeq	r0, r0, sp
    3de4:	9a040b00 	bls	1069ec <__Stack_Size+0x1065ec>
    3de8:	23000002 	movwcs	r0, #2
    3dec:	00001550 	andeq	r1, r0, r0, asr r5
    3df0:	0d014201 	sfmeq	f4, 4, [r1, #-4]
    3df4:	b0000002 	andlt	r0, r0, r2
    3df8:	84080012 	strhi	r0, [r8], #-18
    3dfc:	01000000 	mrseq	r0, (UNDEF: 0)
    3e00:	00082b9c 	muleq	r8, ip, fp
    3e04:	17521a00 	ldrbne	r1, [r2, -r0, lsl #20]
    3e08:	44010000 	strmi	r0, [r1], #-0
    3e0c:	00003a01 	andeq	r3, r0, r1, lsl #20
    3e10:	00186500 	andseq	r6, r8, r0, lsl #10
    3e14:	17361a00 	ldrne	r1, [r6, -r0, lsl #20]!
    3e18:	45010000 	strmi	r0, [r1, #-0]
    3e1c:	00003a01 	andeq	r3, r0, r1, lsl #20
    3e20:	00188d00 	andseq	r8, r8, r0, lsl #26
    3e24:	45722400 	ldrbmi	r2, [r2, #-1024]!	; 0x400
    3e28:	46010050 			; <UNDEFINED> instruction: 0x46010050
    3e2c:	00003a01 	andeq	r3, r0, r1, lsl #20
    3e30:	00188d00 	andseq	r8, r8, r0, lsl #26
    3e34:	0df81a00 	ldcleq	10, cr1, [r8]
    3e38:	47010000 	strmi	r0, [r1, -r0]
    3e3c:	00003a01 	andeq	r3, r0, r1, lsl #20
    3e40:	0018c200 	andseq	ip, r8, r0, lsl #4
    3e44:	05402500 	strbeq	r2, [r0, #-1280]	; 0x500
    3e48:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
    3e4c:	811a0000 	tsthi	sl, r0
    3e50:	01000004 	tsteq	r0, r4
    3e54:	004c0163 	subeq	r0, ip, r3, ror #2
    3e58:	18e00000 	stmiane	r0!, {}^	; <UNPREDICTABLE>
    3e5c:	17000000 	strne	r0, [r0, -r0]
    3e60:	08001308 	stmdaeq	r0, {r3, r8, r9, ip}
    3e64:	00000010 	andeq	r0, r0, r0, lsl r0
    3e68:	0004811a 	andeq	r8, r4, sl, lsl r1
    3e6c:	01690100 	cmneq	r9, r0, lsl #2
    3e70:	0000004c 	andeq	r0, r0, ip, asr #32
    3e74:	00001908 	andeq	r1, r0, r8, lsl #18
    3e78:	9f260000 	svcls	0x00260000
    3e7c:	01000015 	tsteq	r0, r5, lsl r0
    3e80:	020d0178 	andeq	r0, sp, #120, 2
    3e84:	13340000 	teqne	r4, #0
    3e88:	00240800 	eoreq	r0, r4, r0, lsl #16
    3e8c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e90:	00086027 	andeq	r6, r8, r7, lsr #32
    3e94:	01920100 	orrseq	r0, r2, r0, lsl #2
    3e98:	000001d7 	ldrdeq	r0, [r0], -r7
    3e9c:	08001358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip}
    3ea0:	0000001c 	andeq	r0, r0, ip, lsl r0
    3ea4:	088c9c01 	stmeq	ip, {r0, sl, fp, ip, pc}
    3ea8:	ea280000 	b	a03eb0 <__Stack_Size+0xa03ab0>
    3eac:	01000014 	tsteq	r0, r4, lsl r0
    3eb0:	004c0192 	umaaleq	r0, ip, r2, r1
    3eb4:	19210000 	stmdbne	r1!, {}	; <UNPREDICTABLE>
    3eb8:	b9280000 	stmdblt	r8!, {}	; <UNPREDICTABLE>
    3ebc:	01000015 	tsteq	r0, r5, lsl r0
    3ec0:	088c0192 	stmeq	ip, {r1, r4, r7, r8}
    3ec4:	19420000 	stmdbne	r2, {}^	; <UNPREDICTABLE>
    3ec8:	431a0000 	tstmi	sl, #0
    3ecc:	01000003 	tsteq	r0, r3
    3ed0:	003a0194 	mlaseq	sl, r4, r1, r0
    3ed4:	196e0000 	stmdbne	lr!, {}^	; <UNPREDICTABLE>
    3ed8:	0b000000 	bleq	3ee0 <__Stack_Size+0x3ae0>
    3edc:	0001dd04 	andeq	sp, r1, r4, lsl #26
    3ee0:	14232700 	strtne	r2, [r3], #-1792	; 0x700
    3ee4:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    3ee8:	00005e03 	andeq	r5, r0, r3, lsl #28
    3eec:	00137400 	andseq	r7, r3, r0, lsl #8
    3ef0:	00004008 	andeq	r4, r0, r8
    3ef4:	bc9c0100 	ldflts	f0, [ip], {0}
    3ef8:	1f000008 	svcne	0x00000008
    3efc:	08001382 	stmdaeq	r0, {r1, r7, r8, r9, ip}
    3f00:	00000d8d 	andeq	r0, r0, sp, lsl #27
    3f04:	0150011d 	cmpeq	r0, sp, lsl r1
    3f08:	29000030 	stmdbcs	r0, {r4, r5}
    3f0c:	00001496 	muleq	r0, r6, r4
    3f10:	01021b01 	tsteq	r2, r1, lsl #22
    3f14:	000008f6 	strdeq	r0, [r0], -r6
    3f18:	00141c2a 	andseq	r1, r4, sl, lsr #24
    3f1c:	021d0100 	andseq	r0, sp, #0, 2
    3f20:	0000020d 	andeq	r0, r0, sp, lsl #4
    3f24:	0015382a 	andseq	r3, r5, sl, lsr #16
    3f28:	021e0100 	andseq	r0, lr, #0, 2
    3f2c:	0000003a 	andeq	r0, r0, sl, lsr r0
    3f30:	0009492a 	andeq	r4, r9, sl, lsr #18
    3f34:	021f0100 	andseq	r0, pc, #0, 2
    3f38:	0000003a 	andeq	r0, r0, sl, lsr r0
    3f3c:	0014912b 	andseq	r9, r4, fp, lsr #2
    3f40:	028b0100 	addeq	r0, fp, #0, 2
    3f44:	14982900 	ldrne	r2, [r8], #2304	; 0x900
    3f48:	97010000 	strls	r0, [r1, -r0]
    3f4c:	09780102 	ldmdbeq	r8!, {r1, r8}^
    3f50:	562a0000 	strtpl	r0, [sl], -r0
    3f54:	01000009 	tsteq	r0, r9
    3f58:	02640299 	rsbeq	r0, r4, #-1879048183	; 0x90000009
    3f5c:	1c2a0000 	stcne	0, cr0, [sl], #-0
    3f60:	01000014 	tsteq	r0, r4, lsl r0
    3f64:	020d029a 	andeq	r0, sp, #-1610612727	; 0xa0000009
    3f68:	812a0000 	teqhi	sl, r0
    3f6c:	01000017 	tsteq	r0, r7, lsl r0
    3f70:	003a029b 	mlaseq	sl, fp, r2, r0
    3f74:	362a0000 	strtcc	r0, [sl], -r0
    3f78:	01000017 	tsteq	r0, r7, lsl r0
    3f7c:	003a029d 	mlaseq	sl, sp, r2, r0
    3f80:	3c2a0000 	stccc	0, cr0, [sl], #-0
    3f84:	01000014 	tsteq	r0, r4, lsl r0
    3f88:	003a029d 	mlaseq	sl, sp, r2, r0
    3f8c:	432a0000 	teqmi	sl, #0
    3f90:	01000003 	tsteq	r0, r3
    3f94:	003a029e 	mlaseq	sl, lr, r2, r0
    3f98:	f82a0000 			; <UNDEFINED> instruction: 0xf82a0000
    3f9c:	0100000d 	tsteq	r0, sp
    3fa0:	003a029e 	mlaseq	sl, lr, r2, r0
    3fa4:	692c0000 	stmdbvs	ip!, {}	; <UNPREDICTABLE>
    3fa8:	2a000009 	bcs	3fd4 <__Stack_Size+0x3bd4>
    3fac:	000014a4 	andeq	r1, r0, r4, lsr #9
    3fb0:	5e02a901 	cdppl	9, 0, cr10, cr2, cr1, {0}
    3fb4:	00000000 	andeq	r0, r0, r0
    3fb8:	02ba2a2d 	adcseq	r2, sl, #184320	; 0x2d000
    3fbc:	25010000 	strcs	r0, [r1, #-0]
    3fc0:	00006f03 	andeq	r6, r0, r3, lsl #30
    3fc4:	23000000 	movwcs	r0, #0
    3fc8:	0000135a 	andeq	r1, r0, sl, asr r3
    3fcc:	5e034c01 	cdppl	12, 0, cr4, cr3, cr1, {0}
    3fd0:	b4000000 	strlt	r0, [r0], #-0
    3fd4:	dc080013 	stcle	0, cr0, [r8], {19}
    3fd8:	01000002 	tsteq	r0, r2
    3fdc:	000ae69c 	muleq	sl, ip, r6
    3fe0:	01042e00 	tsteq	r4, r0, lsl #28
    3fe4:	09b0034f 	ldmibeq	r0!, {r0, r1, r2, r3, r6, r8, r9}
    3fe8:	622f0000 	eorvs	r0, pc, #0
    3fec:	03510100 	cmpeq	r1, #0, 2
    3ff0:	000001d7 	ldrdeq	r0, [r0], -r7
    3ff4:	0100772f 	tsteq	r0, pc, lsr #14
    3ff8:	0ae60352 	beq	ff984d48 <BootRAM+0xe8f54e9>
    3ffc:	1a000000 	bne	4004 <__Stack_Size+0x3c04>
    4000:	0000171d 	andeq	r1, r0, sp, lsl r7
    4004:	92035301 	andls	r5, r3, #67108864	; 0x4000000
    4008:	9f000009 	svcls	0x00000009
    400c:	30000019 	andcc	r0, r0, r9, lsl r0
    4010:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    4014:	080013fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, ip}
    4018:	000000c4 	andeq	r0, r0, r4, asr #1
    401c:	40036701 	andmi	r6, r3, r1, lsl #14
    4020:	1700000a 	strne	r0, [r0, -sl]
    4024:	080013fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, ip}
    4028:	000000c4 	andeq	r0, r0, r4, asr #1
    402c:	0008c931 	andeq	ip, r8, r1, lsr r9
    4030:	0019c200 	andseq	ip, r9, r0, lsl #4
    4034:	08d53100 	ldmeq	r5, {r8, ip, sp}^
    4038:	1a6b0000 	bne	1ac4040 <__Stack_Size+0x1ac3c40>
    403c:	e1310000 	teq	r1, r0
    4040:	7e000008 	cdpvc	0, 0, cr0, cr0, cr8, {0}
    4044:	3200001a 	andcc	r0, r0, #26
    4048:	000008ed 	andeq	r0, r0, sp, ror #17
    404c:	080014b8 	stmdaeq	r0, {r3, r4, r5, r7, sl, ip}
    4050:	00140a22 	andseq	r0, r4, r2, lsr #20
    4054:	00068108 	andeq	r8, r6, r8, lsl #2
    4058:	14441c00 	strbne	r1, [r4], #-3072	; 0xc00
    405c:	0a1a0800 	beq	686064 <__Stack_Size+0x685c64>
    4060:	011d0000 	tsteq	sp, r0
    4064:	00740250 	rsbseq	r0, r4, r0, asr r2
    4068:	145a2200 	ldrbne	r2, [sl], #-512	; 0x200
    406c:	082b0800 	stmdaeq	fp!, {fp}
    4070:	76220000 	strtvc	r0, [r2], -r0
    4074:	be080014 	mcrlt	0, 0, r0, cr8, cr4, {0}
    4078:	22000006 	andcs	r0, r0, #6
    407c:	08001484 	stmdaeq	r0, {r2, r7, sl, ip}
    4080:	00000696 	muleq	r0, r6, r6
    4084:	00149622 	andseq	r9, r4, r2, lsr #12
    4088:	00079c08 	andeq	r9, r7, r8, lsl #24
    408c:	33000000 	movwcc	r0, #0
    4090:	000008f6 	strdeq	r0, [r0], -r6
    4094:	080014be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, sl, ip}
    4098:	00000560 	andeq	r0, r0, r0, ror #10
    409c:	dc036c01 	stcle	12, cr6, [r3], {1}
    40a0:	3400000a 	strcc	r0, [r0], #-10
    40a4:	00000560 	andeq	r0, r0, r0, ror #10
    40a8:	00090331 	andeq	r0, r9, r1, lsr r3
    40ac:	001a9d00 	andseq	r9, sl, r0, lsl #26
    40b0:	090f3100 	stmdbeq	pc, {r8, ip, sp}	; <UNPREDICTABLE>
    40b4:	1b340000 	blne	d040bc <__Stack_Size+0xd03cbc>
    40b8:	1b310000 	blne	c440c0 <__Stack_Size+0xc43cc0>
    40bc:	74000009 	strvc	r0, [r0], #-9
    40c0:	3100001b 	tstcc	r0, fp, lsl r0
    40c4:	00000927 	andeq	r0, r0, r7, lsr #18
    40c8:	00001b9d 	muleq	r0, sp, fp
    40cc:	00093331 	andeq	r3, r9, r1, lsr r3
    40d0:	001bb000 	andseq	fp, fp, r0
    40d4:	093f3100 	ldmdbeq	pc!, {r8, ip, sp}	; <UNPREDICTABLE>
    40d8:	1bcb0000 	blne	ff2c40e0 <BootRAM+0xe234881>
    40dc:	4b310000 	blmi	c440e4 <__Stack_Size+0xc43ce4>
    40e0:	eb000009 	bl	410c <__Stack_Size+0x3d0c>
    40e4:	1500001b 	strne	r0, [r0, #-27]
    40e8:	080014c8 	stmdaeq	r0, {r3, r6, r7, sl, ip}
    40ec:	0000002c 	andeq	r0, r0, ip, lsr #32
    40f0:	00000aaf 	andeq	r0, r0, pc, lsr #21
    40f4:	00095c31 	andeq	r5, r9, r1, lsr ip
    40f8:	001bfe00 	andseq	pc, fp, r0, lsl #28
    40fc:	fc150000 	ldc2	0, cr0, [r5], {-0}
    4100:	60080015 	andvs	r0, r8, r5, lsl r0
    4104:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    4108:	3500000a 	strcc	r0, [r0, #-10]
    410c:	0000096a 	andeq	r0, r0, sl, ror #18
    4110:	226c9102 	rsbcs	r9, ip, #-2147483648	; 0x80000000
    4114:	0800165a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl, ip}
    4118:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    411c:	15be3600 	ldrne	r3, [lr, #1536]!	; 0x600
    4120:	011d0800 	tsteq	sp, r0, lsl #16
    4124:	00740250 	rsbseq	r0, r4, r0, asr r2
    4128:	22000000 	andcs	r0, r0, #0
    412c:	0800166c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, ip}
    4130:	00000892 	muleq	r0, r2, r8
    4134:	4c040b00 	stcmi	11, cr0, [r4], {-0}
    4138:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    413c:	00001769 	andeq	r1, r0, r9, ror #14
    4140:	0101a701 	tsteq	r1, r1, lsl #14
    4144:	00000b2c 	andeq	r0, r0, ip, lsr #22
    4148:	0017222a 	andseq	r2, r7, sl, lsr #4
    414c:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
    4150:	0000067b 	andeq	r0, r0, fp, ror r6
    4154:	0014e42a 	andseq	lr, r4, sl, lsr #8
    4158:	01aa0100 			; <UNDEFINED> instruction: 0x01aa0100
    415c:	0000003a 	andeq	r0, r0, sl, lsr r0
    4160:	14352a2d 	ldrtne	r2, [r5], #-2605	; 0xa2d
    4164:	b0010000 	andlt	r0, r1, r0
    4168:	0001d701 	andeq	sp, r1, r1, lsl #14
    416c:	14ea2a00 	strbtne	r2, [sl], #2560	; 0xa00
    4170:	b1010000 	mrslt	r0, (UNDEF: 1)
    4174:	00003a01 	andeq	r3, r0, r1, lsl #20
    4178:	23000000 	movwcs	r0, #0
    417c:	000013a4 	andeq	r1, r0, r4, lsr #7
    4180:	5e03a001 	cdppl	0, 0, cr10, cr3, cr1, {0}
    4184:	90000000 	andls	r0, r0, r0
    4188:	c8080016 	stmdagt	r8, {r1, r2, r4}
    418c:	01000000 	mrseq	r0, (UNDEF: 0)
    4190:	000bfe9c 	muleq	fp, ip, lr
    4194:	09491a00 	stmdbeq	r9, {r9, fp, ip}^
    4198:	a2010000 	andge	r0, r1, #0
    419c:	00003a03 	andeq	r3, r0, r3, lsl #20
    41a0:	001c2800 	andseq	r2, ip, r0, lsl #16
    41a4:	0aec3000 	beq	ffb101ac <BootRAM+0xea8094d>
    41a8:	16a00000 	strtne	r0, [r0], r0
    41ac:	007e0800 	rsbseq	r0, lr, r0, lsl #16
    41b0:	a6010000 	strge	r0, [r1], -r0
    41b4:	000bf403 	andeq	pc, fp, r3, lsl #8
    41b8:	16a01700 	strtne	r1, [r0], r0, lsl #14
    41bc:	007e0800 	rsbseq	r0, lr, r0, lsl #16
    41c0:	f9310000 			; <UNDEFINED> instruction: 0xf9310000
    41c4:	7500000a 	strvc	r0, [r0, #-10]
    41c8:	3100001c 	tstcc	r0, ip, lsl r0
    41cc:	00000b05 	andeq	r0, r0, r5, lsl #22
    41d0:	00001c8a 	andeq	r1, r0, sl, lsl #25
    41d4:	0016a815 	andseq	sl, r6, r5, lsl r8
    41d8:	00002a08 	andeq	r2, r0, r8, lsl #20
    41dc:	000bde00 	andeq	sp, fp, r0, lsl #28
    41e0:	0b123100 	bleq	4905e8 <__Stack_Size+0x4901e8>
    41e4:	1c9d0000 	ldcne	0, cr0, [sp], {0}
    41e8:	1e310000 	cdpne	0, 3, cr0, cr1, cr0, {0}
    41ec:	bb00000b 	bllt	4220 <__Stack_Size+0x3e20>
    41f0:	1c00001c 	stcne	0, cr0, [r0], {28}
    41f4:	080016b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, ip}
    41f8:	00000bb4 			; <UNDEFINED> instruction: 0x00000bb4
    41fc:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    4200:	1e000076 	mcrne	0, 0, r0, cr0, cr6, {3}
    4204:	080016c8 	stmdaeq	r0, {r3, r6, r7, r9, sl, ip}
    4208:	00000db6 			; <UNDEFINED> instruction: 0x00000db6
    420c:	00000bc7 	andeq	r0, r0, r7, asr #23
    4210:	0150011d 	cmpeq	r0, sp, lsl r1
    4214:	d21f0030 	andsle	r0, pc, #48	; 0x30
    4218:	cc080016 	stcgt	0, cr0, [r8], {22}
    421c:	1d00000d 	stcne	0, cr0, [r0, #-52]	; 0xffffffcc
    4220:	76025201 	strvc	r5, [r2], -r1, lsl #4
    4224:	50011d00 	andpl	r1, r1, r0, lsl #26
    4228:	00007702 	andeq	r7, r0, r2, lsl #14
    422c:	16e61f00 	strbtne	r1, [r6], r0, lsl #30
    4230:	0d4d0800 	stcleq	8, cr0, [sp, #-0]
    4234:	011d0000 	tsteq	sp, r0
    4238:	1d300151 	ldfnes	f0, [r0, #-324]!	; 0xfffffebc
    423c:	30015001 	andcc	r5, r1, r1
    4240:	37000000 	strcc	r0, [r0, -r0]
    4244:	0800173e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, sl, ip}
    4248:	00000892 	muleq	r0, r2, r8
    424c:	00213800 	eoreq	r3, r1, r0, lsl #16
    4250:	dd010000 	stcle	0, cr0, [r1, #-0]
    4254:	00175803 	andseq	r5, r7, r3, lsl #16
    4258:	00003808 	andeq	r3, r0, r8, lsl #16
    425c:	439c0100 	orrsmi	r0, ip, #0, 2
    4260:	3900000c 	stmdbcc	r0, {r2, r3}
    4264:	006c6156 	rsbeq	r6, ip, r6, asr r1
    4268:	5e03dd01 	cdppl	13, 0, cr13, cr3, cr1, {0}
    426c:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    4270:	2400001c 	strcs	r0, [r0], #-28
    4274:	df010069 	svcle	0x00010069
    4278:	00003a03 	andeq	r3, r0, r3, lsl #20
    427c:	001d0f00 	andseq	r0, sp, r0, lsl #30
    4280:	456e2400 	strbmi	r2, [lr, #-1024]!	; 0x400
    4284:	e0010050 	and	r0, r1, r0, asr r0
    4288:	00003a03 	andeq	r3, r0, r3, lsl #20
    428c:	001d2e00 	andseq	r2, sp, r0, lsl #28
    4290:	98230000 	stmdals	r3!, {}	; <UNPREDICTABLE>
    4294:	01000013 	tsteq	r0, r3, lsl r0
    4298:	005e0378 	subseq	r0, lr, r8, ror r3
    429c:	17900000 	ldrne	r0, [r0, r0]
    42a0:	005c0800 	subseq	r0, ip, r0, lsl #16
    42a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    42a8:	00000c89 	andeq	r0, r0, r9, lsl #25
    42ac:	0009491a 	andeq	r4, r9, sl, lsl r9
    42b0:	037a0100 	cmneq	sl, #0, 2
    42b4:	0000003a 	andeq	r0, r0, sl, lsr r0
    42b8:	00001d41 	andeq	r1, r0, r1, asr #26
    42bc:	0017a422 	andseq	sl, r7, r2, lsr #8
    42c0:	0005b608 	andeq	fp, r5, r8, lsl #12
    42c4:	17c02200 	strbne	r2, [r0, r0, lsl #4]
    42c8:	0bfe0800 	bleq	fff862d0 <BootRAM+0xeef6a71>
    42cc:	de370000 	cdple	0, 3, cr0, cr7, cr0, {0}
    42d0:	92080017 	andls	r0, r8, #23
    42d4:	00000008 	andeq	r0, r0, r8
    42d8:	0014fe3a 	andseq	pc, r4, sl, lsr lr	; <UNPREDICTABLE>
    42dc:	03f10100 	mvnseq	r0, #0, 2
    42e0:	00000000 	andeq	r0, r0, r0
    42e4:	00000002 	andeq	r0, r0, r2
    42e8:	173b9c01 	ldrne	r9, [fp, -r1, lsl #24]!
    42ec:	04000006 	streq	r0, [r0], #-6
    42f0:	00046bec 	andeq	r6, r4, ip, ror #23
    42f4:	026c3b00 	rsbeq	r3, ip, #0, 22
    42f8:	ee040000 	cdp	0, 0, cr0, cr4, cr0, {0}
    42fc:	0000029a 	muleq	r0, sl, r2
    4300:	0013693b 	andseq	r6, r3, fp, lsr r9
    4304:	4cf20400 	cfldrdmi	mvd0, [r2]
    4308:	3b000000 	blcc	4310 <__Stack_Size+0x3f10>
    430c:	00001374 	andeq	r1, r0, r4, ror r3
    4310:	004cf304 	subeq	pc, ip, r4, lsl #6
    4314:	a23b0000 	eorsge	r0, fp, #0
    4318:	05000002 	streq	r0, [r0, #-2]
    431c:	000cd222 	andeq	sp, ip, r2, lsr #4
    4320:	81040b00 	tsthi	r4, r0, lsl #22
    4324:	3b000003 	blcc	4338 <__Stack_Size+0x3f38>
    4328:	0000055f 	andeq	r0, r0, pc, asr r5
    432c:	0ce32505 	cfstr64eq	mvdx2, [r3], #20
    4330:	040b0000 	streq	r0, [fp], #-0
    4334:	0000046b 	andeq	r0, r0, fp, ror #8
    4338:	0013d63b 	andseq	sp, r3, fp, lsr r6
    433c:	f42a0500 	vld3.8	{d0,d2,d4}, [sl], r0
    4340:	0b00000c 	bleq	4378 <__Stack_Size+0x3f78>
    4344:	0004ef04 	andeq	lr, r4, r4, lsl #30
    4348:	17473c00 	strbne	r3, [r7, -r0, lsl #24]
    434c:	24010000 	strcs	r0, [r1], #-0
    4350:	000002e5 	andeq	r0, r0, r5, ror #5
    4354:	02060305 	andeq	r0, r6, #335544320	; 0x14000000
    4358:	833c2000 	teqhi	ip, #0
    435c:	01000015 	tsteq	r0, r5, lsl r0
    4360:	00009425 	andeq	r9, r0, r5, lsr #8
    4364:	20030500 	andcs	r0, r3, r0, lsl #10
    4368:	3d20000a 	stccc	0, cr0, [r0, #-40]!	; 0xffffffd8
    436c:	000012fb 	strdeq	r1, [r0], -fp
    4370:	4c025307 	stcmi	3, cr5, [r2], {7}
    4374:	32000000 	andcc	r0, r0, #0
    4378:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    437c:	0000005e 	andeq	r0, r0, lr, asr r0
    4380:	14d03e00 	ldrbne	r3, [r0], #3584	; 0xe00
    4384:	19060000 	stmdbne	r6, {}	; <UNPREDICTABLE>
    4388:	00000d4d 	andeq	r0, r0, sp, asr #26
    438c:	0001d70d 	andeq	sp, r1, sp, lsl #14
    4390:	004c0d00 	subeq	r0, ip, r0, lsl #26
    4394:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    4398:	00000000 	andeq	r0, r0, r0
    439c:	0011cd3f 	andseq	ip, r1, pc, lsr sp
    43a0:	02560700 	subseq	r0, r6, #0, 14
    43a4:	00000d64 	andeq	r0, r0, r4, ror #26
    43a8:	00005e0d 	andeq	r5, r0, sp, lsl #28
    43ac:	004c0d00 	subeq	r0, ip, r0, lsl #26
    43b0:	3f000000 	svccc	0x00000000
    43b4:	00001307 	andeq	r1, r0, r7, lsl #6
    43b8:	76024e07 	strvc	r4, [r2], -r7, lsl #28
    43bc:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    43c0:	0000005e 	andeq	r0, r0, lr, asr r0
    43c4:	13143f00 	tstne	r4, #0, 30
    43c8:	3a070000 	bcc	1c43d0 <__Stack_Size+0x1c3fd0>
    43cc:	000d8d02 	andeq	r8, sp, r2, lsl #26
    43d0:	005e0d00 	subseq	r0, lr, r0, lsl #26
    43d4:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    43d8:	00000000 	andeq	r0, r0, r0
    43dc:	0007bd3f 	andeq	fp, r7, pc, lsr sp
    43e0:	02570700 	subseq	r0, r7, #0, 14
    43e4:	00000da4 	andeq	r0, r0, r4, lsr #27
    43e8:	00005e0d 	andeq	r5, r0, sp, lsl #28
    43ec:	004c0d00 	subeq	r0, ip, r0, lsl #26
    43f0:	3f000000 	svccc	0x00000000
    43f4:	00001054 	andeq	r1, r0, r4, asr r0
    43f8:	b6024d07 	strlt	r4, [r2], -r7, lsl #26
    43fc:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    4400:	0000005e 	andeq	r0, r0, lr, asr r0
    4404:	10de3d00 	sbcsne	r3, lr, r0, lsl #26
    4408:	54070000 	strpl	r0, [r7], #-0
    440c:	00004c02 	andeq	r4, r0, r2, lsl #24
    4410:	000dcc00 	andeq	ip, sp, r0, lsl #24
    4414:	005e0d00 	subseq	r0, lr, r0, lsl #26
    4418:	40000000 	andmi	r0, r0, r0
    441c:	0000167d 	andeq	r1, r0, sp, ror r6
    4420:	d70d1a06 	strle	r1, [sp, -r6, lsl #20]
    4424:	0d000001 	stceq	0, cr0, [r0, #-4]
    4428:	0000004c 	andeq	r0, r0, ip, asr #32
    442c:	00004c0d 	andeq	r4, r0, sp, lsl #24
    4430:	70000000 	andvc	r0, r0, r0
    4434:	04000001 	streq	r0, [r0], #-1
    4438:	0013ee00 	andseq	lr, r3, r0, lsl #28
    443c:	7e010400 	cfcpysvc	mvf0, mvf1
    4440:	01000001 	tsteq	r0, r1
    4444:	000017b7 			; <UNDEFINED> instruction: 0x000017b7
    4448:	00000032 	andeq	r0, r0, r2, lsr r0
    444c:	00000600 	andeq	r0, r0, r0, lsl #12
    4450:	00000000 	andeq	r0, r0, r0
    4454:	000013f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    4458:	1c050402 	cfstrsne	mvf0, [r5], {2}
    445c:	02000002 	andeq	r0, r0, #2
    4460:	06c80502 	strbeq	r0, [r8], r2, lsl #10
    4464:	01020000 	mrseq	r0, (UNDEF: 2)
    4468:	00067406 	andeq	r7, r6, r6, lsl #8
    446c:	33750300 	cmncc	r5, #0, 6
    4470:	24020032 	strcs	r0, [r2], #-50	; 0x32
    4474:	00000045 	andeq	r0, r0, r5, asr #32
    4478:	a1070402 	tstge	r7, r2, lsl #8
    447c:	03000003 	movweq	r0, #3
    4480:	00363175 	eorseq	r3, r6, r5, ror r1
    4484:	00572502 	subseq	r2, r7, r2, lsl #10
    4488:	02020000 	andeq	r0, r2, #0
    448c:	0003fd07 	andeq	pc, r3, r7, lsl #26
    4490:	38750300 	ldmdacc	r5!, {r8, r9}^
    4494:	68260200 	stmdavs	r6!, {r9}
    4498:	02000000 	andeq	r0, r0, #0
    449c:	06720801 	ldrbteq	r0, [r2], -r1, lsl #16
    44a0:	04040000 	streq	r0, [r4], #-0
    44a4:	0000005e 	andeq	r0, r0, lr, asr r0
    44a8:	0014d005 	andseq	sp, r4, r5
    44ac:	ec230100 	stfs	f0, [r3], #-0
    44b0:	30080017 	andcc	r0, r8, r7, lsl r0
    44b4:	01000000 	mrseq	r0, (UNDEF: 0)
    44b8:	0000fd9c 	muleq	r0, ip, sp
    44bc:	17d10600 	ldrbne	r0, [r1, r0, lsl #12]
    44c0:	23010000 	movwcs	r0, #4096	; 0x1000
    44c4:	0000006f 	andeq	r0, r0, pc, rrx
    44c8:	00001d87 	andeq	r1, r0, r7, lsl #27
    44cc:	0017e606 	andseq	lr, r7, r6, lsl #12
    44d0:	4c230100 	stfmis	f0, [r3], #-0
    44d4:	cc000000 	stcgt	0, cr0, [r0], {-0}
    44d8:	0600001d 			; <UNDEFINED> instruction: 0x0600001d
    44dc:	000017c9 	andeq	r1, r0, r9, asr #15
    44e0:	004c2301 	subeq	r2, ip, r1, lsl #6
    44e4:	1ded0000 	stclne	0, cr0, [sp]
    44e8:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    44ec:	3a250100 	bcc	9448f4 <__Stack_Size+0x9444f4>
    44f0:	01000000 	mrseq	r0, (UNDEF: 0)
    44f4:	00690852 	rsbeq	r0, r9, r2, asr r8
    44f8:	003a2601 	eorseq	r2, sl, r1, lsl #12
    44fc:	1e0e0000 	cdpne	0, 0, cr0, cr14, cr0, {0}
    4500:	da090000 	ble	244508 <__Stack_Size+0x244108>
    4504:	01000017 	tsteq	r0, r7, lsl r0
    4508:	00003a26 	andeq	r3, r0, r6, lsr #20
    450c:	001e6d00 	andseq	r6, lr, r0, lsl #26
    4510:	17e00900 	strbne	r0, [r0, r0, lsl #18]!
    4514:	26010000 	strcs	r0, [r1], -r0
    4518:	0000003a 	andeq	r0, r0, sl, lsr r0
    451c:	00001ea4 	andeq	r1, r0, r4, lsr #29
    4520:	0017f209 	andseq	pc, r7, r9, lsl #4
    4524:	fd270100 	stc2	1, cr0, [r7, #-0]
    4528:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    452c:	0000001e 	andeq	r0, r0, lr, lsl r0
    4530:	004c0404 	subeq	r0, ip, r4, lsl #8
    4534:	7d050000 	stcvc	0, cr0, [r5, #-0]
    4538:	01000016 	tsteq	r0, r6, lsl r0
    453c:	00181c3c 	andseq	r1, r8, ip, lsr ip
    4540:	00002408 	andeq	r2, r0, r8, lsl #8
    4544:	6d9c0100 	ldfvss	f0, [ip]
    4548:	06000001 	streq	r0, [r0], -r1
    454c:	000017d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    4550:	006f3c01 	rsbeq	r3, pc, r1, lsl #24
    4554:	1f030000 	svcne	0x00030000
    4558:	e6060000 	str	r0, [r6], -r0
    455c:	01000017 	tsteq	r0, r7, lsl r0
    4560:	00004c3c 	andeq	r4, r0, ip, lsr ip
    4564:	001f3e00 	andseq	r3, pc, r0, lsl #28
    4568:	17c90600 	strbne	r0, [r9, r0, lsl #12]
    456c:	3c010000 	stccc	0, cr0, [r1], {-0}
    4570:	0000004c 	andeq	r0, r0, ip, asr #32
    4574:	00001f5f 	andeq	r1, r0, pc, asr pc
    4578:	01006e07 	tsteq	r0, r7, lsl #28
    457c:	00003a3e 	andeq	r3, r0, lr, lsr sl
    4580:	08520100 	ldmdaeq	r2, {r8}^
    4584:	3f010069 	svccc	0x00010069
    4588:	0000003a 	andeq	r0, r0, sl, lsr r0
    458c:	00001f80 	andeq	r1, r0, r0, lsl #31
    4590:	0017f209 	andseq	pc, r7, r9, lsl #4
    4594:	6d400100 	stfvse	f0, [r0, #-0]
    4598:	df000001 	svcle	0x00000001
    459c:	0000001f 	andeq	r0, r0, pc, lsl r0
    45a0:	003a0404 	eorseq	r0, sl, r4, lsl #8
    45a4:	Address 0x00000000000045a4 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	03065506 	movweq	r5, #25862	; 0x6506
       8:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
       c:	00051308 	andeq	r1, r5, r8, lsl #6
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	11010000 	mrsne	r0, (UNDEF: 1)
      14:	11061000 	mrsne	r1, (UNDEF: 6)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	03011201 	movweq	r1, #4609	; 0x1201
      1c:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	00051308 	andeq	r1, r5, r8, lsl #6
      24:	11010000 	mrsne	r0, (UNDEF: 1)
      28:	130e2501 	movwne	r2, #58625	; 0xe501
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	1b0e030b 	blne	380c60 <__Stack_Size+0x380860>
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	1117550e 	tstne	r7, lr, lsl #10
      34:	00171001 	andseq	r1, r7, r1
      38:	00240200 	eoreq	r0, r4, r0, lsl #4

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	0b3e0b0b 	bleq	f82c70 <__Stack_Size+0xf82870>

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	00000e03 	andeq	r0, r0, r3, lsl #28
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	03001603 	movweq	r1, #1539	; 0x603
      48:	3b0b3a08 	blcc	2ce870 <__Stack_Size+0x2ce470>
      4c:	0013490b 	andseq	r4, r3, fp, lsl #18

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	00160400 	andseq	r0, r6, r0, lsl #8
      54:	0b3a0e03 	bleq	e83868 <__Stack_Size+0xe83468>
      58:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      5c:	35050000 	strcc	r0, [r5, #-0]
      60:	00134900 	andseq	r4, r3, r0, lsl #18
      64:	01040600 	tsteq	r4, r0, lsl #12
      68:	0b3a0b0b 	bleq	e82c9c <__Stack_Size+0xe8289c>
      6c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      70:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
      74:	1c0e0300 	stcne	3, cr0, [lr], {-0}
      78:	0800000d 	stmdaeq	r0, {r0, r2, r3}
      7c:	0b0b0113 	bleq	2c04d0 <__Stack_Size+0x2c00d0>
      80:	0b3b0b3a 	bleq	ec2d70 <__Stack_Size+0xec2970>
      84:	00001301 	andeq	r1, r0, r1, lsl #6
      88:	03000d09 	movweq	r0, #3337	; 0xd09
      8c:	3b0b3a0e 	blcc	2ce8cc <__Stack_Size+0x2ce4cc>
      90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      94:	0a00000b 	beq	c8 <_Minimum_Stack_Size-0x38>
      98:	0b0b000f 	bleq	2c00dc <__Stack_Size+0x2bfcdc>
      9c:	00001349 	andeq	r1, r0, r9, asr #6
      a0:	2700150b 	strcs	r1, [r0, -fp, lsl #10]
      a4:	0c000019 	stceq	0, cr0, [r0], {25}
      a8:	0e030104 	adfeqs	f0, f3, f4
      ac:	0b3a0b0b 	bleq	e82ce0 <__Stack_Size+0xe828e0>
      b0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      b4:	130d0000 	movwne	r0, #53248	; 0xd000
      b8:	0b0e0301 	bleq	380cc4 <__Stack_Size+0x3808c4>
      bc:	3b0b3a0b 	blcc	2ce8f0 <__Stack_Size+0x2ce4f0>
      c0:	0013010b 	andseq	r0, r3, fp, lsl #2
      c4:	01150e00 	tsteq	r5, r0, lsl #28
      c8:	13491927 	movtne	r1, #39207	; 0x9927
      cc:	00001301 	andeq	r1, r0, r1, lsl #6
      d0:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
      d4:	10000013 	andne	r0, r0, r3, lsl r0
      d8:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
      dc:	0b3a0b0b 	bleq	e82d10 <__Stack_Size+0xe82910>
      e0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      e4:	0d110000 	ldceq	0, cr0, [r1, #-0]
      e8:	3a080300 	bcc	200cf0 <__Stack_Size+0x2008f0>
      ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      f0:	000b3813 	andeq	r3, fp, r3, lsl r8
      f4:	01171200 	tsteq	r7, r0, lsl #4
      f8:	0b3a0b0b 	bleq	e82d2c <__Stack_Size+0xe8292c>
      fc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     100:	0d130000 	ldceq	0, cr0, [r3, #-0]
     104:	3a080300 	bcc	200d0c <__Stack_Size+0x20090c>
     108:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     10c:	14000013 	strne	r0, [r0], #-19
     110:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     114:	0b3a0e03 	bleq	e83928 <__Stack_Size+0xe83528>
     118:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     11c:	0b201349 	bleq	804e48 <__Stack_Size+0x804a48>
     120:	00001301 	andeq	r1, r0, r1, lsl #6
     124:	03000515 	movweq	r0, #1301	; 0x515
     128:	3b0b3a0e 	blcc	2ce968 <__Stack_Size+0x2ce568>
     12c:	00134905 	andseq	r4, r3, r5, lsl #18
     130:	002e1600 	eoreq	r1, lr, r0, lsl #12
     134:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     138:	0b3b0b3a 	bleq	ec2e28 <__Stack_Size+0xec2a28>
     13c:	0b201927 	bleq	8065e0 <__Stack_Size+0x8061e0>
     140:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
     144:	03193f00 	tsteq	r9, #0, 30
     148:	3b0b3a0e 	blcc	2ce988 <__Stack_Size+0x2ce588>
     14c:	1119270b 	tstne	r9, fp, lsl #14
     150:	40061201 	andmi	r1, r6, r1, lsl #4
     154:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     158:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     15c:	03193f00 	tsteq	r9, #0, 30
     160:	3b0b3a0e 	blcc	2ce9a0 <__Stack_Size+0x2ce5a0>
     164:	11192705 	tstne	r9, r5, lsl #14
     168:	40061201 	andmi	r1, r6, r1, lsl #4
     16c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     170:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     174:	03193f01 	tsteq	r9, #1, 30
     178:	3b0b3a0e 	blcc	2ce9b8 <__Stack_Size+0x2ce5b8>
     17c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     180:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     184:	97184006 	ldrls	r4, [r8, -r6]
     188:	13011942 	movwne	r1, #6466	; 0x1942
     18c:	051a0000 	ldreq	r0, [sl, #-0]
     190:	3a0e0300 	bcc	380d98 <__Stack_Size+0x380998>
     194:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     198:	00170213 	andseq	r0, r7, r3, lsl r2
     19c:	00051b00 	andeq	r1, r5, r0, lsl #22
     1a0:	0b3a0e03 	bleq	e839b4 <__Stack_Size+0xe835b4>
     1a4:	1349053b 	movtne	r0, #38203	; 0x953b
     1a8:	00001802 	andeq	r1, r0, r2, lsl #16
     1ac:	3f012e1c 	svccc	0x00012e1c
     1b0:	3a0e0319 	bcc	380e1c <__Stack_Size+0x380a1c>
     1b4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     1b8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     1bc:	97184006 	ldrls	r4, [r8, -r6]
     1c0:	13011942 	movwne	r1, #6466	; 0x1942
     1c4:	0b1d0000 	bleq	7401cc <__Stack_Size+0x73fdcc>
     1c8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     1cc:	00130106 	andseq	r0, r3, r6, lsl #2
     1d0:	00341e00 	eorseq	r1, r4, r0, lsl #28
     1d4:	0b3a0e03 	bleq	e839e8 <__Stack_Size+0xe835e8>
     1d8:	1349053b 	movtne	r0, #38203	; 0x953b
     1dc:	00001702 	andeq	r1, r0, r2, lsl #14
     1e0:	0182891f 	orreq	r8, r2, pc, lsl r9
     1e4:	31011100 	mrscc	r1, (UNDEF: 17)
     1e8:	20000013 	andcs	r0, r0, r3, lsl r0
     1ec:	01018289 	smlabbeq	r1, r9, r2, r8
     1f0:	13310111 	teqne	r1, #1073741828	; 0x40000004
     1f4:	00001301 	andeq	r1, r0, r1, lsl #6
     1f8:	01828a21 	orreq	r8, r2, r1, lsr #20
     1fc:	91180200 	tstls	r8, r0, lsl #4
     200:	00001842 	andeq	r1, r0, r2, asr #16
     204:	01828922 	orreq	r8, r2, r2, lsr #18
     208:	95011101 	strls	r1, [r1, #-257]	; 0x101
     20c:	13311942 	teqne	r1, #1081344	; 0x108000
     210:	89230000 	stmdbhi	r3!, {}	; <UNPREDICTABLE>
     214:	11010182 	smlabbne	r1, r2, r1, r0
     218:	24000001 	strcs	r0, [r0], #-1
     21c:	08030005 	stmdaeq	r3, {r0, r2}
     220:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     224:	17021349 	strne	r1, [r2, -r9, asr #6]
     228:	89250000 	stmdbhi	r5!, {}	; <UNPREDICTABLE>
     22c:	11000182 	smlabbne	r0, r2, r1, r0
     230:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     234:	00001331 	andeq	r1, r0, r1, lsr r3
     238:	03003426 	movweq	r3, #1062	; 0x426
     23c:	3b0b3a0e 	blcc	2cea7c <__Stack_Size+0x2ce67c>
     240:	00134905 	andseq	r4, r3, r5, lsl #18
     244:	012e2700 	teqeq	lr, r0, lsl #14
     248:	01111331 	tsteq	r1, r1, lsr r3
     24c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     250:	01194297 			; <UNDEFINED> instruction: 0x01194297
     254:	28000013 	stmdacs	r0, {r0, r1, r4}
     258:	13310005 	teqne	r1, #5
     25c:	00001702 	andeq	r1, r0, r2, lsl #14
     260:	11010b29 	tstne	r1, r9, lsr #22
     264:	00061201 	andeq	r1, r6, r1, lsl #4
     268:	012e2a00 	teqeq	lr, r0, lsl #20
     26c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     270:	0b3b0b3a 	bleq	ec2f60 <__Stack_Size+0xec2b60>
     274:	01111927 	tsteq	r1, r7, lsr #18
     278:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     27c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     280:	2b000013 	blcs	2d4 <_Minimum_Stack_Size+0x1d4>
     284:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     288:	0b3b0b3a 	bleq	ec2f78 <__Stack_Size+0xec2b78>
     28c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     290:	1d2c0000 	stcne	0, cr0, [ip, #-0]
     294:	11133101 	tstne	r3, r1, lsl #2
     298:	58061201 	stmdapl	r6, {r0, r9, ip}
     29c:	010b590b 	tsteq	fp, fp, lsl #18
     2a0:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     2a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     2a8:	0b3b0b3a 	bleq	ec2f98 <__Stack_Size+0xec2b98>
     2ac:	17021349 	strne	r1, [r2, -r9, asr #6]
     2b0:	052e0000 	streq	r0, [lr, #-0]!
     2b4:	3a0e0300 	bcc	380ebc <__Stack_Size+0x380abc>
     2b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2bc:	00170213 	andseq	r0, r7, r3, lsl r2
     2c0:	012e2f00 	teqeq	lr, r0, lsl #30
     2c4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     2c8:	0b3b0b3a 	bleq	ec2fb8 <__Stack_Size+0xec2bb8>
     2cc:	13491927 	movtne	r1, #39207	; 0x9927
     2d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     2d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     2d8:	00130119 	andseq	r0, r3, r9, lsl r1
     2dc:	00343000 	eorseq	r3, r4, r0
     2e0:	0b3a0e03 	bleq	e83af4 <__Stack_Size+0xe836f4>
     2e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2e8:	00000b1c 	andeq	r0, r0, ip, lsl fp
     2ec:	3f002e31 	svccc	0x00002e31
     2f0:	3a0e0319 	bcc	380f5c <__Stack_Size+0x380b5c>
     2f4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     2f8:	11134919 	tstne	r3, r9, lsl r9
     2fc:	40061201 	andmi	r1, r6, r1, lsl #4
     300:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     304:	34320000 	ldrtcc	r0, [r2], #-0
     308:	3a0e0300 	bcc	380f10 <__Stack_Size+0x380b10>
     30c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     310:	00180213 	andseq	r0, r8, r3, lsl r2
     314:	82893300 	addhi	r3, r9, #0, 6
     318:	01110101 	tsteq	r1, r1, lsl #2
     31c:	00001331 	andeq	r1, r0, r1, lsr r3
     320:	3f012e34 	svccc	0x00012e34
     324:	3a0e0319 	bcc	380f90 <__Stack_Size+0x380b90>
     328:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     32c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     330:	96184006 	ldrls	r4, [r8], -r6
     334:	13011942 	movwne	r1, #6466	; 0x1942
     338:	34350000 	ldrtcc	r0, [r5], #-0
     33c:	3a0e0300 	bcc	380f44 <__Stack_Size+0x380b44>
     340:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     344:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     348:	36000018 			; <UNDEFINED> instruction: 0x36000018
     34c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     350:	0b3b0b3a 	bleq	ec3040 <__Stack_Size+0xec2c40>
     354:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     358:	0000193c 	andeq	r1, r0, ip, lsr r9
     35c:	49010137 	stmdbmi	r1, {r0, r1, r2, r4, r5, r8}
     360:	00130113 	andseq	r0, r3, r3, lsl r1
     364:	00213800 	eoreq	r3, r1, r0, lsl #16
     368:	0b2f1349 	bleq	bc5094 <__Stack_Size+0xbc4c94>
     36c:	24390000 	ldrtcs	r0, [r9], #-0
     370:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     374:	0008030b 	andeq	r0, r8, fp, lsl #6
     378:	00213a00 	eoreq	r3, r1, r0, lsl #20
     37c:	2e3b0000 	cdpcs	0, 3, cr0, cr11, cr0, {0}
     380:	03193f00 	tsteq	r9, #0, 30
     384:	3b0b3a0e 	blcc	2cebc4 <__Stack_Size+0x2ce7c4>
     388:	3c19270b 	ldccc	7, cr2, [r9], {11}
     38c:	3c000019 	stccc	0, cr0, [r0], {25}
     390:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     394:	0b3a0e03 	bleq	e83ba8 <__Stack_Size+0xe837a8>
     398:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     39c:	1301193c 	movwne	r1, #6460	; 0x193c
     3a0:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
     3a4:	03193f01 	tsteq	r9, #1, 30
     3a8:	3b0b3a0e 	blcc	2cebe8 <__Stack_Size+0x2ce7e8>
     3ac:	3c19270b 	ldccc	7, cr2, [r9], {11}
     3b0:	00130119 	andseq	r0, r3, r9, lsl r1
     3b4:	002e3e00 	eoreq	r3, lr, r0, lsl #28
     3b8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     3bc:	0b3b0b3a 	bleq	ec30ac <__Stack_Size+0xec2cac>
     3c0:	13491927 	movtne	r1, #39207	; 0x9927
     3c4:	0000193c 	andeq	r1, r0, ip, lsr r9
     3c8:	3f012e3f 	svccc	0x00012e3f
     3cc:	3a0e0319 	bcc	381038 <__Stack_Size+0x380c38>
     3d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     3d4:	3c134919 	ldccc	9, cr4, [r3], {25}
     3d8:	00130119 	andseq	r0, r3, r9, lsl r1
     3dc:	002e4000 	eoreq	r4, lr, r0
     3e0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     3e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     3e8:	13491927 	movtne	r1, #39207	; 0x9927
     3ec:	0000193c 	andeq	r1, r0, ip, lsr r9
     3f0:	01110100 	tsteq	r1, r0, lsl #2
     3f4:	0b130e25 	bleq	4c3c90 <__Stack_Size+0x4c3890>
     3f8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     3fc:	00001710 	andeq	r1, r0, r0, lsl r7
     400:	0b002402 	bleq	9410 <__Stack_Size+0x9010>
     404:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     408:	0300000e 	movweq	r0, #14
     40c:	08030016 	stmdaeq	r3, {r1, r2, r4}
     410:	0b3b0b3a 	bleq	ec3100 <__Stack_Size+0xec2d00>
     414:	00001349 	andeq	r1, r0, r9, asr #6
     418:	03011304 	movweq	r1, #4868	; 0x1304
     41c:	3a0b0b0e 	bcc	2c305c <__Stack_Size+0x2c2c5c>
     420:	010b3b0b 	tsteq	fp, fp, lsl #22
     424:	05000013 	streq	r0, [r0, #-19]
     428:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     42c:	0b3b0b3a 	bleq	ec311c <__Stack_Size+0xec2d1c>
     430:	0b381349 	bleq	e0515c <__Stack_Size+0xe04d5c>
     434:	0f060000 	svceq	0x00060000
     438:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     43c:	07000013 	smladeq	r0, r3, r0, r0
     440:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     444:	0b3b0b3a 	bleq	ec3134 <__Stack_Size+0xec2d34>
     448:	00001349 	andeq	r1, r0, r9, asr #6
     44c:	03003408 	movweq	r3, #1032	; 0x408
     450:	3b0b3a0e 	blcc	2cec90 <__Stack_Size+0x2ce890>
     454:	3f13490b 	svccc	0x0013490b
     458:	00180219 	andseq	r0, r8, r9, lsl r2
     45c:	00240900 	eoreq	r0, r4, r0, lsl #18
     460:	0b3e0b0b 	bleq	f83094 <__Stack_Size+0xf82c94>
     464:	00000803 	andeq	r0, r0, r3, lsl #16
     468:	4901010a 	stmdbmi	r1, {r1, r3, r8}
     46c:	00130113 	andseq	r0, r3, r3, lsl r1
     470:	00210b00 	eoreq	r0, r1, r0, lsl #22
     474:	0b2f1349 	bleq	bc51a0 <__Stack_Size+0xbc4da0>
     478:	01000000 	mrseq	r0, (UNDEF: 0)
     47c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     480:	0e030b13 	vmoveq.32	d3[0], r0
     484:	17550e1b 	smmlane	r5, fp, lr, r0
     488:	17100111 			; <UNDEFINED> instruction: 0x17100111
     48c:	24020000 	strcs	r0, [r2], #-0
     490:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     494:	000e030b 	andeq	r0, lr, fp, lsl #6
     498:	00160300 	andseq	r0, r6, r0, lsl #6
     49c:	0b3a0803 	bleq	e824b0 <__Stack_Size+0xe820b0>
     4a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4a4:	04040000 	streq	r0, [r4], #-0
     4a8:	3a0b0b01 	bcc	2c30b4 <__Stack_Size+0x2c2cb4>
     4ac:	010b3b0b 	tsteq	fp, fp, lsl #22
     4b0:	05000013 	streq	r0, [r0, #-19]
     4b4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     4b8:	00000d1c 	andeq	r0, r0, ip, lsl sp
     4bc:	03001606 	movweq	r1, #1542	; 0x606
     4c0:	3b0b3a0e 	blcc	2ced00 <__Stack_Size+0x2ce900>
     4c4:	0013490b 	andseq	r4, r3, fp, lsl #18
     4c8:	012e0700 	teqeq	lr, r0, lsl #14
     4cc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     4d0:	0b3b0b3a 	bleq	ec31c0 <__Stack_Size+0xec2dc0>
     4d4:	01111349 	tsteq	r1, r9, asr #6
     4d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     4dc:	01194297 			; <UNDEFINED> instruction: 0x01194297
     4e0:	08000013 	stmdaeq	r0, {r0, r1, r4}
     4e4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     4e8:	0b3b0b3a 	bleq	ec31d8 <__Stack_Size+0xec2dd8>
     4ec:	0b1c1349 	bleq	705218 <__Stack_Size+0x704e18>
     4f0:	34090000 	strcc	r0, [r9], #-0
     4f4:	3a0e0300 	bcc	3810fc <__Stack_Size+0x380cfc>
     4f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4fc:	00170213 	andseq	r0, r7, r3, lsl r2
     500:	010b0a00 	tsteq	fp, r0, lsl #20
     504:	06120111 			; <UNDEFINED> instruction: 0x06120111
     508:	00001301 	andeq	r1, r0, r1, lsl #6
     50c:	3f012e0b 	svccc	0x00012e0b
     510:	3a0e0319 	bcc	38117c <__Stack_Size+0x380d7c>
     514:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     518:	01193c13 	tsteq	r9, r3, lsl ip
     51c:	0c000013 	stceq	0, cr0, [r0], {19}
     520:	00000018 	andeq	r0, r0, r8, lsl r0
     524:	0182890d 	orreq	r8, r2, sp, lsl #18
     528:	31011101 	tstcc	r1, r1, lsl #2
     52c:	00130113 	andseq	r0, r3, r3, lsl r1
     530:	828a0e00 	addhi	r0, sl, #0, 28
     534:	18020001 	stmdane	r2, {r0}
     538:	00184291 	mulseq	r8, r1, r2
     53c:	82890f00 	addhi	r0, r9, #0, 30
     540:	01110001 	tsteq	r1, r1
     544:	00001331 	andeq	r1, r0, r1, lsr r3
     548:	01828910 	orreq	r8, r2, r0, lsl r9
     54c:	31011101 	tstcc	r1, r1, lsl #2
     550:	11000013 	tstne	r0, r3, lsl r0
     554:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     558:	0b3b0b3a 	bleq	ec3248 <__Stack_Size+0xec2e48>
     55c:	00001349 	andeq	r1, r0, r9, asr #6
     560:	0b002412 	bleq	95b0 <__Stack_Size+0x91b0>
     564:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     568:	13000008 	movwne	r0, #8
     56c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     570:	0b3b0b3a 	bleq	ec3260 <__Stack_Size+0xec2e60>
     574:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     578:	00001802 	andeq	r1, r0, r2, lsl #16
     57c:	3f012e14 	svccc	0x00012e14
     580:	3a0e0319 	bcc	3811ec <__Stack_Size+0x380dec>
     584:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     588:	3c134919 	ldccc	9, cr4, [r3], {25}
     58c:	00130119 	andseq	r0, r3, r9, lsl r1
     590:	00051500 	andeq	r1, r5, r0, lsl #10
     594:	00001349 	andeq	r1, r0, r9, asr #6
     598:	3f012e16 	svccc	0x00012e16
     59c:	3a0e0319 	bcc	381208 <__Stack_Size+0x380e08>
     5a0:	3c0b3b0b 	stccc	11, cr3, [fp], {11}
     5a4:	00130119 	andseq	r0, r3, r9, lsl r1
     5a8:	002e1700 	eoreq	r1, lr, r0, lsl #14
     5ac:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     5b0:	0b3b0b3a 	bleq	ec32a0 <__Stack_Size+0xec2ea0>
     5b4:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     5b8:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     5bc:	03193f01 	tsteq	r9, #1, 30
     5c0:	3b0b3a0e 	blcc	2cee00 <__Stack_Size+0x2cea00>
     5c4:	3c19270b 	ldccc	7, cr2, [r9], {11}
     5c8:	00130119 	andseq	r0, r3, r9, lsl r1
     5cc:	11010000 	mrsne	r0, (UNDEF: 1)
     5d0:	130e2501 	movwne	r2, #58625	; 0xe501
     5d4:	1b0e030b 	blne	381208 <__Stack_Size+0x380e08>
     5d8:	1117550e 	tstne	r7, lr, lsl #10
     5dc:	00171001 	andseq	r1, r7, r1
     5e0:	00240200 	eoreq	r0, r4, r0, lsl #4
     5e4:	0b3e0b0b 	bleq	f83218 <__Stack_Size+0xf82e18>
     5e8:	00000e03 	andeq	r0, r0, r3, lsl #28
     5ec:	03001603 	movweq	r1, #1539	; 0x603
     5f0:	3b0b3a08 	blcc	2cee18 <__Stack_Size+0x2cea18>
     5f4:	0013490b 	andseq	r4, r3, fp, lsl #18
     5f8:	00160400 	andseq	r0, r6, r0, lsl #8
     5fc:	0b3a0e03 	bleq	e83e10 <__Stack_Size+0xe83a10>
     600:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     604:	35050000 	strcc	r0, [r5, #-0]
     608:	00134900 	andseq	r4, r3, r0, lsl #18
     60c:	00260600 	eoreq	r0, r6, r0, lsl #12
     610:	00001349 	andeq	r1, r0, r9, asr #6
     614:	0b010407 	bleq	41638 <__Stack_Size+0x41238>
     618:	3b0b3a0b 	blcc	2cee4c <__Stack_Size+0x2cea4c>
     61c:	0013010b 	andseq	r0, r3, fp, lsl #2
     620:	00280800 	eoreq	r0, r8, r0, lsl #16
     624:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     628:	13090000 	movwne	r0, #36864	; 0x9000
     62c:	3a0b0b01 	bcc	2c3238 <__Stack_Size+0x2c2e38>
     630:	010b3b0b 	tsteq	fp, fp, lsl #22
     634:	0a000013 	beq	688 <__Stack_Size+0x288>
     638:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     63c:	0b3b0b3a 	bleq	ec332c <__Stack_Size+0xec2f2c>
     640:	0b381349 	bleq	e0536c <__Stack_Size+0xe04f6c>
     644:	0d0b0000 	stceq	0, cr0, [fp, #-0]
     648:	3a0e0300 	bcc	381250 <__Stack_Size+0x380e50>
     64c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     650:	000b3813 	andeq	r3, fp, r3, lsl r8
     654:	01130c00 	tsteq	r3, r0, lsl #24
     658:	0b3a050b 	bleq	e81a8c <__Stack_Size+0xe8168c>
     65c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     660:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     664:	3a0e0300 	bcc	38126c <__Stack_Size+0x380e6c>
     668:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     66c:	00053813 	andeq	r3, r5, r3, lsl r8
     670:	000d0e00 	andeq	r0, sp, r0, lsl #28
     674:	0b3a0803 	bleq	e82688 <__Stack_Size+0xe82288>
     678:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     67c:	00000538 	andeq	r0, r0, r8, lsr r5
     680:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
     684:	00130113 	andseq	r0, r3, r3, lsl r1
     688:	00211000 	eoreq	r1, r1, r0
     68c:	0b2f1349 	bleq	bc53b8 <__Stack_Size+0xbc4fb8>
     690:	13110000 	tstne	r1, #0
     694:	0b0e0301 	bleq	3812a0 <__Stack_Size+0x380ea0>
     698:	3b0b3a0b 	blcc	2ceecc <__Stack_Size+0x2ceacc>
     69c:	0013010b 	andseq	r0, r3, fp, lsl #2
     6a0:	00151200 	andseq	r1, r5, r0, lsl #4
     6a4:	00001927 	andeq	r1, r0, r7, lsr #18
     6a8:	0b000f13 	bleq	42fc <__Stack_Size+0x3efc>
     6ac:	0013490b 	andseq	r4, r3, fp, lsl #18
     6b0:	002e1400 	eoreq	r1, lr, r0, lsl #8
     6b4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     6b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     6bc:	0b201927 	bleq	806b60 <__Stack_Size+0x806760>
     6c0:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     6c4:	03193f01 	tsteq	r9, #1, 30
     6c8:	3b0b3a0e 	blcc	2cef08 <__Stack_Size+0x2ceb08>
     6cc:	2019270b 	andscs	r2, r9, fp, lsl #14
     6d0:	0013010b 	andseq	r0, r3, fp, lsl #2
     6d4:	00051600 	andeq	r1, r5, r0, lsl #12
     6d8:	0b3a0e03 	bleq	e83eec <__Stack_Size+0xe83aec>
     6dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     6e0:	05170000 	ldreq	r0, [r7, #-0]
     6e4:	3a080300 	bcc	2012ec <__Stack_Size+0x200eec>
     6e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6ec:	18000013 	stmdane	r0, {r0, r1, r4}
     6f0:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     6f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     6f8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     6fc:	00130119 	andseq	r0, r3, r9, lsl r1
     700:	00051900 	andeq	r1, r5, r0, lsl #18
     704:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
     708:	051a0000 	ldreq	r0, [sl, #-0]
     70c:	02133100 	andseq	r3, r3, #0, 2
     710:	1b000017 	blne	774 <__Stack_Size+0x374>
     714:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     718:	0b3a0e03 	bleq	e83f2c <__Stack_Size+0xe83b2c>
     71c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     720:	01111349 	tsteq	r1, r9, asr #6
     724:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     728:	01194297 			; <UNDEFINED> instruction: 0x01194297
     72c:	1c000013 	stcne	0, cr0, [r0], {19}
     730:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     734:	0b3b0b3a 	bleq	ec3424 <__Stack_Size+0xec3024>
     738:	17021349 	strne	r1, [r2, -r9, asr #6]
     73c:	051d0000 	ldreq	r0, [sp, #-0]
     740:	3a080300 	bcc	201348 <__Stack_Size+0x200f48>
     744:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     748:	00170213 	andseq	r0, r7, r3, lsl r2
     74c:	012e1e00 	teqeq	lr, r0, lsl #28
     750:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     754:	0b3b0b3a 	bleq	ec3444 <__Stack_Size+0xec3044>
     758:	01111349 	tsteq	r1, r9, asr #6
     75c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     760:	01194297 			; <UNDEFINED> instruction: 0x01194297
     764:	1f000013 	svcne	0x00000013
     768:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     76c:	0b3b0b3a 	bleq	ec345c <__Stack_Size+0xec305c>
     770:	17021349 	strne	r1, [r2, -r9, asr #6]
     774:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     778:	03193f01 	tsteq	r9, #1, 30
     77c:	3b0b3a0e 	blcc	2cefbc <__Stack_Size+0x2cebbc>
     780:	1119270b 	tstne	r9, fp, lsl #14
     784:	40061201 	andmi	r1, r6, r1, lsl #4
     788:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     78c:	00001301 	andeq	r1, r0, r1, lsl #6
     790:	03000521 	movweq	r0, #1313	; 0x521
     794:	3b0b3a0e 	blcc	2cefd4 <__Stack_Size+0x2cebd4>
     798:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     79c:	22000018 	andcs	r0, r0, #24
     7a0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     7a4:	0b3b0b3a 	bleq	ec3494 <__Stack_Size+0xec3094>
     7a8:	17021349 	strne	r1, [r2, -r9, asr #6]
     7ac:	89230000 	stmdbhi	r3!, {}	; <UNPREDICTABLE>
     7b0:	11010182 	smlabbne	r1, r2, r1, r0
     7b4:	01133101 	tsteq	r3, r1, lsl #2
     7b8:	24000013 	strcs	r0, [r0], #-19
     7bc:	0001828a 	andeq	r8, r1, sl, lsl #5
     7c0:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     7c4:	25000018 	strcs	r0, [r0, #-24]
     7c8:	01018289 	smlabbeq	r1, r9, r2, r8
     7cc:	13310111 	teqne	r1, #1073741828	; 0x40000004
     7d0:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
     7d4:	03193f00 	tsteq	r9, #0, 30
     7d8:	3b0b3a0e 	blcc	2cf018 <__Stack_Size+0x2cec18>
     7dc:	1119270b 	tstne	r9, fp, lsl #14
     7e0:	40061201 	andmi	r1, r6, r1, lsl #4
     7e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     7e8:	34270000 	strtcc	r0, [r7], #-0
     7ec:	3a0e0300 	bcc	3813f4 <__Stack_Size+0x380ff4>
     7f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     7f4:	000b1c13 	andeq	r1, fp, r3, lsl ip
     7f8:	012e2800 	teqeq	lr, r0, lsl #16
     7fc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     800:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     804:	13491927 	movtne	r1, #39207	; 0x9927
     808:	13010b20 	movwne	r0, #6944	; 0x1b20
     80c:	05290000 	streq	r0, [r9, #-0]!
     810:	3a080300 	bcc	201418 <__Stack_Size+0x201018>
     814:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     818:	2a000013 	bcs	86c <__Stack_Size+0x46c>
     81c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     820:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     824:	00001349 	andeq	r1, r0, r9, asr #6
     828:	0b00242b 	bleq	98dc <__Stack_Size+0x94dc>
     82c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     830:	2c000008 	stccs	0, cr0, [r0], {8}
     834:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     838:	06120111 			; <UNDEFINED> instruction: 0x06120111
     83c:	0b590b58 	bleq	16435a4 <__Stack_Size+0x16431a4>
     840:	052d0000 	streq	r0, [sp, #-0]!
     844:	1c133100 	ldfnes	f3, [r3], {-0}
     848:	2e00000b 	cdpcs	0, 0, cr0, cr0, cr11, {0}
     84c:	13310005 	teqne	r1, #5
     850:	0000061c 	andeq	r0, r0, ip, lsl r6
     854:	11010b2f 	tstne	r1, pc, lsr #22
     858:	00061201 	andeq	r1, r6, r1, lsl #4
     85c:	012e3000 	teqeq	lr, r0
     860:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     864:	0b3b0b3a 	bleq	ec3554 <__Stack_Size+0xec3154>
     868:	01111927 	tsteq	r1, r7, lsr #18
     86c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     870:	01194296 			; <UNDEFINED> instruction: 0x01194296
     874:	31000013 	tstcc	r0, r3, lsl r0
     878:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     87c:	0b3a0e03 	bleq	e84090 <__Stack_Size+0xe83c90>
     880:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     884:	06120111 			; <UNDEFINED> instruction: 0x06120111
     888:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     88c:	00130119 	andseq	r0, r3, r9, lsl r1
     890:	00053200 	andeq	r3, r5, r0, lsl #4
     894:	0b3a0e03 	bleq	e840a8 <__Stack_Size+0xe83ca8>
     898:	1349053b 	movtne	r0, #38203	; 0x953b
     89c:	00001802 	andeq	r1, r0, r2, lsl #16
     8a0:	03003433 	movweq	r3, #1075	; 0x433
     8a4:	3b0b3a0e 	blcc	2cf0e4 <__Stack_Size+0x2cece4>
     8a8:	02134905 	andseq	r4, r3, #81920	; 0x14000
     8ac:	34000017 	strcc	r0, [r0], #-23
     8b0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     8b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     8b8:	0d1c1349 	ldceq	3, cr1, [ip, #-292]	; 0xfffffedc
     8bc:	1d350000 	ldcne	0, cr0, [r5, #-0]
     8c0:	52133100 	andspl	r3, r3, #0, 2
     8c4:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     8c8:	000b590b 	andeq	r5, fp, fp, lsl #18
     8cc:	82893600 	addhi	r3, r9, #0, 12
     8d0:	01110001 	tsteq	r1, r1
     8d4:	00001331 	andeq	r1, r0, r1, lsr r3
     8d8:	01828937 	orreq	r8, r2, r7, lsr r9
     8dc:	95011101 	strls	r1, [r1, #-257]	; 0x101
     8e0:	13311942 	teqne	r1, #1081344	; 0x108000
     8e4:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
     8e8:	03193f01 	tsteq	r9, #1, 30
     8ec:	3b0b3a0e 	blcc	2cf12c <__Stack_Size+0x2ced2c>
     8f0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     8f4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     8f8:	97184006 	ldrls	r4, [r8, -r6]
     8fc:	13011942 	movwne	r1, #6466	; 0x1942
     900:	05390000 	ldreq	r0, [r9, #-0]!
     904:	3a0e0300 	bcc	38150c <__Stack_Size+0x38110c>
     908:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     90c:	00170213 	andseq	r0, r7, r3, lsl r2
     910:	00053a00 	andeq	r3, r5, r0, lsl #20
     914:	0b3a0803 	bleq	e82928 <__Stack_Size+0xe82528>
     918:	1349053b 	movtne	r0, #38203	; 0x953b
     91c:	00001702 	andeq	r1, r0, r2, lsl #14
     920:	0300343b 	movweq	r3, #1083	; 0x43b
     924:	3b0b3a0e 	blcc	2cf164 <__Stack_Size+0x2ced64>
     928:	02134905 	andseq	r4, r3, #81920	; 0x14000
     92c:	3c000018 	stccc	0, cr0, [r0], {24}
     930:	1331002e 	teqne	r1, #46	; 0x2e
     934:	06120111 			; <UNDEFINED> instruction: 0x06120111
     938:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     93c:	3d000019 	stccc	0, cr0, [r0, #-100]	; 0xffffff9c
     940:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     944:	0b3a0e03 	bleq	e84158 <__Stack_Size+0xe83d58>
     948:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     94c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     950:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     954:	3e000019 	mcrcc	0, 0, r0, cr0, cr9, {0}
     958:	13310034 	teqne	r1, #52	; 0x34
     95c:	00001702 	andeq	r1, r0, r2, lsl #14
     960:	0300343f 	movweq	r3, #1087	; 0x43f
     964:	3b0b3a0e 	blcc	2cf1a4 <__Stack_Size+0x2ceda4>
     968:	1c134905 	ldcne	9, cr4, [r3], {5}
     96c:	40000006 	andmi	r0, r0, r6
     970:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     974:	0b3b0b3a 	bleq	ec3664 <__Stack_Size+0xec3264>
     978:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     97c:	00001802 	andeq	r1, r0, r2, lsl #16
     980:	3f002e41 	svccc	0x00002e41
     984:	3a0e0319 	bcc	3815f0 <__Stack_Size+0x3811f0>
     988:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     98c:	00193c19 	andseq	r3, r9, r9, lsl ip
     990:	11010000 	mrsne	r0, (UNDEF: 1)
     994:	130e2501 	movwne	r2, #58625	; 0xe501
     998:	1b0e030b 	blne	3815cc <__Stack_Size+0x3811cc>
     99c:	1117550e 	tstne	r7, lr, lsl #10
     9a0:	00171001 	andseq	r1, r7, r1
     9a4:	00240200 	eoreq	r0, r4, r0, lsl #4
     9a8:	0b3e0b0b 	bleq	f835dc <__Stack_Size+0xf831dc>
     9ac:	00000e03 	andeq	r0, r0, r3, lsl #28
     9b0:	03001603 	movweq	r1, #1539	; 0x603
     9b4:	3b0b3a08 	blcc	2cf1dc <__Stack_Size+0x2ceddc>
     9b8:	0013490b 	andseq	r4, r3, fp, lsl #18
     9bc:	01040400 	tsteq	r4, r0, lsl #8
     9c0:	0b3a0b0b 	bleq	e835f4 <__Stack_Size+0xe831f4>
     9c4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     9c8:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
     9cc:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     9d0:	0600000d 	streq	r0, [r0], -sp
     9d4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     9d8:	0b3b0b3a 	bleq	ec36c8 <__Stack_Size+0xec32c8>
     9dc:	00001349 	andeq	r1, r0, r9, asr #6
     9e0:	0b000f07 	bleq	4604 <__Stack_Size+0x4204>
     9e4:	0013490b 	andseq	r4, r3, fp, lsl #18
     9e8:	01130800 	tsteq	r3, r0, lsl #16
     9ec:	0b0b0e03 	bleq	2c4200 <__Stack_Size+0x2c3e00>
     9f0:	0b3b0b3a 	bleq	ec36e0 <__Stack_Size+0xec32e0>
     9f4:	00001301 	andeq	r1, r0, r1, lsl #6
     9f8:	03000d09 	movweq	r0, #3337	; 0xd09
     9fc:	3b0b3a0e 	blcc	2cf23c <__Stack_Size+0x2cee3c>
     a00:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     a04:	0a00000b 	beq	a38 <__Stack_Size+0x638>
     a08:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     a0c:	13011349 	movwne	r1, #4937	; 0x1349
     a10:	050b0000 	streq	r0, [fp, #-0]
     a14:	00134900 	andseq	r4, r3, r0, lsl #18
     a18:	01130c00 	tsteq	r3, r0, lsl #24
     a1c:	0b0b0803 	bleq	2c2a30 <__Stack_Size+0x2c2630>
     a20:	0b3b0b3a 	bleq	ec3710 <__Stack_Size+0xec3310>
     a24:	00001301 	andeq	r1, r0, r1, lsl #6
     a28:	03000d0d 	movweq	r0, #3341	; 0xd0d
     a2c:	3b0b3a08 	blcc	2cf254 <__Stack_Size+0x2cee54>
     a30:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     a34:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
     a38:	0b0b0117 	bleq	2c0e9c <__Stack_Size+0x2c0a9c>
     a3c:	0b3b0b3a 	bleq	ec372c <__Stack_Size+0xec332c>
     a40:	00001301 	andeq	r1, r0, r1, lsl #6
     a44:	03000d0f 	movweq	r0, #3343	; 0xd0f
     a48:	3b0b3a08 	blcc	2cf270 <__Stack_Size+0x2cee70>
     a4c:	0013490b 	andseq	r4, r3, fp, lsl #18
     a50:	01041000 	mrseq	r1, (UNDEF: 4)
     a54:	0b0b0e03 	bleq	2c4268 <__Stack_Size+0x2c3e68>
     a58:	0b3b0b3a 	bleq	ec3748 <__Stack_Size+0xec3348>
     a5c:	00001301 	andeq	r1, r0, r1, lsl #6
     a60:	03002811 	movweq	r2, #2065	; 0x811
     a64:	000d1c08 	andeq	r1, sp, r8, lsl #24
     a68:	002e1200 	eoreq	r1, lr, r0, lsl #4
     a6c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     a70:	0b3b0b3a 	bleq	ec3760 <__Stack_Size+0xec3360>
     a74:	01111927 	tsteq	r1, r7, lsr #18
     a78:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a7c:	00194297 	mulseq	r9, r7, r2
     a80:	012e1300 	teqeq	lr, r0, lsl #6
     a84:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     a88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a8c:	01111927 	tsteq	r1, r7, lsr #18
     a90:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a94:	01194297 			; <UNDEFINED> instruction: 0x01194297
     a98:	14000013 	strne	r0, [r0], #-19
     a9c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     aa0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     aa4:	17021349 	strne	r1, [r2, -r9, asr #6]
     aa8:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
     aac:	11000182 	smlabbne	r0, r2, r1, r0
     ab0:	00133101 	andseq	r3, r3, r1, lsl #2
     ab4:	82891600 	addhi	r1, r9, #0, 12
     ab8:	01110001 	tsteq	r1, r1
     abc:	31194295 			; <UNDEFINED> instruction: 0x31194295
     ac0:	17000013 	smladne	r0, r3, r0, r0
     ac4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     ac8:	0b3a0e03 	bleq	e842dc <__Stack_Size+0xe83edc>
     acc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     ad0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ad4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     ad8:	18000019 	stmdane	r0, {r0, r3, r4}
     adc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     ae0:	0b3a0e03 	bleq	e842f4 <__Stack_Size+0xe83ef4>
     ae4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     ae8:	01111349 	tsteq	r1, r9, asr #6
     aec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     af0:	01194297 			; <UNDEFINED> instruction: 0x01194297
     af4:	19000013 	stmdbne	r0, {r0, r1, r4}
     af8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     afc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     b00:	17021349 	strne	r1, [r2, -r9, asr #6]
     b04:	341a0000 	ldrcc	r0, [sl], #-0
     b08:	3a080300 	bcc	201710 <__Stack_Size+0x201310>
     b0c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b10:	00170213 	andseq	r0, r7, r3, lsl r2
     b14:	00341b00 	eorseq	r1, r4, r0, lsl #22
     b18:	0b3a0e03 	bleq	e8432c <__Stack_Size+0xe83f2c>
     b1c:	1349053b 	movtne	r0, #38203	; 0x953b
     b20:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
     b24:	11010182 	smlabbne	r1, r2, r1, r0
     b28:	01133101 	tsteq	r3, r1, lsl #2
     b2c:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     b30:	0001828a 	andeq	r8, r1, sl, lsl #5
     b34:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     b38:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
     b3c:	01018289 	smlabbeq	r1, r9, r2, r8
     b40:	13310111 	teqne	r1, #1073741828	; 0x40000004
     b44:	241f0000 	ldrcs	r0, [pc], #-0	; b4c <__Stack_Size+0x74c>
     b48:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     b4c:	0008030b 	andeq	r0, r8, fp, lsl #6
     b50:	012e2000 	teqeq	lr, r0
     b54:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     b58:	0b3b0b3a 	bleq	ec3848 <__Stack_Size+0xec3448>
     b5c:	13491927 	movtne	r1, #39207	; 0x9927
     b60:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b64:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     b68:	00130119 	andseq	r0, r3, r9, lsl r1
     b6c:	00342100 	eorseq	r2, r4, r0, lsl #2
     b70:	0b3a0e03 	bleq	e84384 <__Stack_Size+0xe83f84>
     b74:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     b78:	00001702 	andeq	r1, r0, r2, lsl #14
     b7c:	3f002e22 	svccc	0x00002e22
     b80:	3a0e0319 	bcc	3817ec <__Stack_Size+0x3813ec>
     b84:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     b88:	11134919 	tstne	r3, r9, lsl r9
     b8c:	40061201 	andmi	r1, r6, r1, lsl #4
     b90:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b94:	05230000 	streq	r0, [r3, #-0]!
     b98:	3a0e0300 	bcc	3817a0 <__Stack_Size+0x3813a0>
     b9c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ba0:	00180213 	andseq	r0, r8, r3, lsl r2
     ba4:	002e2400 	eoreq	r2, lr, r0, lsl #8
     ba8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     bac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     bb0:	01111349 	tsteq	r1, r9, asr #6
     bb4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     bb8:	00194297 	mulseq	r9, r7, r2
     bbc:	002e2500 	eoreq	r2, lr, r0, lsl #10
     bc0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     bc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     bc8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     bcc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     bd0:	26000019 			; <UNDEFINED> instruction: 0x26000019
     bd4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     bd8:	0b3b0b3a 	bleq	ec38c8 <__Stack_Size+0xec34c8>
     bdc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     be0:	35270000 	strcc	r0, [r7, #-0]!
     be4:	00134900 	andseq	r4, r3, r0, lsl #18
     be8:	01012800 	tsteq	r1, r0, lsl #16
     bec:	13011349 	movwne	r1, #4937	; 0x1349
     bf0:	21290000 	teqcs	r9, r0
     bf4:	2f134900 	svccs	0x00134900
     bf8:	2a000005 	bcs	c14 <__Stack_Size+0x814>
     bfc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     c00:	0b3b0b3a 	bleq	ec38f0 <__Stack_Size+0xec34f0>
     c04:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     c08:	0000193c 	andeq	r1, r0, ip, lsr r9
     c0c:	0300342b 	movweq	r3, #1067	; 0x42b
     c10:	3b0b3a0e 	blcc	2cf450 <__Stack_Size+0x2cf050>
     c14:	3f13490b 	svccc	0x0013490b
     c18:	00180219 	andseq	r0, r8, r9, lsl r2
     c1c:	002e2c00 	eoreq	r2, lr, r0, lsl #24
     c20:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     c24:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     c28:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     c2c:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
     c30:	03193f00 	tsteq	r9, #0, 30
     c34:	3b0b3a0e 	blcc	2cf474 <__Stack_Size+0x2cf074>
     c38:	3c19270b 	ldccc	7, cr2, [r9], {11}
     c3c:	2e000019 	mcrcs	0, 0, r0, cr0, cr9, {0}
     c40:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     c44:	0b3a0e03 	bleq	e84458 <__Stack_Size+0xe84058>
     c48:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     c4c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     c50:	00001301 	andeq	r1, r0, r1, lsl #6
     c54:	3f012e2f 	svccc	0x00012e2f
     c58:	3a0e0319 	bcc	3818c4 <__Stack_Size+0x3814c4>
     c5c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     c60:	01193c19 	tsteq	r9, r9, lsl ip
     c64:	30000013 	andcc	r0, r0, r3, lsl r0
     c68:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     c6c:	0b3a0e03 	bleq	e84480 <__Stack_Size+0xe84080>
     c70:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     c74:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     c78:	01000000 	mrseq	r0, (UNDEF: 0)
     c7c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     c80:	0e030b13 	vmoveq.32	d3[0], r0
     c84:	17550e1b 	smmlane	r5, fp, lr, r0
     c88:	17100111 			; <UNDEFINED> instruction: 0x17100111
     c8c:	24020000 	strcs	r0, [r2], #-0
     c90:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     c94:	000e030b 	andeq	r0, lr, fp, lsl #6
     c98:	00160300 	andseq	r0, r6, r0, lsl #6
     c9c:	0b3a0803 	bleq	e82cb0 <__Stack_Size+0xe828b0>
     ca0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ca4:	04040000 	streq	r0, [r4], #-0
     ca8:	0b0e0301 	bleq	3818b4 <__Stack_Size+0x3814b4>
     cac:	3b0b3a0b 	blcc	2cf4e0 <__Stack_Size+0x2cf0e0>
     cb0:	0013010b 	andseq	r0, r3, fp, lsl #2
     cb4:	00280500 	eoreq	r0, r8, r0, lsl #10
     cb8:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     cbc:	16060000 	strne	r0, [r6], -r0
     cc0:	3a0e0300 	bcc	3818c8 <__Stack_Size+0x3814c8>
     cc4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cc8:	07000013 	smladeq	r0, r3, r0, r0
     ccc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     cd0:	0b3a0e03 	bleq	e844e4 <__Stack_Size+0xe840e4>
     cd4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     cd8:	0b201349 	bleq	805a04 <__Stack_Size+0x805604>
     cdc:	00001301 	andeq	r1, r0, r1, lsl #6
     ce0:	03000508 	movweq	r0, #1288	; 0x508
     ce4:	3b0b3a0e 	blcc	2cf524 <__Stack_Size+0x2cf124>
     ce8:	0013490b 	andseq	r4, r3, fp, lsl #18
     cec:	012e0900 	teqeq	lr, r0, lsl #18
     cf0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     cf4:	0b3b0b3a 	bleq	ec39e4 <__Stack_Size+0xec35e4>
     cf8:	01111927 	tsteq	r1, r7, lsr #18
     cfc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d00:	01194297 			; <UNDEFINED> instruction: 0x01194297
     d04:	0a000013 	beq	d58 <__Stack_Size+0x958>
     d08:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     d0c:	0b3b0b3a 	bleq	ec39fc <__Stack_Size+0xec35fc>
     d10:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     d14:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
     d18:	03193f00 	tsteq	r9, #0, 30
     d1c:	3b0b3a0e 	blcc	2cf55c <__Stack_Size+0x2cf15c>
     d20:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     d24:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     d28:	97184006 	ldrls	r4, [r8, -r6]
     d2c:	00001942 	andeq	r1, r0, r2, asr #18
     d30:	0300050c 	movweq	r0, #1292	; 0x50c
     d34:	3b0b3a0e 	blcc	2cf574 <__Stack_Size+0x2cf174>
     d38:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d3c:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
     d40:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     d44:	06120111 			; <UNDEFINED> instruction: 0x06120111
     d48:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     d4c:	00130119 	andseq	r0, r3, r9, lsl r1
     d50:	00050e00 	andeq	r0, r5, r0, lsl #28
     d54:	17021331 	smladxne	r2, r1, r3, r1
     d58:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     d5c:	03193f01 	tsteq	r9, #1, 30
     d60:	3b0b3a0e 	blcc	2cf5a0 <__Stack_Size+0x2cf1a0>
     d64:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     d68:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     d6c:	97184006 	ldrls	r4, [r8, -r6]
     d70:	13011942 	movwne	r1, #6466	; 0x1942
     d74:	0b100000 	bleq	400d7c <__Stack_Size+0x40097c>
     d78:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     d7c:	11000006 	tstne	r0, r6
     d80:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     d84:	0b3b0b3a 	bleq	ec3a74 <__Stack_Size+0xec3674>
     d88:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     d8c:	34120000 	ldrcc	r0, [r2], #-0
     d90:	3a0e0300 	bcc	381998 <__Stack_Size+0x381598>
     d94:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d98:	13000013 	movwne	r0, #19
     d9c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     da0:	17550152 			; <UNDEFINED> instruction: 0x17550152
     da4:	0b590b58 	bleq	1643b0c <__Stack_Size+0x164370c>
     da8:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     dac:	03193f01 	tsteq	r9, #1, 30
     db0:	3b0b3a0e 	blcc	2cf5f0 <__Stack_Size+0x2cf1f0>
     db4:	11192705 	tstne	r9, r5, lsl #14
     db8:	40061201 	andmi	r1, r6, r1, lsl #4
     dbc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     dc0:	00001301 	andeq	r1, r0, r1, lsl #6
     dc4:	03000515 	movweq	r0, #1301	; 0x515
     dc8:	3b0b3a0e 	blcc	2cf608 <__Stack_Size+0x2cf208>
     dcc:	02134905 	andseq	r4, r3, #81920	; 0x14000
     dd0:	16000017 			; <UNDEFINED> instruction: 0x16000017
     dd4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     dd8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     ddc:	17021349 	strne	r1, [r2, -r9, asr #6]
     de0:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
     de4:	03193f01 	tsteq	r9, #1, 30
     de8:	3b0b3a0e 	blcc	2cf628 <__Stack_Size+0x2cf228>
     dec:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     df0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     df4:	97184006 	ldrls	r4, [r8, -r6]
     df8:	13011942 	movwne	r1, #6466	; 0x1942
     dfc:	05180000 	ldreq	r0, [r8, #-0]
     e00:	3a0e0300 	bcc	381a08 <__Stack_Size+0x381608>
     e04:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e08:	00180213 	andseq	r0, r8, r3, lsl r2
     e0c:	000f1900 	andeq	r1, pc, r0, lsl #18
     e10:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     e14:	341a0000 	ldrcc	r0, [sl], #-0
     e18:	3a0e0300 	bcc	381a20 <__Stack_Size+0x381620>
     e1c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e20:	00180213 	andseq	r0, r8, r3, lsl r2
     e24:	010b1b00 	tsteq	fp, r0, lsl #22
     e28:	00001755 	andeq	r1, r0, r5, asr r7
     e2c:	11010b1c 	tstne	r1, ip, lsl fp
     e30:	01061201 	tsteq	r6, r1, lsl #4
     e34:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     e38:	08030005 	stmdaeq	r3, {r0, r2}
     e3c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e40:	17021349 	strne	r1, [r2, -r9, asr #6]
     e44:	051e0000 	ldreq	r0, [lr, #-0]
     e48:	3a080300 	bcc	201a50 <__Stack_Size+0x201650>
     e4c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e50:	00180213 	andseq	r0, r8, r3, lsl r2
     e54:	012e1f00 	teqeq	lr, r0, lsl #30
     e58:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e5c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e60:	13491927 	movtne	r1, #39207	; 0x9927
     e64:	06120111 			; <UNDEFINED> instruction: 0x06120111
     e68:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     e6c:	00000019 	andeq	r0, r0, r9, lsl r0
     e70:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     e74:	030b130e 	movweq	r1, #45838	; 0xb30e
     e78:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     e7c:	10011117 	andne	r1, r1, r7, lsl r1
     e80:	02000017 	andeq	r0, r0, #23
     e84:	0b0b0024 	bleq	2c0f1c <__Stack_Size+0x2c0b1c>
     e88:	0e030b3e 	vmoveq.16	d3[0], r0
     e8c:	16030000 	strne	r0, [r3], -r0
     e90:	3a080300 	bcc	201a98 <__Stack_Size+0x201698>
     e94:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e98:	04000013 	streq	r0, [r0], #-19
     e9c:	19270015 	stmdbne	r7!, {r0, r2, r4}
     ea0:	0f050000 	svceq	0x00050000
     ea4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     ea8:	06000013 			; <UNDEFINED> instruction: 0x06000013
     eac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     eb0:	0b3a0e03 	bleq	e846c4 <__Stack_Size+0xe842c4>
     eb4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     eb8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ebc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     ec0:	00130119 	andseq	r0, r3, r9, lsl r1
     ec4:	00340700 	eorseq	r0, r4, r0, lsl #14
     ec8:	0b3a0e03 	bleq	e846dc <__Stack_Size+0xe842dc>
     ecc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ed0:	00001702 	andeq	r1, r0, r2, lsl #14
     ed4:	11010b08 	tstne	r1, r8, lsl #22
     ed8:	01061201 	tsteq	r6, r1, lsl #4
     edc:	09000013 	stmdbeq	r0, {r0, r1, r4}
     ee0:	00018289 	andeq	r8, r1, r9, lsl #5
     ee4:	13310111 	teqne	r1, #1073741828	; 0x40000004
     ee8:	340a0000 	strcc	r0, [sl], #-0
     eec:	3a0e0300 	bcc	381af4 <__Stack_Size+0x3816f4>
     ef0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ef4:	3c193f13 	ldccc	15, cr3, [r9], {19}
     ef8:	0b000019 	bleq	f64 <__Stack_Size+0xb64>
     efc:	13490035 	movtne	r0, #36917	; 0x9035
     f00:	340c0000 	strcc	r0, [ip], #-0
     f04:	3a0e0300 	bcc	381b0c <__Stack_Size+0x38170c>
     f08:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f0c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     f10:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
     f14:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f18:	0b3b0b3a 	bleq	ec3c08 <__Stack_Size+0xec3808>
     f1c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     f20:	0000193c 	andeq	r1, r0, ip, lsr r9
     f24:	4901010e 	stmdbmi	r1, {r1, r2, r3, r8}
     f28:	00130113 	andseq	r0, r3, r3, lsl r1
     f2c:	00210f00 	eoreq	r0, r1, r0, lsl #30
     f30:	0b2f1349 	bleq	bc5c5c <__Stack_Size+0xbc585c>
     f34:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
     f38:	03193f00 	tsteq	r9, #0, 30
     f3c:	3b0b3a0e 	blcc	2cf77c <__Stack_Size+0x2cf37c>
     f40:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     f44:	00193c13 	andseq	r3, r9, r3, lsl ip
     f48:	11010000 	mrsne	r0, (UNDEF: 1)
     f4c:	130e2501 	movwne	r2, #58625	; 0xe501
     f50:	1b0e030b 	blne	381b84 <__Stack_Size+0x381784>
     f54:	1117550e 	tstne	r7, lr, lsl #10
     f58:	00171001 	andseq	r1, r7, r1
     f5c:	00240200 	eoreq	r0, r4, r0, lsl #4
     f60:	0b3e0b0b 	bleq	f83b94 <__Stack_Size+0xf83794>
     f64:	00000e03 	andeq	r0, r0, r3, lsl #28
     f68:	03001603 	movweq	r1, #1539	; 0x603
     f6c:	3b0b3a08 	blcc	2cf794 <__Stack_Size+0x2cf394>
     f70:	0013490b 	andseq	r4, r3, fp, lsl #18
     f74:	000f0400 	andeq	r0, pc, r0, lsl #8
     f78:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     f7c:	04050000 	streq	r0, [r5], #-0
     f80:	0b0e0301 	bleq	381b8c <__Stack_Size+0x38178c>
     f84:	3b0b3a0b 	blcc	2cf7b8 <__Stack_Size+0x2cf3b8>
     f88:	0013010b 	andseq	r0, r3, fp, lsl #2
     f8c:	00280600 	eoreq	r0, r8, r0, lsl #12
     f90:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     f94:	16070000 	strne	r0, [r7], -r0
     f98:	3a0e0300 	bcc	381ba0 <__Stack_Size+0x3817a0>
     f9c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fa0:	08000013 	stmdaeq	r0, {r0, r1, r4}
     fa4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     fa8:	0b3a0b0b 	bleq	e83bdc <__Stack_Size+0xe837dc>
     fac:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     fb0:	0d090000 	stceq	0, cr0, [r9, #-0]
     fb4:	3a0e0300 	bcc	381bbc <__Stack_Size+0x3817bc>
     fb8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fbc:	000b3813 	andeq	r3, fp, r3, lsl r8
     fc0:	01150a00 	tsteq	r5, r0, lsl #20
     fc4:	13491927 	movtne	r1, #39207	; 0x9927
     fc8:	00001301 	andeq	r1, r0, r1, lsl #6
     fcc:	4900050b 	stmdbmi	r0, {r0, r1, r3, r8, sl}
     fd0:	0c000013 	stceq	0, cr0, [r0], {19}
     fd4:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
     fd8:	0b3a0b0b 	bleq	e83c0c <__Stack_Size+0xe8380c>
     fdc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     fe0:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     fe4:	3a080300 	bcc	201bec <__Stack_Size+0x2017ec>
     fe8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fec:	000b3813 	andeq	r3, fp, r3, lsl r8
     ff0:	01170e00 	tsteq	r7, r0, lsl #28
     ff4:	0b3a0b0b 	bleq	e83c28 <__Stack_Size+0xe83828>
     ff8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     ffc:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 1004 <__Stack_Size+0xc04>
    1000:	3a080300 	bcc	201c08 <__Stack_Size+0x201808>
    1004:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1008:	10000013 	andne	r0, r0, r3, lsl r0
    100c:	19270015 	stmdbne	r7!, {r0, r2, r4}
    1010:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    1014:	03193f00 	tsteq	r9, #0, 30
    1018:	3b0b3a0e 	blcc	2cf858 <__Stack_Size+0x2cf458>
    101c:	1119270b 	tstne	r9, fp, lsl #14
    1020:	40061201 	andmi	r1, r6, r1, lsl #4
    1024:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1028:	34120000 	ldrcc	r0, [r2], #-0
    102c:	3a0e0300 	bcc	381c34 <__Stack_Size+0x381834>
    1030:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1034:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1038:	13000019 	movwne	r0, #25
    103c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1040:	0b3b0b3a 	bleq	ec3d30 <__Stack_Size+0xec3930>
    1044:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1048:	00001802 	andeq	r1, r0, r2, lsl #16
    104c:	01110100 	tsteq	r1, r0, lsl #2
    1050:	0b130e25 	bleq	4c48ec <__Stack_Size+0x4c44ec>
    1054:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1058:	01111755 	tsteq	r1, r5, asr r7
    105c:	00001710 	andeq	r1, r0, r0, lsl r7
    1060:	0b002402 	bleq	a070 <__Stack_Size+0x9c70>
    1064:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1068:	0300000e 	movweq	r0, #14
    106c:	08030016 	stmdaeq	r3, {r1, r2, r4}
    1070:	0b3b0b3a 	bleq	ec3d60 <__Stack_Size+0xec3960>
    1074:	00001349 	andeq	r1, r0, r9, asr #6
    1078:	03001604 	movweq	r1, #1540	; 0x604
    107c:	3b0b3a0e 	blcc	2cf8bc <__Stack_Size+0x2cf4bc>
    1080:	0013490b 	andseq	r4, r3, fp, lsl #18
    1084:	00350500 	eorseq	r0, r5, r0, lsl #10
    1088:	00001349 	andeq	r1, r0, r9, asr #6
    108c:	0b010406 	bleq	420ac <__Stack_Size+0x41cac>
    1090:	3b0b3a0b 	blcc	2cf8c4 <__Stack_Size+0x2cf4c4>
    1094:	0013010b 	andseq	r0, r3, fp, lsl #2
    1098:	00280700 	eoreq	r0, r8, r0, lsl #14
    109c:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    10a0:	04080000 	streq	r0, [r8], #-0
    10a4:	0b0e0301 	bleq	381cb0 <__Stack_Size+0x3818b0>
    10a8:	3b0b3a0b 	blcc	2cf8dc <__Stack_Size+0x2cf4dc>
    10ac:	0013010b 	andseq	r0, r3, fp, lsl #2
    10b0:	01130900 	tsteq	r3, r0, lsl #18
    10b4:	0b0b0e03 	bleq	2c48c8 <__Stack_Size+0x2c44c8>
    10b8:	0b3b0b3a 	bleq	ec3da8 <__Stack_Size+0xec39a8>
    10bc:	00001301 	andeq	r1, r0, r1, lsl #6
    10c0:	03000d0a 	movweq	r0, #3338	; 0xd0a
    10c4:	3b0b3a0e 	blcc	2cf904 <__Stack_Size+0x2cf504>
    10c8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    10cc:	0b00000b 	bleq	1100 <__Stack_Size+0xd00>
    10d0:	0b0b000f 	bleq	2c1114 <__Stack_Size+0x2c0d14>
    10d4:	00001349 	andeq	r1, r0, r9, asr #6
    10d8:	2701150c 	strcs	r1, [r1, -ip, lsl #10]
    10dc:	01134919 	tsteq	r3, r9, lsl r9
    10e0:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    10e4:	13490005 	movtne	r0, #36869	; 0x9005
    10e8:	130e0000 	movwne	r0, #57344	; 0xe000
    10ec:	0b080301 	bleq	201cf8 <__Stack_Size+0x2018f8>
    10f0:	3b0b3a0b 	blcc	2cf924 <__Stack_Size+0x2cf524>
    10f4:	0013010b 	andseq	r0, r3, fp, lsl #2
    10f8:	000d0f00 	andeq	r0, sp, r0, lsl #30
    10fc:	0b3a0803 	bleq	e83110 <__Stack_Size+0xe82d10>
    1100:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1104:	00000b38 	andeq	r0, r0, r8, lsr fp
    1108:	0b011710 	bleq	46d50 <__Stack_Size+0x46950>
    110c:	3b0b3a0b 	blcc	2cf940 <__Stack_Size+0x2cf540>
    1110:	0013010b 	andseq	r0, r3, fp, lsl #2
    1114:	000d1100 	andeq	r1, sp, r0, lsl #2
    1118:	0b3a0803 	bleq	e8312c <__Stack_Size+0xe82d2c>
    111c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1120:	15120000 	ldrne	r0, [r2, #-0]
    1124:	00192700 	andseq	r2, r9, r0, lsl #14
    1128:	012e1300 	teqeq	lr, r0, lsl #6
    112c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1130:	0b3b0b3a 	bleq	ec3e20 <__Stack_Size+0xec3a20>
    1134:	13491927 	movtne	r1, #39207	; 0x9927
    1138:	06120111 			; <UNDEFINED> instruction: 0x06120111
    113c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1140:	00130119 	andseq	r0, r3, r9, lsl r1
    1144:	00051400 	andeq	r1, r5, r0, lsl #8
    1148:	0b3a0e03 	bleq	e8495c <__Stack_Size+0xe8455c>
    114c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1150:	00001702 	andeq	r1, r0, r2, lsl #14
    1154:	11010b15 	tstne	r1, r5, lsl fp
    1158:	01061201 	tsteq	r6, r1, lsl #4
    115c:	16000013 			; <UNDEFINED> instruction: 0x16000013
    1160:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1164:	0b3b0b3a 	bleq	ec3e54 <__Stack_Size+0xec3a54>
    1168:	17021349 	strne	r1, [r2, -r9, asr #6]
    116c:	0b170000 	bleq	5c1174 <__Stack_Size+0x5c0d74>
    1170:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    1174:	18000006 	stmdane	r0, {r1, r2}
    1178:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    117c:	0b3b0b3a 	bleq	ec3e6c <__Stack_Size+0xec3a6c>
    1180:	00001349 	andeq	r1, r0, r9, asr #6
    1184:	03012e19 	movweq	r2, #7705	; 0x1e19
    1188:	3b0b3a0e 	blcc	2cf9c8 <__Stack_Size+0x2cf5c8>
    118c:	11192705 	tstne	r9, r5, lsl #14
    1190:	40061201 	andmi	r1, r6, r1, lsl #4
    1194:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1198:	00001301 	andeq	r1, r0, r1, lsl #6
    119c:	0300341a 	movweq	r3, #1050	; 0x41a
    11a0:	3b0b3a0e 	blcc	2cf9e0 <__Stack_Size+0x2cf5e0>
    11a4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    11a8:	1b000017 	blne	120c <__Stack_Size+0xe0c>
    11ac:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    11b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    11b4:	00000111 	andeq	r0, r0, r1, lsl r1
    11b8:	0182891c 	orreq	r8, r2, ip, lsl r9
    11bc:	01011101 	tsteq	r1, r1, lsl #2
    11c0:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    11c4:	0001828a 	andeq	r8, r1, sl, lsl #5
    11c8:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    11cc:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
    11d0:	01018289 	smlabbeq	r1, r9, r2, r8
    11d4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    11d8:	00001301 	andeq	r1, r0, r1, lsl #6
    11dc:	0182891f 	orreq	r8, r2, pc, lsl r9
    11e0:	31011101 	tstcc	r1, r1, lsl #2
    11e4:	20000013 	andcs	r0, r0, r3, lsl r0
    11e8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    11ec:	0b3a0e03 	bleq	e84a00 <__Stack_Size+0xe84600>
    11f0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    11f4:	01111349 	tsteq	r1, r9, asr #6
    11f8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    11fc:	00194296 	mulseq	r9, r6, r2
    1200:	00342100 	eorseq	r2, r4, r0, lsl #2
    1204:	0b3a0803 	bleq	e83218 <__Stack_Size+0xe82e18>
    1208:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    120c:	00001702 	andeq	r1, r0, r2, lsl #14
    1210:	01828922 	orreq	r8, r2, r2, lsr #18
    1214:	31011100 	mrscc	r1, (UNDEF: 17)
    1218:	23000013 	movwcs	r0, #19
    121c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1220:	0b3a0e03 	bleq	e84a34 <__Stack_Size+0xe84634>
    1224:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1228:	01111349 	tsteq	r1, r9, asr #6
    122c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1230:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1234:	24000013 	strcs	r0, [r0], #-19
    1238:	08030034 	stmdaeq	r3, {r2, r4, r5}
    123c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1240:	17021349 	strne	r1, [r2, -r9, asr #6]
    1244:	0b250000 	bleq	94124c <__Stack_Size+0x940e4c>
    1248:	01175501 	tsteq	r7, r1, lsl #10
    124c:	26000013 			; <UNDEFINED> instruction: 0x26000013
    1250:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1254:	0b3a0e03 	bleq	e84a68 <__Stack_Size+0xe84668>
    1258:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    125c:	01111349 	tsteq	r1, r9, asr #6
    1260:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1264:	00194296 	mulseq	r9, r6, r2
    1268:	012e2700 	teqeq	lr, r0, lsl #14
    126c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1270:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1274:	13491927 	movtne	r1, #39207	; 0x9927
    1278:	06120111 			; <UNDEFINED> instruction: 0x06120111
    127c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1280:	00130119 	andseq	r0, r3, r9, lsl r1
    1284:	00052800 	andeq	r2, r5, r0, lsl #16
    1288:	0b3a0e03 	bleq	e84a9c <__Stack_Size+0xe8469c>
    128c:	1349053b 	movtne	r0, #38203	; 0x953b
    1290:	00001702 	andeq	r1, r0, r2, lsl #14
    1294:	03012e29 	movweq	r2, #7721	; 0x1e29
    1298:	3b0b3a0e 	blcc	2cfad8 <__Stack_Size+0x2cf6d8>
    129c:	20192705 	andscs	r2, r9, r5, lsl #14
    12a0:	0013010b 	andseq	r0, r3, fp, lsl #2
    12a4:	00342a00 	eorseq	r2, r4, r0, lsl #20
    12a8:	0b3a0e03 	bleq	e84abc <__Stack_Size+0xe846bc>
    12ac:	1349053b 	movtne	r0, #38203	; 0x953b
    12b0:	0a2b0000 	beq	ac12b8 <__Stack_Size+0xac0eb8>
    12b4:	3a0e0300 	bcc	381ebc <__Stack_Size+0x381abc>
    12b8:	00053b0b 	andeq	r3, r5, fp, lsl #22
    12bc:	010b2c00 	tsteq	fp, r0, lsl #24
    12c0:	00001301 	andeq	r1, r0, r1, lsl #6
    12c4:	00010b2d 	andeq	r0, r1, sp, lsr #22
    12c8:	01172e00 	tsteq	r7, r0, lsl #28
    12cc:	0b3a0b0b 	bleq	e83f00 <__Stack_Size+0xe83b00>
    12d0:	1301053b 	movwne	r0, #5435	; 0x153b
    12d4:	0d2f0000 	stceq	0, cr0, [pc, #-0]	; 12dc <__Stack_Size+0xedc>
    12d8:	3a080300 	bcc	201ee0 <__Stack_Size+0x201ae0>
    12dc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    12e0:	30000013 	andcc	r0, r0, r3, lsl r0
    12e4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    12e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    12ec:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    12f0:	00001301 	andeq	r1, r0, r1, lsl #6
    12f4:	31003431 	tstcc	r0, r1, lsr r4
    12f8:	00170213 	andseq	r0, r7, r3, lsl r2
    12fc:	000a3200 	andeq	r3, sl, r0, lsl #4
    1300:	01111331 	tsteq	r1, r1, lsr r3
    1304:	1d330000 	ldcne	0, cr0, [r3, #-0]
    1308:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    130c:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    1310:	0105590b 	tsteq	r5, fp, lsl #18
    1314:	34000013 	strcc	r0, [r0], #-19
    1318:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    131c:	34350000 	ldrtcc	r0, [r5], #-0
    1320:	02133100 	andseq	r3, r3, #0, 2
    1324:	36000018 			; <UNDEFINED> instruction: 0x36000018
    1328:	01018289 	smlabbeq	r1, r9, r2, r8
    132c:	00000111 	andeq	r0, r0, r1, lsl r1
    1330:	01828937 	orreq	r8, r2, r7, lsr r9
    1334:	95011100 	strls	r1, [r1, #-256]	; 0x100
    1338:	13311942 	teqne	r1, #1081344	; 0x108000
    133c:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
    1340:	03193f01 	tsteq	r9, #1, 30
    1344:	3b0b3a0e 	blcc	2cfb84 <__Stack_Size+0x2cf784>
    1348:	11192705 	tstne	r9, r5, lsl #14
    134c:	40061201 	andmi	r1, r6, r1, lsl #4
    1350:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1354:	00001301 	andeq	r1, r0, r1, lsl #6
    1358:	03000539 	movweq	r0, #1337	; 0x539
    135c:	3b0b3a08 	blcc	2cfb84 <__Stack_Size+0x2cf784>
    1360:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1364:	3a000017 	bcc	13c8 <__Stack_Size+0xfc8>
    1368:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    136c:	0b3a0e03 	bleq	e84b80 <__Stack_Size+0xe84780>
    1370:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1374:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1378:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    137c:	3b000019 	blcc	13e8 <__Stack_Size+0xfe8>
    1380:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1384:	0b3b0b3a 	bleq	ec4074 <__Stack_Size+0xec3c74>
    1388:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    138c:	0000193c 	andeq	r1, r0, ip, lsr r9
    1390:	0300343c 	movweq	r3, #1084	; 0x43c
    1394:	3b0b3a0e 	blcc	2cfbd4 <__Stack_Size+0x2cf7d4>
    1398:	3f13490b 	svccc	0x0013490b
    139c:	00180219 	andseq	r0, r8, r9, lsl r2
    13a0:	012e3d00 	teqeq	lr, r0, lsl #26
    13a4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    13a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    13ac:	13491927 	movtne	r1, #39207	; 0x9927
    13b0:	1301193c 	movwne	r1, #6460	; 0x193c
    13b4:	2e3e0000 	cdpcs	0, 3, cr0, cr14, cr0, {0}
    13b8:	03193f01 	tsteq	r9, #1, 30
    13bc:	3b0b3a0e 	blcc	2cfbfc <__Stack_Size+0x2cf7fc>
    13c0:	3c19270b 	ldccc	7, cr2, [r9], {11}
    13c4:	00130119 	andseq	r0, r3, r9, lsl r1
    13c8:	012e3f00 	teqeq	lr, r0, lsl #30
    13cc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    13d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    13d4:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    13d8:	00001301 	andeq	r1, r0, r1, lsl #6
    13dc:	3f012e40 	svccc	0x00012e40
    13e0:	3a0e0319 	bcc	38204c <__Stack_Size+0x381c4c>
    13e4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    13e8:	00193c19 	andseq	r3, r9, r9, lsl ip
    13ec:	11010000 	mrsne	r0, (UNDEF: 1)
    13f0:	130e2501 	movwne	r2, #58625	; 0xe501
    13f4:	1b0e030b 	blne	382028 <__Stack_Size+0x381c28>
    13f8:	1117550e 	tstne	r7, lr, lsl #10
    13fc:	00171001 	andseq	r1, r7, r1
    1400:	00240200 	eoreq	r0, r4, r0, lsl #4
    1404:	0b3e0b0b 	bleq	f84038 <__Stack_Size+0xf83c38>
    1408:	00000e03 	andeq	r0, r0, r3, lsl #28
    140c:	03001603 	movweq	r1, #1539	; 0x603
    1410:	3b0b3a08 	blcc	2cfc38 <__Stack_Size+0x2cf838>
    1414:	0013490b 	andseq	r4, r3, fp, lsl #18
    1418:	000f0400 	andeq	r0, pc, r0, lsl #8
    141c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1420:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    1424:	03193f01 	tsteq	r9, #1, 30
    1428:	3b0b3a0e 	blcc	2cfc68 <__Stack_Size+0x2cf868>
    142c:	1119270b 	tstne	r9, fp, lsl #14
    1430:	40061201 	andmi	r1, r6, r1, lsl #4
    1434:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1438:	00001301 	andeq	r1, r0, r1, lsl #6
    143c:	03000506 	movweq	r0, #1286	; 0x506
    1440:	3b0b3a0e 	blcc	2cfc80 <__Stack_Size+0x2cf880>
    1444:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1448:	07000017 	smladeq	r0, r7, r0, r0
    144c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1450:	0b3b0b3a 	bleq	ec4140 <__Stack_Size+0xec3d40>
    1454:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1458:	34080000 	strcc	r0, [r8], #-0
    145c:	3a080300 	bcc	202064 <__Stack_Size+0x201c64>
    1460:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1464:	00170213 	andseq	r0, r7, r3, lsl r2
    1468:	00340900 	eorseq	r0, r4, r0, lsl #18
    146c:	0b3a0e03 	bleq	e84c80 <__Stack_Size+0xe84880>
    1470:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1474:	00001702 	andeq	r1, r0, r2, lsl #14
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000071 	andeq	r0, r0, r1, ror r0
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00310002 	eorseq	r0, r1, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	73010000 	movwvc	r0, #4096	; 0x1000
      1c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
      24:	5f630000 	svcpl	0x00630000
      28:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	6174735f 	cmnvs	r4, pc, asr r3
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	70757472 	rsbsvc	r7, r5, r2, ror r4
      34:	0100732e 	tsteq	r0, lr, lsr #6
      38:	00000000 	andeq	r0, r0, r0

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	00f00205 	rscseq	r0, r0, r5, lsl #4

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	c1030800 	tstgt	r3, r0, lsl #16
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	31210100 	teqcc	r1, r0, lsl #2
      48:	23212121 	teqcs	r1, #1073741832	; 0x40000008
      4c:	21212121 	teqcs	r1, r1, lsr #2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	2131212f 	teqcs	r1, pc, lsr #2
      54:	30212131 	eorcc	r2, r1, r1, lsr r1
      58:	2068032f 	rsbcs	r0, r8, pc, lsr #6
      5c:	36322f34 	shasxcc	r2, r2, r4
      60:	01000202 	tsteq	r0, r2, lsl #4
      64:	02050001 	andeq	r0, r5, #1
      68:	08000138 	stmdaeq	r0, {r3, r4, r5, r8}
      6c:	0100eb03 	tsteq	r0, r3, lsl #22
      70:	01000202 	tsteq	r0, r2, lsl #4
      74:	0000a201 	andeq	sl, r0, r1, lsl #4
      78:	33000200 	movwcc	r0, #512	; 0x200
      7c:	02000000 	andeq	r0, r0, #0
      80:	0d0efb01 	vstreq	d15, [lr, #-4]
      84:	01010100 	mrseq	r0, (UNDEF: 17)
      88:	00000001 	andeq	r0, r0, r1
      8c:	01000001 	tsteq	r0, r1
      90:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
      94:	5f32336d 	svcpl	0x0032336d
      98:	0062696c 	rsbeq	r6, r2, ip, ror #18
      9c:	726f6300 	rsbvc	r6, pc, #0, 6
      a0:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
      a4:	616d5f33 	cmnvs	sp, r3, lsr pc
      a8:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
      ac:	00010053 	andeq	r0, r1, r3, asr r0
      b0:	05000000 	streq	r0, [r0, #-0]
      b4:	00000002 	andeq	r0, r0, r2
      b8:	01370300 	teqeq	r7, r0, lsl #6
      bc:	200b0321 	andcs	r0, fp, r1, lsr #6
      c0:	200b0321 	andcs	r0, fp, r1, lsr #6
      c4:	200b0321 	andcs	r0, fp, r1, lsr #6
      c8:	200b032f 	andcs	r0, fp, pc, lsr #6
      cc:	200b032f 	andcs	r0, fp, pc, lsr #6
      d0:	200b032f 	andcs	r0, fp, pc, lsr #6
      d4:	200b0321 	andcs	r0, fp, r1, lsr #6
      d8:	200b032f 	andcs	r0, fp, pc, lsr #6
      dc:	0a032f2f 	beq	cbda0 <__Stack_Size+0xcb9a0>
      e0:	0b032f20 	bleq	cbd68 <__Stack_Size+0xcb968>
      e4:	0b032f20 	bleq	cbd6c <__Stack_Size+0xcb96c>
      e8:	0b032f20 	bleq	cbd70 <__Stack_Size+0xcb970>
      ec:	0b032f20 	bleq	cbd74 <__Stack_Size+0xcb974>
      f0:	0b032120 	bleq	c8578 <__Stack_Size+0xc8178>
      f4:	0b032120 	bleq	c857c <__Stack_Size+0xc817c>
      f8:	0b032f20 	bleq	cbd80 <__Stack_Size+0xcb980>
      fc:	0b032120 	bleq	c8584 <__Stack_Size+0xc8184>
     100:	0b032120 	bleq	c8588 <__Stack_Size+0xc8188>
     104:	0b032f20 	bleq	cbd8c <__Stack_Size+0xcb98c>
     108:	0b032f20 	bleq	cbd90 <__Stack_Size+0xcb990>
     10c:	0a032f20 	beq	cbd94 <__Stack_Size+0xcb994>
     110:	0b032120 	bleq	c8598 <__Stack_Size+0xc8198>
     114:	01022120 	tsteq	r2, r0, lsr #2
     118:	85010100 	strhi	r0, [r1, #-256]	; 0x100
     11c:	02000003 	andeq	r0, r0, #3
     120:	0000be00 	andeq	fp, r0, r0, lsl #28
     124:	fb010200 	blx	4092e <__Stack_Size+0x4052e>
     128:	01000d0e 	tsteq	r0, lr, lsl #26
     12c:	00010101 	andeq	r0, r1, r1, lsl #2
     130:	00010000 	andeq	r0, r1, r0
     134:	2f2e0100 	svccs	0x002e0100
     138:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     13c:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     140:	2f2e0062 	svccs	0x002e0062
     144:	5f627375 	svcpl	0x00627375
     148:	0062696c 	rsbeq	r6, r2, ip, ror #18
     14c:	62737500 	rsbsvs	r7, r3, #0, 10
     150:	0000632e 	andeq	r6, r0, lr, lsr #6
     154:	74730000 	ldrbtvc	r0, [r3], #-0
     158:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     15c:	5f783031 	svcpl	0x00783031
     160:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     164:	0100682e 	tsteq	r0, lr, lsr #16
     168:	61680000 	cmnvs	r8, r0
     16c:	61776472 	cmnvs	r7, r2, ror r4
     170:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     174:	00000000 	andeq	r0, r0, r0
     178:	5f627375 	svcpl	0x00627375
     17c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     180:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     184:	73750000 	cmnvc	r5, #0
     188:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     18c:	00682e66 	rsbeq	r2, r8, r6, ror #28
     190:	75000002 	strvc	r0, [r0, #-2]
     194:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
     198:	00000000 	andeq	r0, r0, r0
     19c:	5f627375 	svcpl	0x00627375
     1a0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     1a4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1a8:	73750000 	cmnvc	r5, #0
     1ac:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     1b0:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     1b4:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     1b8:	0000682e 	andeq	r6, r0, lr, lsr #16
     1bc:	66640000 	strbtvs	r0, [r4], -r0
     1c0:	00682e75 	rsbeq	r2, r8, r5, ror lr
     1c4:	75000000 	strvc	r0, [r0, #-0]
     1c8:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
     1cc:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
     1d0:	00020068 	andeq	r0, r2, r8, rrx
     1d4:	62737500 	rsbsvs	r7, r3, #0, 10
     1d8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     1dc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1e0:	00000000 	andeq	r0, r0, r0
     1e4:	013c0205 	teqeq	ip, r5, lsl #4
     1e8:	a1030800 	tstge	r3, r0, lsl #16
     1ec:	01020101 	tsteq	r2, r1, lsl #2
     1f0:	00010100 	andeq	r0, r1, r0, lsl #2
     1f4:	013e0205 	teqeq	lr, r5, lsl #4
     1f8:	b6030800 	strlt	r0, [r3], -r0, lsl #16
     1fc:	01020102 	tsteq	r2, r2, lsl #2
     200:	00010100 	andeq	r0, r1, r0, lsl #2
     204:	01400205 	cmpeq	r0, r5, lsl #4
     208:	b9030800 	stmdblt	r3, {fp}
     20c:	01020102 	tsteq	r2, r2, lsl #2
     210:	00010100 	andeq	r0, r1, r0, lsl #2
     214:	01420205 	cmpeq	r2, r5, lsl #4
     218:	ed030800 	stc	8, cr0, [r3, #-0]
     21c:	24150102 	ldrcs	r0, [r5], #-258	; 0x102
     220:	01000402 	tsteq	r0, r2, lsl #8
     224:	02050001 	andeq	r0, r5, #1
     228:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
     22c:	01039403 	tsteq	r3, r3, lsl #8
     230:	01000102 	tsteq	r0, r2, lsl #2
     234:	02050001 	andeq	r0, r5, #1
     238:	08000150 	stmdaeq	r0, {r4, r6, r8}
     23c:	01039803 	tsteq	r3, r3, lsl #16
     240:	08024b13 	stmdaeq	r2, {r0, r1, r4, r8, r9, fp, lr}
     244:	00010100 	andeq	r0, r1, r0, lsl #2
     248:	01680205 	cmneq	r8, r5, lsl #4
     24c:	9e030800 	cdpls	8, 0, cr0, cr3, cr0, {0}
     250:	01020103 	tsteq	r2, r3, lsl #2
     254:	00010100 	andeq	r0, r1, r0, lsl #2
     258:	016a0205 	cmneq	sl, r5, lsl #4
     25c:	a2030800 	andge	r0, r3, #0, 16
     260:	01020103 	tsteq	r2, r3, lsl #2
     264:	00010100 	andeq	r0, r1, r0, lsl #2
     268:	016c0205 	cmneq	ip, r5, lsl #4
     26c:	a6030800 	strge	r0, [r3], -r0, lsl #16
     270:	01020103 	tsteq	r2, r3, lsl #2
     274:	00010100 	andeq	r0, r1, r0, lsl #2
     278:	016e0205 	cmneq	lr, r5, lsl #4
     27c:	aa030800 	bge	c2284 <__Stack_Size+0xc1e84>
     280:	01020103 	tsteq	r2, r3, lsl #2
     284:	00010100 	andeq	r0, r1, r0, lsl #2
     288:	01700205 	cmneq	r0, r5, lsl #4
     28c:	ae030800 	cdpge	8, 0, cr0, cr3, cr0, {0}
     290:	01020103 	tsteq	r2, r3, lsl #2
     294:	00010100 	andeq	r0, r1, r0, lsl #2
     298:	01720205 	cmneq	r2, r5, lsl #4
     29c:	b2030800 	andlt	r0, r3, #0, 16
     2a0:	01020103 	tsteq	r2, r3, lsl #2
     2a4:	00010100 	andeq	r0, r1, r0, lsl #2
     2a8:	01740205 	cmneq	r4, r5, lsl #4
     2ac:	b6030800 	strlt	r0, [r3], -r0, lsl #16
     2b0:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     2b4:	01010006 	tsteq	r1, r6
     2b8:	80020500 	andhi	r0, r2, r0, lsl #10
     2bc:	03080001 	movweq	r0, #32769	; 0x8001
     2c0:	2101029d 			; <UNDEFINED> instruction: 0x2101029d
     2c4:	2f1f2130 	svccs	0x001f2130
     2c8:	0b03211f 	bleq	c874c <__Stack_Size+0xc834c>
     2cc:	20750320 	rsbscs	r0, r5, r0, lsr #6
     2d0:	231d2322 	tstcs	sp, #-2013265920	; 0x88000000
     2d4:	92759291 	rsbsls	r9, r5, #268435465	; 0x10000009
     2d8:	2f3e7630 	svccs	0x003e7630
     2dc:	08212c21 	stmdaeq	r1!, {r0, r5, sl, fp, sp}
     2e0:	00010100 	andeq	r0, r1, r0, lsl #2
     2e4:	02280205 	eoreq	r0, r8, #1342177280	; 0x50000000
     2e8:	bc030800 	stclt	8, cr0, [r3], {-0}
     2ec:	1b250102 	blne	9406fc <__Stack_Size+0x9402fc>
     2f0:	8a3e7525 	bhi	f9d78c <__Stack_Size+0xf9d38c>
     2f4:	03212221 	teqeq	r1, #268435458	; 0x10000002
     2f8:	03312076 	teqeq	r1, #118	; 0x76
     2fc:	21212010 	teqcs	r1, r0, lsl r0
     300:	2221211e 	eorcs	r2, r1, #-2147483641	; 0x80000007
     304:	0b022131 	bleq	887d0 <__Stack_Size+0x883d0>
     308:	00010100 	andeq	r0, r1, r0, lsl #2
     30c:	02880205 	addeq	r0, r8, #1342177280	; 0x50000000
     310:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
     314:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     318:	01010006 	tsteq	r1, r6
     31c:	94020500 	strls	r0, [r2], #-1280	; 0x500
     320:	03080002 	movweq	r0, #32770	; 0x8002
     324:	130102fa 	movwne	r0, #4858	; 0x12fa
     328:	01000602 	tsteq	r0, r2, lsl #12
     32c:	02050001 	andeq	r0, r5, #1
     330:	080002a0 	stmdaeq	r0, {r5, r7, r9}
     334:	0102fe03 	tsteq	r2, r3, lsl #28
     338:	5a313d13 	bpl	c4f78c <__Stack_Size+0xc4f38c>
     33c:	01000602 	tsteq	r0, r2, lsl #12
     340:	02050001 	andeq	r0, r5, #1
     344:	080002c0 	stmdaeq	r0, {r6, r7, r9}
     348:	01038703 	tsteq	r3, r3, lsl #14
     34c:	00060213 	andeq	r0, r6, r3, lsl r2
     350:	05000101 	streq	r0, [r0, #-257]	; 0x101
     354:	0002cc02 	andeq	ip, r2, r2, lsl #24
     358:	02e30308 	rsceq	r0, r3, #8, 6	; 0x20000000
     35c:	3d762101 	ldfcce	f2, [r6, #-4]!
     360:	0402214d 	streq	r2, [r2], #-333	; 0x14d
     364:	00010100 	andeq	r0, r1, r0, lsl #2
     368:	02f40205 	rscseq	r0, r4, #1342177280	; 0x50000000
     36c:	27030800 	strcs	r0, [r3, -r0, lsl #16]
     370:	20110301 	andscs	r0, r1, r1, lsl #6
     374:	02005b92 	andeq	r5, r0, #149504	; 0x24800
     378:	20060204 	andcs	r0, r6, r4, lsl #4
     37c:	3d888606 	stccc	6, cr8, [r8, #24]
     380:	2d21211f 	stfcss	f2, [r1, #-124]!	; 0xffffff84
     384:	032f302f 	teqeq	pc, #47	; 0x2f
     388:	032000dc 	teqeq	r0, #220	; 0xdc
     38c:	022e7fa8 	eoreq	r7, lr, #168, 30	; 0x2a0
     390:	0101000d 	tsteq	r1, sp
     394:	00020500 	andeq	r0, r2, r0, lsl #10
     398:	03000000 	movweq	r0, #0
     39c:	150101a5 	strne	r0, [r1, #-421]	; 0x1a5
     3a0:	01000202 	tsteq	r0, r2, lsl #4
     3a4:	02050001 	andeq	r0, r5, #1
     3a8:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
     3ac:	0101ab03 	tsteq	r1, r3, lsl #22
     3b0:	023f3e14 	eorseq	r3, pc, #20, 28	; 0x140
     3b4:	01010008 	tsteq	r1, r8
     3b8:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
     3bc:	03080003 	movweq	r0, #32771	; 0x8003
     3c0:	170101b5 			; <UNDEFINED> instruction: 0x170101b5
     3c4:	32222c22 	eorcc	r2, r2, #8704	; 0x2200
     3c8:	01000602 	tsteq	r0, r2, lsl #12
     3cc:	02050001 	andeq	r0, r5, #1
     3d0:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
     3d4:	0101c303 	tsteq	r1, r3, lsl #6
     3d8:	84302131 	ldrthi	r2, [r0], #-305	; 0x131
     3dc:	2f312f40 	svccs	0x00312f40
     3e0:	312f4b31 	teqcc	pc, r1, lsr fp	; <UNPREDICTABLE>
     3e4:	2f2f3d3e 	svccs	0x002f3d3e
     3e8:	222f4b22 	eorcs	r4, pc, #34816	; 0x8800
     3ec:	502f222c 	eorpl	r2, pc, ip, lsr #4
     3f0:	01000702 	tsteq	r0, r2, lsl #14
     3f4:	02050001 	andeq	r0, r5, #1
     3f8:	08000428 	stmdaeq	r0, {r3, r5, sl}
     3fc:	0101f303 	tsteq	r1, r3, lsl #6
     400:	221f4016 	andscs	r4, pc, #22
     404:	3d21211e 	stfccs	f2, [r1, #-120]!	; 0xffffff88
     408:	00080223 	andeq	r0, r8, r3, lsr #4
     40c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     410:	00045002 	andeq	r5, r4, r2
     414:	02820308 	addeq	r0, r2, #8, 6	; 0x20000000
     418:	3d3d1301 	ldccc	3, cr1, [sp, #-4]!
     41c:	00060236 	andeq	r0, r6, r6, lsr r2
     420:	05000101 	streq	r0, [r0, #-257]	; 0x101
     424:	00046c02 	andeq	r6, r4, r2, lsl #24
     428:	00d50308 	sbcseq	r0, r5, r8, lsl #6
     42c:	02021401 	andeq	r1, r2, #16777216	; 0x1000000
     430:	00010100 	andeq	r0, r1, r0, lsl #2
     434:	04700205 	ldrbteq	r0, [r0], #-517	; 0x205
     438:	bc030800 	stclt	8, cr0, [r3], {-0}
     43c:	3d240103 	stfccs	f0, [r4, #-12]!
     440:	3d1f303d 	ldccc	0, cr3, [pc, #-244]	; 354 <_Minimum_Stack_Size+0x254>
     444:	0003022f 	andeq	r0, r3, pc, lsr #4
     448:	05000101 	streq	r0, [r0, #-257]	; 0x101
     44c:	00049402 	andeq	r9, r4, r2, lsl #8
     450:	028f0308 	addeq	r0, pc, #8, 6	; 0x20000000
     454:	4b302101 	blmi	c08860 <__Stack_Size+0xc08460>
     458:	211f2130 	tstcs	pc, r0, lsr r1	; <UNPREDICTABLE>
     45c:	022f303d 	eoreq	r3, pc, #61	; 0x3d
     460:	0101000d 	tsteq	r1, sp
     464:	d4020500 	strle	r0, [r2], #-1280	; 0x500
     468:	03080004 	movweq	r0, #32772	; 0x8004
     46c:	220103c7 	andcs	r0, r1, #469762051	; 0x1c000003
     470:	2f3d1d40 	svccs	0x003d1d40
     474:	03022f2f 	movweq	r2, #12079	; 0x2f2f
     478:	00010100 	andeq	r0, r1, r0, lsl #2
     47c:	04f80205 	ldrbteq	r0, [r8], #517	; 0x205
     480:	d0030800 	andle	r0, r3, r0, lsl #16
     484:	40210103 	eormi	r0, r1, r3, lsl #2
     488:	3d59321c 	lfmcc	f3, 2, [r9, #-112]	; 0xffffff90
     48c:	4b3c0d03 	blmi	f038a0 <__Stack_Size+0xf034a0>
     490:	423d4b50 	eorsmi	r4, sp, #80, 22	; 0x14000
     494:	5942345c 	stmdbpl	r2, {r2, r3, r4, r6, sl, ip, sp}^
     498:	3e4b5e3d 	mcrcc	14, 2, r5, cr11, cr13, {1}
     49c:	022a5f42 	eoreq	r5, sl, #264	; 0x108
     4a0:	0101000e 	tsteq	r1, lr
     4a4:	0000006e 	andeq	r0, r0, lr, rrx
     4a8:	00680002 	rsbeq	r0, r8, r2
     4ac:	01020000 	mrseq	r0, (UNDEF: 2)
     4b0:	000d0efb 	strdeq	r0, [sp], -fp
     4b4:	01010101 	tsteq	r1, r1, lsl #2
     4b8:	01000000 	mrseq	r0, (UNDEF: 0)
     4bc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     4c0:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     4c4:	6c5f3233 	lfmvs	f3, 2, [pc], {51}	; 0x33
     4c8:	2e006269 	cdpcs	2, 0, cr6, cr0, cr9, {3}
     4cc:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
     4d0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     4d4:	74730000 	ldrbtvc	r0, [r3], #-0
     4d8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     4dc:	5f783031 	svcpl	0x00783031
     4e0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     4e4:	0100682e 	tsteq	r0, lr, lsr #16
     4e8:	73750000 	cmnvc	r5, #0
     4ec:	6f635f62 	svcvs	0x00635f62
     4f0:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     4f4:	00000200 	andeq	r0, r0, r0, lsl #4
     4f8:	2e627375 	mcrcs	3, 3, r7, cr2, cr5, {3}
     4fc:	00000068 	andeq	r0, r0, r8, rrx
     500:	62737500 	rsbsvs	r7, r3, #0, 10
     504:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
     508:	70697263 	rsbvc	r7, r9, r3, ror #4
     50c:	2e726f74 	mrccs	15, 3, r6, cr2, cr4, {3}
     510:	00000063 	andeq	r0, r0, r3, rrx
     514:	00940000 	addseq	r0, r4, r0
     518:	00020000 	andeq	r0, r2, r0
     51c:	0000005d 	andeq	r0, r0, sp, asr r0
     520:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     524:	0101000d 	tsteq	r1, sp
     528:	00000101 	andeq	r0, r0, r1, lsl #2
     52c:	00000100 	andeq	r0, r0, r0, lsl #2
     530:	732f2e01 	teqvc	pc, #1, 28
     534:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     538:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     53c:	616d0000 	cmnvs	sp, r0
     540:	632e6e69 	teqvs	lr, #1680	; 0x690
     544:	00000000 	andeq	r0, r0, r0
     548:	2e756664 	cdpcs	6, 7, cr6, cr5, cr4, {3}
     54c:	00000068 	andeq	r0, r0, r8, rrx
     550:	72616800 	rsbvc	r6, r1, #0, 16
     554:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
     558:	00682e65 	rsbeq	r2, r8, r5, ror #28
     55c:	75000000 	strvc	r0, [r0, #-0]
     560:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
     564:	00000000 	andeq	r0, r0, r0
     568:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     56c:	30316632 	eorscc	r6, r1, r2, lsr r6
     570:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     574:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     578:	00000100 	andeq	r0, r0, r0, lsl #2
     57c:	02050000 	andeq	r0, r5, #0
     580:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
     584:	24012603 	strcs	r2, [r1], #-1539	; 0x603
     588:	2f2f2f2f 	svccs	0x002f2f2f
     58c:	661c0330 			; <UNDEFINED> instruction: 0x661c0330
     590:	01040200 	mrseq	r0, R12_usr
     594:	02008206 	andeq	r8, r0, #1610612736	; 0x60000000
     598:	03060104 	movweq	r0, #24836	; 0x6104
     59c:	034c5813 	movteq	r5, #51219	; 0xc813
     5a0:	324c3c0a 	subcc	r3, ip, #2560	; 0xa00
     5a4:	4a09034c 	bmi	2412dc <__Stack_Size+0x240edc>
     5a8:	00070233 	andeq	r0, r7, r3, lsr r2
     5ac:	02e00101 	rsceq	r0, r0, #1073741824	; 0x40000000
     5b0:	00020000 	andeq	r0, r2, r0
     5b4:	00000058 	andeq	r0, r0, r8, asr r0
     5b8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     5bc:	0101000d 	tsteq	r1, sp
     5c0:	00000101 	andeq	r0, r0, r1, lsl #2
     5c4:	00000100 	andeq	r0, r0, r0, lsl #2
     5c8:	732f2e01 	teqvc	pc, #1, 28
     5cc:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     5d0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     5d4:	61680000 	cmnvs	r8, r0
     5d8:	61776472 	cmnvs	r7, r2, ror r4
     5dc:	632e6572 	teqvs	lr, #478150656	; 0x1c800000
     5e0:	00000000 	andeq	r0, r0, r0
     5e4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     5e8:	30316632 	eorscc	r6, r1, r2, lsr r6
     5ec:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     5f0:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     5f4:	00000100 	andeq	r0, r0, r0, lsl #2
     5f8:	64726168 	ldrbtvs	r6, [r2], #-360	; 0x168
     5fc:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     600:	0000682e 	andeq	r6, r0, lr, lsr #16
     604:	73750000 	cmnvc	r5, #0
     608:	00682e62 	rsbeq	r2, r8, r2, ror #28
     60c:	00000000 	andeq	r0, r0, r0
     610:	24020500 	strcs	r0, [r2], #-1280	; 0x500
     614:	03080006 	movweq	r0, #32774	; 0x8006
     618:	3b14012c 	blcc	500ad0 <__Stack_Size+0x5006d0>
     61c:	0004024b 	andeq	r0, r4, fp, asr #4
     620:	05000101 	streq	r0, [r0, #-257]	; 0x101
     624:	00000002 	andeq	r0, r0, r2
     628:	01310300 	teqeq	r1, r0, lsl #6
     62c:	04025d14 	streq	r5, [r2], #-3348	; 0xd14
     630:	00010100 	andeq	r0, r1, r0, lsl #2
     634:	063c0205 	ldrteq	r0, [ip], -r5, lsl #4
     638:	3a030800 	bcc	c2640 <__Stack_Size+0xc2240>
     63c:	0b031601 	bleq	c5e48 <__Stack_Size+0xc5a48>
     640:	0006022e 	andeq	r0, r6, lr, lsr #4
     644:	05000101 	streq	r0, [r0, #-257]	; 0x101
     648:	00000002 	andeq	r0, r0, r2
     64c:	00cc0300 	sbceq	r0, ip, r0, lsl #6
     650:	493d2e01 	ldmdbmi	sp!, {r0, r9, sl, fp, sp}
     654:	0402003d 	streq	r0, [r2], #-61	; 0x3d
     658:	20063101 	andcs	r3, r6, r1, lsl #2
     65c:	01040200 	mrseq	r0, R12_usr
     660:	02002206 	andeq	r2, r0, #1610612736	; 0x60000000
     664:	00220204 	eoreq	r0, r2, r4, lsl #4
     668:	1e020402 	cdpne	4, 0, cr0, cr2, cr2, {0}
     66c:	02005a33 	andeq	r5, r0, #208896	; 0x33000
     670:	20060104 	andcs	r0, r6, r4, lsl #2
     674:	02040200 	andeq	r0, r4, #0, 4
     678:	02002206 	andeq	r2, r0, #1610612736	; 0x60000000
     67c:	321e0204 	andscc	r0, lr, #4, 4	; 0x40000000
     680:	01000a02 	tsteq	r0, r2, lsl #20
     684:	02050001 	andeq	r0, r5, #1
     688:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
     68c:	0100e103 	tsteq	r0, r3, lsl #2
     690:	4b1f2113 	blmi	7c8ae4 <__Stack_Size+0x7c86e4>
     694:	4c4b674b 	mcrrmi	7, 4, r6, fp, cr11
     698:	01000c02 	tsteq	r0, r2, lsl #24
     69c:	02050001 	andeq	r0, r5, #1
     6a0:	08000694 	stmdaeq	r0, {r2, r4, r7, r9, sl}
     6a4:	0100eb03 	tsteq	r0, r3, lsl #22
     6a8:	04020015 	streq	r0, [r2], #-21
     6ac:	424d5901 	submi	r5, sp, #16384	; 0x4000
     6b0:	04020085 	streq	r0, [r2], #-133	; 0x85
     6b4:	0c035101 	stfeqs	f5, [r3], {1}
     6b8:	0402004a 	streq	r0, [r2], #-74	; 0x4a
     6bc:	4b3e4b01 	blmi	f932c8 <__Stack_Size+0xf92ec8>
     6c0:	01000902 	tsteq	r0, r2, lsl #18
     6c4:	02050001 	andeq	r0, r5, #1
     6c8:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
     6cc:	01019603 	tsteq	r1, r3, lsl #12
     6d0:	7f940316 	svcvc	0x00940316
     6d4:	0009023c 	andeq	r0, r9, ip, lsr r2
     6d8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     6dc:	00070c02 	andeq	r0, r7, r2, lsl #24
     6e0:	01a30308 			; <UNDEFINED> instruction: 0x01a30308
     6e4:	214b1401 	cmpcs	fp, r1, lsl #8
     6e8:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     6ec:	023d2401 	eorseq	r2, sp, #16777216	; 0x1000000
     6f0:	01010003 	tsteq	r1, r3
     6f4:	28020500 	stmdacs	r2, {r8, sl}
     6f8:	03080007 	movweq	r0, #32775	; 0x8007
     6fc:	130101af 	movwne	r0, #4527	; 0x11af
     700:	07023322 	streq	r3, [r2, -r2, lsr #6]
     704:	00010100 	andeq	r0, r1, r0, lsl #2
     708:	073c0205 	ldreq	r0, [ip, -r5, lsl #4]!
     70c:	b9030800 	stmdblt	r3, {fp}
     710:	09030101 	stmdbeq	r3, {r0, r8}
     714:	20770301 	rsbscs	r0, r7, r1, lsl #6
     718:	3e222425 	cdpcc	4, 2, cr2, cr2, cr5, {1}
     71c:	01000502 	tsteq	r0, r2, lsl #10
     720:	02050001 	andeq	r0, r5, #1
     724:	08000754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl}
     728:	0101de03 	tsteq	r1, r3, lsl #28
     72c:	316a5c14 	cmncc	sl, r4, lsl ip
     730:	01000902 	tsteq	r0, r2, lsl #18
     734:	02050001 	andeq	r0, r5, #1
     738:	08000780 	stmdaeq	r0, {r7, r8, r9, sl}
     73c:	0101f003 	tsteq	r1, r3
     740:	5a2c2224 	bpl	b08fd8 <__Stack_Size+0xb08bd8>
     744:	2631368b 	ldrtcs	r3, [r1], -fp, lsl #13
     748:	0602503e 			; <UNDEFINED> instruction: 0x0602503e
     74c:	00010100 	andeq	r0, r1, r0, lsl #2
     750:	07c80205 	strbeq	r0, [r8, r5, lsl #4]
     754:	8e030800 	cdphi	8, 0, cr0, cr3, cr0, {0}
     758:	0c030102 	stfeqs	f0, [r3], {2}
     75c:	20740301 	rsbscs	r0, r4, r1, lsl #6
     760:	24200c03 	strtcs	r0, [r0], #-3075	; 0xc03
     764:	2c313d1c 	ldccs	13, cr3, [r1], #-112	; 0xffffff90
     768:	311d2331 	tstcc	sp, r1, lsr r3
     76c:	231d243b 	tstcs	sp, #989855744	; 0x3b000000
     770:	212f3073 	teqcs	pc, r3, ror r0	; <UNPREDICTABLE>
     774:	1f213122 	svcne	0x00213122
     778:	09024921 	stmdbeq	r2, {r0, r5, r8, fp, lr}
     77c:	00010100 	andeq	r0, r1, r0, lsl #2
     780:	08340205 	ldmdaeq	r4!, {r0, r2, r9}
     784:	b1030800 	tstlt	r3, r0, lsl #16
     788:	59140102 	ldmdbpl	r4, {r1, r8}
     78c:	02302f2f 	eorseq	r2, r0, #47, 30	; 0xbc
     790:	01010007 	tsteq	r1, r7
     794:	58020500 	stmdapl	r2, {r8, sl}
     798:	03080008 	movweq	r0, #32776	; 0x8008
     79c:	030101ca 	movweq	r0, #4554	; 0x11ca
     7a0:	032001b7 	teqeq	r0, #-1073741779	; 0xc000002d
     7a4:	032e7ec9 	teqeq	lr, #3216	; 0xc90
     7a8:	032001b7 	teqeq	r0, #-1073741779	; 0xc000002d
     7ac:	2f207ecf 	svccs	0x00207ecf
     7b0:	21303231 	teqcs	r0, r1, lsr r2
     7b4:	0004022d 	andeq	r0, r4, sp, lsr #4
     7b8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     7bc:	00088002 	andeq	r8, r8, r2
     7c0:	02bb0308 	adcseq	r0, fp, #8, 6	; 0x20000000
     7c4:	02001601 	andeq	r1, r0, #1048576	; 0x100000
     7c8:	02400104 	subeq	r0, r0, #4, 2
     7cc:	01010007 	tsteq	r1, r7
     7d0:	94020500 	strls	r0, [r2], #-1280	; 0x500
     7d4:	03080008 	movweq	r0, #32776	; 0x8008
     7d8:	130102c7 	movwne	r0, #4807	; 0x12c7
     7dc:	0022211f 	eoreq	r2, r2, pc, lsl r1
     7e0:	30010402 	andcc	r0, r1, r2, lsl #8
     7e4:	02002167 	andeq	r2, r0, #-1073741799	; 0xc0000019
     7e8:	4f2f0104 	svcmi	0x002f0104
     7ec:	00070223 	andeq	r0, r7, r3, lsr #4
     7f0:	05000101 	streq	r0, [r0, #-257]	; 0x101
     7f4:	00000002 	andeq	r0, r0, r2
     7f8:	02d80300 	sbcseq	r0, r8, #0, 6
     7fc:	02002e01 	andeq	r2, r0, #1, 28
     800:	4b2f0104 	blmi	bc0c18 <__Stack_Size+0xbc0818>
     804:	040221b1 	streq	r2, [r2], #-433	; 0x1b1
     808:	00010100 	andeq	r0, r1, r0, lsl #2
     80c:	08c80205 	stmiaeq	r8, {r0, r2, r9}^
     810:	e2030800 	and	r0, r3, #0, 16
     814:	2f220102 	svccs	0x00220102
     818:	211f2130 	tstcs	pc, r0, lsr r1	; <UNPREDICTABLE>
     81c:	01040200 	mrseq	r0, R12_usr
     820:	02004b24 	andeq	r4, r0, #36, 22	; 0x9000
     824:	3d3d0104 	ldfccs	f0, [sp, #-16]!
     828:	01040200 	mrseq	r0, R12_usr
     82c:	232f3e3d 	teqcs	pc, #976	; 0x3d0
     830:	00090225 	andeq	r0, r9, r5, lsr #4
     834:	05000101 	streq	r0, [r0, #-257]	; 0x101
     838:	00091402 	andeq	r1, r9, r2, lsl #8
     83c:	02fd0308 	rscseq	r0, sp, #8, 6	; 0x20000000
     840:	06021601 	streq	r1, [r2], -r1, lsl #12
     844:	00010100 	andeq	r0, r1, r0, lsl #2
     848:	09200205 	stmdbeq	r0!, {r0, r2, r9}
     84c:	84030800 	strhi	r0, [r3], #-2048	; 0x800
     850:	3d140103 	ldfccs	f0, [r4, #-12]
     854:	01000902 	tsteq	r0, r2, lsl #18
     858:	02050001 	andeq	r0, r5, #1
     85c:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
     860:	01038d03 	tsteq	r3, r3, lsl #26
     864:	4c302214 	lfmmi	f2, 4, [r0], #-80	; 0xffffffb0
     868:	01000202 	tsteq	r0, r2, lsl #4
     86c:	02050001 	andeq	r0, r5, #1
     870:	0800094c 	stmdaeq	r0, {r2, r3, r6, r8, fp}
     874:	01039903 	tsteq	r3, r3, lsl #18
     878:	04024b14 	streq	r4, [r2], #-2836	; 0xb14
     87c:	00010100 	andeq	r0, r1, r0, lsl #2
     880:	095c0205 	ldmdbeq	ip, {r0, r2, r9}^
     884:	9f030800 	svcls	0x00030800
     888:	30150103 	andscc	r0, r5, r3, lsl #2
     88c:	00090226 	andeq	r0, r9, r6, lsr #4
     890:	021d0101 	andseq	r0, sp, #1073741824	; 0x40000000
     894:	00020000 	andeq	r0, r2, r0
     898:	00000082 	andeq	r0, r0, r2, lsl #1
     89c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     8a0:	0101000d 	tsteq	r1, sp
     8a4:	00000101 	andeq	r0, r0, r1, lsl #2
     8a8:	00000100 	andeq	r0, r0, r0, lsl #2
     8ac:	732f2e01 	teqvc	pc, #1, 28
     8b0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     8b4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     8b8:	752f2e00 	strvc	r2, [pc, #-3584]!	; fffffac0 <BootRAM+0xef70261>
     8bc:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
     8c0:	00006269 	andeq	r6, r0, r9, ror #4
     8c4:	2e756664 	cdpcs	6, 7, cr6, cr5, cr4, {3}
     8c8:	00000063 	andeq	r0, r0, r3, rrx
     8cc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     8d0:	31663233 	cmncc	r6, r3, lsr r2
     8d4:	745f7830 	ldrbvc	r7, [pc], #-2096	; 8dc <__Stack_Size+0x4dc>
     8d8:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     8dc:	00010068 	andeq	r0, r1, r8, rrx
     8e0:	62737500 	rsbsvs	r7, r3, #0, 10
     8e4:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
     8e8:	00682e65 	rsbeq	r2, r8, r5, ror #28
     8ec:	64000002 	strvs	r0, [r0], #-2
     8f0:	682e7566 	stmdavs	lr!, {r1, r2, r5, r6, r8, sl, ip, sp, lr}
     8f4:	00000000 	andeq	r0, r0, r0
     8f8:	5f627375 	svcpl	0x00627375
     8fc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     900:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     904:	73750000 	cmnvc	r5, #0
     908:	00682e62 	rsbeq	r2, r8, r2, ror #28
     90c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     910:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
     914:	2e657261 	cdpcs	2, 6, cr7, cr5, cr1, {3}
     918:	00000068 	andeq	r0, r0, r8, rrx
     91c:	05000000 	streq	r0, [r0, #-0]
     920:	00097402 	andeq	r7, r9, r2, lsl #8
     924:	01370308 	teqeq	r7, r8, lsl #6
     928:	211c3213 	tstcs	ip, r3, lsl r2
     92c:	21212121 	teqcs	r1, r1, lsr #2
     930:	211e2221 	tstcs	lr, r1, lsr #4
     934:	214b2f2f 	cmpcs	fp, pc, lsr #30
     938:	022f211f 	eoreq	r2, pc, #-1073741817	; 0xc0000007
     93c:	01010015 	tsteq	r1, r5, lsl r0
     940:	d0020500 	andle	r0, r2, r0, lsl #10
     944:	03080009 	movweq	r0, #32777	; 0x8009
     948:	210102be 			; <UNDEFINED> instruction: 0x210102be
     94c:	1f211f21 	svcne	0x00211f21
     950:	21221e23 	teqcs	r2, r3, lsr #28
     954:	0e03222f 	cdpeq	2, 0, cr2, cr3, cr15, {1}
     958:	2e73032e 	cdpcs	3, 7, cr0, cr3, cr14, {1}
     95c:	242f4230 	strtcs	r4, [pc], #-560	; 964 <__Stack_Size+0x564>
     960:	0008022c 	andeq	r0, r8, ip, lsr #4
     964:	05000101 	streq	r0, [r0, #-257]	; 0x101
     968:	00000002 	andeq	r0, r0, r2
     96c:	02d60300 	sbcseq	r0, r6, #0, 6
     970:	00010201 	andeq	r0, r1, r1, lsl #4
     974:	05000101 	streq	r0, [r0, #-257]	; 0x101
     978:	000a1402 	andeq	r1, sl, r2, lsl #8
     97c:	02d90308 	sbcseq	r0, r9, #8, 6	; 0x20000000
     980:	4b211301 	blmi	84558c <__Stack_Size+0x84518c>
     984:	05022222 	streq	r2, [r2, #-546]	; 0x222
     988:	00010100 	andeq	r0, r1, r0, lsl #2
     98c:	0a2c0205 	beq	b011a8 <__Stack_Size+0xb00da8>
     990:	e2030800 	and	r0, r3, #0, 16
     994:	21130102 	tstcs	r3, r2, lsl #2
     998:	0222224b 	eoreq	r2, r2, #-1342177276	; 0xb0000004
     99c:	01010005 	tsteq	r1, r5
     9a0:	44020500 	strmi	r0, [r2], #-1280	; 0x500
     9a4:	0308000a 	movweq	r0, #32778	; 0x800a
     9a8:	220102ec 	andcs	r0, r1, #236, 4	; 0xc000000e
     9ac:	2f4b211f 	svccs	0x004b211f
     9b0:	07023e22 	streq	r3, [r2, -r2, lsr #28]
     9b4:	00010100 	andeq	r0, r1, r0, lsl #2
     9b8:	0a6c0205 	beq	1b011d4 <__Stack_Size+0x1b00dd4>
     9bc:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
     9c0:	21210102 	teqcs	r1, r2, lsl #2
     9c4:	02842267 	addeq	r2, r4, #1879048198	; 0x70000006
     9c8:	01010009 	tsteq	r1, r9
     9cc:	a0020500 	andge	r0, r2, r0, lsl #10
     9d0:	0308000a 	movweq	r0, #32778	; 0x800a
     9d4:	030102ff 	movweq	r0, #4863	; 0x12ff
     9d8:	1e3e2013 	mrcne	0, 1, r2, cr14, cr3, {0}
     9dc:	3e315c22 	cdpcc	12, 3, cr5, cr1, cr2, {1}
     9e0:	01040200 	mrseq	r0, R12_usr
     9e4:	02002006 	andeq	r2, r0, #6
     9e8:	59060204 	stmdbpl	r6, {r2, r9}
     9ec:	02040200 	andeq	r0, r4, #0, 4
     9f0:	025a3357 	subseq	r3, sl, #1543503873	; 0x5c000001
     9f4:	0101000c 	tsteq	r1, ip
     9f8:	fc020500 	stc2	5, cr0, [r2], {-0}
     9fc:	0308000a 	movweq	r0, #32778	; 0x800a
     a00:	310100ca 	smlabtcc	r1, sl, r0, r0
     a04:	21321c24 	teqcs	r2, r4, lsr #24
     a08:	221e231f 	andscs	r2, lr, #2080374784	; 0x7c000000
     a0c:	4b5a2222 	blmi	168929c <__Stack_Size+0x1688e9c>
     a10:	232f1f30 	teqcs	pc, #48, 30	; 0xc0
     a14:	2f2f3e2f 	svccs	0x002f3e2f
     a18:	2f44244c 	svccs	0x0044244c
     a1c:	674c3d31 	smlaldxvs	r3, ip, r1, sp
     a20:	254b3d31 	strbcs	r3, [fp, #-3377]	; 0xd31
     a24:	3e31312f 	rsfccsp	f3, f1, #10.0
     a28:	1d033135 	stfnes	f3, [r3, #-212]	; 0xffffff2c
     a2c:	353f2f58 	ldrcc	r2, [pc, #-3928]!	; fffffadc <BootRAM+0xef7027d>
     a30:	211f4c30 	tstcs	pc, r0, lsr ip	; <UNPREDICTABLE>
     a34:	59303321 	ldmdbpl	r0!, {r0, r5, r8, r9, ip, sp}
     a38:	3e31312f 	rsfccsp	f3, f1, #10.0
     a3c:	31433030 	cmpcc	r3, r0, lsr r0
     a40:	432f2f59 	teqmi	pc, #356	; 0x164
     a44:	59313535 	ldmdbpl	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
     a48:	3d1f3d30 	ldccc	13, cr3, [pc, #-192]	; 990 <__Stack_Size+0x590>
     a4c:	4fc9211f 	svcmi	0x00c9211f
     a50:	2f414b76 	svccs	0x00414b76
     a54:	302f2f30 	eorcc	r2, pc, r0, lsr pc	; <UNPREDICTABLE>
     a58:	5a31352f 	bpl	c4df1c <__Stack_Size+0xc4db1c>
     a5c:	2f30303d 	svccs	0x0030303d
     a60:	25312f36 	ldrcs	r2, [r1, #-3894]!	; 0xf36
     a64:	01001d02 	tsteq	r0, r2, lsl #26
     a68:	02050001 	andeq	r0, r5, #1
     a6c:	00000000 	andeq	r0, r0, r0
     a70:	0103a703 	tsteq	r3, r3, lsl #14
     a74:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
     a78:	00010100 	andeq	r0, r1, r0, lsl #2
     a7c:	00000205 	andeq	r0, r0, r5, lsl #4
     a80:	ab030000 	blge	c0a88 <__Stack_Size+0xc0688>
     a84:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     a88:	01010006 	tsteq	r1, r6
     a8c:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
     a90:	0308000d 	movweq	r0, #32781	; 0x800d
     a94:	130103af 	movwne	r0, #5039	; 0x13af
     a98:	0004022f 	andeq	r0, r4, pc, lsr #4
     a9c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     aa0:	000d1802 	andeq	r1, sp, r2, lsl #16
     aa4:	03b30308 			; <UNDEFINED> instruction: 0x03b30308
     aa8:	04020001 	streq	r0, [r2], #-1
     aac:	02021501 	andeq	r1, r2, #4194304	; 0x400000
     ab0:	c7010100 	strgt	r0, [r1, -r0, lsl #2]
     ab4:	02000004 	andeq	r0, r0, #4
     ab8:	00004500 	andeq	r4, r0, r0, lsl #10
     abc:	fb010200 	blx	412c6 <__Stack_Size+0x40ec6>
     ac0:	01000d0e 	tsteq	r0, lr, lsl #26
     ac4:	00010101 	andeq	r0, r1, r1, lsl #2
     ac8:	00010000 	andeq	r0, r1, r0
     acc:	73750100 	cmnvc	r5, #0, 2
     ad0:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
     ad4:	75000062 	strvc	r0, [r0, #-98]	; 0x62
     ad8:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
     adc:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
     ae0:	00010063 	andeq	r0, r1, r3, rrx
     ae4:	62737500 	rsbsvs	r7, r3, #0, 10
     ae8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     aec:	00682e65 	rsbeq	r2, r8, r5, ror #28
     af0:	75000001 	strvc	r0, [r0, #-1]
     af4:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
     af8:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
     afc:	00010068 	andeq	r0, r1, r8, rrx
     b00:	05000000 	streq	r0, [r0, #-0]
     b04:	00000002 	andeq	r0, r0, r2
     b08:	01220300 	teqeq	r2, r0, lsl #6
     b0c:	00060213 	andeq	r0, r6, r3, lsl r2
     b10:	05000101 	streq	r0, [r0, #-257]	; 0x101
     b14:	00000002 	andeq	r0, r0, r2
     b18:	012e0300 	teqeq	lr, r0, lsl #6
     b1c:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
     b20:	00010100 	andeq	r0, r1, r0, lsl #2
     b24:	00000205 	andeq	r0, r0, r5, lsl #4
     b28:	3a030000 	bcc	c0b30 <__Stack_Size+0xc0730>
     b2c:	06021301 	streq	r1, [r2], -r1, lsl #6
     b30:	00010100 	andeq	r0, r1, r0, lsl #2
     b34:	00000205 	andeq	r0, r0, r5, lsl #4
     b38:	c6030000 	strgt	r0, [r3], -r0
     b3c:	2f130100 	svccs	0x00130100
     b40:	01000402 	tsteq	r0, r2, lsl #8
     b44:	02050001 	andeq	r0, r5, #1
     b48:	00000000 	andeq	r0, r0, r0
     b4c:	0100d203 	tsteq	r0, r3, lsl #4
     b50:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
     b54:	00010100 	andeq	r0, r1, r0, lsl #2
     b58:	00000205 	andeq	r0, r0, r5, lsl #4
     b5c:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
     b60:	02130100 	andseq	r0, r3, #0, 2
     b64:	01010006 	tsteq	r1, r6
     b68:	00020500 	andeq	r0, r2, r0, lsl #10
     b6c:	03000000 	movweq	r0, #0
     b70:	130100ea 	movwne	r0, #4330	; 0x10ea
     b74:	0004022f 	andeq	r0, r4, pc, lsr #4
     b78:	05000101 	streq	r0, [r0, #-257]	; 0x101
     b7c:	00000002 	andeq	r0, r0, r2
     b80:	00f60300 	rscseq	r0, r6, r0, lsl #6
     b84:	08021301 	stmdaeq	r2, {r0, r8, r9, ip}
     b88:	00010100 	andeq	r0, r1, r0, lsl #2
     b8c:	00000205 	andeq	r0, r0, r5, lsl #4
     b90:	82030000 	andhi	r0, r3, #0
     b94:	2f130101 	svccs	0x00130101
     b98:	01000402 	tsteq	r0, r2, lsl #8
     b9c:	02050001 	andeq	r0, r5, #1
     ba0:	00000000 	andeq	r0, r0, r0
     ba4:	01018f03 	tsteq	r1, r3, lsl #30
     ba8:	00070213 	andeq	r0, r7, r3, lsl r2
     bac:	05000101 	streq	r0, [r0, #-257]	; 0x101
     bb0:	00000002 	andeq	r0, r0, r2
     bb4:	019b0300 	orrseq	r0, fp, r0, lsl #6
     bb8:	02671301 	rsbeq	r1, r7, #67108864	; 0x4000000
     bbc:	01010002 	tsteq	r1, r2
     bc0:	00020500 	andeq	r0, r2, r0, lsl #10
     bc4:	03000000 	movweq	r0, #0
     bc8:	130101a8 	movwne	r0, #4520	; 0x11a8
     bcc:	01000e02 	tsteq	r0, r2, lsl #28
     bd0:	02050001 	andeq	r0, r5, #1
     bd4:	00000000 	andeq	r0, r0, r0
     bd8:	0101b403 	tsteq	r1, r3, lsl #8
     bdc:	03026713 	movweq	r6, #10003	; 0x2713
     be0:	00010100 	andeq	r0, r1, r0, lsl #2
     be4:	0d1c0205 	lfmeq	f0, 4, [ip, #-20]	; 0xffffffec
     be8:	c1030800 	tstgt	r3, r0, lsl #16
     bec:	02130101 	andseq	r0, r3, #1073741824	; 0x40000000
     bf0:	01010015 	tsteq	r1, r5, lsl r0
     bf4:	00020500 	andeq	r0, r2, r0, lsl #10
     bf8:	03000000 	movweq	r0, #0
     bfc:	130101ce 	movwne	r0, #4558	; 0x11ce
     c00:	01001502 	tsteq	r0, r2, lsl #10
     c04:	02050001 	andeq	r0, r5, #1
     c08:	00000000 	andeq	r0, r0, r0
     c0c:	0101db03 	tsteq	r1, r3, lsl #22
     c10:	03014103 	movweq	r4, #4355	; 0x1103
     c14:	035800c2 	cmpeq	r8, #194	; 0xc2
     c18:	03207fbe 	teqeq	r0, #760	; 0x2f8
     c1c:	222000c2 	eorcs	r0, r0, #194	; 0xc2
     c20:	0502303e 	streq	r3, [r2, #-62]	; 0x3e
     c24:	00010100 	andeq	r0, r1, r0, lsl #2
     c28:	00000205 	andeq	r0, r0, r5, lsl #4
     c2c:	f0030000 			; <UNDEFINED> instruction: 0xf0030000
     c30:	67130101 	ldrvs	r0, [r3, -r1, lsl #2]
     c34:	01000302 	tsteq	r0, r2, lsl #6
     c38:	02050001 	andeq	r0, r5, #1
     c3c:	00000000 	andeq	r0, r0, r0
     c40:	0101fc03 	tsteq	r1, r3, lsl #24
     c44:	03026713 	movweq	r6, #10003	; 0x2713
     c48:	00010100 	andeq	r0, r1, r0, lsl #2
     c4c:	00000205 	andeq	r0, r0, r5, lsl #4
     c50:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
     c54:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     c58:	0101000f 	tsteq	r1, pc
     c5c:	46020500 	strmi	r0, [r2], -r0, lsl #10
     c60:	0308000d 	movweq	r0, #32781	; 0x800d
     c64:	13010294 	movwne	r0, #4756	; 0x1294
     c68:	01000f02 	tsteq	r0, r2, lsl #30
     c6c:	02050001 	andeq	r0, r5, #1
     c70:	00000000 	andeq	r0, r0, r0
     c74:	0102a003 	tsteq	r2, r3
     c78:	000f0213 	andeq	r0, pc, r3, lsl r2	; <UNPREDICTABLE>
     c7c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c80:	00000002 	andeq	r0, r0, r2
     c84:	02ac0300 	adceq	r0, ip, #0, 6
     c88:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
     c8c:	00010100 	andeq	r0, r1, r0, lsl #2
     c90:	0d640205 	sfmeq	f0, 2, [r4, #-20]!	; 0xffffffec
     c94:	b7030800 	strlt	r0, [r3, -r0, lsl #16]
     c98:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     c9c:	0101000e 	tsteq	r1, lr
     ca0:	00020500 	andeq	r0, r2, r0, lsl #10
     ca4:	03000000 	movweq	r0, #0
     ca8:	130102c2 	movwne	r0, #4802	; 0x12c2
     cac:	01000f02 	tsteq	r0, r2, lsl #30
     cb0:	02050001 	andeq	r0, r5, #1
     cb4:	00000000 	andeq	r0, r0, r0
     cb8:	0102cd03 	tsteq	r2, r3, lsl #26
     cbc:	000f0213 	andeq	r0, pc, r3, lsl r2	; <UNPREDICTABLE>
     cc0:	05000101 	streq	r0, [r0, #-257]	; 0x101
     cc4:	00000002 	andeq	r0, r0, r2
     cc8:	02d80300 	sbcseq	r0, r8, #0, 6
     ccc:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
     cd0:	00010100 	andeq	r0, r1, r0, lsl #2
     cd4:	00000205 	andeq	r0, r0, r5, lsl #4
     cd8:	e3030000 	movw	r0, #12288	; 0x3000
     cdc:	83130102 	tsthi	r3, #-2147483648	; 0x80000000
     ce0:	01000502 	tsteq	r0, r2, lsl #10
     ce4:	02050001 	andeq	r0, r5, #1
     ce8:	00000000 	andeq	r0, r0, r0
     cec:	0102ee03 	tsteq	r2, r3, lsl #28
     cf0:	05028313 	streq	r8, [r2, #-787]	; 0x313
     cf4:	00010100 	andeq	r0, r1, r0, lsl #2
     cf8:	00000205 	andeq	r0, r0, r5, lsl #4
     cfc:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
     d00:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     d04:	0101000c 	tsteq	r1, ip
     d08:	00020500 	andeq	r0, r2, r0, lsl #10
     d0c:	03000000 	movweq	r0, #0
     d10:	13010384 	movwne	r0, #4996	; 0x1384
     d14:	01000e02 	tsteq	r0, r2, lsl #28
     d18:	02050001 	andeq	r0, r5, #1
     d1c:	00000000 	andeq	r0, r0, r0
     d20:	01038f03 	tsteq	r3, r3, lsl #30
     d24:	00100213 	andseq	r0, r0, r3, lsl r2
     d28:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d2c:	00000002 	andeq	r0, r0, r2
     d30:	039a0300 	orrseq	r0, sl, #0, 6
     d34:	10021301 	andne	r1, r2, r1, lsl #6
     d38:	00010100 	andeq	r0, r1, r0, lsl #2
     d3c:	0d800205 	sfmeq	f0, 4, [r0, #20]
     d40:	a5030800 	strge	r0, [r3, #-2048]	; 0x800
     d44:	00130103 	andseq	r0, r3, r3, lsl #2
     d48:	06010402 	streq	r0, [r1], -r2, lsl #8
     d4c:	00080282 	andeq	r0, r8, r2, lsl #5
     d50:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d54:	000da002 	andeq	sl, sp, r2
     d58:	03b00308 	movseq	r0, #8, 6	; 0x20000000
     d5c:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
     d60:	82060104 	andhi	r0, r6, #4, 2
     d64:	01000802 	tsteq	r0, r2, lsl #16
     d68:	02050001 	andeq	r0, r5, #1
     d6c:	00000000 	andeq	r0, r0, r0
     d70:	0103bc03 	tsteq	r3, r3, lsl #24
     d74:	000f0213 	andeq	r0, pc, r3, lsl r2	; <UNPREDICTABLE>
     d78:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d7c:	00000002 	andeq	r0, r0, r2
     d80:	03c70300 	biceq	r0, r7, #0, 6
     d84:	02671301 	rsbeq	r1, r7, #67108864	; 0x4000000
     d88:	01010003 	tsteq	r1, r3
     d8c:	00020500 	andeq	r0, r2, r0, lsl #10
     d90:	03000000 	movweq	r0, #0
     d94:	130103d3 	movwne	r0, #5075	; 0x13d3
     d98:	01001002 	tsteq	r0, r2
     d9c:	02050001 	andeq	r0, r5, #1
     da0:	00000000 	andeq	r0, r0, r0
     da4:	0103df03 	tsteq	r3, r3, lsl #30
     da8:	00100213 	andseq	r0, r0, r3, lsl r2
     dac:	05000101 	streq	r0, [r0, #-257]	; 0x101
     db0:	000dc002 	andeq	ip, sp, r2
     db4:	03ea0308 	mvneq	r0, #8, 6	; 0x20000000
     db8:	029f1301 	addseq	r1, pc, #67108864	; 0x4000000
     dbc:	01010004 	tsteq	r1, r4
     dc0:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
     dc4:	0308000d 	movweq	r0, #32781	; 0x800d
     dc8:	130103f5 	movwne	r0, #5109	; 0x13f5
     dcc:	00060283 	andeq	r0, r6, r3, lsl #5
     dd0:	05000101 	streq	r0, [r0, #-257]	; 0x101
     dd4:	000df802 	andeq	pc, sp, r2, lsl #16
     dd8:	04810308 	streq	r0, [r1], #776	; 0x308
     ddc:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
     de0:	00010100 	andeq	r0, r1, r0, lsl #2
     de4:	00000205 	andeq	r0, r0, r5, lsl #4
     de8:	8d030000 	stchi	0, cr0, [r3, #-0]
     dec:	00130104 	andseq	r0, r3, r4, lsl #2
     df0:	06010402 	streq	r0, [r1], -r2, lsl #8
     df4:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     df8:	07029e02 	streq	r9, [r2, -r2, lsl #28]
     dfc:	00010100 	andeq	r0, r1, r0, lsl #2
     e00:	0e140205 	cdpeq	2, 1, cr0, cr4, cr5, {0}
     e04:	99030800 	stmdbls	r3, {fp}
     e08:	00130104 	andseq	r0, r3, r4, lsl #2
     e0c:	06010402 	streq	r0, [r1], -r2, lsl #8
     e10:	040200ac 	streq	r0, [r2], #-172	; 0xac
     e14:	0b029e02 	bleq	a8624 <__Stack_Size+0xa8224>
     e18:	00010100 	andeq	r0, r1, r0, lsl #2
     e1c:	00000205 	andeq	r0, r0, r5, lsl #4
     e20:	a4030000 	strge	r0, [r3], #-0
     e24:	91130104 	tstls	r3, r4, lsl #2
     e28:	01000702 	tsteq	r0, r2, lsl #14
     e2c:	02050001 	andeq	r0, r5, #1
     e30:	00000000 	andeq	r0, r0, r0
     e34:	0104af03 	tsteq	r4, r3, lsl #30
     e38:	07029113 	smladeq	r2, r3, r1, r9
     e3c:	00010100 	andeq	r0, r1, r0, lsl #2
     e40:	00000205 	andeq	r0, r0, r5, lsl #4
     e44:	bc030000 	stclt	0, cr0, [r3], {-0}
     e48:	02210104 	eoreq	r0, r1, #4, 2
     e4c:	0101001b 	tsteq	r1, fp, lsl r0
     e50:	00020500 	andeq	r0, r2, r0, lsl #10
     e54:	03000000 	movweq	r0, #0
     e58:	130104c8 	movwne	r0, #5320	; 0x14c8
     e5c:	01001002 	tsteq	r0, r2
     e60:	02050001 	andeq	r0, r5, #1
     e64:	00000000 	andeq	r0, r0, r0
     e68:	0104d403 	tsteq	r4, r3, lsl #8
     e6c:	00100213 	andseq	r0, r0, r3, lsl r2
     e70:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e74:	00000002 	andeq	r0, r0, r2
     e78:	04df0300 	ldrbeq	r0, [pc], #768	; e80 <__Stack_Size+0xa80>
     e7c:	029f1301 	addseq	r1, pc, #67108864	; 0x4000000
     e80:	01010004 	tsteq	r1, r4
     e84:	00020500 	andeq	r0, r2, r0, lsl #10
     e88:	03000000 	movweq	r0, #0
     e8c:	130104ea 	movwne	r0, #5354	; 0x14ea
     e90:	00060283 	andeq	r0, r6, r3, lsl #5
     e94:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e98:	00000002 	andeq	r0, r0, r2
     e9c:	04f60300 	ldrbteq	r0, [r6], #768	; 0x300
     ea0:	211f1301 	tstcs	pc, r1, lsl #6
     ea4:	01040200 	mrseq	r0, R12_usr
     ea8:	02002006 	andeq	r2, r0, #6
     eac:	58080204 	stmdapl	r8, {r2, r9}
     eb0:	01040200 	mrseq	r0, R12_usr
     eb4:	040200f2 	streq	r0, [r2], #-242	; 0xf2
     eb8:	02009e02 	andeq	r9, r0, #2, 28
     ebc:	002e0104 	eoreq	r0, lr, r4, lsl #2
     ec0:	08020402 	stmdaeq	r2, {r1, sl}
     ec4:	000e0212 	andeq	r0, lr, r2, lsl r2
     ec8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ecc:	00000002 	andeq	r0, r0, r2
     ed0:	05820300 	streq	r0, [r2, #768]	; 0x300
     ed4:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
     ed8:	2e060104 	adfcss	f0, f6, f4
     edc:	02040200 	andeq	r0, r4, #0, 4
     ee0:	02004a08 	andeq	r4, r0, #8, 20	; 0x8000
     ee4:	02900104 	addseq	r0, r0, #4, 2
     ee8:	0101000e 	tsteq	r1, lr
     eec:	00020500 	andeq	r0, r2, r0, lsl #10
     ef0:	03000000 	movweq	r0, #0
     ef4:	1301058e 	movwne	r0, #5518	; 0x158e
     ef8:	01040200 	mrseq	r0, R12_usr
     efc:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
     f00:	4a080204 	bmi	201718 <__Stack_Size+0x201318>
     f04:	01040200 	mrseq	r0, R12_usr
     f08:	000e0290 	muleq	lr, r0, r2
     f0c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     f10:	00000002 	andeq	r0, r0, r2
     f14:	059a0300 	ldreq	r0, [sl, #768]	; 0x300
     f18:	02911301 	addseq	r1, r1, #67108864	; 0x4000000
     f1c:	01010007 	tsteq	r1, r7
     f20:	00020500 	andeq	r0, r2, r0, lsl #10
     f24:	03000000 	movweq	r0, #0
     f28:	130105a6 	movwne	r0, #5542	; 0x15a6
     f2c:	00070291 	muleq	r7, r1, r2
     f30:	05000101 	streq	r0, [r0, #-257]	; 0x101
     f34:	00000002 	andeq	r0, r0, r2
     f38:	05b20300 	ldreq	r0, [r2, #768]!	; 0x300
     f3c:	9fbc1301 	svcls	0x00bc1301
     f40:	07022548 	streq	r2, [r2, -r8, asr #10]
     f44:	00010100 	andeq	r0, r1, r0, lsl #2
     f48:	00000205 	andeq	r0, r0, r5, lsl #4
     f4c:	c3030000 	movwgt	r0, #12288	; 0x3000
     f50:	30130105 	andscc	r0, r3, r5, lsl #2
     f54:	0d0230bc 	stceq	0, cr3, [r2, #-752]	; 0xfffffd10
     f58:	00010100 	andeq	r0, r1, r0, lsl #2
     f5c:	00000205 	andeq	r0, r0, r5, lsl #4
     f60:	d6030000 	strle	r0, [r3], -r0
     f64:	02160105 	andseq	r0, r6, #1073741825	; 0x40000001
     f68:	01010003 	tsteq	r1, r3
     f6c:	00020500 	andeq	r0, r2, r0, lsl #10
     f70:	03000000 	movweq	r0, #0
     f74:	160105e3 	strne	r0, [r1], -r3, ror #11
     f78:	00030230 	andeq	r0, r3, r0, lsr r2
     f7c:	00b40101 	adcseq	r0, r4, r1, lsl #2
     f80:	00020000 	andeq	r0, r2, r0
     f84:	00000060 	andeq	r0, r0, r0, rrx
     f88:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     f8c:	0101000d 	tsteq	r1, sp
     f90:	00000101 	andeq	r0, r0, r1, lsl #2
     f94:	00000100 	andeq	r0, r0, r0, lsl #2
     f98:	62737501 	rsbsvs	r7, r3, #4194304	; 0x400000
     f9c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     fa0:	73750000 	cmnvc	r5, #0
     fa4:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
     fa8:	00632e74 	rsbeq	r2, r3, r4, ror lr
     fac:	75000001 	strvc	r0, [r0, #-1]
     fb0:	745f6273 	ldrbvc	r6, [pc], #-627	; fb8 <__Stack_Size+0xbb8>
     fb4:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     fb8:	00010068 	andeq	r0, r1, r8, rrx
     fbc:	62737500 	rsbsvs	r7, r3, #0, 10
     fc0:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
     fc4:	00682e73 	rsbeq	r2, r8, r3, ror lr
     fc8:	75000001 	strvc	r0, [r0, #-1]
     fcc:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
     fd0:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
     fd4:	00010068 	andeq	r0, r1, r8, rrx
     fd8:	62737500 	rsbsvs	r7, r3, #0, 10
     fdc:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
     fe0:	00682e65 	rsbeq	r2, r8, r5, ror #28
     fe4:	00000001 	andeq	r0, r0, r1
     fe8:	54020500 	strpl	r0, [r2], #-1280	; 0x500
     fec:	0308000e 	movweq	r0, #32782	; 0x800e
     ff0:	84230129 	strthi	r0, [r3], #-297	; 0x129
     ff4:	3d36593e 	ldccc	9, cr5, [r6, #-248]!	; 0xffffff08
     ff8:	914b3d1f 	cmpls	fp, pc, lsl sp
     ffc:	3c170395 	ldccc	3, cr0, [r7], {149}	; 0x95
    1000:	42593021 	subsmi	r3, r9, #33	; 0x21
    1004:	30435930 	subcc	r5, r3, r0, lsr r9
    1008:	13083059 	movwne	r3, #32857	; 0x8059
    100c:	200903f3 	strdcs	r0, [r9], -r3
    1010:	5c5b3167 	ldfple	f3, [fp], {103}	; 0x67
    1014:	311d933f 	tstcc	sp, pc, lsr r3
    1018:	01001602 	tsteq	r0, r2, lsl #12
    101c:	02050001 	andeq	r0, r5, #1
    1020:	00000000 	andeq	r0, r0, r0
    1024:	01019e03 	tsteq	r1, r3, lsl #28
    1028:	5a3e7623 	bpl	f9e8bc <__Stack_Size+0xf9e4bc>
    102c:	3f5b3167 	svccc	0x005b3167
    1030:	00085b31 	andeq	r5, r8, r1, lsr fp
    1034:	00630101 	rsbeq	r0, r3, r1, lsl #2
    1038:	00020000 	andeq	r0, r2, r0
    103c:	00000045 	andeq	r0, r0, r5, asr #32
    1040:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1044:	0101000d 	tsteq	r1, sp
    1048:	00000101 	andeq	r0, r0, r1, lsl #2
    104c:	00000100 	andeq	r0, r0, r0, lsl #2
    1050:	62737501 	rsbsvs	r7, r3, #4194304	; 0x400000
    1054:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1058:	73750000 	cmnvc	r5, #0
    105c:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
    1060:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    1064:	00000100 	andeq	r0, r0, r0, lsl #2
    1068:	5f627375 	svcpl	0x00627375
    106c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    1070:	0100682e 	tsteq	r0, lr, lsr #16
    1074:	73750000 	cmnvc	r5, #0
    1078:	6f635f62 	svcvs	0x00635f62
    107c:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
    1080:	00000100 	andeq	r0, r0, r0, lsl #2
    1084:	02050000 	andeq	r0, r5, #0
    1088:	08000fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp}
    108c:	21013503 	tstcs	r1, r3, lsl #10
    1090:	2f211d31 	svccs	0x00211d31
    1094:	231d233d 	tstcs	sp, #-201326592	; 0xf4000000
    1098:	01000f02 	tsteq	r0, r2, lsl #30
    109c:	00035001 	andeq	r5, r3, r1
    10a0:	7b000200 	blvc	18a8 <__Stack_Size+0x14a8>
    10a4:	02000000 	andeq	r0, r0, #0
    10a8:	0d0efb01 	vstreq	d15, [lr, #-4]
    10ac:	01010100 	mrseq	r0, (UNDEF: 17)
    10b0:	00000001 	andeq	r0, r0, r1
    10b4:	01000001 	tsteq	r0, r1
    10b8:	5f627375 	svcpl	0x00627375
    10bc:	0062696c 	rsbeq	r6, r2, ip, ror #18
    10c0:	62737500 	rsbsvs	r7, r3, #0, 10
    10c4:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    10c8:	00632e65 	rsbeq	r2, r3, r5, ror #28
    10cc:	75000001 	strvc	r0, [r0, #-1]
    10d0:	745f6273 	ldrbvc	r6, [pc], #-627	; 10d8 <__Stack_Size+0xcd8>
    10d4:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    10d8:	00010068 	andeq	r0, r1, r8, rrx
    10dc:	62737500 	rsbsvs	r7, r3, #0, 10
    10e0:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    10e4:	0100682e 	tsteq	r0, lr, lsr #16
    10e8:	73750000 	cmnvc	r5, #0
    10ec:	6f635f62 	svcvs	0x00635f62
    10f0:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
    10f4:	00000100 	andeq	r0, r0, r0, lsl #2
    10f8:	5f627375 	svcpl	0x00627375
    10fc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    1100:	0100682e 	tsteq	r0, lr, lsr #16
    1104:	73750000 	cmnvc	r5, #0
    1108:	656d5f62 	strbvs	r5, [sp, #-3938]!	; 0xf62
    110c:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    1110:	75000001 	strvc	r0, [r0, #-1]
    1114:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
    1118:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
    111c:	00010068 	andeq	r0, r1, r8, rrx
    1120:	05000000 	streq	r0, [r0, #-0]
    1124:	000fe002 	andeq	lr, pc, r2
    1128:	01350308 	teqeq	r5, r8, lsl #6
    112c:	223e222f 	eorscs	r2, lr, #-268435454	; 0xf0000002
    1130:	05022f4b 	streq	r2, [r2, #-3915]	; 0xf4b
    1134:	00010100 	andeq	r0, r1, r0, lsl #2
    1138:	10040205 	andne	r0, r4, r5, lsl #4
    113c:	e3030800 	movw	r0, #14336	; 0x3800
    1140:	222f0100 	eorcs	r0, pc, #0, 2
    1144:	2f4b223e 	svccs	0x004b223e
    1148:	01000502 	tsteq	r0, r2, lsl #10
    114c:	02050001 	andeq	r0, r5, #1
    1150:	08001028 	stmdaeq	r0, {r3, r5, ip}
    1154:	01019b03 	tsteq	r1, r3, lsl #22
    1158:	233d222f 	teqcs	sp, #-268435454	; 0xf0000002
    115c:	5b311d23 	blpl	c485f0 <__Stack_Size+0xc481f0>
    1160:	30402223 	subcc	r2, r0, r3, lsr #4
    1164:	3133404e 	teqcc	r3, lr, asr #32
    1168:	31474022 	cmpcc	r7, r2, lsr #32
    116c:	424c231d 	submi	r2, ip, #1946157056	; 0x74000000
    1170:	4b580b03 	blmi	1603d84 <__Stack_Size+0x1603984>
    1174:	032e6003 	teqeq	lr, #3
    1178:	07022021 	streq	r2, [r2, -r1, lsr #32]
    117c:	00010100 	andeq	r0, r1, r0, lsl #2
    1180:	10b80205 	adcsne	r0, r8, r5, lsl #4
    1184:	e0030800 	and	r0, r3, r0, lsl #16
    1188:	1f130103 	svcne	0x00130103
    118c:	33212f2f 	teqcc	r1, #47, 30	; 0xbc
    1190:	01040200 	mrseq	r0, R12_usr
    1194:	30062006 	andcc	r2, r6, r6
    1198:	2d34924d 	lfmcs	f1, 1, [r4, #-308]!	; 0xfffffecc
    119c:	76512135 			; <UNDEFINED> instruction: 0x76512135
    11a0:	2a244c84 	bcs	9143b8 <__Stack_Size+0x913fb8>
    11a4:	1d302f2f 	ldcne	15, cr2, [r0, #-188]!	; 0xffffff44
    11a8:	12022323 	andne	r2, r2, #-1946157056	; 0x8c000000
    11ac:	00010100 	andeq	r0, r1, r0, lsl #2
    11b0:	11600205 	cmnne	r0, r5, lsl #4
    11b4:	ca030800 	bgt	c31bc <__Stack_Size+0xc2dbc>
    11b8:	21220100 	teqcs	r2, r0, lsl #2
    11bc:	302f591f 	eorcc	r5, pc, pc, lsl r9	; <UNPREDICTABLE>
    11c0:	22324b21 	eorscs	r4, r2, #33792	; 0x8400
    11c4:	01000802 	tsteq	r0, r2, lsl #16
    11c8:	02050001 	andeq	r0, r5, #1
    11cc:	08001198 	stmdaeq	r0, {r3, r4, r7, r8, ip}
    11d0:	0100f803 	tsteq	r0, r3, lsl #16
    11d4:	003e8424 	eorseq	r8, lr, r4, lsr #8
    11d8:	06010402 	streq	r0, [r1], -r2, lsl #8
    11dc:	342f0620 	strtcc	r0, [pc], #-1568	; 11e4 <__Stack_Size+0xde4>
    11e0:	2f1e224b 	svccs	0x001e224b
    11e4:	0221252f 	eoreq	r2, r1, #197132288	; 0xbc00000
    11e8:	01010007 	tsteq	r1, r7
    11ec:	e0020500 	and	r0, r2, r0, lsl #10
    11f0:	03080011 	movweq	r0, #32785	; 0x8011
    11f4:	210101e9 	smlattcs	r1, r9, r1, r0
    11f8:	224b3e40 	subcs	r3, fp, #64, 28	; 0x400
    11fc:	03423d35 	movteq	r3, #11573	; 0x2d35
    1200:	7203200f 	andvc	r2, r3, #15
    1204:	035f4320 	cmpeq	pc, #32, 6	; 0x80000000
    1208:	40322075 	eorsmi	r2, r2, r5, ror r0
    120c:	04020031 	streq	r0, [r2], #-49	; 0x31
    1210:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    1214:	2e09032f 	cdpcs	3, 0, cr0, cr9, cr15, {1}
    1218:	231d2347 	tstcs	sp, #469762049	; 0x1c000001
    121c:	5a5e4b4c 	bpl	1793f54 <__Stack_Size+0x1793b54>
    1220:	942f6b23 	strtls	r6, [pc], #-2851	; 1228 <__Stack_Size+0xe28>
    1224:	0221314b 	eoreq	r3, r1, #-1073741806	; 0xc0000012
    1228:	0101000a 	tsteq	r1, sl
    122c:	b0020500 	andlt	r0, r2, r0, lsl #10
    1230:	03080012 	movweq	r0, #32786	; 0x8012
    1234:	260102c2 	strcs	r0, [r1], -r2, asr #5
    1238:	03200f03 	teqeq	r0, #3, 30
    123c:	0f032071 	svceq	0x00032071
    1240:	20710320 	rsbscs	r0, r1, r0, lsr #6
    1244:	32544321 	subscc	r4, r4, #-2080374784	; 0x84000000
    1248:	002f3140 	eoreq	r3, pc, r0, asr #2
    124c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1250:	0321062e 	teqeq	r1, #48234496	; 0x2e00000
    1254:	31472e09 	cmpcc	r7, r9, lsl #28
    1258:	8588231d 	strhi	r2, [r8, #797]	; 0x31d
    125c:	2e6f034b 	cdpcs	3, 6, cr0, cr15, cr11, {2}
    1260:	02201203 	eoreq	r1, r0, #805306368	; 0x30000000
    1264:	01010007 	tsteq	r1, r7
    1268:	34020500 	strcc	r0, [r2], #-1280	; 0x500
    126c:	03080013 	movweq	r0, #32787	; 0x8013
    1270:	210102f8 	strdcs	r0, [r1, -r8]
    1274:	07024c67 	streq	r4, [r2, -r7, ror #24]
    1278:	00010100 	andeq	r0, r1, r0, lsl #2
    127c:	13580205 	cmpne	r8, #1342177280	; 0x50000000
    1280:	92030800 	andls	r0, r3, #0, 16
    1284:	3d150103 	ldfccs	f0, [r5, #-12]
    1288:	2f233d22 	svccs	0x00233d22
    128c:	01000402 	tsteq	r0, r2, lsl #8
    1290:	02050001 	andeq	r0, r5, #1
    1294:	08001374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip}
    1298:	0107c903 	tsteq	r7, r3, lsl #18
    129c:	4b5a6821 	blmi	169b328 <__Stack_Size+0x169af28>
    12a0:	000d0240 	andeq	r0, sp, r0, asr #4
    12a4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    12a8:	0013b402 	andseq	fp, r3, r2, lsl #8
    12ac:	06cc0308 	strbeq	r0, [ip], r8, lsl #6
    12b0:	2c3e2801 	ldccs	8, cr2, [lr], #-4
    12b4:	2f5c563e 	svccs	0x005c563e
    12b8:	31303030 	teqcc	r0, r0, lsr r0
    12bc:	7dbd032f 	ldcvc	3, cr0, [sp, #188]!	; 0xbc
    12c0:	40304e4a 	eorsmi	r4, r0, sl, asr #28
    12c4:	3d294f30 	stccc	15, cr4, [r9, #-192]!	; 0xffffff40
    12c8:	4a0c033d 	bmi	301fc4 <__Stack_Size+0x301bc4>
    12cc:	3c3c0330 	ldccc	3, cr0, [ip], #-192	; 0xffffff40
    12d0:	3c440359 	mcrrcc	3, 5, r0, r4, cr9
    12d4:	30443e3d 	subcc	r3, r4, sp, lsr lr
    12d8:	033e3d3d 	teqeq	lr, #3904	; 0xf40
    12dc:	30313c0b 	eorscc	r3, r1, fp, lsl #24
    12e0:	30333141 	eorscc	r3, r3, r1, asr #2
    12e4:	032e0903 	teqeq	lr, #49152	; 0xc000
    12e8:	9c362e0a 	ldcls	14, cr2, [r6], #-40	; 0xffffffd8
    12ec:	032e7503 	teqeq	lr, #12582912	; 0xc00000
    12f0:	19032010 	stmdbne	r3, {r4, sp}
    12f4:	2f3e303c 	svccs	0x003e303c
    12f8:	3e303e30 	mrccc	14, 1, r3, cr0, cr0, {1}
    12fc:	42303d30 	eorsmi	r3, r0, #48, 26	; 0xc00
    1300:	5e4b695a 	mcrpl	9, 2, r6, cr11, cr10, {2}
    1304:	306d7530 	rsbcc	r7, sp, r0, lsr r5
    1308:	03200e03 	teqeq	r0, #3, 28	; 0x30
    130c:	5f432072 	svcpl	0x00432072
    1310:	32207503 	eorcc	r7, r0, #12582912	; 0xc00000
    1314:	03593140 	cmpeq	r9, #64, 2
    1318:	50303c09 	eorspl	r3, r0, r9, lsl #24
    131c:	674b5930 	smlaldxvs	r5, fp, r0, r9
    1320:	233d2289 	teqcs	sp, #-1879048184	; 0x90000008
    1324:	3067322f 	rsbcc	r3, r7, pc, lsr #4
    1328:	3f316941 	svccc	0x00316941
    132c:	4c314d41 	ldcmi	13, cr4, [r1], #-260	; 0xfffffefc
    1330:	5a302308 	bpl	c09f58 <__Stack_Size+0xc09b58>
    1334:	4b405a30 	blmi	1017bfc <__Stack_Size+0x10177fc>
    1338:	2f032f40 	svccs	0x00032f40
    133c:	d6032f4a 	strle	r2, [r3], -sl, asr #30
    1340:	2c032e7e 	stccs	14, cr2, [r3], {126}	; 0x7e
    1344:	2e0b032e 	cdpcs	3, 0, cr0, cr11, cr14, {1}
    1348:	01000c02 	tsteq	r0, r2, lsl #24
    134c:	02050001 	andeq	r0, r5, #1
    1350:	08001690 	stmdaeq	r0, {r4, r7, r9, sl, ip}
    1354:	0107a003 	tsteq	r7, r3
    1358:	02003e21 	andeq	r3, r0, #528	; 0x210
    135c:	2e060104 	adfcss	f0, f6, f4
    1360:	7c8a0306 	stcvc	3, cr0, [sl], {6}
    1364:	33221e2e 	teqcc	r2, #736	; 0x2e0
    1368:	211f5926 	tstcs	pc, r6, lsr #18
    136c:	301e222f 	andscc	r2, lr, pc, lsr #4
    1370:	1f213077 	svcne	0x00213077
    1374:	2f211f2f 	svccs	0x00211f2f
    1378:	22404c3f 	subcs	r4, r0, #16128	; 0x3f00
    137c:	d3033d4e 	movwle	r3, #15694	; 0x3d4e
    1380:	303f9e03 	eorscc	r9, pc, r3, lsl #28
    1384:	20090351 	andcs	r0, r9, r1, asr r3
    1388:	0f022d31 	svceq	0x00022d31
    138c:	00010100 	andeq	r0, r1, r0, lsl #2
    1390:	17580205 	ldrbne	r0, [r8, -r5, lsl #4]
    1394:	dd030800 	stcle	8, cr0, [r3, #-0]
    1398:	31220107 	teqcc	r2, r7, lsl #2
    139c:	01040200 	mrseq	r0, R12_usr
    13a0:	02002006 	andeq	r2, r0, #6
    13a4:	76060204 	strvc	r0, [r6], -r4, lsl #4
    13a8:	02040200 	andeq	r0, r4, #0, 4
    13ac:	09023264 	stmdbeq	r2, {r2, r5, r6, r9, ip, sp}
    13b0:	00010100 	andeq	r0, r1, r0, lsl #2
    13b4:	17900205 	ldrne	r0, [r0, r5, lsl #4]
    13b8:	f8030800 			; <UNDEFINED> instruction: 0xf8030800
    13bc:	3e210106 	sufccs	f0, f1, f6
    13c0:	01040200 	mrseq	r0, R12_usr
    13c4:	30062e06 	andcc	r2, r6, r6, lsl #28
    13c8:	00303f30 	eorseq	r3, r0, r0, lsr pc
    13cc:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    13d0:	01040200 	mrseq	r0, R12_usr
    13d4:	4c3d311f 	ldfmis	f3, [sp], #-124	; 0xffffff84
    13d8:	2d312350 	ldccs	3, cr2, [r1, #-320]!	; 0xfffffec0
    13dc:	01000902 	tsteq	r0, r2, lsl #18
    13e0:	02050001 	andeq	r0, r5, #1
    13e4:	00000000 	andeq	r0, r0, r0
    13e8:	0107f103 	tsteq	r7, r3, lsl #2
    13ec:	01000102 	tsteq	r0, r2, lsl #2
    13f0:	00008f01 	andeq	r8, r0, r1, lsl #30
    13f4:	36000200 	strcc	r0, [r0], -r0, lsl #4
    13f8:	02000000 	andeq	r0, r0, #0
    13fc:	0d0efb01 	vstreq	d15, [lr, #-4]
    1400:	01010100 	mrseq	r0, (UNDEF: 17)
    1404:	00000001 	andeq	r0, r0, r1
    1408:	01000001 	tsteq	r0, r1
    140c:	5f627375 	svcpl	0x00627375
    1410:	0062696c 	rsbeq	r6, r2, ip, ror #18
    1414:	62737500 	rsbsvs	r7, r3, #0, 10
    1418:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
    141c:	0100632e 	tsteq	r0, lr, lsr #6
    1420:	73750000 	cmnvc	r5, #0
    1424:	79745f62 	ldmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1428:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    142c:	00000100 	andeq	r0, r0, r0, lsl #2
    1430:	02050000 	andeq	r0, r5, #0
    1434:	080017ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip}
    1438:	24012303 	strcs	r2, [r1], #-771	; 0x303
    143c:	232b232b 	teqcs	fp, #-1409286144	; 0xac000000
    1440:	04020021 	streq	r0, [r2], #-33	; 0x21
    1444:	00200601 	eoreq	r0, r0, r1, lsl #12
    1448:	06020402 	streq	r0, [r2], -r2, lsl #8
    144c:	0402004e 	streq	r0, [r2], #-78	; 0x4e
    1450:	02002c02 	andeq	r2, r0, #512	; 0x200
    1454:	00300204 	eorseq	r0, r0, r4, lsl #4
    1458:	2f020402 	svccs	0x00020402
    145c:	0001024e 	andeq	r0, r1, lr, asr #4
    1460:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1464:	00181c02 	andseq	r1, r8, r2, lsl #24
    1468:	013c0308 	teqeq	ip, r8, lsl #6
    146c:	2b232b24 	blcs	8cc104 <__Stack_Size+0x8cbd04>
    1470:	02002123 	andeq	r2, r0, #-1073741816	; 0xc0000008
    1474:	20060104 	andcs	r0, r6, r4, lsl #2
    1478:	02040200 	andeq	r0, r4, #0, 4
    147c:	02693006 	rsbeq	r3, r9, #6
    1480:	01010001 	tsteq	r1, r1

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	0800013c 	stmdaeq	r0, {r2, r3, r4, r5, r8}
  1c:	00000002 	andeq	r0, r0, r2
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	0000000c 	andeq	r0, r0, ip
  24:	00000000 	andeq	r0, r0, r0
  28:	0800013e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8}
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	00000002 	andeq	r0, r0, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	0000000c 	andeq	r0, r0, ip
  34:	00000000 	andeq	r0, r0, r0
  38:	08000140 	stmdaeq	r0, {r6, r8}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	00000002 	andeq	r0, r0, r2

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	0000000c 	andeq	r0, r0, ip
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	00000000 	andeq	r0, r0, r0
  48:	08000142 	stmdaeq	r0, {r1, r6, r8}
  4c:	0000000a 	andeq	r0, r0, sl

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	0000000c 	andeq	r0, r0, ip
  54:	00000000 	andeq	r0, r0, r0
  58:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
  5c:	00000002 	andeq	r0, r0, r2
  60:	0000000c 	andeq	r0, r0, ip
  64:	00000000 	andeq	r0, r0, r0
  68:	08000150 	stmdaeq	r0, {r4, r6, r8}
  6c:	00000018 	andeq	r0, r0, r8, lsl r0
  70:	0000000c 	andeq	r0, r0, ip
  74:	00000000 	andeq	r0, r0, r0
  78:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}
  7c:	00000002 	andeq	r0, r0, r2
  80:	0000000c 	andeq	r0, r0, ip
  84:	00000000 	andeq	r0, r0, r0
  88:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
  8c:	00000002 	andeq	r0, r0, r2
  90:	0000000c 	andeq	r0, r0, ip
  94:	00000000 	andeq	r0, r0, r0
  98:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  9c:	00000002 	andeq	r0, r0, r2
  a0:	0000000c 	andeq	r0, r0, ip
  a4:	00000000 	andeq	r0, r0, r0
  a8:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
  ac:	00000002 	andeq	r0, r0, r2
  b0:	0000000c 	andeq	r0, r0, ip
  b4:	00000000 	andeq	r0, r0, r0
  b8:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
  bc:	00000002 	andeq	r0, r0, r2
  c0:	0000000c 	andeq	r0, r0, ip
  c4:	00000000 	andeq	r0, r0, r0
  c8:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
  cc:	00000002 	andeq	r0, r0, r2
  d0:	0000000c 	andeq	r0, r0, ip
  d4:	00000000 	andeq	r0, r0, r0
  d8:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	00000018 	andeq	r0, r0, r8, lsl r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	08000180 	stmdaeq	r0, {r7, r8}
  ec:	000000a8 	andeq	r0, r0, r8, lsr #1
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
  f8:	00000001 	andeq	r0, r0, r1
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	00000000 	andeq	r0, r0, r0
 104:	08000228 	stmdaeq	r0, {r3, r5, r9}
 108:	00000060 	andeq	r0, r0, r0, rrx
 10c:	40100e41 	andsmi	r0, r0, r1, asr #28
 110:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 114:	02854003 	addeq	r4, r5, #3
 118:	00018e40 	andeq	r8, r1, r0, asr #28
 11c:	0000000c 	andeq	r0, r0, ip
 120:	00000000 	andeq	r0, r0, r0
 124:	08000288 	stmdaeq	r0, {r3, r7, r9}
 128:	0000000c 	andeq	r0, r0, ip
 12c:	0000000c 	andeq	r0, r0, ip
 130:	00000000 	andeq	r0, r0, r0
 134:	08000294 	stmdaeq	r0, {r2, r4, r7, r9}
 138:	0000000c 	andeq	r0, r0, ip
 13c:	0000000c 	andeq	r0, r0, ip
 140:	00000000 	andeq	r0, r0, r0
 144:	080002a0 	stmdaeq	r0, {r5, r7, r9}
 148:	00000020 	andeq	r0, r0, r0, lsr #32
 14c:	0000000c 	andeq	r0, r0, ip
 150:	00000000 	andeq	r0, r0, r0
 154:	080002c0 	stmdaeq	r0, {r6, r7, r9}
 158:	0000000c 	andeq	r0, r0, ip
 15c:	00000018 	andeq	r0, r0, r8, lsl r0
 160:	00000000 	andeq	r0, r0, r0
 164:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
 168:	00000028 	andeq	r0, r0, r8, lsr #32
 16c:	40080e41 	andmi	r0, r8, r1, asr #28
 170:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 174:	00000001 	andeq	r0, r0, r1
 178:	00000024 	andeq	r0, r0, r4, lsr #32
 17c:	00000000 	andeq	r0, r0, r0
 180:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
 184:	0000007c 	andeq	r0, r0, ip, ror r0
 188:	40180e41 	andsmi	r0, r8, r1, asr #28
 18c:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 190:	04824005 	streq	r4, [r2], #5
 194:	40038440 	andmi	r8, r3, r0, asr #8
 198:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
 19c:	00000001 	andeq	r0, r0, r1
 1a0:	0000000c 	andeq	r0, r0, ip
	...
 1ac:	00000004 	andeq	r0, r0, r4
 1b0:	0000000c 	andeq	r0, r0, ip
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	0000000c 	andeq	r0, r0, ip
 1c4:	00000000 	andeq	r0, r0, r0
 1c8:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
 1cc:	00000018 	andeq	r0, r0, r8, lsl r0
 1d0:	00000018 	andeq	r0, r0, r8, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
 1dc:	00000084 	andeq	r0, r0, r4, lsl #1
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 1e8:	00000001 	andeq	r0, r0, r1
 1ec:	0000000c 	andeq	r0, r0, ip
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	08000428 	stmdaeq	r0, {r3, r5, sl}
 1f8:	00000028 	andeq	r0, r0, r8, lsr #32
 1fc:	0000000c 	andeq	r0, r0, ip
 200:	00000000 	andeq	r0, r0, r0
 204:	08000450 	stmdaeq	r0, {r4, r6, sl}
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	0000000c 	andeq	r0, r0, ip
 210:	00000000 	andeq	r0, r0, r0
 214:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
 218:	00000004 	andeq	r0, r0, r4
 21c:	0000001c 	andeq	r0, r0, ip, lsl r0
 220:	00000000 	andeq	r0, r0, r0
 224:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
 228:	00000024 	andeq	r0, r0, r4, lsr #32
 22c:	40100e41 	andsmi	r0, r0, r1, asr #28
 230:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
 234:	02824003 	addeq	r4, r2, #3
 238:	00018e40 	andeq	r8, r1, r0, asr #28
 23c:	00000018 	andeq	r0, r0, r8, lsl r0
 240:	00000000 	andeq	r0, r0, r0
 244:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
 248:	00000040 	andeq	r0, r0, r0, asr #32
 24c:	40080e41 	andmi	r0, r8, r1, asr #28
 250:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 254:	00000001 	andeq	r0, r0, r1
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000000 	andeq	r0, r0, r0
 260:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
 264:	00000022 	andeq	r0, r0, r2, lsr #32
 268:	40100e41 	andsmi	r0, r0, r1, asr #28
 26c:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
 270:	02824003 	addeq	r4, r2, #3
 274:	00018e40 	andeq	r8, r1, r0, asr #28
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	080004f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl}
 284:	000000b4 	strheq	r0, [r0], -r4
 288:	40100e41 	andsmi	r0, r0, r1, asr #28
 28c:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
 290:	02864003 	addeq	r4, r6, #3
 294:	00018e40 	andeq	r8, r1, r0, asr #28
 298:	0000000c 	andeq	r0, r0, ip
 29c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a8:	00000018 	andeq	r0, r0, r8, lsl r0
 2ac:	00000298 	muleq	r0, r8, r2
 2b0:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
 2b4:	00000078 	andeq	r0, r0, r8, ror r0
 2b8:	40080e41 	andmi	r0, r8, r1, asr #28
 2bc:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 2c0:	00000001 	andeq	r0, r0, r1
 2c4:	0000000c 	andeq	r0, r0, ip
 2c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2cc:	7c020001 	stcvc	0, cr0, [r2], {1}
 2d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2d4:	0000000c 	andeq	r0, r0, ip
 2d8:	000002c4 	andeq	r0, r0, r4, asr #5
 2dc:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 2e0:	00000016 	andeq	r0, r0, r6, lsl r0
 2e4:	0000000c 	andeq	r0, r0, ip
 2e8:	000002c4 	andeq	r0, r0, r4, asr #5
 2ec:	00000000 	andeq	r0, r0, r0
 2f0:	00000012 	andeq	r0, r0, r2, lsl r0
 2f4:	0000000c 	andeq	r0, r0, ip
 2f8:	000002c4 	andeq	r0, r0, r4, asr #5
 2fc:	0800063c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl}
 300:	00000010 	andeq	r0, r0, r0, lsl r0
 304:	00000028 	andeq	r0, r0, r8, lsr #32
 308:	000002c4 	andeq	r0, r0, r4, asr #5
 30c:	00000000 	andeq	r0, r0, r0
 310:	00000050 	andeq	r0, r0, r0, asr r0
 314:	40200e42 	eormi	r0, r0, r2, asr #28
 318:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
 31c:	06864007 	streq	r4, [r6], r7
 320:	40058740 	andmi	r8, r5, r0, asr #14
 324:	89400488 	stmdbhi	r0, {r3, r7, sl}^
 328:	028a4003 	addeq	r4, sl, #3
 32c:	00018e40 	andeq	r8, r1, r0, asr #28
 330:	0000000c 	andeq	r0, r0, ip
 334:	000002c4 	andeq	r0, r0, r4, asr #5
 338:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
 33c:	00000048 	andeq	r0, r0, r8, asr #32
 340:	0000000c 	andeq	r0, r0, ip
 344:	000002c4 	andeq	r0, r0, r4, asr #5
 348:	08000694 	stmdaeq	r0, {r2, r4, r7, r9, sl}
 34c:	00000060 	andeq	r0, r0, r0, rrx
 350:	0000000c 	andeq	r0, r0, ip
 354:	000002c4 	andeq	r0, r0, r4, asr #5
 358:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
 35c:	00000018 	andeq	r0, r0, r8, lsl r0
 360:	0000000c 	andeq	r0, r0, ip
 364:	000002c4 	andeq	r0, r0, r4, asr #5
 368:	0800070c 	stmdaeq	r0, {r2, r3, r8, r9, sl}
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	0000000c 	andeq	r0, r0, ip
 374:	000002c4 	andeq	r0, r0, r4, asr #5
 378:	08000728 	stmdaeq	r0, {r3, r5, r8, r9, sl}
 37c:	00000014 	andeq	r0, r0, r4, lsl r0
 380:	00000018 	andeq	r0, r0, r8, lsl r0
 384:	000002c4 	andeq	r0, r0, r4, asr #5
 388:	0800073c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl}
 38c:	00000018 	andeq	r0, r0, r8, lsl r0
 390:	40080e42 	andmi	r0, r8, r2, asr #28
 394:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 398:	00000001 	andeq	r0, r0, r1
 39c:	0000000c 	andeq	r0, r0, ip
 3a0:	000002c4 	andeq	r0, r0, r4, asr #5
 3a4:	08000754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl}
 3a8:	0000002c 	andeq	r0, r0, ip, lsr #32
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	000002c4 	andeq	r0, r0, r4, asr #5
 3b4:	08000780 	stmdaeq	r0, {r7, r8, r9, sl}
 3b8:	00000048 	andeq	r0, r0, r8, asr #32
 3bc:	40100e41 	andsmi	r0, r0, r1, asr #28
 3c0:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 3c4:	02854003 	addeq	r4, r5, #3
 3c8:	00018e40 	andeq	r8, r1, r0, asr #28
 3cc:	00000018 	andeq	r0, r0, r8, lsl r0
 3d0:	000002c4 	andeq	r0, r0, r4, asr #5
 3d4:	080007c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl}
 3d8:	0000006c 	andeq	r0, r0, ip, rrx
 3dc:	400c0e42 	andmi	r0, ip, r2, asr #28
 3e0:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
 3e4:	018e4002 	orreq	r4, lr, r2
 3e8:	0000000c 	andeq	r0, r0, ip
 3ec:	000002c4 	andeq	r0, r0, r4, asr #5
 3f0:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
 3f4:	00000024 	andeq	r0, r0, r4, lsr #32
 3f8:	00000018 	andeq	r0, r0, r8, lsl r0
 3fc:	000002c4 	andeq	r0, r0, r4, asr #5
 400:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
 404:	00000028 	andeq	r0, r0, r8, lsr #32
 408:	40080e41 	andmi	r0, r8, r1, asr #28
 40c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 410:	00000001 	andeq	r0, r0, r1
 414:	0000000c 	andeq	r0, r0, ip
 418:	000002c4 	andeq	r0, r0, r4, asr #5
 41c:	08000880 	stmdaeq	r0, {r7, fp}
 420:	00000014 	andeq	r0, r0, r4, lsl r0
 424:	00000018 	andeq	r0, r0, r8, lsl r0
 428:	000002c4 	andeq	r0, r0, r4, asr #5
 42c:	08000894 	stmdaeq	r0, {r2, r4, r7, fp}
 430:	00000034 	andeq	r0, r0, r4, lsr r0
 434:	40080e42 	andmi	r0, r8, r2, asr #28
 438:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 43c:	00000001 	andeq	r0, r0, r1
 440:	0000001c 	andeq	r0, r0, ip, lsl r0
 444:	000002c4 	andeq	r0, r0, r4, asr #5
 448:	00000000 	andeq	r0, r0, r0
 44c:	00000030 	andeq	r0, r0, r0, lsr r0
 450:	40100e42 	andsmi	r0, r0, r2, asr #28
 454:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 458:	02854003 	addeq	r4, r5, #3
 45c:	00018e40 	andeq	r8, r1, r0, asr #28
 460:	00000024 	andeq	r0, r0, r4, lsr #32
 464:	000002c4 	andeq	r0, r0, r4, asr #5
 468:	080008c8 	stmdaeq	r0, {r3, r6, r7, fp}
 46c:	0000004c 	andeq	r0, r0, ip, asr #32
 470:	40180e41 	andsmi	r0, r8, r1, asr #28
 474:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 478:	04824005 	streq	r4, [r2], #5
 47c:	40038440 	andmi	r8, r3, r0, asr #8
 480:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
 484:	00000001 	andeq	r0, r0, r1
 488:	0000000c 	andeq	r0, r0, ip
 48c:	000002c4 	andeq	r0, r0, r4, asr #5
 490:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
 494:	0000000c 	andeq	r0, r0, ip
 498:	0000000c 	andeq	r0, r0, ip
 49c:	000002c4 	andeq	r0, r0, r4, asr #5
 4a0:	08000920 	stmdaeq	r0, {r5, r8, fp}
 4a4:	00000018 	andeq	r0, r0, r8, lsl r0
 4a8:	0000000c 	andeq	r0, r0, ip
 4ac:	000002c4 	andeq	r0, r0, r4, asr #5
 4b0:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
 4b4:	00000012 	andeq	r0, r0, r2, lsl r0
 4b8:	0000000c 	andeq	r0, r0, ip
 4bc:	000002c4 	andeq	r0, r0, r4, asr #5
 4c0:	0800094c 	stmdaeq	r0, {r2, r3, r6, r8, fp}
 4c4:	00000010 	andeq	r0, r0, r0, lsl r0
 4c8:	0000000c 	andeq	r0, r0, ip
 4cc:	000002c4 	andeq	r0, r0, r4, asr #5
 4d0:	0800095c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp}
 4d4:	00000018 	andeq	r0, r0, r8, lsl r0
 4d8:	0000000c 	andeq	r0, r0, ip
 4dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4e0:	7c020001 	stcvc	0, cr0, [r2], {1}
 4e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4e8:	0000000c 	andeq	r0, r0, ip
 4ec:	000004d8 	ldrdeq	r0, [r0], -r8
 4f0:	08000974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp}
 4f4:	0000005c 	andeq	r0, r0, ip, asr r0
 4f8:	00000018 	andeq	r0, r0, r8, lsl r0
 4fc:	000004d8 	ldrdeq	r0, [r0], -r8
 500:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
 504:	00000044 	andeq	r0, r0, r4, asr #32
 508:	40080e41 	andmi	r0, r8, r1, asr #28
 50c:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 510:	00000001 	andeq	r0, r0, r1
 514:	0000000c 	andeq	r0, r0, ip
 518:	000004d8 	ldrdeq	r0, [r0], -r8
 51c:	00000000 	andeq	r0, r0, r0
 520:	00000002 	andeq	r0, r0, r2
 524:	0000000c 	andeq	r0, r0, ip
 528:	000004d8 	ldrdeq	r0, [r0], -r8
 52c:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
 530:	00000018 	andeq	r0, r0, r8, lsl r0
 534:	0000000c 	andeq	r0, r0, ip
 538:	000004d8 	ldrdeq	r0, [r0], -r8
 53c:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
 540:	00000018 	andeq	r0, r0, r8, lsl r0
 544:	0000000c 	andeq	r0, r0, ip
 548:	000004d8 	ldrdeq	r0, [r0], -r8
 54c:	08000a44 	stmdaeq	r0, {r2, r6, r9, fp}
 550:	00000028 	andeq	r0, r0, r8, lsr #32
 554:	0000000c 	andeq	r0, r0, ip
 558:	000004d8 	ldrdeq	r0, [r0], -r8
 55c:	08000a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp}
 560:	00000034 	andeq	r0, r0, r4, lsr r0
 564:	0000001c 	andeq	r0, r0, ip, lsl r0
 568:	000004d8 	ldrdeq	r0, [r0], -r8
 56c:	08000aa0 	stmdaeq	r0, {r5, r7, r9, fp}
 570:	0000005c 	andeq	r0, r0, ip, asr r0
 574:	40100e41 	andsmi	r0, r0, r1, asr #28
 578:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
 57c:	02864003 	addeq	r4, r6, #3
 580:	00018e40 	andeq	r8, r1, r0, asr #28
 584:	00000024 	andeq	r0, r0, r4, lsr #32
 588:	000004d8 	ldrdeq	r0, [r0], -r8
 58c:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
 590:	00000210 	andeq	r0, r0, r0, lsl r2
 594:	40180e42 	andsmi	r0, r8, r2, asr #28
 598:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
 59c:	04864005 	streq	r4, [r6], #5
 5a0:	40038740 	andmi	r8, r3, r0, asr #14
 5a4:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
 5a8:	00000001 	andeq	r0, r0, r1
 5ac:	0000000c 	andeq	r0, r0, ip
 5b0:	000004d8 	ldrdeq	r0, [r0], -r8
 5b4:	00000000 	andeq	r0, r0, r0
 5b8:	0000000c 	andeq	r0, r0, ip
 5bc:	0000000c 	andeq	r0, r0, ip
 5c0:	000004d8 	ldrdeq	r0, [r0], -r8
 5c4:	00000000 	andeq	r0, r0, r0
 5c8:	0000000c 	andeq	r0, r0, ip
 5cc:	0000000c 	andeq	r0, r0, ip
 5d0:	000004d8 	ldrdeq	r0, [r0], -r8
 5d4:	08000d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp}
 5d8:	0000000c 	andeq	r0, r0, ip
 5dc:	0000000c 	andeq	r0, r0, ip
 5e0:	000004d8 	ldrdeq	r0, [r0], -r8
 5e4:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
 5e8:	00000004 	andeq	r0, r0, r4
 5ec:	0000000c 	andeq	r0, r0, ip
 5f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 5f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5fc:	0000000c 	andeq	r0, r0, ip
 600:	000005ec 	andeq	r0, r0, ip, ror #11
 604:	00000000 	andeq	r0, r0, r0
 608:	0000000c 	andeq	r0, r0, ip
 60c:	0000000c 	andeq	r0, r0, ip
 610:	000005ec 	andeq	r0, r0, ip, ror #11
 614:	00000000 	andeq	r0, r0, r0
 618:	0000000c 	andeq	r0, r0, ip
 61c:	0000000c 	andeq	r0, r0, ip
 620:	000005ec 	andeq	r0, r0, ip, ror #11
 624:	00000000 	andeq	r0, r0, r0
 628:	0000000c 	andeq	r0, r0, ip
 62c:	0000000c 	andeq	r0, r0, ip
 630:	000005ec 	andeq	r0, r0, ip, ror #11
 634:	00000000 	andeq	r0, r0, r0
 638:	0000000c 	andeq	r0, r0, ip
 63c:	0000000c 	andeq	r0, r0, ip
 640:	000005ec 	andeq	r0, r0, ip, ror #11
 644:	00000000 	andeq	r0, r0, r0
 648:	0000000c 	andeq	r0, r0, ip
 64c:	0000000c 	andeq	r0, r0, ip
 650:	000005ec 	andeq	r0, r0, ip, ror #11
 654:	00000000 	andeq	r0, r0, r0
 658:	0000000c 	andeq	r0, r0, ip
 65c:	0000000c 	andeq	r0, r0, ip
 660:	000005ec 	andeq	r0, r0, ip, ror #11
 664:	00000000 	andeq	r0, r0, r0
 668:	0000000c 	andeq	r0, r0, ip
 66c:	0000000c 	andeq	r0, r0, ip
 670:	000005ec 	andeq	r0, r0, ip, ror #11
 674:	00000000 	andeq	r0, r0, r0
 678:	00000010 	andeq	r0, r0, r0, lsl r0
 67c:	0000000c 	andeq	r0, r0, ip
 680:	000005ec 	andeq	r0, r0, ip, ror #11
 684:	00000000 	andeq	r0, r0, r0
 688:	0000000c 	andeq	r0, r0, ip
 68c:	0000000c 	andeq	r0, r0, ip
 690:	000005ec 	andeq	r0, r0, ip, ror #11
 694:	00000000 	andeq	r0, r0, r0
 698:	0000000e 	andeq	r0, r0, lr
 69c:	0000000c 	andeq	r0, r0, ip
 6a0:	000005ec 	andeq	r0, r0, ip, ror #11
 6a4:	00000000 	andeq	r0, r0, r0
 6a8:	00000010 	andeq	r0, r0, r0, lsl r0
 6ac:	0000000c 	andeq	r0, r0, ip
 6b0:	000005ec 	andeq	r0, r0, ip, ror #11
 6b4:	00000000 	andeq	r0, r0, r0
 6b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6bc:	0000000c 	andeq	r0, r0, ip
 6c0:	000005ec 	andeq	r0, r0, ip, ror #11
 6c4:	00000000 	andeq	r0, r0, r0
 6c8:	00000012 	andeq	r0, r0, r2, lsl r0
 6cc:	0000000c 	andeq	r0, r0, ip
 6d0:	000005ec 	andeq	r0, r0, ip, ror #11
 6d4:	08000d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp}
 6d8:	0000002a 	andeq	r0, r0, sl, lsr #32
 6dc:	0000000c 	andeq	r0, r0, ip
 6e0:	000005ec 	andeq	r0, r0, ip, ror #11
 6e4:	00000000 	andeq	r0, r0, r0
 6e8:	0000002a 	andeq	r0, r0, sl, lsr #32
 6ec:	0000000c 	andeq	r0, r0, ip
 6f0:	000005ec 	andeq	r0, r0, ip, ror #11
 6f4:	00000000 	andeq	r0, r0, r0
 6f8:	00000024 	andeq	r0, r0, r4, lsr #32
 6fc:	0000000c 	andeq	r0, r0, ip
 700:	000005ec 	andeq	r0, r0, ip, ror #11
 704:	00000000 	andeq	r0, r0, r0
 708:	00000012 	andeq	r0, r0, r2, lsl r0
 70c:	0000000c 	andeq	r0, r0, ip
 710:	000005ec 	andeq	r0, r0, ip, ror #11
 714:	00000000 	andeq	r0, r0, r0
 718:	00000012 	andeq	r0, r0, r2, lsl r0
 71c:	0000000c 	andeq	r0, r0, ip
 720:	000005ec 	andeq	r0, r0, ip, ror #11
 724:	00000000 	andeq	r0, r0, r0
 728:	0000001e 	andeq	r0, r0, lr, lsl r0
 72c:	0000000c 	andeq	r0, r0, ip
 730:	000005ec 	andeq	r0, r0, ip, ror #11
 734:	08000d46 	stmdaeq	r0, {r1, r2, r6, r8, sl, fp}
 738:	0000001e 	andeq	r0, r0, lr, lsl r0
 73c:	0000000c 	andeq	r0, r0, ip
 740:	000005ec 	andeq	r0, r0, ip, ror #11
 744:	00000000 	andeq	r0, r0, r0
 748:	0000001e 	andeq	r0, r0, lr, lsl r0
 74c:	0000000c 	andeq	r0, r0, ip
 750:	000005ec 	andeq	r0, r0, ip, ror #11
 754:	00000000 	andeq	r0, r0, r0
 758:	0000001c 	andeq	r0, r0, ip, lsl r0
 75c:	0000000c 	andeq	r0, r0, ip
 760:	000005ec 	andeq	r0, r0, ip, ror #11
 764:	08000d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp}
 768:	0000001c 	andeq	r0, r0, ip, lsl r0
 76c:	0000000c 	andeq	r0, r0, ip
 770:	000005ec 	andeq	r0, r0, ip, ror #11
 774:	00000000 	andeq	r0, r0, r0
 778:	0000001e 	andeq	r0, r0, lr, lsl r0
 77c:	0000000c 	andeq	r0, r0, ip
 780:	000005ec 	andeq	r0, r0, ip, ror #11
 784:	00000000 	andeq	r0, r0, r0
 788:	0000001e 	andeq	r0, r0, lr, lsl r0
 78c:	0000000c 	andeq	r0, r0, ip
 790:	000005ec 	andeq	r0, r0, ip, ror #11
 794:	00000000 	andeq	r0, r0, r0
 798:	0000001c 	andeq	r0, r0, ip, lsl r0
 79c:	0000000c 	andeq	r0, r0, ip
 7a0:	000005ec 	andeq	r0, r0, ip, ror #11
 7a4:	00000000 	andeq	r0, r0, r0
 7a8:	0000001a 	andeq	r0, r0, sl, lsl r0
 7ac:	0000000c 	andeq	r0, r0, ip
 7b0:	000005ec 	andeq	r0, r0, ip, ror #11
 7b4:	00000000 	andeq	r0, r0, r0
 7b8:	0000001a 	andeq	r0, r0, sl, lsl r0
 7bc:	0000000c 	andeq	r0, r0, ip
 7c0:	000005ec 	andeq	r0, r0, ip, ror #11
 7c4:	00000000 	andeq	r0, r0, r0
 7c8:	00000018 	andeq	r0, r0, r8, lsl r0
 7cc:	0000000c 	andeq	r0, r0, ip
 7d0:	000005ec 	andeq	r0, r0, ip, ror #11
 7d4:	00000000 	andeq	r0, r0, r0
 7d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7dc:	0000000c 	andeq	r0, r0, ip
 7e0:	000005ec 	andeq	r0, r0, ip, ror #11
 7e4:	00000000 	andeq	r0, r0, r0
 7e8:	00000020 	andeq	r0, r0, r0, lsr #32
 7ec:	0000000c 	andeq	r0, r0, ip
 7f0:	000005ec 	andeq	r0, r0, ip, ror #11
 7f4:	00000000 	andeq	r0, r0, r0
 7f8:	00000020 	andeq	r0, r0, r0, lsr #32
 7fc:	0000000c 	andeq	r0, r0, ip
 800:	000005ec 	andeq	r0, r0, ip, ror #11
 804:	08000d80 	stmdaeq	r0, {r7, r8, sl, fp}
 808:	00000020 	andeq	r0, r0, r0, lsr #32
 80c:	0000000c 	andeq	r0, r0, ip
 810:	000005ec 	andeq	r0, r0, ip, ror #11
 814:	08000da0 	stmdaeq	r0, {r5, r7, r8, sl, fp}
 818:	00000020 	andeq	r0, r0, r0, lsr #32
 81c:	0000000c 	andeq	r0, r0, ip
 820:	000005ec 	andeq	r0, r0, ip, ror #11
 824:	00000000 	andeq	r0, r0, r0
 828:	0000001e 	andeq	r0, r0, lr, lsl r0
 82c:	0000000c 	andeq	r0, r0, ip
 830:	000005ec 	andeq	r0, r0, ip, ror #11
 834:	00000000 	andeq	r0, r0, r0
 838:	00000012 	andeq	r0, r0, r2, lsl r0
 83c:	0000000c 	andeq	r0, r0, ip
 840:	000005ec 	andeq	r0, r0, ip, ror #11
 844:	00000000 	andeq	r0, r0, r0
 848:	00000020 	andeq	r0, r0, r0, lsr #32
 84c:	0000000c 	andeq	r0, r0, ip
 850:	000005ec 	andeq	r0, r0, ip, ror #11
 854:	00000000 	andeq	r0, r0, r0
 858:	00000020 	andeq	r0, r0, r0, lsr #32
 85c:	0000000c 	andeq	r0, r0, ip
 860:	000005ec 	andeq	r0, r0, ip, ror #11
 864:	08000dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp}
 868:	0000001c 	andeq	r0, r0, ip, lsl r0
 86c:	0000000c 	andeq	r0, r0, ip
 870:	000005ec 	andeq	r0, r0, ip, ror #11
 874:	08000ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp}
 878:	0000001c 	andeq	r0, r0, ip, lsl r0
 87c:	0000000c 	andeq	r0, r0, ip
 880:	000005ec 	andeq	r0, r0, ip, ror #11
 884:	08000df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp}
 888:	0000001c 	andeq	r0, r0, ip, lsl r0
 88c:	0000000c 	andeq	r0, r0, ip
 890:	000005ec 	andeq	r0, r0, ip, ror #11
 894:	00000000 	andeq	r0, r0, r0
 898:	00000026 	andeq	r0, r0, r6, lsr #32
 89c:	0000000c 	andeq	r0, r0, ip
 8a0:	000005ec 	andeq	r0, r0, ip, ror #11
 8a4:	08000e14 	stmdaeq	r0, {r2, r4, r9, sl, fp}
 8a8:	00000040 	andeq	r0, r0, r0, asr #32
 8ac:	0000000c 	andeq	r0, r0, ip
 8b0:	000005ec 	andeq	r0, r0, ip, ror #11
 8b4:	00000000 	andeq	r0, r0, r0
 8b8:	00000020 	andeq	r0, r0, r0, lsr #32
 8bc:	0000000c 	andeq	r0, r0, ip
 8c0:	000005ec 	andeq	r0, r0, ip, ror #11
 8c4:	00000000 	andeq	r0, r0, r0
 8c8:	00000020 	andeq	r0, r0, r0, lsr #32
 8cc:	00000018 	andeq	r0, r0, r8, lsl r0
 8d0:	000005ec 	andeq	r0, r0, ip, ror #11
 8d4:	00000000 	andeq	r0, r0, r0
 8d8:	00000038 	andeq	r0, r0, r8, lsr r0
 8dc:	40080e41 	andmi	r0, r8, r1, asr #28
 8e0:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 8e4:	00000001 	andeq	r0, r0, r1
 8e8:	0000000c 	andeq	r0, r0, ip
 8ec:	000005ec 	andeq	r0, r0, ip, ror #11
 8f0:	00000000 	andeq	r0, r0, r0
 8f4:	00000020 	andeq	r0, r0, r0, lsr #32
 8f8:	0000000c 	andeq	r0, r0, ip
 8fc:	000005ec 	andeq	r0, r0, ip, ror #11
 900:	00000000 	andeq	r0, r0, r0
 904:	00000020 	andeq	r0, r0, r0, lsr #32
 908:	0000000c 	andeq	r0, r0, ip
 90c:	000005ec 	andeq	r0, r0, ip, ror #11
 910:	00000000 	andeq	r0, r0, r0
 914:	0000001c 	andeq	r0, r0, ip, lsl r0
 918:	0000000c 	andeq	r0, r0, ip
 91c:	000005ec 	andeq	r0, r0, ip, ror #11
 920:	00000000 	andeq	r0, r0, r0
 924:	0000001c 	andeq	r0, r0, ip, lsl r0
 928:	00000018 	andeq	r0, r0, r8, lsl r0
 92c:	000005ec 	andeq	r0, r0, ip, ror #11
 930:	00000000 	andeq	r0, r0, r0
 934:	000000a8 	andeq	r0, r0, r8, lsr #1
 938:	40080e42 	andmi	r0, r8, r2, asr #28
 93c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 940:	00000001 	andeq	r0, r0, r1
 944:	0000000c 	andeq	r0, r0, ip
 948:	000005ec 	andeq	r0, r0, ip, ror #11
 94c:	00000000 	andeq	r0, r0, r0
 950:	0000005c 	andeq	r0, r0, ip, asr r0
 954:	0000000c 	andeq	r0, r0, ip
 958:	000005ec 	andeq	r0, r0, ip, ror #11
 95c:	00000000 	andeq	r0, r0, r0
 960:	0000005c 	andeq	r0, r0, ip, asr r0
 964:	0000000c 	andeq	r0, r0, ip
 968:	000005ec 	andeq	r0, r0, ip, ror #11
 96c:	00000000 	andeq	r0, r0, r0
 970:	00000020 	andeq	r0, r0, r0, lsr #32
 974:	0000000c 	andeq	r0, r0, ip
 978:	000005ec 	andeq	r0, r0, ip, ror #11
 97c:	00000000 	andeq	r0, r0, r0
 980:	00000020 	andeq	r0, r0, r0, lsr #32
 984:	0000000c 	andeq	r0, r0, ip
 988:	000005ec 	andeq	r0, r0, ip, ror #11
 98c:	00000000 	andeq	r0, r0, r0
 990:	00000044 	andeq	r0, r0, r4, asr #32
 994:	0000000c 	andeq	r0, r0, ip
 998:	000005ec 	andeq	r0, r0, ip, ror #11
 99c:	00000000 	andeq	r0, r0, r0
 9a0:	0000003a 	andeq	r0, r0, sl, lsr r0
 9a4:	0000000c 	andeq	r0, r0, ip
 9a8:	000005ec 	andeq	r0, r0, ip, ror #11
 9ac:	00000000 	andeq	r0, r0, r0
 9b0:	00000006 	andeq	r0, r0, r6
 9b4:	0000000c 	andeq	r0, r0, ip
 9b8:	000005ec 	andeq	r0, r0, ip, ror #11
 9bc:	00000000 	andeq	r0, r0, r0
 9c0:	0000000a 	andeq	r0, r0, sl
 9c4:	0000000c 	andeq	r0, r0, ip
 9c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 9cc:	7c020001 	stcvc	0, cr0, [r2], {1}
 9d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 9d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 9d8:	000009c4 	andeq	r0, r0, r4, asr #19
 9dc:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
 9e0:	00000154 	andeq	r0, r0, r4, asr r1
 9e4:	40100e41 	andsmi	r0, r0, r1, asr #28
 9e8:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
 9ec:	02864003 	addeq	r4, r6, #3
 9f0:	00018e40 	andeq	r8, r1, r0, asr #28
 9f4:	00000018 	andeq	r0, r0, r8, lsl r0
 9f8:	000009c4 	andeq	r0, r0, r4, asr #19
 9fc:	00000000 	andeq	r0, r0, r0
 a00:	00000070 	andeq	r0, r0, r0, ror r0
 a04:	40080e41 	andmi	r0, r8, r1, asr #28
 a08:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 a0c:	00000001 	andeq	r0, r0, r1
 a10:	0000000c 	andeq	r0, r0, ip
 a14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a18:	7c020001 	stcvc	0, cr0, [r2], {1}
 a1c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a20:	00000018 	andeq	r0, r0, r8, lsl r0
 a24:	00000a10 	andeq	r0, r0, r0, lsl sl
 a28:	08000fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp}
 a2c:	00000038 	andeq	r0, r0, r8, lsr r0
 a30:	40080e41 	andmi	r0, r8, r1, asr #28
 a34:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 a38:	00000001 	andeq	r0, r0, r1
 a3c:	0000000c 	andeq	r0, r0, ip
 a40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a44:	7c020001 	stcvc	0, cr0, [r2], {1}
 a48:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a4c:	00000018 	andeq	r0, r0, r8, lsl r0
 a50:	00000a3c 	andeq	r0, r0, ip, lsr sl
 a54:	08000fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp}
 a58:	00000024 	andeq	r0, r0, r4, lsr #32
 a5c:	40080e41 	andmi	r0, r8, r1, asr #28
 a60:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 a64:	00000001 	andeq	r0, r0, r1
 a68:	00000018 	andeq	r0, r0, r8, lsl r0
 a6c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 a70:	08001004 	stmdaeq	r0, {r2, ip}
 a74:	00000024 	andeq	r0, r0, r4, lsr #32
 a78:	40080e41 	andmi	r0, r8, r1, asr #28
 a7c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 a80:	00000001 	andeq	r0, r0, r1
 a84:	00000018 	andeq	r0, r0, r8, lsl r0
 a88:	00000a3c 	andeq	r0, r0, ip, lsr sl
 a8c:	08001028 	stmdaeq	r0, {r3, r5, ip}
 a90:	00000090 	muleq	r0, r0, r0
 a94:	40080e41 	andmi	r0, r8, r1, asr #28
 a98:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 a9c:	00000001 	andeq	r0, r0, r1
 aa0:	00000028 	andeq	r0, r0, r8, lsr #32
 aa4:	00000a3c 	andeq	r0, r0, ip, lsr sl
 aa8:	080010b8 	stmdaeq	r0, {r3, r4, r5, r7, ip}
 aac:	000000a8 	andeq	r0, r0, r8, lsr #1
 ab0:	40200e43 	eormi	r0, r0, r3, asr #28
 ab4:	84400883 	strbhi	r0, [r0], #-2179	; 0x883
 ab8:	06854007 	streq	r4, [r5], r7
 abc:	40058640 	andmi	r8, r5, r0, asr #12
 ac0:	88400487 	stmdahi	r0, {r0, r1, r2, r7, sl}^
 ac4:	02894003 	addeq	r4, r9, #3
 ac8:	00018e40 	andeq	r8, r1, r0, asr #28
 acc:	00000018 	andeq	r0, r0, r8, lsl r0
 ad0:	00000a3c 	andeq	r0, r0, ip, lsr sl
 ad4:	08001160 	stmdaeq	r0, {r5, r6, r8, ip}
 ad8:	00000038 	andeq	r0, r0, r8, lsr r0
 adc:	40080e41 	andmi	r0, r8, r1, asr #28
 ae0:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 ae4:	00000001 	andeq	r0, r0, r1
 ae8:	0000001c 	andeq	r0, r0, ip, lsl r0
 aec:	00000a3c 	andeq	r0, r0, ip, lsr sl
 af0:	08001198 	stmdaeq	r0, {r3, r4, r7, r8, ip}
 af4:	00000048 	andeq	r0, r0, r8, asr #32
 af8:	40100e41 	andsmi	r0, r0, r1, asr #28
 afc:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 b00:	02854003 	addeq	r4, r5, #3
 b04:	00018e40 	andeq	r8, r1, r0, asr #28
 b08:	0000001c 	andeq	r0, r0, ip, lsl r0
 b0c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b10:	080011e0 	stmdaeq	r0, {r5, r6, r7, r8, ip}
 b14:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 b18:	40100e41 	andsmi	r0, r0, r1, asr #28
 b1c:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 b20:	02854003 	addeq	r4, r5, #3
 b24:	00018e40 	andeq	r8, r1, r0, asr #28
 b28:	0000001c 	andeq	r0, r0, ip, lsl r0
 b2c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b30:	080012b0 	stmdaeq	r0, {r4, r5, r7, r9, ip}
 b34:	00000084 	andeq	r0, r0, r4, lsl #1
 b38:	40100e41 	andsmi	r0, r0, r1, asr #28
 b3c:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 b40:	02854003 	addeq	r4, r5, #3
 b44:	00018e40 	andeq	r8, r1, r0, asr #28
 b48:	00000018 	andeq	r0, r0, r8, lsl r0
 b4c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b50:	08001334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip}
 b54:	00000024 	andeq	r0, r0, r4, lsr #32
 b58:	40080e41 	andmi	r0, r8, r1, asr #28
 b5c:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 b60:	00000001 	andeq	r0, r0, r1
 b64:	0000000c 	andeq	r0, r0, ip
 b68:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b6c:	08001358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip}
 b70:	0000001c 	andeq	r0, r0, ip, lsl r0
 b74:	00000018 	andeq	r0, r0, r8, lsl r0
 b78:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b7c:	08001374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip}
 b80:	00000040 	andeq	r0, r0, r0, asr #32
 b84:	40080e41 	andmi	r0, r8, r1, asr #28
 b88:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 b8c:	00000001 	andeq	r0, r0, r1
 b90:	00000024 	andeq	r0, r0, r4, lsr #32
 b94:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b98:	080013b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, ip}
 b9c:	000002dc 	ldrdeq	r0, [r0], -ip
 ba0:	40180e41 	andsmi	r0, r8, r1, asr #28
 ba4:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 ba8:	04844005 	streq	r4, [r4], #5
 bac:	40038540 	andmi	r8, r3, r0, asr #10
 bb0:	8e400286 	cdphi	2, 4, cr0, cr0, cr6, {4}
 bb4:	00000001 	andeq	r0, r0, r1
 bb8:	00000024 	andeq	r0, r0, r4, lsr #32
 bbc:	00000a3c 	andeq	r0, r0, ip, lsr sl
 bc0:	08001690 	stmdaeq	r0, {r4, r7, r9, sl, ip}
 bc4:	000000c8 	andeq	r0, r0, r8, asr #1
 bc8:	40180e41 	andsmi	r0, r8, r1, asr #28
 bcc:	84400683 	strbhi	r0, [r0], #-1667	; 0x683
 bd0:	04854005 	streq	r4, [r5], #5
 bd4:	40038640 	andmi	r8, r3, r0, asr #12
 bd8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bdc:	00000001 	andeq	r0, r0, r1
 be0:	00000018 	andeq	r0, r0, r8, lsl r0
 be4:	00000a3c 	andeq	r0, r0, ip, lsr sl
 be8:	08001758 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, ip}
 bec:	00000038 	andeq	r0, r0, r8, lsr r0
 bf0:	400c0e41 	andmi	r0, ip, r1, asr #28
 bf4:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
 bf8:	018e4002 	orreq	r4, lr, r2
 bfc:	00000018 	andeq	r0, r0, r8, lsl r0
 c00:	00000a3c 	andeq	r0, r0, ip, lsr sl
 c04:	08001790 	stmdaeq	r0, {r4, r7, r8, r9, sl, ip}
 c08:	0000005c 	andeq	r0, r0, ip, asr r0
 c0c:	40080e41 	andmi	r0, r8, r1, asr #28
 c10:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 c14:	00000001 	andeq	r0, r0, r1
 c18:	0000000c 	andeq	r0, r0, ip
 c1c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 c20:	00000000 	andeq	r0, r0, r0
 c24:	00000002 	andeq	r0, r0, r2
 c28:	0000000c 	andeq	r0, r0, ip
 c2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 c30:	7c020001 	stcvc	0, cr0, [r2], {1}
 c34:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 c38:	00000018 	andeq	r0, r0, r8, lsl r0
 c3c:	00000c28 	andeq	r0, r0, r8, lsr #24
 c40:	080017ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip}
 c44:	00000030 	andeq	r0, r0, r0, lsr r0
 c48:	400c0e41 	andmi	r0, ip, r1, asr #28
 c4c:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
 c50:	018e4002 	orreq	r4, lr, r2
 c54:	00000018 	andeq	r0, r0, r8, lsl r0
 c58:	00000c28 	andeq	r0, r0, r8, lsr #24
 c5c:	0800181c 	stmdaeq	r0, {r2, r3, r4, fp, ip}
 c60:	00000024 	andeq	r0, r0, r4, lsr #32
 c64:	40080e41 	andmi	r0, r8, r1, asr #28
 c68:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 c6c:	00000001 	andeq	r0, r0, r1

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4349564e 	movtmi	r5, #38478	; 0x964e
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	5152495f 	cmppl	r2, pc, asr r9
       8:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
       c:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	7300646d 	movwvc	r6, #1133	; 0x46d
      14:	6e497274 	mcrvs	2, 2, r7, cr9, cr4, {3}
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	00786564 	rsbseq	r6, r8, r4, ror #10
      1c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
      24:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
      28:	64416563 	strbvs	r6, [r1], #-1379	; 0x563
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	6d2f0073 	stcvs	0, cr0, [pc, #-460]!	; fffffe6c <BootRAM+0xef7060d>
      34:	61696465 	cmnvs	r9, r5, ror #8
      38:	5f66732f 	svcpl	0x0066732f

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	4d2f6275 	sfmmi	f6, 4, [pc, #-468]!	; fffffe74 <BootRAM+0xef70615>
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	69727461 	ldmdbvs	r2!, {r0, r5, r6, sl, ip, sp, lr}^
      48:	6f532f78 	svcvs	0x00532f78
      4c:	61777466 	cmnvs	r7, r6, ror #8

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	422f6572 	eormi	r6, pc, #478150656	; 0x1c800000
      54:	6c746f6f 	ldclvs	15, cr6, [r4], #-444	; 0xfffffe44
      58:	6564616f 	strbvs	r6, [r4, #-367]!	; 0x16f
      5c:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
      60:	445f0063 	ldrbmi	r0, [pc], #-99	; 68 <_Minimum_Stack_Size-0x98>
      64:	43495645 	movtmi	r5, #38469	; 0x9645
      68:	4e495f45 	cdpmi	15, 4, cr5, cr9, cr5, {2}
      6c:	62004f46 	andvs	r4, r0, #280	; 0x118
      70:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
      74:	74536563 	ldrbvc	r6, [r3], #-1379	; 0x563
      78:	00657461 	rsbeq	r7, r5, r1, ror #8
      7c:	45627375 	strbmi	r7, [r2, #-885]!	; 0x375
      80:	5349626e 	movtpl	r6, #37486	; 0x926e
      84:	45520052 	ldrbmi	r0, [r2, #-82]	; 0x52
      88:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
      8c:	4941575f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
      90:	73550054 	cmpvc	r5, #84	; 0x54
      94:	535f7265 	cmppl	pc, #1342177286	; 0x50000006
      98:	6e457465 	cdpvs	4, 4, cr7, cr5, cr5, {3}
      9c:	696f5064 	stmdbvs	pc!, {r2, r5, r6, ip, lr}^	; <UNPREDICTABLE>
      a0:	6546746e 	strbvs	r7, [r6, #-1134]	; 0x46e
      a4:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
      a8:	66640065 	strbtvs	r0, [r4], -r5, rrx
      ac:	696e4975 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r8, fp, lr}^
      b0:	6e4f0074 	mcrvs	0, 2, r0, cr15, cr4, {3}
      b4:	73654465 	cmnvc	r5, #1694498816	; 0x65000000
      b8:	70697263 	rsbvc	r7, r9, r3, ror #4
      bc:	00726f74 	rsbseq	r6, r2, r4, ror pc
      c0:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
      c4:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0x375
      c8:	6200646e 	andvs	r6, r0, #1845493760	; 0x6e000000
      cc:	464f5345 	strbmi	r5, [pc], -r5, asr #6
      d0:	00746e63 	rsbseq	r6, r4, r3, ror #28
      d4:	52627375 	rsbpl	r7, r2, #-738197503	; 0xd4000001
      d8:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
      dc:	55530065 	ldrbpl	r0, [r3, #-101]	; 0x65
      e0:	4e455053 	mcrmi	0, 2, r5, cr5, cr3, {2}
      e4:	00444544 	subeq	r4, r4, r4, asr #10
      e8:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
      ec:	535f454d 	cmppl	pc, #322961408	; 0x13400000
      f0:	54524154 	ldrbpl	r4, [r2], #-340	; 0x154
      f4:	62737500 	rsbsvs	r7, r3, #0, 10
      f8:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
      fc:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     100:	61654665 	cmnvs	r5, r5, ror #12
     104:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     108:	706f4300 	rsbvc	r4, pc, r0, lsl #6
     10c:	74614479 	strbtvc	r4, [r1], #-1145	; 0x479
     110:	73550061 	cmpvc	r5, #97	; 0x61
     114:	535f7265 	cmppl	pc, #1342177286	; 0x50000006
     118:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
     11c:	66726574 			; <UNDEFINED> instruction: 0x66726574
     120:	00656361 	rsbeq	r6, r5, r1, ror #6
     124:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
     128:	525f4543 	subspl	r4, pc, #281018368	; 0x10c00000
     12c:	50494345 	subpl	r4, r9, r5, asr #6
     130:	544e4549 	strbpl	r4, [lr], #-1353	; 0x549
     134:	574f5000 	strbpl	r5, [pc, -r0]
     138:	44455245 	strbmi	r5, [r5], #-581	; 0x245
     13c:	62737500 	rsbsvs	r7, r3, #0, 10
     140:	7500632e 	strvc	r6, [r0, #-814]	; 0x32e
     144:	74536273 	ldrbvc	r6, [r3], #-627	; 0x273
     148:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     14c:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     150:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     154:	7500726f 	strvc	r7, [r0, #-623]	; 0x26f
     158:	65476273 	strbvs	r6, [r7, #-627]	; 0x273
     15c:	76654474 			; <UNDEFINED> instruction: 0x76654474
     160:	44656369 	strbtmi	r6, [r5], #-873	; 0x369
     164:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     168:	6f747069 	svcvs	0x00747069
     16c:	53550072 	cmppl	r5, #114	; 0x72
     170:	6e497742 	cdpvs	7, 4, cr7, cr9, cr2, {2}
     174:	73786564 	cmnvc	r8, #100, 10	; 0x19000000
     178:	31757600 	cmncc	r5, r0, lsl #12
     17c:	4e470036 	mcrmi	0, 2, r0, cr7, cr6, {1}
     180:	20432055 	subcs	r2, r3, r5, asr r0
     184:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     188:	30322033 	eorscc	r2, r2, r3, lsr r0
     18c:	32303431 	eorscc	r3, r0, #822083584	; 0x31000000
     190:	28203832 	stmdacs	r0!, {r1, r4, r5, fp, ip, sp}
     194:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0x572
     198:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     19c:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
     1a0:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
     1a4:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
     1a8:	342d6465 	strtcc	r6, [sp], #-1125	; 0x465
     1ac:	622d385f 	eorvs	r3, sp, #6225920	; 0x5f0000
     1b0:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
     1b4:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0x68
     1b8:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     1bc:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
     1c0:	32333830 	eorscc	r3, r3, #48, 16	; 0x300000
     1c4:	2d205d32 	stccs	13, cr5, [r0, #-200]!	; 0xffffff38
     1c8:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0x46d
     1cc:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
     1d0:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0x36d
     1d4:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
     1d8:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
     1dc:	2d20336d 	stccs	3, cr3, [r0, #-436]!	; 0xfffffe4c
     1e0:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0x46d
     1e4:	692d626d 	pushvs	{r0, r2, r3, r5, r6, r9, sp, lr}
     1e8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     1ec:	6b726f77 	blvs	1c9bfd0 <__Stack_Size+0x1c9bbd0>
     1f0:	20672d20 	rsbcs	r2, r7, r0, lsr #26
     1f4:	20734f2d 	rsbscs	r4, r3, sp, lsr #30
     1f8:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0x62d
     1fc:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     200:	732d6e6f 	teqvc	sp, #1776	; 0x6f0
     204:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     208:	20736e6f 	rsbscs	r6, r3, pc, ror #28
     20c:	6164662d 	cmnvs	r4, sp, lsr #12
     210:	732d6174 	teqvc	sp, #116, 2
     214:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     218:	00736e6f 	rsbseq	r6, r3, pc, ror #28
     21c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     220:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
     224:	62737500 	rsbsvs	r7, r3, #0, 10
     228:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
     22c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     230:	73654467 	cmnvc	r5, #1728053248	; 0x67000000
     234:	70697263 	rsbvc	r7, r9, r3, ror #4
     238:	00726f74 	rsbseq	r6, r2, r4, ror pc
     23c:	62425355 	subvs	r5, r2, #1409286145	; 0x54000001
     240:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0x552
     244:	00747365 	rsbseq	r7, r4, r5, ror #6
     248:	5f425355 	svcpl	0x00425355
     24c:	5f544f4e 	svcpl	0x00544f4e
     250:	44414552 	strbmi	r4, [r1], #-1362	; 0x552
     254:	49770059 	ldmdbmi	r7!, {r0, r3, r4, r6}^
     258:	00727473 	rsbseq	r7, r2, r3, ror r4
     25c:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     260:	455f454d 	ldrbmi	r4, [pc, #-1357]	; fffffd1b <BootRAM+0xef704bc>
     264:	52455458 	subpl	r5, r5, #88, 8	; 0x58000000
     268:	004c414e 	subeq	r4, ip, lr, asr #2
     26c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     270:	545f6563 	ldrbpl	r6, [pc], #-1379	; 278 <_Minimum_Stack_Size+0x178>
     274:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
     278:	74657300 	strbtvc	r7, [r5], #-768	; 0x300
     27c:	53557075 	cmppl	r5, #117	; 0x75
     280:	73750042 	cmnvc	r5, #66	; 0x42
     284:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
     288:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     28c:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     290:	6f697461 	svcvs	0x00697461
     294:	4962006e 	stmdbmi	r2!, {r1, r2, r3, r5, r6}^
     298:	6150746e 	cmpvs	r0, lr, ror #8
     29c:	4f536b63 	svcmi	0x00536b63
     2a0:	49700046 	ldmdbmi	r0!, {r1, r2, r6}^
     2a4:	726f666e 	rsbvc	r6, pc, #115343360	; 0x6e00000
     2a8:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     2ac:	63006e6f 	movwvs	r6, #3695	; 0xe6f
     2b0:	73614d72 	cmnvc	r1, #7296	; 0x1c80
     2b4:	7355006b 	cmpvc	r5, #107	; 0x6b
     2b8:	4c775f62 	ldclmi	15, cr5, [r7], #-392	; 0xfffffe78
     2bc:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
     2c0:	52650068 	rsbpl	r0, r5, #104	; 0x68
     2c4:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
     2c8:	74655365 	strbtvc	r5, [r5], #-869	; 0x365
     2cc:	006c6156 	rsbeq	r6, ip, r6, asr r1
     2d0:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xe49
     2d4:	43414652 	movtmi	r4, #5714	; 0x1652
     2d8:	45525f45 	ldrbmi	r5, [r2, #-3909]	; 0xf45
     2dc:	49504943 	ldmdbmi	r0, {r0, r1, r6, r8, fp, lr}^
     2e0:	00544e45 	subseq	r4, r4, r5, asr #28
     2e4:	544e4377 	strbpl	r4, [lr], #-887	; 0x377
     2e8:	65670052 	strbvs	r0, [r7, #-82]!	; 0x52
     2ec:	616c4674 	smcvs	50276	; 0xc464
     2f0:	61506873 	cmpvs	r0, r3, ror r8
     2f4:	69536567 	ldmdbvs	r3, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
     2f8:	5000657a 	andpl	r6, r0, sl, ror r5
     2fc:	5f454e4f 	svcpl	0x00454e4f
     300:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
     304:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
     308:	7500524f 	strvc	r5, [r0, #-591]	; 0x24f
     30c:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
     310:	76654474 			; <UNDEFINED> instruction: 0x76654474
     314:	41656369 	cmnmi	r5, r9, ror #6
     318:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
     31c:	4e007373 	mcrmi	3, 0, r7, cr0, cr3, {3}
     320:	5f434956 	svcpl	0x00434956
     324:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     328:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     32c:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
     330:	73750065 	cmnvc	r5, #101	; 0x65
     334:	61745362 	cmnvs	r4, r2, ror #6
     338:	4f737574 	svcmi	0x00737574
     33c:	55007475 	strpl	r7, [r0, #-1141]	; 0x475
     340:	775f6273 			; <UNDEFINED> instruction: 0x775f6273
     344:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
     348:	64007465 	strvs	r7, [r0], #-1125	; 0x465
     34c:	70557566 	subsvc	r7, r5, r6, ror #10
     350:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0x164
     354:	65527942 	ldrbvs	r7, [r2, #-2370]	; 0x942
     358:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     35c:	54410074 	strbpl	r0, [r1], #-116	; 0x74
     360:	48434154 	stmdami	r3, {r2, r4, r6, r8, lr}^
     364:	75004445 	strvc	r4, [r0, #-1093]	; 0x445
     368:	6f4e6273 	svcvs	0x004e6273
     36c:	61746144 	cmnvs	r4, r4, asr #2
     370:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
     374:	564e0070 			; <UNDEFINED> instruction: 0x564e0070
     378:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     37c:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     380:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     384:	6275536c 	rsbsvs	r5, r5, #108, 6	; 0xb0000001
     388:	6f697250 	svcvs	0x00697250
     38c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     390:	45525f00 	ldrbmi	r5, [r2, #-3840]	; 0xf00
     394:	49504943 	ldmdbmi	r0, {r0, r1, r6, r8, fp, lr}^
     398:	5f544e45 	svcpl	0x00544e45
     39c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0x954
     3a0:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     3a4:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
     3a8:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     3ac:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     3b0:	4300746e 	movwmi	r7, #1134	; 0x46e
     3b4:	4c5f5254 	lfmmi	f5, 2, [pc], {84}	; 0x54
     3b8:	73750050 	cmnvc	r5, #80	; 0x50
     3bc:	61745362 	cmnvs	r4, r2, ror #6
     3c0:	49737574 	ldmdbmi	r3!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
     3c4:	7543006e 	strbvc	r0, [r3, #-110]	; 0x6e
     3c8:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     3cc:	65465f74 	strbvs	r5, [r6, #-3956]	; 0xf74
     3d0:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
     3d4:	6f540065 	svcvs	0x00540065
     3d8:	5f6c6174 	svcpl	0x006c6174
     3dc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     3e0:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     3e4:	6f697461 	svcvs	0x00697461
     3e8:	7375006e 	cmnvc	r5, #110	; 0x6e
     3ec:	73655262 	cmnvc	r5, #536870918	; 0x20000006
     3f0:	75007465 	strvc	r7, [r0, #-1125]	; 0x465
     3f4:	73446273 	movtvc	r6, #17011	; 0x4273
     3f8:	52534962 	subspl	r4, r3, #1605632	; 0x188000
     3fc:	6f687300 	svcvs	0x00687300
     400:	75207472 	strvc	r7, [r0, #-1138]!	; 0x472
     404:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     408:	2064656e 	rsbcs	r6, r4, lr, ror #10
     40c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     410:	5f425355 	svcpl	0x00425355
     414:	4f525245 	svcmi	0x00525245
     418:	45520052 	ldrbmi	r0, [r2, #-82]	; 0x52
     41c:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
     420:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
     424:	36317500 	ldrtcc	r7, [r1], -r0, lsl #10
     428:	0038755f 	eorseq	r7, r8, pc, asr r5
     42c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     430:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
     434:	65467261 	strbvs	r7, [r6, #-609]	; 0x261
     438:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
     43c:	53550065 	cmppl	r5, #101	; 0x65
     440:	61567742 	cmpvs	r6, r2, asr #14
     444:	7365756c 	cmnvc	r5, #108, 10	; 0x1b000000
     448:	48544f00 	ldmdami	r4, {r8, r9, sl, fp, lr}^
     44c:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
     450:	50494345 	subpl	r4, r9, r5, asr #6
     454:	544e4549 	strbpl	r4, [lr], #-1353	; 0x549
     458:	6f6f6200 	svcvs	0x006f6200
     45c:	5477006c 	ldrbtpl	r0, [r7], #-108	; 0x6c
     460:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
     464:	53726566 	cmnpl	r2, #427819008	; 0x19800000
     468:	00657a69 	rsbeq	r7, r5, r9, ror #20
     46c:	32337576 	eorscc	r7, r3, #494927872	; 0x1d800000
     470:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     474:	52495f43 	subpl	r5, r9, #268	; 0x10c
     478:	61684351 	cmnvs	r8, r1, asr r3
     47c:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     480:	52775f00 	rsbspl	r5, r7, #0, 30
     484:	61566765 	cmpvs	r6, r5, ror #14
     488:	6e69006c 	cdpvs	0, 6, cr0, cr9, cr12, {3}
     48c:	66726574 			; <UNDEFINED> instruction: 0x66726574
     490:	00656361 	rsbeq	r6, r5, r1, ror #6
     494:	4349564e 	movtmi	r5, #38478	; 0x964e
     498:	5152495f 	cmppl	r2, pc, asr r9
     49c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     4a0:	506c656e 	rsbpl	r6, ip, lr, ror #10
     4a4:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
     4a8:	6f697470 	svcvs	0x00697470
     4ac:	6972506e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, lr}^
     4b0:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     4b4:	45700079 	ldrbmi	r0, [r0, #-121]!	; 0x79
     4b8:	746e4970 	strbtvc	r4, [lr], #-2416	; 0x970
     4bc:	004e495f 	subeq	r4, lr, pc, asr r9
     4c0:	4349564e 	movtmi	r5, #38478	; 0x964e
     4c4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     4c8:	70795474 	rsbsvc	r5, r9, r4, ror r4
     4cc:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     4d0:	72754300 	rsbsvc	r4, r5, #0, 6
     4d4:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
     4d8:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     4dc:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     4e0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     4e4:	75006e6f 	strvc	r6, [r0, #-3695]	; 0xe6f
     4e8:	70416273 	subvc	r6, r1, r3, ror r2
     4ec:	696e4970 	stmdbvs	lr!, {r4, r5, r6, r8, fp, lr}^
     4f0:	49770074 	ldmdbmi	r7!, {r2, r4, r5, r6}^
     4f4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     4f8:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
     4fc:	73614d5f 	cmnvc	r1, #6080	; 0x17c0
     500:	7375006b 	cmnvc	r5, #107	; 0x6b
     504:	74655362 	strbtvc	r5, [r5], #-866	; 0x362
     508:	70646e45 	rsbvc	r6, r4, r5, asr #28
     50c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
     510:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     514:	00657275 	rsbeq	r7, r5, r5, ror r2
     518:	73616c43 	cmnvc	r1, #17152	; 0x4300
     51c:	65475f73 	strbvs	r5, [r7, #-3955]	; 0xf73
     520:	6e495f74 	mcrvs	15, 2, r5, cr9, cr4, {3}
     524:	66726574 			; <UNDEFINED> instruction: 0x66726574
     528:	5f656361 	svcpl	0x00656361
     52c:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0x553
     530:	00676e69 	rsbeq	r6, r7, r9, ror #28
     534:	55756664 	ldrbpl	r6, [r5, #-1636]!	; 0x664
     538:	74616470 	strbtvc	r6, [r1], #-1136	; 0x470
     53c:	52794265 	rsbspl	r4, r9, #1342177286	; 0x50000006
     540:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     544:	7a697300 	bvc	1a5d14c <__Stack_Size+0x1a5cd4c>
     548:	70797465 	rsbsvc	r7, r9, r5, ror #8
     54c:	6c430065 	mcrrvs	0, 6, r0, r3, cr5
     550:	5f737361 	svcpl	0x00737361
     554:	61746144 	cmnvs	r4, r4, asr #2
     558:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     55c:	70007075 	andvc	r7, r0, r5, ror r0
     560:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
     564:	79747265 	ldmdbvc	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     568:	42535500 	subsmi	r5, r3, #0, 10
     56c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     570:	445f0074 	ldrbmi	r0, [pc], #-116	; 578 <__Stack_Size+0x178>
     574:	43495645 	movtmi	r5, #38469	; 0x9645
     578:	54535f45 	ldrbpl	r5, [r3], #-3909	; 0xf45
     57c:	00455441 	subeq	r5, r5, r1, asr #8
     580:	62425355 	subvs	r5, r2, #1409286145	; 0x54000001
     584:	7165526d 	cmnvc	r5, sp, ror #4
     588:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
     58c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     590:	62737500 	rsbsvs	r7, r3, #0, 10
     594:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xf50
     598:	006e4f72 	rsbeq	r4, lr, r2, ror pc
     59c:	6f697067 	svcvs	0x00697067
     5a0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     5a4:	625f6574 	subsvs	r6, pc, #116, 10	; 0x1d000000
     5a8:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
     5ac:	5f504578 	svcpl	0x00504578
     5b0:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     5b4:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     5b8:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
     5bc:	53455f45 	movtpl	r5, #24389	; 0x5f45
     5c0:	4400464f 	strmi	r4, [r0], #-1615	; 0x64f
     5c4:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     5c8:	6f747069 	svcvs	0x00747069
     5cc:	69535f72 	ldmdbvs	r3, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     5d0:	5500657a 	strpl	r6, [r0, #-1402]	; 0x57a
     5d4:	5f726573 	svcpl	0x00726573
     5d8:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
     5dc:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     5e0:	61654665 	cmnvs	r5, r5, ror #12
     5e4:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     5e8:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     5ec:	65535f72 	ldrbvs	r5, [r3, #-3954]	; 0xf72
     5f0:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     5f4:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     5f8:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     5fc:	46006e6f 	strmi	r6, [r0], -pc, ror #28
     600:	45534c41 	ldrbmi	r4, [r3, #-3137]	; 0xc41
     604:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     608:	65475f72 	strbvs	r5, [r7, #-3954]	; 0xf72
     60c:	746e4974 	strbtvc	r4, [lr], #-2420	; 0x974
     610:	61667265 	cmnvs	r6, r5, ror #4
     614:	44006563 	strmi	r6, [r0], #-1379	; 0x563
     618:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     61c:	72505f65 	subsvc	r5, r0, #404	; 0x194
     620:	7265706f 	rsbvc	r7, r5, #111	; 0x6f
     624:	52007974 	andpl	r7, r0, #116, 18	; 0x1d0000
     628:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
     62c:	4e4f5f45 	cdpmi	15, 4, cr5, cr15, cr5, {2}
     630:	62737500 	rsbsvs	r7, r3, #0, 10
     634:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     638:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
     63c:	616e6f69 	cmnvs	lr, r9, ror #30
     640:	7365446c 	cmnvc	r5, #108, 8	; 0x6c000000
     644:	70697263 	rsbvc	r7, r9, r3, ror #4
     648:	00726f74 	rsbseq	r6, r2, r4, ror pc
     64c:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     650:	5f746e65 	svcpl	0x00746e65
     654:	65746c41 	ldrbvs	r6, [r4, #-3137]!	; 0xc41
     658:	74616e72 	strbtvc	r6, [r1], #-3698	; 0xe72
     65c:	74655365 	strbtvc	r5, [r5], #-869	; 0x365
     660:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     664:	62737500 	rsbsvs	r7, r3, #0, 10
     668:	61746144 	cmnvs	r4, r4, asr #2
     66c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
     670:	6e750070 	mrcvs	0, 3, r0, cr5, cr0, {3}
     674:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     678:	63206465 	teqvs	r0, #1694498816	; 0x65000000
     67c:	00726168 	rsbseq	r6, r2, r8, ror #2
     680:	4553555f 	ldrbmi	r5, [r3, #-1375]	; 0x55f
     684:	54535f52 	ldrbpl	r5, [r3], #-3922	; 0xf52
     688:	41444e41 	cmpmi	r4, r1, asr #28
     68c:	525f4452 	subspl	r4, pc, #1375731712	; 0x52000000
     690:	45555145 	ldrbmi	r5, [r5, #-325]	; 0x145
     694:	00535453 	subseq	r5, r3, r3, asr r4
     698:	5f425355 	svcpl	0x00425355
     69c:	435f504c 	cmpmi	pc, #76	; 0x4c
     6a0:	5f314e41 	svcpl	0x00314e41
     6a4:	5f305852 	svcpl	0x00305852
     6a8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     6ac:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     6b0:	64007265 	strvs	r7, [r0], #-613	; 0x265
     6b4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     6b8:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     6bc:	65475f72 	strbvs	r5, [r7, #-3954]	; 0xf72
     6c0:	61745374 	cmnvs	r4, r4, ror r3
     6c4:	00737574 	rsbseq	r7, r3, r4, ror r5
     6c8:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     6cc:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
     6d0:	38750074 	ldmdacc	r5!, {r2, r4, r5, r6}^
     6d4:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     6d8:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
     6dc:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     6e0:	65446c61 	strbvs	r6, [r4, #-3169]	; 0xc61
     6e4:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     6e8:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     6ec:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     6f0:	65475f72 	strbvs	r5, [r7, #-3954]	; 0xf72
     6f4:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     6f8:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     6fc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     700:	52006e6f 	andpl	r6, r0, #1776	; 0x6f0
     704:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
     708:	414c5f45 	cmpmi	ip, r5, asr #30
     70c:	00524554 	subseq	r4, r2, r4, asr r5
     710:	47627375 			; <UNDEFINED> instruction: 0x47627375
     714:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
     718:	66726574 			; <UNDEFINED> instruction: 0x66726574
     71c:	53656361 	cmnpl	r5, #-2080374783	; 0x84000001
     720:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     724:	4300676e 	movwmi	r6, #1902	; 0x76e
     728:	7373616c 	cmnvc	r3, #108, 2
     72c:	446f4e5f 	strbtmi	r4, [pc], #-3679	; 734 <__Stack_Size+0x334>
     730:	5f617461 	svcpl	0x00617461
     734:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
     738:	766e0070 			; <UNDEFINED> instruction: 0x766e0070
     73c:	6e496369 	cdpvs	3, 4, cr6, cr9, cr9, {3}
     740:	43007469 	movwmi	r7, #1129	; 0x469
     744:	5f6c7274 	svcpl	0x006c7274
     748:	6f666e49 	svcvs	0x00666e49
     74c:	73655200 	cmnvc	r5, #0, 4
     750:	53656d75 	cmnpl	r5, #7488	; 0x1d40
     754:	62737500 	rsbsvs	r7, r3, #0, 10
     758:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
     75c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     760:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     764:	45525f00 	ldrbmi	r5, [r2, #-3840]	; 0xf00
     768:	544c5553 	strbpl	r5, [ip], #-1363	; 0x553
     76c:	55525400 	ldrbpl	r5, [r2, #-1024]	; 0x400
     770:	445f0045 	ldrbmi	r0, [pc], #-69	; 778 <__Stack_Size+0x378>
     774:	43495645 	movtmi	r5, #38469	; 0x9645
     778:	52505f45 	subspl	r5, r0, #276	; 0x114
     77c:	7500504f 	strvc	r5, [r0, #-79]	; 0x4f
     780:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
     784:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     788:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     78c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     790:	43006e6f 	movwmi	r6, #3695	; 0xe6f
     794:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     798:	6174535f 	cmnvs	r4, pc, asr r3
     79c:	5f737574 	svcpl	0x00737574
     7a0:	0074754f 	rsbseq	r7, r4, pc, asr #10
     7a4:	5f425355 	svcpl	0x00425355
     7a8:	55534e55 	ldrbpl	r4, [r3, #-3669]	; 0xe55
     7ac:	524f5050 	subpl	r5, pc, #80	; 0x50
     7b0:	6c610054 	stclvs	0, cr0, [r1], #-336	; 0xfffffeb0
     7b4:	74655374 	strbtvc	r5, [r5], #-884	; 0x374
     7b8:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     7bc:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
     7c0:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
     7c4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     7c8:	72500074 	subsvc	r0, r0, #116	; 0x74
     7cc:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
     7d0:	74535f73 	ldrbvc	r5, [r3], #-3955	; 0xf73
     7d4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     7d8:	004e495f 	subeq	r4, lr, pc, asr r9
     7dc:	636f7250 	cmnvs	pc, #80, 4
     7e0:	5f737365 	svcpl	0x00737365
     7e4:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     7e8:	4f5f7375 	svcmi	0x005f7375
     7ec:	75005455 	strvc	r5, [r0, #-1109]	; 0x455
     7f0:	65526273 	ldrbvs	r6, [r2, #-627]	; 0x273
     7f4:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0x573
     7f8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     7fc:	45445f00 	strbmi	r5, [r4, #-3840]	; 0xf00
     800:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
     804:	62737500 	rsbsvs	r7, r3, #0, 10
     808:	42627344 	rsbmi	r7, r2, #68, 6	; 0x10000001
     80c:	70007375 	andvc	r7, r0, r5, ror r3
     810:	6e497045 	cdpvs	0, 4, cr7, cr9, cr5, {2}
     814:	554f5f74 	strbpl	r5, [pc, #-3956]	; fffff8a8 <BootRAM+0xef70049>
     818:	65720054 	ldrbvs	r0, [r2, #-84]!	; 0x54
     81c:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     820:	4e450074 	mcrmi	0, 2, r0, cr5, cr4, {3}
     824:	494f5044 	stmdbmi	pc, {r2, r6, ip, lr}^	; <UNPREDICTABLE>
     828:	525f544e 	subspl	r5, pc, #1308622848	; 0x4e000000
     82c:	50494345 	subpl	r4, r9, r5, asr #6
     830:	544e4549 	strbpl	r4, [lr], #-1353	; 0x549
     834:	62737500 	rsbsvs	r7, r3, #0, 10
     838:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     83c:	42535500 	subsmi	r5, r3, #0, 10
     840:	6e654c77 	mcrvs	12, 3, r4, cr5, cr7, {3}
     844:	73687467 	cmnvc	r8, #1728053248	; 0x67000000
     848:	62737500 	rsbsvs	r7, r3, #0, 10
     84c:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     850:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     854:	73654467 	cmnvc	r5, #1728053248	; 0x67000000
     858:	70697263 	rsbvc	r7, r9, r3, ror #4
     85c:	00726f74 	rsbseq	r6, r2, r4, ror pc
     860:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
     864:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
     868:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     86c:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     870:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     874:	6144726f 	cmpvs	r4, pc, ror #4
     878:	43006174 	movwmi	r6, #372	; 0x174
     87c:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
     880:	45525547 	ldrbmi	r5, [r2, #-1351]	; 0x547
     884:	73750044 	cmnvc	r5, #68	; 0x44
     888:	776f5062 	strbvc	r5, [pc, -r2, rrx]!
     88c:	664f7265 	strbvs	r7, [pc], -r5, ror #4
     890:	75430066 	strbvc	r0, [r3, #-102]	; 0x66
     894:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     898:	6e495f74 	mcrvs	15, 2, r5, cr9, cr4, {3}
     89c:	66726574 			; <UNDEFINED> instruction: 0x66726574
     8a0:	00656361 	rsbeq	r6, r5, r1, ror #6
     8a4:	47627375 			; <UNDEFINED> instruction: 0x47627375
     8a8:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
     8ac:	66726574 			; <UNDEFINED> instruction: 0x66726574
     8b0:	00656361 	rsbeq	r6, r5, r1, ror #6
     8b4:	755f3875 	ldrbvc	r3, [pc, #-2165]	; 47 <_Minimum_Stack_Size-0xb9>
     8b8:	6f436273 	svcvs	0x00436273
     8bc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     8c0:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     8c4:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     8c8:	4644726f 	strbmi	r7, [r4], -pc, ror #4
     8cc:	44410055 	strbmi	r0, [r1], #-85	; 0x55
     8d0:	53455244 	movtpl	r5, #21060	; 0x5244
     8d4:	00444553 	subeq	r4, r4, r3, asr r5
     8d8:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     8dc:	495f454d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, sl, lr}^	; <UNPREDICTABLE>
     8e0:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
     8e4:	004c414e 	subeq	r4, ip, lr, asr #2
     8e8:	5345525f 	movtpl	r5, #21087	; 0x525f
     8ec:	5f454d55 	svcpl	0x00454d55
     8f0:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
     8f4:	53550045 	cmppl	r5, #69	; 0x45
     8f8:	55535f42 	ldrbpl	r5, [r3, #-3906]	; 0xf42
     8fc:	53454343 	movtpl	r4, #21315	; 0x5343
     900:	4e550053 	mrcmi	0, 2, r0, cr5, cr3, {2}
     904:	4e4e4f43 	cdpmi	15, 4, cr4, cr14, cr3, {2}
     908:	45544345 	ldrbmi	r4, [r4, #-837]	; 0x345
     90c:	73750044 	cmnvc	r5, #68	; 0x44
     910:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
     914:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     918:	5f007375 	svcpl	0x00007375
     91c:	50444e45 	subpl	r4, r4, r5, asr #28
     920:	544e494f 	strbpl	r4, [lr], #-2383	; 0x94f
     924:	464e495f 			; <UNDEFINED> instruction: 0x464e495f
     928:	7375004f 	cmnvc	r5, #79	; 0x4f
     92c:	656c4362 	strbvs	r4, [ip, #-866]!	; 0x362
     930:	65467261 	strbvs	r7, [r6, #-609]	; 0x261
     934:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
     938:	6f540065 	svcvs	0x00540065
     93c:	5f6c6174 	svcpl	0x006c6174
     940:	70646e45 	rsbvc	r6, r4, r5, asr #28
     944:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
     948:	6e6f4300 	cdpvs	3, 6, cr4, cr15, cr0, {0}
     94c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 784 <__Stack_Size+0x384>
     950:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     954:	6f430065 	svcvs	0x00430065
     958:	6f527970 	svcvs	0x00527970
     95c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     960:	65530065 	ldrbvs	r0, [r3, #-101]	; 0x65
     964:	52504574 	subspl	r4, r0, #116, 10	; 0x1d000000
     968:	6c615678 	stclvs	6, cr5, [r1], #-480	; 0xfffffe20
     96c:	6e006469 	cdpvs	4, 0, cr6, cr0, cr9, {3}
     970:	6968746f 	stmdbvs	r8!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     974:	7250676e 	subsvc	r6, r0, #28835840	; 0x1b80000
     978:	7500636f 	strvc	r6, [r0, #-879]	; 0x36f
     97c:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     980:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     984:	56676e69 	strbtpl	r6, [r7], -r9, ror #28
     988:	6f646e65 	svcvs	0x00646e65
     98c:	38750072 	ldmdacc	r5!, {r1, r4, r5, r6}^
     990:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     994:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     998:	6e49676e 	cdpvs	7, 4, cr6, cr9, cr14, {3}
     99c:	66726574 			; <UNDEFINED> instruction: 0x66726574
     9a0:	00656361 	rsbeq	r6, r5, r1, ror #6
     9a4:	755f3875 	ldrbvc	r3, [pc, #-2165]	; 137 <_Minimum_Stack_Size+0x37>
     9a8:	65446273 	strbvs	r6, [r4, #-627]	; 0x273
     9ac:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     9b0:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     9b4:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     9b8:	4644726f 	strbmi	r7, [r4], -pc, ror #4
     9bc:	38750055 	ldmdacc	r5!, {r0, r2, r4, r6}^
     9c0:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     9c4:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     9c8:	6553676e 	ldrbvs	r6, [r3, #-1902]	; 0x76e
     9cc:	6c616972 	stclvs	9, cr6, [r1], #-456	; 0xfffffe38
     9d0:	5f387500 	svcpl	0x00387500
     9d4:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     9d8:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     9dc:	746c4167 	strbtvc	r4, [ip], #-359	; 0x167
     9e0:	38750030 	ldmdacc	r5!, {r4, r5}^
     9e4:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     9e8:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     9ec:	7250676e 	subsvc	r6, r0, #28835840	; 0x1b80000
     9f0:	6375646f 	cmnvs	r5, #1862270976	; 0x6f000000
     9f4:	38750074 	ldmdacc	r5!, {r2, r4, r5, r6}^
     9f8:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     9fc:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     a00:	614c676e 	cmpvs	ip, lr, ror #14
     a04:	6449676e 	strbvs	r6, [r9], #-1902	; 0x76e
     a08:	62737500 	rsbsvs	r7, r3, #0, 10
     a0c:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
     a10:	70697263 	rsbvc	r7, r9, r3, ror #4
     a14:	2e726f74 	mrccs	15, 3, r6, cr2, cr4, {3}
     a18:	66640063 	strbtvs	r0, [r4], -r3, rrx
     a1c:	6e694675 	mcrvs	6, 3, r4, cr9, cr5, {3}
     a20:	55687369 	strbpl	r7, [r8, #-873]!	; 0x369
     a24:	616f6c70 	smcvs	63168	; 0xf6c0
     a28:	756a0064 	strbvc	r0, [sl, #-100]!	; 0x64
     a2c:	6f54706d 	svcvs	0x0054706d
     a30:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     a34:	74657300 	strbtvc	r7, [r5], #-768	; 0x300
     a38:	454c7075 	strbmi	r7, [ip, #-117]	; 0x75
     a3c:	646e4144 	strbtvs	r4, [lr], #-324	; 0x144
     a40:	74747542 	ldrbtvc	r7, [r4], #-1346	; 0x542
     a44:	63006e6f 	movwvs	r6, #3695	; 0xe6f
     a48:	6b636568 	blvs	18d9ff0 <__Stack_Size+0x18d9bf0>
     a4c:	43646e41 	cmnmi	r4, #1040	; 0x410
     a50:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     a54:	746f6f42 	strbtvc	r6, [pc], #-3906	; a5c <__Stack_Size+0x65c>
     a58:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
     a5c:	6c467265 	sfmvs	f7, 2, [r6], {101}	; 0x65
     a60:	64006761 	strvs	r6, [r0], #-1889	; 0x761
     a64:	5f746e6f 	svcpl	0x00746e6f
     a68:	74696177 	strbtvc	r6, [r9], #-375	; 0x177
     a6c:	65686300 	strbvs	r6, [r8, #-768]!	; 0x300
     a70:	73556b63 	cmpvc	r5, #101376	; 0x18c00
     a74:	6f437265 	svcvs	0x00437265
     a78:	73006564 	movwvc	r6, #1380	; 0x564
     a7c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     a80:	7365526d 	cmnvc	r5, #-805306362	; 0xd0000006
     a84:	72007465 	andvc	r7, r0, #1694498816	; 0x65000000
     a88:	42646165 	rsbmi	r6, r4, #1073741849	; 0x40000019
     a8c:	6f747475 	svcvs	0x00747475
     a90:	6174536e 	cmnvs	r4, lr, ror #6
     a94:	73006574 	movwvc	r6, #1396	; 0x574
     a98:	70757465 	rsbsvc	r7, r5, r5, ror #8
     a9c:	53414c46 	movtpl	r4, #7238	; 0x1c46
     aa0:	65730048 	ldrbvs	r0, [r3, #-72]!	; 0x48
     aa4:	43707574 	cmnmi	r0, #116, 10	; 0x1d000000
     aa8:	6d004b4c 	vstrvs	d4, [r0, #-304]	; 0xfffffed0
     aac:	006e6961 	rsbeq	r6, lr, r1, ror #18
     ab0:	755f6f6e 	ldrbvc	r6, [pc, #-3950]	; fffffb4a <BootRAM+0xef702eb>
     ab4:	5f726573 	svcpl	0x00726573
     ab8:	706d756a 	rsbvc	r7, sp, sl, ror #10
     abc:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     ac0:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     ac4:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
     ac8:	61486d65 	cmpvs	r8, r5, ror #26
     acc:	65526472 	ldrbvs	r6, [r2, #-1138]	; 0x472
     ad0:	00746573 	rsbseq	r6, r4, r3, ror r5
     ad4:	616c6564 	cmnvs	ip, r4, ror #10
     ad8:	6f635f79 	svcvs	0x00635f79
     adc:	00746e75 	rsbseq	r6, r4, r5, ror lr
     ae0:	55756664 	ldrbpl	r6, [r5, #-1636]!	; 0x664
     ae4:	616f6c70 	smcvs	63168	; 0xf6c0
     ae8:	61745364 	cmnvs	r4, r4, ror #6
     aec:	64657472 	strbtvs	r7, [r5], #-1138	; 0x472
     af0:	74657300 	strbtvc	r7, [r5], #-768	; 0x300
     af4:	4170734d 	cmnmi	r0, sp, asr #6
     af8:	754a646e 	strbvc	r6, [sl, #-1134]	; 0x46e
     afc:	4900706d 	stmdbmi	r0, {r0, r2, r3, r5, r6, ip, sp, lr}
     b00:	00525043 	subseq	r5, r2, r3, asr #32
     b04:	65676170 	strbvs	r6, [r7, #-368]!	; 0x170
     b08:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
     b0c:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     b10:	00627573 	rsbeq	r7, r2, r3, ror r5
     b14:	566d7772 			; <UNDEFINED> instruction: 0x566d7772
     b18:	49006c61 	stmdbmi	r0, {r0, r5, r6, sl, fp, sp, lr}
     b1c:	00525053 	subseq	r5, r2, r3, asr r0
     b20:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
     b24:	006e6950 	rsbeq	r6, lr, r0, asr r9
     b28:	73616c66 	cmnvc	r1, #26112	; 0x6600
     b2c:	61724568 	cmnvs	r2, r8, ror #10
     b30:	61506573 	cmpvs	r0, r3, ror r5
     b34:	00736567 	rsbseq	r6, r3, r7, ror #10
     b38:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0x172
     b3c:	72747300 	rsbsvc	r7, r4, #0, 6
     b40:	5065626f 	rsbpl	r6, r5, pc, ror #4
     b44:	61006e69 	tstvs	r0, r9, ror #28
     b48:	00726464 	rsbseq	r6, r2, r4, ror #8
     b4c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     b50:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     b54:	52003031 	andpl	r3, r0, #49	; 0x31
     b58:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     b5c:	31444556 	cmpcc	r4, r6, asr r5
     b60:	6d740031 	ldclvs	0, cr0, [r4, #-196]!	; 0xffffff3c
     b64:	67657270 			; <UNDEFINED> instruction: 0x67657270
     b68:	61747300 	cmnvs	r4, r0, lsl #6
     b6c:	41006574 	tstmi	r0, r4, ror r5
     b70:	52324250 	eorspl	r4, r2, #80, 4
     b74:	00525453 	subseq	r5, r2, r3, asr r4
     b78:	70706d74 	rsbsvc	r6, r0, r4, ror sp
     b7c:	66006572 			; <UNDEFINED> instruction: 0x66006572
     b80:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     b84:	6f6c6e55 	svcvs	0x006c6e55
     b88:	67006b63 	strvs	r6, [r0, -r3, ror #22]
     b8c:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
     b90:	45687361 	strbmi	r7, [r8, #-865]!	; 0x361
     b94:	4200646e 	andmi	r6, r0, #1845493760	; 0x6e000000
     b98:	00524146 	subseq	r4, r2, r6, asr #2
     b9c:	49564e72 	ldmdbmi	r6, {r1, r4, r5, r6, r9, sl, fp, lr}^
     ba0:	766e0043 	strbtvc	r0, [lr], -r3, asr #32
     ba4:	69446369 	stmdbvs	r4, {r0, r3, r5, r6, r8, r9, sp, lr}^
     ba8:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     bac:	746e4965 	strbtvc	r4, [lr], #-2405	; 0x965
     bb0:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
     bb4:	00737470 	rsbseq	r7, r3, r0, ror r4
     bb8:	756c6176 	strbvc	r6, [ip, #-374]!	; 0x176
     bbc:	54560065 	ldrbpl	r0, [r6], #-101	; 0x65
     bc0:	6a00524f 	bvs	15504 <__Stack_Size+0x15104>
     bc4:	41706d75 	cmnmi	r0, r5, ror sp
     bc8:	00726464 	rsbseq	r6, r2, r4, ror #8
     bcc:	5f434352 	svcpl	0x00434352
     bd0:	53676552 	cmnpl	r7, #343932928	; 0x14800000
     bd4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     bd8:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
     bdc:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     be0:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     be4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     be8:	43490074 	movtmi	r0, #36980	; 0x9074
     bec:	74005253 	strvc	r5, [r0], #-595	; 0x253
     bf0:	616d706d 	cmnvs	sp, sp, rrx
     bf4:	41006b73 	tstmi	r0, r3, ror fp
     bf8:	4e454248 	cdpmi	2, 4, cr4, cr5, cr8, {2}
     bfc:	49410052 	stmdbmi	r1, {r1, r4, r6}^
     c00:	00524352 	subseq	r4, r2, r2, asr r3
     c04:	41464d4d 	cmpmi	r6, sp, asr #26
     c08:	686c0052 	stmdavs	ip!, {r1, r4, r6}^
     c0c:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
     c10:	616c6600 	cmnvs	ip, r0, lsl #12
     c14:	6f4c6873 	svcvs	0x004c6873
     c18:	70006b63 	andvc	r6, r0, r3, ror #22
     c1c:	725f7277 	subsvc	r7, pc, #1879048199	; 0x70000007
     c20:	6d5f6765 	ldclvs	7, cr6, [pc, #-404]	; a94 <__Stack_Size+0x694>
     c24:	43007061 	movwmi	r7, #97	; 0x61
     c28:	00525346 	subseq	r5, r2, r6, asr #6
     c2c:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
     c30:	726f7700 	rsbvc	r7, pc, #0, 14
     c34:	43490064 	movtmi	r0, #36964	; 0x9064
     c38:	41005245 	tstmi	r0, r5, asr #4
     c3c:	52314250 	eorspl	r4, r1, #80, 4
     c40:	00525453 	subseq	r5, r2, r3, asr r4
     c44:	5f706b62 	svcpl	0x00706b62
     c48:	5f676572 	svcpl	0x00676572
     c4c:	0070616d 	rsbseq	r6, r0, sp, ror #2
     c50:	49555043 	ldmdbmi	r5, {r0, r1, r6, ip, lr}^
     c54:	53720044 	cmnpl	r2, #68	; 0x44
     c58:	52004243 	andpl	r4, r0, #805306372	; 0x30000004
     c5c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     c60:	30444556 	subcc	r4, r4, r6, asr r5
     c64:	53464400 	movtpl	r4, #25600	; 0x6400
     c68:	45520052 	ldrbmi	r0, [r2, #-82]	; 0x52
     c6c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     c70:	00324445 	eorseq	r4, r2, r5, asr #8
     c74:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     c78:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     c7c:	45520033 	ldrbmi	r0, [r2, #-51]	; 0x33
     c80:	56524553 			; <UNDEFINED> instruction: 0x56524553
     c84:	00344445 	eorseq	r4, r4, r5, asr #8
     c88:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     c8c:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     c90:	45520035 	ldrbmi	r0, [r2, #-53]	; 0x35
     c94:	56524553 			; <UNDEFINED> instruction: 0x56524553
     c98:	00364445 	eorseq	r4, r6, r5, asr #8
     c9c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     ca0:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     ca4:	48530037 	ldmdami	r3, {r0, r1, r2, r4, r5}^
     ca8:	00525343 	subseq	r5, r2, r3, asr #6
     cac:	52455349 	subpl	r5, r5, #603979777	; 0x24000001
     cb0:	61745300 	cmnvs	r4, r0, lsl #6
     cb4:	70557472 	subsvc	r7, r5, r2, ror r4
     cb8:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     cbc:	00726574 	rsbseq	r6, r2, r4, ror r5
     cc0:	30315244 	eorscc	r5, r1, r4, asr #4
     cc4:	42504100 	subsmi	r4, r0, #0, 2
     cc8:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
     ccc:	616c6600 	cmnvs	ip, r0, lsl #12
     cd0:	74655367 	strbtvc	r5, [r5], #-871	; 0x367
     cd4:	53455200 	movtpl	r5, #20992	; 0x5200
     cd8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     cdc:	75003144 	strvc	r3, [r0, #-324]	; 0x144
     ce0:	614d7273 	hvcvs	55075	; 0xd723
     ce4:	41006e69 	tstmi	r0, r9, ror #28
     ce8:	00525346 	subseq	r5, r2, r6, asr #6
     cec:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     cf0:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     cf4:	61680039 	cmnvs	r8, r9, lsr r0
     cf8:	61776472 	cmnvs	r7, r2, ror r4
     cfc:	632e6572 	teqvs	lr, #478150656	; 0x1c800000
     d00:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     d04:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     d08:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     d0c:	50410066 	subpl	r0, r1, r6, rrx
     d10:	4e453142 	dvfmism	f3, f5, f2
     d14:	6c660052 	stclvs	0, cr0, [r6], #-328	; 0xfffffeb8
     d18:	57687361 	strbpl	r7, [r8, -r1, ror #6]!
     d1c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
     d20:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
     d24:	616c6600 	cmnvs	ip, r0, lsl #12
     d28:	69536873 	ldmdbvs	r3, {r0, r1, r4, r5, r6, fp, sp, lr}^
     d2c:	5300657a 	movwpl	r6, #1402	; 0x57a
     d30:	00525048 	subseq	r5, r2, r8, asr #32
     d34:	43435452 	movtmi	r5, #13394	; 0x3452
     d38:	61620052 	qdsubvs	r0, r2, r2
     d3c:	66006b6e 	strvs	r6, [r0], -lr, ror #22
     d40:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     d44:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
     d48:	6e756600 	cdpvs	6, 7, cr6, cr5, cr0, {0}
     d4c:	72745063 	rsbsvc	r5, r4, #99	; 0x63
     d50:	72737500 	rsbsvc	r7, r3, #0, 10
     d54:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
     d58:	53455200 	movtpl	r5, #20992	; 0x5200
     d5c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     d60:	66003844 	strvs	r3, [r0], -r4, asr #16
     d64:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     d68:	73617245 	cmnvc	r1, #1342177284	; 0x50000004
     d6c:	67615065 	strbvs	r5, [r1, -r5, rrx]!
     d70:	6b620065 	blvs	1880f0c <__Stack_Size+0x1880b0c>
     d74:	57303170 			; <UNDEFINED> instruction: 0x57303170
     d78:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
     d7c:	43444200 	movtmi	r4, #16896	; 0x4200
     d80:	6d740052 	ldclvs	0, cr0, [r4, #-328]!	; 0xfffffeb8
     d84:	69727070 	ldmdbvs	r2!, {r4, r5, r6, ip, sp, lr}^
     d88:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     d8c:	68680079 	stmdavs	r8!, {r0, r3, r4, r5, r6}^
     d90:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
     d94:	45535200 	ldrbmi	r5, [r3, #-512]	; 0x200
     d98:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     d9c:	46430031 			; <UNDEFINED> instruction: 0x46430031
     da0:	76005247 	strvc	r5, [r0], -r7, asr #4
     da4:	32336375 	eorscc	r6, r3, #-738197503	; 0xd4000001
     da8:	42435300 	submi	r5, r3, #0, 6
     dac:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     db0:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     db4:	53464800 	movtpl	r4, #26624	; 0x6800
     db8:	53690052 	cmnpl	r9, #82	; 0x52
     dbc:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     dc0:	65720067 	ldrbvs	r0, [r2, #-103]!	; 0x67
     dc4:	75427663 	strbvc	r7, [r2, #-1635]	; 0x663
     dc8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     dcc:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     dd0:	5f00632e 	svcpl	0x0000632e
     dd4:	544f4c50 	strbpl	r4, [pc], #-3152	; ddc <__Stack_Size+0x9dc>
     dd8:	55464400 	strbpl	r4, [r6, #-1024]	; 0x400
     ddc:	4c50555f 	cfldr64mi	mvdx5, [r0], {95}	; 0x5f
     de0:	5f44414f 	svcpl	0x0044414f
     de4:	53414c46 	movtpl	r4, #7238	; 0x1c46
     de8:	58305f48 	ldmdapl	r0!, {r3, r6, r8, r9, sl, fp, ip, lr}
     dec:	35303038 	ldrcc	r3, [r0, #-56]!	; 0x38
     df0:	00303030 	eorseq	r3, r0, r0, lsr r0
     df4:	5546445f 	strbpl	r4, [r6, #-1119]	; 0x45f
     df8:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     dfc:	75007375 	strvc	r7, [r0, #-885]	; 0x375
     e00:	41726573 	cmnmi	r2, r3, ror r5
     e04:	64417070 	strbvs	r7, [r1], #-112	; 0x70
     e08:	62007264 	andvs	r7, r0, #100, 4	; 0x40000006
     e0c:	6c6f5077 	stclvs	0, cr5, [pc], #-476	; c38 <__Stack_Size+0x838>
     e10:	6d69546c 	cfstrdvs	mvd5, [r9, #-432]!	; 0xfffffe50
     e14:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
     e18:	77620030 			; <UNDEFINED> instruction: 0x77620030
     e1c:	6c6c6f50 	stclvs	15, cr6, [ip], #-320	; 0xfffffec0
     e20:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
     e24:	3174756f 	cmncc	r4, pc, ror #10
     e28:	50776200 	rsbspl	r6, r7, r0, lsl #4
     e2c:	546c6c6f 	strbtpl	r6, [ip], #-3183	; 0xc6f
     e30:	6f656d69 	svcvs	0x00656d69
     e34:	00327475 	eorseq	r7, r2, r5, ror r4
     e38:	5f554644 	svcpl	0x00554644
     e3c:	4f4c5055 	svcmi	0x004c5055
     e40:	4e5f4441 	cdpmi	4, 5, cr4, cr15, cr1, {2}
     e44:	00454e4f 	subeq	r4, r5, pc, asr #28
     e48:	43756664 	cmnmi	r5, #100, 12	; 0x6400000
     e4c:	5579706f 	ldrbpl	r7, [r9, #-111]!	; 0x6f
     e50:	414f4c50 	cmpmi	pc, r0, asr ip	; <UNPREDICTABLE>
     e54:	73750044 	cmnvc	r5, #68	; 0x44
     e58:	70557265 	subsvc	r7, r5, r5, ror #4
     e5c:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
     e60:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     e64:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     e68:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
     e6c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     e70:	6f547265 	svcvs	0x00547265
     e74:	63657845 	cmnvs	r5, #4521984	; 0x450000
     e78:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     e7c:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
     e80:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     e84:	63007375 	movwvs	r7, #885	; 0x375
     e88:	5f65646f 	svcpl	0x0065646f
     e8c:	79706f63 	ldmdbvc	r0!, {r0, r1, r5, r6, r8, r9, sl, fp, sp, lr}^
     e90:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     e94:	6664006b 	strbtvs	r0, [r4], -fp, rrx
     e98:	706f4375 	rsbvc	r4, pc, r5, ror r3	; <UNPREDICTABLE>
     e9c:	61745379 	cmnvs	r4, r9, ror r3
     ea0:	64006574 	strvs	r6, [r0], #-1396	; 0x574
     ea4:	6f437566 	svcvs	0x00437566
     ea8:	4e447970 	mcrmi	9, 2, r7, cr4, cr0, {3}
     eac:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
     eb0:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     eb4:	61647055 	qdsubvs	r7, r5, r4
     eb8:	79426574 	stmdbvc	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
     ebc:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
     ec0:	0074756f 	rsbseq	r7, r4, pc, ror #10
     ec4:	5f554644 	svcpl	0x00554644
     ec8:	4f4c5055 	svcmi	0x004c5055
     ecc:	465f4441 	ldrbmi	r4, [pc], -r1, asr #8
     ed0:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     ed4:	3858305f 	ldmdacc	r8, {r0, r1, r2, r3, r4, r6, ip, sp}^
     ed8:	30323030 	eorscc	r3, r2, r0, lsr r0
     edc:	6e003030 	mcrvs	0, 0, r3, cr0, cr0, {1}
     ee0:	74537765 	ldrbvc	r7, [r3], #-1893	; 0x765
     ee4:	00657461 	rsbeq	r7, r5, r1, ror #8
     ee8:	55756664 	ldrbpl	r6, [r5, #-1636]!	; 0x664
     eec:	616f6c70 	smcvs	63168	; 0xf6c0
     ef0:	70795464 	rsbsvc	r5, r9, r4, ror #8
     ef4:	745f7365 	ldrbvc	r7, [pc], #-869	; efc <__Stack_Size+0xafc>
     ef8:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     efc:	53707041 	cmnpl	r0, #65	; 0x41
     f00:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     f04:	70750073 	rsbsvc	r0, r5, r3, ror r0
     f08:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
     f0c:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     f10:	6e654c6b 	cdpvs	12, 6, cr4, cr5, cr11, {3}
     f14:	69687400 	stmdbvs	r8!, {sl, ip, sp, lr}^
     f18:	6f6c4273 	svcvs	0x006c4273
     f1c:	654c6b63 	strbvs	r6, [ip, #-2915]	; 0xb63
     f20:	7375006e 	cmnvc	r5, #110	; 0x6e
     f24:	69467265 	stmdbvs	r6, {r0, r2, r5, r6, r9, ip, sp, lr}^
     f28:	61776d72 	cmnvs	r7, r2, ror sp
     f2c:	654c6572 	strbvs	r6, [ip, #-1394]	; 0x572
     f30:	6664006e 	strbtvs	r0, [r4], -lr, rrx
     f34:	73754275 	cmnvc	r5, #1342177287	; 0x50000007
     f38:	53620079 	cmnpl	r2, #121	; 0x79
     f3c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     f40:	6e656c00 	cdpvs	12, 6, cr6, cr5, cr0, {0}
     f44:	00687467 	rsbeq	r7, r8, r7, ror #8
     f48:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     f4c:	61745374 	cmnvs	r4, r4, ror r3
     f50:	44006574 	strmi	r6, [r0], #-1396	; 0x574
     f54:	555f5546 	ldrbpl	r5, [pc, #-1350]	; a16 <__Stack_Size+0x616>
     f58:	414f4c50 	cmpmi	pc, r0, asr ip	; <UNPREDICTABLE>
     f5c:	41525f44 	cmpmi	r2, r4, asr #30
     f60:	4542004d 	strbmi	r0, [r2, #-77]	; 0x4d
     f64:	4e4e4947 	cdpmi	9, 4, cr4, cr14, cr7, {2}
     f68:	00474e49 	subeq	r4, r7, r9, asr #28
     f6c:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     f70:	63617053 	cmnvs	r1, #83	; 0x53
     f74:	73750065 	cmnvc	r5, #101	; 0x65
     f78:	70417265 	subvc	r7, r1, r5, ror #4
     f7c:	646e4570 	strbtvs	r4, [lr], #-1392	; 0x570
     f80:	74536200 	ldrbvc	r6, [r3], #-512	; 0x200
     f84:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     f88:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     f8c:	53746553 	cmnpl	r4, #348127232	; 0x14c00000
     f90:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     f94:	44494d00 	strbmi	r4, [r9], #-3328	; 0xd00
     f98:	00454c44 	subeq	r4, r5, r4, asr #24
     f9c:	47756664 	ldrbmi	r6, [r5, -r4, ror #12]!
     fa0:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465
     fa4:	00657461 	rsbeq	r7, r5, r1, ror #8
     fa8:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     fac:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     fb0:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     fb4:	47007265 	strmi	r7, [r0, -r5, ror #4]
     fb8:	78547465 	ldmdavc	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
     fbc:	6c617453 	cfstrdvs	mvd7, [r1], #-332	; 0xfffffeb4
     fc0:	6174536c 	cmnvs	r4, ip, ror #6
     fc4:	00737574 	rsbseq	r7, r3, r4, ror r5
     fc8:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
     fcc:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
     fd0:	31667542 	cmncc	r6, r2, asr #10
     fd4:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
     fd8:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
     fdc:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
     fe0:	696c6156 	stmdbvs	ip!, {r1, r2, r4, r6, r8, sp, lr}^
     fe4:	65530064 	ldrbvs	r0, [r3, #-100]	; 0x64
     fe8:	756f4474 	strbvc	r4, [pc, #-1140]!	; b7c <__Stack_Size+0x77c>
     fec:	42656c42 	rsbmi	r6, r5, #16896	; 0x4200
     ff0:	45666675 	strbmi	r6, [r6, #-1653]!	; 0x675
     ff4:	61745350 	cmnvs	r4, r0, asr r3
     ff8:	45006c6c 	strmi	r6, [r0, #-3180]	; 0xc6c
     ffc:	42445f50 	submi	r5, r4, #80, 30	; 0x140
    1000:	4f5f4655 	svcmi	0x005f4655
    1004:	47005455 	smlsdmi	r0, r5, r4, r5
    1008:	50457465 	subpl	r7, r5, r5, ror #8
    100c:	74537852 	ldrbvc	r7, [r3], #-2130	; 0x852
    1010:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1014:	676f5400 	strbvs	r5, [pc, -r0, lsl #8]!
    1018:	44656c67 	strbtmi	r6, [r5], #-3175	; 0xc67
    101c:	5f474f54 	svcpl	0x00474f54
    1020:	47005854 	smlsdmi	r0, r4, r8, r5
    1024:	50457465 	subpl	r7, r5, r5, ror #8
    1028:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    102c:	00737365 	rsbseq	r7, r3, r5, ror #6
    1030:	5f50455f 	svcpl	0x0050455f
    1034:	46554244 	ldrbmi	r4, [r5], -r4, asr #4
    1038:	5249445f 	subpl	r4, r9, #1593835520	; 0x5f000000
    103c:	64416200 	strbvs	r6, [r1], #-512	; 0x200
    1040:	53007264 	movwpl	r7, #612	; 0x264
    1044:	53497465 	movtpl	r7, #37989	; 0x9465
    1048:	77005254 	smlsdvc	r0, r4, r2, r5
    104c:	6f6c424e 	svcvs	0x006c424e
    1050:	00736b63 	rsbseq	r6, r3, r3, ror #22
    1054:	61656c43 	cmnvs	r5, r3, asr #24
    1058:	4f544472 	svcmi	0x00544472
    105c:	58525f47 	ldmdapl	r2, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    1060:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1064:	52544e43 	subspl	r4, r4, #1072	; 0x430
    1068:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    106c:	74537852 	ldrbvc	r7, [r3], #-2130	; 0x852
    1070:	536c6c61 	cmnpl	ip, #24832	; 0x6100
    1074:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1078:	65470073 	strbvs	r0, [r7, #-115]	; 0x73
    107c:	44414474 	strbmi	r4, [r1], #-1140	; 0x474
    1080:	77005244 	strvc	r5, [r0, -r4, asr #4]
    1084:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1088:	65530074 	ldrbvs	r0, [r3, #-116]	; 0x74
    108c:	41504574 	cmpmi	r0, r4, ror r5
    1090:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    1094:	53007373 	movwpl	r7, #883	; 0x373
    1098:	50457465 	subpl	r7, r5, r5, ror #8
    109c:	74537852 	ldrbvc	r7, [r3], #-2130	; 0x852
    10a0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    10a4:	676f5400 	strbvs	r5, [pc, -r0, lsl #8]!
    10a8:	44656c67 	strbtmi	r6, [r5], #-3175	; 0xc67
    10ac:	5f474f54 	svcpl	0x00474f54
    10b0:	53005852 	movwpl	r5, #2130	; 0x852
    10b4:	50457465 	subpl	r7, r5, r5, ror #8
    10b8:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    10bc:	41666675 	smcmi	26213	; 0x6665
    10c0:	00726464 	rsbseq	r6, r2, r4, ror #8
    10c4:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    10c8:	70795450 	rsbsvc	r5, r9, r0, asr r4
    10cc:	50450065 	subpl	r0, r5, r5, rrx
    10d0:	5542445f 	strbpl	r4, [r2, #-1119]	; 0x45f
    10d4:	4e495f46 	cdpmi	15, 4, cr5, cr9, cr6, {2}
    10d8:	65527700 	ldrbvs	r7, [r2, #-1792]	; 0x700
    10dc:	65470074 	strbvs	r0, [r7, #-116]	; 0x74
    10e0:	52504574 	subspl	r4, r0, #116, 10	; 0x1d000000
    10e4:	64644178 	strbtvs	r4, [r4], #-376	; 0x178
    10e8:	65530072 	ldrbvs	r0, [r3, #-114]	; 0x72
    10ec:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    10f0:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    10f4:	64413066 	strbvs	r3, [r1], #-102	; 0x66
    10f8:	47007264 	strmi	r7, [r0, -r4, ror #4]
    10fc:	50457465 	subpl	r7, r5, r5, ror #8
    1100:	74537854 	ldrbvc	r7, [r3], #-2132	; 0x854
    1104:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1108:	69446200 	stmdbvs	r4, {r9, sp, lr}^
    110c:	54770072 	ldrbtpl	r0, [r7], #-114	; 0x72
    1110:	00657079 	rsbeq	r7, r5, r9, ror r0
    1114:	5f627375 	svcpl	0x00627375
    1118:	2f62696c 	svccs	0x0062696c
    111c:	5f627375 	svcpl	0x00627375
    1120:	73676572 	cmnvc	r7, #478150656	; 0x1c800000
    1124:	4500632e 	strmi	r6, [r0, #-814]	; 0x32e
    1128:	42445f50 	submi	r5, r4, #80, 30	; 0x140
    112c:	455f4655 	ldrbmi	r4, [pc, #-1621]	; adf <__Stack_Size+0x6df>
    1130:	47005252 	smlsdmi	r0, r2, r2, r5
    1134:	50457465 	subpl	r7, r5, r5, ror #8
    1138:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    113c:	69446675 	stmdbvs	r4, {r0, r2, r4, r5, r6, r9, sl, sp, lr}^
    1140:	42770072 	rsbsmi	r0, r7, #114	; 0x72
    1144:	41316675 	teqmi	r1, r5, ror r6
    1148:	00726464 	rsbseq	r6, r2, r4, ror #8
    114c:	57775377 			; <UNDEFINED> instruction: 0x57775377
    1150:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1154:	6f445045 	svcvs	0x00445045
    1158:	656c6275 	strbvs	r6, [ip, #-629]!	; 0x275
    115c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1160:	576f5400 	strbpl	r5, [pc, -r0, lsl #8]!
    1164:	0064726f 	rsbeq	r7, r4, pc, ror #4
    1168:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    116c:	41785450 	cmnmi	r8, r0, asr r4
    1170:	00726464 	rsbseq	r6, r2, r4, ror #8
    1174:	61656c43 	cmnvs	r5, r3, asr #24
    1178:	44504572 	ldrbmi	r4, [r0], #-1394	; 0x572
    117c:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    1180:	66754265 	ldrbtvs	r4, [r5], -r5, ror #4
    1184:	65470066 	strbvs	r0, [r7, #-102]	; 0x66
    1188:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    118c:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    1190:	64413166 	strbvs	r3, [r1], #-358	; 0x166
    1194:	47007264 	strmi	r7, [r0, -r4, ror #4]
    1198:	50457465 	subpl	r7, r5, r5, ror #8
    119c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    11a0:	656c4300 	strbvs	r4, [ip, #-768]!	; 0x300
    11a4:	50457261 	subpl	r7, r5, r1, ror #4
    11a8:	5254435f 	subspl	r4, r4, #2080374785	; 0x7c000001
    11ac:	0058525f 	subseq	r5, r8, pc, asr r2
    11b0:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    11b4:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    11b8:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    11bc:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    11c0:	65530074 	ldrbvs	r0, [r3, #-116]	; 0x74
    11c4:	5f504574 	svcpl	0x00504574
    11c8:	444e494b 	strbmi	r4, [lr], #-2379	; 0x94b
    11cc:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    11d0:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    11d4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    11d8:	6c430074 	mcrrvs	0, 7, r0, r3, cr4
    11dc:	45726165 	ldrbmi	r6, [r2, #-357]!	; 0x165
    11e0:	494b5f50 	stmdbmi	fp, {r4, r6, r8, r9, sl, fp, ip, lr}^
    11e4:	4700444e 	strmi	r4, [r0, -lr, asr #8]
    11e8:	54427465 	strbpl	r7, [r2], #-1125	; 0x465
    11ec:	454c4241 	strbmi	r4, [ip, #-577]	; 0x241
    11f0:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    11f4:	52545349 	subspl	r5, r4, #603979777	; 0x24000001
    11f8:	65527700 	ldrbvs	r7, [r2, #-1792]	; 0x700
    11fc:	6c615667 	stclvs	6, cr5, [r1], #-412	; 0xfffffe64
    1200:	47006575 	smlsdxmi	r0, r5, r5, r6
    1204:	4e457465 	cdpmi	4, 4, cr7, cr5, cr5, {3}
    1208:	494f5044 	stmdbmi	pc, {r2, r6, ip, lr}^	; <UNPREDICTABLE>
    120c:	7700544e 	strvc	r5, [r0, -lr, asr #8]
    1210:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1214:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1218:	62445045 	subvs	r5, r4, #69	; 0x45
    121c:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    1220:	756f4330 	strbvc	r4, [pc, #-816]!	; ef8 <__Stack_Size+0xaf8>
    1224:	5300746e 	movwpl	r7, #1134	; 0x46e
    1228:	41447465 	cmpmi	r4, r5, ror #8
    122c:	00524444 	subseq	r4, r2, r4, asr #8
    1230:	52776470 	rsbspl	r6, r7, #112, 8	; 0x70000000
    1234:	42006765 	andmi	r6, r0, #26476544	; 0x1940000
    1238:	53657479 	cmnpl	r5, #2030043136	; 0x79000000
    123c:	00706177 	rsbseq	r6, r0, r7, ror r1
    1240:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1244:	756f4350 	strbvc	r4, [pc, #-848]!	; efc <__Stack_Size+0xafc>
    1248:	7852746e 	ldmdavc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    124c:	00676552 	rsbeq	r6, r7, r2, asr r5
    1250:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1254:	43785250 	cmnmi	r8, #80, 4
    1258:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    125c:	65546200 	ldrbvs	r6, [r4, #-512]	; 0x200
    1260:	5300706d 	movwpl	r7, #109	; 0x6d
    1264:	4e437465 	cdpmi	4, 4, cr7, cr3, cr5, {3}
    1268:	53005254 	movwpl	r5, #596	; 0x254
    126c:	54427465 	strbpl	r7, [r2], #-1125	; 0x465
    1270:	454c4241 	strbmi	r4, [ip, #-577]	; 0x241
    1274:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1278:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    127c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1280:	6c430074 	mcrrvs	0, 7, r0, r3, cr4
    1284:	45726165 	ldrbmi	r6, [r2, #-357]!	; 0x165
    1288:	54435f50 	strbpl	r5, [r3], #-3920	; 0xf50
    128c:	58545f52 	ldmdapl	r4, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    1290:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1294:	62445045 	subvs	r5, r4, #69	; 0x45
    1298:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    129c:	756f4331 	strbvc	r4, [pc, #-817]!	; f73 <__Stack_Size+0xb73>
    12a0:	5300746e 	movwpl	r7, #1134	; 0x46e
    12a4:	50457465 	subpl	r7, r5, r5, ror #8
    12a8:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    12ac:	43306675 	teqmi	r0, #122683392	; 0x7500000
    12b0:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    12b4:	75427700 	strbvc	r7, [r2, #-1792]	; 0x700
    12b8:	64413066 	strbvs	r3, [r1], #-102	; 0x66
    12bc:	53007264 	movwpl	r7, #612	; 0x264
    12c0:	535f7465 	cmppl	pc, #1694498816	; 0x65000000
    12c4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    12c8:	754f5f73 	strbvc	r5, [pc, #-3955]	; 35d <_Minimum_Stack_Size+0x25d>
    12cc:	65470074 	strbvs	r0, [r7, #-116]	; 0x74
    12d0:	524e4674 	subpl	r4, lr, #116, 12	; 0x7400000
    12d4:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    12d8:	62445045 	subvs	r5, r4, #69	; 0x45
    12dc:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    12e0:	64644130 	strbtvs	r4, [r4], #-304	; 0x130
    12e4:	6e450072 	mcrvs	0, 2, r0, cr5, cr2, {3}
    12e8:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    12ec:	445f746e 	ldrbmi	r7, [pc], #-1134	; 12f4 <__Stack_Size+0xef4>
    12f0:	5f474f54 	svcpl	0x00474f54
    12f4:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    12f8:	47007375 	smlsdxmi	r0, r5, r3, r7
    12fc:	50457465 	subpl	r7, r5, r5, ror #8
    1300:	64417854 	strbvs	r7, [r1], #-2132	; 0x854
    1304:	43007264 	movwmi	r7, #612	; 0x264
    1308:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    130c:	474f5444 	strbmi	r5, [pc, -r4, asr #8]
    1310:	0058545f 	subseq	r5, r8, pc, asr r4
    1314:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1318:	53785450 	cmnpl	r8, #80, 8	; 0x50000000
    131c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1320:	45620073 	strbmi	r0, [r2, #-115]!	; 0x73
    1324:	6d754e70 	ldclvs	14, cr4, [r5, #-448]!	; 0xfffffe40
    1328:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    132c:	50444e45 	subpl	r4, r4, r5, asr #28
    1330:	544e494f 	strbpl	r4, [lr], #-2383	; 0x94f
    1334:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1338:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
    133c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1340:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1344:	62445045 	subvs	r5, r4, #69	; 0x45
    1348:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    134c:	756f4331 	strbvc	r4, [pc, #-817]!	; 1023 <__Stack_Size+0xc23>
    1350:	4300746e 	movwmi	r7, #1134	; 0x46e
    1354:	485f5254 	ldmdami	pc, {r2, r4, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    1358:	65530050 	ldrbvs	r0, [r3, #-80]	; 0x50
    135c:	30707574 	rsbscc	r7, r0, r4, ror r5
    1360:	6f72505f 	svcvs	0x0072505f
    1364:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    1368:	76615300 	strbtvc	r5, [r1], -r0, lsl #6
    136c:	74535265 	ldrbvc	r5, [r3], #-613	; 0x265
    1370:	00657461 	rsbeq	r7, r5, r1, ror #8
    1374:	65766153 	ldrbvs	r6, [r6, #-339]!	; 0x153
    1378:	61745354 	cmnvs	r4, r4, asr r3
    137c:	77006574 	smlsdxvc	r0, r4, r5, r6
    1380:	61565045 	cmpvs	r6, r5, asr #32
    1384:	7375006c 	cmnvc	r5, #108	; 0x6c
    1388:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    138c:	73752f62 	cmnvc	r5, #392	; 0x188
    1390:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
    1394:	00632e74 	rsbeq	r2, r3, r4, ror lr
    1398:	5f306e49 	svcpl	0x00306e49
    139c:	636f7250 	cmnvs	pc, #80, 4
    13a0:	00737365 	rsbseq	r7, r3, r5, ror #6
    13a4:	3074754f 	rsbscc	r7, r4, pc, asr #10
    13a8:	6f72505f 	svcvs	0x0072505f
    13ac:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    13b0:	69504500 	ldmdbvs	r0, {r8, sl, lr}^
    13b4:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    13b8:	76615300 	strbtvc	r5, [r1], -r0, lsl #6
    13bc:	61745365 	cmnvs	r4, r5, ror #6
    13c0:	75006574 	strvc	r6, [r0, #-1396]	; 0x574
    13c4:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    13c8:	752f6269 	strvc	r6, [pc, #-617]!	; 1167 <__Stack_Size+0xd67>
    13cc:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    13d0:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
    13d4:	55700063 	ldrbpl	r0, [r0, #-99]!	; 0x63
    13d8:	5f726573 	svcpl	0x00726573
    13dc:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    13e0:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    13e4:	7165525f 	cmnvc	r5, pc, asr r2
    13e8:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
    13ec:	65440073 	strbvs	r0, [r4, #-115]	; 0x73
    13f0:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    13f4:	666e495f 			; <UNDEFINED> instruction: 0x666e495f
    13f8:	7375006f 	cmnvc	r5, #111	; 0x6f
    13fc:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1400:	73752f62 	cmnvc	r5, #392	; 0x188
    1404:	6f635f62 	svcvs	0x00635f62
    1408:	632e6572 	teqvs	lr, #478150656	; 0x1c800000
    140c:	444e4500 	strbmi	r4, [lr], #-1280	; 0x500
    1410:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
    1414:	54535f54 	ldrbpl	r5, [r3], #-3924	; 0xf54
    1418:	004c4c41 	subeq	r4, ip, r1, asr #24
    141c:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0x552
    1420:	5000746c 	andpl	r7, r0, ip, ror #8
    1424:	3074736f 	rsbscc	r7, r4, pc, ror #6
    1428:	6f72505f 	svcvs	0x0072505f
    142c:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    1430:	74614400 	strbtvc	r4, [r1], #-1024	; 0x400
    1434:	66754261 	ldrbtvs	r4, [r5], -r1, ror #4
    1438:	00726566 	rsbseq	r6, r2, r6, ror #10
    143c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
    1440:	64657672 	strbtvs	r7, [r5], #-1650	; 0x672
    1444:	61745300 	cmnvs	r4, r0, lsl #6
    1448:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    144c:	65535f64 	ldrbvs	r5, [r3, #-3940]	; 0xf64
    1450:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    1454:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
    1458:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    145c:	44006e6f 	strmi	r6, [r0], #-3695	; 0xe6f
    1460:	53617461 	cmnpl	r1, #1627389952	; 0x61000000
    1464:	65676174 	strbvs	r6, [r7, #-372]!	; 0x174
    1468:	44006e49 	strmi	r6, [r0], #-3657	; 0xe49
    146c:	43495645 	movtmi	r5, #38469	; 0x9645
    1470:	45525f45 	ldrbmi	r5, [r2, #-3909]	; 0xf45
    1474:	45544f4d 	ldrbmi	r4, [r4, #-3917]	; 0xf4d
    1478:	4b41575f 	blmi	10571fc <__Stack_Size+0x1056dfc>
    147c:	00505545 	subseq	r5, r0, r5, asr #10
    1480:	4c415453 	cfstrdmi	mvd5, [r1], {83}	; 0x53
    1484:	0044454c 	subeq	r4, r4, ip, asr #10
    1488:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    148c:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    1490:	69786500 	ldmdbvs	r8!, {r8, sl, sp, lr}^
    1494:	6f4e5f74 	svcvs	0x004e5f74
    1498:	61746144 	cmnvs	r4, r4, asr #2
    149c:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    14a0:	00307075 	eorseq	r7, r0, r5, ror r0
    14a4:	6c615677 	stclvs	6, cr5, [r1], #-476	; 0xfffffe24
    14a8:	00316575 	eorseq	r6, r1, r5, ror r5
    14ac:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
    14b0:	445f4543 	ldrbmi	r4, [pc], #-1347	; 14b8 <__Stack_Size+0x10b8>
    14b4:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    14b8:	4f545049 	svcmi	0x00545049
    14bc:	54530052 	ldrbpl	r0, [r3], #-82	; 0x52
    14c0:	474e4952 	smlsldmi	r4, lr, r2, r9
    14c4:	5345445f 	movtpl	r4, #21599	; 0x545f
    14c8:	50495243 	subpl	r5, r9, r3, asr #4
    14cc:	00524f54 	subseq	r4, r2, r4, asr pc
    14d0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    14d4:	4d506f54 	ldclmi	15, cr6, [r0, #-336]	; 0xfffffeb0
    14d8:	66754241 	ldrbtvs	r4, [r5], -r1, asr #4
    14dc:	43726566 	cmnmi	r2, #427819008	; 0x19800000
    14e0:	0079706f 	rsbseq	r7, r9, pc, rrx
    14e4:	65766173 	ldrbvs	r6, [r6, #-371]!	; 0x173
    14e8:	654c725f 	strbvs	r7, [ip, #-607]	; 0x25f
    14ec:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    14f0:	53414c00 	movtpl	r4, #7168	; 0x1c00
    14f4:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    14f8:	5441445f 	strbpl	r4, [r1], #-1119	; 0x45f
    14fc:	4f4e0041 	svcmi	0x004e0041
    1500:	72505f50 	subsvc	r5, r0, #80, 30	; 0x140
    1504:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    1508:	74530073 	ldrbvc	r0, [r3], #-115	; 0x73
    150c:	61646e61 	cmnvs	r4, r1, ror #28
    1510:	535f6472 	cmppl	pc, #1912602624	; 0x72000000
    1514:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
    1518:	66726574 			; <UNDEFINED> instruction: 0x66726574
    151c:	00656361 	rsbeq	r6, r5, r1, ror #6
    1520:	65707845 	ldrbvs	r7, [r0, #-2117]!	; 0x845
    1524:	535f7463 	cmppl	pc, #1660944384	; 0x63000000
    1528:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    152c:	754f5f73 	strbvc	r5, [pc, #-3955]	; 5c1 <__Stack_Size+0x1c1>
    1530:	41500074 	cmpmi	r0, r4, ror r0
    1534:	00455355 	subeq	r5, r5, r5, asr r3
    1538:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0x552
    153c:	4e747365 	cdpmi	3, 7, cr7, cr4, cr5, {3}
    1540:	4547006f 	strbmi	r0, [r7, #-111]	; 0x6f
    1544:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    1548:	46524554 			; <UNDEFINED> instruction: 0x46524554
    154c:	00454341 	subeq	r4, r5, r1, asr #6
    1550:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    1554:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    1558:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    155c:	50646e45 	rsbpl	r6, r4, r5, asr #28
    1560:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
    1564:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
    1568:	00657275 	rsbeq	r7, r5, r5, ror r2
    156c:	5f544547 	svcpl	0x00544547
    1570:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
    1574:	53005355 	movwpl	r5, #853	; 0x355
    1578:	465f5445 	ldrbmi	r5, [pc], -r5, asr #8
    157c:	55544145 	ldrbpl	r4, [r4, #-325]	; 0x145
    1580:	44004552 	strmi	r4, [r0], #-1362	; 0x552
    1584:	5f617461 	svcpl	0x00617461
    1588:	5f6c754d 	svcpl	0x006c754d
    158c:	5078614d 	rsbspl	r6, r8, sp, asr #2
    1590:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
    1594:	7a695374 	bvc	1a5636c <__Stack_Size+0x1a55f6c>
    1598:	44700065 	ldrbtmi	r0, [r0], #-101	; 0x65
    159c:	53007665 	movwpl	r7, #1637	; 0x665
    15a0:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
    15a4:	5f647261 	svcpl	0x00647261
    15a8:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
    15ac:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    15b0:	61654665 	cmnvs	r5, r5, ror #12
    15b4:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    15b8:	65447000 	strbvs	r7, [r4, #-0]
    15bc:	53006373 	movwpl	r6, #883	; 0x373
    15c0:	48434e59 	stmdami	r3, {r0, r3, r4, r6, r9, sl, fp, lr}^
    15c4:	4152465f 	cmpmi	r2, pc, asr r6
    15c8:	5300454d 	movwpl	r4, #1357	; 0x54d
    15cc:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
    15d0:	5f647261 	svcpl	0x00647261
    15d4:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    15d8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    15dc:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
    15e0:	54455300 	strbpl	r5, [r5], #-768	; 0x300
    15e4:	5345445f 	movtpl	r4, #21599	; 0x545f
    15e8:	50495243 	subpl	r5, r9, r3, asr #4
    15ec:	00524f54 	subseq	r4, r2, r4, asr pc
    15f0:	5f544553 	svcpl	0x00544553
    15f4:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xe49
    15f8:	43414652 	movtmi	r4, #5714	; 0x1652
    15fc:	465f0045 	ldrbmi	r0, [pc], -r5, asr #32
    1600:	55544145 	ldrbpl	r4, [r4, #-325]	; 0x145
    1604:	535f4552 	cmppl	pc, #343932928	; 0x14800000
    1608:	43454c45 	movtmi	r4, #23621	; 0x5c45
    160c:	00524f54 	subseq	r4, r2, r4, asr pc
    1610:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    1614:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    1618:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    161c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1620:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
    1624:	6f697461 	svcvs	0x00697461
    1628:	7453006e 	ldrbvc	r0, [r3], #-110	; 0x6e
    162c:	61646e61 	cmnvs	r4, r1, ror #28
    1630:	435f6472 	cmpmi	pc, #1912602624	; 0x72000000
    1634:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1638:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
    163c:	00657275 	rsbeq	r7, r5, r5, ror r2
    1640:	5f544547 	svcpl	0x00544547
    1644:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    1648:	52554749 	subspl	r4, r5, #19136512	; 0x1240000
    164c:	4f495441 	svcmi	0x00495441
    1650:	435f004e 	cmpmi	pc, #78	; 0x4e
    1654:	52544e4f 	subspl	r4, r4, #1264	; 0x4f0
    1658:	535f4c4f 	cmppl	pc, #20224	; 0x4f00
    165c:	45544154 	ldrbmi	r4, [r4, #-340]	; 0x154
    1660:	45445f00 	strbmi	r5, [r4, #-3840]	; 0xf00
    1664:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    1668:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    166c:	5059545f 	subspl	r5, r9, pc, asr r4
    1670:	45530045 	ldrbmi	r0, [r3, #-69]	; 0x45
    1674:	4e495454 	mcrmi	4, 2, r5, cr9, cr4, {2}
    1678:	50555f47 	subspl	r5, r5, r7, asr #30
    167c:	414d5000 	mrsmi	r5, (UNDEF: 77)
    1680:	73556f54 	cmpvc	r5, #84, 30	; 0x150
    1684:	75427265 	strbvc	r7, [r2, #-613]	; 0x265
    1688:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    168c:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
    1690:	54455300 	strbpl	r5, [r5], #-768	; 0x300
    1694:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
    1698:	55474946 	strbpl	r4, [r7, #-2374]	; 0x946
    169c:	49544152 	ldmdbmi	r4, {r1, r4, r6, r8, lr}^
    16a0:	57004e4f 	strpl	r4, [r0, -pc, asr #28]
    16a4:	5f544941 	svcpl	0x00544941
    16a8:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
    16ac:	4f5f5355 	svcmi	0x005f5355
    16b0:	49005455 	stmdbmi	r0, {r0, r2, r4, r6, sl, ip, lr}
    16b4:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    16b8:	45434146 	strbmi	r4, [r3, #-326]	; 0x146
    16bc:	5345445f 	movtpl	r4, #21599	; 0x545f
    16c0:	50495243 	subpl	r5, r9, r3, asr #4
    16c4:	00524f54 	subseq	r4, r2, r4, asr pc
    16c8:	65766173 	ldrbvs	r6, [r6, #-371]!	; 0x173
    16cc:	654c775f 	strbvs	r7, [ip, #-1887]	; 0x75f
    16d0:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    16d4:	544f5400 	strbpl	r5, [pc], #-1024	; 16dc <__Stack_Size+0x12dc>
    16d8:	735f4c41 	cmpvc	pc, #16640	; 0x4100
    16dc:	55514552 	ldrbpl	r4, [r1, #-1362]	; 0x552
    16e0:	00545345 	subseq	r5, r4, r5, asr #6
    16e4:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    16e8:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    16ec:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    16f0:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    16f4:	45007375 	strmi	r7, [r0, #-885]	; 0x375
    16f8:	4f50444e 	svcmi	0x0050444e
    16fc:	5f544e49 	svcpl	0x00544e49
    1700:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    1704:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
    1708:	4300524f 	movwmi	r5, #591	; 0x24f
    170c:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
    1710:	45445f47 	strbmi	r5, [r4, #-3911]	; 0xf47
    1714:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    1718:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    171c:	75427000 	strbvc	r7, [r2, #-0]
    1720:	45700066 	ldrbmi	r0, [r0, #-102]!	; 0x66
    1724:	666e6950 			; <UNDEFINED> instruction: 0x666e6950
    1728:	4553006f 	ldrbmi	r0, [r3, #-111]	; 0x6f
    172c:	44415f54 	strbmi	r5, [r1], #-3924	; 0xf54
    1730:	53455244 	movtpl	r5, #21060	; 0x5244
    1734:	65520053 	ldrbvs	r0, [r2, #-83]	; 0x53
    1738:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0x16c
    173c:	6e455f64 	cdpvs	15, 4, cr5, cr5, cr4, {3}
    1740:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    1744:	5300746e 	movwpl	r7, #1134	; 0x46e
    1748:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    174c:	666e4973 			; <UNDEFINED> instruction: 0x666e4973
    1750:	4977006f 	ldmdbmi	r7!, {r0, r1, r2, r3, r5, r6}^
    1754:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    1758:	45470030 	strbmi	r0, [r7, #-48]	; 0x30
    175c:	45445f54 	strbmi	r5, [r4, #-3924]	; 0xf54
    1760:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    1764:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    1768:	74614400 	strbtvc	r4, [r1], #-1024	; 0x400
    176c:	61745361 	cmnvs	r4, r1, ror #6
    1770:	754f6567 	strbvc	r6, [pc, #-1383]	; 1211 <__Stack_Size+0xe11>
    1774:	41570074 	cmpmi	r7, r4, ror r0
    1778:	535f5449 	cmppl	pc, #1224736768	; 0x49000000
    177c:	50555445 	subspl	r5, r5, r5, asr #8
    1780:	71655200 	cmnvc	r5, r0, lsl #4
    1784:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
    1788:	006f4e5f 	rsbeq	r4, pc, pc, asr lr	; <UNPREDICTABLE>
    178c:	54494157 	strbpl	r4, [r9], #-343	; 0x157
    1790:	4154535f 	cmpmi	r4, pc, asr r3
    1794:	5f535554 	svcpl	0x00535554
    1798:	43004e49 	movwmi	r4, #3657	; 0xe49
    179c:	5241454c 	subpl	r4, r1, #76, 10	; 0x13000000
    17a0:	4145465f 	cmpmi	r5, pc, asr r6
    17a4:	45525554 	ldrbmi	r5, [r2, #-1364]	; 0x554
    17a8:	53414c00 	movtpl	r4, #7168	; 0x1c00
    17ac:	554f5f54 	strbpl	r5, [pc, #-3924]	; 860 <__Stack_Size+0x460>
    17b0:	41445f54 	cmpmi	r4, r4, asr pc
    17b4:	75004154 	strvc	r4, [r0, #-340]	; 0x154
    17b8:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    17bc:	752f6269 	strvc	r6, [pc, #-617]!	; 155b <__Stack_Size+0x115b>
    17c0:	6d5f6273 	lfmvs	f6, 2, [pc, #-460]	; 15fc <__Stack_Size+0x11fc>
    17c4:	632e6d65 	teqvs	lr, #6464	; 0x1940
    17c8:	424e7700 	submi	r7, lr, #0, 14
    17cc:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    17d0:	55627000 	strbpl	r7, [r2, #-0]!
    17d4:	75427273 	strbvc	r7, [r2, #-627]	; 0x273
    17d8:	65740066 	ldrbvs	r0, [r4, #-102]!	; 0x66
    17dc:	0031706d 	eorseq	r7, r1, sp, rrx
    17e0:	706d6574 	rsbvc	r6, sp, r4, ror r5
    17e4:	50770032 	rsbspl	r0, r7, r2, lsr r0
    17e8:	7542414d 	strbvc	r4, [r2, #-333]	; 0x14d
    17ec:	64644166 	strbtvs	r4, [r4], #-358	; 0x166
    17f0:	64700072 	ldrbtvs	r0, [r0], #-114	; 0x72
    17f4:	6c615677 	stclvs	6, cr5, [r1], #-476	; 0xfffffe24
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	08000142 	stmdaeq	r0, {r1, r6, r8}
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	0800014a 	stmdaeq	r0, {r1, r3, r6, r8}
       8:	4a500001 	bmi	1400014 <__Stack_Size+0x13ffc14>
       c:	4c080001 	stcmi	0, cr0, [r8], {1}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	04080001 	streq	r0, [r8], #-1
      14:	5001f300 	andpl	pc, r1, r0, lsl #6
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      1c:	00000000 	andeq	r0, r0, r0
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	0001bc00 	andeq	fp, r1, r0, lsl #24
      24:	0001c008 	andeq	ip, r1, r8
      28:	71000508 	tstvc	r0, r8, lsl #10
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	9f274000 	svcls	0x00274000
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	080001c0 	stmdaeq	r0, {r6, r7, r8}
      34:	080001c4 	stmdaeq	r0, {r2, r6, r7, r8}
      38:	00710007 	rsbseq	r0, r1, r7

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	27402740 	strbcs	r2, [r0, -r0, asr #14]

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	0001c49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	0001c608 	andeq	ip, r1, r8, lsl #12
      48:	73000808 	movwvc	r0, #2056	; 0x808
      4c:	27400600 	strbcs	r0, [r0, -r0, lsl #12]

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	c69f2740 	ldrgt	r2, [pc], r0, asr #14
      54:	e5080001 	str	r0, [r8, #-1]
      58:	0b080001 	bleq	200064 <__Stack_Size+0x1ffc64>
      5c:	5c000c00 	stcpl	12, cr0, [r0], {-0}
      60:	40064000 	andmi	r4, r6, r0
      64:	9f274027 	svcls	0x00274027
	...
      70:	08000228 	stmdaeq	r0, {r3, r5, r9}
      74:	0800023f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r9}
      78:	3f500001 	svccc	0x00500001
      7c:	88080002 	stmdahi	r8, {r1}
      80:	04080002 	streq	r0, [r8], #-2
      84:	5001f300 	andpl	pc, r1, r0, lsl #6
      88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      8c:	00000000 	andeq	r0, r0, r0
      90:	00022800 	andeq	r2, r2, r0, lsl #16
      94:	00025208 	andeq	r5, r2, r8, lsl #4
      98:	30000208 	andcc	r0, r0, r8, lsl #4
      9c:	00025a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
      a0:	00026008 	andeq	r6, r2, r8
      a4:	30000208 	andcc	r0, r0, r8, lsl #4
      a8:	0002609f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
      ac:	00026b08 	andeq	r6, r2, r8, lsl #22
      b0:	53000108 	movwpl	r0, #264	; 0x108
      b4:	08000270 	stmdaeq	r0, {r4, r5, r6, r9}
      b8:	08000288 	stmdaeq	r0, {r3, r7, r9}
      bc:	9f300002 	svcls	0x00300002
	...
      c8:	08000288 	stmdaeq	r0, {r3, r7, r9}
      cc:	0800028d 	stmdaeq	r0, {r0, r2, r3, r7, r9}
      d0:	8d500001 	ldclhi	0, cr0, [r0, #-4]
      d4:	94080002 	strls	r0, [r8], #-2
      d8:	04080002 	streq	r0, [r8], #-2
      dc:	5001f300 	andpl	pc, r1, r0, lsl #6
      e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      e4:	00000000 	andeq	r0, r0, r0
      e8:	00029400 	andeq	r9, r2, r0, lsl #8
      ec:	00029908 	andeq	r9, r2, r8, lsl #18
      f0:	50000108 	andpl	r0, r0, r8, lsl #2
      f4:	08000299 	stmdaeq	r0, {r0, r3, r4, r7, r9}
      f8:	080002a0 	stmdaeq	r0, {r5, r7, r9}
      fc:	01f30004 	mvnseq	r0, r4
     100:	00009f50 	andeq	r9, r0, r0, asr pc
     104:	00000000 	andeq	r0, r0, r0
     108:	02a00000 	adceq	r0, r0, #0
     10c:	02b30800 	adcseq	r0, r3, #0, 16
     110:	00010800 	andeq	r0, r1, r0, lsl #16
     114:	0002b350 	andeq	fp, r2, r0, asr r3
     118:	0002b408 	andeq	fp, r2, r8, lsl #8
     11c:	f3000408 	vshl.u8	d0, d8, d0
     120:	b49f5001 	ldrlt	r5, [pc], #1	; 128 <_Minimum_Stack_Size+0x28>
     124:	b6080002 	strlt	r0, [r8], -r2
     128:	01080002 	tsteq	r8, r2
     12c:	02b65000 	adcseq	r5, r6, #0
     130:	02c00800 	sbceq	r0, r0, #0, 16
     134:	00040800 	andeq	r0, r4, r0, lsl #16
     138:	9f5001f3 	svcls	0x005001f3
	...
     144:	080002c0 	stmdaeq	r0, {r6, r7, r9}
     148:	080002c5 	stmdaeq	r0, {r0, r2, r6, r7, r9}
     14c:	c5500001 	ldrbgt	r0, [r0, #-1]
     150:	cc080002 	stcgt	0, cr0, [r8], {2}
     154:	04080002 	streq	r0, [r8], #-2
     158:	5001f300 	andpl	pc, r1, r0, lsl #6
     15c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     160:	00000000 	andeq	r0, r0, r0
     164:	0002cc00 	andeq	ip, r2, r0, lsl #24
     168:	0002df08 	andeq	sp, r2, r8, lsl #30
     16c:	50000108 	andpl	r0, r0, r8, lsl #2
     170:	080002df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r9}
     174:	080002ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9}
     178:	01f30004 	mvnseq	r0, r4
     17c:	02ea9f50 	rsceq	r9, sl, #80, 30	; 0x140
     180:	02ec0800 	rsceq	r0, ip, #0, 16
     184:	00010800 	andeq	r0, r1, r0, lsl #16
     188:	0002ec50 	andeq	lr, r2, r0, asr ip
     18c:	0002f408 	andeq	pc, r2, r8, lsl #8
     190:	f3000408 	vshl.u8	d0, d8, d0
     194:	009f5001 	addseq	r5, pc, r1
     198:	00000000 	andeq	r0, r0, r0
     19c:	dc000000 	stcle	0, cr0, [r0], {-0}
     1a0:	ea080002 	b	2001b0 <__Stack_Size+0x1ffdb0>
     1a4:	04080002 	streq	r0, [r8], #-2
     1a8:	5001f300 	andpl	pc, r1, r0, lsl #6
     1ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     1b0:	00000000 	andeq	r0, r0, r0
     1b4:	00037600 	andeq	r7, r3, r0, lsl #12
     1b8:	00037a08 	andeq	r7, r3, r8, lsl #20
     1bc:	72000508 	andvc	r0, r0, #8, 10	; 0x2000000
     1c0:	9f213c00 	svcls	0x00213c00
	...
     1cc:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
     1d0:	080003c1 	stmdaeq	r0, {r0, r6, r7, r8, r9}
     1d4:	c1500001 	cmpgt	r0, r1
     1d8:	c4080003 	strgt	r0, [r8], #-3
     1dc:	04080003 	streq	r0, [r8], #-3
     1e0:	5001f300 	andpl	pc, r1, r0, lsl #6
     1e4:	0003c49f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
     1e8:	0003c708 	andeq	ip, r3, r8, lsl #14
     1ec:	50000108 	andpl	r0, r0, r8, lsl #2
     1f0:	080003c7 	stmdaeq	r0, {r0, r1, r2, r6, r7, r8, r9}
     1f4:	080003cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9}
     1f8:	01f30004 	mvnseq	r0, r4
     1fc:	03cc9f50 	biceq	r9, ip, #80, 30	; 0x140
     200:	041a0800 	ldreq	r0, [sl], #-2048	; 0x800
     204:	00010800 	andeq	r0, r1, r0, lsl #16
     208:	00041a50 	andeq	r1, r4, r0, asr sl
     20c:	00042808 	andeq	r2, r4, r8, lsl #16
     210:	f3000408 	vshl.u8	d0, d8, d0
     214:	009f5001 	addseq	r5, pc, r1
     218:	00000000 	andeq	r0, r0, r0
     21c:	ea000000 	b	224 <_Minimum_Stack_Size+0x124>
     220:	ee080003 	cdp	0, 0, cr0, cr8, cr3, {0}
     224:	05080003 	streq	r0, [r8, #-3]
     228:	40007200 	andmi	r7, r0, r0, lsl #4
     22c:	040e9f21 	streq	r9, [lr], #-3873	; 0xf21
     230:	04140800 	ldreq	r0, [r4], #-2048	; 0x800
     234:	00060800 	andeq	r0, r6, r0, lsl #16
     238:	ef090071 	svc	0x00090071
     23c:	00009f1a 	andeq	r9, r0, sl, lsl pc
     240:	00000000 	andeq	r0, r0, r0
     244:	05ac0000 	streq	r0, [ip, #0]!
     248:	05ce0800 	strbeq	r0, [lr, #2048]	; 0x800
     24c:	00020800 	andeq	r0, r2, r0, lsl #16
     250:	05ce9f30 	strbeq	r9, [lr, #3888]	; 0xf30
     254:	05e80800 	strbeq	r0, [r8, #2048]!	; 0x800
     258:	00020800 	andeq	r0, r2, r0, lsl #16
     25c:	05f69f31 	ldrbeq	r9, [r6, #3889]!	; 0xf31
     260:	06240800 	strteq	r0, [r4], -r0, lsl #16
     264:	00020800 	andeq	r0, r2, r0, lsl #16
     268:	00009f31 	andeq	r9, r0, r1, lsr pc
     26c:	00000000 	andeq	r0, r0, r0
     270:	06240000 	strteq	r0, [r4], -r0
     274:	062a0800 	strteq	r0, [sl], -r0, lsl #16
     278:	00010800 	andeq	r0, r1, r0, lsl #16
     27c:	00062a51 	andeq	r2, r6, r1, asr sl
     280:	00063a08 	andeq	r3, r6, r8, lsl #20
     284:	f3000408 	vshl.u8	d0, d8, d0
     288:	009f5101 	addseq	r5, pc, r1, lsl #2
     28c:	00000000 	andeq	r0, r0, r0
     290:	24000000 	strcs	r0, [r0], #-0
     294:	24080006 	strcs	r0, [r8], #-6
     298:	01080006 	tsteq	r8, r6
     29c:	06245200 	strteq	r5, [r4], -r0, lsl #4
     2a0:	062e0800 	strteq	r0, [lr], -r0, lsl #16
     2a4:	00070800 	andeq	r0, r7, r0, lsl #16
     2a8:	24480072 	strbcs	r0, [r8], #-114	; 0x72
     2ac:	2e9f2930 	mrccs	9, 4, r2, cr15, cr0, {1}
     2b0:	3a080006 	bcc	2002d0 <__Stack_Size+0x1ffed0>
     2b4:	08080006 	stmdaeq	r8, {r1, r2}
     2b8:	5201f300 	andpl	pc, r1, #0, 6
     2bc:	29302448 	ldmdbcs	r0!, {r3, r6, sl, sp}
     2c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     2d0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     2dc:	01f30004 	mvnseq	r0, r4
     2e0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     2f0:	00010000 	andeq	r0, r1, r0
     2f4:	00000051 	andeq	r0, r0, r1, asr r0
     2f8:	00000000 	andeq	r0, r0, r0
     2fc:	f3000400 	vshl.u8	d0, d0, d0
     300:	009f5101 	addseq	r5, pc, r1, lsl #2
     304:	00000000 	andeq	r0, r0, r0
     308:	3c000000 	stccc	0, cr0, [r0], {-0}
     30c:	40080006 	andmi	r0, r8, r6
     310:	02080006 	andeq	r0, r8, #6
     314:	409f3000 	addsmi	r3, pc, r0
     318:	44080006 	strmi	r0, [r8], #-6
     31c:	08080006 	stmdaeq	r8, {r1, r2}
     320:	08007000 	stmdaeq	r0, {ip, sp, lr}
     324:	2e301a80 	vaddcs.f32	s2, s1, s0
     328:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     338:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     344:	00580001 	subseq	r0, r8, r1
	...
     354:	01000000 	mrseq	r0, (UNDEF: 0)
     358:	00005100 	andeq	r5, r0, r0, lsl #2
     35c:	00000000 	andeq	r0, r0, r0
     360:	00040000 	andeq	r0, r4, r0
     364:	9f5101f3 	svcls	0x005101f3
	...
     378:	00520001 	subseq	r0, r2, r1
     37c:	00000000 	andeq	r0, r0, r0
     380:	04000000 	streq	r0, [r0], #-0
     384:	5201f300 	andpl	pc, r1, #0, 6
     388:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     38c:	00000000 	andeq	r0, r0, r0
     390:	74000300 	strvc	r0, [r0], #-768	; 0x300
     394:	00009f7f 	andeq	r9, r0, pc, ror pc
     398:	00000000 	andeq	r0, r0, r0
     39c:	00030000 	andeq	r0, r3, r0
     3a0:	009f0074 	addseq	r0, pc, r4, ror r0	; <UNPREDICTABLE>
     3a4:	00000000 	andeq	r0, r0, r0
     3a8:	03000000 	movweq	r0, #0
     3ac:	9f7f7400 	svcls	0x007f7400
	...
     3c0:	00530001 	subseq	r0, r3, r1
     3c4:	00000000 	andeq	r0, r0, r0
     3c8:	01000000 	mrseq	r0, (UNDEF: 0)
     3cc:	00005600 	andeq	r5, r0, r0, lsl #12
	...
     3dc:	00010000 	andeq	r0, r1, r0
     3e0:	00000055 	andeq	r0, r0, r5, asr r0
     3e4:	00000000 	andeq	r0, r0, r0
     3e8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     3f4:	00550001 	subseq	r0, r5, r1
     3f8:	00000000 	andeq	r0, r0, r0
     3fc:	16000000 	strne	r0, [r0], -r0
     400:	1c080007 	stcne	0, cr0, [r8], {7}
     404:	01080007 	tsteq	r8, r7
     408:	00005200 	andeq	r5, r0, r0, lsl #4
     40c:	00000000 	andeq	r0, r0, r0
     410:	07280000 	streq	r0, [r8, -r0]!
     414:	072c0800 	streq	r0, [ip, -r0, lsl #16]!
     418:	00010800 	andeq	r0, r1, r0, lsl #16
     41c:	00072c50 	andeq	r2, r7, r0, asr ip
     420:	00073c08 	andeq	r3, r7, r8, lsl #24
     424:	f3000408 	vshl.u8	d0, d8, d0
     428:	009f5001 	addseq	r5, pc, r1
     42c:	00000000 	andeq	r0, r0, r0
     430:	2a000000 	bcs	438 <__Stack_Size+0x38>
     434:	32080007 	andcc	r0, r8, #7
     438:	01080007 	tsteq	r8, r7
     43c:	00005300 	andeq	r5, r0, r0, lsl #6
     440:	00000000 	andeq	r0, r0, r0
     444:	073c0000 	ldreq	r0, [ip, -r0]!
     448:	074b0800 	strbeq	r0, [fp, -r0, lsl #16]
     44c:	00010800 	andeq	r0, r1, r0, lsl #16
     450:	00074b50 	andeq	r4, r7, r0, asr fp
     454:	00075408 	andeq	r5, r7, r8, lsl #8
     458:	f3000408 	vshl.u8	d0, d8, d0
     45c:	009f5001 	addseq	r5, pc, r1
     460:	00000000 	andeq	r0, r0, r0
     464:	42000000 	andmi	r0, r0, #0
     468:	4b080007 	blmi	20048c <__Stack_Size+0x20008c>
     46c:	01080007 	tsteq	r8, r7
     470:	00005300 	andeq	r5, r0, r0, lsl #6
     474:	00000000 	andeq	r0, r0, r0
     478:	07800000 	streq	r0, [r0, r0]
     47c:	07ae0800 	streq	r0, [lr, r0, lsl #16]!
     480:	00020800 	andeq	r0, r2, r0, lsl #16
     484:	07ae9f30 			; <UNDEFINED> instruction: 0x07ae9f30
     488:	07bc0800 	ldreq	r0, [ip, r0, lsl #16]!
     48c:	00010800 	andeq	r0, r1, r0, lsl #16
     490:	00000054 	andeq	r0, r0, r4, asr r0
     494:	00000000 	andeq	r0, r0, r0
     498:	0007c800 	andeq	ip, r7, r0, lsl #16
     49c:	0007d608 	andeq	sp, r7, r8, lsl #12
     4a0:	30000208 	andcc	r0, r0, r8, lsl #4
     4a4:	0007d69f 	muleq	r7, pc, r6	; <UNPREDICTABLE>
     4a8:	0007de08 	andeq	sp, r7, r8, lsl #28
     4ac:	53000108 	movwpl	r0, #264	; 0x108
     4b0:	080007de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl}
     4b4:	080007ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, sl}
     4b8:	ea520001 	b	14804c4 <__Stack_Size+0x14800c4>
     4bc:	0c080007 	stceq	0, cr0, [r8], {7}
     4c0:	01080008 	tsteq	r8, r8
     4c4:	080c5400 	stmdaeq	ip, {sl, ip, lr}
     4c8:	080e0800 	stmdaeq	lr, {fp}
     4cc:	00060800 	andeq	r0, r6, r0, lsl #16
     4d0:	00720074 	rsbseq	r0, r2, r4, ror r0
     4d4:	080e9f1a 	stmdaeq	lr, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
     4d8:	08100800 	ldmdaeq	r0, {fp}
     4dc:	00010800 	andeq	r0, r1, r0, lsl #16
     4e0:	00081052 	andeq	r1, r8, r2, asr r0
     4e4:	00081408 	andeq	r1, r8, r8, lsl #8
     4e8:	08001208 	stmdaeq	r0, {r3, r9, ip}
     4ec:	940070ff 	strls	r7, [r0], #-255	; 0xff
     4f0:	081a3301 	ldmdaeq	sl, {r0, r8, r9, ip, sp}
     4f4:	24331aff 	ldrtcs	r1, [r3], #-2815	; 0xaff
     4f8:	1a007424 	bne	1d590 <__Stack_Size+0x1d190>
     4fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     500:	00000000 	andeq	r0, r0, r0
     504:	0007c800 	andeq	ip, r7, r0, lsl #16
     508:	00080808 	andeq	r0, r8, r8, lsl #16
     50c:	30000208 	andcc	r0, r0, r8, lsl #4
     510:	0008089f 	muleq	r8, pc, r8	; <UNPREDICTABLE>
     514:	00080c08 	andeq	r0, r8, r8, lsl #24
     518:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     51c:	0800080c 	stmdaeq	r0, {r2, r3, fp}
     520:	08000810 	stmdaeq	r0, {r4, fp}
     524:	10510001 	subsne	r0, r1, r1
     528:	18080008 	stmdane	r8, {r3}
     52c:	01080008 	tsteq	r8, r8
     530:	00005200 	andeq	r5, r0, r0, lsl #4
     534:	00000000 	andeq	r0, r0, r0
     538:	07c80000 	strbeq	r0, [r8, r0]
     53c:	08080800 	stmdaeq	r8, {fp}
     540:	00020800 	andeq	r0, r2, r0, lsl #16
     544:	08089f30 	stmdaeq	r8, {r4, r5, r8, r9, sl, fp, ip, pc}
     548:	080e0800 	stmdaeq	lr, {fp}
     54c:	00010800 	andeq	r0, r1, r0, lsl #16
     550:	00080e52 	andeq	r0, r8, r2, asr lr
     554:	00081408 	andeq	r1, r8, r8, lsl #8
     558:	08000f08 	stmdaeq	r0, {r3, r8, r9, sl, fp}
     55c:	940070ff 	strls	r7, [r0], #-255	; 0xff
     560:	081a3301 	ldmdaeq	sl, {r0, r8, r9, ip, sp}
     564:	24331aff 	ldrtcs	r1, [r3], #-2815	; 0xaff
     568:	00009f24 	andeq	r9, r0, r4, lsr #30
     56c:	00000000 	andeq	r0, r0, r0
     570:	07c80000 	strbeq	r0, [r8, r0]
     574:	07d60800 	ldrbeq	r0, [r6, r0, lsl #16]
     578:	00020800 	andeq	r0, r2, r0, lsl #16
     57c:	07d69f30 			; <UNDEFINED> instruction: 0x07d69f30
     580:	07da0800 	ldrbeq	r0, [sl, r0, lsl #16]
     584:	00050800 	andeq	r0, r5, r0, lsl #16
     588:	1c007334 	stcne	3, cr7, [r0], {52}	; 0x34
     58c:	0007da9f 	muleq	r7, pc, sl	; <UNPREDICTABLE>
     590:	0007de08 	andeq	sp, r7, r8, lsl #28
     594:	52000108 	andpl	r0, r0, #8, 2
     598:	080007de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl}
     59c:	080007e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl}
     5a0:	73340005 	teqvc	r4, #5
     5a4:	009f1c00 	addseq	r1, pc, r0, lsl #24
     5a8:	00000000 	andeq	r0, r0, r0
     5ac:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     5b0:	d6080007 	strle	r0, [r8], -r7
     5b4:	02080007 	andeq	r0, r8, #7
     5b8:	d69f3f00 	ldrle	r3, [pc], r0, lsl #30
     5bc:	e2080007 	and	r0, r8, #7
     5c0:	05080007 	streq	r0, [r8, #-7]
     5c4:	00733f00 	rsbseq	r3, r3, r0, lsl #30
     5c8:	07e29f25 	strbeq	r9, [r2, r5, lsr #30]!
     5cc:	07e80800 	strbeq	r0, [r8, r0, lsl #16]!
     5d0:	00010800 	andeq	r0, r1, r0, lsl #16
     5d4:	00000054 	andeq	r0, r0, r4, asr r0
     5d8:	00000000 	andeq	r0, r0, r0
     5dc:	00085800 	andeq	r5, r8, r0, lsl #16
     5e0:	00086508 	andeq	r6, r8, r8, lsl #10
     5e4:	50000108 	andpl	r0, r0, r8, lsl #2
     5e8:	08000865 	stmdaeq	r0, {r0, r2, r5, r6, fp}
     5ec:	08000878 	stmdaeq	r0, {r3, r4, r5, r6, fp}
     5f0:	78540001 	ldmdavc	r4, {r0}^
     5f4:	7b080008 	blvc	20061c <__Stack_Size+0x20021c>
     5f8:	01080008 	tsteq	r8, r8
     5fc:	087b5000 	ldmdaeq	fp!, {ip, lr}^
     600:	08800800 	stmeq	r0, {fp}
     604:	00040800 	andeq	r0, r4, r0, lsl #16
     608:	9f5001f3 	svcls	0x005001f3
	...
     614:	08000894 	stmdaeq	r0, {r2, r4, r7, fp}
     618:	080008bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp}
     61c:	bc500001 	mrrclt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     620:	c8080008 	stmdagt	r8, {r3}
     624:	04080008 	streq	r0, [r8], #-8
     628:	5001f300 	andpl	pc, r1, r0, lsl #6
     62c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     630:	00000000 	andeq	r0, r0, r0
     634:	00089a00 	andeq	r9, r8, r0, lsl #20
     638:	0008b808 	andeq	fp, r8, r8, lsl #16
     63c:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
     640:	0008b89f 	muleq	r8, pc, r8	; <UNPREDICTABLE>
     644:	0008c808 	andeq	ip, r8, r8, lsl #16
     648:	30000208 	andcc	r0, r0, r8, lsl #4
     64c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     65c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     668:	00550001 	subseq	r0, r5, r1
     66c:	00000000 	andeq	r0, r0, r0
     670:	04000000 	streq	r0, [r0], #-0
     674:	5001f300 	andpl	pc, r1, r0, lsl #6
     678:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     688:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     694:	01f30004 	mvnseq	r0, r4
     698:	00009f51 	andeq	r9, r0, r1, asr pc
     69c:	00000000 	andeq	r0, r0, r0
     6a0:	00010000 	andeq	r0, r1, r0
     6a4:	00000054 	andeq	r0, r0, r4, asr r0
     6a8:	00000000 	andeq	r0, r0, r0
     6ac:	74000300 	strvc	r0, [r0], #-768	; 0x300
     6b0:	00009f01 	andeq	r9, r0, r1, lsl #30
     6b4:	00000000 	andeq	r0, r0, r0
     6b8:	00010000 	andeq	r0, r1, r0
     6bc:	00000054 	andeq	r0, r0, r4, asr r0
     6c0:	00000000 	andeq	r0, r0, r0
     6c4:	0008c800 	andeq	ip, r8, r0, lsl #16
     6c8:	00090208 	andeq	r0, r9, r8, lsl #4
     6cc:	50000108 	andpl	r0, r0, r8, lsl #2
     6d0:	08000902 	stmdaeq	r0, {r1, r8, fp}
     6d4:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
     6d8:	01f30004 	mvnseq	r0, r4
     6dc:	00009f50 	andeq	r9, r0, r0, asr pc
     6e0:	00000000 	andeq	r0, r0, r0
     6e4:	08d80000 	ldmeq	r8, {}^	; <UNPREDICTABLE>
     6e8:	08fe0800 	ldmeq	lr!, {fp}^
     6ec:	00010800 	andeq	r0, r1, r0, lsl #16
     6f0:	0008fe54 	andeq	pc, r8, r4, asr lr	; <UNPREDICTABLE>
     6f4:	00091408 	andeq	r1, r9, r8, lsl #8
     6f8:	52000108 	andpl	r0, r0, #8, 2
	...
     704:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
     708:	0800093e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, fp}
     70c:	3e500001 	cdpcc	0, 5, cr0, cr0, cr1, {0}
     710:	42080009 	andmi	r0, r8, #9
     714:	01080009 	tsteq	r8, r9
     718:	00005000 	andeq	r5, r0, r0
     71c:	00000000 	andeq	r0, r0, r0
     720:	093e0000 	ldmdbeq	lr!, {}	; <UNPREDICTABLE>
     724:	09420800 	stmdbeq	r2, {fp}^
     728:	00070800 	andeq	r0, r7, r0, lsl #16
     72c:	3200703f 	andcc	r7, r0, #63	; 0x3f
     730:	469f2424 	ldrmi	r2, [pc], r4, lsr #8
     734:	48080009 	stmdami	r8, {r0, r3}
     738:	01080009 	tsteq	r8, r9
     73c:	09485000 	stmdbeq	r8, {ip, lr}^
     740:	094a0800 	stmdbeq	sl, {fp}^
     744:	00040800 	andeq	r0, r4, r0, lsl #16
     748:	9f200070 	svcls	0x00200070
	...
     754:	080009dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp}
     758:	080009e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp}
     75c:	f4510001 			; <UNDEFINED> instruction: 0xf4510001
     760:	fc080009 	stc2	0, cr0, [r8], {9}
     764:	01080009 	tsteq	r8, r9
     768:	0a085100 	beq	214b70 <__Stack_Size+0x214770>
     76c:	0a140800 	beq	502774 <__Stack_Size+0x502374>
     770:	00010800 	andeq	r0, r1, r0, lsl #16
     774:	00000051 	andeq	r0, r0, r1, asr r0
     778:	00000000 	andeq	r0, r0, r0
     77c:	000a1400 	andeq	r1, sl, r0, lsl #8
     780:	000a2208 	andeq	r2, sl, r8, lsl #4
     784:	50000108 	andpl	r0, r0, r8, lsl #2
     788:	08000a22 	stmdaeq	r0, {r1, r5, r9, fp}
     78c:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
     790:	01f30004 	mvnseq	r0, r4
     794:	00009f50 	andeq	r9, r0, r0, asr pc
     798:	00000000 	andeq	r0, r0, r0
     79c:	0a2c0000 	beq	b007a4 <__Stack_Size+0xb003a4>
     7a0:	0a3a0800 	beq	e827a8 <__Stack_Size+0xe823a8>
     7a4:	00010800 	andeq	r0, r1, r0, lsl #16
     7a8:	000a3a50 	andeq	r3, sl, r0, asr sl
     7ac:	000a4408 	andeq	r4, sl, r8, lsl #8
     7b0:	f3000408 	vshl.u8	d0, d8, d0
     7b4:	009f5001 	addseq	r5, pc, r1
     7b8:	00000000 	andeq	r0, r0, r0
     7bc:	44000000 	strmi	r0, [r0], #-0
     7c0:	5c08000a 	stcpl	0, cr0, [r8], {10}
     7c4:	0108000a 	tsteq	r8, sl
     7c8:	0a5c5000 	beq	17147d0 <__Stack_Size+0x17143d0>
     7cc:	0a6c0800 	beq	1b027d4 <__Stack_Size+0x1b023d4>
     7d0:	00040800 	andeq	r0, r4, r0, lsl #16
     7d4:	9f5001f3 	svcls	0x005001f3
	...
     7e0:	08000a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp}
     7e4:	08000a88 	stmdaeq	r0, {r3, r7, r9, fp}
     7e8:	88500001 	ldmdahi	r0, {r0}^
     7ec:	a008000a 	andge	r0, r8, sl
     7f0:	0408000a 	streq	r0, [r8], #-10
     7f4:	5001f300 	andpl	pc, r1, r0, lsl #6
     7f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     7fc:	00000000 	andeq	r0, r0, r0
     800:	000ac000 	andeq	ip, sl, r0
     804:	000ac208 	andeq	ip, sl, r8, lsl #4
     808:	30000208 	andcc	r0, r0, r8, lsl #4
     80c:	000ac29f 	muleq	sl, pc, r2	; <UNPREDICTABLE>
     810:	000aea08 	andeq	lr, sl, r8, lsl #20
     814:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
     820:	08000b0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, fp}
     824:	08000b22 	stmdaeq	r0, {r1, r5, r8, r9, fp}
     828:	56530001 	ldrbpl	r0, [r3], -r1
     82c:	5c08000b 	stcpl	0, cr0, [r8], {11}
     830:	0108000b 	tsteq	r8, fp
     834:	0b945300 	bleq	fe51543c <BootRAM+0xd485bdd>
     838:	0bb20800 	bleq	fec82840 <BootRAM+0xdbf2fe1>
     83c:	00010800 	andeq	r0, r1, r0, lsl #16
     840:	000bba53 	andeq	fp, fp, r3, asr sl
     844:	000bcc08 	andeq	ip, fp, r8, lsl #24
     848:	53000108 	movwpl	r0, #264	; 0x108
     84c:	08000bd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, fp}
     850:	08000bda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, fp}
     854:	02530001 	subseq	r0, r3, #1
     858:	1208000c 	andne	r0, r8, #12
     85c:	0108000c 	tsteq	r8, ip
     860:	0c185300 	ldceq	3, cr5, [r8], {-0}
     864:	0c2c0800 	stceq	8, cr0, [ip], #-0
     868:	00010800 	andeq	r0, r1, r0, lsl #16
     86c:	000ca453 	andeq	sl, ip, r3, asr r4
     870:	000caa08 	andeq	sl, ip, r8, lsl #20
     874:	53000108 	movwpl	r0, #264	; 0x108
	...
     888:	00500001 	subseq	r0, r0, r1
     88c:	00000000 	andeq	r0, r0, r0
     890:	04000000 	streq	r0, [r0], #-0
     894:	5001f300 	andpl	pc, r1, r0, lsl #6
     898:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     8a8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     8b4:	01f30004 	mvnseq	r0, r4
     8b8:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     8c8:	00010000 	andeq	r0, r1, r0
     8cc:	00000050 	andeq	r0, r0, r0, asr r0
     8d0:	00000000 	andeq	r0, r0, r0
     8d4:	f3000400 	vshl.u8	d0, d0, d0
     8d8:	009f5001 	addseq	r5, pc, r1
	...
     8e8:	01000000 	mrseq	r0, (UNDEF: 0)
     8ec:	00005100 	andeq	r5, r0, r0, lsl #2
     8f0:	00000000 	andeq	r0, r0, r0
     8f4:	00040000 	andeq	r0, r4, r0
     8f8:	9f5101f3 	svcls	0x005101f3
	...
     90c:	00500001 	subseq	r0, r0, r1
     910:	00000000 	andeq	r0, r0, r0
     914:	04000000 	streq	r0, [r0], #-0
     918:	5001f300 	andpl	pc, r1, r0, lsl #6
     91c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     920:	00000000 	andeq	r0, r0, r0
     924:	000d1c00 	andeq	r1, sp, r0, lsl #24
     928:	000d1e08 	andeq	r1, sp, r8, lsl #28
     92c:	50000108 	andpl	r0, r0, r8, lsl #2
     930:	08000d1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, fp}
     934:	08000d46 	stmdaeq	r0, {r1, r2, r6, r8, sl, fp}
     938:	01f30004 	mvnseq	r0, r4
     93c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     94c:	00010000 	andeq	r0, r1, r0
     950:	00000050 	andeq	r0, r0, r0, asr r0
     954:	00000000 	andeq	r0, r0, r0
     958:	f3000400 	vshl.u8	d0, d0, d0
     95c:	009f5001 	addseq	r5, pc, r1
	...
     96c:	01000000 	mrseq	r0, (UNDEF: 0)
     970:	00005000 	andeq	r5, r0, r0
     974:	00000000 	andeq	r0, r0, r0
     978:	00040000 	andeq	r0, r4, r0
     97c:	9f5001f3 	svcls	0x005001f3
	...
     990:	00500001 	subseq	r0, r0, r1
     994:	00000000 	andeq	r0, r0, r0
     998:	04000000 	streq	r0, [r0], #-0
     99c:	5001f300 	andpl	pc, r1, r0, lsl #6
     9a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     9b0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     9bc:	01f30004 	mvnseq	r0, r4
     9c0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     9d0:	00010000 	andeq	r0, r1, r0
     9d4:	00000050 	andeq	r0, r0, r0, asr r0
     9d8:	00000000 	andeq	r0, r0, r0
     9dc:	f3000400 	vshl.u8	d0, d0, d0
     9e0:	009f5001 	addseq	r5, pc, r1
	...
     9f0:	06000000 	streq	r0, [r0], -r0
     9f4:	08007300 	stmdaeq	r0, {r8, r9, ip, sp, lr}
     9f8:	009f2730 	addseq	r2, pc, r0, lsr r7	; <UNPREDICTABLE>
     9fc:	00000000 	andeq	r0, r0, r0
     a00:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     a04:	08007300 	stmdaeq	r0, {r8, r9, ip, sp, lr}
     a08:	30082730 	andcc	r2, r8, r0, lsr r7
     a0c:	00009f27 	andeq	r9, r0, r7, lsr #30
     a10:	00000000 	andeq	r0, r0, r0
     a14:	0d460000 	stcleq	0, cr0, [r6, #-0]
     a18:	0d480800 	stcleq	8, cr0, [r8, #-0]
     a1c:	00010800 	andeq	r0, r1, r0, lsl #16
     a20:	000d4850 	andeq	r4, sp, r0, asr r8
     a24:	000d6408 	andeq	r6, sp, r8, lsl #8
     a28:	f3000408 	vshl.u8	d0, d8, d0
     a2c:	009f5001 	addseq	r5, pc, r1
     a30:	00000000 	andeq	r0, r0, r0
     a34:	5c000000 	stcpl	0, cr0, [r0], {-0}
     a38:	6008000d 	andvs	r0, r8, sp
     a3c:	0708000d 	streq	r0, [r8, -sp]
     a40:	0a007300 	beq	1d648 <__Stack_Size+0x1d248>
     a44:	9f273000 	svcls	0x00273000
     a48:	08000d60 	stmdaeq	r0, {r5, r6, r8, sl, fp}
     a4c:	08000d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp}
     a50:	0073000b 	rsbseq	r0, r3, fp
     a54:	2730000a 	ldrcs	r0, [r0, -sl]!
     a58:	2730000a 	ldrcs	r0, [r0, -sl]!
     a5c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     a6c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     a78:	01f30004 	mvnseq	r0, r4
     a7c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     a8c:	00010000 	andeq	r0, r1, r0
     a90:	00000050 	andeq	r0, r0, r0, asr r0
     a94:	00000000 	andeq	r0, r0, r0
     a98:	f3000400 	vshl.u8	d0, d0, d0
     a9c:	009f5001 	addseq	r5, pc, r1
     aa0:	00000000 	andeq	r0, r0, r0
     aa4:	64000000 	strvs	r0, [r0], #-0
     aa8:	6608000d 	strvs	r0, [r8], -sp
     aac:	0108000d 	tsteq	r8, sp
     ab0:	0d665000 	stcleq	0, cr5, [r6, #-0]
     ab4:	0d800800 	stceq	8, cr0, [r0]
     ab8:	00040800 	andeq	r0, r4, r0, lsl #16
     abc:	9f5001f3 	svcls	0x005001f3
	...
     ad0:	00500001 	subseq	r0, r0, r1
     ad4:	00000000 	andeq	r0, r0, r0
     ad8:	04000000 	streq	r0, [r0], #-0
     adc:	5001f300 	andpl	pc, r1, r0, lsl #6
     ae0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     af0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     afc:	01f30004 	mvnseq	r0, r4
     b00:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     b10:	00010000 	andeq	r0, r1, r0
     b14:	00000050 	andeq	r0, r0, r0, asr r0
     b18:	00000000 	andeq	r0, r0, r0
     b1c:	f3000400 	vshl.u8	d0, d0, d0
     b20:	009f5001 	addseq	r5, pc, r1
	...
     b30:	01000000 	mrseq	r0, (UNDEF: 0)
     b34:	00005000 	andeq	r5, r0, r0
     b38:	00000000 	andeq	r0, r0, r0
     b3c:	00040000 	andeq	r0, r4, r0
     b40:	9f5001f3 	svcls	0x005001f3
	...
     b54:	00500001 	subseq	r0, r0, r1
     b58:	00000000 	andeq	r0, r0, r0
     b5c:	04000000 	streq	r0, [r0], #-0
     b60:	5001f300 	andpl	pc, r1, r0, lsl #6
     b64:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     b74:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     b80:	01f30004 	mvnseq	r0, r4
     b84:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     b94:	00010000 	andeq	r0, r1, r0
     b98:	00000050 	andeq	r0, r0, r0, asr r0
     b9c:	00000000 	andeq	r0, r0, r0
     ba0:	f3000400 	vshl.u8	d0, d0, d0
     ba4:	009f5001 	addseq	r5, pc, r1
	...
     bb4:	01000000 	mrseq	r0, (UNDEF: 0)
     bb8:	00005000 	andeq	r5, r0, r0
     bbc:	00000000 	andeq	r0, r0, r0
     bc0:	00040000 	andeq	r0, r4, r0
     bc4:	9f5001f3 	svcls	0x005001f3
	...
     bd8:	00500001 	subseq	r0, r0, r1
     bdc:	00000000 	andeq	r0, r0, r0
     be0:	04000000 	streq	r0, [r0], #-0
     be4:	5001f300 	andpl	pc, r1, r0, lsl #6
     be8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     bec:	00000000 	andeq	r0, r0, r0
     bf0:	000d8000 	andeq	r8, sp, r0
     bf4:	000d8208 	andeq	r8, sp, r8, lsl #4
     bf8:	50000108 	andpl	r0, r0, r8, lsl #2
     bfc:	08000d82 	stmdaeq	r0, {r1, r7, r8, sl, fp}
     c00:	08000da0 	stmdaeq	r0, {r5, r7, r8, sl, fp}
     c04:	01f30004 	mvnseq	r0, r4
     c08:	00009f50 	andeq	r9, r0, r0, asr pc
     c0c:	00000000 	andeq	r0, r0, r0
     c10:	0da00000 	stceq	0, cr0, [r0]
     c14:	0da20800 	stceq	8, cr0, [r2]
     c18:	00010800 	andeq	r0, r1, r0, lsl #16
     c1c:	000da250 	andeq	sl, sp, r0, asr r2
     c20:	000dc008 	andeq	ip, sp, r8
     c24:	f3000408 	vshl.u8	d0, d8, d0
     c28:	009f5001 	addseq	r5, pc, r1
	...
     c38:	01000000 	mrseq	r0, (UNDEF: 0)
     c3c:	00005000 	andeq	r5, r0, r0
     c40:	00000000 	andeq	r0, r0, r0
     c44:	00040000 	andeq	r0, r4, r0
     c48:	9f5001f3 	svcls	0x005001f3
	...
     c5c:	00510001 	subseq	r0, r1, r1
     c60:	00000000 	andeq	r0, r0, r0
     c64:	04000000 	streq	r0, [r0], #-0
     c68:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     c6c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     c7c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     c88:	01f30004 	mvnseq	r0, r4
     c8c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     c9c:	00010000 	andeq	r0, r1, r0
     ca0:	00000050 	andeq	r0, r0, r0, asr r0
     ca4:	00000000 	andeq	r0, r0, r0
     ca8:	f3000400 	vshl.u8	d0, d0, d0
     cac:	009f5001 	addseq	r5, pc, r1
	...
     cbc:	01000000 	mrseq	r0, (UNDEF: 0)
     cc0:	00005100 	andeq	r5, r0, r0, lsl #2
     cc4:	00000000 	andeq	r0, r0, r0
     cc8:	00040000 	andeq	r0, r4, r0
     ccc:	9f5101f3 	svcls	0x005101f3
	...
     ce0:	00500001 	subseq	r0, r0, r1
     ce4:	00000000 	andeq	r0, r0, r0
     ce8:	04000000 	streq	r0, [r0], #-0
     cec:	5001f300 	andpl	pc, r1, r0, lsl #6
     cf0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     d00:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     d0c:	01f30004 	mvnseq	r0, r4
     d10:	00009f51 	andeq	r9, r0, r1, asr pc
     d14:	00000000 	andeq	r0, r0, r0
     d18:	0dc00000 	stcleq	0, cr0, [r0]
     d1c:	0dca0800 	stcleq	8, cr0, [sl]
     d20:	00010800 	andeq	r0, r1, r0, lsl #16
     d24:	000dca50 	andeq	ip, sp, r0, asr sl
     d28:	000ddc08 	andeq	sp, sp, r8, lsl #24
     d2c:	f3000408 	vshl.u8	d0, d8, d0
     d30:	009f5001 	addseq	r5, pc, r1
     d34:	00000000 	andeq	r0, r0, r0
     d38:	dc000000 	stcle	0, cr0, [r0], {-0}
     d3c:	e608000d 	str	r0, [r8], -sp
     d40:	0108000d 	tsteq	r8, sp
     d44:	0de65000 	stcleq	0, cr5, [r6]
     d48:	0df80800 	ldcleq	8, cr0, [r8]
     d4c:	00040800 	andeq	r0, r4, r0, lsl #16
     d50:	9f5001f3 	svcls	0x005001f3
	...
     d5c:	08000df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp}
     d60:	08000e02 	stmdaeq	r0, {r1, r9, sl, fp}
     d64:	02500001 	subseq	r0, r0, #1
     d68:	1408000e 	strne	r0, [r8], #-14
     d6c:	0408000e 	streq	r0, [r8], #-14
     d70:	5001f300 	andpl	pc, r1, r0, lsl #6
     d74:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     d84:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     d90:	01f30004 	mvnseq	r0, r4
     d94:	00009f51 	andeq	r9, r0, r1, asr pc
     d98:	00000000 	andeq	r0, r0, r0
     d9c:	00010000 	andeq	r0, r1, r0
     da0:	00000051 	andeq	r0, r0, r1, asr r0
     da4:	00000000 	andeq	r0, r0, r0
     da8:	f3000400 	vshl.u8	d0, d0, d0
     dac:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     dbc:	01000000 	mrseq	r0, (UNDEF: 0)
     dc0:	00005300 	andeq	r5, r0, r0, lsl #6
     dc4:	00000000 	andeq	r0, r0, r0
     dc8:	00010000 	andeq	r0, r1, r0
     dcc:	00000053 	andeq	r0, r0, r3, asr r0
     dd0:	00000000 	andeq	r0, r0, r0
     dd4:	53000100 	movwpl	r0, #256	; 0x100
	...
     de0:	08000e14 	stmdaeq	r0, {r2, r4, r9, sl, fp}
     de4:	08000e20 	stmdaeq	r0, {r5, r9, sl, fp}
     de8:	20500001 	subscs	r0, r0, r1
     dec:	5408000e 	strpl	r0, [r8], #-14
     df0:	0408000e 	streq	r0, [r8], #-14
     df4:	5001f300 	andpl	pc, r1, r0, lsl #6
     df8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     dfc:	00000000 	andeq	r0, r0, r0
     e00:	000e1400 	andeq	r1, lr, r0, lsl #8
     e04:	000e4208 	andeq	r4, lr, r8, lsl #4
     e08:	51000108 	tstpl	r0, r8, lsl #2
     e0c:	08000e42 	stmdaeq	r0, {r1, r6, r9, sl, fp}
     e10:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
     e14:	01f30004 	mvnseq	r0, r4
     e18:	00009f51 	andeq	r9, r0, r1, asr pc
     e1c:	00000000 	andeq	r0, r0, r0
     e20:	0e2c0000 	cdpeq	0, 2, cr0, cr12, cr0, {0}
     e24:	0e340800 	cdpeq	8, 3, cr0, cr4, cr0, {0}
     e28:	00010800 	andeq	r0, r1, r0, lsl #16
     e2c:	000e3453 	andeq	r3, lr, r3, asr r4
     e30:	000e3608 	andeq	r3, lr, r8, lsl #12
     e34:	71000508 	tstvc	r0, r8, lsl #10
     e38:	9f253500 	svcls	0x00253500
     e3c:	08000e36 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, fp}
     e40:	08000e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp}
     e44:	40530001 	subsmi	r0, r3, r1
     e48:	4808000e 	stmdami	r8, {r1, r2, r3}
     e4c:	0108000e 	tsteq	r8, lr
     e50:	00005300 	andeq	r5, r0, r0, lsl #6
	...
     e60:	00010000 	andeq	r0, r1, r0
     e64:	00000050 	andeq	r0, r0, r0, asr r0
     e68:	00000000 	andeq	r0, r0, r0
     e6c:	f3000400 	vshl.u8	d0, d0, d0
     e70:	009f5001 	addseq	r5, pc, r1
	...
     e80:	01000000 	mrseq	r0, (UNDEF: 0)
     e84:	00005000 	andeq	r5, r0, r0
     e88:	00000000 	andeq	r0, r0, r0
     e8c:	00040000 	andeq	r0, r4, r0
     e90:	9f5001f3 	svcls	0x005001f3
	...
     ea4:	00500001 	subseq	r0, r0, r1
     ea8:	00000000 	andeq	r0, r0, r0
     eac:	04000000 	streq	r0, [r0], #-0
     eb0:	5001f300 	andpl	pc, r1, r0, lsl #6
     eb4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     ec4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     ed0:	01f30004 	mvnseq	r0, r4
     ed4:	00009f51 	andeq	r9, r0, r1, asr pc
	...
     ee4:	00010000 	andeq	r0, r1, r0
     ee8:	00000052 	andeq	r0, r0, r2, asr r0
     eec:	00000000 	andeq	r0, r0, r0
     ef0:	f3000400 	vshl.u8	d0, d0, d0
     ef4:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
     f04:	01000000 	mrseq	r0, (UNDEF: 0)
     f08:	00005000 	andeq	r5, r0, r0
     f0c:	00000000 	andeq	r0, r0, r0
     f10:	00040000 	andeq	r0, r4, r0
     f14:	9f5001f3 	svcls	0x005001f3
	...
     f28:	00510001 	subseq	r0, r1, r1
     f2c:	00000000 	andeq	r0, r0, r0
     f30:	04000000 	streq	r0, [r0], #-0
     f34:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     f38:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     f48:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     f54:	01f30004 	mvnseq	r0, r4
     f58:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     f68:	00010000 	andeq	r0, r1, r0
     f6c:	00000051 	andeq	r0, r0, r1, asr r0
     f70:	00000000 	andeq	r0, r0, r0
     f74:	f3000400 	vshl.u8	d0, d0, d0
     f78:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     f88:	01000000 	mrseq	r0, (UNDEF: 0)
     f8c:	00005000 	andeq	r5, r0, r0
     f90:	00000000 	andeq	r0, r0, r0
     f94:	00040000 	andeq	r0, r4, r0
     f98:	9f5001f3 	svcls	0x005001f3
	...
     fac:	00500001 	subseq	r0, r0, r1
     fb0:	00000000 	andeq	r0, r0, r0
     fb4:	04000000 	streq	r0, [r0], #-0
     fb8:	5001f300 	andpl	pc, r1, r0, lsl #6
     fbc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     fcc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     fd8:	01f30004 	mvnseq	r0, r4
     fdc:	00009f50 	andeq	r9, r0, r0, asr pc
     fe0:	00000000 	andeq	r0, r0, r0
     fe4:	00010000 	andeq	r0, r1, r0
     fe8:	00000050 	andeq	r0, r0, r0, asr r0
     fec:	00000000 	andeq	r0, r0, r0
     ff0:	f3000400 	vshl.u8	d0, d0, d0
     ff4:	009f5001 	addseq	r5, pc, r1
     ff8:	00000000 	andeq	r0, r0, r0
     ffc:	01000000 	mrseq	r0, (UNDEF: 0)
    1000:	00005000 	andeq	r5, r0, r0
	...
    1010:	00010000 	andeq	r0, r1, r0
    1014:	00000051 	andeq	r0, r0, r1, asr r0
    1018:	00000000 	andeq	r0, r0, r0
    101c:	f3000400 	vshl.u8	d0, d0, d0
    1020:	009f5101 	addseq	r5, pc, r1, lsl #2
    1024:	00000000 	andeq	r0, r0, r0
    1028:	01000000 	mrseq	r0, (UNDEF: 0)
    102c:	00005100 	andeq	r5, r0, r0, lsl #2
    1030:	00000000 	andeq	r0, r0, r0
    1034:	00040000 	andeq	r0, r4, r0
    1038:	9f5101f3 	svcls	0x005101f3
	...
    1044:	00510001 	subseq	r0, r1, r1
	...
    1054:	01000000 	mrseq	r0, (UNDEF: 0)
    1058:	00005200 	andeq	r5, r0, r0, lsl #4
    105c:	00000000 	andeq	r0, r0, r0
    1060:	00040000 	andeq	r0, r4, r0
    1064:	9f5201f3 	svcls	0x005201f3
	...
    1070:	00520001 	subseq	r0, r2, r1
	...
    1080:	01000000 	mrseq	r0, (UNDEF: 0)
    1084:	00005100 	andeq	r5, r0, r0, lsl #2
    1088:	00000000 	andeq	r0, r0, r0
    108c:	00010000 	andeq	r0, r1, r0
    1090:	00000051 	andeq	r0, r0, r1, asr r0
	...
    10a0:	53000100 	movwpl	r0, #256	; 0x100
	...
    10ac:	00720005 	rsbseq	r0, r2, r5
    10b0:	009f2535 	addseq	r2, pc, r5, lsr r5	; <UNPREDICTABLE>
    10b4:	00000000 	andeq	r0, r0, r0
    10b8:	01000000 	mrseq	r0, (UNDEF: 0)
    10bc:	00005300 	andeq	r5, r0, r0, lsl #6
    10c0:	00000000 	andeq	r0, r0, r0
    10c4:	00010000 	andeq	r0, r1, r0
    10c8:	00000053 	andeq	r0, r0, r3, asr r0
	...
    10d8:	53000100 	movwpl	r0, #256	; 0x100
	...
    10e4:	00530001 	subseq	r0, r3, r1
	...
    10f4:	01000000 	mrseq	r0, (UNDEF: 0)
    10f8:	00005100 	andeq	r5, r0, r0, lsl #2
    10fc:	00000000 	andeq	r0, r0, r0
    1100:	00050000 	andeq	r0, r5, r0
    1104:	25350072 	ldrcs	r0, [r5, #-114]!	; 0x72
    1108:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    110c:	00000000 	andeq	r0, r0, r0
    1110:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    111c:	00510001 	subseq	r0, r1, r1
	...
    112c:	01000000 	mrseq	r0, (UNDEF: 0)
    1130:	00005000 	andeq	r5, r0, r0
    1134:	00000000 	andeq	r0, r0, r0
    1138:	00040000 	andeq	r0, r4, r0
    113c:	9f5001f3 	svcls	0x005001f3
	...
    1148:	00500001 	subseq	r0, r0, r1
    114c:	00000000 	andeq	r0, r0, r0
    1150:	04000000 	streq	r0, [r0], #-0
    1154:	5001f300 	andpl	pc, r1, r0, lsl #6
    1158:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1168:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1174:	01f30004 	mvnseq	r0, r4
    1178:	00009f51 	andeq	r9, r0, r1, asr pc
    117c:	00000000 	andeq	r0, r0, r0
    1180:	00010000 	andeq	r0, r1, r0
    1184:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1194:	52000100 	andpl	r0, r0, #0, 2
	...
    11a0:	01f30004 	mvnseq	r0, r4
    11a4:	00009f52 	andeq	r9, r0, r2, asr pc
    11a8:	00000000 	andeq	r0, r0, r0
    11ac:	00010000 	andeq	r0, r1, r0
    11b0:	00000052 	andeq	r0, r0, r2, asr r0
	...
    11c0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    11d4:	00530001 	subseq	r0, r3, r1
    11d8:	00000000 	andeq	r0, r0, r0
    11dc:	05000000 	streq	r0, [r0, #-0]
    11e0:	35007200 	strcc	r7, [r0, #-512]	; 0x200
    11e4:	00009f25 	andeq	r9, r0, r5, lsr #30
    11e8:	00000000 	andeq	r0, r0, r0
    11ec:	00010000 	andeq	r0, r1, r0
    11f0:	00000053 	andeq	r0, r0, r3, asr r0
    11f4:	00000000 	andeq	r0, r0, r0
    11f8:	53000100 	movwpl	r0, #256	; 0x100
	...
    120c:	00500001 	subseq	r0, r0, r1
    1210:	00000000 	andeq	r0, r0, r0
    1214:	04000000 	streq	r0, [r0], #-0
    1218:	5001f300 	andpl	pc, r1, r0, lsl #6
    121c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1220:	00000000 	andeq	r0, r0, r0
    1224:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1230:	01f30004 	mvnseq	r0, r4
    1234:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    1244:	00010000 	andeq	r0, r1, r0
    1248:	00000051 	andeq	r0, r0, r1, asr r0
    124c:	00000000 	andeq	r0, r0, r0
    1250:	f3000400 	vshl.u8	d0, d0, d0
    1254:	009f5101 	addseq	r5, pc, r1, lsl #2
    1258:	00000000 	andeq	r0, r0, r0
    125c:	01000000 	mrseq	r0, (UNDEF: 0)
    1260:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    1270:	00010000 	andeq	r0, r1, r0
    1274:	00000052 	andeq	r0, r0, r2, asr r0
    1278:	00000000 	andeq	r0, r0, r0
    127c:	f3000400 	vshl.u8	d0, d0, d0
    1280:	009f5201 	addseq	r5, pc, r1, lsl #4
    1284:	00000000 	andeq	r0, r0, r0
    1288:	01000000 	mrseq	r0, (UNDEF: 0)
    128c:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    129c:	00010000 	andeq	r0, r1, r0
    12a0:	00000051 	andeq	r0, r0, r1, asr r0
	...
    12b0:	53000100 	movwpl	r0, #256	; 0x100
	...
    12bc:	00720005 	rsbseq	r0, r2, r5
    12c0:	009f2535 	addseq	r2, pc, r5, lsr r5	; <UNPREDICTABLE>
    12c4:	00000000 	andeq	r0, r0, r0
    12c8:	01000000 	mrseq	r0, (UNDEF: 0)
    12cc:	00005300 	andeq	r5, r0, r0, lsl #6
    12d0:	00000000 	andeq	r0, r0, r0
    12d4:	00010000 	andeq	r0, r1, r0
    12d8:	00000053 	andeq	r0, r0, r3, asr r0
	...
    12e8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    12f4:	01f30004 	mvnseq	r0, r4
    12f8:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    1308:	00010000 	andeq	r0, r1, r0
    130c:	00000050 	andeq	r0, r0, r0, asr r0
    1310:	00000000 	andeq	r0, r0, r0
    1314:	f3000400 	vshl.u8	d0, d0, d0
    1318:	009f5001 	addseq	r5, pc, r1
	...
    1328:	01000000 	mrseq	r0, (UNDEF: 0)
    132c:	00005000 	andeq	r5, r0, r0
    1330:	00000000 	andeq	r0, r0, r0
    1334:	00040000 	andeq	r0, r4, r0
    1338:	9f5001f3 	svcls	0x005001f3
	...
    134c:	00500001 	subseq	r0, r0, r1
    1350:	00000000 	andeq	r0, r0, r0
    1354:	04000000 	streq	r0, [r0], #-0
    1358:	5001f300 	andpl	pc, r1, r0, lsl #6
    135c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1360:	00000000 	andeq	r0, r0, r0
    1364:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1370:	01f30004 	mvnseq	r0, r4
    1374:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    1384:	00010000 	andeq	r0, r1, r0
    1388:	00000050 	andeq	r0, r0, r0, asr r0
    138c:	00000000 	andeq	r0, r0, r0
    1390:	f3000400 	vshl.u8	d0, d0, d0
    1394:	009f5001 	addseq	r5, pc, r1
	...
    13a4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    13a8:	08007000 	stmdaeq	r0, {ip, sp, lr}
    13ac:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    13b0:	ff080071 			; <UNDEFINED> instruction: 0xff080071
    13b4:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    13b8:	00000000 	andeq	r0, r0, r0
    13bc:	0f000000 	svceq	0x00000000
    13c0:	5001f300 	andpl	pc, r1, r0, lsl #6
    13c4:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    13c8:	08007124 	stmdaeq	r0, {r2, r5, r8, ip, sp, lr}
    13cc:	9f211aff 	svcls	0x00211aff
	...
    13e0:	00500001 	subseq	r0, r0, r1
    13e4:	00000000 	andeq	r0, r0, r0
    13e8:	04000000 	streq	r0, [r0], #-0
    13ec:	5001f300 	andpl	pc, r1, r0, lsl #6
    13f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1400:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1414:	0070000d 	rsbseq	r0, r0, sp
    1418:	00702538 	rsbseq	r2, r0, r8, lsr r5
    141c:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    1420:	009f2124 	addseq	r2, pc, r4, lsr #2
    1424:	00000000 	andeq	r0, r0, r0
    1428:	56000000 	strpl	r0, [r0], -r0
    142c:	bc08000e 	stclt	0, cr0, [r8], {14}
    1430:	0208000e 	andeq	r0, r8, #14
    1434:	bc9f3000 	ldclt	0, cr3, [pc], {0}
    1438:	c008000e 	andgt	r0, r8, lr
    143c:	0708000e 	streq	r0, [r8, -lr]
    1440:	0a007300 	beq	1e048 <__Stack_Size+0x1dc48>
    1444:	9f1affff 	svcls	0x001affff
    1448:	08000ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp}
    144c:	08000eda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl, fp}
    1450:	00730007 	rsbseq	r0, r3, r7
    1454:	1affff0a 	bne	1084 <__Stack_Size+0xc84>
    1458:	000ee49f 	muleq	lr, pc, r4	; <UNPREDICTABLE>
    145c:	000eee08 	andeq	lr, lr, r8, lsl #28
    1460:	73000708 	movwvc	r0, #1800	; 0x708
    1464:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    1468:	0f3a9f1a 	svceq	0x003a9f1a
    146c:	0f460800 	svceq	0x00460800
    1470:	00020800 	andeq	r0, r2, r0, lsl #16
    1474:	0f469f30 	svceq	0x00469f30
    1478:	0f860800 	svceq	0x00860800
    147c:	00070800 	andeq	r0, r7, r0, lsl #16
    1480:	ff0a0075 			; <UNDEFINED> instruction: 0xff0a0075
    1484:	869f1aff 			; <UNDEFINED> instruction: 0x869f1aff
    1488:	a808000f 	stmdage	r8, {r0, r1, r2, r3}
    148c:	0208000f 	andeq	r0, r8, #15
    1490:	009f3000 	addseq	r3, pc, r0
    1494:	00000000 	andeq	r0, r0, r0
    1498:	9c000000 	stcls	0, cr0, [r0], {-0}
    149c:	a008000e 	andge	r0, r8, lr
    14a0:	0708000e 	streq	r0, [r8, -lr]
    14a4:	0a007200 	beq	1dcac <__Stack_Size+0x1d8ac>
    14a8:	9f272000 	svcls	0x00272000
    14ac:	08000ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp}
    14b0:	08000ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp}
    14b4:	0072000b 	rsbseq	r0, r2, fp
    14b8:	2720000a 	strcs	r0, [r0, -sl]!
    14bc:	2720000a 	strcs	r0, [r0, -sl]!
    14c0:	000ea49f 	muleq	lr, pc, r4	; <UNPREDICTABLE>
    14c4:	000eb408 	andeq	fp, lr, r8, lsl #8
    14c8:	74000c08 	strvc	r0, [r0], #-3080	; 0xc08
    14cc:	000a0600 	andeq	r0, sl, r0, lsl #12
    14d0:	000a2720 	andeq	r2, sl, r0, lsr #14
    14d4:	009f2720 	addseq	r2, pc, r0, lsr #14
    14d8:	00000000 	andeq	r0, r0, r0
    14dc:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    14e0:	b208000e 	andlt	r0, r8, #14
    14e4:	0608000e 	streq	r0, [r8], -lr
    14e8:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    14ec:	b29f2720 	addslt	r2, pc, #32, 14	; 0x800000
    14f0:	c208000e 	andgt	r0, r8, #14
    14f4:	0908000e 	stmdbeq	r8, {r1, r2, r3}
    14f8:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    14fc:	20082720 	andcs	r2, r8, r0, lsr #14
    1500:	0ec29f27 	cdpeq	15, 12, cr9, cr2, cr7, {1}
    1504:	0eca0800 	cdpeq	8, 12, cr0, cr10, cr0, {0}
    1508:	000a0800 	andeq	r0, sl, r0, lsl #16
    150c:	08060074 	stmdaeq	r6, {r2, r4, r5, r6}
    1510:	20082720 	andcs	r2, r8, r0, lsr #14
    1514:	0ed09f27 	cdpeq	15, 13, cr9, cr0, cr7, {1}
    1518:	0ed20800 	cdpeq	8, 13, cr0, cr2, cr0, {0}
    151c:	00090800 	andeq	r0, r9, r0, lsl #16
    1520:	20080072 	andcs	r0, r8, r2, ror r0
    1524:	27200827 	strcs	r0, [r0, -r7, lsr #16]!
    1528:	000ed29f 	muleq	lr, pc, r2	; <UNPREDICTABLE>
    152c:	000ede08 	andeq	sp, lr, r8, lsl #28
    1530:	74000a08 	strvc	r0, [r0], #-2568	; 0xa08
    1534:	20080600 	andcs	r0, r8, r0, lsl #12
    1538:	27200827 	strcs	r0, [r0, -r7, lsr #16]!
    153c:	000ee49f 	muleq	lr, pc, r4	; <UNPREDICTABLE>
    1540:	000ef208 	andeq	pc, lr, r8, lsl #4
    1544:	74000a08 	strvc	r0, [r0], #-2568	; 0xa08
    1548:	20080600 	andcs	r0, r8, r0, lsl #12
    154c:	27200827 	strcs	r0, [r0, -r7, lsr #16]!
    1550:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1554:	00000000 	andeq	r0, r0, r0
    1558:	000f0400 	andeq	r0, pc, r0, lsl #8
    155c:	000f1a08 	andeq	r1, pc, r8, lsl #20
    1560:	53000108 	movwpl	r0, #264	; 0x108
    1564:	08000f1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, fp}
    1568:	08000f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp}
    156c:	00720004 	rsbseq	r0, r2, r4
    1570:	00009f06 	andeq	r9, r0, r6, lsl #30
    1574:	00000000 	andeq	r0, r0, r0
    1578:	0f260000 	svceq	0x00260000
    157c:	0f3a0800 	svceq	0x003a0800
    1580:	00010800 	andeq	r0, r1, r0, lsl #16
    1584:	00000053 	andeq	r0, r0, r3, asr r0
	...
    1594:	30000200 	andcc	r0, r0, r0, lsl #4
    1598:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    159c:	00000000 	andeq	r0, r0, r0
    15a0:	71000700 	tstvc	r0, r0, lsl #14
    15a4:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    15a8:	00009f1a 	andeq	r9, r0, sl, lsl pc
    15ac:	00000000 	andeq	r0, r0, r0
    15b0:	00070000 	andeq	r0, r7, r0
    15b4:	ff0a0071 			; <UNDEFINED> instruction: 0xff0a0071
    15b8:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    15bc:	00000000 	andeq	r0, r0, r0
    15c0:	02000000 	andeq	r0, r0, #0
    15c4:	009f3000 	addseq	r3, pc, r0
    15c8:	00000000 	andeq	r0, r0, r0
    15cc:	e0000000 	and	r0, r0, r0
    15d0:	f508000f 			; <UNDEFINED> instruction: 0xf508000f
    15d4:	0108000f 	tsteq	r8, pc
    15d8:	0ff55000 	svceq	0x00f55000
    15dc:	10040800 	andne	r0, r4, r0, lsl #16
    15e0:	00040800 	andeq	r0, r4, r0, lsl #16
    15e4:	9f5001f3 	svcls	0x005001f3
	...
    15f0:	08001004 	stmdaeq	r0, {r2, ip}
    15f4:	08001019 	stmdaeq	r0, {r0, r3, r4, ip}
    15f8:	19500001 	ldmdbne	r0, {r0}^
    15fc:	28080010 	stmdacs	r8, {r4}
    1600:	04080010 	streq	r0, [r8], #-16
    1604:	5001f300 	andpl	pc, r1, r0, lsl #6
    1608:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    160c:	00000000 	andeq	r0, r0, r0
    1610:	00102800 	andseq	r2, r0, r0, lsl #16
    1614:	00103c08 	andseq	r3, r0, r8, lsl #24
    1618:	50000108 	andpl	r0, r0, r8, lsl #2
    161c:	0800103c 	stmdaeq	r0, {r2, r3, r4, r5, ip}
    1620:	080010b8 	stmdaeq	r0, {r3, r4, r5, r7, ip}
    1624:	01f30004 	mvnseq	r0, r4
    1628:	00009f50 	andeq	r9, r0, r0, asr pc
    162c:	00000000 	andeq	r0, r0, r0
    1630:	104a0000 	subne	r0, sl, r0
    1634:	104c0800 	subne	r0, ip, r0, lsl #16
    1638:	00020800 	andeq	r0, r2, r0, lsl #16
    163c:	00000971 	andeq	r0, r0, r1, ror r9
    1640:	00000000 	andeq	r0, r0, r0
    1644:	10720000 	rsbsne	r0, r2, r0
    1648:	10740800 	rsbsne	r0, r4, r0, lsl #16
    164c:	00010800 	andeq	r0, r1, r0, lsl #16
    1650:	00107452 	andseq	r7, r0, r2, asr r4
    1654:	00108e08 	andseq	r8, r0, r8, lsl #28
    1658:	71000508 	tstvc	r0, r8, lsl #10
    165c:	9f1a3f00 	svcls	0x001a3f00
    1660:	08001092 	stmdaeq	r0, {r1, r4, r7, ip}
    1664:	0800109c 	stmdaeq	r0, {r2, r3, r4, r7, ip}
    1668:	00710005 	rsbseq	r0, r1, r5
    166c:	009f1a3f 	addseq	r1, pc, pc, lsr sl	; <UNPREDICTABLE>
    1670:	00000000 	andeq	r0, r0, r0
    1674:	c0000000 	andgt	r0, r0, r0
    1678:	46080010 			; <UNDEFINED> instruction: 0x46080010
    167c:	03080011 	movweq	r0, #32785	; 0x8011
    1680:	9f107400 	svcls	0x00107400
	...
    168c:	080010c4 	stmdaeq	r0, {r2, r6, r7, ip}
    1690:	080010ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, ip}
    1694:	ee530001 	cdp	0, 5, cr0, cr3, cr1, {0}
    1698:	f4080010 	vst4.8	{d0-d3}, [r8 :64], r0
    169c:	09080010 	stmdbeq	r8, {r4}
    16a0:	94107400 	ldrls	r7, [r0], #-1024	; 0x400
    16a4:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    16a8:	10f49f1a 	rscsne	r9, r4, sl, lsl pc
    16ac:	11080800 	tstne	r8, r0, lsl #16
    16b0:	00010800 	andeq	r0, r1, r0, lsl #16
    16b4:	00110853 	andseq	r0, r1, r3, asr r8
    16b8:	00110908 	andseq	r0, r1, r8, lsl #18
    16bc:	74000908 	strvc	r0, [r0], #-2312	; 0x908
    16c0:	0a029410 	beq	a6708 <__Stack_Size+0xa6308>
    16c4:	9f1affff 	svcls	0x001affff
	...
    16d0:	080010c6 	stmdaeq	r0, {r1, r2, r6, r7, ip}
    16d4:	080010e8 	stmdaeq	r0, {r3, r5, r6, r7, ip}
    16d8:	00760006 	rsbseq	r0, r6, r6
    16dc:	9f1aff08 	svcls	0x001aff08
    16e0:	080010e8 	stmdaeq	r0, {r3, r5, r6, r7, ip}
    16e4:	080010ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, ip}
    16e8:	9f340002 	svcls	0x00340002
    16ec:	080010ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, ip}
    16f0:	080010f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, ip}
    16f4:	9f370002 	svcls	0x00370002
    16f8:	080010f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, ip}
    16fc:	080010fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, ip}
    1700:	00760006 	rsbseq	r0, r6, r6
    1704:	9f1aff08 	svcls	0x001aff08
    1708:	080010fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, ip}
    170c:	08001146 	stmdaeq	r0, {r1, r2, r6, r8, ip}
    1710:	00560001 	subseq	r0, r6, r1
    1714:	00000000 	andeq	r0, r0, r0
    1718:	0c000000 	stceq	0, cr0, [r0], {-0}
    171c:	0e080011 	mcreq	0, 0, r0, cr8, cr1, {0}
    1720:	01080011 	tsteq	r8, r1, lsl r0
    1724:	110e5000 	mrsne	r5, (UNDEF: 14)
    1728:	113c0800 	teqne	ip, r0, lsl #16
    172c:	00010800 	andeq	r0, r1, r0, lsl #16
    1730:	00000059 	andeq	r0, r0, r9, asr r0
    1734:	00000000 	andeq	r0, r0, r0
    1738:	0010f600 	andseq	pc, r0, r0, lsl #12
    173c:	0010fe08 	andseq	pc, r0, r8, lsl #28
    1740:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    1744:	080010fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, ip}
    1748:	08001104 	stmdaeq	r0, {r2, r8, ip}
    174c:	00750016 	rsbseq	r0, r5, r6, lsl r0
    1750:	244b4012 	strbcs	r4, [fp], #-18
    1754:	16007322 	strne	r7, [r0], -r2, lsr #6
    1758:	244b4014 	strbcs	r4, [fp], #-20
    175c:	01282d22 	teqeq	r8, r2, lsr #26
    1760:	9f131600 	svcls	0x00131600
    1764:	08001104 	stmdaeq	r0, {r2, r8, ip}
    1768:	08001132 	stmdaeq	r0, {r1, r4, r5, r8, ip}
    176c:	00550001 	subseq	r0, r5, r1
    1770:	00000000 	andeq	r0, r0, r0
    1774:	aa000000 	bge	177c <__Stack_Size+0x137c>
    1778:	c1080011 	tstgt	r8, r1, lsl r0
    177c:	01080011 	tsteq	r8, r1, lsl r0
    1780:	11d05000 	bicsne	r5, r0, r0
    1784:	11d20800 	bicsne	r0, r2, r0, lsl #16
    1788:	00010800 	andeq	r0, r1, r0, lsl #16
    178c:	00000050 	andeq	r0, r0, r0, asr r0
    1790:	00000000 	andeq	r0, r0, r0
    1794:	0011e800 	andseq	lr, r1, r0, lsl #16
    1798:	0011ec08 	andseq	lr, r1, r8, lsl #24
    179c:	70000608 	andvc	r0, r0, r8, lsl #12
    17a0:	1a7f0800 	bne	1fc37a8 <__Stack_Size+0x1fc33a8>
    17a4:	0011ec9f 	mulseq	r1, pc, ip	; <UNPREDICTABLE>
    17a8:	00121008 	andseq	r1, r2, r8
    17ac:	50000108 	andpl	r0, r0, r8, lsl #2
    17b0:	08001210 	stmdaeq	r0, {r4, r9, ip}
    17b4:	08001236 	stmdaeq	r0, {r1, r2, r4, r5, r9, ip}
    17b8:	0073000b 	rsbseq	r0, r3, fp
    17bc:	7f080194 	svcvc	0x00080194
    17c0:	1aff081a 	bne	fffc3830 <BootRAM+0xef33fd1>
    17c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    17c8:	00000000 	andeq	r0, r0, r0
    17cc:	00122800 	andseq	r2, r2, r0, lsl #16
    17d0:	00125508 	andseq	r5, r2, r8, lsl #10
    17d4:	51000108 	tstpl	r0, r8, lsl #2
    17d8:	08001260 	stmdaeq	r0, {r5, r6, r9, ip}
    17dc:	08001272 	stmdaeq	r0, {r1, r4, r5, r6, r9, ip}
    17e0:	78510001 	ldmdavc	r1, {r0}^
    17e4:	7b080012 	blvc	201834 <__Stack_Size+0x201434>
    17e8:	01080012 	tsteq	r8, r2, lsl r0
    17ec:	00005100 	andeq	r5, r0, r0, lsl #2
    17f0:	00000000 	andeq	r0, r0, r0
    17f4:	12100000 	andsne	r0, r0, #0
    17f8:	12520800 	subsne	r0, r2, #0, 16
    17fc:	00010800 	andeq	r0, r1, r0, lsl #16
    1800:	00126050 	andseq	r6, r2, r0, asr r0
    1804:	00127508 	andseq	r7, r2, r8, lsl #10
    1808:	50000108 	andpl	r0, r0, r8, lsl #2
    180c:	08001278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip}
    1810:	0800127b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r9, ip}
    1814:	00500001 	subseq	r0, r0, r1
    1818:	00000000 	andeq	r0, r0, r0
    181c:	0a000000 	beq	1824 <__Stack_Size+0x1424>
    1820:	42080012 	andmi	r0, r8, #18
    1824:	06080012 			; <UNDEFINED> instruction: 0x06080012
    1828:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    182c:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    1830:	00000000 	andeq	r0, r0, r0
    1834:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    1838:	8c080012 	stchi	0, cr0, [r8], {18}
    183c:	07080012 	smladeq	r8, r2, r0, r0
    1840:	0a007300 	beq	1e448 <__Stack_Size+0x1e048>
    1844:	9f273000 	svcls	0x00273000
    1848:	0800128c 	stmdaeq	r0, {r2, r3, r7, r9, ip}
    184c:	0800128e 	stmdaeq	r0, {r1, r2, r3, r7, r9, ip}
    1850:	0073000b 	rsbseq	r0, r3, fp
    1854:	2730000a 	ldrcs	r0, [r0, -sl]!
    1858:	2730000a 	ldrcs	r0, [r0, -sl]!
    185c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1860:	00000000 	andeq	r0, r0, r0
    1864:	0012bc00 	andseq	fp, r2, r0, lsl #24
    1868:	0012f608 	andseq	pc, r2, r8, lsl #12
    186c:	72000608 	andvc	r0, r0, #8, 12	; 0x800000
    1870:	1aff0800 	bne	fffc3878 <BootRAM+0xef34019>
    1874:	0013249f 	mulseq	r3, pc, r4	; <UNPREDICTABLE>
    1878:	00133408 	andseq	r3, r3, r8, lsl #8
    187c:	72000608 	andvc	r0, r0, #8, 12	; 0x800000
    1880:	1aff0800 	bne	fffc3888 <BootRAM+0xef34029>
    1884:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1888:	00000000 	andeq	r0, r0, r0
    188c:	0012c000 	andseq	ip, r2, r0
    1890:	0012e008 	andseq	lr, r2, r8
    1894:	54000108 	strpl	r0, [r0], #-264	; 0x108
    1898:	080012e0 	stmdaeq	r0, {r5, r6, r7, r9, ip}
    189c:	080012f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, ip}
    18a0:	00720007 	rsbseq	r0, r2, r7
    18a4:	1aff7f0b 	bne	fffe14d8 <BootRAM+0xef51c79>
    18a8:	0013249f 	mulseq	r3, pc, r4	; <UNPREDICTABLE>
    18ac:	00133408 	andseq	r3, r3, r8, lsl #8
    18b0:	72000708 	andvc	r0, r0, #8, 14	; 0x200000
    18b4:	ff7f0b00 			; <UNDEFINED> instruction: 0xff7f0b00
    18b8:	00009f1a 	andeq	r9, r0, sl, lsl pc
    18bc:	00000000 	andeq	r0, r0, r0
    18c0:	12d60000 	sbcsne	r0, r6, #0
    18c4:	131f0800 	tstne	pc, #0, 16
    18c8:	00010800 	andeq	r0, r1, r0, lsl #16
    18cc:	00132450 	andseq	r2, r3, r0, asr r4
    18d0:	00132608 	andseq	r2, r3, r8, lsl #12
    18d4:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    18e0:	08001302 	stmdaeq	r0, {r1, r8, r9, ip}
    18e4:	08001306 	stmdaeq	r0, {r1, r2, r8, r9, ip}
    18e8:	00720005 	rsbseq	r0, r2, r5
    18ec:	069f2740 	ldreq	r2, [pc], r0, asr #14
    18f0:	08080013 	stmdaeq	r8, {r0, r1, r4}
    18f4:	07080013 	smladeq	r8, r3, r0, r0
    18f8:	40007200 	andmi	r7, r0, r0, lsl #4
    18fc:	9f274027 	svcls	0x00274027
	...
    1908:	08001312 	stmdaeq	r0, {r1, r4, r8, r9, ip}
    190c:	08001316 	stmdaeq	r0, {r1, r2, r4, r8, r9, ip}
    1910:	00720007 	rsbseq	r0, r2, r7
    1914:	2710000a 	ldrcs	r0, [r0, -sl]
    1918:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    191c:	00000000 	andeq	r0, r0, r0
    1920:	00135800 	andseq	r5, r3, r0, lsl #16
    1924:	00136a08 	andseq	r6, r3, r8, lsl #20
    1928:	50000108 	andpl	r0, r0, r8, lsl #2
    192c:	0800136a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, ip}
    1930:	08001374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip}
    1934:	01f30004 	mvnseq	r0, r4
    1938:	00009f50 	andeq	r9, r0, r0, asr pc
    193c:	00000000 	andeq	r0, r0, r0
    1940:	13580000 	cmpne	r8, #0
    1944:	13620800 	cmnne	r2, #0, 16
    1948:	00010800 	andeq	r0, r1, r0, lsl #16
    194c:	00136251 	andseq	r6, r3, r1, asr r2
    1950:	00136808 	andseq	r6, r3, r8, lsl #16
    1954:	f3000408 	vshl.u8	d0, d8, d0
    1958:	689f5101 	ldmvs	pc, {r0, r8, ip, lr}	; <UNPREDICTABLE>
    195c:	74080013 	strvc	r0, [r8], #-19
    1960:	01080013 	tsteq	r8, r3, lsl r0
    1964:	00005100 	andeq	r5, r0, r0, lsl #2
    1968:	00000000 	andeq	r0, r0, r0
    196c:	135e0000 	cmpne	lr, #0
    1970:	13640800 	cmnne	r4, #0, 16
    1974:	00010800 	andeq	r0, r1, r0, lsl #16
    1978:	00136453 	andseq	r6, r3, r3, asr r4
    197c:	00136808 	andseq	r6, r3, r8, lsl #16
    1980:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    1984:	0a029412 	beq	a69d4 <__Stack_Size+0xa65d4>
    1988:	9f1affff 	svcls	0x001affff
    198c:	08001368 	stmdaeq	r0, {r3, r5, r6, r8, r9, ip}
    1990:	08001374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip}
    1994:	00530001 	subseq	r0, r3, r1
    1998:	00000000 	andeq	r0, r0, r0
    199c:	c6000000 	strgt	r0, [r0], -r0
    19a0:	d0080013 	andle	r0, r8, r3, lsl r0
    19a4:	11080013 	tstne	r8, r3, lsl r0
    19a8:	0a007200 	beq	1e1b0 <__Stack_Size+0x1ddb0>
    19ac:	311affff 			; <UNDEFINED> instruction: 0x311affff
    19b0:	c0802324 	addgt	r2, r0, r4, lsr #6
    19b4:	9f048081 	svcls	0x00048081
    19b8:	00000493 	muleq	r0, r3, r4
    19bc:	00000000 	andeq	r0, r0, r0
    19c0:	13fa0000 	mvnsne	r0, #0
    19c4:	140a0800 	strne	r0, [sl], #-2048	; 0x800
    19c8:	00020800 	andeq	r0, r2, r0, lsl #16
    19cc:	140a9f32 	strne	r9, [sl], #-3890	; 0xf32
    19d0:	140c0800 	strne	r0, [ip], #-2048	; 0x800
    19d4:	00010800 	andeq	r0, r1, r0, lsl #16
    19d8:	00140c50 	andseq	r0, r4, r0, asr ip
    19dc:	00141808 	andseq	r1, r4, r8, lsl #16
    19e0:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    19e4:	00141c9f 	mulseq	r4, pc, ip	; <UNPREDICTABLE>
    19e8:	00143a08 	andseq	r3, r4, r8, lsl #20
    19ec:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    19f0:	0014449f 	mulseq	r4, pc, r4	; <UNPREDICTABLE>
    19f4:	00144a08 	andseq	r4, r4, r8, lsl #20
    19f8:	50000108 	andpl	r0, r0, r8, lsl #2
    19fc:	0800144a 	stmdaeq	r0, {r1, r3, r6, sl, ip}
    1a00:	0800145a 	stmdaeq	r0, {r1, r3, r4, r6, sl, ip}
    1a04:	9f320002 	svcls	0x00320002
    1a08:	0800145a 	stmdaeq	r0, {r1, r3, r4, r6, sl, ip}
    1a0c:	0800145c 	stmdaeq	r0, {r2, r3, r4, r6, sl, ip}
    1a10:	5c500001 	mrrcpl	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1a14:	76080014 			; <UNDEFINED> instruction: 0x76080014
    1a18:	02080014 	andeq	r0, r8, #20
    1a1c:	769f3200 	ldrvc	r3, [pc], r0, lsl #4
    1a20:	78080014 	stmdavc	r8, {r2, r4}
    1a24:	01080014 	tsteq	r8, r4, lsl r0
    1a28:	14785000 	ldrbtne	r5, [r8], #-0
    1a2c:	14840800 	strne	r0, [r4], #2048	; 0x800
    1a30:	00020800 	andeq	r0, r2, r0, lsl #16
    1a34:	14849f32 	strne	r9, [r4], #3890	; 0xf32
    1a38:	14860800 	strne	r0, [r6], #2048	; 0x800
    1a3c:	00010800 	andeq	r0, r1, r0, lsl #16
    1a40:	00148650 	andseq	r8, r4, r0, asr r6
    1a44:	00149608 	andseq	r9, r4, r8, lsl #12
    1a48:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    1a4c:	0014969f 	mulseq	r4, pc, r6	; <UNPREDICTABLE>
    1a50:	00149e08 	andseq	r9, r4, r8, lsl #28
    1a54:	50000108 	andpl	r0, r0, r8, lsl #2
    1a58:	080014b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, sl, ip}
    1a5c:	080014b8 	stmdaeq	r0, {r3, r4, r5, r7, sl, ip}
    1a60:	00500001 	subseq	r0, r0, r1
    1a64:	00000000 	andeq	r0, r0, r0
    1a68:	fa000000 	blx	1a70 <__Stack_Size+0x1670>
    1a6c:	be080013 	mcrlt	0, 0, r0, cr8, cr3, {0}
    1a70:	01080014 	tsteq	r8, r4, lsl r0
    1a74:	00005400 	andeq	r5, r0, r0, lsl #8
    1a78:	00000000 	andeq	r0, r0, r0
    1a7c:	149e0000 	ldrne	r0, [lr], #0
    1a80:	14b60800 	ldrtne	r0, [r6], #2048	; 0x800
    1a84:	00020800 	andeq	r0, r2, r0, lsl #16
    1a88:	14b89f36 	ldrtne	r9, [r8], #3894	; 0xf36
    1a8c:	14be0800 	ldrtne	r0, [lr], #2048	; 0x800
    1a90:	00010800 	andeq	r0, r1, r0, lsl #16
    1a94:	00000053 	andeq	r0, r0, r3, asr r0
    1a98:	00000000 	andeq	r0, r0, r0
    1a9c:	0014be00 	andseq	fp, r4, r0, lsl #28
    1aa0:	0014d408 	andseq	sp, r4, r8, lsl #8
    1aa4:	30000208 	andcc	r0, r0, r8, lsl #4
    1aa8:	0014d49f 	mulseq	r4, pc, r4	; <UNPREDICTABLE>
    1aac:	0014d608 	andseq	sp, r4, r8, lsl #12
    1ab0:	53000108 	movwpl	r0, #264	; 0x108
    1ab4:	080014d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, ip}
    1ab8:	080014de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, ip}
    1abc:	9f300002 	svcls	0x00300002
    1ac0:	080014de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, ip}
    1ac4:	080014e0 	stmdaeq	r0, {r5, r6, r7, sl, ip}
    1ac8:	e0530001 	subs	r0, r3, r1
    1acc:	e8080014 	stmda	r8, {r2, r4}
    1ad0:	02080014 	andeq	r0, r8, #20
    1ad4:	e89f3000 	ldm	pc, {ip, sp}	; <UNPREDICTABLE>
    1ad8:	ea080014 	b	201b30 <__Stack_Size+0x201730>
    1adc:	01080014 	tsteq	r8, r4, lsl r0
    1ae0:	14ea5300 	strbtne	r5, [sl], #768	; 0x300
    1ae4:	14f20800 	ldrbtne	r0, [r2], #2048	; 0x800
    1ae8:	00020800 	andeq	r0, r2, r0, lsl #16
    1aec:	14f29f30 	ldrbtne	r9, [r2], #3888	; 0xf30
    1af0:	14f40800 	ldrbtne	r0, [r4], #2048	; 0x800
    1af4:	00010800 	andeq	r0, r1, r0, lsl #16
    1af8:	0014f453 	andseq	pc, r4, r3, asr r4	; <UNPREDICTABLE>
    1afc:	0015b008 	andseq	fp, r5, r8
    1b00:	30000208 	andcc	r0, r0, r8, lsl #4
    1b04:	0015b09f 	mulseq	r5, pc, r0	; <UNPREDICTABLE>
    1b08:	0015bd08 	andseq	fp, r5, r8, lsl #26
    1b0c:	53000108 	movwpl	r0, #264	; 0x108
    1b10:	08001670 	stmdaeq	r0, {r4, r5, r6, r9, sl, ip}
    1b14:	0800167a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, sl, ip}
    1b18:	9f300002 	svcls	0x00300002
    1b1c:	0800167a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, sl, ip}
    1b20:	08001690 	stmdaeq	r0, {r4, r7, r9, sl, ip}
    1b24:	05030006 	streq	r0, [r3, #-6]
    1b28:	9f080010 	svcls	0x00080010
	...
    1b34:	080015be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, sl, ip}
    1b38:	080015c2 	stmdaeq	r0, {r1, r6, r7, r8, sl, ip}
    1b3c:	9f300002 	svcls	0x00300002
    1b40:	080015ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, ip}
    1b44:	080015e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, ip}
    1b48:	e8500001 	ldmda	r0, {r0}^
    1b4c:	f0080015 			; <UNDEFINED> instruction: 0xf0080015
    1b50:	01080015 	tsteq	r8, r5, lsl r0
    1b54:	15f45000 	ldrbne	r5, [r4, #0]!
    1b58:	16020800 	strne	r0, [r2], -r0, lsl #16
    1b5c:	00010800 	andeq	r0, r1, r0, lsl #16
    1b60:	00165c50 	andseq	r5, r6, r0, asr ip
    1b64:	00166808 	andseq	r6, r6, r8, lsl #16
    1b68:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    1b74:	080014be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, sl, ip}
    1b78:	080015b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, ip}
    1b7c:	c2540001 	subsgt	r0, r4, #1
    1b80:	d8080015 	stmdale	r8, {r0, r2, r4}
    1b84:	01080015 	tsteq	r8, r5, lsl r0
    1b88:	16705400 	ldrbtne	r5, [r0], -r0, lsl #8
    1b8c:	16900800 	ldrne	r0, [r0], r0, lsl #16
    1b90:	00010800 	andeq	r0, r1, r0, lsl #16
    1b94:	00000054 	andeq	r0, r0, r4, asr r0
    1b98:	00000000 	andeq	r0, r0, r0
    1b9c:	00154600 	andseq	r4, r5, r0, lsl #12
    1ba0:	00157208 	andseq	r7, r5, r8, lsl #4
    1ba4:	51000108 	tstpl	r0, r8, lsl #2
	...
    1bb0:	08001546 	stmdaeq	r0, {r1, r2, r6, r8, sl, ip}
    1bb4:	08001572 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, ip}
    1bb8:	00730009 	rsbseq	r0, r3, r9
    1bbc:	081a7008 	ldmdaeq	sl, {r3, ip, sp, lr}
    1bc0:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    1bc4:	00000000 	andeq	r0, r0, r0
    1bc8:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    1bcc:	68080014 	stmdavs	r8, {r2, r4}
    1bd0:	02080016 	andeq	r0, r8, #22
    1bd4:	709f3000 	addsvc	r3, pc, r0
    1bd8:	90080016 	andls	r0, r8, r6, lsl r0
    1bdc:	02080016 	andeq	r0, r8, #22
    1be0:	009f3000 	addseq	r3, pc, r0
    1be4:	00000000 	andeq	r0, r0, r0
    1be8:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    1bec:	72080015 	andvc	r0, r8, #21
    1bf0:	01080015 	tsteq	r8, r5, lsl r0
    1bf4:	00005200 	andeq	r5, r0, r0, lsl #4
    1bf8:	00000000 	andeq	r0, r0, r0
    1bfc:	14ca0000 	strbne	r0, [sl], #0
    1c00:	14cc0800 	strbne	r0, [ip], #2048	; 0x800
    1c04:	00020800 	andeq	r0, r2, r0, lsl #16
    1c08:	14cc0373 	strbne	r0, [ip], #883	; 0x373
    1c0c:	14f40800 	ldrbtne	r0, [r4], #2048	; 0x800
    1c10:	00010800 	andeq	r0, r1, r0, lsl #16
    1c14:	0015b052 	andseq	fp, r5, r2, asr r0
    1c18:	0015b208 	andseq	fp, r5, r8, lsl #4
    1c1c:	52000108 	andpl	r0, r0, #8, 2
	...
    1c28:	08001698 	stmdaeq	r0, {r3, r4, r7, r9, sl, ip}
    1c2c:	080016a2 	stmdaeq	r0, {r1, r5, r7, r9, sl, ip}
    1c30:	a2530001 	subsge	r0, r3, #1
    1c34:	b3080016 	movwlt	r0, #32790	; 0x8016
    1c38:	08080016 	stmdaeq	r8, {r1, r2, r4}
    1c3c:	94087400 	strls	r7, [r8], #-1024	; 0x400
    1c40:	1aff0801 	bne	fffc3c4c <BootRAM+0xef343ed>
    1c44:	0017229f 	mulseq	r7, pc, r2	; <UNPREDICTABLE>
    1c48:	00172a08 	andseq	r2, r7, r8, lsl #20
    1c4c:	53000108 	movwpl	r0, #264	; 0x108
    1c50:	0800172a 	stmdaeq	r0, {r1, r3, r5, r8, r9, sl, ip}
    1c54:	0800172f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, sl, ip}
    1c58:	08740008 	ldmdaeq	r4!, {r3}^
    1c5c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    1c60:	17329f1a 			; <UNDEFINED> instruction: 0x17329f1a
    1c64:	173a0800 	ldrne	r0, [sl, -r0, lsl #16]!
    1c68:	00010800 	andeq	r0, r1, r0, lsl #16
    1c6c:	00000053 	andeq	r0, r0, r3, asr r0
    1c70:	00000000 	andeq	r0, r0, r0
    1c74:	0016a000 	andseq	sl, r6, r0
    1c78:	00172408 	andseq	r2, r7, r8, lsl #8
    1c7c:	74000308 	strvc	r0, [r0], #-776	; 0x308
    1c80:	00009f10 	andeq	r9, r0, r0, lsl pc
    1c84:	00000000 	andeq	r0, r0, r0
    1c88:	16a40000 	strtne	r0, [r4], r0
    1c8c:	16b30800 	ldrtne	r0, [r3], r0, lsl #16
    1c90:	00010800 	andeq	r0, r1, r0, lsl #16
    1c94:	00000052 	andeq	r0, r0, r2, asr r0
    1c98:	00000000 	andeq	r0, r0, r0
    1c9c:	0016b800 	andseq	fp, r6, r0, lsl #16
    1ca0:	0016c008 	andseq	ip, r6, r8
    1ca4:	50000108 	andpl	r0, r0, r8, lsl #2
    1ca8:	080016c0 	stmdaeq	r0, {r6, r7, r9, sl, ip}
    1cac:	080016d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, ip}
    1cb0:	00570001 	subseq	r0, r7, r1
    1cb4:	00000000 	andeq	r0, r0, r0
    1cb8:	aa000000 	bge	1cc0 <__Stack_Size+0x18c0>
    1cbc:	b0080016 	andlt	r0, r8, r6, lsl r0
    1cc0:	16080016 			; <UNDEFINED> instruction: 0x16080016
    1cc4:	12007600 	andne	r7, r0, #0, 12
    1cc8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    1ccc:	14160072 	ldrne	r0, [r6], #-114	; 0x72
    1cd0:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    1cd4:	0001282d 	andeq	r2, r1, sp, lsr #16
    1cd8:	b09f1316 	addslt	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    1cdc:	d2080016 	andle	r0, r8, #22
    1ce0:	01080016 	tsteq	r8, r6, lsl r0
    1ce4:	00005600 	andeq	r5, r0, r0, lsl #12
    1ce8:	00000000 	andeq	r0, r0, r0
    1cec:	17580000 	ldrbne	r0, [r8, -r0]
    1cf0:	17840800 	strne	r0, [r4, r0, lsl #16]
    1cf4:	00010800 	andeq	r0, r1, r0, lsl #16
    1cf8:	00178450 	andseq	r8, r7, r0, asr r4
    1cfc:	00179008 	andseq	r9, r7, r8
    1d00:	f3000408 	vshl.u8	d0, d8, d0
    1d04:	009f5001 	addseq	r5, pc, r1
    1d08:	00000000 	andeq	r0, r0, r0
    1d0c:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    1d10:	60080017 	andvs	r0, r8, r7, lsl r0
    1d14:	02080017 	andeq	r0, r8, #23
    1d18:	609f3000 	addsvs	r3, pc, r0
    1d1c:	80080017 	andhi	r0, r8, r7, lsl r0
    1d20:	01080017 	tsteq	r8, r7, lsl r0
    1d24:	00005300 	andeq	r5, r0, r0, lsl #6
    1d28:	00000000 	andeq	r0, r0, r0
    1d2c:	175e0000 	ldrbne	r0, [lr, -r0]
    1d30:	17880800 	strne	r0, [r8, r0, lsl #16]
    1d34:	00010800 	andeq	r0, r1, r0, lsl #16
    1d38:	00000054 	andeq	r0, r0, r4, asr r0
    1d3c:	00000000 	andeq	r0, r0, r0
    1d40:	00179800 	andseq	r9, r7, r0, lsl #16
    1d44:	0017a308 	andseq	sl, r7, r8, lsl #6
    1d48:	52000108 	andpl	r0, r0, #8, 2
    1d4c:	080017a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, ip}
    1d50:	080017aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, ip}
    1d54:	aa530001 	bge	14c1d60 <__Stack_Size+0x14c1960>
    1d58:	b0080017 	andlt	r0, r8, r7, lsl r0
    1d5c:	01080017 	tsteq	r8, r7, lsl r0
    1d60:	17b05200 	ldrne	r5, [r0, r0, lsl #4]!
    1d64:	17bf0800 	ldrne	r0, [pc, r0, lsl #16]!
    1d68:	00080800 	andeq	r0, r8, r0, lsl #16
    1d6c:	01940873 	orrseq	r0, r4, r3, ror r8
    1d70:	9f1aff08 	svcls	0x001aff08
    1d74:	080017d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sl, ip}
    1d78:	080017dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, r9, sl, ip}
    1d7c:	00530001 	subseq	r0, r3, r1
    1d80:	00000000 	andeq	r0, r0, r0
    1d84:	ec000000 	stc	0, cr0, [r0], {-0}
    1d88:	04080017 	streq	r0, [r8], #-23
    1d8c:	01080018 	tsteq	r8, r8, lsl r0
    1d90:	18045000 	stmdane	r4, {ip, lr}
    1d94:	18060800 	stmdane	r6, {fp}
    1d98:	00030800 	andeq	r0, r3, r0, lsl #16
    1d9c:	069f7e70 			; <UNDEFINED> instruction: 0x069f7e70
    1da0:	16080018 			; <UNDEFINED> instruction: 0x16080018
    1da4:	03080018 	movweq	r0, #32792	; 0x8018
    1da8:	9f7f7000 	svcls	0x007f7000
    1dac:	08001816 	stmdaeq	r0, {r1, r2, r4, fp, ip}
    1db0:	0800181a 	stmdaeq	r0, {r1, r3, r4, fp, ip}
    1db4:	1a500001 	bne	1401dc0 <__Stack_Size+0x14019c0>
    1db8:	1c080018 	stcne	0, cr0, [r8], {24}
    1dbc:	03080018 	movweq	r0, #32792	; 0x8018
    1dc0:	9f7e7000 	svcls	0x007e7000
	...
    1dcc:	080017ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip}
    1dd0:	080017f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sl, ip}
    1dd4:	f2510001 	vhadd.s16	d16, d1, d1
    1dd8:	1c080017 	stcne	0, cr0, [r8], {23}
    1ddc:	04080018 	streq	r0, [r8], #-24
    1de0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1de4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1de8:	00000000 	andeq	r0, r0, r0
    1dec:	0017ec00 	andseq	lr, r7, r0, lsl #24
    1df0:	0017f408 	andseq	pc, r7, r8, lsl #8
    1df4:	52000108 	andpl	r0, r0, #8, 2
    1df8:	080017f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, ip}
    1dfc:	0800181c 	stmdaeq	r0, {r2, r3, r4, fp, ip}
    1e00:	01f30004 	mvnseq	r0, r4
    1e04:	00009f52 	andeq	r9, r0, r2, asr pc
    1e08:	00000000 	andeq	r0, r0, r0
    1e0c:	17fc0000 	ldrbne	r0, [ip, r0]!
    1e10:	17fe0800 	ldrbne	r0, [lr, r0, lsl #16]!
    1e14:	00010800 	andeq	r0, r1, r0, lsl #16
    1e18:	0017fe52 	andseq	pc, r7, r2, asr lr	; <UNPREDICTABLE>
    1e1c:	00181608 	andseq	r1, r8, r8, lsl #12
    1e20:	f3000f08 	vpmax.f32	d0, d0, d8
    1e24:	ff0a5201 			; <UNDEFINED> instruction: 0xff0a5201
    1e28:	01231aff 	strdeq	r1, [r3, -pc]!
    1e2c:	00732631 	rsbseq	r2, r3, r1, lsr r6
    1e30:	18169f1c 	ldmdane	r6, {r2, r3, r4, r8, r9, sl, fp, ip, pc}
    1e34:	18180800 	ldmdane	r8, {fp}
    1e38:	00100800 	andseq	r0, r0, r0, lsl #16
    1e3c:	0a5201f3 	beq	1482610 <__Stack_Size+0x1482210>
    1e40:	231affff 	tstcs	sl, #1020	; 0x3fc
    1e44:	73263101 	teqvc	r6, #1073741824	; 0x40000000
    1e48:	9f222000 	svcls	0x00222000
    1e4c:	08001818 	stmdaeq	r0, {r3, r4, fp, ip}
    1e50:	0800181c 	stmdaeq	r0, {r2, r3, r4, fp, ip}
    1e54:	01f3000f 	mvnseq	r0, pc
    1e58:	ffff0a52 			; <UNDEFINED> instruction: 0xffff0a52
    1e5c:	3101231a 	tstcc	r1, sl, lsl r3
    1e60:	1c007326 	stcne	3, cr7, [r0], {38}	; 0x26
    1e64:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1e68:	00000000 	andeq	r0, r0, r0
    1e6c:	00180600 	andseq	r0, r8, r0, lsl #12
    1e70:	00180e08 	andseq	r0, r8, r8, lsl #28
    1e74:	70000808 	andvc	r0, r0, r8, lsl #16
    1e78:	0801947e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sl, ip, pc}
    1e7c:	0e9f1aff 	mrceq	10, 4, r1, cr15, cr15, {7}
    1e80:	12080018 	andne	r0, r8, #24
    1e84:	01080018 	tsteq	r8, r8, lsl r0
    1e88:	18125400 	ldmdane	r2, {sl, ip, lr}
    1e8c:	18160800 	ldmdane	r6, {fp}
    1e90:	00080800 	andeq	r0, r8, r0, lsl #16
    1e94:	01947e70 	orrseq	r7, r4, r0, ror lr
    1e98:	9f1aff08 	svcls	0x001aff08
	...
    1ea4:	08001806 	stmdaeq	r0, {r1, r2, fp, ip}
    1ea8:	08001816 	stmdaeq	r0, {r1, r2, r4, fp, ip}
    1eac:	7f700012 	svcvc	0x00700012
    1eb0:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    1eb4:	7024381a 	eorvc	r3, r4, sl, lsl r8
    1eb8:	0801947e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sl, ip, pc}
    1ebc:	9f211aff 	svcls	0x00211aff
	...
    1ec8:	080017fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip}
    1ecc:	080017fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, ip}
    1ed0:	16510001 	ldrbne	r0, [r1], -r1
    1ed4:	18080018 	stmdane	r8, {r3, r4}
    1ed8:	0a080018 	beq	201f40 <__Stack_Size+0x201b40>
    1edc:	32007300 	andcc	r7, r0, #0, 6
    1ee0:	22007124 	andcs	r7, r0, #36, 2
    1ee4:	189f0423 	ldmne	pc, {r0, r1, r5, sl}	; <UNPREDICTABLE>
    1ee8:	1a080018 	bne	201f50 <__Stack_Size+0x201b50>
    1eec:	0a080018 	beq	201f54 <__Stack_Size+0x201b54>
    1ef0:	327f7300 	rsbscc	r7, pc, #0, 6
    1ef4:	22007124 	andcs	r7, r0, #36, 2
    1ef8:	009f0423 	addseq	r0, pc, r3, lsr #8
    1efc:	00000000 	andeq	r0, r0, r0
    1f00:	1c000000 	stcne	0, cr0, [r0], {-0}
    1f04:	2e080018 	mcrcs	0, 0, r0, cr8, cr8, {0}
    1f08:	01080018 	tsteq	r8, r8, lsl r0
    1f0c:	183a5000 	ldmdane	sl!, {ip, lr}
    1f10:	183c0800 	ldmdane	ip!, {fp}
    1f14:	000a0800 	andeq	r0, sl, r0, lsl #16
    1f18:	24310073 	ldrtcs	r0, [r1], #-115	; 0x73
    1f1c:	23220070 	teqcs	r2, #112	; 0x70
    1f20:	183c9f02 	ldmdane	ip!, {r1, r8, r9, sl, fp, ip, pc}
    1f24:	183e0800 	ldmdane	lr!, {fp}
    1f28:	000a0800 	andeq	r0, sl, r0, lsl #16
    1f2c:	24317f73 	ldrtcs	r7, [r1], #-3955	; 0xf73
    1f30:	23220070 	teqcs	r2, #112	; 0x70
    1f34:	00009f02 	andeq	r9, r0, r2, lsl #30
    1f38:	00000000 	andeq	r0, r0, r0
    1f3c:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    1f40:	18220800 	stmdane	r2!, {fp}
    1f44:	00010800 	andeq	r0, r1, r0, lsl #16
    1f48:	00182251 	andseq	r2, r8, r1, asr r2
    1f4c:	00184008 	andseq	r4, r8, r8
    1f50:	f3000408 	vshl.u8	d0, d8, d0
    1f54:	009f5101 	addseq	r5, pc, r1, lsl #2
    1f58:	00000000 	andeq	r0, r0, r0
    1f5c:	1c000000 	stcne	0, cr0, [r0], {-0}
    1f60:	24080018 	strcs	r0, [r8], #-24
    1f64:	01080018 	tsteq	r8, r8, lsl r0
    1f68:	18245200 	stmdane	r4!, {r9, ip, lr}
    1f6c:	18400800 	stmdane	r0, {fp}^
    1f70:	00040800 	andeq	r0, r4, r0, lsl #16
    1f74:	9f5201f3 	svcls	0x005201f3
	...
    1f80:	0800182c 	stmdaeq	r0, {r2, r3, r5, fp, ip}
    1f84:	0800182e 	stmdaeq	r0, {r1, r2, r3, r5, fp, ip}
    1f88:	2e520001 	cdpcs	0, 5, cr0, cr2, cr1, {0}
    1f8c:	3a080018 	bcc	201ff4 <__Stack_Size+0x201bf4>
    1f90:	0f080018 	svceq	0x00080018
    1f94:	5201f300 	andpl	pc, r1, #0, 6
    1f98:	1affff0a 	bne	1bc8 <__Stack_Size+0x17c8>
    1f9c:	26310123 	ldrtcs	r0, [r1], -r3, lsr #2
    1fa0:	9f1c0073 	svcls	0x001c0073
    1fa4:	0800183a 	stmdaeq	r0, {r1, r3, r4, r5, fp, ip}
    1fa8:	0800183c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip}
    1fac:	01f30010 	mvnseq	r0, r0, lsl r0
    1fb0:	ffff0a52 			; <UNDEFINED> instruction: 0xffff0a52
    1fb4:	3101231a 	tstcc	r1, sl, lsl r3
    1fb8:	20007326 	andcs	r7, r0, r6, lsr #6
    1fbc:	183c9f22 	ldmdane	ip!, {r1, r5, r8, r9, sl, fp, ip, pc}
    1fc0:	18400800 	stmdane	r0, {fp}^
    1fc4:	000f0800 	andeq	r0, pc, r0, lsl #16
    1fc8:	0a5201f3 	beq	148279c <__Stack_Size+0x148239c>
    1fcc:	231affff 	tstcs	sl, #1020	; 0x3fc
    1fd0:	73263101 	teqvc	r6, #1073741824	; 0x40000000
    1fd4:	009f1c00 	addseq	r1, pc, r0, lsl #24
    1fd8:	00000000 	andeq	r0, r0, r0
    1fdc:	2c000000 	stccs	0, cr0, [r0], {-0}
    1fe0:	2e080018 	mcrcs	0, 0, r0, cr8, cr8, {0}
    1fe4:	01080018 	tsteq	r8, r8, lsl r0
    1fe8:	18325100 	ldmdane	r2!, {r8, ip, lr}
    1fec:	183c0800 	ldmdane	ip!, {fp}
    1ff0:	000a0800 	andeq	r0, sl, r0, lsl #16
    1ff4:	24320073 	ldrtcs	r0, [r2], #-115	; 0x73
    1ff8:	23220071 	teqcs	r2, #113	; 0x71
    1ffc:	183c9f04 	ldmdane	ip!, {r2, r8, r9, sl, fp, ip, pc}
    2000:	183e0800 	ldmdane	lr!, {fp}
    2004:	000a0800 	andeq	r0, sl, r0, lsl #16
    2008:	24327f73 	ldrtcs	r7, [r2], #-3955	; 0xf73
    200c:	23220071 	teqcs	r2, #113	; 0x71
    2010:	00009f04 	andeq	r9, r0, r4, lsl #30
    2014:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	00000000 	andeq	r0, r0, r0
   8:	080000f0 	stmdaeq	r0, {r4, r5, r6, r7}
   c:	08000138 	stmdaeq	r0, {r3, r4, r5, r8}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	08000138 	stmdaeq	r0, {r3, r4, r5, r8}
  14:	0800013c 	stmdaeq	r0, {r2, r3, r4, r5, r8}
	...
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	0800013c 	stmdaeq	r0, {r2, r3, r4, r5, r8}
  24:	0800013e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8}
  28:	0800013e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8}
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	08000140 	stmdaeq	r0, {r6, r8}
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	08000140 	stmdaeq	r0, {r6, r8}
  34:	08000142 	stmdaeq	r0, {r1, r6, r8}
  38:	08000142 	stmdaeq	r0, {r1, r6, r8}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	0800014e 	stmdaeq	r0, {r1, r2, r3, r6, r8}
  48:	08000150 	stmdaeq	r0, {r4, r6, r8}
  4c:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}
  54:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
  58:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
  5c:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  60:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  64:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
  68:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
  6c:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
  70:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
  74:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
  78:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
  7c:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  80:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  84:	08000180 	stmdaeq	r0, {r7, r8}
  88:	08000180 	stmdaeq	r0, {r7, r8}
  8c:	08000228 	stmdaeq	r0, {r3, r5, r9}
  90:	08000228 	stmdaeq	r0, {r3, r5, r9}
  94:	08000288 	stmdaeq	r0, {r3, r7, r9}
  98:	08000288 	stmdaeq	r0, {r3, r7, r9}
  9c:	08000294 	stmdaeq	r0, {r2, r4, r7, r9}
  a0:	08000294 	stmdaeq	r0, {r2, r4, r7, r9}
  a4:	080002a0 	stmdaeq	r0, {r5, r7, r9}
  a8:	080002a0 	stmdaeq	r0, {r5, r7, r9}
  ac:	080002c0 	stmdaeq	r0, {r6, r7, r9}
  b0:	080002c0 	stmdaeq	r0, {r6, r7, r9}
  b4:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
  b8:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
  bc:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
  c0:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
  c4:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
  c8:	00000001 	andeq	r0, r0, r1
  cc:	00000001 	andeq	r0, r0, r1
  d0:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
  d4:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
  d8:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
  dc:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
  e0:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
  e4:	08000428 	stmdaeq	r0, {r3, r5, sl}
  e8:	08000428 	stmdaeq	r0, {r3, r5, sl}
  ec:	08000450 	stmdaeq	r0, {r4, r6, sl}
  f0:	08000450 	stmdaeq	r0, {r4, r6, sl}
  f4:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
  f8:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
  fc:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
 100:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
 104:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
 108:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
 10c:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
 110:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
 114:	080004f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl}
 118:	080004f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl}
 11c:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
	...
 128:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
 12c:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
	...
 138:	0800085a 	stmdaeq	r0, {r1, r3, r4, r6, fp}
 13c:	0800085e 	stmdaeq	r0, {r1, r2, r3, r4, r6, fp}
 140:	08000860 	stmdaeq	r0, {r5, r6, fp}
 144:	08000862 	stmdaeq	r0, {r1, r5, r6, fp}
	...
 150:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 154:	0800063a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl}
 158:	00000001 	andeq	r0, r0, r1
 15c:	00000001 	andeq	r0, r0, r1
 160:	0800063c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl}
 164:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
 168:	00000001 	andeq	r0, r0, r1
 16c:	00000001 	andeq	r0, r0, r1
 170:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
 174:	08000694 	stmdaeq	r0, {r2, r4, r7, r9, sl}
 178:	08000694 	stmdaeq	r0, {r2, r4, r7, r9, sl}
 17c:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
 180:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
 184:	0800070c 	stmdaeq	r0, {r2, r3, r8, r9, sl}
 188:	0800070c 	stmdaeq	r0, {r2, r3, r8, r9, sl}
 18c:	08000728 	stmdaeq	r0, {r3, r5, r8, r9, sl}
 190:	08000728 	stmdaeq	r0, {r3, r5, r8, r9, sl}
 194:	0800073c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl}
 198:	0800073c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl}
 19c:	08000754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl}
 1a0:	08000754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl}
 1a4:	08000780 	stmdaeq	r0, {r7, r8, r9, sl}
 1a8:	08000780 	stmdaeq	r0, {r7, r8, r9, sl}
 1ac:	080007c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl}
 1b0:	080007c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl}
 1b4:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
 1b8:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
 1bc:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
 1c0:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
 1c4:	08000880 	stmdaeq	r0, {r7, fp}
 1c8:	08000880 	stmdaeq	r0, {r7, fp}
 1cc:	08000894 	stmdaeq	r0, {r2, r4, r7, fp}
 1d0:	08000894 	stmdaeq	r0, {r2, r4, r7, fp}
 1d4:	080008c8 	stmdaeq	r0, {r3, r6, r7, fp}
 1d8:	00000001 	andeq	r0, r0, r1
 1dc:	00000001 	andeq	r0, r0, r1
 1e0:	080008c8 	stmdaeq	r0, {r3, r6, r7, fp}
 1e4:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
 1e8:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
 1ec:	08000920 	stmdaeq	r0, {r5, r8, fp}
 1f0:	08000920 	stmdaeq	r0, {r5, r8, fp}
 1f4:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
 1f8:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
 1fc:	0800094a 	stmdaeq	r0, {r1, r3, r6, r8, fp}
 200:	0800094c 	stmdaeq	r0, {r2, r3, r6, r8, fp}
 204:	0800095c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp}
 208:	0800095c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp}
 20c:	08000974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp}
	...
 218:	08000974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp}
 21c:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
 220:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
 224:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
 228:	00000001 	andeq	r0, r0, r1
 22c:	00000001 	andeq	r0, r0, r1
 230:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
 234:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
 238:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
 23c:	08000a44 	stmdaeq	r0, {r2, r6, r9, fp}
 240:	08000a44 	stmdaeq	r0, {r2, r6, r9, fp}
 244:	08000a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp}
 248:	08000a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp}
 24c:	08000aa0 	stmdaeq	r0, {r5, r7, r9, fp}
 250:	08000aa0 	stmdaeq	r0, {r5, r7, r9, fp}
 254:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
 258:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
 25c:	08000d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp}
 260:	00000001 	andeq	r0, r0, r1
 264:	00000001 	andeq	r0, r0, r1
 268:	00000001 	andeq	r0, r0, r1
 26c:	00000001 	andeq	r0, r0, r1
 270:	08000d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp}
 274:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
 278:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
 27c:	08000d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp}
	...
 288:	00000001 	andeq	r0, r0, r1
 28c:	00000001 	andeq	r0, r0, r1
 290:	00000001 	andeq	r0, r0, r1
 294:	00000001 	andeq	r0, r0, r1
	...
 2a0:	08000e16 	stmdaeq	r0, {r1, r2, r4, r9, sl, fp}
 2a4:	08000e18 	stmdaeq	r0, {r3, r4, r9, sl, fp}
 2a8:	08000e28 	stmdaeq	r0, {r3, r5, r9, sl, fp}
 2ac:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
	...
 2b8:	00000001 	andeq	r0, r0, r1
 2bc:	00000001 	andeq	r0, r0, r1
 2c0:	00000001 	andeq	r0, r0, r1
 2c4:	00000001 	andeq	r0, r0, r1
	...
 2d0:	00000001 	andeq	r0, r0, r1
 2d4:	00000001 	andeq	r0, r0, r1
 2d8:	00000001 	andeq	r0, r0, r1
 2dc:	00000001 	andeq	r0, r0, r1
	...
 2e8:	00000001 	andeq	r0, r0, r1
 2ec:	00000001 	andeq	r0, r0, r1
 2f0:	00000001 	andeq	r0, r0, r1
 2f4:	00000001 	andeq	r0, r0, r1
 2f8:	00000001 	andeq	r0, r0, r1
 2fc:	00000001 	andeq	r0, r0, r1
	...
 308:	00000001 	andeq	r0, r0, r1
 30c:	00000001 	andeq	r0, r0, r1
 310:	00000001 	andeq	r0, r0, r1
 314:	00000001 	andeq	r0, r0, r1
	...
 320:	00000001 	andeq	r0, r0, r1
 324:	00000001 	andeq	r0, r0, r1
 328:	00000001 	andeq	r0, r0, r1
 32c:	00000001 	andeq	r0, r0, r1
	...
 338:	00000001 	andeq	r0, r0, r1
 33c:	00000001 	andeq	r0, r0, r1
 340:	00000001 	andeq	r0, r0, r1
 344:	00000001 	andeq	r0, r0, r1
 348:	00000001 	andeq	r0, r0, r1
 34c:	00000001 	andeq	r0, r0, r1
 350:	00000001 	andeq	r0, r0, r1
 354:	00000001 	andeq	r0, r0, r1
 358:	00000001 	andeq	r0, r0, r1
 35c:	00000001 	andeq	r0, r0, r1
 360:	00000001 	andeq	r0, r0, r1
 364:	00000001 	andeq	r0, r0, r1
 368:	00000001 	andeq	r0, r0, r1
 36c:	00000001 	andeq	r0, r0, r1
 370:	00000001 	andeq	r0, r0, r1
 374:	00000001 	andeq	r0, r0, r1
 378:	00000001 	andeq	r0, r0, r1
 37c:	00000001 	andeq	r0, r0, r1
 380:	00000001 	andeq	r0, r0, r1
 384:	00000001 	andeq	r0, r0, r1
 388:	00000001 	andeq	r0, r0, r1
 38c:	00000001 	andeq	r0, r0, r1
 390:	00000001 	andeq	r0, r0, r1
 394:	00000001 	andeq	r0, r0, r1
 398:	00000001 	andeq	r0, r0, r1
 39c:	00000001 	andeq	r0, r0, r1
 3a0:	08000d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp}
 3a4:	08000d46 	stmdaeq	r0, {r1, r2, r6, r8, sl, fp}
 3a8:	00000001 	andeq	r0, r0, r1
 3ac:	00000001 	andeq	r0, r0, r1
 3b0:	00000001 	andeq	r0, r0, r1
 3b4:	00000001 	andeq	r0, r0, r1
 3b8:	00000001 	andeq	r0, r0, r1
 3bc:	00000001 	andeq	r0, r0, r1
 3c0:	00000001 	andeq	r0, r0, r1
 3c4:	00000001 	andeq	r0, r0, r1
 3c8:	00000001 	andeq	r0, r0, r1
 3cc:	00000001 	andeq	r0, r0, r1
 3d0:	08000d46 	stmdaeq	r0, {r1, r2, r6, r8, sl, fp}
 3d4:	08000d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp}
 3d8:	00000001 	andeq	r0, r0, r1
 3dc:	00000001 	andeq	r0, r0, r1
 3e0:	00000001 	andeq	r0, r0, r1
 3e4:	00000001 	andeq	r0, r0, r1
 3e8:	08000d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp}
 3ec:	08000d80 	stmdaeq	r0, {r7, r8, sl, fp}
 3f0:	00000001 	andeq	r0, r0, r1
 3f4:	00000001 	andeq	r0, r0, r1
 3f8:	00000001 	andeq	r0, r0, r1
 3fc:	00000001 	andeq	r0, r0, r1
 400:	00000001 	andeq	r0, r0, r1
 404:	00000001 	andeq	r0, r0, r1
 408:	00000001 	andeq	r0, r0, r1
 40c:	00000001 	andeq	r0, r0, r1
 410:	00000001 	andeq	r0, r0, r1
 414:	00000001 	andeq	r0, r0, r1
 418:	00000001 	andeq	r0, r0, r1
 41c:	00000001 	andeq	r0, r0, r1
 420:	00000001 	andeq	r0, r0, r1
 424:	00000001 	andeq	r0, r0, r1
 428:	00000001 	andeq	r0, r0, r1
 42c:	00000001 	andeq	r0, r0, r1
 430:	00000001 	andeq	r0, r0, r1
 434:	00000001 	andeq	r0, r0, r1
 438:	08000d80 	stmdaeq	r0, {r7, r8, sl, fp}
 43c:	08000da0 	stmdaeq	r0, {r5, r7, r8, sl, fp}
 440:	08000da0 	stmdaeq	r0, {r5, r7, r8, sl, fp}
 444:	08000dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp}
 448:	00000001 	andeq	r0, r0, r1
 44c:	00000001 	andeq	r0, r0, r1
 450:	00000001 	andeq	r0, r0, r1
 454:	00000001 	andeq	r0, r0, r1
 458:	00000001 	andeq	r0, r0, r1
 45c:	00000001 	andeq	r0, r0, r1
 460:	00000001 	andeq	r0, r0, r1
 464:	00000001 	andeq	r0, r0, r1
 468:	08000dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp}
 46c:	08000ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp}
 470:	08000ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp}
 474:	08000df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp}
 478:	08000df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp}
 47c:	08000e14 	stmdaeq	r0, {r2, r4, r9, sl, fp}
 480:	00000001 	andeq	r0, r0, r1
 484:	00000001 	andeq	r0, r0, r1
 488:	08000e14 	stmdaeq	r0, {r2, r4, r9, sl, fp}
 48c:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
 490:	00000001 	andeq	r0, r0, r1
 494:	00000001 	andeq	r0, r0, r1
 498:	00000001 	andeq	r0, r0, r1
 49c:	00000001 	andeq	r0, r0, r1
 4a0:	00000001 	andeq	r0, r0, r1
 4a4:	00000001 	andeq	r0, r0, r1
 4a8:	00000001 	andeq	r0, r0, r1
 4ac:	00000001 	andeq	r0, r0, r1
 4b0:	00000001 	andeq	r0, r0, r1
 4b4:	00000001 	andeq	r0, r0, r1
 4b8:	00000001 	andeq	r0, r0, r1
 4bc:	00000001 	andeq	r0, r0, r1
 4c0:	00000001 	andeq	r0, r0, r1
 4c4:	00000001 	andeq	r0, r0, r1
 4c8:	00000001 	andeq	r0, r0, r1
 4cc:	00000001 	andeq	r0, r0, r1
 4d0:	00000001 	andeq	r0, r0, r1
 4d4:	00000001 	andeq	r0, r0, r1
 4d8:	00000001 	andeq	r0, r0, r1
 4dc:	00000001 	andeq	r0, r0, r1
 4e0:	00000001 	andeq	r0, r0, r1
 4e4:	00000001 	andeq	r0, r0, r1
 4e8:	00000001 	andeq	r0, r0, r1
 4ec:	00000001 	andeq	r0, r0, r1
 4f0:	00000001 	andeq	r0, r0, r1
 4f4:	00000001 	andeq	r0, r0, r1
 4f8:	00000001 	andeq	r0, r0, r1
 4fc:	00000001 	andeq	r0, r0, r1
 500:	00000001 	andeq	r0, r0, r1
 504:	00000001 	andeq	r0, r0, r1
 508:	00000001 	andeq	r0, r0, r1
 50c:	00000001 	andeq	r0, r0, r1
	...
 518:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
 51c:	08000fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp}
 520:	00000001 	andeq	r0, r0, r1
 524:	00000001 	andeq	r0, r0, r1
	...
 530:	08000fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp}
 534:	08000fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp}
	...
 540:	080012e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, ip}
 544:	080012f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, ip}
 548:	080012f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip}
 54c:	080012f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, ip}
 550:	080012f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, ip}
 554:	08001308 	stmdaeq	r0, {r3, r8, r9, ip}
	...
 560:	080014be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, sl, ip}
 564:	08001668 	stmdaeq	r0, {r3, r5, r6, r9, sl, ip}
 568:	08001670 	stmdaeq	r0, {r4, r5, r6, r9, sl, ip}
 56c:	08001690 	stmdaeq	r0, {r4, r7, r9, sl, ip}
	...
 578:	08000fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp}
 57c:	08001004 	stmdaeq	r0, {r2, ip}
 580:	08001004 	stmdaeq	r0, {r2, ip}
 584:	08001028 	stmdaeq	r0, {r3, r5, ip}
 588:	08001028 	stmdaeq	r0, {r3, r5, ip}
 58c:	080010b8 	stmdaeq	r0, {r3, r4, r5, r7, ip}
 590:	080010b8 	stmdaeq	r0, {r3, r4, r5, r7, ip}
 594:	08001160 	stmdaeq	r0, {r5, r6, r8, ip}
 598:	08001160 	stmdaeq	r0, {r5, r6, r8, ip}
 59c:	08001198 	stmdaeq	r0, {r3, r4, r7, r8, ip}
 5a0:	08001198 	stmdaeq	r0, {r3, r4, r7, r8, ip}
 5a4:	080011e0 	stmdaeq	r0, {r5, r6, r7, r8, ip}
 5a8:	080011e0 	stmdaeq	r0, {r5, r6, r7, r8, ip}
 5ac:	080012b0 	stmdaeq	r0, {r4, r5, r7, r9, ip}
 5b0:	080012b0 	stmdaeq	r0, {r4, r5, r7, r9, ip}
 5b4:	08001334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip}
 5b8:	08001334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip}
 5bc:	08001358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip}
 5c0:	08001358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip}
 5c4:	08001374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip}
 5c8:	08001374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip}
 5cc:	080013b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, ip}
 5d0:	080013b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, ip}
 5d4:	08001690 	stmdaeq	r0, {r4, r7, r9, sl, ip}
 5d8:	08001690 	stmdaeq	r0, {r4, r7, r9, sl, ip}
 5dc:	08001758 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, ip}
 5e0:	08001758 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, ip}
 5e4:	08001790 	stmdaeq	r0, {r4, r7, r8, r9, sl, ip}
 5e8:	08001790 	stmdaeq	r0, {r4, r7, r8, r9, sl, ip}
 5ec:	080017ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip}
 5f0:	00000001 	andeq	r0, r0, r1
 5f4:	00000001 	andeq	r0, r0, r1
	...
 600:	080017ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip}
 604:	0800181c 	stmdaeq	r0, {r2, r3, r4, fp, ip}
 608:	0800181c 	stmdaeq	r0, {r2, r3, r4, fp, ip}
 60c:	08001840 	stmdaeq	r0, {r6, fp, ip}
	...
