
build/maple_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000f0  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000177c  080000f0  080000f0  000080f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000002d0  20000000  0800186c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000044  200002d0  08001b3c  000102d0  2**2
                  ALLOC
  4 .bss.bIntPackSOF 00000001  20000314  08001b80  000102d0  2**0
                  ALLOC
  5 .bss.bDeviceState 00000004  20000318  08001b84  000102d0  2**2
                  ALLOC
  6 .bss.recvBuffer 00000800  2000031c  08001b88  000102d0  2**2
                  ALLOC
  7 .bss.uploadBlockLen 00000002  20000b1c  08002388  000102d0  2**1
                  ALLOC
  8 .bss.thisBlockLen 00000002  20000b1e  0800238a  000102d0  2**1
                  ALLOC
  9 .bss.userFirmwareLen 00000004  20000b20  0800238c  000102d0  2**2
                  ALLOC
 10 .bss.userUploadType 00000001  20000b24  08002390  000102d0  2**0
                  ALLOC
 11 .bss.dfuAppStatus 00000006  20000b25  08002391  000102d0  2**0
                  ALLOC
 12 .bss.dfuBusy  00000001  20000b2b  08002397  000102d0  2**0
                  ALLOC
 13 .bss.Data_Mul_MaxPacketSize 00000001  20000b2c  08002398  000102d0  2**0
                  ALLOC
 14 ._usrstack    00000103  20000b2d  08002399  000102d0  2**0
                  ALLOC
 15 .comment      00000080  00000000  00000000  000102d0  2**0
                  CONTENTS, READONLY
 16 .ARM.attributes 0000002f  00000000  00000000  00010350  2**0
                  CONTENTS, READONLY
 17 .debug_aranges 000005e8  00000000  00000000  00010380  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_info   00004605  00000000  00000000  00010968  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 0000146a  00000000  00000000  00014f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00001494  00000000  00000000  000163d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  00000c70  00000000  00000000  0001786c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    0000181b  00000000  00000000  000184dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    00002044  00000000  00000000  00019cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_ranges 00000618  00000000  00000000  0001bd40  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20005000 	andcs	r5, r0, r0
 8000004:	080000f1 	stmdaeq	r0, {r0, r4, r5, r6, r7}
 8000008:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800000c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000010:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000014:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000018:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
	...
 800002c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000030:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800003c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000040:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000044:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000048:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800004c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000050:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000054:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000058:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800005c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000060:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000064:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000068:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800006c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000070:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000074:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000078:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800007c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000080:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000084:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000088:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800008c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000090:	080004f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, sl}
 8000094:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000098:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800009c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000a0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000a4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000a8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000ac:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000b0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000b4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000b8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000bc:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000c0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000c4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000c8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000cc:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000d0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000d4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000d8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000dc:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000e0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000e4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000e8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000ec:	f108f85f 			; <UNDEFINED> instruction: 0xf108f85f

Disassembly of section .text:

080000f0 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80000f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80000f2:	f000 b804 	b.w	80000fe <LoopCopyDataInit>

080000f6 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80000f6:	4b0b      	ldr	r3, [pc, #44]	; (8000124 <LoopFillZerobss+0xe>)
	ldr	r3, [r3, r1]
 80000f8:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80000fa:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80000fc:	3104      	adds	r1, #4

080000fe <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80000fe:	480a      	ldr	r0, [pc, #40]	; (8000128 <LoopFillZerobss+0x12>)
	ldr	r3, =_edata
 8000100:	4b0a      	ldr	r3, [pc, #40]	; (800012c <LoopFillZerobss+0x16>)
	adds	r2, r0, r1
 8000102:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000104:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000106:	f4ff aff6 	bcc.w	80000f6 <CopyDataInit>
	ldr	r2, =_sbss
 800010a:	4a09      	ldr	r2, [pc, #36]	; (8000130 <LoopFillZerobss+0x1a>)
	b	LoopFillZerobss
 800010c:	f000 b803 	b.w	8000116 <LoopFillZerobss>

08000110 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000110:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000112:	f842 3b04 	str.w	r3, [r2], #4

08000116 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000116:	4b07      	ldr	r3, [pc, #28]	; (8000134 <LoopFillZerobss+0x1e>)
	cmp	r2, r3
 8000118:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800011a:	f4ff aff9 	bcc.w	8000110 <FillZerobss>
/* Call the application's entry point.*/
	bl	main
 800011e:	f000 fa45 	bl	80005ac <main>
	bx	lr
 8000122:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000124:	0800186c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip}
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000128:	20000000 	andcs	r0, r0, r0
	ldr	r3, =_edata
 800012c:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000130:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000134:	20000314 	andcs	r0, r0, r4, lsl r3

08000138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000138:	f7ff bffe 	b.w	8000138 <ADC1_2_IRQHandler>

0800013c <nothingProc>:
    volatile RESUME_STATE eState;
    volatile u8 bESOFcnt;
} ResumeS;

/* dummy proc */
void nothingProc(void) {
 800013c:	4770      	bx	lr

0800013e <usbStatusIn>:

    bDeviceState = ATTACHED;
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
}

void usbStatusIn(void) {
 800013e:	4770      	bx	lr

08000140 <usbStatusOut>:
}

void usbStatusOut(void) {
 8000140:	4770      	bx	lr

08000142 <usbGetInterfaceSetting>:
}

RESULT usbGetInterfaceSetting(u8 interface, u8 altSetting) {
    /* alt setting 0 -> program RAM, alt setting 1 -> FLASH */
    if (interface > NUM_ALT_SETTINGS) {
        return USB_UNSUPPORT;
 8000142:	2803      	cmp	r0, #3
    } else {
        return USB_SUCCESS;
    }
}
 8000144:	bf8c      	ite	hi
 8000146:	2002      	movhi	r0, #2
 8000148:	2000      	movls	r0, #0
 800014a:	4770      	bx	lr

0800014c <usbGetConfiguration>:
 * These are the USER STANDARD REQUESTS, they are handled
 * in the core but we are given these callbacks at the
 * application level
 *******************************************/

void usbGetConfiguration(void) {
 800014c:	4770      	bx	lr
	...

08000150 <usbSetConfiguration>:
    /* nothing process */
}

void usbSetConfiguration(void) {
    if (pInformation->Current_Configuration != 0) {
 8000150:	4b03      	ldr	r3, [pc, #12]	; (8000160 <usbSetConfiguration+0x10>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	7a9b      	ldrb	r3, [r3, #10]
 8000156:	b113      	cbz	r3, 800015e <usbSetConfiguration+0xe>
        bDeviceState = CONFIGURED;
 8000158:	4b02      	ldr	r3, [pc, #8]	; (8000164 <usbSetConfiguration+0x14>)
 800015a:	2205      	movs	r2, #5
 800015c:	601a      	str	r2, [r3, #0]
 800015e:	4770      	bx	lr
 8000160:	2000030c 	andcs	r0, r0, ip, lsl #6
 8000164:	20000318 	andcs	r0, r0, r8, lsl r3

08000168 <usbGetInterface>:
    }
}

void usbGetInterface(void) {
 8000168:	4770      	bx	lr

0800016a <usbSetInterface>:
    /* nothing process */
}

void usbSetInterface(void) {
 800016a:	4770      	bx	lr

0800016c <usbGetStatus>:
    /* nothing process */
}

void usbGetStatus(void) {
 800016c:	4770      	bx	lr

0800016e <usbClearFeature>:
    /* nothing process */
}

void usbClearFeature(void) {
 800016e:	4770      	bx	lr

08000170 <usbSetEndpointFeature>:
    /* nothing process */
}

void usbSetEndpointFeature(void) {
 8000170:	4770      	bx	lr

08000172 <usbSetDeviceFeature>:
    /* nothing process */
}

void usbSetDeviceFeature(void) {
 8000172:	4770      	bx	lr

08000174 <usbSetDeviceAddress>:
    /* nothing process */
}

void usbSetDeviceAddress(void) {
    bDeviceState = ADDRESSED;
 8000174:	4b01      	ldr	r3, [pc, #4]	; (800017c <usbSetDeviceAddress+0x8>)
 8000176:	2204      	movs	r2, #4
 8000178:	601a      	str	r2, [r3, #0]
 800017a:	4770      	bx	lr
 800017c:	20000318 	andcs	r0, r0, r8, lsl r3

08000180 <usbReset>:

    usbEnbISR(); /* configure the cortex M3 private peripheral NVIC */
    bDeviceState = UNCONNECTED;
}

void usbReset(void) {
 8000180:	b510      	push	{r4, lr}
    dfuUpdateByReset();
 8000182:	f000 fc25 	bl	80009d0 <dfuUpdateByReset>

    pInformation->Current_Configuration = 0;
 8000186:	4b21      	ldr	r3, [pc, #132]	; (800020c <usbReset+0x8c>)
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000188:	4a21      	ldr	r2, [pc, #132]	; (8000210 <usbReset+0x90>)
}

void usbReset(void) {
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2400      	movs	r4, #0
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 800018e:	6812      	ldr	r2, [r2, #0]
}

void usbReset(void) {
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 8000190:	729c      	strb	r4, [r3, #10]
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000192:	79d2      	ldrb	r2, [r2, #7]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);

    Clear_Status_Out(ENDP0);
 8000194:	4620      	mov	r0, r4

void usbReset(void) {
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000196:	725a      	strb	r2, [r3, #9]

    _SetBTABLE(BTABLE_ADDRESS);
 8000198:	4a1e      	ldr	r2, [pc, #120]	; (8000214 <usbReset+0x94>)

    /* setup the ctrl endpoint */
    _SetEPType(ENDP0, EP_CONTROL);
 800019a:	4b1f      	ldr	r3, [pc, #124]	; (8000218 <usbReset+0x98>)
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];

    _SetBTABLE(BTABLE_ADDRESS);
 800019c:	6014      	str	r4, [r2, #0]

    /* setup the ctrl endpoint */
    _SetEPType(ENDP0, EP_CONTROL);
 800019e:	6819      	ldr	r1, [r3, #0]
 80001a0:	f421 41ec 	bic.w	r1, r1, #30208	; 0x7600
 80001a4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80001a8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80001ac:	b289      	uxth	r1, r1
 80001ae:	6019      	str	r1, [r3, #0]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);
 80001b0:	6819      	ldr	r1, [r3, #0]
 80001b2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80001b6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80001ba:	b289      	uxth	r1, r1
 80001bc:	f081 0110 	eor.w	r1, r1, #16
 80001c0:	6019      	str	r1, [r3, #0]

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 80001c2:	6811      	ldr	r1, [r2, #0]
 80001c4:	4b15      	ldr	r3, [pc, #84]	; (800021c <usbReset+0x9c>)
 80001c6:	b289      	uxth	r1, r1
 80001c8:	440b      	add	r3, r1
 80001ca:	005b      	lsls	r3, r3, #1
 80001cc:	2140      	movs	r1, #64	; 0x40
 80001ce:	6019      	str	r1, [r3, #0]
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 80001d0:	6813      	ldr	r3, [r2, #0]
 80001d2:	2280      	movs	r2, #128	; 0x80
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80001da:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80001de:	005b      	lsls	r3, r3, #1
 80001e0:	601a      	str	r2, [r3, #0]

    Clear_Status_Out(ENDP0);
 80001e2:	f000 fdd5 	bl	8000d90 <Clear_Status_Out>

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
 80001e6:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <usbReset+0xa0>)
 80001e8:	4620      	mov	r0, r4
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80001f0:	f000 fe26 	bl	8000e40 <SetEPRxCount>
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);
 80001f4:	4620      	mov	r0, r4
 80001f6:	f000 fdbc 	bl	8000d72 <SetEPRxValid>

    bDeviceState = ATTACHED;
 80001fa:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <usbReset+0xa4>)
 80001fc:	2201      	movs	r2, #1
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 80001fe:	4620      	mov	r0, r4
}
 8000200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);

    bDeviceState = ATTACHED;
 8000204:	601a      	str	r2, [r3, #0]
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 8000206:	f001 babd 	b.w	8001784 <SetDeviceAddress>
 800020a:	bf00      	nop
 800020c:	2000030c 	andcs	r0, r0, ip, lsl #6
 8000210:	200002c0 	andcs	r0, r0, r0, asr #5
 8000214:	40005c50 	andmi	r5, r0, r0, asr ip
 8000218:	40005c00 	andmi	r5, r0, r0, lsl #24
 800021c:	20003004 	andcs	r3, r0, r4
 8000220:	200002e4 	andcs	r0, r0, r4, ror #5
 8000224:	20000318 	andcs	r0, r0, r8, lsl r3

08000228 <usbDataSetup>:
}

void usbStatusOut(void) {
}

RESULT usbDataSetup(u8 request) {
 8000228:	b538      	push	{r3, r4, r5, lr}
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    /* handle dfu class requests */
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 800022a:	4b12      	ldr	r3, [pc, #72]	; (8000274 <usbDataSetup+0x4c>)
}

void usbStatusOut(void) {
}

RESULT usbDataSetup(u8 request) {
 800022c:	4605      	mov	r5, r0
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    /* handle dfu class requests */
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	461c      	mov	r4, r3
 8000232:	7812      	ldrb	r2, [r2, #0]
 8000234:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000238:	2a21      	cmp	r2, #33	; 0x21
 800023a:	d119      	bne.n	8000270 <usbDataSetup+0x48>
        if (dfuUpdateByRequest()) {
 800023c:	f000 fc5e 	bl	8000afc <dfuUpdateByRequest>
 8000240:	b1b0      	cbz	r0, 8000270 <usbDataSetup+0x48>
            /* successfull state transition, handle the request */
            switch (request) {
 8000242:	1e68      	subs	r0, r5, #1
 8000244:	2804      	cmp	r0, #4
 8000246:	d813      	bhi.n	8000270 <usbDataSetup+0x48>
 8000248:	e8df f000 	tbb	[pc, r0]
 800024c:	12070503 	andne	r0, r7, #12582912	; 0xc00000
 8000250:	4b090009 	blmi	824027c <_etext+0x23ea10>
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
                break;
            case(DFU_DNLOAD):
                CopyRoutine = dfuCopyDNLOAD;
                break;
 8000254:	e004      	b.n	8000260 <usbDataSetup+0x38>
            case(DFU_UPLOAD):
                CopyRoutine = dfuCopyUPLOAD;
 8000256:	4b09      	ldr	r3, [pc, #36]	; (800027c <usbDataSetup+0x54>)
                break;
 8000258:	e002      	b.n	8000260 <usbDataSetup+0x38>
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
        if (dfuUpdateByRequest()) {
            /* successfull state transition, handle the request */
            switch (request) {
            case(DFU_GETSTATUS):
                CopyRoutine = dfuCopyStatus;
 800025a:	4b09      	ldr	r3, [pc, #36]	; (8000280 <usbDataSetup+0x58>)
 800025c:	e000      	b.n	8000260 <usbDataSetup+0x38>
                break;
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <usbDataSetup+0x5c>)
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000260:	6822      	ldr	r2, [r4, #0]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000262:	2400      	movs	r4, #0
        (*CopyRoutine)(0);
 8000264:	4620      	mov	r0, r4
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000266:	6193      	str	r3, [r2, #24]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000268:	8254      	strh	r4, [r2, #18]
        (*CopyRoutine)(0);
 800026a:	4798      	blx	r3

        return USB_SUCCESS;
 800026c:	4620      	mov	r0, r4
 800026e:	bd38      	pop	{r3, r4, r5, pc}
    }

    return USB_UNSUPPORT;
 8000270:	2002      	movs	r0, #2
}
 8000272:	bd38      	pop	{r3, r4, r5, pc}
 8000274:	2000030c 	andcs	r0, r0, ip, lsl #6
 8000278:	08000a45 	stmdaeq	r0, {r0, r2, r6, r9, fp}
 800027c:	08000a6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, fp}
 8000280:	08000a2d 	stmdaeq	r0, {r0, r2, r3, r5, r9, fp}
 8000284:	08000a15 	stmdaeq	r0, {r0, r2, r4, r9, fp}

08000288 <usbGetDeviceDescriptor>:
        return USB_SUCCESS;
    }
}

u8 *usbGetDeviceDescriptor(u16 len) {
    return Standard_GetDescriptorData(len, &usbDeviceDescriptorDFU);
 8000288:	4901      	ldr	r1, [pc, #4]	; (8000290 <usbGetDeviceDescriptor+0x8>)
 800028a:	f001 b87b 	b.w	8001384 <Standard_GetDescriptorData>
 800028e:	bf00      	nop
 8000290:	2000014c 	andcs	r0, r0, ip, asr #2

08000294 <usbGetConfigDescriptor>:
}

u8 *usbGetConfigDescriptor(u16 len) {
    return Standard_GetDescriptorData(len, &usbConfigDescriptorDFU);
 8000294:	4901      	ldr	r1, [pc, #4]	; (800029c <usbGetConfigDescriptor+0x8>)
 8000296:	f001 b875 	b.w	8001384 <Standard_GetDescriptorData>
 800029a:	bf00      	nop
 800029c:	200002c0 	andcs	r0, r0, r0, asr #5

080002a0 <usbGetStringDescriptor>:
}

u8 *usbGetStringDescriptor(u16 len) {
    u8 strIndex = pInformation->USBwValue0;
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <usbGetStringDescriptor+0x18>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	789b      	ldrb	r3, [r3, #2]
    if (strIndex > STR_DESC_LEN) {
 80002a6:	2b07      	cmp	r3, #7
 80002a8:	d804      	bhi.n	80002b4 <usbGetStringDescriptor+0x14>
        return NULL;
    } else {
        return Standard_GetDescriptorData(len, &usbStringDescriptor[strIndex]);
 80002aa:	4904      	ldr	r1, [pc, #16]	; (80002bc <usbGetStringDescriptor+0x1c>)
 80002ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80002b0:	f001 b868 	b.w	8001384 <Standard_GetDescriptorData>
    }
}
 80002b4:	2000      	movs	r0, #0
 80002b6:	4770      	bx	lr
 80002b8:	2000030c 	andcs	r0, r0, ip, lsl #6
 80002bc:	20000094 	mulcs	r0, r4, r0

080002c0 <usbGetFunctionalDescriptor>:

u8 *usbGetFunctionalDescriptor(u16 len) {
    return Standard_GetDescriptorData(len, &usbFunctionalDescriptor);
 80002c0:	4901      	ldr	r1, [pc, #4]	; (80002c8 <usbGetFunctionalDescriptor+0x8>)
 80002c2:	f001 b85f 	b.w	8001384 <Standard_GetDescriptorData>
 80002c6:	bf00      	nop
 80002c8:	200000e0 	andcs	r0, r0, r0, ror #1

080002cc <usbNoDataSetup>:
    }

    return USB_UNSUPPORT;
}

RESULT usbNoDataSetup(u8 request) {
 80002cc:	b508      	push	{r3, lr}
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 80002ce:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <usbNoDataSetup+0x24>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002d8:	2b21      	cmp	r3, #33	; 0x21
 80002da:	d106      	bne.n	80002ea <usbNoDataSetup+0x1e>
        /* todo, keep track of the destination interface, often stored in wIndex */
        if (dfuUpdateByRequest()) {
 80002dc:	f000 fc0e 	bl	8000afc <dfuUpdateByRequest>
 80002e0:	2800      	cmp	r0, #0
            return USB_SUCCESS;
 80002e2:	bf0c      	ite	eq
 80002e4:	2002      	moveq	r0, #2
 80002e6:	2000      	movne	r0, #0
 80002e8:	bd08      	pop	{r3, pc}
        }
    }
    return USB_UNSUPPORT;
 80002ea:	2002      	movs	r0, #2
}
 80002ec:	bd08      	pop	{r3, pc}
 80002ee:	bf00      	nop
 80002f0:	2000030c 	andcs	r0, r0, ip, lsl #6

080002f4 <setupUSB>:


extern u8 u8_usbConfigDescriptorDFU[];
extern u8 u8_usbFunctionalDescriptor[];

void setupUSB (void) {
 80002f4:	b537      	push	{r0, r1, r2, r4, r5, lr}

/* Generic boards don't have disconnect hardware, so we drive PA12 which is connected to the usb D+ line*/
#define USB_DISC_BANK         GPIOA
#define USB_DISC_PIN              12

    SET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN),(GET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN)) & crMask(USB_DISC_PIN)) | CR_OUTPUT_PP << CR_SHITF(USB_DISC_PIN));
 80002f6:	4c19      	ldr	r4, [pc, #100]	; (800035c <setupUSB+0x68>)
 80002f8:	200c      	movs	r0, #12
 80002fa:	6825      	ldr	r5, [r4, #0]
 80002fc:	f000 fb1c 	bl	8000938 <crMask>
 8000300:	4028      	ands	r0, r5
 8000302:	f440 3580 	orr.w	r5, r0, #65536	; 0x10000
 8000306:	6025      	str	r5, [r4, #0]

    gpio_write_bit(USB_DISC_BANK,USB_DISC_PIN,0);  /* present ourselves to the host */
 8000308:	4815      	ldr	r0, [pc, #84]	; (8000360 <setupUSB+0x6c>)
 800030a:	210c      	movs	r1, #12
 800030c:	2200      	movs	r2, #0
 800030e:	f000 f989 	bl	8000624 <gpio_write_bit>

    volatile unsigned int delay;
    for(delay = 0;delay<512;delay++);
 8000312:	2300      	movs	r3, #0
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	9b01      	ldr	r3, [sp, #4]
 8000318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800031c:	d202      	bcs.n	8000324 <setupUSB+0x30>
 800031e:	9b01      	ldr	r3, [sp, #4]
 8000320:	3301      	adds	r3, #1
 8000322:	e7f7      	b.n	8000314 <setupUSB+0x20>

    //  volatile unsigned x = 1024; do { ; }while(--x);// wait a moment
    /* turn on the USB clock */
    SET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN),
 8000324:	200c      	movs	r0, #12
 8000326:	6825      	ldr	r5, [r4, #0]
 8000328:	f000 fb06 	bl	8000938 <crMask>
 800032c:	4028      	ands	r0, r5
 800032e:	f440 2580 	orr.w	r5, r0, #262144	; 0x40000
 8000332:	6025      	str	r5, [r4, #0]
        (GET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN)) & crMask(USB_DISC_PIN)) | CR_INPUT << CR_SHITF(USB_DISC_PIN)); //Sets the PA12 as floating input
    //  pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
#endif
    /* initialize the usb application */

    wTransferSize=getFlashPageSize();
 8000334:	f000 fb12 	bl	800095c <getFlashPageSize>
 8000338:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <setupUSB+0x70>)
    u8_usbConfigDescriptorDFU[41]=(wTransferSize & 0x00FF);
 800033a:	b2c2      	uxtb	r2, r0
        (GET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN)) & crMask(USB_DISC_PIN)) | CR_INPUT << CR_SHITF(USB_DISC_PIN)); //Sets the PA12 as floating input
    //  pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
#endif
    /* initialize the usb application */

    wTransferSize=getFlashPageSize();
 800033c:	6018      	str	r0, [r3, #0]
    u8_usbConfigDescriptorDFU[41]=(wTransferSize & 0x00FF);
 800033e:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <setupUSB+0x74>)
    u8_usbConfigDescriptorDFU[42]=(wTransferSize & 0xFF00)>>8;
 8000340:	f3c0 2007 	ubfx	r0, r0, #8, #8
    //  pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
#endif
    /* initialize the usb application */

    wTransferSize=getFlashPageSize();
    u8_usbConfigDescriptorDFU[41]=(wTransferSize & 0x00FF);
 8000344:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8_usbConfigDescriptorDFU[42]=(wTransferSize & 0xFF00)>>8;
 8000348:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a

    u8_usbFunctionalDescriptor[5]=(wTransferSize & 0x00FF);
 800034c:	4b07      	ldr	r3, [pc, #28]	; (800036c <setupUSB+0x78>)
 800034e:	715a      	strb	r2, [r3, #5]
    u8_usbFunctionalDescriptor[6]=(wTransferSize & 0xFF00)>>8;
 8000350:	7198      	strb	r0, [r3, #6]

/* Function Definitions */
void usbAppInit(void) {
    /* hook in to usb_core, depends on all those damn
       non encapsulated externs! */
    USB_Init();
 8000352:	f000 fe3f 	bl	8000fd4 <USB_Init>
    u8_usbFunctionalDescriptor[5]=(wTransferSize & 0x00FF);
    u8_usbFunctionalDescriptor[6]=(wTransferSize & 0xFF00)>>8;

    usbAppInit();

}
 8000356:	b003      	add	sp, #12
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	bf00      	nop
 800035c:	40010804 	andmi	r0, r1, r4, lsl #16
 8000360:	40010800 	andmi	r0, r1, r0, lsl #16
 8000364:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8000368:	200000ec 	andcs	r0, r0, ip, ror #1
 800036c:	20000129 	andcs	r0, r0, r9, lsr #2

08000370 <usbSuspend>:
    USB_Init();
}

void usbSuspend(void) {
    u16 wCNTR;
    wCNTR = _GetCNTR();
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <usbSuspend+0x14>)
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	b292      	uxth	r2, r2
    wCNTR |= CNTR_FSUSP | CNTR_LPMODE;
    _SetCNTR(wCNTR);
 8000376:	f042 020c 	orr.w	r2, r2, #12
 800037a:	601a      	str	r2, [r3, #0]

    /* run any power reduction handlers */
    bDeviceState = SUSPENDED;
 800037c:	4b02      	ldr	r3, [pc, #8]	; (8000388 <usbSuspend+0x18>)
 800037e:	2203      	movs	r2, #3
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	4770      	bx	lr
 8000384:	40005c40 	andmi	r5, r0, r0, asr #24
 8000388:	20000318 	andcs	r0, r0, r8, lsl r3

0800038c <usbResumeInit>:
void usbResumeInit(void) {
    u16 wCNTR;

    /* restart any clocks that had been stopped */

    wCNTR = _GetCNTR();
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <usbResumeInit+0x14>)
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 800038e:	f64f 72fb 	movw	r2, #65531	; 0xfffb
void usbResumeInit(void) {
    u16 wCNTR;

    /* restart any clocks that had been stopped */

    wCNTR = _GetCNTR();
 8000392:	6819      	ldr	r1, [r3, #0]
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000394:	400a      	ands	r2, r1
 8000396:	601a      	str	r2, [r3, #0]

    /* undo power reduction handlers here */

    _SetCNTR(ISR_MSK);
 8000398:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	4770      	bx	lr
 80003a0:	40005c40 	andmi	r5, r0, r0, asr #24

080003a4 <usbResume>:
}

void usbResume(RESUME_STATE eResumeSetVal) {
 80003a4:	b510      	push	{r4, lr}
 80003a6:	4c1e      	ldr	r4, [pc, #120]	; (8000420 <usbResume+0x7c>)
    u16 wCNTR;

    if (eResumeSetVal != RESUME_ESOF)
 80003a8:	2807      	cmp	r0, #7
        ResumeS.eState = eResumeSetVal;
 80003aa:	bf18      	it	ne
 80003ac:	7020      	strbne	r0, [r4, #0]

    switch (ResumeS.eState) {
 80003ae:	7823      	ldrb	r3, [r4, #0]
 80003b0:	2b05      	cmp	r3, #5
 80003b2:	d832      	bhi.n	800041a <usbResume+0x76>
 80003b4:	e8df f003 	tbb	[pc, r3]
 80003b8:	0e0a0603 	cfmadd32eq	mvax0, mvfx0, mvfx10, mvfx3
 80003bc:	f7ff2116 			; <UNDEFINED> instruction: 0xf7ff2116
    case RESUME_EXTERNAL:
        usbResumeInit();
 80003c0:	ffe5 e02a 	vaddl.u32	q15, d5, d26
        ResumeS.eState = RESUME_OFF;
        break;
    case RESUME_INTERNAL:
        usbResumeInit();
 80003c4:	f7ff ffe2 	bl	800038c <usbResumeInit>
        ResumeS.eState = RESUME_START;
 80003c8:	2304      	movs	r3, #4
 80003ca:	e027      	b.n	800041c <usbResume+0x78>
        break;
    case RESUME_LATER:
        ResumeS.bESOFcnt = 2;
 80003cc:	2302      	movs	r3, #2
 80003ce:	7063      	strb	r3, [r4, #1]
        ResumeS.eState = RESUME_WAIT;
 80003d0:	2303      	movs	r3, #3
 80003d2:	e023      	b.n	800041c <usbResume+0x78>
        break;
    case RESUME_WAIT:
        ResumeS.bESOFcnt--;
 80003d4:	7863      	ldrb	r3, [r4, #1]
 80003d6:	3b01      	subs	r3, #1
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	7063      	strb	r3, [r4, #1]
        if (ResumeS.bESOFcnt == 0)
 80003dc:	7863      	ldrb	r3, [r4, #1]
 80003de:	b9f3      	cbnz	r3, 800041e <usbResume+0x7a>
            ResumeS.eState = RESUME_START;
 80003e0:	2204      	movs	r2, #4
 80003e2:	e017      	b.n	8000414 <usbResume+0x70>
        break;
    case RESUME_START:
        wCNTR = _GetCNTR();
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <usbResume+0x80>)
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	b292      	uxth	r2, r2
        wCNTR |= CNTR_RESUME;
        _SetCNTR(wCNTR);
 80003ea:	f042 0210 	orr.w	r2, r2, #16
 80003ee:	601a      	str	r2, [r3, #0]
        ResumeS.eState = RESUME_ON;
 80003f0:	2305      	movs	r3, #5
 80003f2:	7023      	strb	r3, [r4, #0]
        ResumeS.bESOFcnt = 10;
 80003f4:	230a      	movs	r3, #10
 80003f6:	7063      	strb	r3, [r4, #1]
        break;
 80003f8:	bd10      	pop	{r4, pc}
    case RESUME_ON:
        ResumeS.bESOFcnt--;
 80003fa:	7863      	ldrb	r3, [r4, #1]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	7063      	strb	r3, [r4, #1]
        if (ResumeS.bESOFcnt == 0) {
 8000402:	7863      	ldrb	r3, [r4, #1]
 8000404:	b95b      	cbnz	r3, 800041e <usbResume+0x7a>
            wCNTR = _GetCNTR();
 8000406:	4a07      	ldr	r2, [pc, #28]	; (8000424 <usbResume+0x80>)
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 8000408:	f64f 73ef 	movw	r3, #65519	; 0xffef
        ResumeS.bESOFcnt = 10;
        break;
    case RESUME_ON:
        ResumeS.bESOFcnt--;
        if (ResumeS.bESOFcnt == 0) {
            wCNTR = _GetCNTR();
 800040c:	6811      	ldr	r1, [r2, #0]
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 800040e:	400b      	ands	r3, r1
 8000410:	6013      	str	r3, [r2, #0]
            ResumeS.eState = RESUME_OFF;
 8000412:	2206      	movs	r2, #6
 8000414:	4b02      	ldr	r3, [pc, #8]	; (8000420 <usbResume+0x7c>)
 8000416:	701a      	strb	r2, [r3, #0]
 8000418:	bd10      	pop	{r4, pc}
        }
        break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
        ResumeS.eState = RESUME_OFF;
 800041a:	2306      	movs	r3, #6
 800041c:	7023      	strb	r3, [r4, #0]
 800041e:	bd10      	pop	{r4, pc}
 8000420:	200002d6 	ldrdcs	r0, [r0], -r6
 8000424:	40005c40 	andmi	r5, r0, r0, asr #24

08000428 <usbPowerOn>:

RESULT usbPowerOn(void) {
    u16 wRegVal;

    wRegVal = CNTR_FRES;
    _SetCNTR(wRegVal);
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <usbPowerOn+0x1c>)
 800042a:	2201      	movs	r2, #1
 800042c:	601a      	str	r2, [r3, #0]

    wInterrupt_Mask = 0;
    _SetCNTR(wInterrupt_Mask);
    _SetISTR(0);
 800042e:	4a06      	ldr	r2, [pc, #24]	; (8000448 <usbPowerOn+0x20>)

    wRegVal = CNTR_FRES;
    _SetCNTR(wRegVal);

    wInterrupt_Mask = 0;
    _SetCNTR(wInterrupt_Mask);
 8000430:	2000      	movs	r0, #0
    _SetISTR(0);
    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 8000432:	4906      	ldr	r1, [pc, #24]	; (800044c <usbPowerOn+0x24>)

    wRegVal = CNTR_FRES;
    _SetCNTR(wRegVal);

    wInterrupt_Mask = 0;
    _SetCNTR(wInterrupt_Mask);
 8000434:	6018      	str	r0, [r3, #0]
    _SetISTR(0);
 8000436:	6010      	str	r0, [r2, #0]
    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 8000438:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800043c:	800a      	strh	r2, [r1, #0]
    _SetCNTR(wInterrupt_Mask);
 800043e:	601a      	str	r2, [r3, #0]

    return USB_SUCCESS;
}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40005c40 	andmi	r5, r0, r0, asr #24
 8000448:	40005c44 	andmi	r5, r0, r4, asr #24
 800044c:	20000310 	andcs	r0, r0, r0, lsl r3

08000450 <usbPowerOff>:

RESULT usbPowerOff(void) {
    _SetCNTR(CNTR_FRES);
 8000450:	4b04      	ldr	r3, [pc, #16]	; (8000464 <usbPowerOff+0x14>)
 8000452:	2201      	movs	r2, #1
 8000454:	601a      	str	r2, [r3, #0]
    _SetISTR(0);
 8000456:	4a04      	ldr	r2, [pc, #16]	; (8000468 <usbPowerOff+0x18>)
 8000458:	2000      	movs	r0, #0
 800045a:	6010      	str	r0, [r2, #0]
    _SetCNTR(CNTR_FRES + CNTR_PDWN);
 800045c:	2203      	movs	r2, #3
 800045e:	601a      	str	r2, [r3, #0]
       usb peripheral. we have no disabled the clocks,
       pulled the USB_DISC_PIN pin back up, or reset the
       application state machines */

    return USB_SUCCESS;
}
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40005c40 	andmi	r5, r0, r0, asr #24
 8000468:	40005c44 	andmi	r5, r0, r4, asr #24

0800046c <usbDsbBus>:



void usbDsbBus(void) {
// setPin(USB_DISC_BANK,USB_DISC_PIN);
usbPowerOff();
 800046c:	f7ff bff0 	b.w	8000450 <usbPowerOff>

08000470 <usbEnbISR>:
    bDeviceState = ADDRESSED;
}
/***** end of USER STANDARD REQUESTS *****/


void usbEnbISR(void) {
 8000470:	b507      	push	{r0, r1, r2, lr}
    NVIC_InitTypeDef NVIC_InitStructure;


    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 8000472:	2314      	movs	r3, #20
 8000474:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	f88d 3005 	strb.w	r3, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800047e:	f88d 3006 	strb.w	r3, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
 8000482:	a801      	add	r0, sp, #4


    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
 8000484:	2301      	movs	r3, #1
 8000486:	f88d 3007 	strb.w	r3, [sp, #7]
    nvicInit(&NVIC_InitStructure);
 800048a:	f000 f99d 	bl	80007c8 <nvicInit>
}
 800048e:	b003      	add	sp, #12
 8000490:	f85d fb04 	ldr.w	pc, [sp], #4

08000494 <usbInit>:
       application state machines */

    return USB_SUCCESS;
}

void usbInit(void) {
 8000494:	b510      	push	{r4, lr}
    dfuInit();
 8000496:	f000 fa6d 	bl	8000974 <dfuInit>

    pInformation->Current_Configuration = 0;
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <usbInit+0x2c>)
 800049c:	2400      	movs	r4, #0
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	729c      	strb	r4, [r3, #10]
    usbPowerOn();
 80004a2:	f7ff ffc1 	bl	8000428 <usbPowerOn>

    _SetISTR(0);
 80004a6:	4b07      	ldr	r3, [pc, #28]	; (80004c4 <usbInit+0x30>)
    wInterrupt_Mask = ISR_MSK;
 80004a8:	4a07      	ldr	r2, [pc, #28]	; (80004c8 <usbInit+0x34>)
    dfuInit();

    pInformation->Current_Configuration = 0;
    usbPowerOn();

    _SetISTR(0);
 80004aa:	601c      	str	r4, [r3, #0]
    wInterrupt_Mask = ISR_MSK;
 80004ac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80004b0:	8013      	strh	r3, [r2, #0]
    _SetCNTR(wInterrupt_Mask);
 80004b2:	4a06      	ldr	r2, [pc, #24]	; (80004cc <usbInit+0x38>)
 80004b4:	6013      	str	r3, [r2, #0]

    usbEnbISR(); /* configure the cortex M3 private peripheral NVIC */
 80004b6:	f7ff ffdb 	bl	8000470 <usbEnbISR>
    bDeviceState = UNCONNECTED;
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <usbInit+0x3c>)
 80004bc:	601c      	str	r4, [r3, #0]
 80004be:	bd10      	pop	{r4, pc}
 80004c0:	2000030c 	andcs	r0, r0, ip, lsl #6
 80004c4:	40005c44 	andmi	r5, r0, r4, asr #24
 80004c8:	20000310 	andcs	r0, r0, r0, lsl r3
 80004cc:	40005c40 	andmi	r5, r0, r0, asr #24
 80004d0:	20000318 	andcs	r0, r0, r8, lsl r3

080004d4 <usbDsbISR>:
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
}

void usbDsbISR(void) {
 80004d4:	b507      	push	{r0, r1, r2, lr}
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 80004d6:	2314      	movs	r3, #20
 80004d8:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
    nvicInit(&NVIC_InitStructure);
 80004dc:	a801      	add	r0, sp, #4
}

void usbDsbISR(void) {
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	f88d 3005 	strb.w	r3, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80004e4:	f88d 3006 	strb.w	r3, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
 80004e8:	f88d 3007 	strb.w	r3, [sp, #7]
    nvicInit(&NVIC_InitStructure);
 80004ec:	f000 f96c 	bl	80007c8 <nvicInit>
}
 80004f0:	b003      	add	sp, #12
 80004f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080004f8 <USB_LP_CAN1_RX0_IRQHandler>:

void USB_LP_CAN1_RX0_IRQHandler(void) {
 80004f8:	b570      	push	{r4, r5, r6, lr}
    wIstr = _GetISTR();
 80004fa:	4d27      	ldr	r5, [pc, #156]	; (8000598 <USB_LP_CAN1_RX0_IRQHandler+0xa0>)
 80004fc:	4c27      	ldr	r4, [pc, #156]	; (800059c <USB_LP_CAN1_RX0_IRQHandler+0xa4>)
 80004fe:	682b      	ldr	r3, [r5, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
 8000500:	4e27      	ldr	r6, [pc, #156]	; (80005a0 <USB_LP_CAN1_RX0_IRQHandler+0xa8>)
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
    nvicInit(&NVIC_InitStructure);
}

void USB_LP_CAN1_RX0_IRQHandler(void) {
    wIstr = _GetISTR();
 8000502:	b29b      	uxth	r3, r3
 8000504:	8023      	strh	r3, [r4, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
 8000506:	8822      	ldrh	r2, [r4, #0]
 8000508:	8833      	ldrh	r3, [r6, #0]
 800050a:	4013      	ands	r3, r2
 800050c:	0559      	lsls	r1, r3, #21
 800050e:	d505      	bpl.n	800051c <USB_LP_CAN1_RX0_IRQHandler+0x24>
        _SetISTR((u16)CLR_RESET);
 8000510:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8000514:	602b      	str	r3, [r5, #0]
        Device_Property.Reset();
 8000516:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <USB_LP_CAN1_RX0_IRQHandler+0xac>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	4798      	blx	r3
    }
#endif


#if (ISR_MSK & ISTR_ERR)
    if (wIstr & ISTR_ERR & wInterrupt_Mask) {
 800051c:	8822      	ldrh	r2, [r4, #0]
 800051e:	8833      	ldrh	r3, [r6, #0]
 8000520:	401a      	ands	r2, r3
 8000522:	0492      	lsls	r2, r2, #18
        _SetISTR((u16)CLR_ERR);
 8000524:	bf44      	itt	mi
 8000526:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 800052a:	602a      	strmi	r2, [r5, #0]
    }
#endif


#if (ISR_MSK & ISTR_WKUP)
    if (wIstr & ISTR_WKUP & wInterrupt_Mask) {
 800052c:	8822      	ldrh	r2, [r4, #0]
 800052e:	4013      	ands	r3, r2
 8000530:	04db      	lsls	r3, r3, #19
 8000532:	d505      	bpl.n	8000540 <USB_LP_CAN1_RX0_IRQHandler+0x48>
        _SetISTR((u16)CLR_WKUP);
 8000534:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000538:	602b      	str	r3, [r5, #0]
        usbResume(RESUME_EXTERNAL);
 800053a:	2000      	movs	r0, #0
 800053c:	f7ff ff32 	bl	80003a4 <usbResume>
    }
#endif

    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_SUSP)
    if (wIstr & ISTR_SUSP & wInterrupt_Mask) {
 8000540:	8822      	ldrh	r2, [r4, #0]
 8000542:	8833      	ldrh	r3, [r6, #0]
 8000544:	4013      	ands	r3, r2
 8000546:	0518      	lsls	r0, r3, #20
 8000548:	d504      	bpl.n	8000554 <USB_LP_CAN1_RX0_IRQHandler+0x5c>

        /* check if SUSPEND is possible */
        if (F_SUSPEND_ENABLED) {
            usbSuspend();
 800054a:	f7ff ff11 	bl	8000370 <usbSuspend>
        } else {
            /* if not possible then resume after xx ms */
            usbResume(RESUME_LATER);
        }
        /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
        _SetISTR((u16)CLR_SUSP);
 800054e:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8000552:	602b      	str	r3, [r5, #0]
    }
#endif


#if (ISR_MSK & ISTR_SOF)
    if (wIstr & ISTR_SOF & wInterrupt_Mask) {
 8000554:	8822      	ldrh	r2, [r4, #0]
 8000556:	8833      	ldrh	r3, [r6, #0]
 8000558:	401a      	ands	r2, r3
 800055a:	0591      	lsls	r1, r2, #22
 800055c:	d507      	bpl.n	800056e <USB_LP_CAN1_RX0_IRQHandler+0x76>
        _SetISTR((u16)CLR_SOF);
 800055e:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8000562:	602a      	str	r2, [r5, #0]
        bIntPackSOF++;
 8000564:	4a10      	ldr	r2, [pc, #64]	; (80005a8 <USB_LP_CAN1_RX0_IRQHandler+0xb0>)
 8000566:	7811      	ldrb	r1, [r2, #0]
 8000568:	3101      	adds	r1, #1
 800056a:	b2c9      	uxtb	r1, r1
 800056c:	7011      	strb	r1, [r2, #0]
    }
#endif


#if (ISR_MSK & ISTR_ESOF)
    if (wIstr & ISTR_ESOF & wInterrupt_Mask) {
 800056e:	8822      	ldrh	r2, [r4, #0]
 8000570:	4013      	ands	r3, r2
 8000572:	05da      	lsls	r2, r3, #23
 8000574:	d505      	bpl.n	8000582 <USB_LP_CAN1_RX0_IRQHandler+0x8a>
        _SetISTR((u16)CLR_ESOF);
 8000576:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800057a:	602b      	str	r3, [r5, #0]
        /* resume handling timing is made with ESOFs */
        usbResume(RESUME_ESOF); /* request without change of the machine state */
 800057c:	2007      	movs	r0, #7
 800057e:	f7ff ff11 	bl	80003a4 <usbResume>
    }
#endif

    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
 8000582:	8822      	ldrh	r2, [r4, #0]
 8000584:	8833      	ldrh	r3, [r6, #0]
 8000586:	4013      	ands	r3, r2
 8000588:	041b      	lsls	r3, r3, #16
 800058a:	d503      	bpl.n	8000594 <USB_LP_CAN1_RX0_IRQHandler+0x9c>
        /* clear of the CTR flag into the sub */
        CTR_LP(); /* low priority ISR defined in the usb core lib */
    }
#endif

}
 800058c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
        /* servicing of the endpoint correct transfer interrupt */
        /* clear of the CTR flag into the sub */
        CTR_LP(); /* low priority ISR defined in the usb core lib */
 8000590:	f000 bc76 	b.w	8000e80 <CTR_LP>
 8000594:	bd70      	pop	{r4, r5, r6, pc}
 8000596:	bf00      	nop
 8000598:	40005c44 	andmi	r5, r0, r4, asr #24
 800059c:	200002d4 	ldrdcs	r0, [r0], -r4
 80005a0:	20000310 	andcs	r0, r0, r0, lsl r3
 80005a4:	20000000 	andcs	r0, r0, r0
 80005a8:	20000314 	andcs	r0, r0, r4, lsl r3

080005ac <main>:
#include "common.h"
#include "dfu.h"
extern volatile dfuUploadTypes_t userUploadType;

int main()
{
 80005ac:	b508      	push	{r3, lr}
  bool no_user_jump = FALSE;
  bool dont_wait = FALSE;

  systemReset(); // peripherals but not PC
 80005ae:	f000 f84d 	bl	800064c <systemReset>
  setupCLK();
 80005b2:	f000 f86f 	bl	8000694 <setupCLK>
  setupLEDAndButton();
 80005b6:	f000 f89d 	bl	80006f4 <setupLEDAndButton>
  setupUSB();
 80005ba:	f7ff fe9b 	bl	80002f4 <setupUSB>
  setupFLASH();
 80005be:	f000 f8a5 	bl	800070c <setupFLASH>

  switch(checkAndClearBootloaderFlag())
 80005c2:	f000 f8dd 	bl	8000780 <checkAndClearBootloaderFlag>
 80005c6:	2801      	cmp	r0, #1
 80005c8:	d00f      	beq.n	80005ea <main+0x3e>
 80005ca:	2802      	cmp	r0, #2
 80005cc:	d014      	beq.n	80005f8 <main+0x4c>

    #ifndef NOLED
    strobePin(LED_BANK, LED_PIN, STARTUP_BLINKS, BLINK_FAST,LED_ON_STATE);
    #endif

    if (!checkUserCode(USER_CODE_FLASH0X8005000) && !checkUserCode(USER_CODE_FLASH0X8002000))
 80005ce:	4813      	ldr	r0, [pc, #76]	; (800061c <main+0x70>)
 80005d0:	f000 f8aa 	bl	8000728 <checkUserCode>
 80005d4:	b118      	cbz	r0, 80005de <main+0x32>
    {
      no_user_jump = TRUE;
    }
    else if (readButtonState())
 80005d6:	f000 f831 	bl	800063c <readButtonState>
 80005da:	b930      	cbnz	r0, 80005ea <main+0x3e>
 80005dc:	e00c      	b.n	80005f8 <main+0x4c>

    #ifndef NOLED
    strobePin(LED_BANK, LED_PIN, STARTUP_BLINKS, BLINK_FAST,LED_ON_STATE);
    #endif

    if (!checkUserCode(USER_CODE_FLASH0X8005000) && !checkUserCode(USER_CODE_FLASH0X8002000))
 80005de:	4810      	ldr	r0, [pc, #64]	; (8000620 <main+0x74>)
 80005e0:	f000 f8a2 	bl	8000728 <checkUserCode>
 80005e4:	2800      	cmp	r0, #0
 80005e6:	d1f6      	bne.n	80005d6 <main+0x2a>
 80005e8:	e006      	b.n	80005f8 <main+0x4c>
    while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
    {
      #ifndef NOLED
      strobePin(LED_BANK, LED_PIN, 1, BLINK_SLOW,LED_ON_STATE);
      #endif
      if (dfuUploadStarted())
 80005ea:	f000 fba5 	bl	8000d38 <dfuUploadStarted>
 80005ee:	2800      	cmp	r0, #0
 80005f0:	d0fb      	beq.n	80005ea <main+0x3e>
      {
        dfuFinishUpload(); // systemHardReset from DFU once done
 80005f2:	f000 fba7 	bl	8000d44 <dfuFinishUpload>
 80005f6:	e7f8      	b.n	80005ea <main+0x3e>
      //   break;
      // }
    }
  }

  if (checkUserCode(USER_CODE_FLASH0X8002000))
 80005f8:	4809      	ldr	r0, [pc, #36]	; (8000620 <main+0x74>)
 80005fa:	f000 f895 	bl	8000728 <checkUserCode>
 80005fe:	b108      	cbz	r0, 8000604 <main+0x58>
  {
    jumpToUser(USER_CODE_FLASH0X8002000);
 8000600:	4807      	ldr	r0, [pc, #28]	; (8000620 <main+0x74>)
 8000602:	e004      	b.n	800060e <main+0x62>
  }
  else
  {
    if (checkUserCode(USER_CODE_FLASH0X8005000))
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <main+0x70>)
 8000606:	f000 f88f 	bl	8000728 <checkUserCode>
 800060a:	b118      	cbz	r0, 8000614 <main+0x68>
    {
      jumpToUser(USER_CODE_FLASH0X8005000);
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <main+0x70>)
 800060e:	f000 f923 	bl	8000858 <jumpToUser>
 8000612:	e001      	b.n	8000618 <main+0x6c>
      // Nothing to execute in either Flash or RAM
      #ifndef NOLED
      strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);
      #endif

      systemHardReset();
 8000614:	f000 f934 	bl	8000880 <systemHardReset>
    }
  }

  return 0;// Added to please the compiler
}
 8000618:	2000      	movs	r0, #0
 800061a:	bd08      	pop	{r3, pc}
 800061c:	08005000 	stmdaeq	r0, {ip, lr}
 8000620:	08002000 	stmdaeq	r0, {sp}

08000624 <gpio_write_bit>:
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 8000624:	2301      	movs	r3, #1
 8000626:	fa03 f101 	lsl.w	r1, r3, r1
    u32 pinMask = 0x1 << (16 + pin);
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits
 800062a:	f1d2 0201 	rsbs	r2, r2, #1
 800062e:	bf38      	it	cc
 8000630:	2200      	movcc	r2, #0
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 8000632:	0113      	lsls	r3, r2, #4
 8000634:	4099      	lsls	r1, r3
 8000636:	6101      	str	r1, [r0, #16]
 8000638:	4770      	bx	lr
	...

0800063c <readButtonState>:

bool readButtonState() {
    // todo, implement read
    bool state=FALSE;
#if defined(BUTTON_BANK) && defined (BUTTON_PIN) && defined (BUTTON_PRESSED_STATE)
    if (GET_REG(GPIO_IDR(BUTTON_BANK)) & (0x01 << BUTTON_PIN))
 800063c:	4b02      	ldr	r3, [pc, #8]	; (8000648 <readButtonState+0xc>)
 800063e:	6818      	ldr	r0, [r3, #0]
    {
        state=!state;
    }
#endif
    return state;
}
 8000640:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40010c08 	andmi	r0, r1, r8, lsl #24

0800064c <systemReset>:
        gpio_write_bit( bank,pin,1-onState);
    }
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <systemReset+0x38>)
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 800064e:	490e      	ldr	r1, [pc, #56]	; (8000688 <systemReset+0x3c>)
        gpio_write_bit( bank,pin,1-onState);
    }
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	f042 0201 	orr.w	r2, r2, #1
 8000656:	601a      	str	r2, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8000658:	4a0c      	ldr	r2, [pc, #48]	; (800068c <systemReset+0x40>)
 800065a:	6810      	ldr	r0, [r2, #0]
 800065c:	4001      	ands	r1, r0
 800065e:	6011      	str	r1, [r2, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
 8000660:	6819      	ldr	r1, [r3, #0]
 8000662:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000666:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800066a:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
 800066c:	6819      	ldr	r1, [r3, #0]
 800066e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000672:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);
 8000674:	6813      	ldr	r3, [r2, #0]
 8000676:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800067a:	6013      	str	r3, [r2, #0]

    SET_REG(RCC_CIR, 0x00000000);  /* disable all RCC interrupts */
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <systemReset+0x44>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	4770      	bx	lr
 8000684:	40021000 	andmi	r1, r2, r0
 8000688:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000
 800068c:	40021004 	andmi	r1, r2, r4
 8000690:	40021008 	andmi	r1, r2, r8

08000694 <setupCLK>:
}

void setupCLK(void) {
    unsigned int StartUpCounter=0;
    /* enable HSE */
    SET_REG(RCC_CR, GET_REG(RCC_CR) | 0x00010001);
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <setupCLK+0x58>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
 800069c:	601a      	str	r2, [r3, #0]
    while ((GET_REG(RCC_CR) & 0x00020000) == 0); /* for it to come on */
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4812      	ldr	r0, [pc, #72]	; (80006ec <setupCLK+0x58>)
 80006a2:	0392      	lsls	r2, r2, #14
 80006a4:	d5fb      	bpl.n	800069e <setupCLK+0xa>

    /* enable flash prefetch buffer */
    SET_REG(FLASH_ACR, 0x00000012);
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <setupCLK+0x5c>)
 80006a8:	2112      	movs	r1, #18
 80006aa:	6011      	str	r1, [r2, #0]

    /* Configure PLL */
#ifdef XTAL12M
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00110400); /* pll=72Mhz(x6),APB1=36Mhz,AHB=72Mhz */
#else
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x001D0400); /* pll=72Mhz(x9),APB1=36Mhz,AHB=72Mhz */
 80006ac:	f6a2 72fc 	subw	r2, r2, #4092	; 0xffc
 80006b0:	6811      	ldr	r1, [r2, #0]
 80006b2:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 80006b6:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80006ba:	6011      	str	r1, [r2, #0]
#endif

    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x01000000); /* enable the pll */
 80006bc:	6801      	ldr	r1, [r0, #0]
 80006be:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80006c2:	6001      	str	r1, [r0, #0]

#if !defined  (HSE_STARTUP_TIMEOUT)
#define HSE_STARTUP_TIMEOUT    ((unsigned int)0x0500)   /*!< Time out for HSE start up */
#endif /* HSE_STARTUP_TIMEOUT */

    while ((GET_REG(RCC_CR) & 0x03000000) == 0 && StartUpCounter < HSE_STARTUP_TIMEOUT)
 80006c4:	6819      	ldr	r1, [r3, #0]
 80006c6:	f011 7f40 	tst.w	r1, #50331648	; 0x3000000
 80006ca:	d0fb      	beq.n	80006c4 <setupCLK+0x30>
        // HSE has not started. Try restarting the processor
        systemHardReset();
    }

    /* Set SYSCLK as PLL */
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00000002);
 80006cc:	6811      	ldr	r1, [r2, #0]
 80006ce:	f041 0102 	orr.w	r1, r1, #2
 80006d2:	6011      	str	r1, [r2, #0]
    while ((GET_REG(RCC_CFGR) & 0x00000008) == 0); /* wait for it to come on */
 80006d4:	6811      	ldr	r1, [r2, #0]
 80006d6:	0709      	lsls	r1, r1, #28
 80006d8:	d5fc      	bpl.n	80006d4 <setupCLK+0x40>

    pRCC->APB2ENR |= 0B111111100;// Enable All GPIO channels (A to G)
 80006da:	699a      	ldr	r2, [r3, #24]
 80006dc:	f442 72fe 	orr.w	r2, r2, #508	; 0x1fc
 80006e0:	619a      	str	r2, [r3, #24]
    pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
 80006e2:	69da      	ldr	r2, [r3, #28]
 80006e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80006e8:	61da      	str	r2, [r3, #28]
 80006ea:	4770      	bx	lr
 80006ec:	40021000 	andmi	r1, r2, r0
 80006f0:	40022000 	andmi	r2, r2, r0

080006f4 <setupLEDAndButton>:

void setupLEDAndButton (void) {
    // SET_REG(AFIO_MAPR,(GET_REG(AFIO_MAPR) & ~AFIO_MAPR_SWJ_CFG) | AFIO_MAPR_SWJ_CFG_NO_JTAG_NO_SW);// Try to disable SWD AND JTAG so we can use those pins (not sure if this works).

#if defined(BUTTON_BANK) && defined (BUTTON_PIN) && defined (BUTTON_PRESSED_STATE)
    SET_REG(GPIO_CR(BUTTON_BANK,BUTTON_PIN),(GPIO_CR(BUTTON_BANK,BUTTON_PIN) & crMask(BUTTON_PIN)) | BUTTON_INPUT_MODE << CR_SHITF(BUTTON_PIN));
 80006f4:	4a03      	ldr	r2, [pc, #12]	; (8000704 <setupLEDAndButton+0x10>)
 80006f6:	4b04      	ldr	r3, [pc, #16]	; (8000708 <setupLEDAndButton+0x14>)
 80006f8:	601a      	str	r2, [r3, #0]
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 80006fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006fe:	611a      	str	r2, [r3, #16]
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	80010c00 	andhi	r0, r1, r0, lsl #24
 8000708:	40010c00 	andmi	r0, r1, r0, lsl #24

0800070c <setupFLASH>:
  #endif
}

void setupFLASH() {
    /* configure the HSI oscillator */
    if ((pRCC->CR & 0x01) == 0x00) {
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <setupFLASH+0x18>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	07d1      	lsls	r1, r2, #31
 8000712:	d403      	bmi.n	800071c <setupFLASH+0x10>
        u32 rwmVal = pRCC->CR;
 8000714:	681a      	ldr	r2, [r3, #0]
        rwmVal |= 0x01;
 8000716:	f042 0201 	orr.w	r2, r2, #1
        pRCC->CR = rwmVal;
 800071a:	601a      	str	r2, [r3, #0]
    }

    /* wait for it to come on */
    while ((pRCC->CR & 0x02) == 0x00) {}
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	0792      	lsls	r2, r2, #30
 8000720:	d5fc      	bpl.n	800071c <setupFLASH+0x10>
}
 8000722:	4770      	bx	lr
 8000724:	40021000 	andmi	r1, r2, r0

08000728 <checkUserCode>:

bool checkUserCode(u32 usrAddr) {
    u32 sp = *(vu32 *) usrAddr;
 8000728:	6803      	ldr	r3, [r0, #0]

    if ((sp & 0x2FFE0000) == 0x20000000) {
 800072a:	4803      	ldr	r0, [pc, #12]	; (8000738 <checkUserCode+0x10>)
 800072c:	4018      	ands	r0, r3
        return (TRUE);
    } else {
        return (FALSE);
    }
}
 800072e:	f1b0 5300 	subs.w	r3, r0, #536870912	; 0x20000000
 8000732:	4258      	negs	r0, r3
 8000734:	4158      	adcs	r0, r3
 8000736:	4770      	bx	lr
 8000738:	2ffe0000 	svccs	0x00fe0000

0800073c <setMspAndJump>:
    typedef void (*funcPtr)(void);
    u32 jumpAddr = *(vu32 *)(usrAddr + 0x04); /* reset ptr in vector table */

    funcPtr usrMain = (funcPtr) jumpAddr;

    SET_REG(SCB_VTOR, (vu32) (usrAddr));
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <setMspAndJump+0x14>)
    } else {
        return (FALSE);
    }
}

void setMspAndJump(u32 usrAddr) {
 800073e:	b508      	push	{r3, lr}
    // Dedicated function with no call to any function (appart the last call)
    // This way, there is no manipulation of the stack here, ensuring that GGC
    // didn't insert any pop from the SP after having set the MSP.
    typedef void (*funcPtr)(void);
    u32 jumpAddr = *(vu32 *)(usrAddr + 0x04); /* reset ptr in vector table */
 8000740:	6843      	ldr	r3, [r0, #4]

    funcPtr usrMain = (funcPtr) jumpAddr;

    SET_REG(SCB_VTOR, (vu32) (usrAddr));
 8000742:	6010      	str	r0, [r2, #0]

    asm volatile("msr msp, %0"::"g"(*(volatile u32 *)usrAddr));
 8000744:	6802      	ldr	r2, [r0, #0]
 8000746:	f382 8808 	msr	MSP, r2

    usrMain();                                /* go! */
 800074a:	4798      	blx	r3
 800074c:	bd08      	pop	{r3, pc}
 800074e:	bf00      	nop
 8000750:	e000ed08 	and	lr, r0, r8, lsl #26

08000754 <bkp10Write>:
}

void bkp10Write(u16 value)
{
        // Enable clocks for the backup domain registers
        pRCC->APB1ENR |= (RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <bkp10Write+0x24>)
 8000756:	69da      	ldr	r2, [r3, #28]
 8000758:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
 800075c:	61da      	str	r2, [r3, #28]
        //pRCC->APB1ENR = 0;

        // Disable backup register write protection
        pPWR->CR |= PWR_CR_DBP;
 800075e:	f5a3 33d0 	sub.w	r3, r3, #106496	; 0x1a000
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000768:	601a      	str	r2, [r3, #0]
        //pPWR->CR |= (1 << 8)

        // store value in pBK DR10
        pBKP->DR10 = value;
 800076a:	4a04      	ldr	r2, [pc, #16]	; (800077c <bkp10Write+0x28>)
 800076c:	8510      	strh	r0, [r2, #40]	; 0x28

        // Re-enable backup register write protection
        pPWR->CR &=~ PWR_CR_DBP;
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	4770      	bx	lr
 8000778:	40021000 	andmi	r1, r2, r0
 800077c:	40006c00 	andmi	r6, r0, r0, lsl #24

08000780 <checkAndClearBootloaderFlag>:
        //pPWR->CR &=~ (1 << 8)
}

int checkAndClearBootloaderFlag()
{
 8000780:	b538      	push	{r3, r4, r5, lr}
    bool flagSet = 0x00;// Flag not used

    // Enable clocks for the backup domain registers
    pRCC->APB1ENR |= (RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <checkAndClearBootloaderFlag+0x40>)

    switch (pBKP->DR10)
 8000784:	f244 214c 	movw	r1, #16972	; 0x424c
int checkAndClearBootloaderFlag()
{
    bool flagSet = 0x00;// Flag not used

    // Enable clocks for the backup domain registers
    pRCC->APB1ENR |= (RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
 8000788:	69da      	ldr	r2, [r3, #28]
 800078a:	461d      	mov	r5, r3
 800078c:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
 8000790:	61da      	str	r2, [r3, #28]

    switch (pBKP->DR10)
 8000792:	4a0c      	ldr	r2, [pc, #48]	; (80007c4 <checkAndClearBootloaderFlag+0x44>)
 8000794:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8000796:	b292      	uxth	r2, r2
 8000798:	428a      	cmp	r2, r1
 800079a:	d005      	beq.n	80007a8 <checkAndClearBootloaderFlag+0x28>
 800079c:	f244 234d 	movw	r3, #16973	; 0x424d
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d003      	beq.n	80007ac <checkAndClearBootloaderFlag+0x2c>
        //pPWR->CR &=~ (1 << 8)
}

int checkAndClearBootloaderFlag()
{
    bool flagSet = 0x00;// Flag not used
 80007a4:	2400      	movs	r4, #0
 80007a6:	e009      	b.n	80007bc <checkAndClearBootloaderFlag+0x3c>
    pRCC->APB1ENR |= (RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);

    switch (pBKP->DR10)
    {
        case RTC_BOOTLOADER_FLAG:
            flagSet = 0x01;
 80007a8:	2401      	movs	r4, #1
 80007aa:	e000      	b.n	80007ae <checkAndClearBootloaderFlag+0x2e>
            break;
        case RTC_BOOTLOADER_JUST_UPLOADED:
            flagSet = 0x02;
 80007ac:	2402      	movs	r4, #2
            break;
    }

    if (flagSet!=0x00)
    {
        bkp10Write(0x0000);// Clear the flag
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff ffd0 	bl	8000754 <bkp10Write>
        // Disable clocks
        pRCC->APB1ENR &= ~(RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
 80007b4:	69eb      	ldr	r3, [r5, #28]
 80007b6:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 80007ba:	61eb      	str	r3, [r5, #28]
    }



    return flagSet;
}
 80007bc:	4620      	mov	r0, r4
 80007be:	bd38      	pop	{r3, r4, r5, pc}
 80007c0:	40021000 	andmi	r1, r2, r0
 80007c4:	40006c00 	andmi	r6, r0, r0, lsl #24

080007c8 <nvicInit>:
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <nvicInit+0x64>)
    return flagSet;
}



void nvicInit(NVIC_InitTypeDef *NVIC_InitStruct) {
 80007ca:	b530      	push	{r4, r5, lr}
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 80007cc:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80007ce:	7844      	ldrb	r4, [r0, #1]
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 80007d0:	43db      	mvns	r3, r3
 80007d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 80007d6:	f1c3 0204 	rsb	r2, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80007da:	fa04 f202 	lsl.w	r2, r4, r2


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80007de:	240f      	movs	r4, #15
 80007e0:	40dc      	lsrs	r4, r3

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80007e2:	7881      	ldrb	r1, [r0, #2]

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007e4:	7803      	ldrb	r3, [r0, #0]
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80007e6:	400c      	ands	r4, r1
 80007e8:	4314      	orrs	r4, r2

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007ea:	f003 0103 	and.w	r1, r3, #3
 80007ee:	00c9      	lsls	r1, r1, #3
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 80007f0:	0124      	lsls	r4, r4, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007f2:	22ff      	movs	r2, #255	; 0xff

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007f4:	408c      	lsls	r4, r1

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007f6:	408a      	lsls	r2, r1
 80007f8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80007fc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000800:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 8000804:	f8d3 5300 	ldr.w	r5, [r3, #768]	; 0x300
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 8000808:	ea25 0102 	bic.w	r1, r5, r2
    tmppriority &= tmpmask;
 800080c:	4022      	ands	r2, r4
    tmpreg |= tmppriority;
 800080e:	430a      	orrs	r2, r1

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 8000810:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8000814:	7803      	ldrb	r3, [r0, #0]
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8000816:	2201      	movs	r2, #1
    tmpreg |= tmppriority;

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8000818:	0959      	lsrs	r1, r3, #5
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 800081a:	f003 031f 	and.w	r3, r3, #31
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
    tmpreg |= tmppriority;

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8000822:	4a03      	ldr	r2, [pc, #12]	; (8000830 <nvicInit+0x68>)
 8000824:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8000828:	bd30      	pop	{r4, r5, pc}
 800082a:	bf00      	nop
 800082c:	e000ed00 	and	lr, r0, r0, lsl #26
 8000830:	e000e100 	and	lr, r0, r0, lsl #2

08000834 <nvicDisableInterrupts>:
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
}

void nvicDisableInterrupts() {
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;
    rNVIC->ICER[0] = 0xFFFFFFFF;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <nvicDisableInterrupts+0x20>)
 8000836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800083a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    rNVIC->ICER[1] = 0xFFFFFFFF;
 800083e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    rNVIC->ICPR[0] = 0xFFFFFFFF;
 8000842:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    rNVIC->ICPR[1] = 0xFFFFFFFF;
 8000846:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    SET_REG(STK_CTRL, 0x04); /* disable the systick, which operates separately from nvic */
 800084a:	2204      	movs	r2, #4
 800084c:	f843 2cf0 	str.w	r2, [r3, #-240]
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000e100 	and	lr, r0, r0, lsl #2

08000858 <jumpToUser>:

    usrMain();                                /* go! */
}


void jumpToUser(u32 usrAddr) {
 8000858:	b510      	push	{r4, lr}

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <jumpToUser+0x24>)
 800085c:	2280      	movs	r2, #128	; 0x80

    usrMain();                                /* go! */
}


void jumpToUser(u32 usrAddr) {
 800085e:	4604      	mov	r4, r0

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 8000860:	601a      	str	r2, [r3, #0]

    /* tear down all the dfu related setup */
    // disable usb interrupts, clear them, turn off usb, set the disc pin
    // todo pick exactly what we want to do here, now its just a conservative
    flashLock();
    usbDsbISR();
 8000862:	f7ff fe37 	bl	80004d4 <usbDsbISR>
    nvicDisableInterrupts();
 8000866:	f7ff ffe5 	bl	8000834 <nvicDisableInterrupts>

#ifndef HAS_MAPLE_HARDWARE
    usbDsbBus();
 800086a:	f7ff fdff 	bl	800046c <usbDsbBus>
#endif

// Does nothing, as PC12 is not connected on teh Maple mini according to the schemmatic     setPin(GPIOC, 12); // disconnect usb from host. todo, macroize pin
    systemReset(); // resets clocks and periphs, not core regs
 800086e:	f7ff feed 	bl	800064c <systemReset>

    setMspAndJump(usrAddr);
 8000872:	4620      	mov	r0, r4
}
 8000874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif

// Does nothing, as PC12 is not connected on teh Maple mini according to the schemmatic     setPin(GPIOC, 12); // disconnect usb from host. todo, macroize pin
    systemReset(); // resets clocks and periphs, not core regs

    setMspAndJump(usrAddr);
 8000878:	f7ff bf60 	b.w	800073c <setMspAndJump>
 800087c:	40022010 	andmi	r2, r2, r0, lsl r0

08000880 <systemHardReset>:

void systemHardReset(void) {
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;

    /* Reset  */
    rSCB->AIRCR = (u32)AIRCR_RESET_REQ;
 8000880:	4a02      	ldr	r2, [pc, #8]	; (800088c <systemHardReset+0xc>)
 8000882:	4b03      	ldr	r3, [pc, #12]	; (8000890 <systemHardReset+0x10>)
 8000884:	60da      	str	r2, [r3, #12]

    /*  should never get here */
    while (1) {
        asm volatile("nop");
 8000886:	bf00      	nop
 8000888:	e7fd      	b.n	8000886 <systemHardReset+0x6>
 800088a:	bf00      	nop
 800088c:	05fa0004 	ldrbeq	r0, [sl, #4]!
 8000890:	e000ed00 	and	lr, r0, r0, lsl #26

08000894 <flashErasePage>:
    }
}

bool flashErasePage(u32 pageAddr) {
    u32 rwmVal = GET_REG(FLASH_CR);
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <flashErasePage+0x2c>)
    while (1) {
        asm volatile("nop");
    }
}

bool flashErasePage(u32 pageAddr) {
 8000896:	b510      	push	{r4, lr}
    u32 rwmVal = GET_REG(FLASH_CR);
 8000898:	681a      	ldr	r2, [r3, #0]
    rwmVal = FLASH_CR_PER;
    SET_REG(FLASH_CR, rwmVal);
 800089a:	2202      	movs	r2, #2
 800089c:	601a      	str	r2, [r3, #0]

    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 800089e:	4a09      	ldr	r2, [pc, #36]	; (80008c4 <flashErasePage+0x30>)
 80008a0:	6811      	ldr	r1, [r2, #0]
 80008a2:	4614      	mov	r4, r2
 80008a4:	f011 0f01 	tst.w	r1, #1
 80008a8:	d1f9      	bne.n	800089e <flashErasePage+0xa>
    SET_REG(FLASH_AR, pageAddr);
 80008aa:	6090      	str	r0, [r2, #8]
    SET_REG(FLASH_CR, FLASH_CR_START | FLASH_CR_PER);
 80008ac:	2242      	movs	r2, #66	; 0x42
 80008ae:	601a      	str	r2, [r3, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80008b0:	6822      	ldr	r2, [r4, #0]
 80008b2:	f012 0101 	ands.w	r1, r2, #1
 80008b6:	d1fb      	bne.n	80008b0 <flashErasePage+0x1c>

    /* todo: verify the page was erased */

    rwmVal = 0x00;
    SET_REG(FLASH_CR, rwmVal);
 80008b8:	6019      	str	r1, [r3, #0]

    return TRUE;
}
 80008ba:	2001      	movs	r0, #1
 80008bc:	bd10      	pop	{r4, pc}
 80008be:	bf00      	nop
 80008c0:	40022010 	andmi	r2, r2, r0, lsl r0
 80008c4:	4002200c 	andmi	r2, r2, ip

080008c8 <flashWriteWord>:
    }

    return TRUE;
}

bool flashWriteWord(u32 addr, u32 word) {
 80008c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
 80008ca:	b28b      	uxth	r3, r1
 80008cc:	9300      	str	r3, [sp, #0]
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;
 80008ce:	0c0b      	lsrs	r3, r1, #16
 80008d0:	9301      	str	r3, [sp, #4]

    u32 rwmVal = GET_REG(FLASH_CR);
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <flashWriteWord+0x44>)
    SET_REG(FLASH_CR, FLASH_CR_PG);
 80008d4:	2201      	movs	r2, #1
bool flashWriteWord(u32 addr, u32 word) {
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;

    u32 rwmVal = GET_REG(FLASH_CR);
 80008d6:	681c      	ldr	r4, [r3, #0]
    SET_REG(FLASH_CR, FLASH_CR_PG);
 80008d8:	601a      	str	r2, [r3, #0]

    /* apparently we need not write to FLASH_AR and can
       simply do a native write of a half word */
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80008da:	4a0d      	ldr	r2, [pc, #52]	; (8000910 <flashWriteWord+0x48>)
 80008dc:	6815      	ldr	r5, [r2, #0]
 80008de:	07ed      	lsls	r5, r5, #31
 80008e0:	d4fb      	bmi.n	80008da <flashWriteWord+0x12>
    *(flashAddr + 0x01) = (vu16)hhWord;
 80008e2:	9d01      	ldr	r5, [sp, #4]
 80008e4:	b2ad      	uxth	r5, r5
 80008e6:	8045      	strh	r5, [r0, #2]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80008e8:	6815      	ldr	r5, [r2, #0]
 80008ea:	07ed      	lsls	r5, r5, #31
 80008ec:	d4fc      	bmi.n	80008e8 <flashWriteWord+0x20>
    *(flashAddr) = (vu16)lhWord;
 80008ee:	9d00      	ldr	r5, [sp, #0]
 80008f0:	b2ad      	uxth	r5, r5
 80008f2:	8005      	strh	r5, [r0, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80008f4:	6815      	ldr	r5, [r2, #0]
 80008f6:	07ed      	lsls	r5, r5, #31
 80008f8:	d4fc      	bmi.n	80008f4 <flashWriteWord+0x2c>

    rwmVal &= 0xFFFFFFFE;
 80008fa:	f024 0201 	bic.w	r2, r4, #1
    SET_REG(FLASH_CR, rwmVal);
 80008fe:	601a      	str	r2, [r3, #0]

    /* verify the write */
    if (*(vu32 *)addr != word) {
 8000900:	6800      	ldr	r0, [r0, #0]
        return FALSE;
    }

    return TRUE;
}
 8000902:	1a43      	subs	r3, r0, r1
 8000904:	4258      	negs	r0, r3
 8000906:	4158      	adcs	r0, r3
 8000908:	b003      	add	sp, #12
 800090a:	bd30      	pop	{r4, r5, pc}
 800090c:	40022010 	andmi	r2, r2, r0, lsl r0
 8000910:	4002200c 	andmi	r2, r2, ip

08000914 <flashLock>:

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 8000914:	4b01      	ldr	r3, [pc, #4]	; (800091c <flashLock+0x8>)
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	4770      	bx	lr
 800091c:	40022010 	andmi	r2, r2, r0, lsl r0

08000920 <flashUnlock>:
}

void flashUnlock() {
    /* unlock the flash */
    SET_REG(FLASH_KEYR, FLASH_KEY1);
 8000920:	4b03      	ldr	r3, [pc, #12]	; (8000930 <flashUnlock+0x10>)
 8000922:	4a04      	ldr	r2, [pc, #16]	; (8000934 <flashUnlock+0x14>)
 8000924:	601a      	str	r2, [r3, #0]
    SET_REG(FLASH_KEYR, FLASH_KEY2);
 8000926:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40022004 	andmi	r2, r2, r4
 8000934:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123

08000938 <crMask>:

// Used to create the control register masking pattern, when setting control register mode.
unsigned int crMask(int pin)
{
    unsigned int mask;
    if (pin>=8)
 8000938:	2807      	cmp	r0, #7
    {
        pin-=8;
 800093a:	bfc8      	it	gt
 800093c:	3808      	subgt	r0, #8
    }
    mask = 0x0F << (pin<<2);
 800093e:	230f      	movs	r3, #15
 8000940:	0080      	lsls	r0, r0, #2
 8000942:	fa03 f000 	lsl.w	r0, r3, r0
    return ~mask;
}
 8000946:	43c0      	mvns	r0, r0
 8000948:	4770      	bx	lr
	...

0800094c <getFlashEnd>:

#define FLASH_SIZE_REG 0x1FFFF7E0
int getFlashEnd(void)
{
    unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register
    return ((int)(*flashSize & 0xffff) * 1024) + 0x08000000;
 800094c:	4b02      	ldr	r3, [pc, #8]	; (8000958 <getFlashEnd+0xc>)
 800094e:	8818      	ldrh	r0, [r3, #0]
 8000950:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
}
 8000954:	0280      	lsls	r0, r0, #10
 8000956:	4770      	bx	lr
 8000958:	1ffff7e0 	svcne	0x00fff7e0

0800095c <getFlashPageSize>:

int getFlashPageSize(void)
{

    unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register
    if ((*flashSize & 0xffff) > 128)
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <getFlashPageSize+0x14>)
 800095e:	881b      	ldrh	r3, [r3, #0]
    {
        return 0x800;
 8000960:	2b81      	cmp	r3, #129	; 0x81
    }
    else
    {
        return 0x400;
    }
}
 8000962:	bf34      	ite	cc
 8000964:	f44f 6080 	movcc.w	r0, #1024	; 0x400
 8000968:	f44f 6000 	movcs.w	r0, #2048	; 0x800
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	1ffff7e0 	svcne	0x00fff7e0

08000974 <dfuInit>:

volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <dfuInit+0x38>)
 8000976:	2300      	movs	r3, #0
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
 8000978:	2102      	movs	r1, #2

volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
 800097a:	7013      	strb	r3, [r2, #0]
    dfuAppStatus.bwPollTimeout0 = 0x00;
 800097c:	7053      	strb	r3, [r2, #1]
    dfuAppStatus.bwPollTimeout1 = 0x00;
 800097e:	7093      	strb	r3, [r2, #2]
    dfuAppStatus.bwPollTimeout2 = 0x00;
 8000980:	70d3      	strb	r3, [r2, #3]
    dfuAppStatus.bState = dfuIDLE;
 8000982:	7111      	strb	r1, [r2, #4]
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
 8000984:	7153      	strb	r3, [r2, #5]
    userFirmwareLen = 0;
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <dfuInit+0x3c>)
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 8000988:	490a      	ldr	r1, [pc, #40]	; (80009b4 <dfuInit+0x40>)
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
 800098a:	6013      	str	r3, [r2, #0]
    thisBlockLen = 0;;
 800098c:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <dfuInit+0x44>)
 800098e:	8013      	strh	r3, [r2, #0]
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 8000990:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <dfuInit+0x48>)
 8000992:	6011      	str	r1, [r2, #0]
    userAppEnd = RAM_END;
 8000994:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <dfuInit+0x4c>)
 8000996:	f501 4188 	add.w	r1, r1, #17408	; 0x4400
 800099a:	6011      	str	r1, [r2, #0]
    userUploadType=DFU_UPLOAD_NONE;
 800099c:	4a09      	ldr	r2, [pc, #36]	; (80009c4 <dfuInit+0x50>)
    code_copy_lock = WAIT;
 800099e:	2103      	movs	r1, #3
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
    userAppEnd = RAM_END;
    userUploadType=DFU_UPLOAD_NONE;
 80009a0:	7013      	strb	r3, [r2, #0]
    code_copy_lock = WAIT;
 80009a2:	4a09      	ldr	r2, [pc, #36]	; (80009c8 <dfuInit+0x54>)
 80009a4:	7011      	strb	r1, [r2, #0]
    dfuBusy = FALSE;
 80009a6:	4a09      	ldr	r2, [pc, #36]	; (80009cc <dfuInit+0x58>)
 80009a8:	7013      	strb	r3, [r2, #0]
 80009aa:	4770      	bx	lr
 80009ac:	20000b25 	andcs	r0, r0, r5, lsr #22
 80009b0:	20000b20 	andcs	r0, r0, r0, lsr #22
 80009b4:	20000c00 	andcs	r0, r0, r0, lsl #24
 80009b8:	20000b1e 	andcs	r0, r0, lr, lsl fp
 80009bc:	200002cc 	andcs	r0, r0, ip, asr #5
 80009c0:	200002c8 	andcs	r0, r0, r8, asr #5
 80009c4:	20000b24 	andcs	r0, r0, r4, lsr #22
 80009c8:	200002d8 	ldrdcs	r0, [r0], -r8
 80009cc:	20000b2b 	andcs	r0, r0, fp, lsr #22

080009d0 <dfuUpdateByReset>:
    } else {
        return FALSE;
    }
}

void dfuUpdateByReset(void) {
 80009d0:	b508      	push	{r3, lr}
    u8 startState = dfuAppStatus.bState;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <dfuUpdateByReset+0x3c>)
    userFirmwareLen = 0;
 80009d4:	480e      	ldr	r0, [pc, #56]	; (8000a10 <dfuUpdateByReset+0x40>)
        return FALSE;
    }
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 80009d6:	7919      	ldrb	r1, [r3, #4]
    userFirmwareLen = 0;
 80009d8:	2200      	movs	r2, #0
        return FALSE;
    }
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 80009da:	b2c9      	uxtb	r1, r1
    userFirmwareLen = 0;

    if (startState == appDETACH) {
 80009dc:	2901      	cmp	r1, #1
    }
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
    userFirmwareLen = 0;
 80009de:	6002      	str	r2, [r0, #0]

    if (startState == appDETACH) {
 80009e0:	d108      	bne.n	80009f4 <dfuUpdateByReset+0x24>
        dfuAppStatus.bState = dfuIDLE;
 80009e2:	2102      	movs	r1, #2
 80009e4:	7119      	strb	r1, [r3, #4]
        dfuAppStatus.bStatus = OK;
 80009e6:	701a      	strb	r2, [r3, #0]

        nvicDisableInterrupts();
 80009e8:	f7ff ff24 	bl	8000834 <nvicDisableInterrupts>
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
    }
}
 80009ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (startState == appDETACH) {
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        nvicDisableInterrupts();
        usbEnbISR();
 80009f0:	f7ff bd3e 	b.w	8000470 <usbEnbISR>

    } else if (startState == appIDLE || startState == dfuIDLE) {
 80009f4:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 80009f8:	d006      	beq.n	8000a08 <dfuUpdateByReset+0x38>
        /* do nothing...might be normal usb bus activity */
    } else {
        /* we reset from the dfu, reset everything and startover,
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
 80009fa:	2102      	movs	r1, #2
 80009fc:	7119      	strb	r1, [r3, #4]
        dfuAppStatus.bStatus = OK;
 80009fe:	701a      	strb	r2, [r3, #0]

        systemHardReset();
    }
}
 8000a00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
 8000a04:	f7ff bf3c 	b.w	8000880 <systemHardReset>
 8000a08:	bd08      	pop	{r3, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000b25 	andcs	r0, r0, r5, lsr #22
 8000a10:	20000b20 	andcs	r0, r0, r0, lsr #22

08000a14 <dfuCopyState>:

void dfuUpdateByTimeout(void) {
}

u8 *dfuCopyState(u16 length) {
    if (length == 0) {
 8000a14:	b920      	cbnz	r0, 8000a20 <dfuCopyState+0xc>
        pInformation->Ctrl_Info.Usb_wLength = 1;
 8000a16:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <dfuCopyState+0x10>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	821a      	strh	r2, [r3, #16]
        return NULL;
 8000a1e:	4770      	bx	lr
    } else {
        return (&(dfuAppStatus.bState));
 8000a20:	4801      	ldr	r0, [pc, #4]	; (8000a28 <dfuCopyState+0x14>)
    }
}
 8000a22:	4770      	bx	lr
 8000a24:	2000030c 	andcs	r0, r0, ip, lsl #6
 8000a28:	20000b29 	andcs	r0, r0, r9, lsr #22

08000a2c <dfuCopyStatus>:

u8 *dfuCopyStatus(u16 length) {
    if (length == 0) {
 8000a2c:	b920      	cbnz	r0, 8000a38 <dfuCopyStatus+0xc>
        pInformation->Ctrl_Info.Usb_wLength = 6;
 8000a2e:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <dfuCopyStatus+0x10>)
 8000a30:	2206      	movs	r2, #6
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	821a      	strh	r2, [r3, #16]
        return NULL;
 8000a36:	4770      	bx	lr
    } else {
        return (u8*)(&dfuAppStatus);
 8000a38:	4801      	ldr	r0, [pc, #4]	; (8000a40 <dfuCopyStatus+0x14>)
    }
}
 8000a3a:	4770      	bx	lr
 8000a3c:	2000030c 	andcs	r0, r0, ip, lsl #6
 8000a40:	20000b25 	andcs	r0, r0, r5, lsr #22

08000a44 <dfuCopyDNLOAD>:


u8 *dfuCopyDNLOAD(u16 length) {
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <dfuCopyDNLOAD+0x1c>)
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8000a46:	681b      	ldr	r3, [r3, #0]
    }
}


u8 *dfuCopyDNLOAD(u16 length) {
    if (length == 0) {
 8000a48:	b930      	cbnz	r0, 8000a58 <dfuCopyDNLOAD+0x14>
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8000a4a:	88da      	ldrh	r2, [r3, #6]
 8000a4c:	8a59      	ldrh	r1, [r3, #18]
 8000a4e:	1a51      	subs	r1, r2, r1
 8000a50:	8219      	strh	r1, [r3, #16]
        thisBlockLen = pInformation->USBwLengths.w;
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <dfuCopyDNLOAD+0x20>)
 8000a54:	801a      	strh	r2, [r3, #0]
        return NULL;
 8000a56:	4770      	bx	lr
    } else {
        return ((u8 *)recvBuffer + pInformation->Ctrl_Info.Usb_wOffset);
 8000a58:	8a5b      	ldrh	r3, [r3, #18]
 8000a5a:	4803      	ldr	r0, [pc, #12]	; (8000a68 <dfuCopyDNLOAD+0x24>)
 8000a5c:	4418      	add	r0, r3
    }
}
 8000a5e:	4770      	bx	lr
 8000a60:	2000030c 	andcs	r0, r0, ip, lsl #6
 8000a64:	20000b1e 	andcs	r0, r0, lr, lsl fp
 8000a68:	2000031c 	andcs	r0, r0, ip, lsl r3

08000a6c <dfuCopyUPLOAD>:

u8 *dfuCopyUPLOAD(u16 length) {
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <dfuCopyUPLOAD+0x24>)
    if (length == 0) {
 8000a6e:	b930      	cbnz	r0, 8000a7e <dfuCopyUPLOAD+0x12>
        pInformation->Ctrl_Info.Usb_wLength = thisBlockLen - pInformation->Ctrl_Info.Usb_wOffset;
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <dfuCopyUPLOAD+0x28>)
 8000a74:	8811      	ldrh	r1, [r2, #0]
 8000a76:	8a5a      	ldrh	r2, [r3, #18]
 8000a78:	1a8a      	subs	r2, r1, r2
 8000a7a:	821a      	strh	r2, [r3, #16]
        return NULL;
 8000a7c:	4770      	bx	lr
    } else {
        return((u8*) userAppAddr + userFirmwareLen + pInformation->Ctrl_Info.Usb_wOffset);
 8000a7e:	4906      	ldr	r1, [pc, #24]	; (8000a98 <dfuCopyUPLOAD+0x2c>)
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <dfuCopyUPLOAD+0x30>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	6812      	ldr	r2, [r2, #0]
 8000a86:	6808      	ldr	r0, [r1, #0]
 8000a88:	8a5b      	ldrh	r3, [r3, #18]
 8000a8a:	4410      	add	r0, r2
 8000a8c:	4418      	add	r0, r3
    }
}
 8000a8e:	4770      	bx	lr
 8000a90:	2000030c 	andcs	r0, r0, ip, lsl #6
 8000a94:	20000b1e 	andcs	r0, r0, lr, lsl fp
 8000a98:	200002cc 	andcs	r0, r0, ip, asr #5
 8000a9c:	20000b20 	andcs	r0, r0, r0, lsr #22

08000aa0 <dfuCopyBufferToExec>:

void dfuCopyBufferToExec() {
 8000aa0:	b570      	push	{r4, r5, r6, lr}
        }
    }
    else
*/
    {
        if (userUploadType == DFU_UPLOAD_FLASH_0X8005000)
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <dfuCopyBufferToExec+0x4c>)
 8000aa4:	4e12      	ldr	r6, [pc, #72]	; (8000af0 <dfuCopyBufferToExec+0x50>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
        {
            userSpace = (u32 *)(USER_CODE_FLASH0X8005000 + userFirmwareLen);
 8000aa8:	6834      	ldr	r4, [r6, #0]
        }
    }
    else
*/
    {
        if (userUploadType == DFU_UPLOAD_FLASH_0X8005000)
 8000aaa:	2b02      	cmp	r3, #2
        {
            userSpace = (u32 *)(USER_CODE_FLASH0X8005000 + userFirmwareLen);
 8000aac:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
 8000ab0:	bf0c      	ite	eq
 8000ab2:	f504 44a0 	addeq.w	r4, r4, #20480	; 0x5000
        }
        else
        {
            userSpace = (u32 *)(USER_CODE_FLASH0X8002000 + userFirmwareLen);
 8000ab6:	f504 5400 	addne.w	r4, r4, #8192	; 0x2000
        }

        flashErasePage((u32)(userSpace));
 8000aba:	4620      	mov	r0, r4
 8000abc:	f7ff feea 	bl	8000894 <flashErasePage>

        for (i = 0; i < thisBlockLen; i = i + 4) {
 8000ac0:	2500      	movs	r5, #0
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <dfuCopyBufferToExec+0x54>)
 8000ac4:	881a      	ldrh	r2, [r3, #0]
 8000ac6:	b292      	uxth	r2, r2
 8000ac8:	4295      	cmp	r5, r2
 8000aca:	da06      	bge.n	8000ada <dfuCopyBufferToExec+0x3a>
            flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <dfuCopyBufferToExec+0x58>)
 8000ace:	1960      	adds	r0, r4, r5
 8000ad0:	58e9      	ldr	r1, [r5, r3]
 8000ad2:	f7ff fef9 	bl	80008c8 <flashWriteWord>
            userSpace = (u32 *)(USER_CODE_FLASH0X8002000 + userFirmwareLen);
        }

        flashErasePage((u32)(userSpace));

        for (i = 0; i < thisBlockLen; i = i + 4) {
 8000ad6:	3504      	adds	r5, #4
 8000ad8:	e7f3      	b.n	8000ac2 <dfuCopyBufferToExec+0x22>
            flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
        }

    }
    userFirmwareLen += thisBlockLen;
 8000ada:	6831      	ldr	r1, [r6, #0]
 8000adc:	881a      	ldrh	r2, [r3, #0]
 8000ade:	b292      	uxth	r2, r2
 8000ae0:	440a      	add	r2, r1
 8000ae2:	6032      	str	r2, [r6, #0]

    thisBlockLen = 0;
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	801a      	strh	r2, [r3, #0]
 8000ae8:	bd70      	pop	{r4, r5, r6, pc}
 8000aea:	bf00      	nop
 8000aec:	20000b24 	andcs	r0, r0, r4, lsr #22
 8000af0:	20000b20 	andcs	r0, r0, r0, lsr #22
 8000af4:	20000b1e 	andcs	r0, r0, lr, lsl fp
 8000af8:	2000031c 	andcs	r0, r0, ip, lsl r3

08000afc <dfuUpdateByRequest>:
}




bool dfuUpdateByRequest(void) {
 8000afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 8000b00:	4981      	ldr	r1, [pc, #516]	; (8000d08 <dfuUpdateByRequest+0x20c>)



    u8 startState = dfuAppStatus.bState;
 8000b02:	4c82      	ldr	r4, [pc, #520]	; (8000d0c <dfuUpdateByRequest+0x210>)


bool dfuUpdateByRequest(void) {
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 8000b04:	2001      	movs	r0, #1
 8000b06:	7008      	strb	r0, [r1, #0]



    u8 startState = dfuAppStatus.bState;
 8000b08:	7923      	ldrb	r3, [r4, #4]
    dfuAppStatus.bStatus = OK;
 8000b0a:	2200      	movs	r2, #0
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;



    u8 startState = dfuAppStatus.bState;
 8000b0c:	b2db      	uxtb	r3, r3
    dfuAppStatus.bStatus = OK;
    /* often leaner to nest if's then embed a switch/case */
    if (startState == dfuIDLE)  {
 8000b0e:	2b02      	cmp	r3, #2
    dfuBusy = TRUE;



    u8 startState = dfuAppStatus.bState;
    dfuAppStatus.bStatus = OK;
 8000b10:	7022      	strb	r2, [r4, #0]
    /* often leaner to nest if's then embed a switch/case */
    if (startState == dfuIDLE)  {
 8000b12:	d15a      	bne.n	8000bca <dfuUpdateByRequest+0xce>
        /*  device running inside DFU mode */
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop
 8000b14:	7008      	strb	r0, [r1, #0]

        if (pInformation->USBbRequest == DFU_DNLOAD) {
 8000b16:	497e      	ldr	r1, [pc, #504]	; (8000d10 <dfuUpdateByRequest+0x214>)
 8000b18:	6809      	ldr	r1, [r1, #0]
 8000b1a:	7848      	ldrb	r0, [r1, #1]
 8000b1c:	2801      	cmp	r0, #1
 8000b1e:	d12a      	bne.n	8000b76 <dfuUpdateByRequest+0x7a>

            if (pInformation->USBwLengths.w > 0) {
 8000b20:	88c8      	ldrh	r0, [r1, #6]
 8000b22:	2800      	cmp	r0, #0
 8000b24:	f000 80c5 	beq.w	8000cb2 <dfuUpdateByRequest+0x1b6>
                userFirmwareLen = 0;
 8000b28:	487a      	ldr	r0, [pc, #488]	; (8000d14 <dfuUpdateByRequest+0x218>)
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
                switch(pInformation->Current_AlternateSetting)
 8000b2a:	7b09      	ldrb	r1, [r1, #12]
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop

        if (pInformation->USBbRequest == DFU_DNLOAD) {

            if (pInformation->USBwLengths.w > 0) {
                userFirmwareLen = 0;
 8000b2c:	6002      	str	r2, [r0, #0]
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
                switch(pInformation->Current_AlternateSetting)
 8000b2e:	2901      	cmp	r1, #1

        if (pInformation->USBbRequest == DFU_DNLOAD) {

            if (pInformation->USBwLengths.w > 0) {
                userFirmwareLen = 0;
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 8000b30:	f04f 0203 	mov.w	r2, #3
 8000b34:	7122      	strb	r2, [r4, #4]
                switch(pInformation->Current_AlternateSetting)
 8000b36:	d00b      	beq.n	8000b50 <dfuUpdateByRequest+0x54>
 8000b38:	2902      	cmp	r1, #2
 8000b3a:	d11a      	bne.n	8000b72 <dfuUpdateByRequest+0x76>
                        flashErasePage((u32)USER_CODE_FLASH0X8002000);
                        bkp10Write(RTC_BOOTLOADER_JUST_UPLOADED);

                        break;
                    case 2:
                        userUploadType = DFU_UPLOAD_FLASH_0X8002000;
 8000b3c:	4b76      	ldr	r3, [pc, #472]	; (8000d18 <dfuUpdateByRequest+0x21c>)
 8000b3e:	701a      	strb	r2, [r3, #0]
                        userAppAddr = USER_CODE_FLASH0X8002000;
 8000b40:	4a76      	ldr	r2, [pc, #472]	; (8000d1c <dfuUpdateByRequest+0x220>)
 8000b42:	4b77      	ldr	r3, [pc, #476]	; (8000d20 <dfuUpdateByRequest+0x224>)
 8000b44:	601a      	str	r2, [r3, #0]
                        /* make sure the flash is setup properly, unlock it */
                        setupFLASH();
 8000b46:	f7ff fde1 	bl	800070c <setupFLASH>
                        flashUnlock();
 8000b4a:	f7ff fee9 	bl	8000920 <flashUnlock>
 8000b4e:	e00b      	b.n	8000b68 <dfuUpdateByRequest+0x6c>
                        userUploadType = DFU_UPLOAD_RAM;
                        break;
                        */
                    case 1:

                        userAppAddr = USER_CODE_FLASH0X8005000;
 8000b50:	4974      	ldr	r1, [pc, #464]	; (8000d24 <dfuUpdateByRequest+0x228>)
 8000b52:	4a73      	ldr	r2, [pc, #460]	; (8000d20 <dfuUpdateByRequest+0x224>)
 8000b54:	6011      	str	r1, [r2, #0]
                        userUploadType = DFU_UPLOAD_FLASH_0X8005000;
 8000b56:	4a70      	ldr	r2, [pc, #448]	; (8000d18 <dfuUpdateByRequest+0x21c>)
 8000b58:	7013      	strb	r3, [r2, #0]

                        /* make sure the flash is setup properly, unlock it */
                        setupFLASH();
 8000b5a:	f7ff fdd7 	bl	800070c <setupFLASH>
                        flashUnlock();
 8000b5e:	f7ff fedf 	bl	8000920 <flashUnlock>
                        // Clear lower memory so that we can check on cold boot, whether the last upload was to 0x8002000 or 0x8005000
                        flashErasePage((u32)USER_CODE_FLASH0X8002000);
 8000b62:	486e      	ldr	r0, [pc, #440]	; (8000d1c <dfuUpdateByRequest+0x220>)
 8000b64:	f7ff fe96 	bl	8000894 <flashErasePage>
                        userUploadType = DFU_UPLOAD_FLASH_0X8002000;
                        userAppAddr = USER_CODE_FLASH0X8002000;
                        /* make sure the flash is setup properly, unlock it */
                        setupFLASH();
                        flashUnlock();
                        bkp10Write(RTC_BOOTLOADER_JUST_UPLOADED);
 8000b68:	f244 204d 	movw	r0, #16973	; 0x424d
 8000b6c:	f7ff fdf2 	bl	8000754 <bkp10Write>

                        break;
 8000b70:	e0c2      	b.n	8000cf8 <dfuUpdateByRequest+0x1fc>
                    default:
                    // Roger Clark. Report error
                        dfuAppStatus.bState  = dfuERROR;
 8000b72:	230a      	movs	r3, #10
 8000b74:	e062      	b.n	8000c3c <dfuUpdateByRequest+0x140>
                }
            } else {
                dfuAppStatus.bState  = dfuERROR;
                dfuAppStatus.bStatus = errNOTDONE;
            }
        } else if (pInformation->USBbRequest == DFU_UPLOAD) {
 8000b76:	2802      	cmp	r0, #2
 8000b78:	d121      	bne.n	8000bbe <dfuUpdateByRequest+0xc2>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 8000b7a:	2309      	movs	r3, #9
 8000b7c:	7123      	strb	r3, [r4, #4]
            /* record length of first block for calculating target
               address from wValue in consecutive blocks */
            uploadBlockLen = pInformation->USBwLengths.w;
 8000b7e:	88ca      	ldrh	r2, [r1, #6]
 8000b80:	4b69      	ldr	r3, [pc, #420]	; (8000d28 <dfuUpdateByRequest+0x22c>)
 8000b82:	801a      	strh	r2, [r3, #0]
            thisBlockLen = uploadBlockLen; /* for this first block as well */
 8000b84:	8818      	ldrh	r0, [r3, #0]
 8000b86:	4a69      	ldr	r2, [pc, #420]	; (8000d2c <dfuUpdateByRequest+0x230>)
 8000b88:	b280      	uxth	r0, r0
 8000b8a:	8010      	strh	r0, [r2, #0]
            /* calculate where the data should be copied from */
            userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000b8c:	881a      	ldrh	r2, [r3, #0]
 8000b8e:	884b      	ldrh	r3, [r1, #2]
 8000b90:	b292      	uxth	r2, r2
 8000b92:	435a      	muls	r2, r3
 8000b94:	4b5f      	ldr	r3, [pc, #380]	; (8000d14 <dfuUpdateByRequest+0x218>)
 8000b96:	601a      	str	r2, [r3, #0]
            switch(pInformation->Current_AlternateSetting)
 8000b98:	7b0b      	ldrb	r3, [r1, #12]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d003      	beq.n	8000ba6 <dfuUpdateByRequest+0xaa>
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d109      	bne.n	8000bb6 <dfuUpdateByRequest+0xba>
                case 1:
                    userAppAddr = USER_CODE_FLASH0X8005000;
                    userAppEnd = getFlashEnd();
                    break;
                case 2:
                    userAppAddr = USER_CODE_FLASH0X8002000;
 8000ba2:	4a5e      	ldr	r2, [pc, #376]	; (8000d1c <dfuUpdateByRequest+0x220>)
 8000ba4:	e000      	b.n	8000ba8 <dfuUpdateByRequest+0xac>
                case 0:
                    userAppAddr = USER_CODE_RAM;
                    userAppEnd = RAM_END;
                    */
                case 1:
                    userAppAddr = USER_CODE_FLASH0X8005000;
 8000ba6:	4a5f      	ldr	r2, [pc, #380]	; (8000d24 <dfuUpdateByRequest+0x228>)
                    userAppEnd = getFlashEnd();
                    break;
                case 2:
                    userAppAddr = USER_CODE_FLASH0X8002000;
 8000ba8:	4b5d      	ldr	r3, [pc, #372]	; (8000d20 <dfuUpdateByRequest+0x224>)
 8000baa:	601a      	str	r2, [r3, #0]
                    userAppEnd = getFlashEnd();
 8000bac:	f7ff fece 	bl	800094c <getFlashEnd>
 8000bb0:	4b5f      	ldr	r3, [pc, #380]	; (8000d30 <dfuUpdateByRequest+0x234>)
 8000bb2:	6018      	str	r0, [r3, #0]
                    break;
 8000bb4:	e0a0      	b.n	8000cf8 <dfuUpdateByRequest+0x1fc>
                default:
                // Roger Clark.
                // Changed this to report error that its unable to write to this memory
                // However the code should never get here as only AlternateSetting 1 and 2 are allowed (see above)
                    dfuAppStatus.bState  = dfuERROR;
 8000bb6:	230a      	movs	r3, #10
 8000bb8:	7123      	strb	r3, [r4, #4]
                    dfuAppStatus.bStatus = errWRITE;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e09b      	b.n	8000cf6 <dfuUpdateByRequest+0x1fa>
                    break;
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8000bbe:	2806      	cmp	r0, #6
 8000bc0:	d03c      	beq.n	8000c3c <dfuUpdateByRequest+0x140>
            dfuAppStatus.bState  = dfuIDLE;
            dfuAppStatus.bStatus = OK;  /* are we really ok? we were just aborted */
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000bc2:	2803      	cmp	r0, #3
 8000bc4:	d019      	beq.n	8000bfa <dfuUpdateByRequest+0xfe>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000bc6:	2805      	cmp	r0, #5
 8000bc8:	e03c      	b.n	8000c44 <dfuUpdateByRequest+0x148>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuDNLOAD_SYNC)         {
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	d10b      	bne.n	8000be6 <dfuUpdateByRequest+0xea>
        /* device received block, waiting for DFU_GETSTATUS request */

        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000bce:	4a50      	ldr	r2, [pc, #320]	; (8000d10 <dfuUpdateByRequest+0x214>)
 8000bd0:	6812      	ldr	r2, [r2, #0]
 8000bd2:	7852      	ldrb	r2, [r2, #1]
 8000bd4:	2a03      	cmp	r2, #3
 8000bd6:	d104      	bne.n	8000be2 <dfuUpdateByRequest+0xe6>

            }
            else
            */
            {
                dfuAppStatus.bState = dfuDNLOAD_IDLE;
 8000bd8:	2305      	movs	r3, #5
 8000bda:	7123      	strb	r3, [r4, #4]
                dfuCopyBufferToExec();
 8000bdc:	f7ff ff60 	bl	8000aa0 <dfuCopyBufferToExec>
 8000be0:	e08a      	b.n	8000cf8 <dfuUpdateByRequest+0x1fc>
            }

        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000be2:	2a05      	cmp	r2, #5
 8000be4:	e02e      	b.n	8000c44 <dfuUpdateByRequest+0x148>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuDNBUSY)              {
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	d109      	bne.n	8000bfe <dfuUpdateByRequest+0x102>
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {
 8000bea:	4952      	ldr	r1, [pc, #328]	; (8000d34 <dfuUpdateByRequest+0x238>)
 8000bec:	7808      	ldrb	r0, [r1, #0]
 8000bee:	2802      	cmp	r0, #2
 8000bf0:	d103      	bne.n	8000bfa <dfuUpdateByRequest+0xfe>
            dfuAppStatus.bwPollTimeout0 = 0x00;
            code_copy_lock = WAIT;
 8000bf2:	2303      	movs	r3, #3
        }

    } else if (startState == dfuDNBUSY)              {
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {
            dfuAppStatus.bwPollTimeout0 = 0x00;
 8000bf4:	7062      	strb	r2, [r4, #1]
            code_copy_lock = WAIT;
 8000bf6:	700b      	strb	r3, [r1, #0]
            dfuAppStatus.bState = dfuDNLOAD_IDLE;
 8000bf8:	2305      	movs	r3, #5
 8000bfa:	7123      	strb	r3, [r4, #4]
 8000bfc:	e07c      	b.n	8000cf8 <dfuUpdateByRequest+0x1fc>
        } else {
            dfuAppStatus.bState = dfuDNBUSY;
        }

    } else if (startState == dfuDNLOAD_IDLE)         {
 8000bfe:	2b05      	cmp	r3, #5
 8000c00:	d114      	bne.n	8000c2c <dfuUpdateByRequest+0x130>
        /* device is expecting dfu_dnload requests */
        if (pInformation->USBbRequest == DFU_DNLOAD) {
 8000c02:	4b43      	ldr	r3, [pc, #268]	; (8000d10 <dfuUpdateByRequest+0x214>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	7853      	ldrb	r3, [r2, #1]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d108      	bne.n	8000c1e <dfuUpdateByRequest+0x122>
            if (pInformation->USBwLengths.w > 0) {
 8000c0c:	88d3      	ldrh	r3, [r2, #6]
 8000c0e:	b10b      	cbz	r3, 8000c14 <dfuUpdateByRequest+0x118>
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 8000c10:	2303      	movs	r3, #3
 8000c12:	e7f2      	b.n	8000bfa <dfuUpdateByRequest+0xfe>
            } else {
                /* todo, support "disagreement" if device expects more data than this */
                dfuAppStatus.bState  = dfuMANIFEST_SYNC;
 8000c14:	2306      	movs	r3, #6
 8000c16:	7123      	strb	r3, [r4, #4]

                /* relock the flash */
                flashLock();
 8000c18:	f7ff fe7c 	bl	8000914 <flashLock>
 8000c1c:	e06c      	b.n	8000cf8 <dfuUpdateByRequest+0x1fc>
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d04d      	beq.n	8000cbe <dfuUpdateByRequest+0x1c2>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d04b      	beq.n	8000cbe <dfuUpdateByRequest+0x1c2>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000c26:	2b05      	cmp	r3, #5
 8000c28:	d162      	bne.n	8000cf0 <dfuUpdateByRequest+0x1f4>
 8000c2a:	e048      	b.n	8000cbe <dfuUpdateByRequest+0x1c2>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuMANIFEST_SYNC)       {
 8000c2c:	2b06      	cmp	r3, #6
 8000c2e:	d10b      	bne.n	8000c48 <dfuUpdateByRequest+0x14c>
        /* device has received last block, waiting DFU_GETSTATUS request */

        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000c30:	4937      	ldr	r1, [pc, #220]	; (8000d10 <dfuUpdateByRequest+0x214>)
 8000c32:	6809      	ldr	r1, [r1, #0]
 8000c34:	7849      	ldrb	r1, [r1, #1]
 8000c36:	2903      	cmp	r1, #3
 8000c38:	d103      	bne.n	8000c42 <dfuUpdateByRequest+0x146>
            dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
 8000c3a:	2308      	movs	r3, #8
 8000c3c:	7123      	strb	r3, [r4, #4]
            dfuAppStatus.bStatus = OK;
 8000c3e:	7022      	strb	r2, [r4, #0]
 8000c40:	e05a      	b.n	8000cf8 <dfuUpdateByRequest+0x1fc>
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000c42:	2905      	cmp	r1, #5
 8000c44:	d154      	bne.n	8000cf0 <dfuUpdateByRequest+0x1f4>
 8000c46:	e7d8      	b.n	8000bfa <dfuUpdateByRequest+0xfe>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuMANIFEST)            {
 8000c48:	2b07      	cmp	r3, #7
 8000c4a:	d0f6      	beq.n	8000c3a <dfuUpdateByRequest+0x13e>

        /* should never receive request while in manifest! */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
        dfuAppStatus.bStatus = OK;

    } else if (startState == dfuMANIFEST_WAIT_RESET) {
 8000c4c:	2b08      	cmp	r3, #8
 8000c4e:	d0d4      	beq.n	8000bfa <dfuUpdateByRequest+0xfe>
           usb reset or power on reset to run the new code */

        /* consider timing out and self-resetting */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;

    } else if (startState == dfuUPLOAD_IDLE)         {
 8000c50:	2b09      	cmp	r3, #9
 8000c52:	d13c      	bne.n	8000cce <dfuUpdateByRequest+0x1d2>
        /* device expecting further dfu_upload requests */

        if (pInformation->USBbRequest == DFU_UPLOAD) {
 8000c54:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <dfuUpdateByRequest+0x214>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	7853      	ldrb	r3, [r2, #1]
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d12d      	bne.n	8000cba <dfuUpdateByRequest+0x1be>
            if (pInformation->USBwLengths.w > 0) {
 8000c5e:	88d0      	ldrh	r0, [r2, #6]
 8000c60:	b338      	cbz	r0, 8000cb2 <dfuUpdateByRequest+0x1b6>
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000c62:	4931      	ldr	r1, [pc, #196]	; (8000d28 <dfuUpdateByRequest+0x22c>)
 8000c64:	8852      	ldrh	r2, [r2, #2]
 8000c66:	880b      	ldrh	r3, [r1, #0]
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8000c68:	4d2d      	ldr	r5, [pc, #180]	; (8000d20 <dfuUpdateByRequest+0x224>)
        /* device expecting further dfu_upload requests */

        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	4353      	muls	r3, r2
 8000c6e:	4a29      	ldr	r2, [pc, #164]	; (8000d14 <dfuUpdateByRequest+0x218>)
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8000c70:	4e2f      	ldr	r6, [pc, #188]	; (8000d30 <dfuUpdateByRequest+0x234>)
        /* device expecting further dfu_upload requests */

        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000c72:	6013      	str	r3, [r2, #0]
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8000c74:	682f      	ldr	r7, [r5, #0]
 8000c76:	f8d2 8000 	ldr.w	r8, [r2]
 8000c7a:	f8b1 c000 	ldrh.w	ip, [r1]
 8000c7e:	4447      	add	r7, r8
 8000c80:	6833      	ldr	r3, [r6, #0]
 8000c82:	fa1f fc8c 	uxth.w	ip, ip
 8000c86:	4467      	add	r7, ip
 8000c88:	429f      	cmp	r7, r3
 8000c8a:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <dfuUpdateByRequest+0x230>)
 8000c8c:	d803      	bhi.n	8000c96 <dfuUpdateByRequest+0x19a>
                    thisBlockLen = uploadBlockLen;
 8000c8e:	880a      	ldrh	r2, [r1, #0]
 8000c90:	b292      	uxth	r2, r2
 8000c92:	801a      	strh	r2, [r3, #0]
 8000c94:	e019      	b.n	8000cca <dfuUpdateByRequest+0x1ce>
                    dfuAppStatus.bState  = dfuUPLOAD_IDLE;
                } else {
                    /* if above comparison was just equal, thisBlockLen becomes zero
                    next time when USBWValue has been increased by one */
                    thisBlockLen = userAppEnd - userAppAddr - userFirmwareLen;
 8000c96:	6836      	ldr	r6, [r6, #0]
 8000c98:	682d      	ldr	r5, [r5, #0]
 8000c9a:	6811      	ldr	r1, [r2, #0]
 8000c9c:	1b72      	subs	r2, r6, r5
 8000c9e:	1a52      	subs	r2, r2, r1
 8000ca0:	b292      	uxth	r2, r2
 8000ca2:	801a      	strh	r2, [r3, #0]
                    /* check for overflow due to USBwValue out of range */
                    if (thisBlockLen >= pInformation->USBwLengths.w) {
 8000ca4:	881a      	ldrh	r2, [r3, #0]
 8000ca6:	b292      	uxth	r2, r2
 8000ca8:	4282      	cmp	r2, r0
 8000caa:	d308      	bcc.n	8000cbe <dfuUpdateByRequest+0x1c2>
                        thisBlockLen = 0;
 8000cac:	2200      	movs	r2, #0
 8000cae:	801a      	strh	r2, [r3, #0]
 8000cb0:	e005      	b.n	8000cbe <dfuUpdateByRequest+0x1c2>
                    }
                    dfuAppStatus.bState  = dfuIDLE;
                }
            } else {
                dfuAppStatus.bState  = dfuERROR;
 8000cb2:	230a      	movs	r3, #10
 8000cb4:	7123      	strb	r3, [r4, #4]
                dfuAppStatus.bStatus = errNOTDONE;
 8000cb6:	2309      	movs	r3, #9
 8000cb8:	e01d      	b.n	8000cf6 <dfuUpdateByRequest+0x1fa>
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d101      	bne.n	8000cc2 <dfuUpdateByRequest+0x1c6>
            dfuAppStatus.bState  = dfuIDLE;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	e79b      	b.n	8000bfa <dfuUpdateByRequest+0xfe>
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d001      	beq.n	8000cca <dfuUpdateByRequest+0x1ce>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000cc6:	2b05      	cmp	r3, #5
 8000cc8:	d112      	bne.n	8000cf0 <dfuUpdateByRequest+0x1f4>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 8000cca:	2309      	movs	r3, #9
 8000ccc:	e795      	b.n	8000bfa <dfuUpdateByRequest+0xfe>
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }


    } else if (startState == dfuERROR)               {
 8000cce:	2b0a      	cmp	r3, #10
 8000cd0:	d10e      	bne.n	8000cf0 <dfuUpdateByRequest+0x1f4>
        /* status is in error, awaiting DFU_CLRSTATUS request */

        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <dfuUpdateByRequest+0x214>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	785b      	ldrb	r3, [r3, #1]
 8000cd8:	2b03      	cmp	r3, #3
 8000cda:	d101      	bne.n	8000ce0 <dfuUpdateByRequest+0x1e4>
            /* todo, add routine to wait for last block write to finish */
            dfuAppStatus.bState  = dfuERROR;
 8000cdc:	230a      	movs	r3, #10
 8000cde:	e78c      	b.n	8000bfa <dfuUpdateByRequest+0xfe>
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000ce0:	2b05      	cmp	r3, #5
 8000ce2:	d0fb      	beq.n	8000cdc <dfuUpdateByRequest+0x1e0>
            dfuAppStatus.bState  = dfuERROR;
        } else if (pInformation->USBbRequest == DFU_CLRSTATUS) {
 8000ce4:	2b04      	cmp	r3, #4
 8000ce6:	d103      	bne.n	8000cf0 <dfuUpdateByRequest+0x1f4>
            /* todo handle any cleanup we need here */
            dfuAppStatus.bState  = dfuIDLE;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	7123      	strb	r3, [r4, #4]
            dfuAppStatus.bStatus = OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	e002      	b.n	8000cf6 <dfuUpdateByRequest+0x1fa>
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else {
        /* some kind of error... */
        dfuAppStatus.bState  = dfuERROR;
 8000cf0:	230a      	movs	r3, #10
 8000cf2:	7123      	strb	r3, [r4, #4]
        dfuAppStatus.bStatus = errSTALLEDPKT;
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	7023      	strb	r3, [r4, #0]
    }

    if (dfuAppStatus.bStatus == OK) {
 8000cf8:	7820      	ldrb	r0, [r4, #0]
        return TRUE;
    } else {
        return FALSE;
    }
}
 8000cfa:	f1d0 0001 	rsbs	r0, r0, #1
 8000cfe:	bf38      	it	cc
 8000d00:	2000      	movcc	r0, #0
 8000d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d06:	bf00      	nop
 8000d08:	20000b2b 	andcs	r0, r0, fp, lsr #22
 8000d0c:	20000b25 	andcs	r0, r0, r5, lsr #22
 8000d10:	2000030c 	andcs	r0, r0, ip, lsl #6
 8000d14:	20000b20 	andcs	r0, r0, r0, lsr #22
 8000d18:	20000b24 	andcs	r0, r0, r4, lsr #22
 8000d1c:	08002000 	stmdaeq	r0, {sp}
 8000d20:	200002cc 	andcs	r0, r0, ip, asr #5
 8000d24:	08005000 	stmdaeq	r0, {ip, lr}
 8000d28:	20000b1c 	andcs	r0, r0, ip, lsl fp
 8000d2c:	20000b1e 	andcs	r0, r0, lr, lsl fp
 8000d30:	200002c8 	andcs	r0, r0, r8, asr #5
 8000d34:	200002d8 	ldrdcs	r0, [r0], -r8

08000d38 <dfuUploadStarted>:
void dfuSetState(u8 newState) {
    dfuAppStatus.bState = newState;
}

bool dfuUploadStarted() {
    return dfuBusy;
 8000d38:	4b01      	ldr	r3, [pc, #4]	; (8000d40 <dfuUploadStarted+0x8>)
 8000d3a:	7818      	ldrb	r0, [r3, #0]
}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000b2b 	andcs	r0, r0, fp, lsr #22

08000d44 <dfuFinishUpload>:

void dfuFinishUpload() {
    while (1)
    {
        __asm("nop");
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <dfuFinishUpload>

08000d48 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(u8 bEpNum, u16 wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8000d48:	0080      	lsls	r0, r0, #2
 8000d4a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000d4e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000d52:	6803      	ldr	r3, [r0, #0]
 8000d54:	06ca      	lsls	r2, r1, #27
 8000d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	bf48      	it	mi
 8000d62:	f083 0310 	eormi.w	r3, r3, #16
 8000d66:	068a      	lsls	r2, r1, #26
 8000d68:	bf48      	it	mi
 8000d6a:	f083 0320 	eormi.w	r3, r3, #32
 8000d6e:	6003      	str	r3, [r0, #0]
 8000d70:	4770      	bx	lr

08000d72 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(u8 bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8000d72:	0080      	lsls	r0, r0, #2
 8000d74:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000d78:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000d7c:	6803      	ldr	r3, [r0, #0]
 8000d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000d8c:	6003      	str	r3, [r0, #0]
 8000d8e:	4770      	bx	lr

08000d90 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(u8 bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8000d90:	0080      	lsls	r0, r0, #2
 8000d92:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000d96:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000d9a:	6803      	ldr	r3, [r0, #0]
 8000d9c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8000da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000da4:	041b      	lsls	r3, r3, #16
 8000da6:	0c1b      	lsrs	r3, r3, #16
 8000da8:	6003      	str	r3, [r0, #0]
 8000daa:	4770      	bx	lr

08000dac <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(u8 bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8000dac:	0080      	lsls	r0, r0, #2
 8000dae:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000db2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000db6:	6803      	ldr	r3, [r0, #0]
 8000db8:	045b      	lsls	r3, r3, #17
 8000dba:	d506      	bpl.n	8000dca <ClearDTOG_RX+0x1e>
 8000dbc:	6802      	ldr	r2, [r0, #0]
 8000dbe:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc8:	6003      	str	r3, [r0, #0]
 8000dca:	4770      	bx	lr

08000dcc <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(u8 bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8000dcc:	0080      	lsls	r0, r0, #2
 8000dce:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000dd2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000dd6:	6803      	ldr	r3, [r0, #0]
 8000dd8:	065b      	lsls	r3, r3, #25
 8000dda:	d506      	bpl.n	8000dea <ClearDTOG_TX+0x1e>
 8000ddc:	6802      	ldr	r2, [r0, #0]
 8000dde:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8000de2:	4013      	ands	r3, r2
 8000de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de8:	6003      	str	r3, [r0, #0]
 8000dea:	4770      	bx	lr

08000dec <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPTxAddr(u8 bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <GetEPTxAddr+0x18>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000df6:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8000dfa:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8000dfe:	0040      	lsls	r0, r0, #1
}
 8000e00:	8800      	ldrh	r0, [r0, #0]
 8000e02:	4770      	bx	lr
 8000e04:	40005c50 	andmi	r5, r0, r0, asr ip

08000e08 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPRxAddr(u8 bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <GetEPRxAddr+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e12:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <GetEPRxAddr+0x18>)
 8000e14:	4403      	add	r3, r0
 8000e16:	005b      	lsls	r3, r3, #1
}
 8000e18:	8818      	ldrh	r0, [r3, #0]
 8000e1a:	4770      	bx	lr
 8000e1c:	40005c50 	andmi	r5, r0, r0, asr ip
 8000e20:	20003004 	andcs	r3, r0, r4

08000e24 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(u8 bEpNum, u16 wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SetEPTxCount+0x14>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e2e:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <SetEPTxCount+0x18>)
 8000e30:	4403      	add	r3, r0
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	6019      	str	r1, [r3, #0]
 8000e36:	4770      	bx	lr
 8000e38:	40005c50 	andmi	r5, r0, r0, asr ip
 8000e3c:	20003002 	andcs	r3, r0, r2

08000e40 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(u8 bEpNum, u16 wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8000e40:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <SetEPRxCount+0x38>)
 8000e42:	293e      	cmp	r1, #62	; 0x3e
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <SetEPRxCount+0x3c>)
 8000e4e:	4403      	add	r3, r0
 8000e50:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8000e54:	d909      	bls.n	8000e6a <SetEPRxCount+0x2a>
 8000e56:	094b      	lsrs	r3, r1, #5
 8000e58:	06c8      	lsls	r0, r1, #27
 8000e5a:	bf04      	itt	eq
 8000e5c:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 8000e60:	b29b      	uxtheq	r3, r3
 8000e62:	029b      	lsls	r3, r3, #10
 8000e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e68:	e004      	b.n	8000e74 <SetEPRxCount+0x34>
 8000e6a:	084b      	lsrs	r3, r1, #1
 8000e6c:	07c9      	lsls	r1, r1, #31
 8000e6e:	bf48      	it	mi
 8000e70:	3301      	addmi	r3, #1
 8000e72:	029b      	lsls	r3, r3, #10
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	4770      	bx	lr
 8000e78:	40005c50 	andmi	r5, r0, r0, asr ip
 8000e7c:	20003006 	andcs	r3, r0, r6

08000e80 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8000e80:	b570      	push	{r4, r5, r6, lr}
  u32 wEPVal = 0;
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8000e82:	4a4c      	ldr	r2, [pc, #304]	; (8000fb4 <CTR_LP+0x134>)
 8000e84:	4b4c      	ldr	r3, [pc, #304]	; (8000fb8 <CTR_LP+0x138>)
 8000e86:	6811      	ldr	r1, [r2, #0]
 8000e88:	b288      	uxth	r0, r1
 8000e8a:	040c      	lsls	r4, r1, #16
 8000e8c:	8018      	strh	r0, [r3, #0]
 8000e8e:	f140 8090 	bpl.w	8000fb2 <CTR_LP+0x132>
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
 8000e92:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000e96:	6011      	str	r1, [r2, #0]
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
 8000e98:	881a      	ldrh	r2, [r3, #0]
 8000e9a:	4c48      	ldr	r4, [pc, #288]	; (8000fbc <CTR_LP+0x13c>)
 8000e9c:	f002 020f 	and.w	r2, r2, #15
 8000ea0:	7022      	strb	r2, [r4, #0]
    if (EPindex == 0)
 8000ea2:	2a00      	cmp	r2, #0
 8000ea4:	d15f      	bne.n	8000f66 <CTR_LP+0xe6>
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 8000ea6:	4c46      	ldr	r4, [pc, #280]	; (8000fc0 <CTR_LP+0x140>)
 8000ea8:	4d46      	ldr	r5, [pc, #280]	; (8000fc4 <CTR_LP+0x144>)
 8000eaa:	6822      	ldr	r2, [r4, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 8000eac:	4e46      	ldr	r6, [pc, #280]	; (8000fc8 <CTR_LP+0x148>)
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 8000eae:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8000eb2:	802a      	strh	r2, [r5, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 8000eb4:	6822      	ldr	r2, [r4, #0]
 8000eb6:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8000eba:	8032      	strh	r2, [r6, #0]
      _SetEPRxStatus(ENDP0, EP_RX_NAK);
 8000ebc:	6822      	ldr	r2, [r4, #0]
 8000ebe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ec2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000ec6:	b292      	uxth	r2, r2
 8000ec8:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8000ecc:	6022      	str	r2, [r4, #0]
      _SetEPTxStatus(ENDP0, EP_TX_NAK);
 8000ece:	6822      	ldr	r2, [r4, #0]
 8000ed0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ed8:	b292      	uxth	r2, r2
 8000eda:	f082 0220 	eor.w	r2, r2, #32
 8000ede:	6022      	str	r2, [r4, #0]


      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	06d8      	lsls	r0, r3, #27
 8000ee4:	d502      	bpl.n	8000eec <CTR_LP+0x6c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8000ee6:	6823      	ldr	r3, [r4, #0]
        if ((wEPVal & EP_CTR_TX) != 0)
 8000ee8:	0619      	lsls	r1, r3, #24
 8000eea:	d507      	bpl.n	8000efc <CTR_LP+0x7c>
        {
          _ClearEP_CTR_TX(ENDP0);
 8000eec:	6822      	ldr	r2, [r4, #0]
 8000eee:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	6023      	str	r3, [r4, #0]
          In0_Process();
 8000ef6:	f000 fc61 	bl	80017bc <In0_Process>
 8000efa:	e012      	b.n	8000f22 <CTR_LP+0xa2>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }
        else if ((wEPVal &EP_SETUP) != 0)
 8000efc:	051a      	lsls	r2, r3, #20
 8000efe:	d507      	bpl.n	8000f10 <CTR_LP+0x90>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8000f00:	6822      	ldr	r2, [r4, #0]
 8000f02:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000f06:	4013      	ands	r3, r2
 8000f08:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 8000f0a:	f000 fa69 	bl	80013e0 <Setup0_Process>
 8000f0e:	e008      	b.n	8000f22 <CTR_LP+0xa2>
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8000f10:	0418      	lsls	r0, r3, #16
 8000f12:	d5b6      	bpl.n	8000e82 <CTR_LP+0x2>
        {
          _ClearEP_CTR_RX(ENDP0);
 8000f14:	6822      	ldr	r2, [r4, #0]
 8000f16:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8000f1e:	f000 fbcd 	bl	80016bc <Out0_Process>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
 8000f22:	6823      	ldr	r3, [r4, #0]
 8000f24:	882a      	ldrh	r2, [r5, #0]
 8000f26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	04d1      	lsls	r1, r2, #19
 8000f32:	bf48      	it	mi
 8000f34:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 8000f38:	0495      	lsls	r5, r2, #18
 8000f3a:	4a21      	ldr	r2, [pc, #132]	; (8000fc0 <CTR_LP+0x140>)
 8000f3c:	bf48      	it	mi
 8000f3e:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 8000f42:	6013      	str	r3, [r2, #0]
          _SetEPTxStatus(ENDP0, SaveTState);
 8000f44:	6813      	ldr	r3, [r2, #0]
 8000f46:	8831      	ldrh	r1, [r6, #0]
 8000f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000f4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	06cc      	lsls	r4, r1, #27
 8000f54:	bf48      	it	mi
 8000f56:	f083 0310 	eormi.w	r3, r3, #16
 8000f5a:	0688      	lsls	r0, r1, #26
 8000f5c:	bf48      	it	mi
 8000f5e:	f083 0320 	eormi.w	r3, r3, #32
 8000f62:	6013      	str	r3, [r2, #0]
          return;
 8000f64:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8000f66:	0093      	lsls	r3, r2, #2
 8000f68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f6c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000f70:	681d      	ldr	r5, [r3, #0]
      if ((wEPVal & EP_CTR_RX) != 0)
 8000f72:	0429      	lsls	r1, r5, #16
 8000f74:	d509      	bpl.n	8000f8a <CTR_LP+0x10a>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8000f76:	6818      	ldr	r0, [r3, #0]
 8000f78:	f640 718f 	movw	r1, #3983	; 0xf8f
 8000f7c:	4001      	ands	r1, r0
 8000f7e:	6019      	str	r1, [r3, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <CTR_LP+0x14c>)
 8000f82:	3a01      	subs	r2, #1
 8000f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f88:	4798      	blx	r3

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8000f8a:	062b      	lsls	r3, r5, #24
 8000f8c:	f57f af79 	bpl.w	8000e82 <CTR_LP+0x2>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8000f90:	7821      	ldrb	r1, [r4, #0]
 8000f92:	f648 720f 	movw	r2, #36623	; 0x8f0f
 8000f96:	008b      	lsls	r3, r1, #2
 8000f98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f9c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000fa0:	6818      	ldr	r0, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8000fa2:	3901      	subs	r1, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8000fa4:	4002      	ands	r2, r0
 8000fa6:	601a      	str	r2, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <CTR_LP+0x150>)
 8000faa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fae:	4798      	blx	r3
 8000fb0:	e767      	b.n	8000e82 <CTR_LP+0x2>
 8000fb2:	bd70      	pop	{r4, r5, r6, pc}
 8000fb4:	40005c44 	andmi	r5, r0, r4, asr #24
 8000fb8:	200002d4 	ldrdcs	r0, [r0], -r4
 8000fbc:	200002e8 	andcs	r0, r0, r8, ror #5
 8000fc0:	40005c00 	andmi	r5, r0, r0, lsl #24
 8000fc4:	200002da 	ldrdcs	r0, [r0], -sl
 8000fc8:	200002dc 	ldrdcs	r0, [r0], -ip
 8000fcc:	20000050 	andcs	r0, r0, r0, asr r0
 8000fd0:	20000034 	andcs	r0, r0, r4, lsr r0

08000fd4 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8000fd4:	b508      	push	{r3, lr}
  pInformation = &Device_Info;
 8000fd6:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <USB_Init+0x20>)
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <USB_Init+0x24>)
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <USB_Init+0x28>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 8000fdc:	6013      	str	r3, [r2, #0]
  pInformation->ControlState = 2;
 8000fde:	2202      	movs	r2, #2
 8000fe0:	721a      	strb	r2, [r3, #8]
  pProperty = &Device_Property;
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <USB_Init+0x2c>)
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <USB_Init+0x30>)
 8000fe6:	6013      	str	r3, [r2, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <USB_Init+0x34>)
  /* Initialize devices one by one */

  pProperty->Init();
 8000fea:	681b      	ldr	r3, [r3, #0]
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8000fec:	6011      	str	r1, [r2, #0]
  /* Initialize devices one by one */

  pProperty->Init();
 8000fee:	4798      	blx	r3
 8000ff0:	bd08      	pop	{r3, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000030c 	andcs	r0, r0, ip, lsl #6
 8000ff8:	200002ec 	andcs	r0, r0, ip, ror #5
 8000ffc:	2000006c 	andcs	r0, r0, ip, rrx
 8001000:	20000000 	andcs	r0, r0, r0
 8001004:	200002e4 	andcs	r0, r0, r4, ror #5
 8001008:	20000308 	andcs	r0, r0, r8, lsl #6

0800100c <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetConfiguration(u16 Length)
{
 800100c:	b510      	push	{r4, lr}
 800100e:	4c06      	ldr	r4, [pc, #24]	; (8001028 <Standard_GetConfiguration+0x1c>)
  if (Length == 0)
 8001010:	b918      	cbnz	r0, 800101a <Standard_GetConfiguration+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8001012:	6823      	ldr	r3, [r4, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8001018:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetConfiguration();
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <Standard_GetConfiguration+0x20>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4798      	blx	r3
  return (u8 *)&pInformation->Current_Configuration;
 8001022:	6820      	ldr	r0, [r4, #0]
 8001024:	300a      	adds	r0, #10
}
 8001026:	bd10      	pop	{r4, pc}
 8001028:	2000030c 	andcs	r0, r0, ip, lsl #6
 800102c:	20000308 	andcs	r0, r0, r8, lsl #6

08001030 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetInterface(u16 Length)
{
 8001030:	b510      	push	{r4, lr}
 8001032:	4c06      	ldr	r4, [pc, #24]	; (800104c <Standard_GetInterface+0x1c>)
  if (Length == 0)
 8001034:	b918      	cbnz	r0, 800103e <Standard_GetInterface+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8001036:	6823      	ldr	r3, [r4, #0]
 8001038:	2201      	movs	r2, #1
 800103a:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 800103c:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetInterface();
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <Standard_GetInterface+0x20>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	4798      	blx	r3
  return (u8 *)&pInformation->Current_AlternateSetting;
 8001046:	6820      	ldr	r0, [r4, #0]
 8001048:	300c      	adds	r0, #12
}
 800104a:	bd10      	pop	{r4, pc}
 800104c:	2000030c 	andcs	r0, r0, ip, lsl #6
 8001050:	20000308 	andcs	r0, r0, r8, lsl #6

08001054 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
u8 *Standard_GetStatus(u16 Length)
{
 8001054:	b510      	push	{r4, lr}
 8001056:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <Standard_GetStatus+0x84>)
  if (Length == 0)
 8001058:	b918      	cbnz	r0, 8001062 <Standard_GetStatus+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2202      	movs	r2, #2
 800105e:	821a      	strh	r2, [r3, #16]
    return 0;
 8001060:	bd10      	pop	{r4, pc}
  }

  StatusInfo.w = 0;
 8001062:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <Standard_GetStatus+0x88>)
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001064:	6819      	ldr	r1, [r3, #0]
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  StatusInfo.w = 0;
 8001066:	2000      	movs	r0, #0
 8001068:	8010      	strh	r0, [r2, #0]
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800106a:	780c      	ldrb	r4, [r1, #0]
 800106c:	4613      	mov	r3, r2
 800106e:	f014 047f 	ands.w	r4, r4, #127	; 0x7f
 8001072:	d10d      	bne.n	8001090 <Standard_GetStatus+0x3c>
  {
    /*Get Device Status */
    u8 Feature = pInformation->Current_Feature;
 8001074:	7a4a      	ldrb	r2, [r1, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 8001076:	0691      	lsls	r1, r2, #26
    {
      SetBit(StatusInfo0, 1);
 8001078:	bf44      	itt	mi
 800107a:	2102      	movmi	r1, #2
 800107c:	7019      	strbmi	r1, [r3, #0]
    }

    /* Bus-powered */
    if (ValBit(Feature, 6))
 800107e:	f012 0f40 	tst.w	r2, #64	; 0x40
    {
      ClrBit(StatusInfo0, 0);
 8001082:	781a      	ldrb	r2, [r3, #0]
 8001084:	bf14      	ite	ne
 8001086:	f022 0201 	bicne.w	r2, r2, #1
    }
    else /* Self-powered */
    {
      SetBit(StatusInfo0, 0);
 800108a:	f042 0201 	orreq.w	r2, r2, #1
 800108e:	e014      	b.n	80010ba <Standard_GetStatus+0x66>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001090:	2c01      	cmp	r4, #1
 8001092:	d01f      	beq.n	80010d4 <Standard_GetStatus+0x80>
  {
    return (u8 *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001094:	2c02      	cmp	r4, #2
 8001096:	d11e      	bne.n	80010d6 <Standard_GetStatus+0x82>
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;
 8001098:	7909      	ldrb	r1, [r1, #4]

    Related_Endpoint = (wIndex0 & 0x0f);
 800109a:	f001 020f 	and.w	r2, r1, #15
 800109e:	0092      	lsls	r2, r2, #2
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80010a0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80010a4:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 80010a8:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80010ac:	6812      	ldr	r2, [r2, #0]
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 80010ae:	d006      	beq.n	80010be <Standard_GetStatus+0x6a>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80010b0:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80010b4:	2a10      	cmp	r2, #16
 80010b6:	d107      	bne.n	80010c8 <Standard_GetStatus+0x74>
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 80010b8:	2201      	movs	r2, #1
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	e004      	b.n	80010c8 <Standard_GetStatus+0x74>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80010be:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80010c2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80010c6:	e7f6      	b.n	80010b6 <Standard_GetStatus+0x62>
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <Standard_GetStatus+0x8c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	4798      	blx	r3
  return (u8 *)&StatusInfo;
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <Standard_GetStatus+0x88>)
 80010d2:	bd10      	pop	{r4, pc}
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    return (u8 *)&StatusInfo;
 80010d4:	4610      	mov	r0, r2
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
  return (u8 *)&StatusInfo;
}
 80010d6:	bd10      	pop	{r4, pc}
 80010d8:	2000030c 	andcs	r0, r0, ip, lsl #6
 80010dc:	20000312 	andcs	r0, r0, r2, lsl r3
 80010e0:	20000308 	andcs	r0, r0, r8, lsl #6

080010e4 <DataStageIn>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 80010e4:	4a23      	ldr	r2, [pc, #140]	; (8001174 <DataStageIn+0x90>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 80010e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 80010ea:	6814      	ldr	r4, [r2, #0]
 80010ec:	4690      	mov	r8, r2
  u32 save_wLength = pEPinfo->Usb_wLength;
 80010ee:	8a23      	ldrh	r3, [r4, #16]
  u32 ControlState = pInformation->ControlState;
 80010f0:	7a26      	ldrb	r6, [r4, #8]
 80010f2:	4f21      	ldr	r7, [pc, #132]	; (8001178 <DataStageIn+0x94>)

  u8 *DataBuffer;
  u32 Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 80010f4:	b9a3      	cbnz	r3, 8001120 <DataStageIn+0x3c>
 80010f6:	2e04      	cmp	r6, #4
 80010f8:	d112      	bne.n	8001120 <DataStageIn+0x3c>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 80010fa:	4920      	ldr	r1, [pc, #128]	; (800117c <DataStageIn+0x98>)
 80010fc:	780a      	ldrb	r2, [r1, #0]
 80010fe:	2a01      	cmp	r2, #1
 8001100:	d10a      	bne.n	8001118 <DataStageIn+0x34>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8001102:	4a1f      	ldr	r2, [pc, #124]	; (8001180 <DataStageIn+0x9c>)
 8001104:	6810      	ldr	r0, [r2, #0]
 8001106:	4a1f      	ldr	r2, [pc, #124]	; (8001184 <DataStageIn+0xa0>)
 8001108:	b280      	uxth	r0, r0
 800110a:	4402      	add	r2, r0
 800110c:	0052      	lsls	r2, r2, #1
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	2230      	movs	r2, #48	; 0x30
 8001112:	803a      	strh	r2, [r7, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 8001114:	700b      	strb	r3, [r1, #0]
 8001116:	e027      	b.n	8001168 <DataStageIn+0x84>
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 8001118:	2310      	movs	r3, #16
 800111a:	803b      	strh	r3, [r7, #0]
      Data_Mul_MaxPacketSize = FALSE;
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
 800111c:	2607      	movs	r6, #7
 800111e:	e023      	b.n	8001168 <DataStageIn+0x84>
    }

    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8001120:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8001122:	42ab      	cmp	r3, r5
 8001124:	bf8c      	ite	hi
 8001126:	2602      	movhi	r6, #2
 8001128:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800112a:	429d      	cmp	r5, r3
 800112c:	bf28      	it	cs
 800112e:	461d      	movcs	r5, r3
 8001130:	4628      	mov	r0, r5
 8001132:	69a3      	ldr	r3, [r4, #24]
 8001134:	4798      	blx	r3
 8001136:	4681      	mov	r9, r0

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8001138:	2000      	movs	r0, #0
 800113a:	f7ff fe57 	bl	8000dec <GetEPTxAddr>
 800113e:	462a      	mov	r2, r5
 8001140:	4601      	mov	r1, r0
 8001142:	4648      	mov	r0, r9
 8001144:	f000 fb68 	bl	8001818 <UserToPMABufferCopy>

  SetEPTxCount(ENDP0, Length);
 8001148:	4629      	mov	r1, r5
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff fe6a 	bl	8000e24 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
 8001150:	8a23      	ldrh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001152:	f44f 5240 	mov.w	r2, #12288	; 0x3000

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8001156:	1b5b      	subs	r3, r3, r5
 8001158:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 800115a:	8a63      	ldrh	r3, [r4, #18]
 800115c:	441d      	add	r5, r3
  vSetEPTxStatus(EP_TX_VALID);
 800115e:	2330      	movs	r3, #48	; 0x30
 8001160:	803b      	strh	r3, [r7, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <DataStageIn+0xa4>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8001164:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001166:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8001168:	f8d8 3000 	ldr.w	r3, [r8]
 800116c:	721e      	strb	r6, [r3, #8]
 800116e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001172:	bf00      	nop
 8001174:	2000030c 	andcs	r0, r0, ip, lsl #6
 8001178:	200002dc 	ldrdcs	r0, [r0], -ip
 800117c:	20000b2c 	andcs	r0, r0, ip, lsr #22
 8001180:	40005c50 	andmi	r5, r0, r0, asr ip
 8001184:	20003002 	andcs	r3, r0, r2
 8001188:	200002da 	ldrdcs	r0, [r0], -sl

0800118c <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 800118c:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <Standard_SetConfiguration+0x2c>)
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001190:	490a      	ldr	r1, [pc, #40]	; (80011bc <Standard_SetConfiguration+0x30>)
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	7849      	ldrb	r1, [r1, #1]
 8001196:	789a      	ldrb	r2, [r3, #2]
 8001198:	4291      	cmp	r1, r2
 800119a:	d30a      	bcc.n	80011b2 <Standard_SetConfiguration+0x26>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800119c:	78d9      	ldrb	r1, [r3, #3]
 800119e:	b941      	cbnz	r1, 80011b2 <Standard_SetConfiguration+0x26>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 80011a0:	889c      	ldrh	r4, [r3, #4]
 80011a2:	b934      	cbnz	r4, 80011b2 <Standard_SetConfiguration+0x26>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 80011a4:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <Standard_SetConfiguration+0x34>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	4798      	blx	r3
    return USB_SUCCESS;
 80011ae:	4620      	mov	r0, r4
 80011b0:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USB_UNSUPPORT;
 80011b2:	2002      	movs	r0, #2
  }
}
 80011b4:	bd10      	pop	{r4, pc}
 80011b6:	bf00      	nop
 80011b8:	2000030c 	andcs	r0, r0, ip, lsl #6
 80011bc:	20000090 	mulcs	r0, r0, r0
 80011c0:	20000308 	andcs	r0, r0, r8, lsl #6

080011c4 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 80011c4:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 80011c6:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <Standard_SetInterface+0x3c>)
 80011c8:	4c0e      	ldr	r4, [pc, #56]	; (8001204 <Standard_SetInterface+0x40>)
 80011ca:	6812      	ldr	r2, [r2, #0]
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	6992      	ldr	r2, [r2, #24]
 80011d0:	7918      	ldrb	r0, [r3, #4]
 80011d2:	7899      	ldrb	r1, [r3, #2]
 80011d4:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	7a9a      	ldrb	r2, [r3, #10]
 80011da:	b17a      	cbz	r2, 80011fc <Standard_SetInterface+0x38>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 80011dc:	b970      	cbnz	r0, 80011fc <Standard_SetInterface+0x38>
 80011de:	795a      	ldrb	r2, [r3, #5]
 80011e0:	b962      	cbnz	r2, 80011fc <Standard_SetInterface+0x38>
        || (pInformation->USBwValue1 != 0))
 80011e2:	78dd      	ldrb	r5, [r3, #3]
 80011e4:	b955      	cbnz	r5, 80011fc <Standard_SetInterface+0x38>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <Standard_SetInterface+0x44>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80011ee:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 80011f0:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80011f2:	791a      	ldrb	r2, [r3, #4]
 80011f4:	72da      	strb	r2, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 80011f6:	789a      	ldrb	r2, [r3, #2]
 80011f8:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 80011fa:	bd38      	pop	{r3, r4, r5, pc}
    }

  }

  return USB_UNSUPPORT;
 80011fc:	2002      	movs	r0, #2
}
 80011fe:	bd38      	pop	{r3, r4, r5, pc}
 8001200:	200002e4 	andcs	r0, r0, r4, ror #5
 8001204:	2000030c 	andcs	r0, r0, ip, lsl #6
 8001208:	20000308 	andcs	r0, r0, r8, lsl #6

0800120c <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 800120c:	b538      	push	{r3, r4, r5, lr}
  u32     Type_Rec = Type_Recipient;
 800120e:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <Standard_ClearFeature+0xc0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	7818      	ldrb	r0, [r3, #0]
  u32     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001214:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8001218:	d104      	bne.n	8001224 <Standard_ClearFeature+0x18>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 800121a:	7a5a      	ldrb	r2, [r3, #9]
 800121c:	f022 0220 	bic.w	r2, r2, #32
 8001220:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 8001222:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001224:	2802      	cmp	r0, #2
 8001226:	d14e      	bne.n	80012c6 <Standard_ClearFeature+0xba>
    DEVICE* pDev;
    u32 Related_Endpoint;
    u32 wIndex0;
    u32 rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8001228:	885a      	ldrh	r2, [r3, #2]
 800122a:	2a00      	cmp	r2, #0
 800122c:	d14c      	bne.n	80012c8 <Standard_ClearFeature+0xbc>
        || (pInformation->USBwIndex1 != 0))
 800122e:	795a      	ldrb	r2, [r3, #5]
 8001230:	2a00      	cmp	r2, #0
 8001232:	d149      	bne.n	80012c8 <Standard_ClearFeature+0xbc>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 8001234:	791a      	ldrb	r2, [r3, #4]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001236:	4d26      	ldr	r5, [pc, #152]	; (80012d0 <Standard_ClearFeature+0xc4>)
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
 8001238:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 800123c:	0084      	lsls	r4, r0, #2

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800123e:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 8001242:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8001246:	6809      	ldr	r1, [r1, #0]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001248:	782d      	ldrb	r5, [r5, #0]
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 800124a:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800124e:	bf14      	ite	ne
 8001250:	f001 0130 	andne.w	r1, r1, #48	; 0x30
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8001254:	f401 5140 	andeq.w	r1, r1, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001258:	42a8      	cmp	r0, r5
 800125a:	d234      	bcs.n	80012c6 <Standard_ClearFeature+0xba>
 800125c:	2900      	cmp	r1, #0
 800125e:	d032      	beq.n	80012c6 <Standard_ClearFeature+0xba>
        || (pInformation->Current_Configuration == 0))
 8001260:	7a9b      	ldrb	r3, [r3, #10]
 8001262:	b383      	cbz	r3, 80012c6 <Standard_ClearFeature+0xba>


    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001264:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001268:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 800126c:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 800126e:	6823      	ldr	r3, [r4, #0]
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8001270:	d50c      	bpl.n	800128c <Standard_ClearFeature+0x80>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001272:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001276:	2b10      	cmp	r3, #16
 8001278:	d11f      	bne.n	80012ba <Standard_ClearFeature+0xae>
      {
        ClearDTOG_TX(Related_Endpoint);
 800127a:	b2c4      	uxtb	r4, r0
 800127c:	4620      	mov	r0, r4
 800127e:	f7ff fda5 	bl	8000dcc <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8001282:	4620      	mov	r0, r4
 8001284:	2130      	movs	r1, #48	; 0x30
 8001286:	f7ff fd5f 	bl	8000d48 <SetEPTxStatus>
 800128a:	e016      	b.n	80012ba <Standard_ClearFeature+0xae>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800128c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001294:	d111      	bne.n	80012ba <Standard_ClearFeature+0xae>
      {
        if (Related_Endpoint == ENDP0)
 8001296:	b928      	cbnz	r0, 80012a4 <Standard_ClearFeature+0x98>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <Standard_ClearFeature+0xc8>)
 800129a:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 800129e:	f7ff fdcf 	bl	8000e40 <SetEPRxCount>
 80012a2:	e001      	b.n	80012a8 <Standard_ClearFeature+0x9c>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 80012a4:	f7ff fd82 	bl	8000dac <ClearDTOG_RX>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 80012a8:	6823      	ldr	r3, [r4, #0]
 80012aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80012b8:	6023      	str	r3, [r4, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <Standard_ClearFeature+0xcc>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	4798      	blx	r3
    return USB_SUCCESS;
 80012c2:	2000      	movs	r0, #0
 80012c4:	bd38      	pop	{r3, r4, r5, pc}
  }

  return USB_UNSUPPORT;
 80012c6:	2002      	movs	r0, #2
}
 80012c8:	bd38      	pop	{r3, r4, r5, pc}
 80012ca:	bf00      	nop
 80012cc:	2000030c 	andcs	r0, r0, ip, lsl #6
 80012d0:	20000090 	mulcs	r0, r0, r0
 80012d4:	20000000 	andcs	r0, r0, r0
 80012d8:	20000308 	andcs	r0, r0, r8, lsl #6

080012dc <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 80012dc:	b538      	push	{r3, r4, r5, lr}
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <Standard_SetEndPointFeature+0x78>)
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80012e0:	4d1d      	ldr	r5, [pc, #116]	; (8001358 <Standard_SetEndPointFeature+0x7c>)
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 80012e2:	6819      	ldr	r1, [r3, #0]
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80012e4:	782d      	ldrb	r5, [r5, #0]
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 80012e6:	790a      	ldrb	r2, [r1, #4]
  rEP = wIndex0 & ~0x80;
 80012e8:	f022 0480 	bic.w	r4, r2, #128	; 0x80
 80012ec:	00a3      	lsls	r3, r4, #2

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80012ee:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 80012f2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80012f6:	6800      	ldr	r0, [r0, #0]

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 80012f8:	f012 0f80 	tst.w	r2, #128	; 0x80
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80012fc:	bf14      	ite	ne
 80012fe:	f000 0030 	andne.w	r0, r0, #48	; 0x30
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8001302:	f400 5040 	andeq.w	r0, r0, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8001306:	42ac      	cmp	r4, r5
 8001308:	d222      	bcs.n	8001350 <Standard_SetEndPointFeature+0x74>
      || pInformation->USBwValue != 0 || Status == 0
 800130a:	884c      	ldrh	r4, [r1, #2]
 800130c:	bb04      	cbnz	r4, 8001350 <Standard_SetEndPointFeature+0x74>
 800130e:	b1f8      	cbz	r0, 8001350 <Standard_SetEndPointFeature+0x74>
      || pInformation->Current_Configuration == 0)
 8001310:	7a89      	ldrb	r1, [r1, #10]
 8001312:	b1e9      	cbz	r1, 8001350 <Standard_SetEndPointFeature+0x74>
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001314:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001318:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 800131c:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001320:	681a      	ldr	r2, [r3, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8001322:	d007      	beq.n	8001334 <Standard_SetEndPointFeature+0x58>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001324:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800132c:	b292      	uxth	r2, r2
 800132e:	f082 0210 	eor.w	r2, r2, #16
 8001332:	e006      	b.n	8001342 <Standard_SetEndPointFeature+0x66>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8001334:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001338:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800133c:	b292      	uxth	r2, r2
 800133e:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8001342:	601a      	str	r2, [r3, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <Standard_SetEndPointFeature+0x80>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	4798      	blx	r3
  return USB_SUCCESS;
 800134c:	2000      	movs	r0, #0
 800134e:	bd38      	pop	{r3, r4, r5, pc}

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8001350:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 8001352:	bd38      	pop	{r3, r4, r5, pc}
 8001354:	2000030c 	andcs	r0, r0, ip, lsl #6
 8001358:	20000090 	mulcs	r0, r0, r0
 800135c:	20000308 	andcs	r0, r0, r8, lsl #6

08001360 <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 8001360:	b508      	push	{r3, lr}
  SetBit(pInformation->Current_Feature, 5);
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <Standard_SetDeviceFeature+0x1c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	7a5a      	ldrb	r2, [r3, #9]
 8001368:	f042 0220 	orr.w	r2, r2, #32
 800136c:	725a      	strb	r2, [r3, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <Standard_SetDeviceFeature+0x20>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	4798      	blx	r3
  return USB_SUCCESS;
}
 8001376:	2000      	movs	r0, #0
 8001378:	bd08      	pop	{r3, pc}
 800137a:	bf00      	nop
 800137c:	2000030c 	andcs	r0, r0, ip, lsl #6
 8001380:	20000308 	andcs	r0, r0, r8, lsl #6

08001384 <Standard_GetDescriptorData>:
*******************************************************************************/
u8 *Standard_GetDescriptorData(u16 Length, ONE_DESCRIPTOR *pDesc)
{
  u32  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <Standard_GetDescriptorData+0x18>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	8a53      	ldrh	r3, [r2, #18]
  if (Length == 0)
 800138a:	b918      	cbnz	r0, 8001394 <Standard_GetDescriptorData+0x10>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 800138c:	8889      	ldrh	r1, [r1, #4]
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	8213      	strh	r3, [r2, #16]
    return 0;
 8001392:	4770      	bx	lr
  }

  return pDesc->Descriptor + wOffset;
 8001394:	6808      	ldr	r0, [r1, #0]
 8001396:	4418      	add	r0, r3
}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	2000030c 	andcs	r0, r0, ip, lsl #6

080013a0 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
u8 Post0_Process(void)
{
 80013a0:	b508      	push	{r3, lr}
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <Post0_Process+0x30>)
 80013a4:	2000      	movs	r0, #0
 80013a6:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80013aa:	f7ff fd49 	bl	8000e40 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <Post0_Process+0x34>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	7a18      	ldrb	r0, [r3, #8]
 80013b4:	2808      	cmp	r0, #8
 80013b6:	d106      	bne.n	80013c6 <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <Post0_Process+0x38>)
 80013ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013be:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <Post0_Process+0x3c>)
 80013c2:	2210      	movs	r2, #16
 80013c4:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 80013c6:	f1b0 0309 	subs.w	r3, r0, #9
 80013ca:	4258      	negs	r0, r3
 80013cc:	4158      	adcs	r0, r3
 80013ce:	bd08      	pop	{r3, pc}
 80013d0:	20000000 	andcs	r0, r0, r0
 80013d4:	2000030c 	andcs	r0, r0, ip, lsl #6
 80013d8:	200002da 	ldrdcs	r0, [r0], -sl
 80013dc:	200002dc 	ldrdcs	r0, [r0], -ip

080013e0 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Setup0_Process(void)
{
 80013e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80013e2:	4e96      	ldr	r6, [pc, #600]	; (800163c <Setup0_Process+0x25c>)
 80013e4:	4b96      	ldr	r3, [pc, #600]	; (8001640 <Setup0_Process+0x260>)
 80013e6:	6832      	ldr	r2, [r6, #0]

  if (pInformation->ControlState != PAUSE)
 80013e8:	4d96      	ldr	r5, [pc, #600]	; (8001644 <Setup0_Process+0x264>)
 80013ea:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80013ec:	4413      	add	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 80013f2:	682b      	ldr	r3, [r5, #0]
 80013f4:	7a19      	ldrb	r1, [r3, #8]
 80013f6:	2909      	cmp	r1, #9
 80013f8:	d00f      	beq.n	800141a <Setup0_Process+0x3a>
 80013fa:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80013fc:	0052      	lsls	r2, r2, #1
 80013fe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001402:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8001406:	7811      	ldrb	r1, [r2, #0]
 8001408:	7019      	strb	r1, [r3, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 800140a:	7851      	ldrb	r1, [r2, #1]
 800140c:	7059      	strb	r1, [r3, #1]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = *pBuf.w++; /* wValue in Little Endian */
 800140e:	8891      	ldrh	r1, [r2, #4]
 8001410:	8059      	strh	r1, [r3, #2]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = *pBuf.w++; /* wIndex in Little Endian */
 8001412:	8911      	ldrh	r1, [r2, #8]
 8001414:	8099      	strh	r1, [r3, #4]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength in Little Endian */
 8001416:	8992      	ldrh	r2, [r2, #12]
 8001418:	80da      	strh	r2, [r3, #6]
  }

  pInformation->ControlState = SETTING_UP;
 800141a:	2201      	movs	r2, #1
 800141c:	721a      	strb	r2, [r3, #8]
  if (pInformation->USBwLength == 0)
 800141e:	88da      	ldrh	r2, [r3, #6]
 8001420:	785c      	ldrb	r4, [r3, #1]
 8001422:	2a00      	cmp	r2, #0
 8001424:	d161      	bne.n	80014ea <Setup0_Process+0x10a>
{
  RESULT Result = USB_UNSUPPORT;
  u32 RequestNo = pInformation->USBbRequest;
  u32 ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001426:	781a      	ldrb	r2, [r3, #0]
 8001428:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 800142c:	d13a      	bne.n	80014a4 <Setup0_Process+0xc4>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 800142e:	2c09      	cmp	r4, #9
 8001430:	d102      	bne.n	8001438 <Setup0_Process+0x58>
    {
      Result = Standard_SetConfiguration();
 8001432:	f7ff feab 	bl	800118c <Standard_SetConfiguration>
 8001436:	e044      	b.n	80014c2 <Setup0_Process+0xe2>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8001438:	2c05      	cmp	r4, #5
 800143a:	d10f      	bne.n	800145c <Setup0_Process+0x7c>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 800143c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8001440:	2a00      	cmp	r2, #0
 8001442:	da01      	bge.n	8001448 <Setup0_Process+0x68>
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 8001444:	2308      	movs	r3, #8
 8001446:	e04d      	b.n	80014e4 <Setup0_Process+0x104>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8001448:	78da      	ldrb	r2, [r3, #3]
 800144a:	2a00      	cmp	r2, #0
 800144c:	d1fa      	bne.n	8001444 <Setup0_Process+0x64>
          || (pInformation->USBwIndex != 0)
 800144e:	889a      	ldrh	r2, [r3, #4]
 8001450:	2a00      	cmp	r2, #0
 8001452:	d1f7      	bne.n	8001444 <Setup0_Process+0x64>
          || (pInformation->Current_Configuration != 0))
 8001454:	7a9b      	ldrb	r3, [r3, #10]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d037      	beq.n	80014ca <Setup0_Process+0xea>
 800145a:	e7f3      	b.n	8001444 <Setup0_Process+0x64>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 800145c:	2c03      	cmp	r4, #3
 800145e:	d113      	bne.n	8001488 <Setup0_Process+0xa8>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 8001460:	789a      	ldrb	r2, [r3, #2]
 8001462:	2a01      	cmp	r2, #1
 8001464:	d007      	beq.n	8001476 <Setup0_Process+0x96>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8001466:	4b78      	ldr	r3, [pc, #480]	; (8001648 <Setup0_Process+0x268>)
 8001468:	4620      	mov	r0, r4
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8001470:	2803      	cmp	r0, #3
 8001472:	d128      	bne.n	80014c6 <Setup0_Process+0xe6>
 8001474:	e035      	b.n	80014e2 <Setup0_Process+0x102>
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
          && (pInformation->USBwIndex == 0)
 8001476:	889a      	ldrh	r2, [r3, #4]
 8001478:	2a00      	cmp	r2, #0
 800147a:	d1f4      	bne.n	8001466 <Setup0_Process+0x86>
          && (ValBit(pInformation->Current_Feature, 5)))
 800147c:	7a5b      	ldrb	r3, [r3, #9]
 800147e:	0698      	lsls	r0, r3, #26
 8001480:	d5f1      	bpl.n	8001466 <Setup0_Process+0x86>
      {
        Result = Standard_SetDeviceFeature();
 8001482:	f7ff ff6d 	bl	8001360 <Standard_SetDeviceFeature>
 8001486:	e01c      	b.n	80014c2 <Setup0_Process+0xe2>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8001488:	2c01      	cmp	r4, #1
 800148a:	d1ec      	bne.n	8001466 <Setup0_Process+0x86>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 800148c:	789a      	ldrb	r2, [r3, #2]
 800148e:	2a01      	cmp	r2, #1
 8001490:	d1e9      	bne.n	8001466 <Setup0_Process+0x86>
          && pInformation->USBwIndex == 0
 8001492:	889a      	ldrh	r2, [r3, #4]
 8001494:	2a00      	cmp	r2, #0
 8001496:	d1e6      	bne.n	8001466 <Setup0_Process+0x86>
          && ValBit(pInformation->Current_Feature, 5))
 8001498:	7a5b      	ldrb	r3, [r3, #9]
 800149a:	0699      	lsls	r1, r3, #26
 800149c:	d5e3      	bpl.n	8001466 <Setup0_Process+0x86>
      {
        Result = Standard_ClearFeature();
 800149e:	f7ff feb5 	bl	800120c <Standard_ClearFeature>
 80014a2:	e00e      	b.n	80014c2 <Setup0_Process+0xe2>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80014a4:	2a01      	cmp	r2, #1
 80014a6:	d104      	bne.n	80014b2 <Setup0_Process+0xd2>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 80014a8:	2c0b      	cmp	r4, #11
 80014aa:	d1dc      	bne.n	8001466 <Setup0_Process+0x86>
    {
      Result = Standard_SetInterface();
 80014ac:	f7ff fe8a 	bl	80011c4 <Standard_SetInterface>
 80014b0:	e007      	b.n	80014c2 <Setup0_Process+0xe2>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80014b2:	2a02      	cmp	r2, #2
 80014b4:	d1d7      	bne.n	8001466 <Setup0_Process+0x86>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 80014b6:	2c01      	cmp	r4, #1
 80014b8:	d0f1      	beq.n	800149e <Setup0_Process+0xbe>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 80014ba:	2c03      	cmp	r4, #3
 80014bc:	d1d3      	bne.n	8001466 <Setup0_Process+0x86>
    {
      Result = Standard_SetEndPointFeature();
 80014be:	f7ff ff0d 	bl	80012dc <Standard_SetEndPointFeature>
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 80014c2:	b110      	cbz	r0, 80014ca <Setup0_Process+0xea>
 80014c4:	e7cf      	b.n	8001466 <Setup0_Process+0x86>
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 80014c6:	2800      	cmp	r0, #0
 80014c8:	d1bc      	bne.n	8001444 <Setup0_Process+0x64>
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 80014ca:	6832      	ldr	r2, [r6, #0]
 80014cc:	4b5f      	ldr	r3, [pc, #380]	; (800164c <Setup0_Process+0x26c>)
 80014ce:	b292      	uxth	r2, r2
 80014d0:	4413      	add	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	4b5d      	ldr	r3, [pc, #372]	; (8001650 <Setup0_Process+0x270>)
 80014da:	2230      	movs	r2, #48	; 0x30
 80014dc:	801a      	strh	r2, [r3, #0]
  {
    ControlState = STALLED;
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 80014de:	2306      	movs	r3, #6
 80014e0:	e000      	b.n	80014e4 <Setup0_Process+0x104>
  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
    {
      ControlState = PAUSE;
 80014e2:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 80014e4:	682a      	ldr	r2, [r5, #0]
 80014e6:	7213      	strb	r3, [r2, #8]
 80014e8:	e0d4      	b.n	8001694 <Setup0_Process+0x2b4>


  CopyRoutine = NULL;
  wOffset = 0;

  if (Request_No == GET_DESCRIPTOR)
 80014ea:	2c06      	cmp	r4, #6
 80014ec:	d118      	bne.n	8001520 <Setup0_Process+0x140>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	0652      	lsls	r2, r2, #25
 80014f2:	d17c      	bne.n	80015ee <Setup0_Process+0x20e>
    {
      u8 wValue1 = pInformation->USBwValue1;
 80014f4:	78da      	ldrb	r2, [r3, #3]
 80014f6:	4b54      	ldr	r3, [pc, #336]	; (8001648 <Setup0_Process+0x268>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 80014f8:	2a01      	cmp	r2, #1
 80014fa:	d102      	bne.n	8001502 <Setup0_Process+0x122>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	e06c      	b.n	80015dc <Setup0_Process+0x1fc>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8001502:	2a02      	cmp	r2, #2
 8001504:	d102      	bne.n	800150c <Setup0_Process+0x12c>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	e067      	b.n	80015dc <Setup0_Process+0x1fc>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 800150c:	2a03      	cmp	r2, #3
 800150e:	d102      	bne.n	8001516 <Setup0_Process+0x136>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001514:	e062      	b.n	80015dc <Setup0_Process+0x1fc>
      } else if (wValue1 == 0x21) /* added to support functional descriptors */
 8001516:	2a21      	cmp	r2, #33	; 0x21
 8001518:	d169      	bne.n	80015ee <Setup0_Process+0x20e>
      {
	CopyRoutine = pProperty->GetFunctionalDescriptor;
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151e:	e05d      	b.n	80015dc <Setup0_Process+0x1fc>
      } /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8001520:	2c00      	cmp	r4, #0
 8001522:	d13c      	bne.n	800159e <Setup0_Process+0x1be>
 8001524:	8859      	ldrh	r1, [r3, #2]
 8001526:	2900      	cmp	r1, #0
 8001528:	d161      	bne.n	80015ee <Setup0_Process+0x20e>
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001530:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001534:	d15b      	bne.n	80015ee <Setup0_Process+0x20e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 800153c:	d104      	bne.n	8001548 <Setup0_Process+0x168>
        && (pInformation->USBwIndex == 0))
 800153e:	889b      	ldrh	r3, [r3, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 80ab 	beq.w	800169c <Setup0_Process+0x2bc>
 8001546:	e052      	b.n	80015ee <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001548:	2a01      	cmp	r2, #1
 800154a:	d10c      	bne.n	8001566 <Setup0_Process+0x186>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 800154c:	4a3e      	ldr	r2, [pc, #248]	; (8001648 <Setup0_Process+0x268>)
 800154e:	7918      	ldrb	r0, [r3, #4]
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	6992      	ldr	r2, [r2, #24]
 8001554:	4790      	blx	r2
 8001556:	2800      	cmp	r0, #0
 8001558:	d149      	bne.n	80015ee <Setup0_Process+0x20e>
          && (pInformation->Current_Configuration != 0))
 800155a:	682b      	ldr	r3, [r5, #0]
 800155c:	7a9b      	ldrb	r3, [r3, #10]
 800155e:	2b00      	cmp	r3, #0
 8001560:	f040 809c 	bne.w	800169c <Setup0_Process+0x2bc>
 8001564:	e043      	b.n	80015ee <Setup0_Process+0x20e>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001566:	2a02      	cmp	r2, #2
 8001568:	d141      	bne.n	80015ee <Setup0_Process+0x20e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800156a:	791b      	ldrb	r3, [r3, #4]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800156c:	4839      	ldr	r0, [pc, #228]	; (8001654 <Setup0_Process+0x274>)
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800156e:	f003 010f 	and.w	r1, r3, #15
 8001572:	008a      	lsls	r2, r1, #2

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001574:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001578:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800157c:	6812      	ldr	r2, [r2, #0]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800157e:	7800      	ldrb	r0, [r0, #0]
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8001580:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001584:	bf14      	ite	ne
 8001586:	f002 0230 	andne.w	r2, r2, #48	; 0x30
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 800158a:	f402 5240 	andeq.w	r2, r2, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800158e:	4281      	cmp	r1, r0
 8001590:	d22d      	bcs.n	80015ee <Setup0_Process+0x20e>
 8001592:	f013 0f70 	tst.w	r3, #112	; 0x70
 8001596:	d12a      	bne.n	80015ee <Setup0_Process+0x20e>
          && (Status != 0))
 8001598:	2a00      	cmp	r2, #0
 800159a:	d17f      	bne.n	800169c <Setup0_Process+0x2bc>
 800159c:	e027      	b.n	80015ee <Setup0_Process+0x20e>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 800159e:	2c08      	cmp	r4, #8
 80015a0:	d103      	bne.n	80015aa <Setup0_Process+0x1ca>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	065b      	lsls	r3, r3, #25
 80015a6:	d07b      	beq.n	80016a0 <Setup0_Process+0x2c0>
 80015a8:	e021      	b.n	80015ee <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 80015aa:	2c0a      	cmp	r4, #10
 80015ac:	d11f      	bne.n	80015ee <Setup0_Process+0x20e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80015ae:	781a      	ldrb	r2, [r3, #0]
 80015b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015b4:	2a01      	cmp	r2, #1
 80015b6:	d11a      	bne.n	80015ee <Setup0_Process+0x20e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 80015b8:	7a9a      	ldrb	r2, [r3, #10]
 80015ba:	b1c2      	cbz	r2, 80015ee <Setup0_Process+0x20e>
 80015bc:	8859      	ldrh	r1, [r3, #2]
 80015be:	b9b1      	cbnz	r1, 80015ee <Setup0_Process+0x20e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015c6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80015ca:	d110      	bne.n	80015ee <Setup0_Process+0x20e>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 80015cc:	4a1e      	ldr	r2, [pc, #120]	; (8001648 <Setup0_Process+0x268>)
 80015ce:	7918      	ldrb	r0, [r3, #4]
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	6992      	ldr	r2, [r2, #24]
 80015d4:	4790      	blx	r2
 80015d6:	2800      	cmp	r0, #0
 80015d8:	d064      	beq.n	80016a4 <Setup0_Process+0x2c4>
 80015da:	e008      	b.n	80015ee <Setup0_Process+0x20e>
      CopyRoutine = Standard_GetInterface;
    }

  }

  if (CopyRoutine)
 80015dc:	b13b      	cbz	r3, 80015ee <Setup0_Process+0x20e>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 80015de:	682a      	ldr	r2, [r5, #0]
 80015e0:	2400      	movs	r4, #0
 80015e2:	8254      	strh	r4, [r2, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80015e4:	6193      	str	r3, [r2, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 80015e6:	4620      	mov	r0, r4
 80015e8:	4798      	blx	r3
    Result = USB_SUCCESS;
 80015ea:	4620      	mov	r0, r4
 80015ec:	e00a      	b.n	8001604 <Setup0_Process+0x224>
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <Setup0_Process+0x268>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	682b      	ldr	r3, [r5, #0]
 80015f4:	6912      	ldr	r2, [r2, #16]
 80015f6:	7858      	ldrb	r0, [r3, #1]
 80015f8:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 80015fa:	2803      	cmp	r0, #3
 80015fc:	d102      	bne.n	8001604 <Setup0_Process+0x224>
    {
      pInformation->ControlState = PAUSE;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <Setup0_Process+0x264>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	e005      	b.n	8001610 <Setup0_Process+0x230>
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8001604:	682b      	ldr	r3, [r5, #0]
 8001606:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800160a:	8a1a      	ldrh	r2, [r3, #16]
 800160c:	428a      	cmp	r2, r1
 800160e:	d101      	bne.n	8001614 <Setup0_Process+0x234>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8001610:	2209      	movs	r2, #9
 8001612:	e003      	b.n	800161c <Setup0_Process+0x23c>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8001614:	2802      	cmp	r0, #2
 8001616:	d000      	beq.n	800161a <Setup0_Process+0x23a>
 8001618:	b912      	cbnz	r2, 8001620 <Setup0_Process+0x240>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 800161a:	2208      	movs	r2, #8
 800161c:	721a      	strb	r2, [r3, #8]
 800161e:	e039      	b.n	8001694 <Setup0_Process+0x2b4>
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8001620:	f993 1000 	ldrsb.w	r1, [r3]
 8001624:	2900      	cmp	r1, #0
 8001626:	da2f      	bge.n	8001688 <Setup0_Process+0x2a8>
  {
    /* Device ==> Host */
    vu32 wLength = pInformation->USBwLength;
 8001628:	88d9      	ldrh	r1, [r3, #6]
 800162a:	9101      	str	r1, [sp, #4]

    /* Restrict the data length to be the one host asks */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 800162c:	9801      	ldr	r0, [sp, #4]
 800162e:	4282      	cmp	r2, r0
 8001630:	4805      	ldr	r0, [pc, #20]	; (8001648 <Setup0_Process+0x268>)
 8001632:	d911      	bls.n	8001658 <Setup0_Process+0x278>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8001634:	9a01      	ldr	r2, [sp, #4]
 8001636:	821a      	strh	r2, [r3, #16]
 8001638:	e01f      	b.n	800167a <Setup0_Process+0x29a>
 800163a:	bf00      	nop
 800163c:	40005c50 	andmi	r5, r0, r0, asr ip
 8001640:	20003004 	andcs	r3, r0, r4
 8001644:	2000030c 	andcs	r0, r0, ip, lsl #6
 8001648:	200002e4 	andcs	r0, r0, r4, ror #5
 800164c:	20003002 	andcs	r3, r0, r2
 8001650:	200002dc 	ldrdcs	r0, [r0], -ip
 8001654:	20000090 	mulcs	r0, r0, r0
    }

    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8001658:	428a      	cmp	r2, r1
 800165a:	d20e      	bcs.n	800167a <Setup0_Process+0x29a>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800165c:	6801      	ldr	r1, [r0, #0]
 800165e:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 8001662:	428a      	cmp	r2, r1
 8001664:	d201      	bcs.n	800166a <Setup0_Process+0x28a>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8001666:	2100      	movs	r1, #0
 8001668:	e005      	b.n	8001676 <Setup0_Process+0x296>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800166a:	fb92 f4f1 	sdiv	r4, r2, r1
 800166e:	fb01 2214 	mls	r2, r1, r4, r2
 8001672:	b912      	cbnz	r2, 800167a <Setup0_Process+0x29a>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8001674:	2101      	movs	r1, #1
 8001676:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <Setup0_Process+0x2c8>)
 8001678:	7011      	strb	r1, [r2, #0]
      }
    }

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 800167a:	6802      	ldr	r2, [r0, #0]
 800167c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8001680:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8001682:	f7ff fd2f 	bl	80010e4 <DataStageIn>
 8001686:	e005      	b.n	8001694 <Setup0_Process+0x2b4>
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8001688:	2203      	movs	r2, #3
 800168a:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <Setup0_Process+0x2cc>)
 800168e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001692:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8001694:	f7ff fe84 	bl	80013a0 <Post0_Process>
}
 8001698:	b002      	add	sp, #8
 800169a:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
        && (pInformation->USBwIndex == 0))
    {
      CopyRoutine = Standard_GetStatus;
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <Setup0_Process+0x2d0>)
 800169e:	e79e      	b.n	80015de <Setup0_Process+0x1fe>
  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      CopyRoutine = Standard_GetConfiguration;
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <Setup0_Process+0x2d4>)
 80016a2:	e79c      	b.n	80015de <Setup0_Process+0x1fe>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
    {
      CopyRoutine = Standard_GetInterface;
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <Setup0_Process+0x2d8>)
 80016a6:	e79a      	b.n	80015de <Setup0_Process+0x1fe>
 80016a8:	20000b2c 	andcs	r0, r0, ip, lsr #22
 80016ac:	200002da 	ldrdcs	r0, [r0], -sl
 80016b0:	08001055 	stmdaeq	r0, {r0, r2, r4, r6, ip}
 80016b4:	0800100d 	stmdaeq	r0, {r0, r2, r3, ip}
 80016b8:	08001031 	stmdaeq	r0, {r0, r4, r5, ip}

080016bc <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Out0_Process(void)
{
 80016bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32 ControlState = pInformation->ControlState;
 80016be:	4d2b      	ldr	r5, [pc, #172]	; (800176c <Out0_Process+0xb0>)
 80016c0:	682c      	ldr	r4, [r5, #0]
 80016c2:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d001      	beq.n	80016cc <Out0_Process+0x10>
 80016c8:	2b05      	cmp	r3, #5
 80016ca:	d141      	bne.n	8001750 <Out0_Process+0x94>
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 80016cc:	69a3      	ldr	r3, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 80016ce:	8a22      	ldrh	r2, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 80016d0:	b1ab      	cbz	r3, 80016fe <Out0_Process+0x42>
 80016d2:	b1a2      	cbz	r2, 80016fe <Out0_Process+0x42>
  {
    u8 *Buffer;
    u32 Length;

    Length = pEPinfo->PacketSize;
 80016d4:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80016d6:	4296      	cmp	r6, r2
 80016d8:	bf28      	it	cs
 80016da:	4616      	movcs	r6, r2
 80016dc:	4630      	mov	r0, r6
 80016de:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 80016e0:	8a23      	ldrh	r3, [r4, #16]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80016e2:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 80016e4:	1b9b      	subs	r3, r3, r6
 80016e6:	8223      	strh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 80016e8:	8a63      	ldrh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 80016ea:	2000      	movs	r0, #0
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 80016ec:	4433      	add	r3, r6
 80016ee:	8263      	strh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 80016f0:	f7ff fb8a 	bl	8000e08 <GetEPRxAddr>
 80016f4:	4632      	mov	r2, r6
 80016f6:	4601      	mov	r1, r0
 80016f8:	4638      	mov	r0, r7
 80016fa:	f000 f8a5 	bl	8001848 <PMAToUserBufferCopy>
  }

  if (pEPinfo->Usb_rLength != 0)
 80016fe:	8a23      	ldrh	r3, [r4, #16]
 8001700:	b153      	cbz	r3, 8001718 <Out0_Process+0x5c>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8001702:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <Out0_Process+0xb4>)
    SetEPTxCount(ENDP0, 0);
 8001704:	2000      	movs	r0, #0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8001706:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 800170a:	4601      	mov	r1, r0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800170c:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 800170e:	f7ff fb89 	bl	8000e24 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8001712:	4b18      	ldr	r3, [pc, #96]	; (8001774 <Out0_Process+0xb8>)
 8001714:	2230      	movs	r2, #48	; 0x30
 8001716:	801a      	strh	r2, [r3, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8001718:	8a23      	ldrh	r3, [r4, #16]
 800171a:	8aa2      	ldrh	r2, [r4, #20]
 800171c:	429a      	cmp	r2, r3
 800171e:	d802      	bhi.n	8001726 <Out0_Process+0x6a>
  {
    pInformation->ControlState = OUT_DATA;
 8001720:	682b      	ldr	r3, [r5, #0]
 8001722:	2203      	movs	r2, #3
 8001724:	e002      	b.n	800172c <Out0_Process+0x70>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8001726:	b11b      	cbz	r3, 8001730 <Out0_Process+0x74>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8001728:	682b      	ldr	r3, [r5, #0]
 800172a:	2205      	movs	r2, #5
 800172c:	721a      	strb	r2, [r3, #8]
 800172e:	e00c      	b.n	800174a <Out0_Process+0x8e>
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8001730:	682a      	ldr	r2, [r5, #0]
 8001732:	2106      	movs	r1, #6
 8001734:	7211      	strb	r1, [r2, #8]
      USB_StatusIn();
 8001736:	4a10      	ldr	r2, [pc, #64]	; (8001778 <Out0_Process+0xbc>)
 8001738:	6811      	ldr	r1, [r2, #0]
 800173a:	4a10      	ldr	r2, [pc, #64]	; (800177c <Out0_Process+0xc0>)
 800173c:	b289      	uxth	r1, r1
 800173e:	440a      	add	r2, r1
 8001740:	0052      	lsls	r2, r2, #1
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <Out0_Process+0xb8>)
 8001746:	2230      	movs	r2, #48	; 0x30
 8001748:	801a      	strh	r2, [r3, #0]
  u32 ControlState = pInformation->ControlState;

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 800174a:	682b      	ldr	r3, [r5, #0]
 800174c:	7a1b      	ldrb	r3, [r3, #8]
 800174e:	e006      	b.n	800175e <Out0_Process+0xa2>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8001750:	2b07      	cmp	r3, #7
 8001752:	d103      	bne.n	800175c <Out0_Process+0xa0>
  {
    (*pProperty->Process_Status_OUT)();
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <Out0_Process+0xc4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	4798      	blx	r3
  }

  else if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 800175c:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 800175e:	682a      	ldr	r2, [r5, #0]
 8001760:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 8001762:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 8001766:	f7ff be1b 	b.w	80013a0 <Post0_Process>
 800176a:	bf00      	nop
 800176c:	2000030c 	andcs	r0, r0, ip, lsl #6
 8001770:	200002da 	ldrdcs	r0, [r0], -sl
 8001774:	200002dc 	ldrdcs	r0, [r0], -ip
 8001778:	40005c50 	andmi	r5, r0, r0, asr ip
 800177c:	20003002 	andcs	r3, r0, r2
 8001780:	200002e4 	andcs	r0, r0, r4, ror #5

08001784 <SetDeviceAddress>:
* Input          : - Val: device adress.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(u8 Val)
{
 8001784:	b530      	push	{r4, r5, lr}
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <SetDeviceAddress+0x30>)
 8001788:	781c      	ldrb	r4, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800178a:	2300      	movs	r3, #0
 800178c:	42a3      	cmp	r3, r4
 800178e:	d20c      	bcs.n	80017aa <SetDeviceAddress+0x26>
 8001790:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8001794:	f502 52b8 	add.w	r2, r2, #5888	; 0x1700
 8001798:	0091      	lsls	r1, r2, #2
  {
    _SetEPAddress((u8)i, (u8)i);
 800179a:	680d      	ldr	r5, [r1, #0]
 800179c:	f648 728f 	movw	r2, #36751	; 0x8f8f
 80017a0:	402a      	ands	r2, r5
 80017a2:	431a      	orrs	r2, r3
 80017a4:	600a      	str	r2, [r1, #0]
{
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80017a6:	3301      	adds	r3, #1
 80017a8:	e7f0      	b.n	800178c <SetDeviceAddress+0x8>
  {
    _SetEPAddress((u8)i, (u8)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 80017aa:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <SetDeviceAddress+0x34>)
 80017ac:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80017b0:	6018      	str	r0, [r3, #0]
 80017b2:	bd30      	pop	{r4, r5, pc}
 80017b4:	20000090 	mulcs	r0, r0, r0
 80017b8:	40005c4c 	andmi	r5, r0, ip, asr #24

080017bc <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 In0_Process(void)
{
 80017bc:	b510      	push	{r4, lr}
  u32 ControlState = pInformation->ControlState;
 80017be:	4c13      	ldr	r4, [pc, #76]	; (800180c <In0_Process+0x50>)
 80017c0:	6823      	ldr	r3, [r4, #0]
 80017c2:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80017c4:	2a02      	cmp	r2, #2
 80017c6:	d001      	beq.n	80017cc <In0_Process+0x10>
 80017c8:	2a04      	cmp	r2, #4
 80017ca:	d104      	bne.n	80017d6 <In0_Process+0x1a>
  {
    DataStageIn();
 80017cc:	f7ff fc8a 	bl	80010e4 <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	7a1b      	ldrb	r3, [r3, #8]
 80017d4:	e013      	b.n	80017fe <In0_Process+0x42>
  }

  else if (ControlState == WAIT_STATUS_IN)
 80017d6:	2a06      	cmp	r2, #6
 80017d8:	d110      	bne.n	80017fc <In0_Process+0x40>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80017da:	785a      	ldrb	r2, [r3, #1]
 80017dc:	2a05      	cmp	r2, #5
 80017de:	d109      	bne.n	80017f4 <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 80017e0:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80017e2:	0652      	lsls	r2, r2, #25
 80017e4:	d106      	bne.n	80017f4 <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 80017e6:	7898      	ldrb	r0, [r3, #2]
 80017e8:	f7ff ffcc 	bl	8001784 <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <In0_Process+0x54>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	4798      	blx	r3
    }
    (*pProperty->Process_Status_IN)();
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <In0_Process+0x58>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	4798      	blx	r3
    ControlState = STALLED;
  }

  else
  {
    ControlState = STALLED;
 80017fc:	2308      	movs	r3, #8
  }

  pInformation->ControlState = ControlState;
 80017fe:	6822      	ldr	r2, [r4, #0]
 8001800:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 8001802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 8001806:	f7ff bdcb 	b.w	80013a0 <Post0_Process>
 800180a:	bf00      	nop
 800180c:	2000030c 	andcs	r0, r0, ip, lsl #6
 8001810:	20000308 	andcs	r0, r0, r8, lsl #6
 8001814:	200002e4 	andcs	r0, r0, r4, ror #5

08001818 <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 8001818:	b530      	push	{r4, r5, lr}
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 800181a:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800181e:	3201      	adds	r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 8001820:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8001824:	1052      	asrs	r2, r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 8001826:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8001828:	2300      	movs	r3, #0
 800182a:	4293      	cmp	r3, r2
 800182c:	f100 0002 	add.w	r0, r0, #2
 8001830:	d009      	beq.n	8001846 <UserToPMABufferCopy+0x2e>
  {
    temp1 = (u16) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 8001832:	f810 5c01 	ldrb.w	r5, [r0, #-1]
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (u16) * pbUsrBuf;
 8001836:	f810 4c02 	ldrb.w	r4, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 800183a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    *pdwVal++ = temp2;
 800183e:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 8001842:	3301      	adds	r3, #1
 8001844:	e7f1      	b.n	800182a <UserToPMABufferCopy+0x12>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001846:	bd30      	pop	{r4, r5, pc}

08001848 <PMAToUserBufferCopy>:
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 8001848:	b510      	push	{r4, lr}
  u32 n = (wNBytes + 1) >> 1;/* /2*/
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 800184a:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 800184e:	3201      	adds	r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 8001850:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 8001854:	1052      	asrs	r2, r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 8001856:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8001858:	2300      	movs	r3, #0
 800185a:	4293      	cmp	r3, r2
 800185c:	d005      	beq.n	800186a <PMAToUserBufferCopy+0x22>
  {
    *(u16*)pbUsrBuf++ = *pdwVal++;
 800185e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8001862:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 8001866:	3301      	adds	r3, #1
 8001868:	e7f7      	b.n	800185a <PMAToUserBufferCopy+0x12>
    pbUsrBuf++;
  }
}
 800186a:	bd10      	pop	{r4, pc}

Disassembly of section .data:

20000000 <Device_Property>:
20000000:	08000495 	stmdaeq	r0, {r0, r2, r4, r7, sl}
20000004:	08000181 	stmdaeq	r0, {r0, r7, r8}
20000008:	0800013f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r8}
2000000c:	08000141 	stmdaeq	r0, {r0, r6, r8}
20000010:	08000229 	stmdaeq	r0, {r0, r3, r5, r9}
20000014:	080002cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9}
20000018:	08000143 	stmdaeq	r0, {r0, r1, r6, r8}
2000001c:	08000289 	stmdaeq	r0, {r0, r3, r7, r9}
20000020:	08000295 	stmdaeq	r0, {r0, r2, r4, r7, r9}
20000024:	080002a1 	stmdaeq	r0, {r0, r5, r7, r9}
20000028:	080002c1 	stmdaeq	r0, {r0, r6, r7, r9}
2000002c:	00000000 	andeq	r0, r0, r0
20000030:	00000040 	andeq	r0, r0, r0, asr #32

20000034 <pEpInt_IN>:
20000034:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000038:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
2000003c:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000040:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000044:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000048:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
2000004c:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}

20000050 <pEpInt_OUT>:
20000050:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000054:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000058:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
2000005c:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000060:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000064:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000068:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}

2000006c <User_Standard_Requests>:
2000006c:	0800014d 	stmdaeq	r0, {r0, r2, r3, r6, r8}
20000070:	08000151 	stmdaeq	r0, {r0, r4, r6, r8}
20000074:	08000169 	stmdaeq	r0, {r0, r3, r5, r6, r8}
20000078:	0800016b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r8}
2000007c:	0800016d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8}
20000080:	0800016f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r8}
20000084:	08000171 	stmdaeq	r0, {r0, r4, r5, r6, r8}
20000088:	08000173 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8}
2000008c:	08000175 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8}

20000090 <Device_Table>:
20000090:	00000101 	andeq	r0, r0, r1, lsl #2

20000094 <usbStringDescriptor>:
20000094:	200000e8 	andcs	r0, r0, r8, ror #1
20000098:	00000004 	andeq	r0, r0, r4
2000009c:	20000132 	andcs	r0, r0, r2, lsr r1
200000a0:	0000001a 	andeq	r0, r0, sl, lsl r0
200000a4:	20000154 	andcs	r0, r0, r4, asr r1
200000a8:	00000014 	andeq	r0, r0, r4, lsl r0
200000ac:	20000119 	andcs	r0, r0, r9, lsl r1
200000b0:	00000010 	andeq	r0, r0, r0, lsl r0
200000b4:	20000168 	andcs	r0, r0, r8, ror #2
200000b8:	00000080 	andeq	r0, r0, r0, lsl #1
200000bc:	200001e8 	andcs	r0, r0, r8, ror #3
200000c0:	0000006c 	andeq	r0, r0, ip, rrx
200000c4:	20000254 	andcs	r0, r0, r4, asr r2
200000c8:	0000006c 	andeq	r0, r0, ip, rrx

200000cc <u8_usbDeviceDescriptorDFU>:
200000cc:	01000112 	tsteq	r0, r2, lsl r1
200000d0:	40000000 	andmi	r0, r0, r0
200000d4:	00030203 	andeq	r0, r3, r3, lsl #4
200000d8:	02010201 	andeq	r0, r1, #268435456	; 0x10000000
200000dc:	00000103 	andeq	r0, r0, r3, lsl #2

200000e0 <usbFunctionalDescriptor>:
200000e0:	20000129 	andcs	r0, r0, r9, lsr #2
200000e4:	00000009 	andeq	r0, r0, r9

200000e8 <u8_usbStringLangId>:
200000e8:	04090304 	streq	r0, [r9], #-772	; 0x304

200000ec <u8_usbConfigDescriptorDFU>:
200000ec:	002d0209 	eoreq	r0, sp, r9, lsl #4
200000f0:	80000101 	andhi	r0, r0, r1, lsl #2
200000f4:	00040932 	andeq	r0, r4, r2, lsr r9
200000f8:	01fe0000 	mvnseq	r0, r0
200000fc:	04090402 	streq	r0, [r9], #-1026	; 0x402
20000100:	fe000100 	cdp2	1, 0, cr0, cr0, cr0, {0}
20000104:	09050201 	stmdbeq	r5, {r0, r9}
20000108:	00020004 	andeq	r0, r2, r4
2000010c:	060201fe 			; <UNDEFINED> instruction: 0x060201fe
20000110:	ff032109 			; <UNDEFINED> instruction: 0xff032109
20000114:	10080000 	andne	r0, r8, r0
20000118:	4c031001 	stcmi	0, cr1, [r3], {1}

20000119 <u8_usbStringSerial>:
20000119:	004c0310 	subeq	r0, ip, r0, lsl r3
2000011d:	004d004c 	subeq	r0, sp, ip, asr #32
20000121:	00300020 	eorseq	r0, r0, r0, lsr #32
20000125:	00330030 	eorseq	r0, r3, r0, lsr r0

20000129 <u8_usbFunctionalDescriptor>:
20000129:	ff032109 			; <UNDEFINED> instruction: 0xff032109
2000012d:	10080000 	andne	r0, r8, r0
20000131:	32031a01 	andcc	r1, r3, #4096	; 0x1000

20000132 <u8_usbStringVendor>:
20000132:	0032031a 	eorseq	r0, r2, sl, lsl r3
20000136:	00330030 	eorseq	r0, r3, r0, lsr r0
2000013a:	006e0049 	rsbeq	r0, lr, r9, asr #32
2000013e:	00750064 	rsbseq	r0, r5, r4, rrx
20000142:	00740073 	rsbseq	r0, r4, r3, ror r0
20000146:	00690072 	rsbeq	r0, r9, r2, ror r0
2000014a:	00cc0065 	sbceq	r0, ip, r5, rrx

2000014c <usbDeviceDescriptorDFU>:
2000014c:	200000cc 	andcs	r0, r0, ip, asr #1
20000150:	00000012 	andeq	r0, r0, r2, lsl r0

20000154 <u8_usbStringProduct>:
20000154:	004d0314 	subeq	r0, sp, r4, lsl r3
20000158:	00740061 	rsbseq	r0, r4, r1, rrx
2000015c:	00690072 	rsbeq	r0, r9, r2, ror r0
20000160:	00200078 	eoreq	r0, r0, r8, ror r0
20000164:	00460044 	subeq	r0, r6, r4, asr #32

20000168 <u8_usbStringAlt0>:
20000168:	00530380 	subseq	r0, r3, r0, lsl #7
2000016c:	004d0054 	subeq	r0, sp, r4, asr r0
20000170:	00320033 	eorseq	r0, r2, r3, lsr r0
20000174:	00750064 	rsbseq	r0, r5, r4, rrx
20000178:	006e0069 	rsbeq	r0, lr, r9, rrx
2000017c:	0020006f 	eoreq	r0, r0, pc, rrx
20000180:	006f0062 	rsbeq	r0, pc, r2, rrx
20000184:	0074006f 	rsbseq	r0, r4, pc, rrx
20000188:	006f006c 	rsbeq	r0, pc, ip, rrx
2000018c:	00640061 	rsbeq	r0, r4, r1, rrx
20000190:	00720065 	rsbseq	r0, r2, r5, rrx
20000194:	00760020 	rsbseq	r0, r6, r0, lsr #32
20000198:	002e0031 	eoreq	r0, lr, r1, lsr r0
2000019c:	00200030 	eoreq	r0, r0, r0, lsr r0
200001a0:	00450020 	subeq	r0, r5, r0, lsr #32
200001a4:	00520052 	subseq	r0, r2, r2, asr r0
200001a8:	0052004f 	subseq	r0, r2, pc, asr #32
200001ac:	0020002e 	eoreq	r0, r0, lr, lsr #32
200001b0:	00700055 	rsbseq	r0, r0, r5, asr r0
200001b4:	006f006c 	rsbeq	r0, pc, ip, rrx
200001b8:	00640061 	rsbeq	r0, r4, r1, rrx
200001bc:	00740020 	rsbseq	r0, r4, r0, lsr #32
200001c0:	0020006f 	eoreq	r0, r0, pc, rrx
200001c4:	00410052 	subeq	r0, r1, r2, asr r0
200001c8:	0020004d 	eoreq	r0, r0, sp, asr #32
200001cc:	006f006e 	rsbeq	r0, pc, lr, rrx
200001d0:	00200074 	eoreq	r0, r0, r4, ror r0
200001d4:	00750073 	rsbseq	r0, r5, r3, ror r0
200001d8:	00700070 	rsbseq	r0, r0, r0, ror r0
200001dc:	0072006f 	rsbseq	r0, r2, pc, rrx
200001e0:	00650074 	rsbeq	r0, r5, r4, ror r0
200001e4:	002e0064 	eoreq	r0, lr, r4, rrx

200001e8 <u8_usbStringAlt1>:
200001e8:	0053036c 	subseq	r0, r3, ip, ror #6
200001ec:	004d0054 	subeq	r0, sp, r4, asr r0
200001f0:	00320033 	eorseq	r0, r2, r3, lsr r0
200001f4:	00750064 	rsbseq	r0, r5, r4, rrx
200001f8:	006e0069 	rsbeq	r0, lr, r9, rrx
200001fc:	0020006f 	eoreq	r0, r0, pc, rrx
20000200:	006f0062 	rsbeq	r0, pc, r2, rrx
20000204:	0074006f 	rsbseq	r0, r4, pc, rrx
20000208:	006f006c 	rsbeq	r0, pc, ip, rrx
2000020c:	00640061 	rsbeq	r0, r4, r1, rrx
20000210:	00720065 	rsbseq	r0, r2, r5, rrx
20000214:	00760020 	rsbseq	r0, r6, r0, lsr #32
20000218:	002e0031 	eoreq	r0, lr, r1, lsr r0
2000021c:	00200030 	eoreq	r0, r0, r0, lsr r0
20000220:	00550020 	subseq	r0, r5, r0, lsr #32
20000224:	006c0070 	rsbeq	r0, ip, r0, ror r0
20000228:	0061006f 	rsbeq	r0, r1, pc, rrx
2000022c:	00200064 	eoreq	r0, r0, r4, rrx
20000230:	006f0074 	rsbeq	r0, pc, r4, ror r0	; <UNPREDICTABLE>
20000234:	00460020 	subeq	r0, r6, r0, lsr #32
20000238:	0061006c 	rsbeq	r0, r1, ip, rrx
2000023c:	00680073 	rsbeq	r0, r8, r3, ror r0
20000240:	00300020 	eorseq	r0, r0, r0, lsr #32
20000244:	00380078 	eorseq	r0, r8, r8, ror r0
20000248:	00300030 	eorseq	r0, r0, r0, lsr r0
2000024c:	00300035 	eorseq	r0, r0, r5, lsr r0
20000250:	00300030 	eorseq	r0, r0, r0, lsr r0

20000254 <u8_usbStringAlt2>:
20000254:	0053036c 	subseq	r0, r3, ip, ror #6
20000258:	004d0054 	subeq	r0, sp, r4, asr r0
2000025c:	00320033 	eorseq	r0, r2, r3, lsr r0
20000260:	00750064 	rsbseq	r0, r5, r4, rrx
20000264:	006e0069 	rsbeq	r0, lr, r9, rrx
20000268:	0020006f 	eoreq	r0, r0, pc, rrx
2000026c:	006f0062 	rsbeq	r0, pc, r2, rrx
20000270:	0074006f 	rsbseq	r0, r4, pc, rrx
20000274:	006f006c 	rsbeq	r0, pc, ip, rrx
20000278:	00640061 	rsbeq	r0, r4, r1, rrx
2000027c:	00720065 	rsbseq	r0, r2, r5, rrx
20000280:	00760020 	rsbseq	r0, r6, r0, lsr #32
20000284:	002e0031 	eoreq	r0, lr, r1, lsr r0
20000288:	00200030 	eoreq	r0, r0, r0, lsr r0
2000028c:	00550020 	subseq	r0, r5, r0, lsr #32
20000290:	006c0070 	rsbeq	r0, ip, r0, ror r0
20000294:	0061006f 	rsbeq	r0, r1, pc, rrx
20000298:	00200064 	eoreq	r0, r0, r4, rrx
2000029c:	006f0074 	rsbeq	r0, pc, r4, ror r0	; <UNPREDICTABLE>
200002a0:	00460020 	subeq	r0, r6, r0, lsr #32
200002a4:	0061006c 	rsbeq	r0, r1, ip, rrx
200002a8:	00680073 	rsbeq	r0, r8, r3, ror r0
200002ac:	00300020 	eorseq	r0, r0, r0, lsr #32
200002b0:	00380078 	eorseq	r0, r8, r8, ror r0
200002b4:	00300030 	eorseq	r0, r0, r0, lsr r0
200002b8:	00300032 	eorseq	r0, r0, r2, lsr r0
200002bc:	00300030 	eorseq	r0, r0, r0, lsr r0

200002c0 <usbConfigDescriptorDFU>:
200002c0:	200000ec 	andcs	r0, r0, ip, ror #1
200002c4:	0000002d 	andeq	r0, r0, sp, lsr #32

200002c8 <userAppEnd>:
200002c8:	20005000 	andcs	r5, r0, r0

200002cc <userAppAddr>:
200002cc:	20000c00 	andcs	r0, r0, r0, lsl #24

Disassembly of section .bss:

200002d0 <_sbss>:
200002d0:	00000000 	andeq	r0, r0, r0

200002d4 <wIstr>:
	...

200002d6 <ResumeS>:
	...

200002d8 <code_copy_lock>:
	...

200002da <SaveRState>:
	...

200002dc <SaveTState>:
200002dc:	00000000 	andeq	r0, r0, r0

200002e0 <SaveState>:
200002e0:	00000000 	andeq	r0, r0, r0

200002e4 <pProperty>:
200002e4:	00000000 	andeq	r0, r0, r0

200002e8 <EPindex>:
200002e8:	00000000 	andeq	r0, r0, r0

200002ec <Device_Info>:
	...

20000308 <pUser_Standard_Requests>:
20000308:	00000000 	andeq	r0, r0, r0

2000030c <pInformation>:
2000030c:	00000000 	andeq	r0, r0, r0

20000310 <wInterrupt_Mask>:
	...

20000312 <StatusInfo>:
	...

Disassembly of section .bss.bIntPackSOF:

20000314 <bIntPackSOF>:
	...

Disassembly of section .bss.bDeviceState:

20000318 <bDeviceState>:
20000318:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.recvBuffer:

2000031c <recvBuffer>:
	...

Disassembly of section .bss.uploadBlockLen:

20000b1c <uploadBlockLen>:
	...

Disassembly of section .bss.thisBlockLen:

20000b1e <thisBlockLen>:
	...

Disassembly of section .bss.userFirmwareLen:

20000b20 <userFirmwareLen>:
20000b20:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.userUploadType:

20000b24 <userUploadType>:
	...

Disassembly of section .bss.dfuAppStatus:

20000b25 <dfuAppStatus>:
20000b25:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .bss.dfuBusy:

20000b2b <dfuBusy>:
	...

Disassembly of section .bss.Data_Mul_MaxPacketSize:

20000b2c <Data_Mul_MaxPacketSize>:
	...

Disassembly of section ._usrstack:

20000b2d <_susrstack-0x3>:
20000b2d:	00000000 	andeq	r0, r0, r0

20000b30 <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
   0:	3a434347 	bcc	10d0d24 <__Stack_Size+0x10d0924>
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xd45
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	64724128 	ldrbtvs	r4, [r2], #-296	; 0x128
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	6f6e6975 	svcvs	0x006e6975
  34:	69756220 	ldmdbvs	r5!, {r5, r9, sp, lr}^
  38:	2929646c 	stmdbcs	r9!, {r2, r3, r5, r6, sl, sp, lr}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	3220332e 	eorcc	r3, r0, #-1207959552	; 0xb8000000
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	30343130 	eorscc	r3, r4, r0, lsr r1
  48:	20383232 	eorscs	r3, r8, r2, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <BootRAM+0xef6faaf>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	2d385f34 	ldccs	15, cr5, [r8, #-208]!	; 0xffffff30
  68:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  6c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(u8 bEpNum, u8 bDir, u16 wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
  70:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  74:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  78:	33383032 	teqcc	r8, #50	; 0x32
  7c:	005d3232 	subseq	r3, sp, r2, lsr r2

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	14041202 	strne	r1, [r4], #-514	; 0x202
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	1a011803 	bne	4603c <__Stack_Size+0x45c3c>
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	080000f0 	stmdaeq	r0, {r4, r5, r6, r7}
  14:	00000048 	andeq	r0, r0, r8, asr #32
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	08000138 	stmdaeq	r0, {r3, r4, r5, r8}
  1c:	00000004 	andeq	r0, r0, r4
	...
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	006f0002 	rsbeq	r0, pc, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	00040000 	andeq	r0, r4, r0
	...

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	0000007a 	andeq	r0, r0, sl, ror r0
	...

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  48:	00000114 	andeq	r0, r0, r4, lsl r1
  4c:	00e40002 	rsceq	r0, r4, r2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	0800013c 	stmdaeq	r0, {r2, r3, r4, r5, r8}
  5c:	00000002 	andeq	r0, r0, r2
  60:	0800013e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8}
  64:	00000002 	andeq	r0, r0, r2
  68:	08000140 	stmdaeq	r0, {r6, r8}
  6c:	00000002 	andeq	r0, r0, r2
  70:	08000142 	stmdaeq	r0, {r1, r6, r8}
  74:	0000000a 	andeq	r0, r0, sl
  78:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
  7c:	00000002 	andeq	r0, r0, r2
  80:	08000150 	stmdaeq	r0, {r4, r6, r8}
  84:	00000018 	andeq	r0, r0, r8, lsl r0
  88:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}
  8c:	00000002 	andeq	r0, r0, r2
  90:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
  94:	00000002 	andeq	r0, r0, r2
  98:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  9c:	00000002 	andeq	r0, r0, r2
  a0:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
  a4:	00000002 	andeq	r0, r0, r2
  a8:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
  ac:	00000002 	andeq	r0, r0, r2
  b0:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
  b4:	00000002 	andeq	r0, r0, r2
  b8:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	08000180 	stmdaeq	r0, {r7, r8}
  c4:	000000a8 	andeq	r0, r0, r8, lsr #1
  c8:	08000228 	stmdaeq	r0, {r3, r5, r9}
  cc:	00000060 	andeq	r0, r0, r0, rrx
  d0:	08000288 	stmdaeq	r0, {r3, r7, r9}
  d4:	0000000c 	andeq	r0, r0, ip
  d8:	08000294 	stmdaeq	r0, {r2, r4, r7, r9}
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	080002a0 	stmdaeq	r0, {r5, r7, r9}
  e4:	00000020 	andeq	r0, r0, r0, lsr #32
  e8:	080002c0 	stmdaeq	r0, {r6, r7, r9}
  ec:	0000000c 	andeq	r0, r0, ip
  f0:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
  f8:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
  fc:	0000007c 	andeq	r0, r0, ip, ror r0
 100:	00000000 	andeq	r0, r0, r0
 104:	00000004 	andeq	r0, r0, r4
 108:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
 10c:	0000001c 	andeq	r0, r0, ip, lsl r0
 110:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
 114:	00000018 	andeq	r0, r0, r8, lsl r0
 118:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
 11c:	00000084 	andeq	r0, r0, r4, lsl #1
 120:	08000428 	stmdaeq	r0, {r3, r5, sl}
 124:	00000028 	andeq	r0, r0, r8, lsr #32
 128:	08000450 	stmdaeq	r0, {r4, r6, sl}
 12c:	0000001c 	andeq	r0, r0, ip, lsl r0
 130:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
 134:	00000004 	andeq	r0, r0, r4
 138:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
 13c:	00000024 	andeq	r0, r0, r4, lsr #32
 140:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
 144:	00000040 	andeq	r0, r0, r0, asr #32
 148:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
 14c:	00000022 	andeq	r0, r0, r2, lsr #32
 150:	080004f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl}
 154:	000000b4 	strheq	r0, [r0], -r4
	...
 160:	00000014 	andeq	r0, r0, r4, lsl r0
 164:	0df60002 	ldcleq	0, cr0, [r6, #8]!
 168:	00040000 	andeq	r0, r4, r0
	...
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	10470002 	subne	r0, r7, r2
 180:	00040000 	andeq	r0, r4, r0
 184:	00000000 	andeq	r0, r0, r0
 188:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
 18c:	00000078 	andeq	r0, r0, r8, ror r0
	...
 198:	000000d4 	ldrdeq	r0, [r0], -r4
 19c:	129c0002 	addsne	r0, ip, #2
 1a0:	00040000 	andeq	r0, r4, r0
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 1ac:	00000016 	andeq	r0, r0, r6, lsl r0
 1b0:	00000000 	andeq	r0, r0, r0
 1b4:	00000012 	andeq	r0, r0, r2, lsl r0
 1b8:	0800063c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl}
 1bc:	00000010 	andeq	r0, r0, r0, lsl r0
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	00000050 	andeq	r0, r0, r0, asr r0
 1c8:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
 1cc:	00000048 	andeq	r0, r0, r8, asr #32
 1d0:	08000694 	stmdaeq	r0, {r2, r4, r7, r9, sl}
 1d4:	00000060 	andeq	r0, r0, r0, rrx
 1d8:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
 1dc:	00000018 	andeq	r0, r0, r8, lsl r0
 1e0:	0800070c 	stmdaeq	r0, {r2, r3, r8, r9, sl}
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e8:	08000728 	stmdaeq	r0, {r3, r5, r8, r9, sl}
 1ec:	00000014 	andeq	r0, r0, r4, lsl r0
 1f0:	0800073c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl}
 1f4:	00000018 	andeq	r0, r0, r8, lsl r0
 1f8:	08000754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl}
 1fc:	0000002c 	andeq	r0, r0, ip, lsr #32
 200:	08000780 	stmdaeq	r0, {r7, r8, r9, sl}
 204:	00000048 	andeq	r0, r0, r8, asr #32
 208:	080007c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl}
 20c:	0000006c 	andeq	r0, r0, ip, rrx
 210:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
 214:	00000024 	andeq	r0, r0, r4, lsr #32
 218:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
 21c:	00000028 	andeq	r0, r0, r8, lsr #32
 220:	08000880 	stmdaeq	r0, {r7, fp}
 224:	00000014 	andeq	r0, r0, r4, lsl r0
 228:	08000894 	stmdaeq	r0, {r2, r4, r7, fp}
 22c:	00000034 	andeq	r0, r0, r4, lsr r0
 230:	00000000 	andeq	r0, r0, r0
 234:	00000030 	andeq	r0, r0, r0, lsr r0
 238:	080008c8 	stmdaeq	r0, {r3, r6, r7, fp}
 23c:	0000004c 	andeq	r0, r0, ip, asr #32
 240:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
 244:	0000000c 	andeq	r0, r0, ip
 248:	08000920 	stmdaeq	r0, {r5, r8, fp}
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
 250:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
 254:	00000012 	andeq	r0, r0, r2, lsl r0
 258:	0800094c 	stmdaeq	r0, {r2, r3, r6, r8, fp}
 25c:	00000010 	andeq	r0, r0, r0, lsl r0
 260:	0800095c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp}
 264:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 270:	0000007c 	andeq	r0, r0, ip, ror r0
 274:	1dc30002 	stclne	0, cr0, [r3, #8]
 278:	00040000 	andeq	r0, r4, r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	08000974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp}
 284:	0000005c 	andeq	r0, r0, ip, asr r0
 288:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
 28c:	00000044 	andeq	r0, r0, r4, asr #32
 290:	00000000 	andeq	r0, r0, r0
 294:	00000002 	andeq	r0, r0, r2
 298:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
 2a4:	00000018 	andeq	r0, r0, r8, lsl r0
 2a8:	08000a44 	stmdaeq	r0, {r2, r6, r9, fp}
 2ac:	00000028 	andeq	r0, r0, r8, lsr #32
 2b0:	08000a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp}
 2b4:	00000034 	andeq	r0, r0, r4, lsr r0
 2b8:	08000aa0 	stmdaeq	r0, {r5, r7, r9, fp}
 2bc:	0000005c 	andeq	r0, r0, ip, asr r0
 2c0:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
 2c4:	0000023c 	andeq	r0, r0, ip, lsr r2
 2c8:	00000000 	andeq	r0, r0, r0
 2cc:	0000000c 	andeq	r0, r0, ip
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	0000000c 	andeq	r0, r0, ip
 2d8:	08000d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp}
 2dc:	0000000c 	andeq	r0, r0, ip
 2e0:	08000d44 	stmdaeq	r0, {r2, r6, r8, sl, fp}
 2e4:	00000004 	andeq	r0, r0, r4
	...
 2f0:	000001ec 	andeq	r0, r0, ip, ror #3
 2f4:	24480002 	strbcs	r0, [r8], #-2
 2f8:	00040000 	andeq	r0, r4, r0
	...
 304:	0000000c 	andeq	r0, r0, ip
 308:	00000000 	andeq	r0, r0, r0
 30c:	0000000c 	andeq	r0, r0, ip
 310:	00000000 	andeq	r0, r0, r0
 314:	0000000c 	andeq	r0, r0, ip
 318:	00000000 	andeq	r0, r0, r0
 31c:	0000000c 	andeq	r0, r0, ip
 320:	00000000 	andeq	r0, r0, r0
 324:	0000000c 	andeq	r0, r0, ip
 328:	00000000 	andeq	r0, r0, r0
 32c:	0000000c 	andeq	r0, r0, ip
 330:	00000000 	andeq	r0, r0, r0
 334:	0000000c 	andeq	r0, r0, ip
 338:	00000000 	andeq	r0, r0, r0
 33c:	00000010 	andeq	r0, r0, r0, lsl r0
 340:	00000000 	andeq	r0, r0, r0
 344:	0000000c 	andeq	r0, r0, ip
 348:	00000000 	andeq	r0, r0, r0
 34c:	0000000e 	andeq	r0, r0, lr
 350:	00000000 	andeq	r0, r0, r0
 354:	00000010 	andeq	r0, r0, r0, lsl r0
 358:	00000000 	andeq	r0, r0, r0
 35c:	0000001c 	andeq	r0, r0, ip, lsl r0
 360:	00000000 	andeq	r0, r0, r0
 364:	00000012 	andeq	r0, r0, r2, lsl r0
 368:	08000d48 	stmdaeq	r0, {r3, r6, r8, sl, fp}
 36c:	0000002a 	andeq	r0, r0, sl, lsr #32
 370:	00000000 	andeq	r0, r0, r0
 374:	0000002a 	andeq	r0, r0, sl, lsr #32
 378:	00000000 	andeq	r0, r0, r0
 37c:	00000024 	andeq	r0, r0, r4, lsr #32
 380:	00000000 	andeq	r0, r0, r0
 384:	00000012 	andeq	r0, r0, r2, lsl r0
 388:	00000000 	andeq	r0, r0, r0
 38c:	00000012 	andeq	r0, r0, r2, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	0000001e 	andeq	r0, r0, lr, lsl r0
 398:	08000d72 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, fp}
 39c:	0000001e 	andeq	r0, r0, lr, lsl r0
 3a0:	00000000 	andeq	r0, r0, r0
 3a4:	0000001e 	andeq	r0, r0, lr, lsl r0
 3a8:	00000000 	andeq	r0, r0, r0
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	08000d90 	stmdaeq	r0, {r4, r7, r8, sl, fp}
 3b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b8:	00000000 	andeq	r0, r0, r0
 3bc:	0000001e 	andeq	r0, r0, lr, lsl r0
 3c0:	00000000 	andeq	r0, r0, r0
 3c4:	0000001e 	andeq	r0, r0, lr, lsl r0
 3c8:	00000000 	andeq	r0, r0, r0
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	0000001a 	andeq	r0, r0, sl, lsl r0
 3d8:	00000000 	andeq	r0, r0, r0
 3dc:	0000001a 	andeq	r0, r0, sl, lsl r0
 3e0:	00000000 	andeq	r0, r0, r0
 3e4:	00000018 	andeq	r0, r0, r8, lsl r0
 3e8:	00000000 	andeq	r0, r0, r0
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	00000020 	andeq	r0, r0, r0, lsr #32
 3f8:	00000000 	andeq	r0, r0, r0
 3fc:	00000020 	andeq	r0, r0, r0, lsr #32
 400:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 404:	00000020 	andeq	r0, r0, r0, lsr #32
 408:	08000dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp}
 40c:	00000020 	andeq	r0, r0, r0, lsr #32
 410:	00000000 	andeq	r0, r0, r0
 414:	0000001e 	andeq	r0, r0, lr, lsl r0
 418:	00000000 	andeq	r0, r0, r0
 41c:	00000012 	andeq	r0, r0, r2, lsl r0
 420:	00000000 	andeq	r0, r0, r0
 424:	00000020 	andeq	r0, r0, r0, lsr #32
 428:	00000000 	andeq	r0, r0, r0
 42c:	00000020 	andeq	r0, r0, r0, lsr #32
 430:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
 434:	0000001c 	andeq	r0, r0, ip, lsl r0
 438:	08000e08 	stmdaeq	r0, {r3, r9, sl, fp}
 43c:	0000001c 	andeq	r0, r0, ip, lsl r0
 440:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
 444:	0000001c 	andeq	r0, r0, ip, lsl r0
 448:	00000000 	andeq	r0, r0, r0
 44c:	00000026 	andeq	r0, r0, r6, lsr #32
 450:	08000e40 	stmdaeq	r0, {r6, r9, sl, fp}
 454:	00000040 	andeq	r0, r0, r0, asr #32
 458:	00000000 	andeq	r0, r0, r0
 45c:	00000020 	andeq	r0, r0, r0, lsr #32
 460:	00000000 	andeq	r0, r0, r0
 464:	00000020 	andeq	r0, r0, r0, lsr #32
 468:	00000000 	andeq	r0, r0, r0
 46c:	00000038 	andeq	r0, r0, r8, lsr r0
 470:	00000000 	andeq	r0, r0, r0
 474:	00000020 	andeq	r0, r0, r0, lsr #32
 478:	00000000 	andeq	r0, r0, r0
 47c:	00000020 	andeq	r0, r0, r0, lsr #32
 480:	00000000 	andeq	r0, r0, r0
 484:	0000001c 	andeq	r0, r0, ip, lsl r0
 488:	00000000 	andeq	r0, r0, r0
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000000 	andeq	r0, r0, r0
 494:	000000a8 	andeq	r0, r0, r8, lsr #1
 498:	00000000 	andeq	r0, r0, r0
 49c:	0000005c 	andeq	r0, r0, ip, asr r0
 4a0:	00000000 	andeq	r0, r0, r0
 4a4:	0000005c 	andeq	r0, r0, ip, asr r0
 4a8:	00000000 	andeq	r0, r0, r0
 4ac:	00000020 	andeq	r0, r0, r0, lsr #32
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	00000020 	andeq	r0, r0, r0, lsr #32
 4b8:	00000000 	andeq	r0, r0, r0
 4bc:	00000044 	andeq	r0, r0, r4, asr #32
 4c0:	00000000 	andeq	r0, r0, r0
 4c4:	0000003a 	andeq	r0, r0, sl, lsr r0
 4c8:	00000000 	andeq	r0, r0, r0
 4cc:	00000006 	andeq	r0, r0, r6
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	0000000a 	andeq	r0, r0, sl
	...
 4e0:	00000024 	andeq	r0, r0, r4, lsr #32
 4e4:	30d40002 	sbcscc	r0, r4, r2
 4e8:	00040000 	andeq	r0, r4, r0
 4ec:	00000000 	andeq	r0, r0, r0
 4f0:	08000e80 	stmdaeq	r0, {r7, r9, sl, fp}
 4f4:	00000154 	andeq	r0, r0, r4, asr r1
 4f8:	00000000 	andeq	r0, r0, r0
 4fc:	00000070 	andeq	r0, r0, r0, ror r0
	...
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
 50c:	32b00002 	adcscc	r0, r0, #2
 510:	00040000 	andeq	r0, r4, r0
 514:	00000000 	andeq	r0, r0, r0
 518:	08000fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp}
 51c:	00000038 	andeq	r0, r0, r8, lsr r0
	...
 528:	00000094 	muleq	r0, r4, r0
 52c:	36ad0002 	strtcc	r0, [sp], r2
 530:	00040000 	andeq	r0, r4, r0
 534:	00000000 	andeq	r0, r0, r0
 538:	0800100c 	stmdaeq	r0, {r2, r3, ip}
 53c:	00000024 	andeq	r0, r0, r4, lsr #32
 540:	08001030 	stmdaeq	r0, {r4, r5, ip}
 544:	00000024 	andeq	r0, r0, r4, lsr #32
 548:	08001054 	stmdaeq	r0, {r2, r4, r6, ip}
 54c:	00000090 	muleq	r0, r0, r0
 550:	080010e4 	stmdaeq	r0, {r2, r5, r6, r7, ip}
 554:	000000a8 	andeq	r0, r0, r8, lsr #1
 558:	0800118c 	stmdaeq	r0, {r2, r3, r7, r8, ip}
 55c:	00000038 	andeq	r0, r0, r8, lsr r0
 560:	080011c4 	stmdaeq	r0, {r2, r6, r7, r8, ip}
 564:	00000048 	andeq	r0, r0, r8, asr #32
 568:	0800120c 	stmdaeq	r0, {r2, r3, r9, ip}
 56c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 570:	080012dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, ip}
 574:	00000084 	andeq	r0, r0, r4, lsl #1
 578:	08001360 	stmdaeq	r0, {r5, r6, r8, r9, ip}
 57c:	00000024 	andeq	r0, r0, r4, lsr #32
 580:	08001384 	stmdaeq	r0, {r2, r7, r8, r9, ip}
 584:	0000001c 	andeq	r0, r0, ip, lsl r0
 588:	080013a0 	stmdaeq	r0, {r5, r7, r8, r9, ip}
 58c:	00000040 	andeq	r0, r0, r0, asr #32
 590:	080013e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip}
 594:	000002dc 	ldrdeq	r0, [r0], -ip
 598:	080016bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, ip}
 59c:	000000c8 	andeq	r0, r0, r8, asr #1
 5a0:	08001784 	stmdaeq	r0, {r2, r7, r8, r9, sl, ip}
 5a4:	00000038 	andeq	r0, r0, r8, lsr r0
 5a8:	080017bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip}
 5ac:	0000005c 	andeq	r0, r0, ip, asr r0
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	00000002 	andeq	r0, r0, r2
	...
 5c0:	00000024 	andeq	r0, r0, r4, lsr #32
 5c4:	44910002 	ldrmi	r0, [r1], #2
 5c8:	00040000 	andeq	r0, r4, r0
 5cc:	00000000 	andeq	r0, r0, r0
 5d0:	08001818 	stmdaeq	r0, {r3, r4, fp, ip}
 5d4:	00000030 	andeq	r0, r0, r0, lsr r0
 5d8:	08001848 	stmdaeq	r0, {r3, r6, fp, ip}
 5dc:	00000024 	andeq	r0, r0, r4, lsr #32
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000006b 	andeq	r0, r0, fp, rrx
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	mrseq	r0, (UNDEF: 4)
	...
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      14:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
      1c:	5f632f62 	svcpl	0x00632f62
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
      24:	6174735f 	cmnvs	r4, pc, asr r3
      28:	70757472 	rsbsvc	r7, r5, r2, ror r4
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	2f00732e 	svccs	0x0000732e
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	6964656d 	stmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
      34:	66732f61 	ldrbtvs	r2, [r3], -r1, ror #30
      38:	7469475f 	strbtvc	r4, [r9], #-1887	; 0x75f

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	2f627548 	svccs	0x00627548

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	7274616d 	rsbsvc	r6, r4, #1073741851	; 0x4000001b
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	732f7869 	teqvc	pc, #6881280	; 0x690000
      48:	7774666f 	ldrbvc	r6, [r4, -pc, ror #12]!
      4c:	2f657261 	svccs	0x00657261

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	746f6f62 	strbtvc	r6, [pc], #-3938	; 58 <_Minimum_Stack_Size-0xa8>
      54:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
      58:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
      5c:	47006372 	smlsdxmi	r0, r2, r3, r6
      60:	4120554e 	teqmi	r0, lr, asr #10
      64:	2e322053 	mrccs	0, 1, r2, cr2, cr3, {2}
      68:	322e3332 	eorcc	r3, lr, #-939524096	; 0xc8000000
      6c:	71800100 	orrvc	r0, r0, r0, lsl #2
      70:	02000000 	andeq	r0, r0, #0
      74:	00001200 	andeq	r1, r0, r0, lsl #4
      78:	75010400 	strvc	r0, [r1, #-1024]	; 0x400
	...
      84:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
      88:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
      8c:	6c5f3233 	lfmvs	f3, 2, [pc], {51}	; 0x33
      90:	632f6269 	teqvs	pc, #-1879048186	; 0x90000006
      94:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0x26f
      98:	5f336d78 	svcpl	0x00336d78
      9c:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
      a0:	00532e6f 	subseq	r2, r3, pc, ror #28
      a4:	64656d2f 	strbtvs	r6, [r5], #-3375	; 0xd2f
      a8:	732f6169 	teqvc	pc, #1073741850	; 0x4000001a
      ac:	69475f66 	stmdbvs	r7, {r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
      b0:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
      b4:	74616d2f 	strbtvc	r6, [r1], #-3375	; 0xd2f
      b8:	2f786972 	svccs	0x00786972
      bc:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xf73
      c0:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
      c4:	6f6f622f 	svcvs	0x006f622f
      c8:	616f6c74 	smcvs	63172	; 0xf6c4
      cc:	2f726564 	svccs	0x00726564
      d0:	00637273 	rsbeq	r7, r3, r3, ror r2
      d4:	20554e47 	subscs	r4, r5, r7, asr #28
      d8:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      dc:	2e33322e 	cdpcs	2, 3, cr3, cr3, cr14, {1}
      e0:	80010032 	andhi	r0, r1, r2, lsr r0
      e4:	00000d0e 	andeq	r0, r0, lr, lsl #26
      e8:	00260004 	eoreq	r0, r6, r4
      ec:	01040000 	mrseq	r0, (UNDEF: 4)
      f0:	00000158 	andeq	r0, r0, r8, asr r1
      f4:	00011701 	andeq	r1, r1, r1, lsl #14
      f8:	0007cd00 	andeq	ip, r7, r0, lsl #26
      fc:	00002000 	andeq	r2, r0, r0
     100:	00000000 	andeq	r0, r0, r0
     104:	00011b00 	andeq	r1, r1, r0, lsl #22
     108:	05040200 	streq	r0, [r4, #-512]	; 0x200
     10c:	000001f6 	strdeq	r0, [r0], -r6
     110:	98050202 	stmdals	r5, {r1, r9}
     114:	02000006 	andeq	r0, r0, #6
     118:	06440601 	strbeq	r0, [r4], -r1, lsl #12
     11c:	75030000 	strvc	r0, [r3, #-0]
     120:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
     124:	00004527 	andeq	r4, r0, r7, lsr #10
     128:	07040200 	streq	r0, [r4, -r0, lsl #4]
     12c:	0000037b 	andeq	r0, r0, fp, ror r3
     130:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
     134:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
     138:	02000000 	andeq	r0, r0, #0
     13c:	03d70702 	bicseq	r0, r7, #524288	; 0x80000
     140:	75030000 	strvc	r0, [r3, #-0]
     144:	29020038 	stmdbcs	r2, {r3, r4, r5}
     148:	00000068 	andeq	r0, r0, r8, rrx
     14c:	42080102 	andmi	r0, r8, #-2147483648	; 0x80000000
     150:	04000006 	streq	r0, [r0], #-6
     154:	00000446 	andeq	r0, r0, r6, asr #8
     158:	007a2f02 	rsbseq	r2, sl, r2, lsl #30
     15c:	45050000 	strmi	r0, [r5, #-0]
     160:	04000000 	streq	r0, [r0], #-0
     164:	00000153 	andeq	r0, r0, r3, asr r1
     168:	008a3002 	addeq	r3, sl, r2
     16c:	57050000 	strpl	r0, [r5, -r0]
     170:	03000000 	movweq	r0, #0
     174:	00387576 	eorseq	r7, r8, r6, ror r5
     178:	009a3102 	addseq	r3, sl, r2, lsl #2
     17c:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
     180:	06000000 	streq	r0, [r0], -r0
     184:	b4370201 	ldrtlt	r0, [r7], #-513	; 0x201
     188:	07000000 	streq	r0, [r0, -r0]
     18c:	000005cf 	andeq	r0, r0, pc, asr #11
     190:	073d0700 	ldreq	r0, [sp, -r0, lsl #14]!
     194:	00010000 	andeq	r0, r1, r0
     198:	00043304 	andeq	r3, r4, r4, lsl #6
     19c:	9f370200 	svcls	0x00370200
     1a0:	02000000 	andeq	r0, r0, #0
     1a4:	05150704 	ldreq	r0, [r5, #-1796]	; 0x704
     1a8:	04080000 	streq	r0, [r8], #-0
     1ac:	00ffa903 	rscseq	sl, pc, r3, lsl #18
     1b0:	4b090000 	blmi	2401b8 <__Stack_Size+0x23fdb8>
     1b4:	03000004 	movweq	r0, #4
     1b8:	00005eaa 	andeq	r5, r0, sl, lsr #29
     1bc:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
     1c0:	03000004 	movweq	r0, #4
     1c4:	00005eab 	andeq	r5, r0, fp, lsr #29
     1c8:	50090100 	andpl	r0, r9, r0, lsl #2
     1cc:	03000003 	movweq	r0, #3
     1d0:	00005eac 	andeq	r5, r0, ip, lsr #29
     1d4:	00090200 	andeq	r0, r9, r0, lsl #4
     1d8:	03000000 	movweq	r0, #0
     1dc:	0000b4ad 	andeq	fp, r0, sp, lsr #9
     1e0:	04000300 	streq	r0, [r0], #-768	; 0x300
     1e4:	00000490 	muleq	r0, r0, r4
     1e8:	00c6ae03 	sbceq	sl, r6, r3, lsl #28
     1ec:	040a0000 	streq	r0, [sl], #-0
     1f0:	00000110 	andeq	r0, r0, r0, lsl r1
     1f4:	036b0c0b 	cmneq	fp, #2816	; 0xb00
     1f8:	05010000 	streq	r0, [r1, #-0]
     1fc:	00013616 	andeq	r3, r1, r6, lsl r6
     200:	00fe0700 	rscseq	r0, lr, r0, lsl #14
     204:	07000000 	streq	r0, [r0, -r0]
     208:	000002aa 	andeq	r0, r0, sl, lsr #5
     20c:	08220701 	stmdaeq	r2!, {r0, r8, r9, sl}
     210:	07020000 	streq	r0, [r2, -r0]
     214:	00000423 	andeq	r0, r0, r3, lsr #8
     218:	8c0d0003 	stchi	0, cr0, [sp], {3}
     21c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     220:	015b2404 	cmpeq	fp, r4, lsl #8
     224:	3d090000 	stccc	0, cr0, [r9, #-0]
     228:	04000001 	streq	r0, [r0], #-1
     22c:	00015b26 	andeq	r5, r1, r6, lsr #22
     230:	93090000 	movwls	r0, #36864	; 0x9000
     234:	04000005 	streq	r0, [r0], #-5
     238:	00004c27 	andeq	r4, r0, r7, lsr #24
     23c:	0a000400 	beq	1244 <__Stack_Size+0xe44>
     240:	00005e04 	andeq	r5, r0, r4, lsl #28
     244:	02d60400 	sbcseq	r0, r6, #0, 8
     248:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
     24c:	00000136 	andeq	r0, r0, r6, lsr r1
     250:	0002d504 	andeq	sp, r2, r4, lsl #10
     254:	77290400 	strvc	r0, [r9, -r0, lsl #8]!
     258:	0a000001 	beq	264 <_Minimum_Stack_Size+0x164>
     25c:	00013604 	andeq	r3, r1, r4, lsl #12
     260:	07350c00 	ldreq	r0, [r5, -r0, lsl #24]!
     264:	04010000 	streq	r0, [r1], #-0
     268:	0001a22d 	andeq	sl, r1, sp, lsr #4
     26c:	08f60700 	ldmeq	r6!, {r8, r9, sl}^
     270:	07000000 	streq	r0, [r0, -r0]
     274:	000003ea 	andeq	r0, r0, sl, ror #7
     278:	07740701 	ldrbeq	r0, [r4, -r1, lsl #14]!
     27c:	07020000 	streq	r0, [r2, -r0]
     280:	00000222 	andeq	r0, r0, r2, lsr #4
     284:	36040003 	strcc	r0, [r4], -r3
     288:	04000007 	streq	r0, [r0], #-7
     28c:	00017d34 	andeq	r7, r1, r4, lsr sp
     290:	091b0d00 	ldmdbeq	fp, {r8, sl, fp}
     294:	040c0000 	streq	r0, [ip], #-0
     298:	0001ea38 	andeq	lr, r1, r8, lsr sl
     29c:	02900900 	addseq	r0, r0, #0, 18
     2a0:	50040000 	andpl	r0, r4, r0
     2a4:	0000004c 	andeq	r0, r0, ip, asr #32
     2a8:	03190900 	tsteq	r9, #0, 18
     2ac:	51040000 	mrspl	r0, (UNDEF: 4)
     2b0:	0000004c 	andeq	r0, r0, ip, asr #32
     2b4:	15b10902 	ldrne	r0, [r1, #2306]!	; 0x902
     2b8:	52040000 	andpl	r0, r4, #0
     2bc:	0000004c 	andeq	r0, r0, ip, asr #32
     2c0:	00e30904 	rsceq	r0, r3, r4, lsl #18
     2c4:	53040000 	movwpl	r0, #16384	; 0x4000
     2c8:	000001f9 	strdeq	r0, [r0], -r9
     2cc:	5b0e0008 	blpl	3802f4 <__Stack_Size+0x37fef4>
     2d0:	f9000001 			; <UNDEFINED> instruction: 0xf9000001
     2d4:	0f000001 	svceq	0x00000001
     2d8:	0000004c 	andeq	r0, r0, ip, asr #32
     2dc:	ea040a00 	b	102ae4 <__Stack_Size+0x1026e4>
     2e0:	04000001 	streq	r0, [r0], #-1
     2e4:	0000091c 	andeq	r0, r0, ip, lsl r9
     2e8:	01ad5404 			; <UNDEFINED> instruction: 0x01ad5404
     2ec:	fd0d0000 	stc2	0, cr0, [sp, #-0]
     2f0:	02000007 	andeq	r0, r0, #7
     2f4:	022f5804 	eoreq	r5, pc, #4, 16	; 0x40000
     2f8:	3a090000 	bcc	240300 <__Stack_Size+0x23ff00>
     2fc:	04000009 	streq	r0, [r0], #-9
     300:	00005e5a 	andeq	r5, r0, sl, asr lr
     304:	b0090000 	andlt	r0, r9, r0
     308:	04000003 	streq	r0, [r0], #-3
     30c:	00005e5b 	andeq	r5, r0, fp, asr lr
     310:	04000100 	streq	r0, [r0], #-256	; 0x100
     314:	000007fe 	strdeq	r0, [r0], -lr
     318:	020a5d04 	andeq	r5, sl, #4, 26	; 0x100
     31c:	42100000 	andsmi	r0, r0, #0
     320:	04020057 	streq	r0, [r2], #-87	; 0x57
     324:	00025e62 	andeq	r5, r2, r2, ror #28
     328:	62621100 	rsbvs	r1, r2, #0, 2
     32c:	65040030 	strvs	r0, [r4, #-48]	; 0x30
     330:	0000005e 	andeq	r0, r0, lr, asr r0
     334:	62621100 	rsbvs	r1, r2, #0, 2
     338:	66040031 			; <UNDEFINED> instruction: 0x66040031
     33c:	0000005e 	andeq	r0, r0, lr, asr r0
     340:	02120001 	andseq	r0, r2, #1
     344:	027a5f04 	rsbseq	r5, sl, #4, 30
     348:	77130000 	ldrvc	r0, [r3, -r0]
     34c:	4c610400 	cfstrdmi	mvd0, [r1], #-0
     350:	13000000 	movwne	r0, #0
     354:	04007762 	streq	r7, [r0], #-1890	; 0x762
     358:	00023a68 	andeq	r3, r2, r8, ror #20
     35c:	ff040000 			; <UNDEFINED> instruction: 0xff040000
     360:	04000003 	streq	r0, [r0], #-3
     364:	00025e69 	andeq	r5, r2, r9, ror #28
     368:	003c0d00 	eorseq	r0, ip, r0, lsl #26
     36c:	041c0000 	ldreq	r0, [ip], #-0
     370:	0003166b 	andeq	r1, r3, fp, ror #12
     374:	05500900 	ldrbeq	r0, [r0, #-2304]	; 0x900
     378:	6d040000 	stcvs	0, cr0, [r4, #-0]
     37c:	0000005e 	andeq	r0, r0, lr, asr r0
     380:	02160900 	andseq	r0, r6, #0, 18
     384:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
     388:	0000005e 	andeq	r0, r0, lr, asr r0
     38c:	04180901 	ldreq	r0, [r8], #-2305	; 0x901
     390:	6f040000 	svcvs	0x00040000
     394:	0000027a 	andeq	r0, r0, sl, ror r2
     398:	01480902 	cmpeq	r8, r2, lsl #18
     39c:	70040000 	andvc	r0, r4, r0
     3a0:	0000027a 	andeq	r0, r0, sl, ror r2
     3a4:	083d0904 	ldmdaeq	sp!, {r2, r8, fp}
     3a8:	71040000 	mrsvc	r0, (UNDEF: 4)
     3ac:	0000027a 	andeq	r0, r0, sl, ror r2
     3b0:	09490906 	stmdbeq	r9, {r1, r2, r8, fp}^
     3b4:	73040000 	movwvc	r0, #16384	; 0x4000
     3b8:	0000005e 	andeq	r0, r0, lr, asr r0
     3bc:	03a00908 	moveq	r0, #8, 18	; 0x20000
     3c0:	74040000 	strvc	r0, [r4], #-0
     3c4:	0000005e 	andeq	r0, r0, lr, asr r0
     3c8:	04a10909 	strteq	r0, [r1], #2313	; 0x909
     3cc:	75040000 	strvc	r0, [r4, #-0]
     3d0:	0000005e 	andeq	r0, r0, lr, asr r0
     3d4:	0892090a 	ldmeq	r2, {r1, r3, r8, fp}
     3d8:	76040000 	strvc	r0, [r4], -r0
     3dc:	0000005e 	andeq	r0, r0, lr, asr r0
     3e0:	061c090b 	ldreq	r0, [ip], -fp, lsl #18
     3e4:	77040000 	strvc	r0, [r4, -r0]
     3e8:	0000005e 	andeq	r0, r0, lr, asr r0
     3ec:	0713090c 	ldreq	r0, [r3, -ip, lsl #18]
     3f0:	7a040000 	bvc	1003f8 <__Stack_Size+0xffff8>
     3f4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     3f8:	3d040010 	stccc	0, cr0, [r4, #-64]	; 0xffffffc0
     3fc:	04000000 	streq	r0, [r0], #-0
     400:	0002857b 	andeq	r8, r2, fp, ror r5
     404:	07420d00 	strbeq	r0, [r2, -r0, lsl #26]
     408:	04340000 	ldrteq	r0, [r4], #-0
     40c:	0003ca7d 	andeq	ip, r3, sp, ror sl
     410:	053d0900 	ldreq	r0, [sp, #-2304]!	; 0x900
     414:	7f040000 	svcvc	0x00040000
     418:	0000010a 	andeq	r0, r0, sl, lsl #2
     41c:	03c70900 	biceq	r0, r7, #0, 18
     420:	80040000 	andhi	r0, r4, r0
     424:	0000010a 	andeq	r0, r0, sl, lsl #2
     428:	079a0904 	ldreq	r0, [sl, r4, lsl #18]
     42c:	83040000 	movwhi	r0, #16384	; 0x4000
     430:	0000010a 	andeq	r0, r0, sl, lsl #2
     434:	07ac0908 	streq	r0, [ip, r8, lsl #18]!
     438:	84040000 	strhi	r0, [r4], #-0
     43c:	0000010a 	andeq	r0, r0, sl, lsl #2
     440:	051e090c 	ldreq	r0, [lr, #-2316]	; 0x90c
     444:	96040000 	strls	r0, [r4], -r0
     448:	000003d9 	ldrdeq	r0, [r0], -r9
     44c:	06f70910 	usateq	r0, #23, r0, lsl #18
     450:	a1040000 	mrsge	r0, (UNDEF: 4)
     454:	000003d9 	ldrdeq	r0, [r0], -r9
     458:	04e80914 	strbteq	r0, [r8], #2324	; 0x914
     45c:	ab040000 	blge	100464 <__Stack_Size+0x100064>
     460:	000003f3 	strdeq	r0, [r0], -r3
     464:	01340918 	teqeq	r4, r8, lsl r9
     468:	ad040000 	stcge	0, cr0, [r4, #-0]
     46c:	000001f9 	strdeq	r0, [r0], -r9
     470:	0202091c 	andeq	r0, r2, #28, 18	; 0x70000
     474:	ae040000 	cdpge	0, 0, cr0, cr4, cr0, {0}
     478:	000001f9 	strdeq	r0, [r0], -r9
     47c:	084c0920 	stmdaeq	ip, {r5, r8, fp}^
     480:	af040000 	svcge	0x00040000
     484:	000001f9 	strdeq	r0, [r0], -r9
     488:	06040924 	streq	r0, [r4], -r4, lsr #18
     48c:	b0040000 	andlt	r0, r4, r0
     490:	000001f9 	strdeq	r0, [r0], -r9
     494:	057b0928 	ldrbeq	r0, [fp, #-2344]!	; 0x928
     498:	b2040000 	andlt	r0, r4, #0
     49c:	0000015b 	andeq	r0, r0, fp, asr r1
     4a0:	15ae092c 	strne	r0, [lr, #2348]!	; 0x92c
     4a4:	b3040000 	movwlt	r0, #16384	; 0x4000
     4a8:	0000005e 	andeq	r0, r0, lr, asr r0
     4ac:	a20e0030 	andge	r0, lr, #48	; 0x30
     4b0:	d9000001 	stmdble	r0, {r0}
     4b4:	0f000003 	svceq	0x00000003
     4b8:	0000005e 	andeq	r0, r0, lr, asr r0
     4bc:	ca040a00 	bgt	102cc4 <__Stack_Size+0x1028c4>
     4c0:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     4c4:	000001a2 	andeq	r0, r0, r2, lsr #3
     4c8:	000003f3 	strdeq	r0, [r0], -r3
     4cc:	00005e0f 	andeq	r5, r0, pc, lsl #28
     4d0:	005e0f00 	subseq	r0, lr, r0, lsl #30
     4d4:	0a000000 	beq	4dc <__Stack_Size+0xdc>
     4d8:	0003df04 	andeq	sp, r3, r4, lsl #30
     4dc:	07430400 	strbeq	r0, [r3, -r0, lsl #8]
     4e0:	b5040000 	strlt	r0, [r4, #-0]
     4e4:	00000321 	andeq	r0, r0, r1, lsr #6
     4e8:	0006500d 	andeq	r5, r6, sp
     4ec:	b7042400 	strlt	r2, [r4, -r0, lsl #8]
     4f0:	0000047d 	andeq	r0, r0, sp, ror r4
     4f4:	0006bd09 	andeq	fp, r6, r9, lsl #26
     4f8:	0ab90400 	beq	fee41500 <BootRAM+0xddb1ca1>
     4fc:	00000001 	andeq	r0, r0, r1
     500:	0005b909 	andeq	fp, r5, r9, lsl #18
     504:	0aba0400 	beq	fee8150c <BootRAM+0xddf1cad>
     508:	04000001 	streq	r0, [r0], #-1
     50c:	0005d509 	andeq	sp, r5, r9, lsl #10
     510:	0abb0400 	beq	feec1518 <BootRAM+0xde31cb9>
     514:	08000001 	stmdaeq	r0, {r0}
     518:	0000ec09 	andeq	lr, r0, r9, lsl #24
     51c:	0abc0400 	beq	fef01524 <BootRAM+0xde71cc5>
     520:	0c000001 	stceq	0, cr0, [r0], {1}
     524:	00068909 	andeq	r8, r6, r9, lsl #18
     528:	0abd0400 	beq	fef41530 <BootRAM+0xdeb1cd1>
     52c:	10000001 	andne	r0, r0, r1
     530:	00040609 	andeq	r0, r4, r9, lsl #12
     534:	0abe0400 	beq	fef8153c <BootRAM+0xdef1cdd>
     538:	14000001 	strne	r0, [r0], #-1
     53c:	00006c09 	andeq	r6, r0, r9, lsl #24
     540:	0abf0400 	beq	fefc1548 <BootRAM+0xdf31ce9>
     544:	18000001 	stmdane	r0, {r0}
     548:	0005a309 	andeq	sl, r5, r9, lsl #6
     54c:	0ac00400 	beq	ff001554 <BootRAM+0xdf71cf5>
     550:	1c000001 	stcne	0, cr0, [r0], {1}
     554:	00001c09 	andeq	r1, r0, r9, lsl #24
     558:	0ac10400 	beq	ff041560 <BootRAM+0xdfb1d01>
     55c:	20000001 	andcs	r0, r0, r1
     560:	06510400 	ldrbeq	r0, [r1], -r0, lsl #8
     564:	c3040000 	movwgt	r0, #16384	; 0x4000
     568:	00000404 	andeq	r0, r0, r4, lsl #8
     56c:	0008e80c 	andeq	lr, r8, ip, lsl #16
     570:	3d060100 	stfccs	f0, [r6, #-0]
     574:	000004c5 	andeq	r0, r0, r5, asr #9
     578:	00023607 	andeq	r3, r2, r7, lsl #12
     57c:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
     580:	01000008 	tsteq	r0, r8
     584:	0006d307 	andeq	sp, r6, r7, lsl #6
     588:	60070200 	andvs	r0, r7, r0, lsl #4
     58c:	03000000 	movweq	r0, #0
     590:	0000c207 	andeq	ip, r0, r7, lsl #4
     594:	f7070400 			; <UNDEFINED> instruction: 0xf7070400
     598:	05000005 	streq	r0, [r0, #-5]
     59c:	0003f407 	andeq	pc, r3, r7, lsl #8
     5a0:	87070600 	strhi	r0, [r7, -r0, lsl #12]
     5a4:	07000005 	streq	r0, [r0, -r5]
     5a8:	08e90400 	stmiaeq	r9!, {sl}^
     5ac:	46060000 	strmi	r0, [r6], -r0
     5b0:	00000488 	andeq	r0, r0, r8, lsl #9
     5b4:	0005420c 	andeq	r4, r5, ip, lsl #4
     5b8:	48060100 	stmdami	r6, {r8}
     5bc:	00000501 	andeq	r0, r0, r1, lsl #10
     5c0:	00090207 	andeq	r0, r9, r7, lsl #4
     5c4:	38070000 	stmdacc	r7, {}	; <UNPREDICTABLE>
     5c8:	01000003 	tsteq	r0, r3
     5cc:	00010f07 	andeq	r0, r1, r7, lsl #30
     5d0:	b8070200 	stmdalt	r7, {r9}
     5d4:	03000000 	movweq	r0, #0
     5d8:	0008ce07 	andeq	ip, r8, r7, lsl #28
     5dc:	7b070400 	blvc	1c15e4 <__Stack_Size+0x1c11e4>
     5e0:	05000008 	streq	r0, [r0, #-8]
     5e4:	01020800 	tsteq	r2, r0, lsl #16
     5e8:	0005229c 	muleq	r5, ip, r2
     5ec:	004f0900 	subeq	r0, pc, r0, lsl #18
     5f0:	9d010000 	stcls	0, cr0, [r1, #-0]
     5f4:	00000522 	andeq	r0, r0, r2, lsr #10
     5f8:	00a50900 	adceq	r0, r5, r0, lsl #18
     5fc:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
     600:	00000527 	andeq	r0, r0, r7, lsr #10
     604:	c5050001 	strgt	r0, [r5, #-1]
     608:	05000004 	streq	r0, [r0, #-4]
     60c:	0000005e 	andeq	r0, r0, lr, asr r0
     610:	00034114 	andeq	r4, r3, r4, lsl r1
     614:	01640100 	cmneq	r4, r0, lsl #2
     618:	000001a2 	andeq	r0, r0, r2, lsr #3
     61c:	00054a01 	andeq	r4, r5, r1, lsl #20
     620:	081a1500 	ldmdaeq	sl, {r8, sl, ip}
     624:	64010000 	strvs	r0, [r1], #-0
     628:	00005e01 	andeq	r5, r0, r1, lsl #28
     62c:	b7160000 	ldrlt	r0, [r6, -r0]
     630:	01000004 	tsteq	r0, r4
     634:	6f1701a6 	svcvs	0x001701a6
     638:	01000009 	tsteq	r0, r9
     63c:	00013ca2 	andeq	r3, r1, r2, lsr #25
     640:	00000208 	andeq	r0, r0, r8, lsl #4
     644:	189c0100 	ldmne	ip, {r8}
     648:	00000394 	muleq	r0, r4, r3
     64c:	3e013701 	cdpcc	7, 0, cr3, cr1, cr1, {0}
     650:	02080001 	andeq	r0, r8, #1
     654:	01000000 	mrseq	r0, (UNDEF: 0)
     658:	030c189c 	movweq	r1, #51356	; 0xc89c
     65c:	3a010000 	bcc	40664 <__Stack_Size+0x40264>
     660:	00014001 	andeq	r4, r1, r1
     664:	00000208 	andeq	r0, r0, r8, lsl #4
     668:	199c0100 	ldmibne	ip, {r8}
     66c:	000006e0 	andeq	r0, r0, r0, ror #13
     670:	a2016e01 	andge	r6, r1, #1, 28
     674:	42000001 	andmi	r0, r0, #1
     678:	0a080001 	beq	200684 <__Stack_Size+0x200284>
     67c:	01000000 	mrseq	r0, (UNDEF: 0)
     680:	0005c09c 	muleq	r5, ip, r0
     684:	04641a00 	strbteq	r1, [r4], #-2560	; 0xa00
     688:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     68c:	00005e01 	andeq	r5, r0, r1, lsl #28
     690:	00000000 	andeq	r0, r0, r0
     694:	07821b00 	streq	r1, [r2, r0, lsl #22]
     698:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     69c:	00005e01 	andeq	r5, r0, r1, lsl #28
     6a0:	00510100 	subseq	r0, r1, r0, lsl #2
     6a4:	00025c18 	andeq	r5, r2, r8, lsl ip
     6a8:	01950100 	orrseq	r0, r5, r0, lsl #2
     6ac:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
     6b0:	00000002 	andeq	r0, r0, r2
     6b4:	4f189c01 	svcmi	0x00189c01
     6b8:	01000007 	tsteq	r0, r7
     6bc:	01500199 			; <UNDEFINED> instruction: 0x01500199
     6c0:	00180800 	andseq	r0, r8, r0, lsl #16
     6c4:	9c010000 	stcls	0, cr0, [r1], {-0}
     6c8:	0008a418 	andeq	sl, r8, r8, lsl r4
     6cc:	019f0100 	orrseq	r0, pc, r0, lsl #2
     6d0:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}
     6d4:	00000002 	andeq	r0, r0, r2
     6d8:	25189c01 	ldrcs	r9, [r8, #-3073]	; 0xc01
     6dc:	01000007 	tsteq	r0, r7
     6e0:	016a01a3 	smultbeq	sl, r3, r1
     6e4:	00020800 	andeq	r0, r2, r0, lsl #16
     6e8:	9c010000 	stcls	0, cr0, [r1], {-0}
     6ec:	00090e18 	andeq	r0, r9, r8, lsl lr
     6f0:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
     6f4:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
     6f8:	00000002 	andeq	r0, r0, r2
     6fc:	2a189c01 	bcs	627708 <__Stack_Size+0x627308>
     700:	01000009 	tsteq	r0, r9
     704:	016e01ab 	smultbeq	lr, fp, r1
     708:	00020800 	andeq	r0, r2, r0, lsl #16
     70c:	9c010000 	stcls	0, cr0, [r1], {-0}
     710:	0004d218 	andeq	sp, r4, r8, lsl r2
     714:	01af0100 			; <UNDEFINED> instruction: 0x01af0100
     718:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
     71c:	00000002 	andeq	r0, r0, r2
     720:	cf189c01 	svcgt	0x00189c01
     724:	01000000 	mrseq	r0, (UNDEF: 0)
     728:	017201b3 	ldrheq	r0, [r2, #-19]!	; 0xffffffed
     72c:	00020800 	andeq	r0, r2, r0, lsl #16
     730:	9c010000 	stcls	0, cr0, [r1], {-0}
     734:	0002e518 	andeq	lr, r2, r8, lsl r5
     738:	01b70100 			; <UNDEFINED> instruction: 0x01b70100
     73c:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
     740:	0000000c 	andeq	r0, r0, ip
     744:	c41c9c01 	ldrgt	r9, [ip], #-3073	; 0xc01
     748:	01000003 	tsteq	r0, r3
     74c:	0180011e 	orreq	r0, r0, lr, lsl r1
     750:	00a80800 	adceq	r0, r8, r0, lsl #16
     754:	9c010000 	stcls	0, cr0, [r1], {-0}
     758:	000006eb 	andeq	r0, r0, fp, ror #13
     75c:	0001b01d 	andeq	fp, r1, sp, lsl r0
     760:	00001208 	andeq	r1, r0, r8, lsl #4
     764:	00069600 	andeq	r9, r6, r0, lsl #12
     768:	045b1e00 	ldrbeq	r1, [fp], #-3584	; 0xe00
     76c:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
     770:	00004c01 	andeq	r4, r0, r1, lsl #24
     774:	00002100 	andeq	r2, r0, r0, lsl #2
     778:	861f0000 	ldrhi	r0, [pc], -r0
     77c:	30080001 	andcc	r0, r8, r1
     780:	2000000c 	andcs	r0, r0, ip
     784:	080001e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8}
     788:	00000c37 	andeq	r0, r0, r7, lsr ip
     78c:	000006b3 			; <UNDEFINED> instruction: 0x000006b3
     790:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     794:	20000074 	andcs	r0, r0, r4, ror r0
     798:	080001f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8}
     79c:	00000c49 	andeq	r0, r0, r9, asr #24
     7a0:	000006c7 	andeq	r0, r0, r7, asr #13
     7a4:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     7a8:	20000074 	andcs	r0, r0, r4, ror r0
     7ac:	080001fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8}
     7b0:	00000c60 	andeq	r0, r0, r0, ror #24
     7b4:	000006db 	ldrdeq	r0, [r0], -fp
     7b8:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     7bc:	22000074 	andcs	r0, r0, #116	; 0x74
     7c0:	0800020a 	stmdaeq	r0, {r1, r3, r9}
     7c4:	00000c72 	andeq	r0, r0, r2, ror ip
     7c8:	01500121 	cmpeq	r0, r1, lsr #2
     7cc:	19000030 	stmdbne	r0, {r4, r5}
     7d0:	00000635 	andeq	r0, r0, r5, lsr r6
     7d4:	a2013d01 	andge	r3, r1, #1, 26	; 0x40
     7d8:	28000001 	stmdacs	r0, {r0}
     7dc:	60080002 	andvs	r0, r8, r2
     7e0:	01000000 	mrseq	r0, (UNDEF: 0)
     7e4:	00073b9c 	muleq	r7, ip, fp
     7e8:	081a1a00 	ldmdaeq	sl, {r9, fp, ip}
     7ec:	3d010000 	stccc	0, cr0, [r1, #-0]
     7f0:	00005e01 	andeq	r5, r0, r1, lsl #28
     7f4:	00007000 	andeq	r7, r0, r0
     7f8:	09561e00 	ldmdbeq	r6, {r9, sl, fp, ip}^
     7fc:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
     800:	0001f901 	andeq	pc, r1, r1, lsl #18
     804:	00009100 	andeq	r9, r0, r0, lsl #2
     808:	02401f00 	subeq	r1, r0, #0, 30
     80c:	0c830800 	stceq	8, cr0, [r3], {0}
     810:	6c230000 	stcvs	0, cr0, [r3], #-0
     814:	21080002 	tstcs	r8, r2
     818:	74025001 	strvc	r5, [r2], #-1
     81c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     820:	00000131 	andeq	r0, r0, r1, lsr r1
     824:	5b017701 	blpl	5e430 <__Stack_Size+0x5e030>
     828:	88000001 	stmdahi	r0, {r0}
     82c:	0c080002 	stceq	0, cr0, [r8], {2}
     830:	01000000 	mrseq	r0, (UNDEF: 0)
     834:	00076f9c 	muleq	r7, ip, pc	; <UNPREDICTABLE>
     838:	656c2400 	strbvs	r2, [ip, #-1024]!	; 0x400
     83c:	7701006e 	strvc	r0, [r1, -lr, rrx]
     840:	00004c01 	andeq	r4, r0, r1, lsl #24
     844:	0000c800 	andeq	ip, r0, r0, lsl #16
     848:	028e2500 	addeq	r2, lr, #0, 10
     84c:	0c8e0800 	stceq	8, cr0, [lr], {0}
     850:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     854:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     858:	5b017b01 	blpl	5f464 <__Stack_Size+0x5f064>
     85c:	94000001 	strls	r0, [r0], #-1
     860:	0c080002 	stceq	0, cr0, [r8], {2}
     864:	01000000 	mrseq	r0, (UNDEF: 0)
     868:	0007a39c 	muleq	r7, ip, r3
     86c:	656c2400 	strbvs	r2, [ip, #-1024]!	; 0x400
     870:	7b01006e 	blvc	40a30 <__Stack_Size+0x40630>
     874:	00004c01 	andeq	r4, r0, r1, lsl #24
     878:	0000e900 	andeq	lr, r0, r0, lsl #18
     87c:	029a2500 	addseq	r2, sl, #0, 10
     880:	0c8e0800 	stceq	8, cr0, [lr], {0}
     884:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     888:	00000849 	andeq	r0, r0, r9, asr #16
     88c:	5b017f01 	blpl	60498 <__Stack_Size+0x60098>
     890:	a0000001 	andge	r0, r0, r1
     894:	20080002 	andcs	r0, r8, r2
     898:	01000000 	mrseq	r0, (UNDEF: 0)
     89c:	0007e39c 	muleq	r7, ip, r3
     8a0:	656c2400 	strbvs	r2, [ip, #-1024]!	; 0x400
     8a4:	7f01006e 	svcvc	0x0001006e
     8a8:	00004c01 	andeq	r4, r0, r1, lsl #24
     8ac:	00010a00 	andeq	r0, r1, r0, lsl #20
     8b0:	00132600 	andseq	r2, r3, r0, lsl #12
     8b4:	80010000 	andhi	r0, r1, r0
     8b8:	00005e01 	andeq	r5, r0, r1, lsl #28
     8bc:	02b42500 	adcseq	r2, r4, #0, 10
     8c0:	0c8e0800 	stceq	8, cr0, [lr], {0}
     8c4:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     8c8:	00000601 	andeq	r0, r0, r1, lsl #12
     8cc:	5b018801 	blpl	628d8 <__Stack_Size+0x624d8>
     8d0:	c0000001 	andgt	r0, r0, r1
     8d4:	0c080002 	stceq	0, cr0, [r8], {2}
     8d8:	01000000 	mrseq	r0, (UNDEF: 0)
     8dc:	0008179c 	muleq	r8, ip, r7
     8e0:	656c2400 	strbvs	r2, [ip, #-1024]!	; 0x400
     8e4:	8801006e 	stmdahi	r1, {r1, r2, r3, r5, r6}
     8e8:	00004c01 	andeq	r4, r0, r1, lsl #24
     8ec:	00014400 	andeq	r4, r1, r0, lsl #8
     8f0:	02c62500 	sbceq	r2, r6, #0, 10
     8f4:	0c8e0800 	stceq	8, cr0, [lr], {0}
     8f8:	27000000 	strcs	r0, [r0, -r0]
     8fc:	0000052c 	andeq	r0, r0, ip, lsr #10
     900:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
     904:	00000028 	andeq	r0, r0, r8, lsr #32
     908:	08509c01 	ldmdaeq	r0, {r0, sl, fp, ip, pc}^
     90c:	3d280000 	stccc	0, cr0, [r8, #-0]
     910:	65000005 	strvs	r0, [r0, #-5]
     914:	29000001 	stmdbcs	r0, {r0}
     918:	080002dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9}
     91c:	0000000e 	andeq	r0, r0, lr
     920:	00053d28 	andeq	r3, r5, r8, lsr #26
     924:	00019f00 	andeq	r9, r1, r0, lsl #30
     928:	02e01f00 	rsceq	r1, r0, #0, 30
     92c:	0c830800 	stceq	8, cr0, [r3], {0}
     930:	00000000 	andeq	r0, r0, r0
     934:	0002532a 	andeq	r5, r2, sl, lsr #6
     938:	f4280100 	vld4.8	{d0,d2,d4,d6}, [r8], r0
     93c:	7c080002 	stcvc	0, cr0, [r8], {2}
     940:	01000000 	mrseq	r0, (UNDEF: 0)
     944:	0008e19c 	muleq	r8, ip, r1
     948:	06832b00 	streq	r2, [r3], r0, lsl #22
     94c:	3d010000 	stccc	0, cr0, [r1, #-0]
     950:	000008e1 	andeq	r0, r0, r1, ror #17
     954:	2c6c9102 	stfcsp	f1, [ip], #-8
     958:	0000054a 	andeq	r0, r0, sl, asr #10
     95c:	08000352 	stmdaeq	r0, {r1, r4, r6, r8, r9}
     960:	00000004 	andeq	r0, r0, r4
     964:	08904f01 	ldmeq	r0, {r0, r8, r9, sl, fp, lr}
     968:	561f0000 	ldrpl	r0, [pc], -r0
     96c:	a8080003 	stmdage	r8, {r0, r1}
     970:	0000000c 	andeq	r0, r0, ip
     974:	00030020 	andeq	r0, r3, r0, lsr #32
     978:	000caf08 	andeq	sl, ip, r8, lsl #30
     97c:	0008a300 	andeq	sl, r8, r0, lsl #6
     980:	50012100 	andpl	r2, r1, r0, lsl #2
     984:	20003c01 	andcs	r3, r0, r1, lsl #24
     988:	08000312 	stmdaeq	r0, {r1, r4, r8, r9}
     98c:	00000cc4 	andeq	r0, r0, r4, asr #25
     990:	000008c4 	andeq	r0, r0, r4, asr #17
     994:	01520121 	cmpeq	r2, r1, lsr #2
     998:	51012130 	tstpl	r1, r0, lsr r1
     99c:	01213c01 	teqeq	r1, r1, lsl #24
     9a0:	000c0550 	andeq	r0, ip, r0, asr r5
     9a4:	00400108 	subeq	r0, r0, r8, lsl #2
     9a8:	00032c20 	andeq	r2, r3, r0, lsr #24
     9ac:	000caf08 	andeq	sl, ip, r8, lsl #30
     9b0:	0008d700 	andeq	sp, r8, r0, lsl #14
     9b4:	50012100 	andpl	r2, r1, r0, lsl #2
     9b8:	1f003c01 	svcne	0x00003c01
     9bc:	08000338 	stmdaeq	r0, {r3, r4, r5, r8, r9}
     9c0:	00000cdf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     9c4:	08e60500 	stmiaeq	r6!, {r8, sl}^
     9c8:	04020000 	streq	r0, [r2], #-0
     9cc:	00038007 	andeq	r8, r3, r7
     9d0:	054a2700 	strbeq	r2, [sl, #-1792]	; 0x700
     9d4:	00000000 	andeq	r0, r0, r0
     9d8:	00040000 	andeq	r0, r4, r0
     9dc:	9c010000 	stcls	0, cr0, [r1], {-0}
     9e0:	0000090a 	andeq	r0, r0, sl, lsl #18
     9e4:	00000025 	andeq	r0, r0, r5, lsr #32
     9e8:	000ca800 	andeq	sl, ip, r0, lsl #16
     9ec:	9a2a0000 	bls	a809f4 <__Stack_Size+0xa805f4>
     9f0:	01000000 	mrseq	r0, (UNDEF: 0)
     9f4:	000370ac 	andeq	r7, r3, ip, lsr #1
     9f8:	00001c08 	andeq	r1, r0, r8, lsl #24
     9fc:	2f9c0100 	svccs	0x009c0100
     a00:	2d000009 	stccs	0, cr0, [r0, #-36]	; 0xffffffdc
     a04:	000002be 			; <UNDEFINED> instruction: 0x000002be
     a08:	004cad01 	subeq	sl, ip, r1, lsl #26
     a0c:	01b50000 			; <UNDEFINED> instruction: 0x01b50000
     a10:	2a000000 	bcs	a18 <__Stack_Size+0x618>
     a14:	000007bf 			; <UNDEFINED> instruction: 0x000007bf
     a18:	038cb601 	orreq	fp, ip, #1048576	; 0x100000
     a1c:	00180800 	andseq	r0, r8, r0, lsl #16
     a20:	9c010000 	stcls	0, cr0, [r1], {-0}
     a24:	00000957 	andeq	r0, r0, r7, asr r9
     a28:	0002be2b 	andeq	fp, r2, fp, lsr #28
     a2c:	4cb70100 	ldfmis	f0, [r7]
     a30:	06000000 	streq	r0, [r0], -r0
     a34:	fb090071 	blx	240c02 <__Stack_Size+0x240802>
     a38:	2a009f1a 	bcs	286a8 <__Stack_Size+0x282a8>
     a3c:	000000ae 	andeq	r0, r0, lr, lsr #1
     a40:	03a4c401 			; <UNDEFINED> instruction: 0x03a4c401
     a44:	00840800 	addeq	r0, r4, r0, lsl #16
     a48:	9c010000 	stcls	0, cr0, [r1], {-0}
     a4c:	0000099d 	muleq	r0, sp, r9
     a50:	00029c2e 	andeq	r9, r2, lr, lsr #24
     a54:	c5c40100 	strbgt	r0, [r4, #256]	; 0x100
     a58:	cc000004 	stcgt	0, cr0, [r0], {4}
     a5c:	2d000001 	stccs	0, cr0, [r0, #-4]
     a60:	000002be 			; <UNDEFINED> instruction: 0x000002be
     a64:	004cc501 	subeq	ip, ip, r1, lsl #10
     a68:	021f0000 	andseq	r0, pc, #0
     a6c:	c21f0000 	andsgt	r0, pc, #0
     a70:	2f080003 	svccs	0x00080003
     a74:	1f000009 	svcne	0x00000009
     a78:	080003c8 	stmdaeq	r0, {r3, r6, r7, r8, r9}
     a7c:	0000092f 	andeq	r0, r0, pc, lsr #18
     a80:	05612f00 	strbeq	r2, [r1, #-3840]!	; 0xf00
     a84:	f4010000 	vst4.8	{d0-d3}, [r1], r0
     a88:	000001a2 	andeq	r0, r0, r2, lsr #3
     a8c:	08000428 	stmdaeq	r0, {r3, r5, sl}
     a90:	00000028 	andeq	r0, r0, r8, lsr #32
     a94:	09c39c01 	stmibeq	r3, {r0, sl, fp, ip, pc}^
     a98:	5c300000 	ldcpl	0, cr0, [r0], #-0
     a9c:	01000004 	tsteq	r0, r4
     aa0:	00004cf5 	strdeq	r4, [r0], -r5
     aa4:	31000100 	mrscc	r0, (UNDEF: 16)
     aa8:	00000886 	andeq	r0, r0, r6, lsl #17
     aac:	a2010301 	andge	r0, r1, #67108864	; 0x4000000
     ab0:	50000001 	andpl	r0, r0, r1
     ab4:	1c080004 	stcne	0, cr0, [r8], {4}
     ab8:	01000000 	mrseq	r0, (UNDEF: 0)
     abc:	08052a9c 	stmdaeq	r5, {r2, r3, r4, r7, r9, fp, sp}
     ac0:	56010000 	strpl	r0, [r1], -r0
     ac4:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
     ac8:	00000004 	andeq	r0, r0, r4
     acc:	09f89c01 	ldmibeq	r8!, {r0, sl, fp, ip, pc}^
     ad0:	70250000 	eorvc	r0, r5, r0
     ad4:	c3080004 	movwgt	r0, #32772	; 0x8004
     ad8:	00000009 	andeq	r0, r0, r9
     adc:	0000561c 	andeq	r5, r0, ip, lsl r6
     ae0:	01bd0100 			; <UNDEFINED> instruction: 0x01bd0100
     ae4:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
     ae8:	00000024 	andeq	r0, r0, r4, lsr #32
     aec:	0a2e9c01 	beq	ba7af8 <__Stack_Size+0xba76f8>
     af0:	f9320000 			; <UNDEFINED> instruction: 0xf9320000
     af4:	01000002 	tsteq	r0, r2
     af8:	00ff01be 	ldrhteq	r0, [pc], #30
     afc:	91020000 	mrsls	r0, (UNDEF: 2)
     b00:	048e3374 	streq	r3, [lr], #884	; 0x374
     b04:	0ceb0800 	stcleq	8, cr0, [fp]
     b08:	01210000 	teqeq	r1, r0
     b0c:	047d0250 	ldrbteq	r0, [sp], #-592	; 0x250
     b10:	351c0000 	ldrcc	r0, [ip, #-0]
     b14:	01000008 	tsteq	r0, r8
     b18:	04940110 	ldreq	r0, [r4], #272	; 0x110
     b1c:	00400800 	subeq	r0, r0, r0, lsl #16
     b20:	9c010000 	stcls	0, cr0, [r1], {-0}
     b24:	00000a60 	andeq	r0, r0, r0, ror #20
     b28:	00049a1f 	andeq	r9, r4, pc, lsl sl
     b2c:	000d0308 	andeq	r0, sp, r8, lsl #6
     b30:	04a61f00 	strteq	r1, [r6], #3840	; 0xf00
     b34:	099d0800 	ldmibeq	sp, {fp}
     b38:	ba1f0000 	blt	7c0b40 <__Stack_Size+0x7c0740>
     b3c:	f8080004 			; <UNDEFINED> instruction: 0xf8080004
     b40:	00000009 	andeq	r0, r0, r9
     b44:	0003cd1c 	andeq	ip, r3, ip, lsl sp
     b48:	01c80100 	biceq	r0, r8, r0, lsl #2
     b4c:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
     b50:	00000022 	andeq	r0, r0, r2, lsr #32
     b54:	0a969c01 	beq	fe5a7b60 <BootRAM+0xd518301>
     b58:	f9320000 			; <UNDEFINED> instruction: 0xf9320000
     b5c:	01000002 	tsteq	r0, r2
     b60:	00ff01c9 	rscseq	r0, pc, r9, asr #3
     b64:	91020000 	mrsls	r0, (UNDEF: 2)
     b68:	04f03374 	ldrbteq	r3, [r0], #884	; 0x374
     b6c:	0ceb0800 	stcleq	8, cr0, [fp]
     b70:	01210000 	teqeq	r1, r0
     b74:	047d0250 	ldrbteq	r0, [sp], #-592	; 0x250
     b78:	68340000 	ldmdavs	r4!, {}	; <UNPREDICTABLE>
     b7c:	01000006 	tsteq	r0, r6
     b80:	04f801d1 	ldrbteq	r0, [r8], #465	; 0x1d1
     b84:	00b40800 	adcseq	r0, r4, r0, lsl #16
     b88:	9c010000 	stcls	0, cr0, [r1], {-0}
     b8c:	00000ae5 	andeq	r0, r0, r5, ror #21
     b90:	00054020 	andeq	r4, r5, r0, lsr #32
     b94:	00095708 	andeq	r5, r9, r8, lsl #14
     b98:	000abf00 	andeq	fp, sl, r0, lsl #30
     b9c:	50012100 	andpl	r2, r1, r0, lsl #2
     ba0:	1f003001 	svcne	0x00003001
     ba4:	0800054e 	stmdaeq	r0, {r1, r2, r3, r6, r8, sl}
     ba8:	0000090a 	andeq	r0, r0, sl, lsl #18
     bac:	00058220 	andeq	r8, r5, r0, lsr #4
     bb0:	00095708 	andeq	r5, r9, r8, lsl #14
     bb4:	000adb00 	andeq	sp, sl, r0, lsl #22
     bb8:	50012100 	andpl	r2, r1, r0, lsl #2
     bbc:	25003701 	strcs	r3, [r0, #-1793]	; 0x701
     bc0:	08000594 	stmdaeq	r0, {r2, r4, r7, r8, sl}
     bc4:	00000d0a 	andeq	r0, r0, sl, lsl #26
     bc8:	02303500 	eorseq	r3, r0, #0, 10
     bcc:	64010000 	strvs	r0, [r1], #-0
     bd0:	0000007f 	andeq	r0, r0, pc, ror r0
     bd4:	02d40305 	sbcseq	r0, r4, #335544320	; 0x14000000
     bd8:	e7352000 	ldr	r2, [r5, -r0]!
     bdc:	01000005 	tsteq	r0, r5
     be0:	0003f96c 	andeq	pc, r3, ip, ror #18
     be4:	00030500 	andeq	r0, r3, r0, lsl #10
     be8:	35200000 	strcc	r0, [r0, #-0]!
     bec:	000013f9 	strdeq	r1, [r0], -r9
     bf0:	047d7c01 	ldrbteq	r7, [sp], #-3073	; 0xc01
     bf4:	03050000 	movweq	r0, #20480	; 0x5000
     bf8:	2000006c 	andcs	r0, r0, ip, rrx
     bfc:	00024635 	andeq	r4, r2, r5, lsr r6
     c00:	2f670100 	svccs	0x00670100
     c04:	05000002 	streq	r0, [r0, #-2]
     c08:	00009003 	andeq	r9, r0, r3
     c0c:	027c3620 	rsbseq	r3, ip, #32, 12	; 0x2000000
     c10:	22070000 	andcs	r0, r7, #0
     c14:	00000b34 	andeq	r0, r0, r4, lsr fp
     c18:	0316040a 	tsteq	r6, #167772160	; 0xa000000
     c1c:	2f360000 	svccs	0x00360000
     c20:	07000005 	streq	r0, [r0, -r5]
     c24:	000b4525 	andeq	r4, fp, r5, lsr #10
     c28:	f9040a00 			; <UNDEFINED> instruction: 0xf9040a00
     c2c:	36000003 	strcc	r0, [r0], -r3
     c30:	000004c2 	andeq	r0, r0, r2, asr #9
     c34:	004c2d07 	subeq	r2, ip, r7, lsl #26
     c38:	a7360000 	ldrge	r0, [r6, -r0]!
     c3c:	08000009 	stmdaeq	r0, {r0, r3}
     c40:	00016123 	andeq	r6, r1, r3, lsr #2
     c44:	08b73600 	ldmeq	r7!, {r9, sl, ip, sp}
     c48:	24080000 	strcs	r0, [r8], #-0
     c4c:	00000161 	andeq	r0, r0, r1, ror #2
     c50:	00016137 	andeq	r6, r1, r7, lsr r1
     c54:	000b7c00 	andeq	r7, fp, r0, lsl #24
     c58:	00bf3800 	adcseq	r3, pc, r0, lsl #16
     c5c:	00060000 	andeq	r0, r6, r0
     c60:	00011d36 	andeq	r1, r1, r6, lsr sp
     c64:	6c250800 	stcvs	8, cr0, [r5], #-0
     c68:	3600000b 	strcc	r0, [r0], -fp
     c6c:	000006a5 	andeq	r0, r0, r5, lsr #13
     c70:	01612608 	cmneq	r1, r8, lsl #12
     c74:	38350000 	ldmdacc	r5!, {}	; <UNPREDICTABLE>
     c78:	06000004 	streq	r0, [r0], -r4
     c7c:	000ba32c 	andeq	sl, fp, ip, lsr #6
     c80:	d0030500 	andle	r0, r3, r0, lsl #10
     c84:	39200002 	stmdbcc	r0!, {r1}
     c88:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     c8c:	5e370074 	mrcpl	0, 1, r0, cr7, cr4, {3}
     c90:	b5000000 	strlt	r0, [r0, #-0]
     c94:	3a00000b 	bcc	cc8 <__Stack_Size+0x8c8>
     c98:	08b43600 	ldmeq	r4!, {r9, sl, ip, sp}
     c9c:	25010000 	strcs	r0, [r1, #-0]
     ca0:	00000baa 	andeq	r0, r0, sl, lsr #23
     ca4:	0006a236 	andeq	sl, r6, r6, lsr r2
     ca8:	aa260100 	bge	9810b0 <__Stack_Size+0x980cb0>
     cac:	3500000b 	strcc	r0, [r0, #-11]
     cb0:	00000049 	andeq	r0, r0, r9, asr #32
     cb4:	006f6101 	rsbeq	r6, pc, r1, lsl #2
     cb8:	03050000 	movweq	r0, #20480	; 0x5000
     cbc:	20000318 	andcs	r0, r0, r8, lsl r3
     cc0:	00027035 	andeq	r7, r2, r5, lsr r0
     cc4:	8f650100 	svchi	0x00650100
     cc8:	05000000 	streq	r0, [r0, #-0]
     ccc:	00031403 	andeq	r1, r3, r3, lsl #8
     cd0:	010a3720 	tsteq	sl, r0, lsr #14
     cd4:	0bfd0000 	bleq	fff40cdc <BootRAM+0xeeb147d>
     cd8:	bf380000 	svclt	0x00380000
     cdc:	06000000 	streq	r0, [r0], -r0
     ce0:	00323500 	eorseq	r3, r2, r0, lsl #10
     ce4:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
     ce8:	00000bed 	andeq	r0, r0, sp, ror #23
     cec:	00340305 	eorseq	r0, r4, r5, lsl #6
     cf0:	0f352000 	svceq	0x00352000
     cf4:	01000008 	tsteq	r0, r8
     cf8:	000bed92 	muleq	fp, r2, sp
     cfc:	50030500 	andpl	r0, r3, r0, lsl #10
     d00:	35200000 	strcc	r0, [r0, #-0]!
     d04:	0000071d 	andeq	r0, r0, sp, lsl r7
     d08:	05019f01 	streq	r9, [r1, #-3841]	; 0xf01
     d0c:	03050000 	movweq	r0, #20480	; 0x5000
     d10:	200002d6 	ldrdcs	r0, [r0], -r6
     d14:	0005043b 	andeq	r0, r5, fp, lsr r4
     d18:	3c6e0900 	stclcc	9, cr0, [lr], #-0
     d1c:	00000763 	andeq	r0, r0, r3, ror #14
     d20:	4902460a 	stmdbmi	r2, {r1, r3, r9, sl, lr}
     d24:	0f00000c 	svceq	0x0000000c
     d28:	0000005e 	andeq	r0, r0, lr, asr r0
     d2c:	078d3c00 	streq	r3, [sp, r0, lsl #24]
     d30:	570a0000 	strpl	r0, [sl, -r0]
     d34:	000c6002 	andeq	r6, ip, r2
     d38:	005e0f00 	subseq	r0, lr, r0, lsl #30
     d3c:	4c0f0000 	stcmi	0, cr0, [pc], {-0}
     d40:	00000000 	andeq	r0, r0, r0
     d44:	0009623c 	andeq	r6, r9, ip, lsr r2
     d48:	02400a00 	subeq	r0, r0, #0, 20
     d4c:	00000c72 	andeq	r0, r0, r2, ror ip
     d50:	00005e0f 	andeq	r5, r0, pc, lsl #28
     d54:	213d0000 	teqcs	sp, r0
     d58:	04000000 	streq	r0, [r0], #-0
     d5c:	000c83e9 	andeq	r8, ip, r9, ror #7
     d60:	005e0f00 	subseq	r0, lr, r0, lsl #30
     d64:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
     d68:	00000325 	andeq	r0, r0, r5, lsr #6
     d6c:	00b46d09 	adcseq	r6, r4, r9, lsl #26
     d70:	603f0000 	eorsvs	r0, pc, r0
     d74:	04000008 	streq	r0, [r0], #-8
     d78:	00015be5 	andeq	r5, r1, r5, ror #23
     d7c:	000ca800 	andeq	sl, ip, r0, lsl #16
     d80:	004c0f00 	subeq	r0, ip, r0, lsl #30
     d84:	6c0f0000 	stcvs	0, cr0, [pc], {-0}
     d88:	00000001 	andeq	r0, r0, r1
     d8c:	0005393b 	andeq	r3, r5, fp, lsr r9
     d90:	3f190700 	svccc	0x00190700
     d94:	00000289 	andeq	r0, r0, r9, lsl #5
     d98:	08e6f303 	stmiaeq	r6!, {r0, r1, r8, r9, ip, sp, lr, pc}^
     d9c:	0cc40000 	stcleq	0, cr0, [r4], {0}
     da0:	a30f0000 	movwge	r0, #61440	; 0xf000
     da4:	0000000b 	andeq	r0, r0, fp
     da8:	00056c3d 	andeq	r6, r5, sp, lsr ip
     dac:	dff20300 	svcle	0x00f20300
     db0:	0f00000c 	svceq	0x0000000c
     db4:	0000003a 	andeq	r0, r0, sl, lsr r0
     db8:	00005e0f 	andeq	r5, r0, pc, lsl #28
     dbc:	005e0f00 	subseq	r0, lr, r0, lsl #30
     dc0:	40000000 	andmi	r0, r0, r0
     dc4:	000002c4 	andeq	r0, r0, r4, asr #5
     dc8:	a3010a03 	movwge	r0, #6659	; 0x1a03
     dcc:	3c00000b 	stccc	0, cr0, [r0], {11}
     dd0:	0000070a 	andeq	r0, r0, sl, lsl #14
     dd4:	fd010603 	stc2	6, cr0, [r1, #-12]
     dd8:	0f00000c 	svceq	0x0000000c
     ddc:	00000cfd 	strdeq	r0, [r0], -sp
     de0:	ff040a00 			; <UNDEFINED> instruction: 0xff040a00
     de4:	3b000000 	blcc	dec <__Stack_Size+0x9ec>
     de8:	00000084 	andeq	r0, r0, r4, lsl #1
     dec:	8d3b6a09 	vldmdbhi	fp!, {s12-s20}
     df0:	0b000003 	bleq	e04 <__Stack_Size+0xa04>
     df4:	024d001a 	subeq	r0, sp, #26
     df8:	00040000 	andeq	r0, r4, r0
     dfc:	000003f1 	strdeq	r0, [r0], -r1
     e00:	01580104 	cmpeq	r8, r4, lsl #2
     e04:	2b010000 	blcs	40e0c <__Stack_Size+0x40a0c>
     e08:	cd00000a 	stcgt	0, cr0, [r0, #-40]	; 0xffffffd8
     e0c:	a4000007 	strge	r0, [r0], #-7
     e10:	02000004 	andeq	r0, r0, #4
     e14:	01f60504 	mvnseq	r0, r4, lsl #10
     e18:	02020000 	andeq	r0, r2, #0
     e1c:	00069805 	andeq	r9, r6, r5, lsl #16
     e20:	06010200 	streq	r0, [r1], -r0, lsl #4
     e24:	00000644 	andeq	r0, r0, r4, asr #12
     e28:	7b070402 	blvc	1c1e38 <__Stack_Size+0x1c1a38>
     e2c:	03000003 	movweq	r0, #3
     e30:	00363175 	eorseq	r3, r6, r5, ror r1
     e34:	00442801 	subeq	r2, r4, r1, lsl #16
     e38:	02020000 	andeq	r0, r2, #0
     e3c:	0003d707 	andeq	sp, r3, r7, lsl #14
     e40:	38750300 	ldmdacc	r5!, {r8, r9}^
     e44:	55290100 	strpl	r0, [r9, #-256]!	; 0x100
     e48:	02000000 	andeq	r0, r0, #0
     e4c:	06420801 	strbeq	r0, [r2], -r1, lsl #16
     e50:	04020000 	streq	r0, [r2], #-0
     e54:	00051507 	andeq	r1, r5, r7, lsl #10
     e58:	008c0400 	addeq	r0, ip, r0, lsl #8
     e5c:	02080000 	andeq	r0, r8, #0
     e60:	00008824 	andeq	r8, r0, r4, lsr #16
     e64:	013d0500 	teqeq	sp, r0, lsl #10
     e68:	26020000 	strcs	r0, [r2], -r0
     e6c:	00000088 	andeq	r0, r0, r8, lsl #1
     e70:	05930500 	ldreq	r0, [r3, #1280]	; 0x500
     e74:	27020000 	strcs	r0, [r2, -r0]
     e78:	00000039 	andeq	r0, r0, r9, lsr r0
     e7c:	04060004 	streq	r0, [r6], #-4
     e80:	0000004b 	andeq	r0, r0, fp, asr #32
     e84:	0002d607 	andeq	sp, r2, r7, lsl #12
     e88:	63290200 	teqvs	r9, #0, 4
     e8c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     e90:	00000438 	andeq	r0, r0, r8, lsr r4
     e94:	00aa2c03 	adceq	r2, sl, r3, lsl #24
     e98:	03050000 	movweq	r0, #20480	; 0x5000
     e9c:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
     ea0:	69050409 	stmdbvs	r5, {r0, r3, sl}
     ea4:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     ea8:	000009a7 	andeq	r0, r0, r7, lsr #19
     eac:	008e3c04 	addeq	r3, lr, r4, lsl #24
     eb0:	03050000 	movweq	r0, #20480	; 0x5000
     eb4:	2000014c 	andcs	r0, r0, ip, asr #2
     eb8:	0008b708 	andeq	fp, r8, r8, lsl #14
     ebc:	8e960400 	cdphi	4, 9, cr0, cr6, cr0, {0}
     ec0:	05000000 	streq	r0, [r0, #-0]
     ec4:	0002c003 	andeq	ip, r2, r3
     ec8:	008e0a20 	addeq	r0, lr, r0, lsr #20
     ecc:	00e30000 	rsceq	r0, r3, r0
     ed0:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
     ed4:	06000000 	streq	r0, [r0], -r0
     ed8:	011d0800 	tsteq	sp, r0, lsl #16
     edc:	e0040000 	and	r0, r4, r0
     ee0:	000000d3 	ldrdeq	r0, [r0], -r3
     ee4:	00940305 	addseq	r0, r4, r5, lsl #6
     ee8:	a5082000 	strge	r2, [r8, #-0]
     eec:	04000006 	streq	r0, [r0], #-6
     ef0:	00008e4e 	andeq	r8, r0, lr, asr #28
     ef4:	e0030500 	and	r0, r3, r0, lsl #10
     ef8:	0a200000 	beq	800f00 <__Stack_Size+0x800b00>
     efc:	0000004b 	andeq	r0, r0, fp, asr #32
     f00:	00000115 	andeq	r0, r0, r5, lsl r1
     f04:	00005c0b 	andeq	r5, r0, fp, lsl #24
     f08:	08001100 	stmdaeq	r0, {r8, ip}
     f0c:	000009a4 	andeq	r0, r0, r4, lsr #19
     f10:	01052504 	tsteq	r5, r4, lsl #10
     f14:	03050000 	movweq	r0, #20480	; 0x5000
     f18:	200000cc 	andcs	r0, r0, ip, asr #1
     f1c:	00004b0a 	andeq	r4, r0, sl, lsl #22
     f20:	00013600 	andeq	r3, r1, r0, lsl #12
     f24:	005c0b00 	subseq	r0, ip, r0, lsl #22
     f28:	00080000 	andeq	r0, r8, r0
     f2c:	0006a208 	andeq	sl, r6, r8, lsl #4
     f30:	26410400 	strbcs	r0, [r1], -r0, lsl #8
     f34:	05000001 	streq	r0, [r0, #-1]
     f38:	00012903 	andeq	r2, r1, r3, lsl #18
     f3c:	004b0a20 	subeq	r0, fp, r0, lsr #20
     f40:	01570000 	cmpeq	r7, r0
     f44:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
     f48:	2c000000 	stccs	0, cr0, [r0], {-0}
     f4c:	08b40800 	ldmeq	r4!, {fp}
     f50:	54040000 	strpl	r0, [r4], #-0
     f54:	00000147 	andeq	r0, r0, r7, asr #2
     f58:	00ec0305 	rsceq	r0, ip, r5, lsl #6
     f5c:	4b0a2000 	blmi	288f64 <__Stack_Size+0x288b64>
     f60:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     f64:	0b000001 	bleq	f70 <__Stack_Size+0xb70>
     f68:	0000005c 	andeq	r0, r0, ip, asr r0
     f6c:	18080003 	stmdane	r8, {r0, r1}
     f70:	0400000a 	streq	r0, [r0], #-10
     f74:	0001689d 	muleq	r1, sp, r8
     f78:	e8030500 	stmda	r3, {r8, sl}
     f7c:	0a200000 	beq	800f84 <__Stack_Size+0x800b84>
     f80:	0000004b 	andeq	r0, r0, fp, asr #32
     f84:	00000199 	muleq	r0, r9, r1
     f88:	00005c0b 	andeq	r5, r0, fp, lsl #24
     f8c:	08001900 	stmdaeq	r0, {r8, fp, ip}
     f90:	0000097b 	andeq	r0, r0, fp, ror r9
     f94:	0189a404 	orreq	sl, r9, r4, lsl #8
     f98:	03050000 	movweq	r0, #20480	; 0x5000
     f9c:	20000132 	andcs	r0, r0, r2, lsr r1
     fa0:	00004b0a 	andeq	r4, r0, sl, lsl #22
     fa4:	0001ba00 	andeq	fp, r1, r0, lsl #20
     fa8:	005c0b00 	subseq	r0, ip, r0, lsl #22
     fac:	00130000 	andseq	r0, r3, r0
     fb0:	000a0408 	andeq	r0, sl, r8, lsl #8
     fb4:	aaaa0400 	bge	fea81fbc <BootRAM+0xd9f275d>
     fb8:	05000001 	streq	r0, [r0, #-1]
     fbc:	00015403 	andeq	r5, r1, r3, lsl #8
     fc0:	004b0a20 	subeq	r0, fp, r0, lsr #20
     fc4:	01db0000 	bicseq	r0, fp, r0
     fc8:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
     fcc:	0f000000 	svceq	0x00000000
     fd0:	09be0800 	ldmibeq	lr!, {fp}
     fd4:	b0040000 	andlt	r0, r4, r0
     fd8:	000001cb 	andeq	r0, r0, fp, asr #3
     fdc:	01190305 	tsteq	r9, r5, lsl #6
     fe0:	4b0a2000 	blmi	288fe8 <__Stack_Size+0x288be8>
     fe4:	fc000000 	stc2	0, cr0, [r0], {-0}
     fe8:	0b000001 	bleq	ff4 <__Stack_Size+0xbf4>
     fec:	0000005c 	andeq	r0, r0, ip, asr r0
     ff0:	d108007f 	tstle	r8, pc, ror r0
     ff4:	04000009 	streq	r0, [r0], #-9
     ff8:	0001ecca 	andeq	lr, r1, sl, asr #25
     ffc:	68030500 	stmdavs	r3, {r8, sl}
    1000:	0a200001 	beq	80100c <__Stack_Size+0x800c0c>
    1004:	0000004b 	andeq	r0, r0, fp, asr #32
    1008:	0000021d 	andeq	r0, r0, sp, lsl r2
    100c:	00005c0b 	andeq	r5, r0, fp, lsl #24
    1010:	08006b00 	stmdaeq	r0, {r8, r9, fp, sp, lr}
    1014:	000009e2 	andeq	r0, r0, r2, ror #19
    1018:	020dd104 	andeq	sp, sp, #4, 2
    101c:	03050000 	movweq	r0, #20480	; 0x5000
    1020:	200001e8 	andcs	r0, r0, r8, ror #3
    1024:	0009f308 	andeq	pc, r9, r8, lsl #6
    1028:	0dd80400 	cfldrdeq	mvd0, [r8]
    102c:	05000002 	streq	r0, [r0, #-2]
    1030:	00025403 	andeq	r5, r2, r3, lsl #8
    1034:	098e0820 	stmibeq	lr, {r5, fp}
    1038:	de040000 	cdple	0, 0, cr0, cr4, cr0, {0}
    103c:	0000004b 	andeq	r0, r0, fp, asr #32
    1040:	00000305 	andeq	r0, r0, r5, lsl #6
    1044:	51000000 	mrspl	r0, (UNDEF: 0)
    1048:	04000002 	streq	r0, [r0], #-2
    104c:	00047b00 	andeq	r7, r4, r0, lsl #22
    1050:	58010400 	stmdapl	r1, {sl}
    1054:	01000001 	tsteq	r0, r1
    1058:	00000adf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    105c:	000007cd 	andeq	r0, r0, sp, asr #15
    1060:	00000128 	andeq	r0, r0, r8, lsr #2
    1064:	00000000 	andeq	r0, r0, r0
    1068:	00000516 	andeq	r0, r0, r6, lsl r5
    106c:	f6050402 			; <UNDEFINED> instruction: 0xf6050402
    1070:	02000001 	andeq	r0, r0, #1
    1074:	06980502 	ldreq	r0, [r8], r2, lsl #10
    1078:	01020000 	mrseq	r0, (UNDEF: 2)
    107c:	00064406 	andeq	r4, r6, r6, lsl #8
    1080:	33750300 	cmncc	r5, #0, 6
    1084:	27050032 	smladxcs	r5, r2, r0, r0
    1088:	00000045 	andeq	r0, r0, r5, asr #32
    108c:	7b070402 	blvc	1c209c <__Stack_Size+0x1c1c9c>
    1090:	02000003 	andeq	r0, r0, #3
    1094:	03d70702 	bicseq	r0, r7, #524288	; 0x80000
    1098:	01020000 	mrseq	r0, (UNDEF: 2)
    109c:	00064208 	andeq	r4, r6, r8, lsl #4
    10a0:	05010400 	streq	r0, [r1, #-1024]	; 0x400
    10a4:	00006f37 	andeq	r6, r0, r7, lsr pc
    10a8:	05cf0500 	strbeq	r0, [pc, #1280]	; 15b0 <__Stack_Size+0x11b0>
    10ac:	05000000 	streq	r0, [r0, #-0]
    10b0:	0000073d 	andeq	r0, r0, sp, lsr r7
    10b4:	33060001 	movwcc	r0, #24577	; 0x6001
    10b8:	05000004 	streq	r0, [r0, #-4]
    10bc:	00005a37 	andeq	r5, r0, r7, lsr sl
    10c0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    10c4:	00000515 	andeq	r0, r0, r5, lsl r5
    10c8:	000acd07 	andeq	ip, sl, r7, lsl #26
    10cc:	ac260100 	stfges	f0, [r6], #-0
    10d0:	ac000001 	stcge	0, cr0, [r0], {1}
    10d4:	78080005 	stmdavc	r8, {r0, r2}
    10d8:	01000000 	mrseq	r0, (UNDEF: 0)
    10dc:	0001ac9c 	muleq	r1, ip, ip
    10e0:	0ad20800 	beq	ff4830e8 <BootRAM+0xe3f3889>
    10e4:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    10e8:	0000006f 	andeq	r0, r0, pc, rrx
    10ec:	00000246 	andeq	r0, r0, r6, asr #4
    10f0:	000a8508 	andeq	r8, sl, r8, lsl #10
    10f4:	6f290100 	svcvs	0x00290100
    10f8:	5a000000 	bpl	1100 <__Stack_Size+0xd00>
    10fc:	09000002 	stmdbeq	r0, {r1}
    1100:	080005ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl}
    1104:	0000001c 	andeq	r0, r0, ip, lsl r0
    1108:	0000010a 	andeq	r0, r0, sl, lsl #2
    110c:	000aa90a 	andeq	sl, sl, sl, lsl #18
    1110:	ac510100 	ldfgee	f0, [r1], {-0}
    1114:	d6000001 	strle	r0, [r0], -r1
    1118:	0b000000 	bleq	1120 <__Stack_Size+0xd20>
    111c:	05d40c00 	ldrbeq	r0, [r4, #3072]	; 0xc00
    1120:	01c40800 	biceq	r0, r4, r0, lsl #16
    1124:	00ed0000 	rsceq	r0, sp, r0
    1128:	010d0000 	mrseq	r0, (UNDEF: 13)
    112c:	000c0550 	andeq	r0, ip, r0, asr r5
    1130:	00080050 	andeq	r0, r8, r0, asr r0
    1134:	0005da0e 	andeq	sp, r5, lr, lsl #20
    1138:	0001d908 	andeq	sp, r1, r8, lsl #18
    113c:	05e40f00 	strbeq	r0, [r4, #3840]!	; 0xf00
    1140:	01c40800 	biceq	r0, r4, r0, lsl #16
    1144:	010d0000 	mrseq	r0, (UNDEF: 13)
    1148:	000c0550 	andeq	r0, ip, r0, asr r5
    114c:	00080020 	andeq	r0, r8, r0, lsr #32
    1150:	05ea0900 	strbeq	r0, [sl, #2304]!	; 0x900
    1154:	000e0800 	andeq	r0, lr, r0, lsl #16
    1158:	01350000 	teqeq	r5, r0
    115c:	f6100000 			; <UNDEFINED> instruction: 0xf6100000
    1160:	0100000a 	tsteq	r0, sl
    1164:	0001ac5d 	andeq	sl, r1, sp, asr ip
    1168:	05ee0e00 	strbeq	r0, [lr, #3584]!	; 0xe00
    116c:	01ea0800 	mvneq	r0, r0, lsl #16
    1170:	f60e0000 			; <UNDEFINED> instruction: 0xf60e0000
    1174:	fb080005 	blx	201192 <__Stack_Size+0x200d92>
    1178:	00000001 	andeq	r0, r0, r1
    117c:	0005b20e 	andeq	fp, r5, lr, lsl #4
    1180:	00020808 	andeq	r0, r2, r8, lsl #16
    1184:	05b60e00 	ldreq	r0, [r6, #3584]!	; 0xe00
    1188:	020f0800 	andeq	r0, pc, #0, 16
    118c:	ba0e0000 	blt	381194 <__Stack_Size+0x380d94>
    1190:	16080005 	strne	r0, [r8], -r5
    1194:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1198:	080005be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, sl}
    119c:	0000021d 	andeq	r0, r0, sp, lsl r2
    11a0:	0005c20e 	andeq	ip, r5, lr, lsl #4
    11a4:	00022408 	andeq	r2, r2, r8, lsl #8
    11a8:	05c60e00 	strbeq	r0, [r6, #3584]	; 0xe00
    11ac:	022b0800 	eoreq	r0, fp, #0, 16
    11b0:	fe0c0000 	cdp2	0, 0, cr0, cr12, cr0, {0}
    11b4:	c4080005 	strgt	r0, [r8], #-5
    11b8:	82000001 	andhi	r0, r0, #1
    11bc:	0d000001 	stceq	0, cr0, [r0, #-4]
    11c0:	0c055001 	stceq	0, cr5, [r5], {1}
    11c4:	08002000 	stmdaeq	r0, {sp}
    11c8:	060a0c00 	streq	r0, [sl], -r0, lsl #24
    11cc:	01c40800 	biceq	r0, r4, r0, lsl #16
    11d0:	01990000 	orrseq	r0, r9, r0
    11d4:	010d0000 	mrseq	r0, (UNDEF: 13)
    11d8:	000c0550 	andeq	r0, ip, r0, asr r5
    11dc:	00080050 	andeq	r0, r8, r0, asr r0
    11e0:	0006120e 	andeq	r1, r6, lr, lsl #4
    11e4:	00023c08 	andeq	r3, r2, r8, lsl #24
    11e8:	06180e00 	ldreq	r0, [r8], -r0, lsl #28
    11ec:	024d0800 	subeq	r0, sp, #0, 16
    11f0:	11000000 	mrsne	r0, (UNDEF: 0)
    11f4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    11f8:	38120074 	ldmdacc	r2, {r2, r4, r5, r6}
    11fc:	04000004 	streq	r0, [r0], #-4
    1200:	0001ac2c 	andeq	sl, r1, ip, lsr #24
    1204:	d0030500 	andle	r0, r3, r0, lsl #10
    1208:	13200002 	teqne	r0, #2
    120c:	00000a8f 	andeq	r0, r0, pc, lsl #21
    1210:	006ffd03 	rsbeq	pc, pc, r3, lsl #26
    1214:	01d90000 	bicseq	r0, r9, r0
    1218:	3a140000 	bcc	501220 <__Stack_Size+0x500e20>
    121c:	00000000 	andeq	r0, r0, r0
    1220:	000aa90a 	andeq	sl, sl, sl, lsl #18
    1224:	ac510100 	ldfgee	f0, [r1], {-0}
    1228:	ea000001 	b	1234 <__Stack_Size+0xe34>
    122c:	0b000001 	bleq	1238 <__Stack_Size+0xe38>
    1230:	0b020a00 	bleq	83a38 <__Stack_Size+0x83638>
    1234:	7c020000 	stcvc	0, cr0, [r2], {-0}
    1238:	0000006f 	andeq	r0, r0, pc, rrx
    123c:	000001fb 	strdeq	r0, [r0], -fp
    1240:	3c15000b 	ldccc	0, cr0, [r5], {11}
    1244:	0200000a 	andeq	r0, r0, #10
    1248:	0002087d 	andeq	r0, r2, sp, ror r8
    124c:	16000b00 	strne	r0, [r0], -r0, lsl #22
    1250:	00000a9d 	muleq	r0, sp, sl
    1254:	c416f903 	ldrgt	pc, [r6], #-2307	; 0x903
    1258:	0300000a 	movweq	r0, #10
    125c:	0a5716fa 	beq	15c6e4c <__Stack_Size+0x15c6a4c>
    1260:	fb030000 	blx	c126a <__Stack_Size+0xc0e6a>
    1264:	00025316 	andeq	r5, r2, r6, lsl r3
    1268:	16510400 	ldrbne	r0, [r1], -r0, lsl #8
    126c:	00000ab9 			; <UNDEFINED> instruction: 0x00000ab9
    1270:	690afc03 	stmdbvs	sl, {r0, r1, sl, fp, ip, sp, lr, pc}
    1274:	0300000a 	movweq	r0, #10
    1278:	0001acff 	strdeq	sl, [r1], -pc	; <UNPREDICTABLE>
    127c:	00023c00 	andeq	r3, r2, r0, lsl #24
    1280:	17000b00 	strne	r0, [r0, -r0, lsl #22]
    1284:	00000a4c 	andeq	r0, r0, ip, asr #20
    1288:	024dfe03 	subeq	pc, sp, #3, 28	; 0x30
    128c:	3a140000 	bcc	501294 <__Stack_Size+0x500e94>
    1290:	00000000 	andeq	r0, r0, r0
    1294:	000ae616 	andeq	lr, sl, r6, lsl r6
    1298:	00f80300 	rscseq	r0, r8, r0, lsl #6
    129c:	00000b23 	andeq	r0, r0, r3, lsr #22
    12a0:	05bf0004 	ldreq	r0, [pc, #4]!	; 12ac <__Stack_Size+0xeac>
    12a4:	01040000 	mrseq	r0, (UNDEF: 4)
    12a8:	00000158 	andeq	r0, r0, r8, asr r1
    12ac:	000d2501 	andeq	r2, sp, r1, lsl #10
    12b0:	0007cd00 	andeq	ip, r7, r0, lsl #26
    12b4:	00015000 	andeq	r5, r1, r0
    12b8:	00000000 	andeq	r0, r0, r0
    12bc:	0005ad00 	andeq	sl, r5, r0, lsl #26
    12c0:	05040200 	streq	r0, [r4, #-512]	; 0x200
    12c4:	000001f6 	strdeq	r0, [r0], -r6
    12c8:	98050202 	stmdals	r5, {r1, r9}
    12cc:	02000006 	andeq	r0, r0, #6
    12d0:	06440601 	strbeq	r0, [r4], -r1, lsl #12
    12d4:	75030000 	strvc	r0, [r3, #-0]
    12d8:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    12dc:	00004527 	andeq	r4, r0, r7, lsr #10
    12e0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    12e4:	0000037b 	andeq	r0, r0, fp, ror r3
    12e8:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    12ec:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
    12f0:	02000000 	andeq	r0, r0, #0
    12f4:	03d70702 	bicseq	r0, r7, #524288	; 0x80000
    12f8:	75030000 	strvc	r0, [r3, #-0]
    12fc:	29020038 	stmdbcs	r2, {r3, r4, r5}
    1300:	00000068 	andeq	r0, r0, r8, rrx
    1304:	42080102 	andmi	r0, r8, #-2147483648	; 0x80000000
    1308:	04000006 	streq	r0, [r0], #-6
    130c:	00000446 	andeq	r0, r0, r6, asr #8
    1310:	007a2f02 	rsbseq	r2, sl, r2, lsl #30
    1314:	45050000 	strmi	r0, [r5, #-0]
    1318:	04000000 	streq	r0, [r0], #-0
    131c:	00000153 	andeq	r0, r0, r3, asr r1
    1320:	008a3002 	addeq	r3, sl, r2
    1324:	57050000 	strpl	r0, [r5, -r0]
    1328:	04000000 	streq	r0, [r0], #-0
    132c:	00000dc5 	andeq	r0, r0, r5, asr #27
    1330:	009a3302 	addseq	r3, sl, r2, lsl #6
    1334:	7a060000 	bvc	18133c <__Stack_Size+0x180f3c>
    1338:	07000000 	streq	r0, [r0, -r0]
    133c:	b4370201 	ldrtlt	r0, [r7], #-513	; 0x201
    1340:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1344:	000005cf 	andeq	r0, r0, pc, asr #11
    1348:	073d0800 	ldreq	r0, [sp, -r0, lsl #16]!
    134c:	00010000 	andeq	r0, r1, r0
    1350:	00043304 	andeq	r3, r4, r4, lsl #6
    1354:	9f370200 	svcls	0x00370200
    1358:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    135c:	3f8d0328 	svccc	0x008d0328
    1360:	0a000001 	beq	136c <__Stack_Size+0xf6c>
    1364:	03005243 	movweq	r5, #579	; 0x243
    1368:	00006f8e 	andeq	r6, r0, lr, lsl #31
    136c:	c00b0000 	andgt	r0, fp, r0
    1370:	0300000d 	movweq	r0, #13
    1374:	00006f8f 	andeq	r6, r0, pc, lsl #31
    1378:	430a0400 	movwmi	r0, #41984	; 0xa400
    137c:	03005249 	movweq	r5, #585	; 0x249
    1380:	00006f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    1384:	910b0800 	tstls	fp, r0, lsl #16
    1388:	0300000b 	movweq	r0, #11
    138c:	00006f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    1390:	6a0b0c00 	bvs	2c4398 <__Stack_Size+0x2c3f98>
    1394:	0300000c 	movweq	r0, #12
    1398:	00006f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
    139c:	260b1000 	strcs	r1, [fp], -r0
    13a0:	0300000c 	movweq	r0, #12
    13a4:	00006f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    13a8:	f40b1400 	vst3.8	{d1-d3}, [fp], r0
    13ac:	0300000c 	movweq	r0, #12
    13b0:	00006f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    13b4:	300b1800 	andcc	r1, fp, r0, lsl #16
    13b8:	0300000d 	movweq	r0, #13
    13bc:	00006f95 	muleq	r0, r5, pc	; <UNPREDICTABLE>
    13c0:	9f0b1c00 	svcls	0x000b1c00
    13c4:	0300000d 	movweq	r0, #13
    13c8:	00006f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
    13cc:	430a2000 	movwmi	r2, #40960	; 0xa000
    13d0:	03005253 	movweq	r5, #595	; 0x253
    13d4:	00006f97 	muleq	r0, r7, pc	; <UNPREDICTABLE>
    13d8:	04002400 	streq	r2, [r0], #-1024	; 0x400
    13dc:	00000bfb 	strdeq	r0, [r0], -fp
    13e0:	00bf9803 	adcseq	r9, pc, r3, lsl #16
    13e4:	3c0c0000 	stccc	0, cr0, [ip], {-0}
    13e8:	df9b0303 	svcle	0x009b0303
    13ec:	0b000001 	bleq	13f8 <__Stack_Size+0xff8>
    13f0:	00000cdb 	ldrdeq	r0, [r0], -fp
    13f4:	01f69c03 	mvnseq	r9, r3, lsl #24
    13f8:	0b000000 	bleq	1400 <__Stack_Size+0x1000>
    13fc:	00000c8a 	andeq	r0, r0, sl, lsl #25
    1400:	01fb9d03 	mvnseq	r9, r3, lsl #26
    1404:	0b080000 	bleq	20140c <__Stack_Size+0x20100c>
    1408:	00000c65 	andeq	r0, r0, r5, ror #24
    140c:	020b9e03 	andeq	r9, fp, #3, 28	; 0x30
    1410:	0b800000 	bleq	fe001418 <BootRAM+0xcf71bb9>
    1414:	00000db7 			; <UNDEFINED> instruction: 0x00000db7
    1418:	01fb9f03 	mvnseq	r9, r3, lsl #30
    141c:	0d880000 	stceq	0, cr0, [r8]
    1420:	00000b3d 	andeq	r0, r0, sp, lsr fp
    1424:	0210a003 	andseq	sl, r0, #3
    1428:	01000000 	mrseq	r0, (UNDEF: 0)
    142c:	000c990d 	andeq	r9, ip, sp, lsl #18
    1430:	fba10300 	blx	fe84203a <BootRAM+0xd7b27db>
    1434:	08000001 	stmdaeq	r0, {r0}
    1438:	0b210d01 	bleq	844844 <__Stack_Size+0x844444>
    143c:	a2030000 	andge	r0, r3, #0
    1440:	00000215 	andeq	r0, r0, r5, lsl r2
    1444:	a30d0180 	movwge	r0, #53632	; 0xd180
    1448:	0300000c 	movweq	r0, #12
    144c:	0001fba3 	andeq	pc, r1, r3, lsr #23
    1450:	0d018800 	stceq	8, cr8, [r1, #-0]
    1454:	00000c5b 	andeq	r0, r0, fp, asr ip
    1458:	021aa403 	andseq	sl, sl, #50331648	; 0x3000000
    145c:	02000000 	andeq	r0, r0, #0
    1460:	000cad0d 	andeq	sl, ip, sp, lsl #26
    1464:	1fa50300 	svcne	0x00a50300
    1468:	08000002 	stmdaeq	r0, {r1}
    146c:	50490e02 	subpl	r0, r9, r2, lsl #28
    1470:	a6030052 			; <UNDEFINED> instruction: 0xa6030052
    1474:	0000023f 	andeq	r0, r0, pc, lsr r2
    1478:	0f000300 	svceq	0x00000300
    147c:	0000006f 	andeq	r0, r0, pc, rrx
    1480:	000001ef 	andeq	r0, r0, pc, ror #3
    1484:	0001ef10 	andeq	lr, r1, r0, lsl pc
    1488:	02000100 	andeq	r0, r0, #0, 2
    148c:	05150704 	ldreq	r0, [r5, #-1796]	; 0x704
    1490:	df050000 	svcle	0x00050000
    1494:	0f000001 	svceq	0x00000001
    1498:	0000003a 	andeq	r0, r0, sl, lsr r0
    149c:	0000020b 	andeq	r0, r0, fp, lsl #4
    14a0:	0001ef10 	andeq	lr, r1, r0, lsl pc
    14a4:	05001d00 	streq	r1, [r0, #-3328]	; 0xd00
    14a8:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    14ac:	0001df05 	andeq	sp, r1, r5, lsl #30
    14b0:	01df0500 	bicseq	r0, pc, r0, lsl #10
    14b4:	df050000 	svcle	0x00050000
    14b8:	0f000001 	svceq	0x00000001
    14bc:	0000003a 	andeq	r0, r0, sl, lsr r0
    14c0:	0000022f 	andeq	r0, r0, pc, lsr #4
    14c4:	0001ef10 	andeq	lr, r1, r0, lsl pc
    14c8:	0f003d00 	svceq	0x00003d00
    14cc:	0000006f 	andeq	r0, r0, pc, rrx
    14d0:	0000023f 	andeq	r0, r0, pc, lsr r2
    14d4:	0001ef10 	andeq	lr, r1, r0, lsl pc
    14d8:	05000e00 	streq	r0, [r0, #-3584]	; 0xe00
    14dc:	0000022f 	andeq	r0, r0, pc, lsr #4
    14e0:	000b9a04 	andeq	r9, fp, r4, lsl #20
    14e4:	4aa70300 	bmi	fe9c20ec <BootRAM+0xd93288d>
    14e8:	09000001 	stmdbeq	r0, {r0}
    14ec:	88a90304 	stmiahi	r9!, {r2, r8, r9}
    14f0:	0b000002 	bleq	1500 <__Stack_Size+0x1100>
    14f4:	0000044b 	andeq	r0, r0, fp, asr #8
    14f8:	005eaa03 	subseq	sl, lr, r3, lsl #20
    14fc:	0b000000 	bleq	1504 <__Stack_Size+0x1104>
    1500:	0000046e 	andeq	r0, r0, lr, ror #8
    1504:	005eab03 	subseq	sl, lr, r3, lsl #22
    1508:	0b010000 	bleq	41510 <__Stack_Size+0x41110>
    150c:	00000350 	andeq	r0, r0, r0, asr r3
    1510:	005eac03 	subseq	sl, lr, r3, lsl #24
    1514:	0b020000 	bleq	8151c <__Stack_Size+0x8111c>
    1518:	00000000 	andeq	r0, r0, r0
    151c:	00b4ad03 	adcseq	sl, r4, r3, lsl #26
    1520:	00030000 	andeq	r0, r3, r0
    1524:	00049004 	andeq	r9, r4, r4
    1528:	4fae0300 	svcmi	0x00ae0300
    152c:	09000002 	stmdbeq	r0, {r1}
    1530:	44b00340 	ldrtmi	r0, [r0], #832	; 0x340
    1534:	0b000003 	bleq	1548 <__Stack_Size+0x1148>
    1538:	00000c7f 	andeq	r0, r0, pc, ror ip
    153c:	008fb103 	addeq	fp, pc, r3, lsl #2
    1540:	0b000000 	bleq	1548 <__Stack_Size+0x1148>
    1544:	00000c19 	andeq	r0, r0, r9, lsl ip
    1548:	006fb203 	rsbeq	fp, pc, r3, lsl #4
    154c:	0b040000 	bleq	101554 <__Stack_Size+0x101154>
    1550:	00000bed 	andeq	r0, r0, sp, ror #23
    1554:	006fb303 	rsbeq	fp, pc, r3, lsl #6
    1558:	0b080000 	bleq	201560 <__Stack_Size+0x201160>
    155c:	00000c2d 	andeq	r0, r0, sp, lsr #24
    1560:	006fb403 	rsbeq	fp, pc, r3, lsl #8
    1564:	0a0c0000 	beq	30156c <__Stack_Size+0x30116c>
    1568:	00524353 	subseq	r4, r2, r3, asr r3
    156c:	006fb503 	rsbeq	fp, pc, r3, lsl #10
    1570:	0a100000 	beq	401578 <__Stack_Size+0x401178>
    1574:	00524343 	subseq	r4, r2, r3, asr #6
    1578:	006fb603 	rsbeq	fp, pc, r3, lsl #12
    157c:	0b140000 	bleq	501584 <__Stack_Size+0x501184>
    1580:	00000d51 	andeq	r0, r0, r1, asr sp
    1584:	0354b703 	cmpeq	r4, #786432	; 0xc0000
    1588:	0b180000 	bleq	601590 <__Stack_Size+0x601190>
    158c:	00000cd5 	ldrdeq	r0, [r0], -r5
    1590:	006fb803 	rsbeq	fp, pc, r3, lsl #16
    1594:	0b240000 	bleq	90159c <__Stack_Size+0x90119c>
    1598:	00000c56 	andeq	r0, r0, r6, asr ip
    159c:	006fb903 	rsbeq	fp, pc, r3, lsl #18
    15a0:	0b280000 	bleq	a015a8 <__Stack_Size+0xa011a8>
    15a4:	00000dd7 	ldrdeq	r0, [r0], -r7
    15a8:	006fba03 	rsbeq	fp, pc, r3, lsl #20
    15ac:	0b2c0000 	bleq	b015b4 <__Stack_Size+0xb011b4>
    15b0:	00000c94 	muleq	r0, r4, ip
    15b4:	006fbb03 	rsbeq	fp, pc, r3, lsl #22
    15b8:	0b300000 	bleq	c015c0 <__Stack_Size+0xc011c0>
    15bc:	00000c33 	andeq	r0, r0, r3, lsr ip
    15c0:	006fbc03 	rsbeq	fp, pc, r3, lsl #24
    15c4:	0b340000 	bleq	d015cc <__Stack_Size+0xd011cc>
    15c8:	00000bc6 	andeq	r0, r0, r6, asr #23
    15cc:	006fbd03 	rsbeq	fp, pc, r3, lsl #26
    15d0:	0b380000 	bleq	e015d8 <__Stack_Size+0xe011d8>
    15d4:	00000d16 	andeq	r0, r0, r6, lsl sp
    15d8:	006fbe03 	rsbeq	fp, pc, r3, lsl #28
    15dc:	003c0000 	eorseq	r0, ip, r0
    15e0:	00006f0f 	andeq	r6, r0, pc, lsl #30
    15e4:	00035400 	andeq	r5, r3, r0, lsl #8
    15e8:	01ef1000 	mvneq	r1, r0
    15ec:	00020000 	andeq	r0, r2, r0
    15f0:	00034405 	andeq	r4, r3, r5, lsl #8
    15f4:	0dcb0400 	cfstrdeq	mvd0, [fp]
    15f8:	bf030000 	svclt	0x00030000
    15fc:	00000293 	muleq	r0, r3, r2
    1600:	000c4a11 	andeq	r4, ip, r1, lsl sl
    1604:	c3030800 	movwgt	r0, #14336	; 0x3800
    1608:	00000388 	andeq	r0, r0, r8, lsl #7
    160c:	0052430a 	subseq	r4, r2, sl, lsl #6
    1610:	006fc403 	rsbeq	ip, pc, r3, lsl #8
    1614:	0a000000 	beq	161c <__Stack_Size+0x121c>
    1618:	00525343 	subseq	r5, r2, r3, asr #6
    161c:	006fc503 	rsbeq	ip, pc, r3, lsl #10
    1620:	00040000 	andeq	r0, r4, r0
    1624:	000c7311 	andeq	r7, ip, r1, lsl r3
    1628:	d0033800 	andle	r3, r3, r0, lsl #16
    162c:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    1630:	000d040b 	andeq	r0, sp, fp, lsl #8
    1634:	b4d10300 	ldrblt	r0, [r1], #768	; 0x300
    1638:	00000004 	andeq	r0, r0, r4
    163c:	3152440a 	cmpcc	r2, sl, lsl #8
    1640:	7fd20300 	svcvc	0x00d20300
    1644:	04000000 	streq	r0, [r0], #-0
    1648:	000c990b 	andeq	r9, ip, fp, lsl #18
    164c:	b9d30300 	ldmiblt	r3, {r8, r9}^
    1650:	06000004 	streq	r0, [r0], -r4
    1654:	3252440a 	subscc	r4, r2, #167772160	; 0xa000000
    1658:	7fd40300 	svcvc	0x00d40300
    165c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1660:	000ca30b 	andeq	sl, ip, fp, lsl #6
    1664:	b9d50300 	ldmiblt	r5, {r8, r9}^
    1668:	0a000004 	beq	1680 <__Stack_Size+0x1280>
    166c:	3352440a 	cmpcc	r2, #167772160	; 0xa000000
    1670:	7fd60300 	svcvc	0x00d60300
    1674:	0c000000 	stceq	0, cr0, [r0], {-0}
    1678:	000cad0b 	andeq	sl, ip, fp, lsl #26
    167c:	b9d70300 	ldmiblt	r7, {r8, r9}^
    1680:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    1684:	3452440a 	ldrbcc	r4, [r2], #-1034	; 0x40a
    1688:	7fd80300 	svcvc	0x00d80300
    168c:	10000000 	andne	r0, r0, r0
    1690:	000cb70b 	andeq	fp, ip, fp, lsl #14
    1694:	b9d90300 	ldmiblt	r9, {r8, r9}^
    1698:	12000004 	andne	r0, r0, #4
    169c:	3552440a 	ldrbcc	r4, [r2, #-1034]	; 0x40a
    16a0:	7fda0300 	svcvc	0x00da0300
    16a4:	14000000 	strne	r0, [r0], #-0
    16a8:	000cc10b 	andeq	ip, ip, fp, lsl #2
    16ac:	b9db0300 	ldmiblt	fp, {r8, r9}^
    16b0:	16000004 	strne	r0, [r0], -r4
    16b4:	3652440a 	ldrbcc	r4, [r2], -sl, lsl #8
    16b8:	7fdc0300 	svcvc	0x00dc0300
    16bc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    16c0:	000ccb0b 	andeq	ip, ip, fp, lsl #22
    16c4:	b9dd0300 	ldmiblt	sp, {r8, r9}^
    16c8:	1a000004 	bne	16e0 <__Stack_Size+0x12e0>
    16cc:	3752440a 	ldrbcc	r4, [r2, -sl, lsl #8]
    16d0:	7fde0300 	svcvc	0x00de0300
    16d4:	1c000000 	stcne	0, cr0, [r0], {-0}
    16d8:	000d7b0b 	andeq	r7, sp, fp, lsl #22
    16dc:	b9df0300 	ldmiblt	pc, {r8, r9}^	; <UNPREDICTABLE>
    16e0:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    16e4:	3852440a 	ldmdacc	r2, {r1, r3, sl, lr}^
    16e8:	7fe00300 	svcvc	0x00e00300
    16ec:	20000000 	andcs	r0, r0, r0
    16f0:	000d1b0b 	andeq	r1, sp, fp, lsl #22
    16f4:	b9e10300 	stmiblt	r1!, {r8, r9}^
    16f8:	22000004 	andcs	r0, r0, #4
    16fc:	3952440a 	ldmdbcc	r2, {r1, r3, sl, lr}^
    1700:	7fe20300 	svcvc	0x00e20300
    1704:	24000000 	strcs	r0, [r0], #-0
    1708:	000b6e0b 	andeq	r6, fp, fp, lsl #28
    170c:	b9e30300 	stmiblt	r3!, {r8, r9}^
    1710:	26000004 	strcs	r0, [r0], -r4
    1714:	000cef0b 	andeq	lr, ip, fp, lsl #30
    1718:	7fe40300 	svcvc	0x00e40300
    171c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1720:	000b790b 	andeq	r7, fp, fp, lsl #18
    1724:	b9e50300 	stmiblt	r5!, {r8, r9}^
    1728:	2a000004 	bcs	1740 <__Stack_Size+0x1340>
    172c:	000d560b 	andeq	r5, sp, fp, lsl #12
    1730:	6fe60300 	svcvs	0x00e60300
    1734:	2c000000 	stccs	0, cr0, [r0], {-0}
    1738:	0052430a 	subseq	r4, r2, sl, lsl #6
    173c:	006fe703 	rsbeq	lr, pc, r3, lsl #14
    1740:	0a300000 	beq	c01748 <__Stack_Size+0xc01348>
    1744:	00525343 	subseq	r5, r2, r3, asr #6
    1748:	006fe803 	rsbeq	lr, pc, r3, lsl #16
    174c:	00340000 	eorseq	r0, r4, r0
    1750:	00003a06 	andeq	r3, r0, r6, lsl #20
    1754:	004c0600 	subeq	r0, ip, r0, lsl #12
    1758:	13120000 	tstne	r2, #0
    175c:	0004be04 	andeq	fp, r4, r4, lsl #28
    1760:	0c401400 	cfstrdeq	mvd1, [r0], {-0}
    1764:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    1768:	6c150101 	ldfvss	f0, [r5], {1}
    176c:	01000005 	tsteq	r0, r5
    1770:	04fc012d 	ldrbteq	r0, [ip], #301	; 0x12d
    1774:	5c160000 	ldcpl	0, cr0, [r6], {-0}
    1778:	0100000d 	tsteq	r0, sp
    177c:	00003a2d 	andeq	r3, r0, sp, lsr #20
    1780:	69701700 	ldmdbvs	r0!, {r8, r9, sl, ip}^
    1784:	2d01006e 	stccs	0, cr0, [r1, #-440]	; 0xfffffe48
    1788:	0000005e 	andeq	r0, r0, lr, asr r0
    178c:	6c617617 	stclvs	6, cr7, [r1], #-92	; 0xffffffa4
    1790:	5e2d0100 	sufple	f0, f5, f0
    1794:	00000000 	andeq	r0, r0, r0
    1798:	0004ce18 	andeq	ip, r4, r8, lsl lr
    179c:	00062400 	andeq	r2, r6, r0, lsl #8
    17a0:	00001608 	andeq	r1, r0, r8, lsl #12
    17a4:	299c0100 	ldmibcs	ip, {r8}
    17a8:	19000005 	stmdbne	r0, {r0, r2}
    17ac:	000004da 	ldrdeq	r0, [r0], -sl
    17b0:	e51a5001 	ldr	r5, [sl, #-1]
    17b4:	86000004 	strhi	r0, [r0], -r4
    17b8:	1a000002 	bne	17c8 <__Stack_Size+0x13c8>
    17bc:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    17c0:	000002a7 	andeq	r0, r0, r7, lsr #5
    17c4:	0b421b00 	bleq	10883cc <__Stack_Size+0x1087fcc>
    17c8:	32010000 	andcc	r0, r1, #0
    17cc:	000000b4 	strheq	r0, [r0], -r4
    17d0:	00000000 	andeq	r0, r0, r0
    17d4:	00000012 	andeq	r0, r0, r2, lsl r0
    17d8:	05619c01 	strbeq	r9, [r1, #-3073]!	; 0xc01
    17dc:	5c1c0000 	ldcpl	0, cr0, [ip], {-0}
    17e0:	0100000d 	tsteq	r0, sp
    17e4:	00003a32 	andeq	r3, r0, r2, lsr sl
    17e8:	0002dd00 	andeq	sp, r2, r0, lsl #26
    17ec:	69701d00 	ldmdbvs	r0!, {r8, sl, fp, ip}^
    17f0:	3201006e 	andcc	r0, r1, #110	; 0x6e
    17f4:	0000005e 	andeq	r0, r0, lr, asr r0
    17f8:	000002fe 	strdeq	r0, [r0], -lr
    17fc:	0aa91e00 	beq	fea49004 <BootRAM+0xd9b97a5>
    1800:	3b010000 	blcc	41808 <__Stack_Size+0x41408>
    1804:	000000b4 	strheq	r0, [r0], -r4
    1808:	0800063c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl}
    180c:	00000010 	andeq	r0, r0, r0, lsl r0
    1810:	058a9c01 	streq	r9, [sl, #3073]	; 0xc01
    1814:	8b1f0000 	blhi	7c181c <__Stack_Size+0x7c141c>
    1818:	0100000b 	tsteq	r0, fp
    181c:	0000b43d 	andeq	fp, r0, sp, lsr r4
    1820:	00031f00 	andeq	r1, r3, r0, lsl #30
    1824:	5f200000 	svcpl	0x00200000
    1828:	0100000b 	tsteq	r0, fp
    182c:	0000004c 	andeq	r0, r0, ip, asr #32
    1830:	00005000 	andeq	r5, r0, r0
    1834:	539c0100 	orrspl	r0, ip, #0, 2
    1838:	1c000006 	stcne	0, cr0, [r0], {6}
    183c:	00000d5c 	andeq	r0, r0, ip, asr sp
    1840:	003a4c01 	eorseq	r4, sl, r1, lsl #24
    1844:	03450000 	movteq	r0, #20480	; 0x5000
    1848:	701d0000 	andsvc	r0, sp, r0
    184c:	01006e69 	tsteq	r0, r9, ror #28
    1850:	00005e4c 	andeq	r5, r0, ip, asr #28
    1854:	00036300 	andeq	r6, r3, r0, lsl #6
    1858:	0afc1c00 	beq	fff08860 <BootRAM+0xee79001>
    185c:	4c010000 	stcmi	0, cr0, [r1], {-0}
    1860:	0000005e 	andeq	r0, r0, lr, asr r0
    1864:	00000384 	andeq	r0, r0, r4, lsl #7
    1868:	000b5a1c 	andeq	r5, fp, ip, lsl sl
    186c:	3a4c0100 	bcc	1301c74 <__Stack_Size+0x1301874>
    1870:	cc000000 	stcgt	0, cr0, [r0], {-0}
    1874:	21000003 	tstcs	r0, r3
    1878:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
    187c:	005e4c01 	subseq	r4, lr, r1, lsl #24
    1880:	91020000 	mrsls	r0, (UNDEF: 2)
    1884:	00632200 	rsbeq	r2, r3, r0, lsl #4
    1888:	003a5001 	eorseq	r5, sl, r1
    188c:	03ea0000 	mvneq	r0, #0
    1890:	00230000 	eoreq	r0, r3, r0
    1894:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    1898:	16000004 	strne	r0, [r0], -r4
    189c:	24000006 	strcs	r0, [r0], #-6
    18a0:	77025201 	strvc	r5, [r2, -r1, lsl #4]
    18a4:	51012400 	tstpl	r1, r0, lsl #8
    18a8:	24007902 	strcs	r7, [r0], #-2306	; 0x902
    18ac:	78025001 	stmdavc	r2, {r0, ip, lr}
    18b0:	00230000 	eoreq	r0, r3, r0
    18b4:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    18b8:	36000004 	strcc	r0, [r0], -r4
    18bc:	24000006 	strcs	r0, [r0], #-6
    18c0:	7a025201 	bvc	960cc <__Stack_Size+0x95ccc>
    18c4:	51012400 	tstpl	r1, r0, lsl #8
    18c8:	24007902 	strcs	r7, [r0], #-2306	; 0x902
    18cc:	78025001 	stmdavc	r2, {r0, ip, lr}
    18d0:	00250000 	eoreq	r0, r5, r0
    18d4:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    18d8:	24000004 	strcs	r0, [r0], #-4
    18dc:	77025201 	strvc	r5, [r2, -r1, lsl #4]
    18e0:	51012400 	tstpl	r1, r0, lsl #8
    18e4:	24007902 	strcs	r7, [r0], #-2306	; 0x902
    18e8:	78025001 	stmdavc	r2, {r0, ip, lr}
    18ec:	26000000 	strcs	r0, [r0], -r0
    18f0:	00000a9d 	muleq	r0, sp, sl
    18f4:	064c6201 	strbeq	r6, [ip], -r1, lsl #4
    18f8:	00480800 	subeq	r0, r8, r0, lsl #16
    18fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1900:	000ac420 	andeq	ip, sl, r0, lsr #8
    1904:	946c0100 	strbtls	r0, [ip], #-256	; 0x100
    1908:	60080006 	andvs	r0, r8, r6
    190c:	01000000 	mrseq	r0, (UNDEF: 0)
    1910:	0006869c 	muleq	r6, ip, r6
    1914:	0ce02700 	stcleq	7, cr2, [r0]
    1918:	6d010000 	stcvs	0, cr0, [r1, #-0]
    191c:	00000686 	andeq	r0, r0, r6, lsl #13
    1920:	04020000 	streq	r0, [r2], #-0
    1924:	00038007 	andeq	r8, r3, r7
    1928:	02892800 	addeq	r2, r9, #0, 16
    192c:	8d010000 	stchi	0, cr0, [r1, #-0]
    1930:	00068601 	andeq	r8, r6, r1, lsl #12
    1934:	06b70100 	ldrteq	r0, [r7], r0, lsl #2
    1938:	70290000 	eorvc	r0, r9, r0
    193c:	01006e69 	tsteq	r0, r9, ror #28
    1940:	06b7018d 	ldrteq	r0, [r7], sp, lsl #3
    1944:	212a0000 	teqcs	sl, r0
    1948:	0100000c 	tsteq	r0, ip
    194c:	0686018f 	streq	r0, [r6], pc, lsl #3
    1950:	2b000000 	blcs	1958 <__Stack_Size+0x1558>
    1954:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1958:	57200074 			; <UNDEFINED> instruction: 0x57200074
    195c:	0100000a 	tsteq	r0, sl
    1960:	0006f497 	muleq	r6, r7, r4
    1964:	00001808 	andeq	r1, r0, r8, lsl #16
    1968:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    196c:	2c000006 	stccs	0, cr0, [r0], {6}
    1970:	000004ce 	andeq	r0, r0, lr, asr #9
    1974:	080006fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl}
    1978:	00000012 	andeq	r0, r0, r2, lsl r0
    197c:	f02d9d01 			; <UNDEFINED> instruction: 0xf02d9d01
    1980:	01000004 	tsteq	r0, r4
    1984:	0004e52d 	andeq	lr, r4, sp, lsr #10
    1988:	da2e0700 	ble	b83590 <__Stack_Size+0xb83190>
    198c:	00000004 	andeq	r0, r0, r4
    1990:	0040010c 	subeq	r0, r0, ip, lsl #2
    1994:	0ab92000 	beq	fee4999c <BootRAM+0xddba13d>
    1998:	a4010000 	strge	r0, [r1], #-0
    199c:	0800070c 	stmdaeq	r0, {r2, r3, r8, r9, sl}
    19a0:	0000001c 	andeq	r0, r0, ip, lsl r0
    19a4:	07289c01 	streq	r9, [r8, -r1, lsl #24]!
    19a8:	142f0000 	strtne	r0, [pc], #-0	; 19b0 <__Stack_Size+0x15b0>
    19ac:	08080007 	stmdaeq	r8, {r0, r1, r2}
    19b0:	1f000000 	svcne	0x00000000
    19b4:	00000b36 	andeq	r0, r0, r6, lsr fp
    19b8:	003aa701 	eorseq	sl, sl, r1, lsl #14
    19bc:	04130000 	ldreq	r0, [r3], #-0
    19c0:	00000000 	andeq	r0, r0, r0
    19c4:	000a8f1b 	andeq	r8, sl, fp, lsl pc
    19c8:	b4b00100 	ldrtlt	r0, [r0], #256	; 0x100
    19cc:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    19d0:	14080007 	strne	r0, [r8], #-7
    19d4:	01000000 	mrseq	r0, (UNDEF: 0)
    19d8:	00075f9c 	muleq	r7, ip, pc	; <UNPREDICTABLE>
    19dc:	0d731c00 	ldcleq	12, cr1, [r3, #-0]
    19e0:	b0010000 	andlt	r0, r1, r0
    19e4:	0000003a 	andeq	r0, r0, sl, lsr r0
    19e8:	00000426 	andeq	r0, r0, r6, lsr #8
    19ec:	00707322 	rsbseq	r7, r0, r2, lsr #6
    19f0:	003ab101 	eorseq	fp, sl, r1, lsl #2
    19f4:	04470000 	strbeq	r0, [r7], #-0
    19f8:	30000000 	andcc	r0, r0, r0
    19fc:	00000b13 	andeq	r0, r0, r3, lsl fp
    1a00:	073cba01 	ldreq	fp, [ip, -r1, lsl #20]!
    1a04:	00180800 	andseq	r0, r8, r0, lsl #16
    1a08:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a0c:	000007ad 	andeq	r0, r0, sp, lsr #15
    1a10:	000d731c 	andeq	r7, sp, ip, lsl r3
    1a14:	3aba0100 	bcc	fee81e1c <BootRAM+0xddf25bd>
    1a18:	5a000000 	bpl	1a20 <__Stack_Size+0x1620>
    1a1c:	04000004 	streq	r0, [r0], #-4
    1a20:	00000d6b 	andeq	r0, r0, fp, ror #26
    1a24:	04bfbe01 	ldrteq	fp, [pc], #3585	; 1a2c <__Stack_Size+0x162c>
    1a28:	f21f0000 	vhadd.s16	d0, d15, d0
    1a2c:	0100000b 	tsteq	r0, fp
    1a30:	00003abf 			; <UNDEFINED> instruction: 0x00003abf
    1a34:	00047b00 	andeq	r7, r4, r0, lsl #22
    1a38:	0d0e1f00 	stceq	15, cr1, [lr, #-0]
    1a3c:	c1010000 	mrsgt	r0, (UNDEF: 1)
    1a40:	00000783 	andeq	r0, r0, r3, lsl #15
    1a44:	0000047b 	andeq	r0, r0, fp, ror r4
    1a48:	0d942000 	ldceq	0, cr2, [r4]
    1a4c:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    1a50:	08000754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl}
    1a54:	0000002c 	andeq	r0, r0, ip, lsr #32
    1a58:	07d09c01 	ldrbeq	r9, [r0, r1, lsl #24]
    1a5c:	e7210000 	str	r0, [r1, -r0]!
    1a60:	0100000b 	tsteq	r0, fp
    1a64:	00004cde 	ldrdeq	r4, [r0], -lr
    1a68:	00500100 	subseq	r0, r0, r0, lsl #2
    1a6c:	000a691e 	andeq	r6, sl, lr, lsl r9
    1a70:	b7f00100 	ldrblt	r0, [r0, r0, lsl #2]!
    1a74:	80000006 	andhi	r0, r0, r6
    1a78:	48080007 	stmdami	r8, {r0, r1, r2}
    1a7c:	01000000 	mrseq	r0, (UNDEF: 0)
    1a80:	0008089c 	muleq	r8, ip, r8
    1a84:	0cfc1f00 	ldcleq	15, cr1, [ip]
    1a88:	f2010000 	vhadd.s8	d0, d1, d0
    1a8c:	000000b4 	strheq	r0, [r0], -r4
    1a90:	0000048e 	andeq	r0, r0, lr, lsl #9
    1a94:	0007b425 	andeq	fp, r7, r5, lsr #8
    1a98:	0007ad08 	andeq	sl, r7, r8, lsl #26
    1a9c:	50012400 	andpl	r2, r1, r0, lsl #8
    1aa0:	00003001 	andeq	r3, r0, r1
    1aa4:	00070a31 	andeq	r0, r7, r1, lsr sl
    1aa8:	010f0100 	mrseq	r0, (UNDEF: 31)
    1aac:	080007c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl}
    1ab0:	0000006c 	andeq	r0, r0, ip, rrx
    1ab4:	089f9c01 	ldmeq	pc, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
    1ab8:	09320000 	ldmdbeq	r2!, {}	; <UNPREDICTABLE>
    1abc:	0100000c 	tsteq	r0, ip
    1ac0:	089f010f 	ldmeq	pc, {r0, r1, r2, r3, r8}	; <UNPREDICTABLE>
    1ac4:	50010000 	andpl	r0, r1, r0
    1ac8:	000da433 	andeq	sl, sp, r3, lsr r4
    1acc:	01100100 	tsteq	r0, r0, lsl #2
    1ad0:	0000003a 	andeq	r0, r0, sl, lsr r0
    1ad4:	000004ad 	andeq	r0, r0, sp, lsr #9
    1ad8:	000b8433 	andeq	r8, fp, r3, lsr r4
    1adc:	01110100 	tsteq	r1, r0, lsl #2
    1ae0:	0000003a 	andeq	r0, r0, sl, lsr r0
    1ae4:	00000519 	andeq	r0, r0, r9, lsl r5
    1ae8:	000c1e33 	andeq	r1, ip, r3, lsr lr
    1aec:	01120100 	tsteq	r2, r0, lsl #2
    1af0:	0000003a 	andeq	r0, r0, sl, lsr r0
    1af4:	0000054e 	andeq	r0, r0, lr, asr #10
    1af8:	000ba733 	andeq	sl, fp, r3, lsr r7
    1afc:	01130100 	tsteq	r3, r0, lsl #2
    1b00:	0000003a 	andeq	r0, r0, sl, lsr r0
    1b04:	00000586 	andeq	r0, r0, r6, lsl #11
    1b08:	000b2f33 	andeq	r2, fp, r3, lsr pc
    1b0c:	01140100 	tsteq	r4, r0, lsl #2
    1b10:	0000003a 	andeq	r0, r0, sl, lsr r0
    1b14:	000005c3 	andeq	r0, r0, r3, asr #11
    1b18:	000c8534 	andeq	r8, ip, r4, lsr r5
    1b1c:	01160100 	tsteq	r6, r0, lsl #2
    1b20:	000008a5 	andeq	r0, r0, r5, lsr #17
    1b24:	8083da80 	addhi	sp, r3, r0, lsl #21
    1b28:	0bcb347e 	bleq	ff2ced28 <BootRAM+0xe23f4c9>
    1b2c:	17010000 	strne	r0, [r1, -r0]
    1b30:	0008ab01 	andeq	sl, r8, r1, lsl #22
    1b34:	83c28000 	bichi	r8, r2, #0
    1b38:	13007e80 	movwne	r7, #3712	; 0xe80
    1b3c:	00028804 	andeq	r8, r2, r4, lsl #16
    1b40:	59041300 	stmdbpl	r4, {r8, r9, ip}
    1b44:	13000003 	movwne	r0, #3
    1b48:	00024404 	andeq	r4, r2, r4, lsl #8
    1b4c:	0bd13100 	bleq	ff44df54 <BootRAM+0xe3be6f5>
    1b50:	32010000 	andcc	r0, r1, #0
    1b54:	00083401 	andeq	r3, r8, r1, lsl #8
    1b58:	00002408 	andeq	r2, r0, r8, lsl #8
    1b5c:	d99c0100 	ldmible	ip, {r8}
    1b60:	34000008 	strcc	r0, [r0], #-8
    1b64:	00000bcb 	andeq	r0, r0, fp, asr #23
    1b68:	ab013301 	blge	4e774 <__Stack_Size+0x4e374>
    1b6c:	80000008 	andhi	r0, r0, r8
    1b70:	7e8083c2 	cdpvc	3, 8, cr8, cr0, cr2, {6}
    1b74:	0a4c2000 	beq	1309b7c <__Stack_Size+0x130977c>
    1b78:	cb010000 	blgt	41b80 <__Stack_Size+0x41780>
    1b7c:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
    1b80:	00000028 	andeq	r0, r0, r8, lsr #32
    1b84:	09429c01 	stmdbeq	r2, {r0, sl, fp, ip, pc}^
    1b88:	731c0000 	tstvc	ip, #0
    1b8c:	0100000d 	tsteq	r0, sp
    1b90:	00003acb 	andeq	r3, r0, fp, asr #21
    1b94:	0005f100 	andeq	pc, r5, r0, lsl #2
    1b98:	04c53500 	strbeq	r3, [r5], #1280	; 0x500
    1b9c:	085a0000 	ldmdaeq	sl, {}^	; <UNPREDICTABLE>
    1ba0:	01380800 	teqeq	r8, r0, lsl #16
    1ba4:	d0010000 	andle	r0, r1, r0
    1ba8:	00086636 	andeq	r6, r8, r6, lsr r6
    1bac:	000b1808 	andeq	r1, fp, r8, lsl #16
    1bb0:	086a3600 	stmdaeq	sl!, {r9, sl, ip, sp}^
    1bb4:	08b10800 	ldmeq	r1!, {fp}
    1bb8:	6e360000 	cdpvs	0, 3, cr0, cr6, cr0, {0}
    1bbc:	1f080008 	svcne	0x00080008
    1bc0:	3600000b 	strcc	r0, [r0], -fp
    1bc4:	08000872 	stmdaeq	r0, {r1, r4, r5, r6, fp}
    1bc8:	00000653 	andeq	r0, r0, r3, asr r6
    1bcc:	00087c37 	andeq	r7, r8, r7, lsr ip
    1bd0:	00075f08 	andeq	r5, r7, r8, lsl #30
    1bd4:	50012400 	andpl	r2, r1, r0, lsl #8
    1bd8:	5001f303 	andpl	pc, r1, r3, lsl #6
    1bdc:	e6310000 	ldrt	r0, [r1], -r0
    1be0:	0100000a 	tsteq	r0, sl
    1be4:	0880013c 	stmeq	r0, {r2, r3, r4, r5, r8}
    1be8:	00140800 	andseq	r0, r4, r0, lsl #16
    1bec:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bf0:	0000096a 	andeq	r0, r0, sl, ror #18
    1bf4:	000c8534 	andeq	r8, ip, r4, lsr r5
    1bf8:	013d0100 	teqeq	sp, r0, lsl #2
    1bfc:	000008a5 	andeq	r0, r0, r5, lsr #17
    1c00:	8083da80 	addhi	sp, r3, r0, lsl #21
    1c04:	8538007e 	ldrhi	r0, [r8, #-126]!	; 0x7e
    1c08:	0100000d 	tsteq	r0, sp
    1c0c:	00b40148 	adcseq	r0, r4, r8, asr #2
    1c10:	08940000 	ldmeq	r4, {}	; <UNPREDICTABLE>
    1c14:	00340800 	eorseq	r0, r4, r0, lsl #16
    1c18:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c1c:	000009a5 	andeq	r0, r0, r5, lsr #19
    1c20:	000b2639 	andeq	r2, fp, r9, lsr r6
    1c24:	01480100 	mrseq	r0, (UNDEF: 88)
    1c28:	0000003a 	andeq	r0, r0, sl, lsr r0
    1c2c:	00000628 	andeq	r0, r0, r8, lsr #12
    1c30:	000b3633 	andeq	r3, fp, r3, lsr r6
    1c34:	01490100 	mrseq	r0, (UNDEF: 89)
    1c38:	0000003a 	andeq	r0, r0, sl, lsr r0
    1c3c:	00000649 	andeq	r0, r0, r9, asr #12
    1c40:	0b4a3800 	bleq	128fc48 <__Stack_Size+0x128f848>
    1c44:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    1c48:	0000b401 	andeq	fp, r0, r1, lsl #8
    1c4c:	00000000 	andeq	r0, r0, r0
    1c50:	00003000 	andeq	r3, r0, r0
    1c54:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    1c58:	39000009 	stmdbcc	r0, {r0, r3}
    1c5c:	00000b26 	andeq	r0, r0, r6, lsr #22
    1c60:	3a015901 	bcc	5806c <__Stack_Size+0x57c6c>
    1c64:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
    1c68:	3a000006 	bcc	1c88 <__Stack_Size+0x1888>
    1c6c:	5901006e 	stmdbpl	r1, {r1, r2, r3, r5, r6}
    1c70:	00004c01 	andeq	r4, r0, r1, lsl #24
    1c74:	00069500 	andeq	r9, r6, r0, lsl #10
    1c78:	00003600 	andeq	r3, r0, r0, lsl #12
    1c7c:	096a0000 	stmdbeq	sl!, {}^	; <UNPREDICTABLE>
    1c80:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1c84:	00000d38 	andeq	r0, r0, r8, lsr sp
    1c88:	b4016301 	strlt	r6, [r1], #-769	; 0x301
    1c8c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    1c90:	4c080008 	stcmi	0, cr0, [r8], {8}
    1c94:	01000000 	mrseq	r0, (UNDEF: 0)
    1c98:	000a5e9c 	muleq	sl, ip, lr
    1c9c:	0b693900 	bleq	1a500a4 <__Stack_Size+0x1a4fca4>
    1ca0:	63010000 	movwvs	r0, #4096	; 0x1000
    1ca4:	00003a01 	andeq	r3, r0, r1, lsl #20
    1ca8:	0006d900 	andeq	sp, r6, r0, lsl #18
    1cac:	0c603200 	sfmeq	f3, 2, [r0], #-0
    1cb0:	63010000 	movwvs	r0, #4096	; 0x1000
    1cb4:	00003a01 	andeq	r3, r0, r1, lsl #20
    1cb8:	33510100 	cmpcc	r1, #0, 2
    1cbc:	00000d61 	andeq	r0, r0, r1, ror #26
    1cc0:	5e016401 	cdppl	4, 0, cr6, cr1, cr1, {0}
    1cc4:	d900000a 	stmdble	r0, {r1, r3}
    1cc8:	3b000006 	blcc	1ce8 <__Stack_Size+0x18e8>
    1ccc:	00000c39 	andeq	r0, r0, r9, lsr ip
    1cd0:	6f016501 	svcvs	0x00016501
    1cd4:	02000000 	andeq	r0, r0, #0
    1cd8:	b03b6891 	mlaslt	fp, r1, r8, r6
    1cdc:	0100000d 	tsteq	r0, sp
    1ce0:	006f0166 	rsbeq	r0, pc, r6, ror #2
    1ce4:	91020000 	mrsls	r0, (UNDEF: 2)
    1ce8:	0b36336c 	bleq	d8eaa0 <__Stack_Size+0xd8e6a0>
    1cec:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    1cf0:	00003a01 	andeq	r3, r0, r1, lsl #20
    1cf4:	0006fa00 	andeq	pc, r6, r0, lsl #20
    1cf8:	04130000 	ldreq	r0, [r3], #-0
    1cfc:	0000007f 	andeq	r0, r0, pc, ror r0
    1d00:	0004c53c 	andeq	ip, r4, ip, lsr r5
    1d04:	00091400 	andeq	r1, r9, r0, lsl #8
    1d08:	00000c08 	andeq	r0, r0, r8, lsl #24
    1d0c:	3d9c0100 	ldfccs	f0, [ip]
    1d10:	00000bae 	andeq	r0, r0, lr, lsr #23
    1d14:	20018501 	andcs	r8, r1, r1, lsl #10
    1d18:	18080009 	stmdane	r8, {r0, r3}
    1d1c:	01000000 	mrseq	r0, (UNDEF: 0)
    1d20:	068d189c 	pkhbteq	r1, sp, ip, lsl #17
    1d24:	09380000 	ldmdbeq	r8!, {}	; <UNPREDICTABLE>
    1d28:	00120800 	andseq	r0, r2, r0, lsl #16
    1d2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d30:	00000aab 	andeq	r0, r0, fp, lsr #21
    1d34:	00069e1a 	andeq	r9, r6, sl, lsl lr
    1d38:	00071800 	andeq	r1, r7, r0, lsl #16
    1d3c:	06aa3e00 	strteq	r3, [sl], r0, lsl #28
    1d40:	07360000 	ldreq	r0, [r6, -r0]!
    1d44:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1d48:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
    1d4c:	b7019901 	strlt	r9, [r1, -r1, lsl #18]
    1d50:	4c000006 	stcmi	0, cr0, [r0], {6}
    1d54:	10080009 	andne	r0, r8, r9
    1d58:	01000000 	mrseq	r0, (UNDEF: 0)
    1d5c:	000ad69c 	muleq	sl, ip, r6
    1d60:	0d473f00 	stcleq	15, cr3, [r7, #-0]
    1d64:	9b010000 	blls	41d6c <__Stack_Size+0x4196c>
    1d68:	000ad601 	andeq	sp, sl, r1, lsl #12
    1d6c:	fff7e000 			; <UNDEFINED> instruction: 0xfff7e000
    1d70:	0413001f 	ldreq	r0, [r3], #-31
    1d74:	00000057 	andeq	r0, r0, r7, asr r0
    1d78:	0002c438 	andeq	ip, r2, r8, lsr r4
    1d7c:	019f0100 	orrseq	r0, pc, r0, lsl #2
    1d80:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    1d84:	0800095c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp}
    1d88:	00000018 	andeq	r0, r0, r8, lsl r0
    1d8c:	0b079c01 	bleq	1e8d98 <__Stack_Size+0x1e8998>
    1d90:	473f0000 	ldrmi	r0, [pc, -r0]!
    1d94:	0100000d 	tsteq	r0, sp
    1d98:	0ad601a2 	beq	ff582428 <BootRAM+0xe4f2bc9>
    1d9c:	f7e00000 			; <UNDEFINED> instruction: 0xf7e00000
    1da0:	40001fff 	strdmi	r1, [r0], -pc	; <UNPREDICTABLE>
    1da4:	00000438 	andeq	r0, r0, r8, lsr r4
    1da8:	06b72c04 	ldrteq	r2, [r7], r4, lsl #24
    1dac:	03050000 	movweq	r0, #20480	; 0x5000
    1db0:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    1db4:	0003cd41 	andeq	ip, r3, r1, asr #26
    1db8:	41800400 	orrmi	r0, r0, r0, lsl #8
    1dbc:	00000805 	andeq	r0, r0, r5, lsl #16
    1dc0:	81005204 	tsthi	r0, r4, lsl #4
    1dc4:	04000006 	streq	r0, [r0], #-6
    1dc8:	00098300 	andeq	r8, r9, r0, lsl #6
    1dcc:	58010400 	stmdapl	r1, {sl}
    1dd0:	01000001 	tsteq	r0, r1
    1dd4:	00000def 	andeq	r0, r0, pc, ror #27
    1dd8:	000007cd 	andeq	r0, r0, sp, asr #15
    1ddc:	00000218 	andeq	r0, r0, r8, lsl r2
    1de0:	00000000 	andeq	r0, r0, r0
    1de4:	00000891 	muleq	r0, r1, r8
    1de8:	f6050402 			; <UNDEFINED> instruction: 0xf6050402
    1dec:	02000001 	andeq	r0, r0, #1
    1df0:	06980502 	ldreq	r0, [r8], r2, lsl #10
    1df4:	01020000 	mrseq	r0, (UNDEF: 2)
    1df8:	00064406 	andeq	r4, r6, r6, lsl #8
    1dfc:	33750300 	cmncc	r5, #0, 6
    1e00:	27020032 	smladxcs	r2, r2, r0, r0
    1e04:	00000045 	andeq	r0, r0, r5, asr #32
    1e08:	7b070402 	blvc	1c2e18 <__Stack_Size+0x1c2a18>
    1e0c:	03000003 	movweq	r0, #3
    1e10:	00363175 	eorseq	r3, r6, r5, ror r1
    1e14:	00572802 	subseq	r2, r7, r2, lsl #16
    1e18:	02020000 	andeq	r0, r2, #0
    1e1c:	0003d707 	andeq	sp, r3, r7, lsl #14
    1e20:	38750300 	ldmdacc	r5!, {r8, r9}^
    1e24:	68290200 	stmdavs	r9!, {r9}
    1e28:	02000000 	andeq	r0, r0, #0
    1e2c:	06420801 	strbeq	r0, [r2], -r1, lsl #16
    1e30:	01040000 	mrseq	r0, (UNDEF: 4)
    1e34:	00843702 	addeq	r3, r4, r2, lsl #14
    1e38:	cf050000 	svcgt	0x00050000
    1e3c:	00000005 	andeq	r0, r0, r5
    1e40:	00073d05 	andeq	r3, r7, r5, lsl #26
    1e44:	06000100 	streq	r0, [r0], -r0, lsl #2
    1e48:	00000433 	andeq	r0, r0, r3, lsr r4
    1e4c:	006f3702 	rsbeq	r3, pc, r2, lsl #14
    1e50:	04070000 	streq	r0, [r7], #-0
    1e54:	0000005e 	andeq	r0, r0, lr, asr r0
    1e58:	00091b08 	andeq	r1, r9, r8, lsl #22
    1e5c:	38030c00 	stmdacc	r3, {sl, fp}
    1e60:	000000d2 	ldrdeq	r0, [r0], -r2
    1e64:	00029009 	andeq	r9, r2, r9
    1e68:	4c500300 	mrrcmi	3, 0, r0, r0, cr0	; <UNPREDICTABLE>
    1e6c:	00000000 	andeq	r0, r0, r0
    1e70:	00031909 	andeq	r1, r3, r9, lsl #18
    1e74:	4c510300 	mrrcmi	3, 0, r0, r1, cr0
    1e78:	02000000 	andeq	r0, r0, #0
    1e7c:	0015b109 	andseq	fp, r5, r9, lsl #2
    1e80:	4c520300 	mrrcmi	3, 0, r0, r2, cr0
    1e84:	04000000 	streq	r0, [r0], #-0
    1e88:	0000e309 	andeq	lr, r0, r9, lsl #6
    1e8c:	e1530300 	cmp	r3, r0, lsl #6
    1e90:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1e94:	008f0a00 	addeq	r0, pc, r0, lsl #20
    1e98:	00e10000 	rsceq	r0, r1, r0
    1e9c:	4c0b0000 	stcmi	0, cr0, [fp], {-0}
    1ea0:	00000000 	andeq	r0, r0, r0
    1ea4:	00d20407 	sbcseq	r0, r2, r7, lsl #8
    1ea8:	1c060000 	stcne	0, cr0, [r6], {-0}
    1eac:	03000009 	movweq	r0, #9
    1eb0:	00009554 	andeq	r9, r0, r4, asr r5
    1eb4:	57420c00 	strbpl	r0, [r2, -r0, lsl #24]
    1eb8:	62030200 	andvs	r0, r3, #0, 4
    1ebc:	00000116 	andeq	r0, r0, r6, lsl r1
    1ec0:	3062620d 	rsbcc	r6, r2, sp, lsl #4
    1ec4:	5e650300 	cdppl	3, 6, cr0, cr5, cr0, {0}
    1ec8:	00000000 	andeq	r0, r0, r0
    1ecc:	3162620d 	cmncc	r2, sp, lsl #4
    1ed0:	5e660300 	cdppl	3, 6, cr0, cr6, cr0, {0}
    1ed4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ed8:	03020e00 	movweq	r0, #11776	; 0x2e00
    1edc:	0001325f 	andeq	r3, r1, pc, asr r2
    1ee0:	00770f00 	rsbseq	r0, r7, r0, lsl #30
    1ee4:	004c6103 	subeq	r6, ip, r3, lsl #2
    1ee8:	620f0000 	andvs	r0, pc, #0
    1eec:	68030077 	stmdavs	r3, {r0, r1, r2, r4, r5, r6}
    1ef0:	000000f2 	strdeq	r0, [r0], -r2
    1ef4:	03ff0600 	mvnseq	r0, #0, 12
    1ef8:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
    1efc:	00000116 	andeq	r0, r0, r6, lsl r1
    1f00:	00003c08 	andeq	r3, r0, r8, lsl #24
    1f04:	6b031c00 	blvs	c8f0c <__Stack_Size+0xc8b0c>
    1f08:	000001ce 	andeq	r0, r0, lr, asr #3
    1f0c:	00055009 	andeq	r5, r5, r9
    1f10:	5e6d0300 	cdppl	3, 6, cr0, cr13, cr0, {0}
    1f14:	00000000 	andeq	r0, r0, r0
    1f18:	00021609 	andeq	r1, r2, r9, lsl #12
    1f1c:	5e6e0300 	cdppl	3, 6, cr0, cr14, cr0, {0}
    1f20:	01000000 	mrseq	r0, (UNDEF: 0)
    1f24:	00041809 	andeq	r1, r4, r9, lsl #16
    1f28:	326f0300 	rsbcc	r0, pc, #0, 6
    1f2c:	02000001 	andeq	r0, r0, #1
    1f30:	00014809 	andeq	r4, r1, r9, lsl #16
    1f34:	32700300 	rsbscc	r0, r0, #0, 6
    1f38:	04000001 	streq	r0, [r0], #-1
    1f3c:	00083d09 	andeq	r3, r8, r9, lsl #26
    1f40:	32710300 	rsbscc	r0, r1, #0, 6
    1f44:	06000001 	streq	r0, [r0], -r1
    1f48:	00094909 	andeq	r4, r9, r9, lsl #18
    1f4c:	5e730300 	cdppl	3, 7, cr0, cr3, cr0, {0}
    1f50:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1f54:	0003a009 	andeq	sl, r3, r9
    1f58:	5e740300 	cdppl	3, 7, cr0, cr4, cr0, {0}
    1f5c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1f60:	0004a109 	andeq	sl, r4, r9, lsl #2
    1f64:	5e750300 	cdppl	3, 7, cr0, cr5, cr0, {0}
    1f68:	0a000000 	beq	1f70 <__Stack_Size+0x1b70>
    1f6c:	00089209 	andeq	r9, r8, r9, lsl #4
    1f70:	5e760300 	cdppl	3, 7, cr0, cr6, cr0, {0}
    1f74:	0b000000 	bleq	1f7c <__Stack_Size+0x1b7c>
    1f78:	00061c09 	andeq	r1, r6, r9, lsl #24
    1f7c:	5e770300 	cdppl	3, 7, cr0, cr7, cr0, {0}
    1f80:	0c000000 	stceq	0, cr0, [r0], {-0}
    1f84:	00071309 	andeq	r1, r7, r9, lsl #6
    1f88:	e77a0300 	ldrb	r0, [sl, -r0, lsl #6]!
    1f8c:	10000000 	andne	r0, r0, r0
    1f90:	003d0600 	eorseq	r0, sp, r0, lsl #12
    1f94:	7b030000 	blvc	c1f9c <__Stack_Size+0xc1b9c>
    1f98:	0000013d 	andeq	r0, r0, sp, lsr r1
    1f9c:	15070402 	strne	r0, [r7, #-1026]	; 0x402
    1fa0:	04000005 	streq	r0, [r0], #-5
    1fa4:	01230401 	teqeq	r3, r1, lsl #8
    1fa8:	05000002 	streq	r0, [r0, #-2]
    1fac:	00000e5a 	andeq	r0, r0, sl, asr lr
    1fb0:	0f750500 	svceq	0x00750500
    1fb4:	05010000 	streq	r0, [r1, #-0]
    1fb8:	00000dfb 	strdeq	r0, [r0], -fp
    1fbc:	0ee60502 	cdpeq	5, 14, cr0, cr6, cr2, {0}
    1fc0:	00030000 	andeq	r0, r3, r0
    1fc4:	000f0a06 	andeq	r0, pc, r6, lsl #20
    1fc8:	e0230400 	eor	r0, r3, r0, lsl #8
    1fcc:	08000001 	stmdaeq	r0, {r0}
    1fd0:	00000e16 	andeq	r0, r0, r6, lsl lr
    1fd4:	61290406 	teqvs	r9, r6, lsl #8
    1fd8:	09000002 	stmdbeq	r0, {r1}
    1fdc:	00000fa3 	andeq	r0, r0, r3, lsr #31
    1fe0:	005e2a04 	subseq	r2, lr, r4, lsl #20
    1fe4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1fe8:	00000e2d 	andeq	r0, r0, sp, lsr #28
    1fec:	005e2b04 	subseq	r2, lr, r4, lsl #22
    1ff0:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1ff4:	00000e3c 	andeq	r0, r0, ip, lsr lr
    1ff8:	005e2c04 	subseq	r2, lr, r4, lsl #24
    1ffc:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    2000:	00000e4b 	andeq	r0, r0, fp, asr #28
    2004:	005e2d04 	subseq	r2, lr, r4, lsl #26
    2008:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    200c:	00000f5c 	andeq	r0, r0, ip, asr pc
    2010:	005e2e04 	subseq	r2, lr, r4, lsl #28
    2014:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    2018:	00000ddc 	ldrdeq	r0, [r0], -ip
    201c:	005e2f04 	subseq	r2, lr, r4, lsl #30
    2020:	00050000 	andeq	r0, r5, r0
    2024:	000e1706 	andeq	r1, lr, r6, lsl #14
    2028:	0c300400 	cfldrseq	mvf0, [r0], #-0
    202c:	10000002 	andne	r0, r0, r2
    2030:	00000df5 	strdeq	r0, [r0], -r5
    2034:	91320401 	teqls	r2, r1, lsl #8
    2038:	05000002 	streq	r0, [r0, #-2]
    203c:	00000f84 	andeq	r0, r0, r4, lsl #31
    2040:	0fb70500 	svceq	0x00b70500
    2044:	11010000 	mrsne	r0, (UNDEF: 1)
    2048:	00444e45 	subeq	r4, r4, r5, asr #28
    204c:	00670502 	rsbeq	r0, r7, r2, lsl #10
    2050:	00030000 	andeq	r0, r3, r0
    2054:	000df606 	andeq	pc, sp, r6, lsl #12
    2058:	6c370400 	cfldrsvs	mvf0, [r7], #-0
    205c:	12000002 	andne	r0, r0, #2
    2060:	00000084 	andeq	r0, r0, r4, lsl #1
    2064:	09743801 	ldmdbeq	r4!, {r0, fp, ip, sp}^
    2068:	005c0800 	subseq	r0, ip, r0, lsl #16
    206c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2070:	00050413 	andeq	r0, r5, r3, lsl r4
    2074:	015b0100 	cmpeq	fp, r0, lsl #2
    2078:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
    207c:	00000044 	andeq	r0, r0, r4, asr #32
    2080:	02ef9c01 	rsceq	r9, pc, #256	; 0x100
    2084:	6a140000 	bvs	50208c <__Stack_Size+0x501c8c>
    2088:	0100000f 	tsteq	r0, pc
    208c:	005e015c 	subseq	r0, lr, ip, asr r1
    2090:	07680000 	strbeq	r0, [r8, -r0]!
    2094:	ec150000 	ldc	0, cr0, [r5], {-0}
    2098:	09080009 	stmdbeq	r8, {r0, r3}
    209c:	16000006 	strne	r0, [r0], -r6
    20a0:	080009f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp}
    20a4:	00000611 	andeq	r0, r0, r1, lsl r6
    20a8:	000a0816 	andeq	r0, sl, r6, lsl r8
    20ac:	00061808 	andeq	r1, r6, r8, lsl #16
    20b0:	d3170000 	tstle	r7, #0
    20b4:	0100000e 	tsteq	r0, lr
    20b8:	00000173 	andeq	r0, r0, r3, ror r1
    20bc:	00020000 	andeq	r0, r2, r0
    20c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    20c4:	000eb818 	andeq	fp, lr, r8, lsl r8
    20c8:	01760100 	cmneq	r6, r0, lsl #2
    20cc:	0000008f 	andeq	r0, r0, pc, lsl #1
    20d0:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
    20d4:	00000018 	andeq	r0, r0, r8, lsl r0
    20d8:	032c9c01 	teqeq	ip, #256	; 0x100
    20dc:	63190000 	tstvs	r9, #0
    20e0:	0100000f 	tsteq	r0, pc
    20e4:	004c0176 	subeq	r0, ip, r6, ror r1
    20e8:	07910000 	ldreq	r0, [r1, r0]
    20ec:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    20f0:	00000e9b 	muleq	r0, fp, lr
    20f4:	8f017f01 	svchi	0x00017f01
    20f8:	2c000000 	stccs	0, cr0, [r0], {-0}
    20fc:	1808000a 	stmdane	r8, {r1, r3}
    2100:	01000000 	mrseq	r0, (UNDEF: 0)
    2104:	0003579c 	muleq	r3, ip, r7
    2108:	0f631900 	svceq	0x00631900
    210c:	7f010000 	svcvc	0x00010000
    2110:	00004c01 	andeq	r4, r0, r1, lsl #24
    2114:	0007b200 	andeq	fp, r7, r0, lsl #4
    2118:	c5180000 	ldrgt	r0, [r8, #-0]
    211c:	0100000e 	tsteq	r0, lr
    2120:	008f0189 	addeq	r0, pc, r9, lsl #3
    2124:	0a440000 	beq	110212c <__Stack_Size+0x1101d2c>
    2128:	00280800 	eoreq	r0, r8, r0, lsl #16
    212c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2130:	00000382 	andeq	r0, r0, r2, lsl #7
    2134:	000f6319 	andeq	r6, pc, r9, lsl r3	; <UNPREDICTABLE>
    2138:	01890100 	orreq	r0, r9, r0, lsl #2
    213c:	0000004c 	andeq	r0, r0, ip, asr #32
    2140:	000007d3 	ldrdeq	r0, [r0], -r3
    2144:	0e6a1800 	cdpeq	8, 6, cr1, cr10, cr0, {0}
    2148:	93010000 	movwls	r0, #4096	; 0x1000
    214c:	00008f01 	andeq	r8, r0, r1, lsl #30
    2150:	000a6c00 	andeq	r6, sl, r0, lsl #24
    2154:	00003408 	andeq	r3, r0, r8, lsl #8
    2158:	ad9c0100 	ldfges	f0, [ip]
    215c:	19000003 	stmdbne	r0, {r0, r1}
    2160:	00000f63 	andeq	r0, r0, r3, ror #30
    2164:	4c019301 	stcmi	3, cr9, [r1], {1}
    2168:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    216c:	00000007 	andeq	r0, r0, r7
    2170:	000e8713 	andeq	r8, lr, r3, lsl r7
    2174:	019c0100 	orrseq	r0, ip, r0, lsl #2
    2178:	08000aa0 	stmdaeq	r0, {r5, r7, r9, fp}
    217c:	0000005c 	andeq	r0, r0, ip, asr r0
    2180:	04059c01 	streq	r9, [r5], #-3073	; 0xc01
    2184:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
    2188:	019d0100 	orrseq	r0, sp, r0, lsl #2
    218c:	00000405 	andeq	r0, r0, r5, lsl #8
    2190:	00000815 	andeq	r0, r0, r5, lsl r8
    2194:	000f8e1b 	andeq	r8, pc, fp, lsl lr	; <UNPREDICTABLE>
    2198:	019e0100 	orrseq	r0, lr, r0, lsl #2
    219c:	0000040c 	andeq	r0, r0, ip, lsl #8
    21a0:	000ac01c 	andeq	ip, sl, ip, lsl r0
    21a4:	00061f08 	andeq	r1, r6, r8, lsl #30
    21a8:	0003f100 	andeq	pc, r3, r0, lsl #2
    21ac:	50011d00 	andpl	r1, r1, r0, lsl #26
    21b0:	00007402 	andeq	r7, r0, r2, lsl #8
    21b4:	000ad61e 	andeq	sp, sl, lr, lsl r6
    21b8:	00063508 	andeq	r3, r6, r8, lsl #10
    21bc:	50011d00 	andpl	r1, r1, r0, lsl #26
    21c0:	75007405 	strvc	r7, [r0, #-1029]	; 0x405
    21c4:	00002200 	andeq	r2, r0, r0, lsl #4
    21c8:	6905041f 	stmdbvs	r5, {r0, r1, r2, r3, r4, sl}
    21cc:	0700746e 	streq	r7, [r0, -lr, ror #8]
    21d0:	00003a04 	andeq	r3, r0, r4, lsl #20
    21d4:	03252000 	teqeq	r5, #0
    21d8:	4b010000 	blmi	421e0 <__Stack_Size+0x41de0>
    21dc:	00000084 	andeq	r0, r0, r4, lsl #1
    21e0:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
    21e4:	0000023c 	andeq	r0, r0, ip, lsr r2
    21e8:	04a69c01 	strteq	r9, [r6], #3073	; 0xc01
    21ec:	6a210000 	bvs	8421f4 <__Stack_Size+0x841df4>
    21f0:	0100000f 	tsteq	r0, pc
    21f4:	00005e52 	andeq	r5, r0, r2, asr lr
    21f8:	00083400 	andeq	r3, r8, r0, lsl #8
    21fc:	0b4a1500 	bleq	1287604 <__Stack_Size+0x1287204>
    2200:	06500800 	ldrbeq	r0, [r0], -r0, lsl #16
    2204:	4e150000 	cdpmi	0, 1, cr0, cr5, cr0, {0}
    2208:	5708000b 	strpl	r0, [r8, -fp]
    220c:	15000006 	strne	r0, [r0, #-6]
    2210:	08000b5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, fp}
    2214:	00000650 	andeq	r0, r0, r0, asr r6
    2218:	000b6215 	andeq	r6, fp, r5, lsl r2
    221c:	00065708 	andeq	r5, r6, r8, lsl #14
    2220:	0b681c00 	bleq	1a09228 <__Stack_Size+0x1a08e28>
    2224:	061f0800 	ldreq	r0, [pc], -r0, lsl #16
    2228:	04750000 	ldrbteq	r0, [r5], #-0
    222c:	011d0000 	tsteq	sp, r0
    2230:	000c0550 	andeq	r0, ip, r0, asr r5
    2234:	00080020 	andeq	r0, r8, r0, lsr #32
    2238:	000b701c 	andeq	r7, fp, ip, lsl r0
    223c:	00065f08 	andeq	r5, r6, r8, lsl #30
    2240:	00048a00 	andeq	r8, r4, r0, lsl #20
    2244:	50011d00 	andpl	r1, r1, r0, lsl #26
    2248:	424d0a03 	submi	r0, sp, #12288	; 0x3000
    224c:	0bb01500 	bleq	fec07654 <BootRAM+0xdb77df5>
    2250:	06700800 	ldrbteq	r0, [r0], -r0, lsl #16
    2254:	e0150000 	ands	r0, r5, r0
    2258:	ad08000b 	stcge	0, cr0, [r8, #-44]	; 0xffffffd4
    225c:	15000003 	strne	r0, [r0, #-3]
    2260:	08000c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp}
    2264:	0000067c 	andeq	r0, r0, ip, ror r6
    2268:	0fbe2200 	svceq	0x00be2200
    226c:	c4010000 	strgt	r0, [r1], #-0
    2270:	00005e01 	andeq	r5, r0, r1, lsl #28
    2274:	00000000 	andeq	r0, r0, r0
    2278:	00000c00 	andeq	r0, r0, r0, lsl #24
    227c:	139c0100 	orrsne	r0, ip, #0, 2
    2280:	00000fab 	andeq	r0, r0, fp, lsr #31
    2284:	0001c801 	andeq	ip, r1, r1, lsl #16
    2288:	0c000000 	stceq	0, cr0, [r0], {-0}
    228c:	01000000 	mrseq	r0, (UNDEF: 0)
    2290:	0004e19c 	muleq	r4, ip, r1
    2294:	0f012300 	svceq	0x00012300
    2298:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    229c:	00005e01 	andeq	r5, r0, r1, lsl #28
    22a0:	00500100 	subseq	r0, r0, r0, lsl #2
    22a4:	000b0224 	andeq	r0, fp, r4, lsr #4
    22a8:	01cc0100 	biceq	r0, ip, r0, lsl #2
    22ac:	00000084 	andeq	r0, r0, r4, lsl #1
    22b0:	08000d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp}
    22b4:	0000000c 	andeq	r0, r0, ip
    22b8:	3c259c01 	stccc	12, cr9, [r5], #-4
    22bc:	0100000a 	tsteq	r0, sl
    22c0:	0d4401d0 	stfeqe	f0, [r4, #-832]	; 0xfffffcc0
    22c4:	00040800 	andeq	r0, r4, r0, lsl #16
    22c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    22cc:	000e2126 	andeq	r2, lr, r6, lsr #2
    22d0:	1a260100 	bne	9826d8 <__Stack_Size+0x9822d8>
    22d4:	05000005 	streq	r0, [r0, #-5]
    22d8:	0002cc03 	andeq	ip, r2, r3, lsl #24
    22dc:	003a2720 	eorseq	r2, sl, r0, lsr #14
    22e0:	98260000 	stmdals	r6!, {}	; <UNPREDICTABLE>
    22e4:	0100000f 	tsteq	r0, pc
    22e8:	00051a27 	andeq	r1, r5, r7, lsr #20
    22ec:	c8030500 	stmdagt	r3, {r8, sl}
    22f0:	26200002 	strtcs	r0, [r0], -r2
    22f4:	00000f1b 	andeq	r0, r0, fp, lsl pc
    22f8:	05412801 	strbeq	r2, [r1, #-2049]	; 0x801
    22fc:	03050000 	movweq	r0, #20480	; 0x5000
    2300:	20000b25 	andcs	r0, r0, r5, lsr #22
    2304:	00026127 	andeq	r6, r2, r7, lsr #2
    2308:	005e2800 	subseq	r2, lr, r0, lsl #16
    230c:	05570000 	ldrbeq	r0, [r7, #-0]
    2310:	d9290000 	stmdble	r9!, {}	; <UNPREDICTABLE>
    2314:	ff000001 			; <UNDEFINED> instruction: 0xff000001
    2318:	e4260007 	strt	r0, [r6], #-7
    231c:	0100000d 	tsteq	r0, sp
    2320:	0005682e 	andeq	r6, r5, lr, lsr #16
    2324:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    2328:	27200003 	strcs	r0, [r0, -r3]!
    232c:	00000546 	andeq	r0, r0, r6, asr #10
    2330:	000f4426 	andeq	r4, pc, r6, lsr #8
    2334:	1a300100 	bne	c0273c <__Stack_Size+0xc0233c>
    2338:	05000005 	streq	r0, [r0, #-5]
    233c:	000b2003 	andeq	r2, fp, r3
    2340:	0f372620 	svceq	0x00372620
    2344:	31010000 	mrscc	r0, (UNDEF: 1)
    2348:	0000058f 	andeq	r0, r0, pc, lsl #11
    234c:	0b1e0305 	bleq	782f68 <__Stack_Size+0x782b68>
    2350:	4c272000 	stcmi	0, cr2, [r7], #-0
    2354:	26000000 	strcs	r0, [r0], -r0
    2358:	00000f28 	andeq	r0, r0, r8, lsr #30
    235c:	058f3201 	streq	r3, [pc, #513]	; 2565 <__Stack_Size+0x2165>
    2360:	03050000 	movweq	r0, #20480	; 0x5000
    2364:	20000b1c 	andcs	r0, r0, ip, lsl fp
    2368:	00027c2a 	andeq	r7, r2, sl, lsr #24
    236c:	b0220500 	eorlt	r0, r2, r0, lsl #10
    2370:	07000005 	streq	r0, [r0, -r5]
    2374:	0001ce04 	andeq	ip, r1, r4, lsl #28
    2378:	04382b00 	ldrteq	r2, [r8], #-2816	; 0xb00
    237c:	2c060000 	stccs	0, cr0, [r6], {-0}
    2380:	00000405 	andeq	r0, r0, r5, lsl #8
    2384:	02d00305 	sbcseq	r0, r0, #335544320	; 0x14000000
    2388:	542b2000 	strtpl	r2, [fp], #-0
    238c:	0100000f 	tsteq	r0, pc
    2390:	0005d82a 	andeq	sp, r5, sl, lsr #16
    2394:	2b030500 	blcs	c379c <__Stack_Size+0xc339c>
    2398:	2720000b 	strcs	r0, [r0, -fp]!
    239c:	00000084 	andeq	r0, r0, r4, lsl #1
    23a0:	000e782b 	andeq	r7, lr, fp, lsr #16
    23a4:	ee290100 	sufe	f0, f1, f0
    23a8:	05000005 	streq	r0, [r0, #-5]
    23ac:	000b2403 	andeq	r2, fp, r3, lsl #8
    23b0:	02012720 	andeq	r2, r1, #32, 14	; 0x800000
    23b4:	a92b0000 	stmdbge	fp!, {}	; <UNPREDICTABLE>
    23b8:	0100000e 	tsteq	r0, lr
    23bc:	00060435 	andeq	r0, r6, r5, lsr r4
    23c0:	d8030500 	stmdale	r3, {r8, sl}
    23c4:	27200002 	strcs	r0, [r0, -r2]!
    23c8:	00000291 	muleq	r0, r1, r2
    23cc:	000bd12c 	andeq	sp, fp, ip, lsr #2
    23d0:	01070700 	tsteq	r7, r0, lsl #14
    23d4:	0000562d 	andeq	r5, r0, sp, lsr #12
    23d8:	2d810600 	stccs	6, cr0, [r1]
    23dc:	00000ae6 	andeq	r0, r0, r6, ror #21
    23e0:	852ef807 	strhi	pc, [lr, #-2055]!	; 0x807
    23e4:	0700000d 	streq	r0, [r0, -sp]
    23e8:	00840102 	addeq	r0, r4, r2, lsl #2
    23ec:	06350000 	ldrteq	r0, [r5], -r0
    23f0:	3a0b0000 	bcc	2c23f8 <__Stack_Size+0x2c1ff8>
    23f4:	00000000 	andeq	r0, r0, r0
    23f8:	000d382e 	andeq	r3, sp, lr, lsr #16
    23fc:	01010700 	tsteq	r1, r0, lsl #14
    2400:	00000084 	andeq	r0, r0, r4, lsl #1
    2404:	00000650 	andeq	r0, r0, r0, asr r6
    2408:	00003a0b 	andeq	r3, r0, fp, lsl #20
    240c:	003a0b00 	eorseq	r0, sl, r0, lsl #22
    2410:	2d000000 	stccs	0, cr0, [r0, #-0]
    2414:	00000ab9 			; <UNDEFINED> instruction: 0x00000ab9
    2418:	ae2cfc07 	cdpge	12, 2, cr15, cr12, cr7, {0}
    241c:	0700000b 	streq	r0, [r0, -fp]
    2420:	942f0105 	strtls	r0, [pc], #-261	; 2428 <__Stack_Size+0x2028>
    2424:	0700000d 	streq	r0, [r0, -sp]
    2428:	000670ee 	andeq	r7, r6, lr, ror #1
    242c:	004c0b00 	subeq	r0, ip, r0, lsl #22
    2430:	30000000 	andcc	r0, r0, r0
    2434:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
    2438:	05010907 	streq	r0, [r1, #-2311]	; 0x907
    243c:	2c000004 	stccs	0, cr0, [r0], {4}
    2440:	00000c40 	andeq	r0, r0, r0, asr #24
    2444:	00010407 	andeq	r0, r1, r7, lsl #8
    2448:	00000c88 	andeq	r0, r0, r8, lsl #25
    244c:	0c6c0004 	stcleq	0, cr0, [ip], #-16
    2450:	01040000 	mrseq	r0, (UNDEF: 4)
    2454:	00000158 	andeq	r0, r0, r8, asr r1
    2458:	00113601 	andseq	r3, r1, r1, lsl #12
    245c:	0007cd00 	andeq	ip, r7, r0, lsl #26
    2460:	00033800 	andeq	r3, r3, r0, lsl #16
    2464:	00000000 	andeq	r0, r0, r0
    2468:	000ac300 	andeq	ip, sl, r0, lsl #6
    246c:	05040200 	streq	r0, [r4, #-512]	; 0x200
    2470:	000001f6 	strdeq	r0, [r0], -r6
    2474:	98050202 	stmdals	r5, {r1, r9}
    2478:	02000006 	andeq	r0, r0, #6
    247c:	06440601 	strbeq	r0, [r4], -r1, lsl #12
    2480:	75030000 	strvc	r0, [r3, #-0]
    2484:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    2488:	00004524 	andeq	r4, r0, r4, lsr #10
    248c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2490:	0000037b 	andeq	r0, r0, fp, ror r3
    2494:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    2498:	57250200 	strpl	r0, [r5, -r0, lsl #4]!
    249c:	02000000 	andeq	r0, r0, #0
    24a0:	03d70702 	bicseq	r0, r7, #524288	; 0x80000
    24a4:	75030000 	strvc	r0, [r3, #-0]
    24a8:	26020038 			; <UNDEFINED> instruction: 0x26020038
    24ac:	00000068 	andeq	r0, r0, r8, rrx
    24b0:	42080102 	andmi	r0, r8, #-2147483648	; 0x80000000
    24b4:	04000006 	streq	r0, [r0], #-6
    24b8:	00001052 	andeq	r1, r0, r2, asr r0
    24bc:	8e160301 	cdphi	3, 1, cr0, cr6, cr1, {0}
    24c0:	05000000 	streq	r0, [r0, #-0]
    24c4:	00001149 	andeq	r1, r0, r9, asr #2
    24c8:	101d0500 	andsne	r0, sp, r0, lsl #10
    24cc:	05010000 	streq	r0, [r1, #-0]
    24d0:	000010f0 	strdeq	r1, [r0], -r0
    24d4:	53060002 	movwpl	r0, #24578	; 0x6002
    24d8:	03000010 	movweq	r0, #16
    24dc:	00006f1c 	andeq	r6, r0, ip, lsl pc
    24e0:	12250700 	eorne	r0, r5, #0, 14
    24e4:	9b010000 	blls	424ec <__Stack_Size+0x420ec>
    24e8:	0000004c 	andeq	r0, r0, ip, asr #32
    24ec:	0000b501 	andeq	fp, r0, r1, lsl #10
    24f0:	13440800 	movtne	r0, #18432	; 0x4800
    24f4:	9b010000 	blls	424fc <__Stack_Size+0x420fc>
    24f8:	0000005e 	andeq	r0, r0, lr, asr r0
    24fc:	12850900 	addne	r0, r5, #0, 18
    2500:	22010000 	andcs	r0, r1, #0
    2504:	00000000 	andeq	r0, r0, r0
    2508:	0000000c 	andeq	r0, r0, ip
    250c:	00d89c01 	sbcseq	r9, r8, r1, lsl #24
    2510:	1b0a0000 	blne	282518 <__Stack_Size+0x282118>
    2514:	01000012 	tsteq	r0, r2, lsl r0
    2518:	00004c22 	andeq	r4, r0, r2, lsr #24
    251c:	00500100 	subseq	r0, r0, r0, lsl #2
    2520:	0010830b 	andseq	r8, r0, fp, lsl #6
    2524:	4c2e0100 	stfmis	f0, [lr], #-0
    2528:	00000000 	andeq	r0, r0, r0
    252c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2530:	01000000 	mrseq	r0, (UNDEF: 0)
    2534:	1065099c 	mlsne	r5, ip, r9, r0
    2538:	3a010000 	bcc	42540 <__Stack_Size+0x42140>
    253c:	00000000 	andeq	r0, r0, r0
    2540:	0000000c 	andeq	r0, r0, ip
    2544:	01109c01 	tsteq	r0, r1, lsl #24
    2548:	1b0a0000 	blne	282550 <__Stack_Size+0x282150>
    254c:	01000012 	tsteq	r0, r2, lsl r0
    2550:	00004c3a 	andeq	r4, r0, sl, lsr ip
    2554:	00500100 	subseq	r0, r0, r0, lsl #2
    2558:	0012130b 	andseq	r1, r2, fp, lsl #6
    255c:	4c460100 	stfmie	f0, [r6], {-0}
    2560:	00000000 	andeq	r0, r0, r0
    2564:	0c000000 	stceq	0, cr0, [r0], {-0}
    2568:	01000000 	mrseq	r0, (UNDEF: 0)
    256c:	12f00b9c 	rscsne	r0, r0, #156, 22	; 0x27000
    2570:	52010000 	andpl	r0, r1, #0
    2574:	0000004c 	andeq	r0, r0, ip, asr #32
    2578:	00000000 	andeq	r0, r0, r0
    257c:	0000000c 	andeq	r0, r0, ip
    2580:	49099c01 	stmdbmi	r9, {r0, sl, fp, ip, pc}
    2584:	01000012 	tsteq	r0, r2, lsl r0
    2588:	0000005e 	andeq	r0, r0, lr, asr r0
    258c:	00000c00 	andeq	r0, r0, r0, lsl #24
    2590:	5d9c0100 	ldfpls	f0, [ip]
    2594:	0a000001 	beq	25a0 <__Stack_Size+0x21a0>
    2598:	0000121b 	andeq	r1, r0, fp, lsl r2
    259c:	004c5e01 	subeq	r5, ip, r1, lsl #28
    25a0:	50010000 	andpl	r0, r1, r0
    25a4:	109c0b00 	addsne	r0, ip, r0, lsl #22
    25a8:	6a010000 	bvs	425b0 <__Stack_Size+0x421b0>
    25ac:	0000004c 	andeq	r0, r0, ip, asr #32
    25b0:	00000000 	andeq	r0, r0, r0
    25b4:	0000000c 	andeq	r0, r0, ip
    25b8:	8d099c01 	stchi	12, cr9, [r9, #-4]
    25bc:	01000012 	tsteq	r0, r2, lsl r0
    25c0:	00000076 	andeq	r0, r0, r6, ror r0
    25c4:	00001000 	andeq	r1, r0, r0
    25c8:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
    25cc:	0a000001 	beq	25d8 <__Stack_Size+0x21d8>
    25d0:	0000121b 	andeq	r1, r0, fp, lsl r2
    25d4:	004c7601 	subeq	r7, ip, r1, lsl #12
    25d8:	50010000 	andpl	r0, r1, r0
    25dc:	12090b00 	andne	r0, r9, #0, 22
    25e0:	82010000 	andhi	r0, r1, #0
    25e4:	0000004c 	andeq	r0, r0, ip, asr #32
    25e8:	00000000 	andeq	r0, r0, r0
    25ec:	0000000c 	andeq	r0, r0, ip
    25f0:	4b099c01 	blmi	2695fc <__Stack_Size+0x2691fc>
    25f4:	01000013 	tsteq	r0, r3, lsl r0
    25f8:	0000008f 	andeq	r0, r0, pc, lsl #1
    25fc:	00000e00 	andeq	r0, r0, r0, lsl #28
    2600:	dc9c0100 	ldfles	f0, [ip], {0}
    2604:	0c000001 	stceq	0, cr0, [r0], {1}
    2608:	00001344 	andeq	r1, r0, r4, asr #6
    260c:	005e8f01 	subseq	r8, lr, r1, lsl #30
    2610:	08aa0000 	stmiaeq	sl!, {}	; <UNPREDICTABLE>
    2614:	1b0a0000 	blne	28261c <__Stack_Size+0x28221c>
    2618:	01000012 	tsteq	r0, r2, lsl r0
    261c:	00004c8f 	andeq	r4, r0, pc, lsl #25
    2620:	00510100 	subseq	r0, r1, r0, lsl #2
    2624:	0000990d 	andeq	r9, r0, sp, lsl #18
    2628:	00000000 	andeq	r0, r0, r0
    262c:	00001000 	andeq	r1, r0, r0
    2630:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    2634:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    2638:	000000a9 	andeq	r0, r0, r9, lsr #1
    263c:	000008cb 	andeq	r0, r0, fp, asr #17
    2640:	10e60900 	rscne	r0, r6, r0, lsl #18
    2644:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    2648:	00000000 	andeq	r0, r0, r0
    264c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2650:	022d9c01 	eoreq	r9, sp, #256	; 0x100
    2654:	440c0000 	strmi	r0, [ip], #-0
    2658:	01000013 	tsteq	r0, r3, lsl r0
    265c:	00005ea8 	andeq	r5, r0, r8, lsr #29
    2660:	0008ec00 	andeq	lr, r8, r0, lsl #24
    2664:	11300c00 	teqne	r0, r0, lsl #24
    2668:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    266c:	0000004c 	andeq	r0, r0, ip, asr #32
    2670:	0000090d 	andeq	r0, r0, sp, lsl #18
    2674:	11b90f00 			; <UNDEFINED> instruction: 0x11b90f00
    2678:	b4010000 	strlt	r0, [r1], #-0
    267c:	0000004c 	andeq	r0, r0, ip, asr #32
    2680:	00000000 	andeq	r0, r0, r0
    2684:	00000012 	andeq	r0, r0, r2, lsl r0
    2688:	02569c01 	subseq	r9, r6, #256	; 0x100
    268c:	440c0000 	strmi	r0, [ip], #-0
    2690:	01000013 	tsteq	r0, r3, lsl r0
    2694:	00005eb4 			; <UNDEFINED> instruction: 0x00005eb4
    2698:	00092e00 	andeq	r2, r9, r0, lsl #28
    269c:	36090000 	strcc	r0, [r9], -r0
    26a0:	01000013 	tsteq	r0, r3, lsl r0
    26a4:	000d48c1 	andeq	r4, sp, r1, asr #17
    26a8:	00002a08 	andeq	r2, r0, r8, lsl #20
    26ac:	9f9c0100 	svcls	0x009c0100
    26b0:	0c000002 	stceq	0, cr0, [r0], {2}
    26b4:	00001344 	andeq	r1, r0, r4, asr #6
    26b8:	005ec101 	subseq	ip, lr, r1, lsl #2
    26bc:	094f0000 	stmdbeq	pc, {}^	; <UNPREDICTABLE>
    26c0:	030a0000 	movweq	r0, #40960	; 0xa000
    26c4:	0100000f 	tsteq	r0, pc
    26c8:	00004cc1 	andeq	r4, r0, r1, asr #25
    26cc:	10510100 	subsne	r0, r1, r0, lsl #2
    26d0:	08000d48 	stmdaeq	r0, {r3, r6, r8, sl, fp}
    26d4:	0000002a 	andeq	r0, r0, sl, lsr #32
    26d8:	00045b11 	andeq	r5, r4, r1, lsl fp
    26dc:	4cc30100 	stfmie	f0, [r3], {0}
    26e0:	01000000 	mrseq	r0, (UNDEF: 0)
    26e4:	09000053 	stmdbeq	r0, {r0, r1, r4, r6}
    26e8:	000010b9 	strheq	r1, [r0], -r9
    26ec:	0000ce01 	andeq	ip, r0, r1, lsl #28
    26f0:	002a0000 	eoreq	r0, sl, r0
    26f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    26f8:	000002e8 	andeq	r0, r0, r8, ror #5
    26fc:	0013440c 	andseq	r4, r3, ip, lsl #8
    2700:	5ece0100 	polple	f0, f6, f0
    2704:	70000000 	andvc	r0, r0, r0
    2708:	0a000009 	beq	2734 <__Stack_Size+0x2334>
    270c:	00000f03 	andeq	r0, r0, r3, lsl #30
    2710:	004cce01 	subeq	ip, ip, r1, lsl #28
    2714:	51010000 	mrspl	r0, (UNDEF: 1)
    2718:	00000010 	andeq	r0, r0, r0, lsl r0
    271c:	00002a00 	andeq	r2, r0, r0, lsl #20
    2720:	045b1100 	ldrbeq	r1, [fp], #-256	; 0x100
    2724:	d0010000 	andle	r0, r1, r0
    2728:	0000004c 	andeq	r0, r0, ip, asr #32
    272c:	00005301 	andeq	r5, r0, r1, lsl #6
    2730:	00100809 	andseq	r0, r0, r9, lsl #16
    2734:	00db0100 	sbcseq	r0, fp, r0, lsl #2
    2738:	24000000 	strcs	r0, [r0], #-0
    273c:	01000000 	mrseq	r0, (UNDEF: 0)
    2740:	00033e9c 	muleq	r3, ip, lr
    2744:	13440c00 	movtne	r0, #19456	; 0x4c00
    2748:	db010000 	blle	42750 <__Stack_Size+0x42350>
    274c:	0000005e 	andeq	r0, r0, lr, asr r0
    2750:	00000991 	muleq	r0, r1, r9
    2754:	00112b0a 	andseq	r2, r1, sl, lsl #22
    2758:	5edb0100 	cdppl	1, 13, cr0, cr11, cr0, {0}
    275c:	01000000 	mrseq	r0, (UNDEF: 0)
    2760:	13081251 	movwne	r1, #33361	; 0x8251
    2764:	dd010000 	stcle	0, cr0, [r1, #-0]
    2768:	0000004c 	andeq	r0, r0, ip, asr #32
    276c:	00009913 	andeq	r9, r0, r3, lsl r9
    2770:	00000000 	andeq	r0, r0, r0
    2774:	00028800 	andeq	r8, r2, r0, lsl #16
    2778:	0ede0100 	cdpeq	1, 13, cr0, cr14, cr0, {0}
    277c:	000000a9 	andeq	r0, r0, r9, lsr #1
    2780:	00000991 	muleq	r0, r1, r9
    2784:	1d0f0000 	stcne	0, cr0, [pc, #-0]	; 278c <__Stack_Size+0x238c>
    2788:	01000011 	tsteq	r0, r1, lsl r0
    278c:	00004cf0 	strdeq	r4, [r0], -r0
    2790:	00000000 	andeq	r0, r0, r0
    2794:	00001200 	andeq	r1, r0, r0, lsl #4
    2798:	679c0100 	ldrvs	r0, [ip, r0, lsl #2]
    279c:	0c000003 	stceq	0, cr0, [r0], {3}
    27a0:	00001344 	andeq	r1, r0, r4, asr #6
    27a4:	005ef001 	subseq	pc, lr, r1
    27a8:	09b20000 	ldmibeq	r2!, {}	; <UNPREDICTABLE>
    27ac:	0f000000 	svceq	0x00000000
    27b0:	00001029 	andeq	r1, r0, r9, lsr #32
    27b4:	004cfc01 	subeq	pc, ip, r1, lsl #24
    27b8:	00000000 	andeq	r0, r0, r0
    27bc:	00120000 	andseq	r0, r2, r0
    27c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    27c4:	00000390 	muleq	r0, r0, r3
    27c8:	0013440c 	andseq	r4, r3, ip, lsl #8
    27cc:	5efc0100 	cdppl	1, 15, cr0, cr12, cr0, {0}
    27d0:	d3000000 	movwle	r0, #0
    27d4:	00000009 	andeq	r0, r0, r9
    27d8:	000ffb14 	andeq	pc, pc, r4, lsl fp	; <UNPREDICTABLE>
    27dc:	01080100 	mrseq	r0, (UNDEF: 24)
    27e0:	00000000 	andeq	r0, r0, r0
    27e4:	0000001e 	andeq	r0, r0, lr, lsl r0
    27e8:	03d19c01 	bicseq	r9, r1, #256	; 0x100
    27ec:	44150000 	ldrmi	r0, [r5], #-0
    27f0:	01000013 	tsteq	r0, r3, lsl r0
    27f4:	005e0108 	subseq	r0, lr, r8, lsl #2
    27f8:	09f40000 	ldmibeq	r4!, {}^	; <UNPREDICTABLE>
    27fc:	00100000 	andseq	r0, r0, r0
    2800:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2804:	16000000 	strne	r0, [r0], -r0
    2808:	0000045b 	andeq	r0, r0, fp, asr r4
    280c:	4c010a01 	stcmi	10, cr0, [r1], {1}
    2810:	15000000 	strne	r0, [r0, #-0]
    2814:	0000000a 	andeq	r0, r0, sl
    2818:	09621400 	stmdbeq	r2!, {sl, ip}^
    281c:	14010000 	strne	r0, [r1], #-0
    2820:	000d7201 	andeq	r7, sp, r1, lsl #4
    2824:	00001e08 	andeq	r1, r0, r8, lsl #28
    2828:	129c0100 	addsne	r0, ip, #0, 2
    282c:	15000004 	strne	r0, [r0, #-4]
    2830:	00001344 	andeq	r1, r0, r4, asr #6
    2834:	5e011401 	cdppl	4, 0, cr1, cr1, cr1, {0}
    2838:	40000000 	andmi	r0, r0, r0
    283c:	1000000a 	andne	r0, r0, sl
    2840:	08000d72 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, fp}
    2844:	0000001e 	andeq	r0, r0, lr, lsl r0
    2848:	00045b16 	andeq	r5, r4, r6, lsl fp
    284c:	01160100 	tsteq	r6, r0, lsl #2
    2850:	0000004c 	andeq	r0, r0, ip, asr #32
    2854:	00000a61 	andeq	r0, r0, r1, ror #20
    2858:	e4140000 	ldr	r0, [r4], #-0
    285c:	01000011 	tsteq	r0, r1, lsl r0
    2860:	00000120 	andeq	r0, r0, r0, lsr #2
    2864:	001e0000 	andseq	r0, lr, r0
    2868:	9c010000 	stcls	0, cr0, [r1], {-0}
    286c:	00000439 	andeq	r0, r0, r9, lsr r4
    2870:	00134415 	andseq	r4, r3, r5, lsl r4
    2874:	01200100 	teqeq	r0, r0, lsl #2
    2878:	0000005e 	andeq	r0, r0, lr, asr r0
    287c:	00000a8f 	andeq	r0, r0, pc, lsl #21
    2880:	11fc1400 	mvnsne	r1, r0, lsl #8
    2884:	2c010000 	stccs	0, cr0, [r1], {-0}
    2888:	00000001 	andeq	r0, r0, r1
    288c:	00001c00 	andeq	r1, r0, r0, lsl #24
    2890:	609c0100 	addsvs	r0, ip, r0, lsl #2
    2894:	15000004 	strne	r0, [r0, #-4]
    2898:	00001344 	andeq	r1, r0, r4, asr #6
    289c:	5e012c01 	cdppl	12, 0, cr2, cr1, cr1, {0}
    28a0:	b0000000 	andlt	r0, r0, r0
    28a4:	0000000a 	andeq	r0, r0, sl
    28a8:	00076314 	andeq	r6, r7, r4, lsl r3
    28ac:	01370100 	teqeq	r7, r0, lsl #2
    28b0:	08000d90 	stmdaeq	r0, {r4, r7, r8, sl, fp}
    28b4:	0000001c 	andeq	r0, r0, ip, lsl r0
    28b8:	04879c01 	streq	r9, [r7], #3073	; 0xc01
    28bc:	44150000 	ldrmi	r0, [r5], #-0
    28c0:	01000013 	tsteq	r0, r3, lsl r0
    28c4:	005e0137 	subseq	r0, lr, r7, lsr r1
    28c8:	0ad10000 	beq	ff4428d0 <BootRAM+0xe3b3071>
    28cc:	14000000 	strne	r0, [r0], #-0
    28d0:	000012e1 	andeq	r1, r0, r1, ror #5
    28d4:	00014201 	andeq	r4, r1, r1, lsl #4
    28d8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    28dc:	01000000 	mrseq	r0, (UNDEF: 0)
    28e0:	0004ae9c 	muleq	r4, ip, lr
    28e4:	13441500 	movtne	r1, #17664	; 0x4500
    28e8:	42010000 	andmi	r0, r1, #0
    28ec:	00005e01 	andeq	r5, r0, r1, lsl #28
    28f0:	000af200 	andeq	pc, sl, r0, lsl #4
    28f4:	73140000 	tstvc	r4, #0
    28f8:	01000011 	tsteq	r0, r1, lsl r0
    28fc:	0000014d 	andeq	r0, r0, sp, asr #2
    2900:	001e0000 	andseq	r0, lr, r0
    2904:	9c010000 	stcls	0, cr0, [r1], {-0}
    2908:	000004d5 	ldrdeq	r0, [r0], -r5
    290c:	00134415 	andseq	r4, r3, r5, lsl r4
    2910:	014d0100 	mrseq	r0, (UNDEF: 93)
    2914:	0000005e 	andeq	r0, r0, lr, asr r0
    2918:	00000b13 	andeq	r0, r0, r3, lsl fp
    291c:	11961400 	orrsne	r1, r6, r0, lsl #8
    2920:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    2924:	00000001 	andeq	r0, r0, r1
    2928:	00001c00 	andeq	r1, r0, r0, lsl #24
    292c:	fc9c0100 	ldc2	1, cr0, [ip], {0}
    2930:	15000004 	strne	r0, [r0, #-4]
    2934:	00001344 	andeq	r1, r0, r4, asr #6
    2938:	5e015801 	cdppl	8, 0, cr5, cr1, cr1, {0}
    293c:	34000000 	strcc	r0, [r0], #-0
    2940:	0000000b 	andeq	r0, r0, fp
    2944:	000fd917 	andeq	sp, pc, r7, lsl r9	; <UNPREDICTABLE>
    2948:	01630100 	cmneq	r3, r0, lsl #2
    294c:	0000004c 	andeq	r0, r0, ip, asr #32
    2950:	00000000 	andeq	r0, r0, r0
    2954:	0000001a 	andeq	r0, r0, sl, lsl r0
    2958:	05279c01 	streq	r9, [r7, #-3073]!	; 0xc01
    295c:	44150000 	ldrmi	r0, [r5], #-0
    2960:	01000013 	tsteq	r0, r3, lsl r0
    2964:	005e0163 	subseq	r0, lr, r3, ror #2
    2968:	0b550000 	bleq	1542970 <__Stack_Size+0x1542570>
    296c:	17000000 	strne	r0, [r0, -r0]
    2970:	0000108b 	andeq	r1, r0, fp, lsl #1
    2974:	4c016e01 	stcmi	14, cr6, [r1], {1}
    2978:	00000000 	andeq	r0, r0, r0
    297c:	1a000000 	bne	2984 <__Stack_Size+0x2584>
    2980:	01000000 	mrseq	r0, (UNDEF: 0)
    2984:	0005529c 	muleq	r5, ip, r2
    2988:	13441500 	movtne	r1, #17664	; 0x4500
    298c:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    2990:	00005e01 	andeq	r5, r0, r1, lsl #28
    2994:	000b7600 	andeq	r7, fp, r0, lsl #12
    2998:	c3140000 	tstgt	r4, #0
    299c:	01000011 	tsteq	r0, r1, lsl r0
    29a0:	00000179 	andeq	r0, r0, r9, ror r1
    29a4:	00180000 	andseq	r0, r8, r0
    29a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    29ac:	00000579 	andeq	r0, r0, r9, ror r5
    29b0:	00134415 	andseq	r4, r3, r5, lsl r4
    29b4:	01790100 	cmneq	r9, r0, lsl #2
    29b8:	0000005e 	andeq	r0, r0, lr, asr r0
    29bc:	00000b97 	muleq	r0, r7, fp
    29c0:	12a41400 	adcne	r1, r4, #0, 8
    29c4:	84010000 	strhi	r0, [r1], #-0
    29c8:	00000001 	andeq	r0, r0, r1
    29cc:	00001c00 	andeq	r1, r0, r0, lsl #24
    29d0:	a09c0100 	addsge	r0, ip, r0, lsl #2
    29d4:	15000005 	strne	r0, [r0, #-5]
    29d8:	00001344 	andeq	r1, r0, r4, asr #6
    29dc:	5e018401 	cdppl	4, 0, cr8, cr1, cr1, {0}
    29e0:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    29e4:	0000000b 	andeq	r0, r0, fp
    29e8:	0010c714 	andseq	ip, r0, r4, lsl r7
    29ec:	018f0100 	orreq	r0, pc, r0, lsl #2
    29f0:	00000000 	andeq	r0, r0, r0
    29f4:	00000020 	andeq	r0, r0, r0, lsr #32
    29f8:	05c79c01 	strbeq	r9, [r7, #3073]	; 0xc01
    29fc:	44150000 	ldrmi	r0, [r5], #-0
    2a00:	01000013 	tsteq	r0, r3, lsl r0
    2a04:	005e018f 	subseq	r0, lr, pc, lsl #3
    2a08:	0bd90000 	bleq	ff642a10 <BootRAM+0xe5b31b1>
    2a0c:	14000000 	strne	r0, [r0], #-0
    2a10:	00001037 	andeq	r1, r0, r7, lsr r0
    2a14:	00019a01 	andeq	r9, r1, r1, lsl #20
    2a18:	20000000 	andcs	r0, r0, r0
    2a1c:	01000000 	mrseq	r0, (UNDEF: 0)
    2a20:	0005ee9c 	muleq	r5, ip, lr
    2a24:	13441500 	movtne	r1, #17664	; 0x4500
    2a28:	9a010000 	bls	42a30 <__Stack_Size+0x42630>
    2a2c:	00005e01 	andeq	r5, r0, r1, lsl #28
    2a30:	000bfa00 	andeq	pc, fp, r0, lsl #20
    2a34:	76140000 	ldrvc	r0, [r4], -r0
    2a38:	01000010 	tsteq	r0, r0, lsl r0
    2a3c:	0dac01a5 	stfeqs	f0, [ip, #660]!	; 0x294
    2a40:	00200800 	eoreq	r0, r0, r0, lsl #16
    2a44:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a48:	00000615 	andeq	r0, r0, r5, lsl r6
    2a4c:	00134415 	andseq	r4, r3, r5, lsl r4
    2a50:	01a50100 			; <UNDEFINED> instruction: 0x01a50100
    2a54:	0000005e 	andeq	r0, r0, lr, asr r0
    2a58:	00000c1b 	andeq	r0, r0, fp, lsl ip
    2a5c:	13291400 	teqne	r9, #0, 8
    2a60:	b0010000 	andlt	r0, r1, r0
    2a64:	000dcc01 	andeq	ip, sp, r1, lsl #24
    2a68:	00002008 	andeq	r2, r0, r8
    2a6c:	3c9c0100 	ldfccs	f0, [ip], {0}
    2a70:	15000006 	strne	r0, [r0, #-6]
    2a74:	00001344 	andeq	r1, r0, r4, asr #6
    2a78:	5e01b001 	cdppl	0, 0, cr11, cr1, cr1, {0}
    2a7c:	3c000000 	stccc	0, cr0, [r0], {-0}
    2a80:	0000000c 	andeq	r0, r0, ip
    2a84:	0010ac14 	andseq	sl, r0, r4, lsl ip
    2a88:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
    2a8c:	00000000 	andeq	r0, r0, r0
    2a90:	0000001e 	andeq	r0, r0, lr, lsl r0
    2a94:	06739c01 	ldrbteq	r9, [r3], -r1, lsl #24
    2a98:	44150000 	ldrmi	r0, [r5], #-0
    2a9c:	01000013 	tsteq	r0, r3, lsl r0
    2aa0:	005e01bc 	ldrheq	r0, [lr], #-28	; 0xffffffe4
    2aa4:	0c5d0000 	mraeq	r0, sp, acc0
    2aa8:	5f150000 	svcpl	0x00150000
    2aac:	01000010 	tsteq	r0, r0, lsl r0
    2ab0:	005e01bc 	ldrheq	r0, [lr], #-28	; 0xffffffe4
    2ab4:	0c7e0000 	ldcleq	0, cr0, [lr], #-0
    2ab8:	17000000 	strne	r0, [r0, -r0]
    2abc:	00001045 	andeq	r1, r0, r5, asr #32
    2ac0:	5e01c701 	cdppl	7, 0, cr12, cr1, cr1, {0}
    2ac4:	00000000 	andeq	r0, r0, r0
    2ac8:	12000000 	andne	r0, r0, #0
    2acc:	01000000 	mrseq	r0, (UNDEF: 0)
    2ad0:	00069e9c 	muleq	r6, ip, lr
    2ad4:	13441500 	movtne	r1, #17664	; 0x4500
    2ad8:	c7010000 	strgt	r0, [r1, -r0]
    2adc:	00005e01 	andeq	r5, r0, r1, lsl #28
    2ae0:	000c9f00 	andeq	r9, ip, r0, lsl #30
    2ae4:	8a140000 	bhi	502aec <__Stack_Size+0x5026ec>
    2ae8:	01000011 	tsteq	r0, r1, lsl r0
    2aec:	000001d3 	ldrdeq	r0, [r0], -r3
    2af0:	00200000 	eoreq	r0, r0, r0
    2af4:	9c010000 	stcls	0, cr0, [r1], {-0}
    2af8:	000006d5 	ldrdeq	r0, [r0], -r5
    2afc:	00134415 	andseq	r4, r3, r5, lsl r4
    2b00:	01d30100 	bicseq	r0, r3, r0, lsl #2
    2b04:	0000005e 	andeq	r0, r0, lr, asr r0
    2b08:	00000cc0 	andeq	r0, r0, r0, asr #25
    2b0c:	00123115 	andseq	r3, r2, r5, lsl r1
    2b10:	01d30100 	bicseq	r0, r3, r0, lsl #2
    2b14:	0000004c 	andeq	r0, r0, ip, asr #32
    2b18:	00000ce1 	andeq	r0, r0, r1, ror #25
    2b1c:	13571400 	cmpne	r7, #0, 8
    2b20:	df010000 	svcle	0x00010000
    2b24:	00000001 	andeq	r0, r0, r1
    2b28:	00002000 	andeq	r2, r0, r0
    2b2c:	0c9c0100 	ldfeqs	f0, [ip], {0}
    2b30:	15000007 	strne	r0, [r0, #-7]
    2b34:	00001344 	andeq	r1, r0, r4, asr #6
    2b38:	5e01df01 	cdppl	15, 0, cr13, cr1, cr1, {0}
    2b3c:	02000000 	andeq	r0, r0, #0
    2b40:	1500000d 	strne	r0, [r0, #-13]
    2b44:	00001231 	andeq	r1, r0, r1, lsr r2
    2b48:	4c01df01 	stcmi	15, cr13, [r1], {1}
    2b4c:	23000000 	movwcs	r0, #0
    2b50:	0000000d 	andeq	r0, r0, sp
    2b54:	00131d17 	andseq	r1, r3, r7, lsl sp
    2b58:	01ea0100 	mvneq	r0, r0, lsl #2
    2b5c:	0000004c 	andeq	r0, r0, ip, asr #32
    2b60:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
    2b64:	0000001c 	andeq	r0, r0, ip, lsl r0
    2b68:	07379c01 	ldreq	r9, [r7, -r1, lsl #24]!
    2b6c:	44150000 	ldrmi	r0, [r5], #-0
    2b70:	01000013 	tsteq	r0, r3, lsl r0
    2b74:	005e01ea 	subseq	r0, lr, sl, ror #3
    2b78:	0d440000 	stcleq	0, cr0, [r4, #-0]
    2b7c:	17000000 	strne	r0, [r0, -r0]
    2b80:	00001100 	andeq	r1, r0, r0, lsl #2
    2b84:	4c01f501 	cfstr32mi	mvfx15, [r1], {1}
    2b88:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2b8c:	1c08000e 	stcne	0, cr0, [r8], {14}
    2b90:	01000000 	mrseq	r0, (UNDEF: 0)
    2b94:	0007629c 	muleq	r7, ip, r2
    2b98:	13441500 	movtne	r1, #17664	; 0x4500
    2b9c:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    2ba0:	00005e01 	andeq	r5, r0, r1, lsl #28
    2ba4:	000d6500 	andeq	r6, sp, r0, lsl #10
    2ba8:	ef140000 	svc	0x00140000
    2bac:	01000011 	tsteq	r0, r1, lsl r0
    2bb0:	0e240201 	cdpeq	2, 2, cr0, cr4, cr1, {0}
    2bb4:	001c0800 	andseq	r0, ip, r0, lsl #16
    2bb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2bbc:	00000797 	muleq	r0, r7, r7
    2bc0:	00134415 	andseq	r4, r3, r5, lsl r4
    2bc4:	02010100 	andeq	r0, r1, #0, 2
    2bc8:	0000005e 	andeq	r0, r0, lr, asr r0
    2bcc:	00000d86 	andeq	r0, r0, r6, lsl #27
    2bd0:	0010a518 	andseq	sl, r0, r8, lsl r5
    2bd4:	02010100 	andeq	r0, r1, #0, 2
    2bd8:	0000004c 	andeq	r0, r0, ip, asr #32
    2bdc:	14005101 	strne	r5, [r0], #-257	; 0x101
    2be0:	00001262 	andeq	r1, r0, r2, ror #4
    2be4:	00020d01 	andeq	r0, r2, r1, lsl #26
    2be8:	26000000 	strcs	r0, [r0], -r0
    2bec:	01000000 	mrseq	r0, (UNDEF: 0)
    2bf0:	0007e69c 	muleq	r7, ip, r6
    2bf4:	12521800 	subsne	r1, r2, #0, 16
    2bf8:	0d010000 	stceq	0, cr0, [r1, #-0]
    2bfc:	0007e602 	andeq	lr, r7, r2, lsl #12
    2c00:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    2c04:	000010a5 	andeq	r1, r0, r5, lsr #1
    2c08:	4c020d01 	stcmi	13, cr0, [r2], {1}
    2c0c:	a7000000 	strge	r0, [r0, -r0]
    2c10:	1000000d 	andne	r0, r0, sp
    2c14:	00000000 	andeq	r0, r0, r0
    2c18:	00000026 	andeq	r0, r0, r6, lsr #32
    2c1c:	00106d16 	andseq	r6, r0, r6, lsl sp
    2c20:	020f0100 	andeq	r0, pc, #0, 2
    2c24:	0000004c 	andeq	r0, r0, ip, asr #32
    2c28:	00000de1 	andeq	r0, r0, r1, ror #27
    2c2c:	04190000 	ldreq	r0, [r9], #-0
    2c30:	0000003a 	andeq	r0, r0, sl, lsr r0
    2c34:	00078d14 	andeq	r8, r7, r4, lsl sp
    2c38:	02190100 	andseq	r0, r9, #0, 2
    2c3c:	08000e40 	stmdaeq	r0, {r6, r9, sl, fp}
    2c40:	00000040 	andeq	r0, r0, r0, asr #32
    2c44:	08519c01 	ldmdaeq	r1, {r0, sl, fp, ip, pc}^
    2c48:	44150000 	ldrmi	r0, [r5], #-0
    2c4c:	01000013 	tsteq	r0, r3, lsl r0
    2c50:	005e0219 	subseq	r0, lr, r9, lsl r2
    2c54:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    2c58:	a5150000 	ldrge	r0, [r5, #-0]
    2c5c:	01000010 	tsteq	r0, r0, lsl r0
    2c60:	004c0219 	subeq	r0, ip, r9, lsl r2
    2c64:	0e2b0000 	cdpeq	0, 2, cr0, cr11, cr0, {0}
    2c68:	40100000 	andsmi	r0, r0, r0
    2c6c:	4008000e 	andmi	r0, r8, lr
    2c70:	1a000000 	bne	2c78 <__Stack_Size+0x2878>
    2c74:	00001252 	andeq	r1, r0, r2, asr r2
    2c78:	e6021b01 	str	r1, [r2], -r1, lsl #22
    2c7c:	01000007 	tsteq	r0, r7
    2c80:	02a01b52 	adceq	r1, r0, #83968	; 0x14800
    2c84:	6d160000 	ldcvs	0, cr0, [r6, #-0]
    2c88:	01000010 	tsteq	r0, r0, lsl r0
    2c8c:	004c021b 	subeq	r0, ip, fp, lsl r2
    2c90:	0e4c0000 	cdpeq	0, 4, cr0, cr12, cr0, {0}
    2c94:	00000000 	andeq	r0, r0, r0
    2c98:	12971700 	addsne	r1, r7, #0, 14
    2c9c:	24010000 	strcs	r0, [r1], #-0
    2ca0:	00004c02 	andeq	r4, r0, r2, lsl #24
    2ca4:	00000000 	andeq	r0, r0, r0
    2ca8:	00002000 	andeq	r2, r0, r0
    2cac:	7c9c0100 	ldfvcs	f0, [ip], {0}
    2cb0:	15000008 	strne	r0, [r0, #-8]
    2cb4:	00001344 	andeq	r1, r0, r4, asr #6
    2cb8:	5e022401 	cdppl	4, 0, cr2, cr2, cr1, {0}
    2cbc:	84000000 	strhi	r0, [r0], #-0
    2cc0:	0000000e 	andeq	r0, r0, lr
    2cc4:	00127217 	andseq	r7, r2, r7, lsl r2
    2cc8:	022f0100 	eoreq	r0, pc, #0, 2
    2ccc:	0000004c 	andeq	r0, r0, ip, asr #32
    2cd0:	00000000 	andeq	r0, r0, r0
    2cd4:	00000020 	andeq	r0, r0, r0, lsr #32
    2cd8:	08a79c01 	stmiaeq	r7!, {r0, sl, fp, ip, pc}
    2cdc:	44150000 	ldrmi	r0, [r5], #-0
    2ce0:	01000013 	tsteq	r0, r3, lsl r0
    2ce4:	005e022f 	subseq	r0, lr, pc, lsr #4
    2ce8:	0ea50000 	cdpeq	0, 10, cr0, cr5, cr0, {0}
    2cec:	14000000 	strne	r0, [r0], #-0
    2cf0:	000010d5 	ldrdeq	r1, [r0], -r5
    2cf4:	00023c01 	andeq	r3, r2, r1, lsl #24
    2cf8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2cfc:	01000000 	mrseq	r0, (UNDEF: 0)
    2d00:	0008ee9c 	muleq	r8, ip, lr
    2d04:	13441500 	movtne	r1, #17664	; 0x4500
    2d08:	3c010000 	stccc	0, cr0, [r1], {-0}
    2d0c:	00005e02 	andeq	r5, r0, r2, lsl #28
    2d10:	000ec600 	andeq	ip, lr, r0, lsl #12
    2d14:	12d71500 	sbcsne	r1, r7, #0, 10
    2d18:	3c010000 	stccc	0, cr0, [r1], {-0}
    2d1c:	00004c02 	andeq	r4, r0, r2, lsl #24
    2d20:	000ee700 	andeq	lr, lr, r0, lsl #14
    2d24:	11641500 	cmnne	r4, r0, lsl #10
    2d28:	3c010000 	stccc	0, cr0, [r1], {-0}
    2d2c:	00004c02 	andeq	r4, r0, r2, lsl #24
    2d30:	000f0800 	andeq	r0, pc, r0, lsl #16
    2d34:	0c140000 	ldceq	0, cr0, [r4], {-0}
    2d38:	01000011 	tsteq	r0, r1, lsl r0
    2d3c:	00000248 	andeq	r0, r0, r8, asr #4
    2d40:	00200000 	eoreq	r0, r0, r0
    2d44:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d48:	00000925 	andeq	r0, r0, r5, lsr #18
    2d4c:	00134415 	andseq	r4, r3, r5, lsl r4
    2d50:	02480100 	subeq	r0, r8, #0, 2
    2d54:	0000005e 	andeq	r0, r0, lr, asr r0
    2d58:	00000f29 	andeq	r0, r0, r9, lsr #30
    2d5c:	0012d715 	andseq	sp, r2, r5, lsl r7
    2d60:	02480100 	subeq	r0, r8, #0, 2
    2d64:	0000004c 	andeq	r0, r0, ip, asr #32
    2d68:	00000f4a 	andeq	r0, r0, sl, asr #30
    2d6c:	0fea1400 	svceq	0x00ea1400
    2d70:	54010000 	strpl	r0, [r1], #-0
    2d74:	00000002 	andeq	r0, r0, r2
    2d78:	00002000 	andeq	r2, r0, r0
    2d7c:	5c9c0100 	ldfpls	f0, [ip], {0}
    2d80:	15000009 	strne	r0, [r0, #-9]
    2d84:	00001344 	andeq	r1, r0, r4, asr #6
    2d88:	5e025401 	cdppl	4, 0, cr5, cr2, cr1, {0}
    2d8c:	6b000000 	blvs	2d94 <__Stack_Size+0x2994>
    2d90:	1500000f 	strne	r0, [r0, #-15]
    2d94:	00001164 	andeq	r1, r0, r4, ror #2
    2d98:	4c025401 	cfstrsmi	mvf5, [r2], {1}
    2d9c:	8c000000 	stchi	0, cr0, [r0], {-0}
    2da0:	0000000f 	andeq	r0, r0, pc
    2da4:	0012f717 	andseq	pc, r2, r7, lsl r7	; <UNPREDICTABLE>
    2da8:	025f0100 	subseq	r0, pc, #0, 2
    2dac:	0000004c 	andeq	r0, r0, ip, asr #32
    2db0:	00000000 	andeq	r0, r0, r0
    2db4:	0000001c 	andeq	r0, r0, ip, lsl r0
    2db8:	09879c01 	stmibeq	r7, {r0, sl, fp, ip, pc}
    2dbc:	44150000 	ldrmi	r0, [r5], #-0
    2dc0:	01000013 	tsteq	r0, r3, lsl r0
    2dc4:	005e025f 	subseq	r0, lr, pc, asr r2
    2dc8:	0fad0000 	svceq	0x00ad0000
    2dcc:	17000000 	strne	r0, [r0, -r0]
    2dd0:	000011a8 	andeq	r1, r0, r8, lsr #3
    2dd4:	4c026a01 	stcmi	10, cr6, [r2], {1}
    2dd8:	00000000 	andeq	r0, r0, r0
    2ddc:	1c000000 	stcne	0, cr0, [r0], {-0}
    2de0:	01000000 	mrseq	r0, (UNDEF: 0)
    2de4:	0009b29c 	muleq	r9, ip, r2
    2de8:	13441500 	movtne	r1, #17664	; 0x4500
    2dec:	6a010000 	bvs	42df4 <__Stack_Size+0x429f4>
    2df0:	00005e02 	andeq	r5, r0, r2, lsl #28
    2df4:	000fce00 	andeq	ip, pc, r0, lsl #28
    2df8:	d2140000 	andsle	r0, r4, #0
    2dfc:	01000011 	tsteq	r0, r1, lsl r0
    2e00:	00000276 	andeq	r0, r0, r6, ror r2
    2e04:	00a80000 	adceq	r0, r8, r0
    2e08:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e0c:	00000a59 	andeq	r0, r0, r9, asr sl
    2e10:	00134415 	andseq	r4, r3, r5, lsl r4
    2e14:	02760100 	rsbseq	r0, r6, #0, 2
    2e18:	0000005e 	andeq	r0, r0, lr, asr r0
    2e1c:	00000fef 	andeq	r0, r0, pc, ror #31
    2e20:	00112b15 	andseq	r2, r1, r5, lsl fp
    2e24:	02760100 	rsbseq	r0, r6, #0, 2
    2e28:	0000005e 	andeq	r0, r0, lr, asr r0
    2e2c:	00001034 	andeq	r1, r0, r4, lsr r0
    2e30:	0010a515 	andseq	sl, r0, r5, lsl r5
    2e34:	02760100 	rsbseq	r0, r6, #0, 2
    2e38:	0000004c 	andeq	r0, r0, ip, asr #32
    2e3c:	00001079 	andeq	r1, r0, r9, ror r0
    2e40:	0000001c 	andeq	r0, r0, ip, lsl r0
    2e44:	00003a00 	andeq	r3, r0, r0, lsl #20
    2e48:	000a2c00 	andeq	r2, sl, r0, lsl #24
    2e4c:	12521600 	subsne	r1, r2, #0, 12
    2e50:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2e54:	0007e602 	andeq	lr, r7, r2, lsl #12
    2e58:	0010a500 	andseq	sl, r0, r0, lsl #10
    2e5c:	02b81b00 	adcseq	r1, r8, #0, 22
    2e60:	6d160000 	ldcvs	0, cr0, [r6, #-0]
    2e64:	01000010 	tsteq	r0, r0, lsl r0
    2e68:	004c0278 	subeq	r0, ip, r8, ror r2
    2e6c:	10c30000 	sbcne	r0, r3, r0
    2e70:	00000000 	andeq	r0, r0, r0
    2e74:	0002d01b 	andeq	sp, r2, fp, lsl r0
    2e78:	12521600 	subsne	r1, r2, #0, 12
    2e7c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2e80:	0007e602 	andeq	lr, r7, r2, lsl #12
    2e84:	0010fb00 	andseq	pc, r0, r0, lsl #22
    2e88:	02e81b00 	rsceq	r1, r8, #0, 22
    2e8c:	6d160000 	ldcvs	0, cr0, [r6, #-0]
    2e90:	01000010 	tsteq	r0, r0, lsl r0
    2e94:	004c0278 	subeq	r0, ip, r8, ror r2
    2e98:	11190000 	tstne	r9, r0
    2e9c:	00000000 	andeq	r0, r0, r0
    2ea0:	12c51400 	sbcne	r1, r5, #0, 8
    2ea4:	82010000 	andhi	r0, r1, #0
    2ea8:	00000002 	andeq	r0, r0, r2
    2eac:	00005c00 	andeq	r5, r0, r0, lsl #24
    2eb0:	d09c0100 	addsle	r0, ip, r0, lsl #2
    2eb4:	1500000a 	strne	r0, [r0, #-10]
    2eb8:	00001344 	andeq	r1, r0, r4, asr #6
    2ebc:	5e028201 	cdppl	2, 0, cr8, cr2, cr1, {0}
    2ec0:	51000000 	mrspl	r0, (UNDEF: 0)
    2ec4:	15000011 	strne	r0, [r0, #-17]
    2ec8:	0000112b 	andeq	r1, r0, fp, lsr #2
    2ecc:	5e028201 	cdppl	2, 0, cr8, cr2, cr1, {0}
    2ed0:	8b000000 	blhi	2ed8 <__Stack_Size+0x2ad8>
    2ed4:	15000011 	strne	r0, [r0, #-17]
    2ed8:	000010a5 	andeq	r1, r0, r5, lsr #1
    2edc:	4c028201 	sfmmi	f0, 1, [r2], {1}
    2ee0:	b7000000 	strlt	r0, [r0, -r0]
    2ee4:	10000011 	andne	r0, r0, r1, lsl r0
    2ee8:	00000000 	andeq	r0, r0, r0
    2eec:	00000038 	andeq	r0, r0, r8, lsr r0
    2ef0:	00125216 	andseq	r5, r2, r6, lsl r2
    2ef4:	02840100 	addeq	r0, r4, #0, 2
    2ef8:	000007e6 	andeq	r0, r0, r6, ror #15
    2efc:	000011e3 	andeq	r1, r0, r3, ror #3
    2f00:	0003081b 	andeq	r0, r3, fp, lsl r8
    2f04:	106d1600 	rsbne	r1, sp, r0, lsl #12
    2f08:	84010000 	strhi	r0, [r1], #-0
    2f0c:	00004c02 	andeq	r4, r0, r2, lsl #24
    2f10:	0011f600 	andseq	pc, r1, r0, lsl #12
    2f14:	00000000 	andeq	r0, r0, r0
    2f18:	00136314 	andseq	r6, r3, r4, lsl r3
    2f1c:	028e0100 	addeq	r0, lr, #0, 2
    2f20:	00000000 	andeq	r0, r0, r0
    2f24:	0000005c 	andeq	r0, r0, ip, asr r0
    2f28:	0b479c01 	bleq	11e9f34 <__Stack_Size+0x11e9b34>
    2f2c:	44150000 	ldrmi	r0, [r5], #-0
    2f30:	01000013 	tsteq	r0, r3, lsl r0
    2f34:	005e028e 	subseq	r0, lr, lr, lsl #5
    2f38:	122e0000 	eorne	r0, lr, #0
    2f3c:	2b150000 	blcs	542f44 <__Stack_Size+0x542b44>
    2f40:	01000011 	tsteq	r0, r1, lsl r0
    2f44:	005e028e 	subseq	r0, lr, lr, lsl #5
    2f48:	12680000 	rsbne	r0, r8, #0
    2f4c:	a5150000 	ldrge	r0, [r5, #-0]
    2f50:	01000010 	tsteq	r0, r0, lsl r0
    2f54:	004c028e 	subeq	r0, ip, lr, lsl #5
    2f58:	12940000 	addsne	r0, r4, #0
    2f5c:	00100000 	andseq	r0, r0, r0
    2f60:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2f64:	16000000 	strne	r0, [r0], -r0
    2f68:	00001252 	andeq	r1, r0, r2, asr r2
    2f6c:	e6029001 	str	r9, [r2], -r1
    2f70:	c0000007 	andgt	r0, r0, r7
    2f74:	1b000012 	blne	2fc4 <__Stack_Size+0x2bc4>
    2f78:	00000320 	andeq	r0, r0, r0, lsr #6
    2f7c:	00106d16 	andseq	r6, r0, r6, lsl sp
    2f80:	02900100 	addseq	r0, r0, #0, 2
    2f84:	0000004c 	andeq	r0, r0, ip, asr #32
    2f88:	000012d3 	ldrdeq	r1, [r0], -r3
    2f8c:	17000000 	strne	r0, [r0, -r0]
    2f90:	00001237 	andeq	r1, r0, r7, lsr r2
    2f94:	4c029a01 	stcmi	10, cr9, [r2], {1}
    2f98:	00000000 	andeq	r0, r0, r0
    2f9c:	20000000 	andcs	r0, r0, r0
    2fa0:	01000000 	mrseq	r0, (UNDEF: 0)
    2fa4:	000b729c 	muleq	fp, ip, r2
    2fa8:	13441500 	movtne	r1, #17664	; 0x4500
    2fac:	9a010000 	bls	42fb4 <__Stack_Size+0x42bb4>
    2fb0:	00005e02 	andeq	r5, r0, r2, lsl #28
    2fb4:	00130b00 	andseq	r0, r3, r0, lsl #22
    2fb8:	b3170000 	tstlt	r7, #0
    2fbc:	01000012 	tsteq	r0, r2, lsl r0
    2fc0:	004c02a6 	subeq	r0, ip, r6, lsr #5
    2fc4:	00000000 	andeq	r0, r0, r0
    2fc8:	00200000 	eoreq	r0, r0, r0
    2fcc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2fd0:	00000b9d 	muleq	r0, sp, fp
    2fd4:	00134415 	andseq	r4, r3, r5, lsl r4
    2fd8:	02a60100 	adceq	r0, r6, #0, 2
    2fdc:	0000005e 	andeq	r0, r0, lr, asr r0
    2fe0:	0000132c 	andeq	r1, r0, ip, lsr #6
    2fe4:	11551700 	cmpne	r5, r0, lsl #14
    2fe8:	b2010000 	andlt	r0, r1, #0
    2fec:	00008e02 	andeq	r8, r0, r2, lsl #28
    2ff0:	00000000 	andeq	r0, r0, r0
    2ff4:	00004400 	andeq	r4, r0, r0, lsl #8
    2ff8:	c89c0100 	ldmgt	ip, {r8}
    2ffc:	1500000b 	strne	r0, [r0, #-11]
    3000:	00001344 	andeq	r1, r0, r4, asr #6
    3004:	5e02b201 	cdppl	2, 0, cr11, cr2, cr1, {0}
    3008:	4d000000 	stcmi	0, cr0, [r0, #-0]
    300c:	00000013 	andeq	r0, r0, r3, lsl r0
    3010:	000fca14 	andeq	ip, pc, r4, lsl sl	; <UNPREDICTABLE>
    3014:	02c30100 	sbceq	r0, r3, #0, 2
    3018:	00000000 	andeq	r0, r0, r0
    301c:	0000003a 	andeq	r0, r0, sl, lsr r0
    3020:	0bfd9c01 	bleq	fff6a02c <BootRAM+0xeeda7cd>
    3024:	44150000 	ldrmi	r0, [r5], #-0
    3028:	01000013 	tsteq	r0, r3, lsl r0
    302c:	005e02c3 	subseq	r0, lr, r3, asr #5
    3030:	136e0000 	cmnne	lr, #0
    3034:	2b180000 	blcs	60303c <__Stack_Size+0x602c3c>
    3038:	01000011 	tsteq	r0, r1, lsl r0
    303c:	005e02c3 	subseq	r0, lr, r3, asr #5
    3040:	51010000 	mrspl	r0, (UNDEF: 1)
    3044:	11831700 	orrne	r1, r3, r0, lsl #14
    3048:	d6010000 	strle	r0, [r1], -r0
    304c:	00004c02 	andeq	r4, r0, r2, lsl #24
    3050:	00000000 	andeq	r0, r0, r0
    3054:	00000600 	andeq	r0, r0, r0, lsl #12
    3058:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    305c:	1d00000c 	stcne	0, cr0, [r0, #-48]	; 0xffffffd0
    3060:	01006862 	tsteq	r0, r2, ror #16
    3064:	005e02d6 	ldrsbeq	r0, [lr], #-38	; 0xffffffda
    3068:	13a80000 			; <UNDEFINED> instruction: 0x13a80000
    306c:	621e0000 	andsvs	r0, lr, #0
    3070:	d601006c 	strle	r0, [r1], -ip, rrx
    3074:	00005e02 	andeq	r5, r0, r2, lsl #28
    3078:	16510100 	ldrbne	r0, [r1], -r0, lsl #2
    307c:	000010fb 	strdeq	r1, [r0], -fp
    3080:	4c02d801 	stcmi	8, cr13, [r2], {1}
    3084:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    3088:	00000013 	andeq	r0, r0, r3, lsl r0
    308c:	0012591f 	andseq	r5, r2, pc, lsl r9
    3090:	02e30100 	rsceq	r0, r3, #0, 2
    3094:	0000004c 	andeq	r0, r0, ip, asr #32
    3098:	00000000 	andeq	r0, r0, r0
    309c:	0000000a 	andeq	r0, r0, sl
    30a0:	6e159c01 	cdpvs	12, 1, cr9, cr5, cr1, {0}
    30a4:	01000011 	tsteq	r0, r1, lsl r0
    30a8:	004c02e3 	subeq	r0, ip, r3, ror #5
    30ac:	14020000 	strne	r0, [r2], #-0
    30b0:	7f160000 	svcvc	0x00160000
    30b4:	01000012 	tsteq	r0, r2, lsl r0
    30b8:	005e02e5 	subseq	r0, lr, r5, ror #5
    30bc:	14230000 	strtne	r0, [r3], #-0
    30c0:	fb160000 	blx	5830ca <__Stack_Size+0x582cca>
    30c4:	01000010 	tsteq	r0, r0, lsl r0
    30c8:	004c02e6 	subeq	r0, ip, r6, ror #5
    30cc:	14360000 	ldrtne	r0, [r6], #-0
    30d0:	00000000 	andeq	r0, r0, r0
    30d4:	000001d8 	ldrdeq	r0, [r0], -r8
    30d8:	0e610004 	cdpeq	0, 6, cr0, cr1, cr4, {0}
    30dc:	01040000 	mrseq	r0, (UNDEF: 4)
    30e0:	00000158 	andeq	r0, r0, r8, asr r1
    30e4:	0013a801 	andseq	sl, r3, r1, lsl #16
    30e8:	0007cd00 	andeq	ip, r7, r0, lsl #26
    30ec:	00051800 	andeq	r1, r5, r0, lsl #16
    30f0:	00000000 	andeq	r0, r0, r0
    30f4:	000f8e00 	andeq	r8, pc, r0, lsl #28
    30f8:	05040200 	streq	r0, [r4, #-512]	; 0x200
    30fc:	000001f6 	strdeq	r0, [r0], -r6
    3100:	98050202 	stmdals	r5, {r1, r9}
    3104:	02000006 	andeq	r0, r0, #6
    3108:	06440601 	strbeq	r0, [r4], -r1, lsl #12
    310c:	75030000 	strvc	r0, [r3, #-0]
    3110:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    3114:	00004524 	andeq	r4, r0, r4, lsr #10
    3118:	07040200 	streq	r0, [r4, -r0, lsl #4]
    311c:	0000037b 	andeq	r0, r0, fp, ror r3
    3120:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    3124:	57250200 	strpl	r0, [r5, -r0, lsl #4]!
    3128:	02000000 	andeq	r0, r0, #0
    312c:	03d70702 	bicseq	r0, r7, #524288	; 0x80000
    3130:	75030000 	strvc	r0, [r3, #-0]
    3134:	26020038 			; <UNDEFINED> instruction: 0x26020038
    3138:	00000068 	andeq	r0, r0, r8, rrx
    313c:	42080102 	andmi	r0, r8, #-2147483648	; 0x80000000
    3140:	04000006 	streq	r0, [r0], #-6
    3144:	006f0405 	rsbeq	r0, pc, r5, lsl #8
    3148:	8d060000 	stchi	0, cr0, [r6, #-0]
    314c:	01000003 	tsteq	r0, r3
    3150:	000e8029 	andeq	r8, lr, r9, lsr #32
    3154:	00015408 	andeq	r5, r1, r8, lsl #8
    3158:	2a9c0100 	bcs	fe703560 <BootRAM+0xd673d01>
    315c:	07000001 	streq	r0, [r0, -r1]
    3160:	000013a1 	andeq	r1, r0, r1, lsr #7
    3164:	003a2b01 	eorseq	r2, sl, r1, lsl #22
    3168:	14550000 	ldrbne	r0, [r5], #-0
    316c:	bc080000 	stclt	0, cr0, [r8], {-0}
    3170:	1208000e 	andne	r0, r8, #14
    3174:	b7000000 	strlt	r0, [r0, -r0]
    3178:	07000000 	streq	r0, [r0, -r0]
    317c:	0000045b 	andeq	r0, r0, fp, asr r4
    3180:	004c3c01 	subeq	r3, ip, r1, lsl #24
    3184:	14c50000 	strbne	r0, [r5], #0
    3188:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    318c:	08000ece 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, fp}
    3190:	00000012 	andeq	r0, r0, r2, lsl r0
    3194:	000000d4 	ldrdeq	r0, [r0], -r4
    3198:	00045b07 	andeq	r5, r4, r7, lsl #22
    319c:	4c3d0100 	ldfmis	f0, [sp], #-0
    31a0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    31a4:	00000015 	andeq	r0, r0, r5, lsl r0
    31a8:	000f2208 	andeq	r2, pc, r8, lsl #4
    31ac:	00002208 	andeq	r2, r0, r8, lsl #4
    31b0:	0000f100 	andeq	pc, r0, r0, lsl #2
    31b4:	045b0700 	ldrbeq	r0, [fp], #-1792	; 0x700
    31b8:	72010000 	andvc	r0, r1, #0
    31bc:	0000004c 	andeq	r0, r0, ip, asr #32
    31c0:	00001583 	andeq	r1, r0, r3, lsl #11
    31c4:	0f440800 	svceq	0x00440800
    31c8:	00200800 	eoreq	r0, r0, r0, lsl #16
    31cc:	010e0000 	mrseq	r0, (UNDEF: 14)
    31d0:	5b070000 	blpl	1c31d8 <__Stack_Size+0x1c2dd8>
    31d4:	01000004 	tsteq	r0, r4
    31d8:	00004c73 	andeq	r4, r0, r3, ror ip
    31dc:	0015a400 	andseq	sl, r5, r0, lsl #8
    31e0:	fa090000 	blx	2431e8 <__Stack_Size+0x242de8>
    31e4:	ba08000e 	blt	203224 <__Stack_Size+0x202e24>
    31e8:	09000001 	stmdbeq	r0, {r0}
    31ec:	08000f0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl, fp}
    31f0:	000001c5 	andeq	r0, r0, r5, asr #3
    31f4:	000f2209 	andeq	r2, pc, r9, lsl #4
    31f8:	0001d008 	andeq	sp, r1, r8
    31fc:	75060000 	strvc	r0, [r6, #-0]
    3200:	01000013 	tsteq	r0, r3, lsl r0
    3204:	0000009e 	muleq	r0, lr, r0
    3208:	00007000 	andeq	r7, r0, r0
    320c:	4f9c0100 	svcmi	0x009c0100
    3210:	07000001 	streq	r0, [r0, -r1]
    3214:	000013a1 	andeq	r1, r0, r1, lsr #7
    3218:	003aa001 	eorseq	sl, sl, r1
    321c:	15b70000 	ldrne	r0, [r7, #0]!
    3220:	0a000000 	beq	3228 <__Stack_Size+0x2e28>
    3224:	00000230 	andeq	r0, r0, r0, lsr r2
    3228:	5b022a03 	blpl	8da3c <__Stack_Size+0x8d63c>
    322c:	0b000001 	bleq	3238 <__Stack_Size+0x2e38>
    3230:	0000004c 	andeq	r0, r0, ip, asr #32
    3234:	00138b0c 	andseq	r8, r3, ip, lsl #22
    3238:	4c170100 	ldfmis	f0, [r7], {-0}
    323c:	05000000 	streq	r0, [r0, #-0]
    3240:	0002da03 	andeq	sp, r2, r3, lsl #20
    3244:	13960c20 	orrsne	r0, r6, #32, 24	; 0x2000
    3248:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    324c:	0000004c 	andeq	r0, r0, ip, asr #32
    3250:	02dc0305 	sbcseq	r0, ip, #335544320	; 0x14000000
    3254:	d30d2000 	movwle	r2, #53248	; 0xd000
    3258:	04000013 	streq	r0, [r0], #-19
    325c:	00005e1d 	andeq	r5, r0, sp, lsl lr
    3260:	00700e00 	rsbseq	r0, r0, r0, lsl #28
    3264:	019d0000 	orrseq	r0, sp, r0
    3268:	9d0f0000 	stcls	0, cr0, [pc, #-0]	; 3270 <__Stack_Size+0x2e70>
    326c:	06000001 	streq	r0, [r0], -r1
    3270:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3274:	00000515 	andeq	r0, r0, r5, lsl r5
    3278:	0000320d 	andeq	r3, r0, sp, lsl #4
    327c:	8d1b0100 	ldfhis	f0, [fp, #-0]
    3280:	0d000001 	stceq	0, cr0, [r0, #-4]
    3284:	0000080f 	andeq	r0, r0, pc, lsl #16
    3288:	018d1c01 	orreq	r1, sp, r1, lsl #24
    328c:	ba100000 	blt	403294 <__Stack_Size+0x402e94>
    3290:	05000013 	streq	r0, [r0, #-19]
    3294:	00005edc 	ldrdeq	r5, [r0], -ip
    3298:	137c1000 	cmnne	ip, #0
    329c:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
    32a0:	0000005e 	andeq	r0, r0, lr, asr r0
    32a4:	0013c610 	andseq	ip, r3, r0, lsl r6
    32a8:	5edb0500 	cdppl	5, 13, cr0, cr11, cr0, {0}
    32ac:	00000000 	andeq	r0, r0, r0
    32b0:	000003f9 	strdeq	r0, [r0], -r9
    32b4:	0f3b0004 	svceq	0x003b0004
    32b8:	01040000 	mrseq	r0, (UNDEF: 4)
    32bc:	00000158 	andeq	r0, r0, r8, asr r1
    32c0:	0013e501 	andseq	lr, r3, r1, lsl #10
    32c4:	0007cd00 	andeq	ip, r7, r0, lsl #26
    32c8:	00053000 	andeq	r3, r5, r0
    32cc:	00000000 	andeq	r0, r0, r0
    32d0:	00104600 	andseq	r4, r0, r0, lsl #12
    32d4:	05040200 	streq	r0, [r4, #-512]	; 0x200
    32d8:	000001f6 	strdeq	r0, [r0], -r6
    32dc:	98050202 	stmdals	r5, {r1, r9}
    32e0:	02000006 	andeq	r0, r0, #6
    32e4:	06440601 	strbeq	r0, [r4], -r1, lsl #12
    32e8:	04020000 	streq	r0, [r2], #-0
    32ec:	00037b07 	andeq	r7, r3, r7, lsl #22
    32f0:	31750300 	cmncc	r5, r0, lsl #6
    32f4:	25020036 	strcs	r0, [r2, #-54]	; 0x36
    32f8:	0000004c 	andeq	r0, r0, ip, asr #32
    32fc:	d7070202 	strle	r0, [r7, -r2, lsl #4]
    3300:	03000003 	movweq	r0, #3
    3304:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    3308:	00005d26 	andeq	r5, r0, r6, lsr #26
    330c:	08010200 	stmdaeq	r1, {r9}
    3310:	00000642 	andeq	r0, r0, r2, asr #12
    3314:	00530404 	subseq	r0, r3, r4, lsl #8
    3318:	35050000 	strcc	r0, [r5, #-0]
    331c:	01000007 	tsteq	r0, r7
    3320:	008f2d03 	addeq	r2, pc, r3, lsl #26
    3324:	f6060000 			; <UNDEFINED> instruction: 0xf6060000
    3328:	00000008 	andeq	r0, r0, r8
    332c:	0003ea06 	andeq	lr, r3, r6, lsl #20
    3330:	74060100 	strvc	r0, [r6], #-256	; 0x100
    3334:	02000007 	andeq	r0, r0, #7
    3338:	00022206 	andeq	r2, r2, r6, lsl #4
    333c:	07000300 	streq	r0, [r0, -r0, lsl #6]
    3340:	00000736 	andeq	r0, r0, r6, lsr r7
    3344:	006a3403 	rsbeq	r3, sl, r3, lsl #8
    3348:	1b080000 	blne	203350 <__Stack_Size+0x202f50>
    334c:	0c000009 	stceq	0, cr0, [r0], {9}
    3350:	00d73803 	sbcseq	r3, r7, r3, lsl #16
    3354:	90090000 	andls	r0, r9, r0
    3358:	03000002 	movweq	r0, #2
    335c:	00004150 	andeq	r4, r0, r0, asr r1
    3360:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    3364:	03000003 	movweq	r0, #3
    3368:	00004151 	andeq	r4, r0, r1, asr r1
    336c:	b1090200 	mrslt	r0, R9_fiq
    3370:	03000015 	movweq	r0, #21
    3374:	00004152 	andeq	r4, r0, r2, asr r1
    3378:	e3090400 	movw	r0, #37888	; 0x9400
    337c:	03000000 	movweq	r0, #0
    3380:	0000e653 	andeq	lr, r0, r3, asr r6
    3384:	0a000800 	beq	538c <__Stack_Size+0x4f8c>
    3388:	00000064 	andeq	r0, r0, r4, rrx
    338c:	000000e6 	andeq	r0, r0, r6, ror #1
    3390:	0000410b 	andeq	r4, r0, fp, lsl #2
    3394:	04040000 	streq	r0, [r4], #-0
    3398:	000000d7 	ldrdeq	r0, [r0], -r7
    339c:	00091c07 	andeq	r1, r9, r7, lsl #24
    33a0:	9a540300 	bls	1503fa8 <__Stack_Size+0x1503ba8>
    33a4:	0c000000 	stceq	0, cr0, [r0], {-0}
    33a8:	02005742 	andeq	r5, r0, #17301504	; 0x1080000
    33ac:	011b6203 	tsteq	fp, r3, lsl #4
    33b0:	620d0000 	andvs	r0, sp, #0
    33b4:	03003062 	movweq	r3, #98	; 0x62
    33b8:	00005365 	andeq	r5, r0, r5, ror #6
    33bc:	620d0000 	andvs	r0, sp, #0
    33c0:	03003162 	movweq	r3, #354	; 0x162
    33c4:	00005366 	andeq	r5, r0, r6, ror #6
    33c8:	0e000100 	adfeqs	f0, f0, f0
    33cc:	375f0302 	ldrbcc	r0, [pc, -r2, lsl #6]
    33d0:	0f000001 	svceq	0x00000001
    33d4:	61030077 	tstvs	r3, r7, ror r0
    33d8:	00000041 	andeq	r0, r0, r1, asr #32
    33dc:	0077620f 	rsbseq	r6, r7, pc, lsl #4
    33e0:	00f76803 	rscseq	r6, r7, r3, lsl #16
    33e4:	07000000 	streq	r0, [r0, -r0]
    33e8:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    33ec:	011b6903 	tsteq	fp, r3, lsl #18
    33f0:	3c080000 	stccc	0, cr0, [r8], {-0}
    33f4:	1c000000 	stcne	0, cr0, [r0], {-0}
    33f8:	01d36b03 	bicseq	r6, r3, r3, lsl #22
    33fc:	50090000 	andpl	r0, r9, r0
    3400:	03000005 	movweq	r0, #5
    3404:	0000536d 	andeq	r5, r0, sp, ror #6
    3408:	16090000 	strne	r0, [r9], -r0
    340c:	03000002 	movweq	r0, #2
    3410:	0000536e 	andeq	r5, r0, lr, ror #6
    3414:	18090100 	stmdane	r9, {r8}
    3418:	03000004 	movweq	r0, #4
    341c:	0001376f 	andeq	r3, r1, pc, ror #14
    3420:	48090200 	stmdami	r9, {r9}
    3424:	03000001 	movweq	r0, #1
    3428:	00013770 	andeq	r3, r1, r0, ror r7
    342c:	3d090400 	cfstrscc	mvf0, [r9, #-0]
    3430:	03000008 	movweq	r0, #8
    3434:	00013771 	andeq	r3, r1, r1, ror r7
    3438:	49090600 	stmdbmi	r9, {r9, sl}
    343c:	03000009 	movweq	r0, #9
    3440:	00005373 	andeq	r5, r0, r3, ror r3
    3444:	a0090800 	andge	r0, r9, r0, lsl #16
    3448:	03000003 	movweq	r0, #3
    344c:	00005374 	andeq	r5, r0, r4, ror r3
    3450:	a1090900 	tstge	r9, r0, lsl #18
    3454:	03000004 	movweq	r0, #4
    3458:	00005375 	andeq	r5, r0, r5, ror r3
    345c:	92090a00 	andls	r0, r9, #0, 20
    3460:	03000008 	movweq	r0, #8
    3464:	00005376 	andeq	r5, r0, r6, ror r3
    3468:	1c090b00 	stcne	11, cr0, [r9], {-0}
    346c:	03000006 	movweq	r0, #6
    3470:	00005377 	andeq	r5, r0, r7, ror r3
    3474:	13090c00 	movwne	r0, #39936	; 0x9c00
    3478:	03000007 	movweq	r0, #7
    347c:	0000ec7a 	andeq	lr, r0, sl, ror ip
    3480:	07001000 	streq	r1, [r0, -r0]
    3484:	0000003d 	andeq	r0, r0, sp, lsr r0
    3488:	01427b03 	cmpeq	r2, r3, lsl #22
    348c:	42080000 	andmi	r0, r8, #0
    3490:	34000007 	strcc	r0, [r0], #-7
    3494:	02877d03 	addeq	r7, r7, #3, 26	; 0xc0
    3498:	3d090000 	stccc	0, cr0, [r9, #-0]
    349c:	03000005 	movweq	r0, #5
    34a0:	0002887f 	andeq	r8, r2, pc, ror r8
    34a4:	c7090000 	strgt	r0, [r9, -r0]
    34a8:	03000003 	movweq	r0, #3
    34ac:	00028880 	andeq	r8, r2, r0, lsl #17
    34b0:	9a090400 	bls	2444b8 <__Stack_Size+0x2440b8>
    34b4:	03000007 	movweq	r0, #7
    34b8:	00028883 	andeq	r8, r2, r3, lsl #17
    34bc:	ac090800 	stcge	8, cr0, [r9], {-0}
    34c0:	03000007 	movweq	r0, #7
    34c4:	00028884 	andeq	r8, r2, r4, lsl #17
    34c8:	1e090c00 	cdpne	12, 0, cr0, cr9, cr0, {0}
    34cc:	03000005 	movweq	r0, #5
    34d0:	00029d96 	muleq	r2, r6, sp
    34d4:	f7091000 			; <UNDEFINED> instruction: 0xf7091000
    34d8:	03000006 	movweq	r0, #6
    34dc:	00029da1 	andeq	r9, r2, r1, lsr #27
    34e0:	e8091400 	stmda	r9, {sl, ip}
    34e4:	03000004 	movweq	r0, #4
    34e8:	0002b7ab 	andeq	fp, r2, fp, lsr #15
    34ec:	34091800 	strcc	r1, [r9], #-2048	; 0x800
    34f0:	03000001 	movweq	r0, #1
    34f4:	0000e6ad 	andeq	lr, r0, sp, lsr #13
    34f8:	02091c00 	andeq	r1, r9, #0, 24
    34fc:	03000002 	movweq	r0, #2
    3500:	0000e6ae 	andeq	lr, r0, lr, lsr #13
    3504:	4c092000 	stcmi	0, cr2, [r9], {-0}
    3508:	03000008 	movweq	r0, #8
    350c:	0000e6af 	andeq	lr, r0, pc, lsr #13
    3510:	04092400 	streq	r2, [r9], #-1024	; 0x400
    3514:	03000006 	movweq	r0, #6
    3518:	0000e6b0 			; <UNDEFINED> instruction: 0x0000e6b0
    351c:	7b092800 	blvc	24d524 <__Stack_Size+0x24d124>
    3520:	03000005 	movweq	r0, #5
    3524:	000064b2 			; <UNDEFINED> instruction: 0x000064b2
    3528:	ae092c00 	cdpge	12, 0, cr2, cr9, cr0, {0}
    352c:	03000015 	movweq	r0, #21
    3530:	000053b3 			; <UNDEFINED> instruction: 0x000053b3
    3534:	10003000 	andne	r3, r0, r0
    3538:	02870404 	addeq	r0, r7, #4, 8	; 0x4000000
    353c:	8f0a0000 	svchi	0x000a0000
    3540:	9d000000 	stcls	0, cr0, [r0, #-0]
    3544:	0b000002 	bleq	3554 <__Stack_Size+0x3154>
    3548:	00000053 	andeq	r0, r0, r3, asr r0
    354c:	8e040400 	cfcpyshi	mvf0, mvf4
    3550:	0a000002 	beq	3560 <__Stack_Size+0x3160>
    3554:	0000008f 	andeq	r0, r0, pc, lsl #1
    3558:	000002b7 			; <UNDEFINED> instruction: 0x000002b7
    355c:	0000530b 	andeq	r5, r0, fp, lsl #6
    3560:	00530b00 	subseq	r0, r3, r0, lsl #22
    3564:	04000000 	streq	r0, [r0], #-0
    3568:	0002a304 	andeq	sl, r2, r4, lsl #6
    356c:	07430700 	strbeq	r0, [r3, -r0, lsl #14]
    3570:	b5030000 	strlt	r0, [r3, #-0]
    3574:	000001de 	ldrdeq	r0, [r0], -lr
    3578:	00065008 	andeq	r5, r6, r8
    357c:	b7032400 	strlt	r2, [r3, -r0, lsl #8]
    3580:	00000341 	andeq	r0, r0, r1, asr #6
    3584:	0006bd09 	andeq	fp, r6, r9, lsl #26
    3588:	88b90300 	ldmhi	r9!, {r8, r9}
    358c:	00000002 	andeq	r0, r0, r2
    3590:	0005b909 	andeq	fp, r5, r9, lsl #18
    3594:	88ba0300 	ldmhi	sl!, {r8, r9}
    3598:	04000002 	streq	r0, [r0], #-2
    359c:	0005d509 	andeq	sp, r5, r9, lsl #10
    35a0:	88bb0300 	ldmhi	fp!, {r8, r9}
    35a4:	08000002 	stmdaeq	r0, {r1}
    35a8:	0000ec09 	andeq	lr, r0, r9, lsl #24
    35ac:	88bc0300 	ldmhi	ip!, {r8, r9}
    35b0:	0c000002 	stceq	0, cr0, [r0], {2}
    35b4:	00068909 	andeq	r8, r6, r9, lsl #18
    35b8:	88bd0300 	pophi	{r8, r9}
    35bc:	10000002 	andne	r0, r0, r2
    35c0:	00040609 	andeq	r0, r4, r9, lsl #12
    35c4:	88be0300 	ldmhi	lr!, {r8, r9}
    35c8:	14000002 	strne	r0, [r0], #-2
    35cc:	00006c09 	andeq	r6, r0, r9, lsl #24
    35d0:	88bf0300 	ldmhi	pc!, {r8, r9}	; <UNPREDICTABLE>
    35d4:	18000002 	stmdane	r0, {r1}
    35d8:	0005a309 	andeq	sl, r5, r9, lsl #6
    35dc:	88c00300 	stmiahi	r0, {r8, r9}^
    35e0:	1c000002 	stcne	0, cr0, [r0], {2}
    35e4:	00001c09 	andeq	r1, r0, r9, lsl #24
    35e8:	88c10300 	stmiahi	r1, {r8, r9}^
    35ec:	20000002 	andcs	r0, r0, r2
    35f0:	06510700 	ldrbeq	r0, [r1], -r0, lsl #14
    35f4:	c3030000 	movwgt	r0, #12288	; 0x3000
    35f8:	000002c8 	andeq	r0, r0, r8, asr #5
    35fc:	00053911 	andeq	r3, r5, r1, lsl r9
    3600:	d4350100 	ldrtle	r0, [r5], #-256	; 0x100
    3604:	3808000f 	stmdacc	r8, {r0, r1, r2, r3}
    3608:	01000000 	mrseq	r0, (UNDEF: 0)
    360c:	05e7129c 	strbeq	r1, [r7, #668]!	; 0x29c
    3610:	ec030000 	stc	0, cr0, [r3], {-0}
    3614:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
    3618:	0013f912 	andseq	pc, r3, r2, lsl r9	; <UNPREDICTABLE>
    361c:	41ed0300 	mvnmi	r0, r0, lsl #6
    3620:	13000003 	movwne	r0, #3
    3624:	00001410 	andeq	r1, r0, r0, lsl r4
    3628:	01d32701 	bicseq	r2, r3, r1, lsl #14
    362c:	03050000 	movweq	r0, #20480	; 0x5000
    3630:	200002ec 	andcs	r0, r0, ip, ror #5
    3634:	0013d313 	andseq	sp, r3, r3, lsl r3
    3638:	53180100 	tstpl	r8, #0, 2
    363c:	05000000 	streq	r0, [r0, #-0]
    3640:	0002e803 	andeq	lr, r2, r3, lsl #16
    3644:	027c1320 	rsbseq	r1, ip, #32, 6	; 0x80000000
    3648:	1d010000 	stcne	0, cr0, [r1, #-0]
    364c:	000003a6 	andeq	r0, r0, r6, lsr #7
    3650:	030c0305 	movweq	r0, #49925	; 0xc305
    3654:	04042000 	streq	r2, [r4], #-0
    3658:	000001d3 	ldrdeq	r0, [r0], -r3
    365c:	00052f13 	andeq	r2, r5, r3, lsl pc
    3660:	bd200100 	stflts	f0, [r0, #-0]
    3664:	05000003 	streq	r0, [r0, #-3]
    3668:	0002e403 	andeq	lr, r2, r3, lsl #8
    366c:	bd040420 	cfstrslt	mvf0, [r4, #-128]	; 0xffffff80
    3670:	13000002 	movwne	r0, #2
    3674:	000013f8 	strdeq	r1, [r0], -r8
    3678:	03d42801 	bicseq	r2, r4, #65536	; 0x10000
    367c:	03050000 	movweq	r0, #20480	; 0x5000
    3680:	20000308 	andcs	r0, r0, r8, lsl #6
    3684:	03410404 	movteq	r0, #5124	; 0x1404
    3688:	db130000 	blle	4c3690 <__Stack_Size+0x4c3290>
    368c:	01000013 	tsteq	r0, r3, lsl r0
    3690:	00004125 	andeq	r4, r0, r5, lsr #2
    3694:	e0030500 	and	r0, r3, r0, lsl #10
    3698:	13200002 	teqne	r0, #2
    369c:	000004c2 	andeq	r0, r0, r2, asr #9
    36a0:	00412601 	subeq	r2, r1, r1, lsl #12
    36a4:	03050000 	movweq	r0, #20480	; 0x5000
    36a8:	20000310 	andcs	r0, r0, r0, lsl r3
    36ac:	000de000 	andeq	lr, sp, r0
    36b0:	3e000400 	cfcpyscc	mvf0, mvf0
    36b4:	04000010 	streq	r0, [r0], #-16
    36b8:	00015801 	andeq	r5, r1, r1, lsl #16
    36bc:	141c0100 	ldrne	r0, [ip], #-256	; 0x100
    36c0:	07cd0000 	strbeq	r0, [sp, r0]
    36c4:	05780000 	ldrbeq	r0, [r8, #-0]!
    36c8:	00000000 	andeq	r0, r0, r0
    36cc:	10ad0000 	adcne	r0, sp, r0
    36d0:	04020000 	streq	r0, [r2], #-0
    36d4:	0001f605 	andeq	pc, r1, r5, lsl #12
    36d8:	05020200 	streq	r0, [r2, #-512]	; 0x200
    36dc:	00000698 	muleq	r0, r8, r6
    36e0:	44060102 	strmi	r0, [r6], #-258	; 0x102
    36e4:	03000006 	movweq	r0, #6
    36e8:	00323375 	eorseq	r3, r2, r5, ror r3
    36ec:	00452402 	subeq	r2, r5, r2, lsl #8
    36f0:	04020000 	streq	r0, [r2], #-0
    36f4:	00037b07 	andeq	r7, r3, r7, lsl #22
    36f8:	31750300 	cmncc	r5, r0, lsl #6
    36fc:	25020036 	strcs	r0, [r2, #-54]	; 0x36
    3700:	00000057 	andeq	r0, r0, r7, asr r0
    3704:	d7070202 	strle	r0, [r7, -r2, lsl #4]
    3708:	03000003 	movweq	r0, #3
    370c:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    3710:	00006826 	andeq	r6, r0, r6, lsr #16
    3714:	08010200 	stmdaeq	r1, {r9}
    3718:	00000642 	andeq	r0, r0, r2, asr #12
    371c:	00044604 	andeq	r4, r4, r4, lsl #12
    3720:	7a2c0200 	bvc	b03f28 <__Stack_Size+0xb03b28>
    3724:	05000000 	streq	r0, [r0, #-0]
    3728:	00000045 	andeq	r0, r0, r5, asr #32
    372c:	36020106 	strcc	r0, [r2], -r6, lsl #2
    3730:	00000094 	muleq	r0, r4, r0
    3734:	0005cf07 	andeq	ip, r5, r7, lsl #30
    3738:	3d070000 	stccc	0, cr0, [r7, #-0]
    373c:	01000007 	tsteq	r0, r7
    3740:	04330400 	ldrteq	r0, [r3], #-1024	; 0x400
    3744:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    3748:	0000007f 	andeq	r0, r0, pc, ror r0
    374c:	00036b08 	andeq	r6, r3, r8, lsl #22
    3750:	16030100 	strne	r0, [r3], -r0, lsl #2
    3754:	000000c4 	andeq	r0, r0, r4, asr #1
    3758:	0000fe07 	andeq	pc, r0, r7, lsl #28
    375c:	aa070000 	bge	1c3764 <__Stack_Size+0x1c3364>
    3760:	01000002 	tsteq	r0, r2
    3764:	00082207 	andeq	r2, r8, r7, lsl #4
    3768:	23070200 	movwcs	r0, #29184	; 0x7200
    376c:	03000004 	movweq	r0, #4
    3770:	06550800 	ldrbeq	r0, [r5], -r0, lsl #16
    3774:	03010000 	movweq	r0, #4096	; 0x1000
    3778:	0001251f 	andeq	r2, r1, pc, lsl r5
    377c:	158e0700 	strne	r0, [lr, #1792]	; 0x700
    3780:	07000000 	streq	r0, [r0, -r0]
    3784:	000017bd 			; <UNDEFINED> instruction: 0x000017bd
    3788:	0d040701 	stceq	7, cr0, [r4, #-4]
    378c:	07020000 	streq	r0, [r2, -r0]
    3790:	00001599 	muleq	r0, r9, r5
    3794:	0c990703 	ldceq	7, cr0, [r9], {3}
    3798:	07040000 	streq	r0, [r4, -r0]
    379c:	00001747 	andeq	r1, r0, r7, asr #14
    37a0:	17770705 	ldrbne	r0, [r7, -r5, lsl #14]!
    37a4:	07060000 	streq	r0, [r6, -r0]
    37a8:	00001603 	andeq	r1, r0, r3, lsl #12
    37ac:	16620707 	strbtne	r0, [r2], -r7, lsl #14
    37b0:	07080000 	streq	r0, [r8, -r0]
    37b4:	000016b3 			; <UNDEFINED> instruction: 0x000016b3
    37b8:	15640709 	strbne	r0, [r4, #-1801]!	; 0x709
    37bc:	070a0000 	streq	r0, [sl, -r0]
    37c0:	00001612 	andeq	r1, r0, r2, lsl r6
    37c4:	16d5070b 	ldrbne	r0, [r5], fp, lsl #14
    37c8:	070c0000 	streq	r0, [ip, -r0]
    37cc:	000015e1 	andeq	r1, r0, r1, ror #11
    37d0:	8308000c 	movwhi	r0, #32780	; 0x800c
    37d4:	01000016 	tsteq	r0, r6, lsl r0
    37d8:	01503203 	cmpeq	r0, r3, lsl #4
    37dc:	ce070000 	cdpgt	0, 0, cr0, cr7, cr0, {0}
    37e0:	01000014 	tsteq	r0, r4, lsl r0
    37e4:	00172d07 	andseq	r2, r7, r7, lsl #26
    37e8:	e0070200 	and	r0, r7, r0, lsl #4
    37ec:	03000014 	movweq	r0, #20
    37f0:	0016e407 	andseq	lr, r6, r7, lsl #8
    37f4:	19070400 	stmdbne	r7, {sl}
    37f8:	05000017 	streq	r0, [r0, #-23]
    37fc:	16200800 	strtne	r0, [r0], -r0, lsl #16
    3800:	03010000 	movweq	r0, #4096	; 0x1000
    3804:	0001693c 	andeq	r6, r1, ip, lsr r9
    3808:	142f0700 	strtne	r0, [pc], #-1792	; 3810 <__Stack_Size+0x3410>
    380c:	07000000 	streq	r0, [r0, -r0]
    3810:	0000148d 	andeq	r1, r0, sp, lsl #9
    3814:	74080001 	strvc	r0, [r8], #-1
    3818:	01000016 	tsteq	r0, r6, lsl r0
    381c:	01b21604 			; <UNDEFINED> instruction: 0x01b21604
    3820:	93070000 	movwls	r0, #28672	; 0x7000
    3824:	00000017 	andeq	r0, r0, r7, lsl r0
    3828:	00169407 	andseq	r9, r6, r7, lsl #8
    382c:	18070100 	stmdane	r7, {r8}
    3830:	02000015 	andeq	r0, r0, #21
    3834:	0017d007 	andseq	sp, r7, r7
    3838:	13070300 	movwne	r0, #29440	; 0x7300
    383c:	04000015 	streq	r0, [r0], #-21
    3840:	0017cb07 	andseq	ip, r7, r7, lsl #22
    3844:	ae070500 	cfsh32ge	mvfx0, mvfx7, #0
    3848:	06000017 			; <UNDEFINED> instruction: 0x06000017
    384c:	0016c507 	andseq	ip, r6, r7, lsl #10
    3850:	a2070700 	andge	r0, r7, #0, 14
    3854:	08000014 	stmdaeq	r0, {r2, r4}
    3858:	00155407 	andseq	r5, r5, r7, lsl #8
    385c:	09000900 	stmdbeq	r0, {r8, fp}
    3860:	0000008c 	andeq	r0, r0, ip, lsl #1
    3864:	d7240408 	strle	r0, [r4, -r8, lsl #8]!
    3868:	0a000001 	beq	3874 <__Stack_Size+0x3474>
    386c:	0000013d 	andeq	r0, r0, sp, lsr r1
    3870:	01d72604 	bicseq	r2, r7, r4, lsl #12
    3874:	0a000000 	beq	387c <__Stack_Size+0x347c>
    3878:	00000593 	muleq	r0, r3, r5
    387c:	004c2704 	subeq	r2, ip, r4, lsl #14
    3880:	00040000 	andeq	r0, r4, r0
    3884:	005e040b 	subseq	r0, lr, fp, lsl #8
    3888:	d6040000 	strle	r0, [r4], -r0
    388c:	04000002 	streq	r0, [r0], #-2
    3890:	0001b229 	andeq	fp, r1, r9, lsr #4
    3894:	07350800 	ldreq	r0, [r5, -r0, lsl #16]!
    3898:	04010000 	streq	r0, [r1], #-0
    389c:	00020d2d 	andeq	r0, r2, sp, lsr #26
    38a0:	08f60700 	ldmeq	r6!, {r8, r9, sl}^
    38a4:	07000000 	streq	r0, [r0, -r0]
    38a8:	000003ea 	andeq	r0, r0, sl, ror #7
    38ac:	07740701 	ldrbeq	r0, [r4, -r1, lsl #14]!
    38b0:	07020000 	streq	r0, [r2, -r0]
    38b4:	00000222 	andeq	r0, r0, r2, lsr #4
    38b8:	36040003 	strcc	r0, [r4], -r3
    38bc:	04000007 	streq	r0, [r0], #-7
    38c0:	0001e834 	andeq	lr, r1, r4, lsr r8
    38c4:	091b0900 	ldmdbeq	fp, {r8, fp}
    38c8:	040c0000 	streq	r0, [ip], #-0
    38cc:	00025538 	andeq	r5, r2, r8, lsr r5
    38d0:	02900a00 	addseq	r0, r0, #0, 20
    38d4:	50040000 	andpl	r0, r4, r0
    38d8:	0000004c 	andeq	r0, r0, ip, asr #32
    38dc:	03190a00 	tsteq	r9, #0, 20
    38e0:	51040000 	mrspl	r0, (UNDEF: 4)
    38e4:	0000004c 	andeq	r0, r0, ip, asr #32
    38e8:	15b10a02 	ldrne	r0, [r1, #2562]!	; 0xa02
    38ec:	52040000 	andpl	r0, r4, #0
    38f0:	0000004c 	andeq	r0, r0, ip, asr #32
    38f4:	00e30a04 	rsceq	r0, r3, r4, lsl #20
    38f8:	53040000 	movwpl	r0, #16384	; 0x4000
    38fc:	00000264 	andeq	r0, r0, r4, ror #4
    3900:	d70c0008 	strle	r0, [ip, -r8]
    3904:	64000001 	strvs	r0, [r0], #-1
    3908:	0d000002 	stceq	0, cr0, [r0, #-8]
    390c:	0000004c 	andeq	r0, r0, ip, asr #32
    3910:	55040b00 	strpl	r0, [r4, #-2816]	; 0xb00
    3914:	04000002 	streq	r0, [r0], #-2
    3918:	0000091c 	andeq	r0, r0, ip, lsl r9
    391c:	02185404 	andseq	r5, r8, #4, 8	; 0x4000000
    3920:	fd090000 	stc2	0, cr0, [r9, #-0]
    3924:	02000007 	andeq	r0, r0, #7
    3928:	029a5804 	addseq	r5, sl, #4, 16	; 0x40000
    392c:	3a0a0000 	bcc	283934 <__Stack_Size+0x283534>
    3930:	04000009 	streq	r0, [r0], #-9
    3934:	00005e5a 	andeq	r5, r0, sl, asr lr
    3938:	b00a0000 	andlt	r0, sl, r0
    393c:	04000003 	streq	r0, [r0], #-3
    3940:	00005e5b 	andeq	r5, r0, fp, asr lr
    3944:	04000100 	streq	r0, [r0], #-256	; 0x100
    3948:	000007fe 	strdeq	r0, [r0], -lr
    394c:	02755d04 	rsbseq	r5, r5, #4, 26	; 0x100
    3950:	420e0000 	andmi	r0, lr, #0
    3954:	04020057 	streq	r0, [r2], #-87	; 0x57
    3958:	0002c962 	andeq	ip, r2, r2, ror #18
    395c:	62620f00 	rsbvs	r0, r2, #0, 30
    3960:	65040030 	strvs	r0, [r4, #-48]	; 0x30
    3964:	0000005e 	andeq	r0, r0, lr, asr r0
    3968:	62620f00 	rsbvs	r0, r2, #0, 30
    396c:	66040031 			; <UNDEFINED> instruction: 0x66040031
    3970:	0000005e 	andeq	r0, r0, lr, asr r0
    3974:	02100001 	andseq	r0, r0, #1
    3978:	02e55f04 	rsceq	r5, r5, #4, 30
    397c:	77110000 	ldrvc	r0, [r1, -r0]
    3980:	4c610400 	cfstrdmi	mvd0, [r1], #-0
    3984:	11000000 	mrsne	r0, (UNDEF: 0)
    3988:	04007762 	streq	r7, [r0], #-1890	; 0x762
    398c:	0002a568 	andeq	sl, r2, r8, ror #10
    3990:	ff040000 			; <UNDEFINED> instruction: 0xff040000
    3994:	04000003 	streq	r0, [r0], #-3
    3998:	0002c969 	andeq	ip, r2, r9, ror #18
    399c:	003c0900 	eorseq	r0, ip, r0, lsl #18
    39a0:	041c0000 	ldreq	r0, [ip], #-0
    39a4:	0003816b 	andeq	r8, r3, fp, ror #2
    39a8:	05500a00 	ldrbeq	r0, [r0, #-2560]	; 0xa00
    39ac:	6d040000 	stcvs	0, cr0, [r4, #-0]
    39b0:	0000005e 	andeq	r0, r0, lr, asr r0
    39b4:	02160a00 	andseq	r0, r6, #0, 20
    39b8:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
    39bc:	0000005e 	andeq	r0, r0, lr, asr r0
    39c0:	04180a01 	ldreq	r0, [r8], #-2561	; 0xa01
    39c4:	6f040000 	svcvs	0x00040000
    39c8:	000002e5 	andeq	r0, r0, r5, ror #5
    39cc:	01480a02 	cmpeq	r8, r2, lsl #20
    39d0:	70040000 	andvc	r0, r4, r0
    39d4:	000002e5 	andeq	r0, r0, r5, ror #5
    39d8:	083d0a04 	ldmdaeq	sp!, {r2, r9, fp}
    39dc:	71040000 	mrsvc	r0, (UNDEF: 4)
    39e0:	000002e5 	andeq	r0, r0, r5, ror #5
    39e4:	09490a06 	stmdbeq	r9, {r1, r2, r9, fp}^
    39e8:	73040000 	movwvc	r0, #16384	; 0x4000
    39ec:	0000005e 	andeq	r0, r0, lr, asr r0
    39f0:	03a00a08 	moveq	r0, #8, 20	; 0x8000
    39f4:	74040000 	strvc	r0, [r4], #-0
    39f8:	0000005e 	andeq	r0, r0, lr, asr r0
    39fc:	04a10a09 	strteq	r0, [r1], #2569	; 0xa09
    3a00:	75040000 	strvc	r0, [r4, #-0]
    3a04:	0000005e 	andeq	r0, r0, lr, asr r0
    3a08:	08920a0a 	ldmeq	r2, {r1, r3, r9, fp}
    3a0c:	76040000 	strvc	r0, [r4], -r0
    3a10:	0000005e 	andeq	r0, r0, lr, asr r0
    3a14:	061c0a0b 	ldreq	r0, [ip], -fp, lsl #20
    3a18:	77040000 	strvc	r0, [r4, -r0]
    3a1c:	0000005e 	andeq	r0, r0, lr, asr r0
    3a20:	07130a0c 	ldreq	r0, [r3, -ip, lsl #20]
    3a24:	7a040000 	bvc	103a2c <__Stack_Size+0x10362c>
    3a28:	0000026a 	andeq	r0, r0, sl, ror #4
    3a2c:	3d040010 	stccc	0, cr0, [r4, #-64]	; 0xffffffc0
    3a30:	04000000 	streq	r0, [r0], #-0
    3a34:	0002f07b 	andeq	pc, r2, fp, ror r0	; <UNPREDICTABLE>
    3a38:	07420900 	strbeq	r0, [r2, -r0, lsl #18]
    3a3c:	04340000 	ldrteq	r0, [r4], #-0
    3a40:	0004357d 	andeq	r3, r4, sp, ror r5
    3a44:	053d0a00 	ldreq	r0, [sp, #-2560]!	; 0xa00
    3a48:	7f040000 	svcvc	0x00040000
    3a4c:	00000436 	andeq	r0, r0, r6, lsr r4
    3a50:	03c70a00 	biceq	r0, r7, #0, 20
    3a54:	80040000 	andhi	r0, r4, r0
    3a58:	00000436 	andeq	r0, r0, r6, lsr r4
    3a5c:	079a0a04 	ldreq	r0, [sl, r4, lsl #20]
    3a60:	83040000 	movwhi	r0, #16384	; 0x4000
    3a64:	00000436 	andeq	r0, r0, r6, lsr r4
    3a68:	07ac0a08 	streq	r0, [ip, r8, lsl #20]!
    3a6c:	84040000 	strhi	r0, [r4], #-0
    3a70:	00000436 	andeq	r0, r0, r6, lsr r4
    3a74:	051e0a0c 	ldreq	r0, [lr, #-2572]	; 0xa0c
    3a78:	96040000 	strls	r0, [r4], -r0
    3a7c:	0000044b 	andeq	r0, r0, fp, asr #8
    3a80:	06f70a10 	usateq	r0, #23, r0, lsl #20
    3a84:	a1040000 	mrsge	r0, (UNDEF: 4)
    3a88:	0000044b 	andeq	r0, r0, fp, asr #8
    3a8c:	04e80a14 	strbteq	r0, [r8], #2580	; 0xa14
    3a90:	ab040000 	blge	103a98 <__Stack_Size+0x103698>
    3a94:	00000465 	andeq	r0, r0, r5, ror #8
    3a98:	01340a18 	teqeq	r4, r8, lsl sl
    3a9c:	ad040000 	stcge	0, cr0, [r4, #-0]
    3aa0:	00000264 	andeq	r0, r0, r4, ror #4
    3aa4:	02020a1c 	andeq	r0, r2, #28, 20	; 0x1c000
    3aa8:	ae040000 	cdpge	0, 0, cr0, cr4, cr0, {0}
    3aac:	00000264 	andeq	r0, r0, r4, ror #4
    3ab0:	084c0a20 	stmdaeq	ip, {r5, r9, fp}^
    3ab4:	af040000 	svcge	0x00040000
    3ab8:	00000264 	andeq	r0, r0, r4, ror #4
    3abc:	06040a24 	streq	r0, [r4], -r4, lsr #20
    3ac0:	b0040000 	andlt	r0, r4, r0
    3ac4:	00000264 	andeq	r0, r0, r4, ror #4
    3ac8:	057b0a28 	ldrbeq	r0, [fp, #-2600]!	; 0xa28
    3acc:	b2040000 	andlt	r0, r4, #0
    3ad0:	000001d7 	ldrdeq	r0, [r0], -r7
    3ad4:	15ae0a2c 	strne	r0, [lr, #2604]!	; 0xa2c
    3ad8:	b3040000 	movwlt	r0, #16384	; 0x4000
    3adc:	0000005e 	andeq	r0, r0, lr, asr r0
    3ae0:	0b120030 	bleq	483ba8 <__Stack_Size+0x4837a8>
    3ae4:	00043504 	andeq	r3, r4, r4, lsl #10
    3ae8:	020d0c00 	andeq	r0, sp, #0, 24
    3aec:	044b0000 	strbeq	r0, [fp], #-0
    3af0:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    3af4:	00000000 	andeq	r0, r0, r0
    3af8:	043c040b 	ldrteq	r0, [ip], #-1035	; 0x40b
    3afc:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    3b00:	65000002 	strvs	r0, [r0, #-2]
    3b04:	0d000004 	stceq	0, cr0, [r0, #-16]
    3b08:	0000005e 	andeq	r0, r0, lr, asr r0
    3b0c:	00005e0d 	andeq	r5, r0, sp, lsl #28
    3b10:	040b0000 	streq	r0, [fp], #-0
    3b14:	00000451 	andeq	r0, r0, r1, asr r4
    3b18:	00074304 	andeq	r4, r7, r4, lsl #6
    3b1c:	8cb50400 	cfldrshi	mvf0, [r5]
    3b20:	09000003 	stmdbeq	r0, {r0, r1}
    3b24:	00000650 	andeq	r0, r0, r0, asr r6
    3b28:	efb70424 	svc	0x00b70424
    3b2c:	0a000004 	beq	3b44 <__Stack_Size+0x3744>
    3b30:	000006bd 			; <UNDEFINED> instruction: 0x000006bd
    3b34:	0436b904 	ldrteq	fp, [r6], #-2308	; 0x904
    3b38:	0a000000 	beq	3b40 <__Stack_Size+0x3740>
    3b3c:	000005b9 			; <UNDEFINED> instruction: 0x000005b9
    3b40:	0436ba04 	ldrteq	fp, [r6], #-2564	; 0xa04
    3b44:	0a040000 	beq	103b4c <__Stack_Size+0x10374c>
    3b48:	000005d5 	ldrdeq	r0, [r0], -r5
    3b4c:	0436bb04 	ldrteq	fp, [r6], #-2820	; 0xb04
    3b50:	0a080000 	beq	203b58 <__Stack_Size+0x203758>
    3b54:	000000ec 	andeq	r0, r0, ip, ror #1
    3b58:	0436bc04 	ldrteq	fp, [r6], #-3076	; 0xc04
    3b5c:	0a0c0000 	beq	303b64 <__Stack_Size+0x303764>
    3b60:	00000689 	andeq	r0, r0, r9, lsl #13
    3b64:	0436bd04 	ldrteq	fp, [r6], #-3332	; 0xd04
    3b68:	0a100000 	beq	403b70 <__Stack_Size+0x403770>
    3b6c:	00000406 	andeq	r0, r0, r6, lsl #8
    3b70:	0436be04 	ldrteq	fp, [r6], #-3588	; 0xe04
    3b74:	0a140000 	beq	503b7c <__Stack_Size+0x50377c>
    3b78:	0000006c 	andeq	r0, r0, ip, rrx
    3b7c:	0436bf04 	ldrteq	fp, [r6], #-3844	; 0xf04
    3b80:	0a180000 	beq	603b88 <__Stack_Size+0x603788>
    3b84:	000005a3 	andeq	r0, r0, r3, lsr #11
    3b88:	0436c004 	ldrteq	ip, [r6], #-4
    3b8c:	0a1c0000 	beq	703b94 <__Stack_Size+0x703794>
    3b90:	0000001c 	andeq	r0, r0, ip, lsl r0
    3b94:	0436c104 	ldrteq	ip, [r6], #-260	; 0x104
    3b98:	00200000 	eoreq	r0, r0, r0
    3b9c:	00065104 	andeq	r5, r6, r4, lsl #2
    3ba0:	76c30400 	strbvc	r0, [r3], r0, lsl #8
    3ba4:	13000004 	movwne	r0, #4
    3ba8:	00001632 	andeq	r1, r0, r2, lsr r6
    3bac:	01d73501 	bicseq	r3, r7, r1, lsl #10
    3bb0:	100c0000 	andne	r0, ip, r0
    3bb4:	00240800 	eoreq	r0, r4, r0, lsl #16
    3bb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    3bbc:	00000523 	andeq	r0, r0, r3, lsr #10
    3bc0:	00150c14 	andseq	r0, r5, r4, lsl ip
    3bc4:	4c350100 	ldfmis	f0, [r5], #-0
    3bc8:	f9000000 			; <UNDEFINED> instruction: 0xf9000000
    3bcc:	00000015 	andeq	r0, r0, r5, lsl r0
    3bd0:	0015ed13 	andseq	lr, r5, r3, lsl sp
    3bd4:	d7630100 	strble	r0, [r3, -r0, lsl #2]!
    3bd8:	30000001 	andcc	r0, r0, r1
    3bdc:	24080010 	strcs	r0, [r8], #-16
    3be0:	01000000 	mrseq	r0, (UNDEF: 0)
    3be4:	00054c9c 	muleq	r5, ip, ip
    3be8:	150c1400 	strne	r1, [ip, #-1024]	; 0x400
    3bec:	63010000 	movwvs	r0, #4096	; 0x1000
    3bf0:	0000004c 	andeq	r0, r0, ip, asr #32
    3bf4:	0000161a 	andeq	r1, r0, sl, lsl r6
    3bf8:	17061300 	strne	r1, [r6, -r0, lsl #6]
    3bfc:	9b010000 	blls	43c04 <__Stack_Size+0x43804>
    3c00:	000001d7 	ldrdeq	r0, [r0], -r7
    3c04:	08001054 	stmdaeq	r0, {r2, r4, r6, ip}
    3c08:	00000090 	muleq	r0, r0, r0
    3c0c:	05b69c01 	ldreq	r9, [r6, #3073]!	; 0xc01
    3c10:	0c140000 	ldceq	0, cr0, [r4], {-0}
    3c14:	01000015 	tsteq	r0, r5, lsl r0
    3c18:	00004c9b 	muleq	r0, fp, ip
    3c1c:	00163b00 	andseq	r3, r6, r0, lsl #22
    3c20:	10741500 	rsbsne	r1, r4, r0, lsl #10
    3c24:	001c0800 	andseq	r0, ip, r0, lsl #16
    3c28:	05910000 	ldreq	r0, [r1]
    3c2c:	a8160000 	ldmdage	r6, {}	; <UNPREDICTABLE>
    3c30:	01000003 	tsteq	r0, r3
    3c34:	00005ea9 	andeq	r5, r0, r9, lsr #29
    3c38:	00165c00 	andseq	r5, r6, r0, lsl #24
    3c3c:	98170000 	ldmdals	r7, {}	; <UNPREDICTABLE>
    3c40:	30080010 	andcc	r0, r8, r0, lsl r0
    3c44:	16000000 	strne	r0, [r0], -r0
    3c48:	00001753 	andeq	r1, r0, r3, asr r7
    3c4c:	005ec301 	subseq	ip, lr, r1, lsl #6
    3c50:	16700000 	ldrbtne	r0, [r0], -r0
    3c54:	6f180000 	svcvs	0x00180000
    3c58:	01000017 	tsteq	r0, r7, lsl r0
    3c5c:	00005ec4 	andeq	r5, r0, r4, asr #29
    3c60:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    3c64:	00001481 	andeq	r1, r0, r1, lsl #9
    3c68:	e401e001 	str	lr, [r1], #-1
    3c6c:	a8080010 	stmdage	r8, {r4}
    3c70:	01000000 	mrseq	r0, (UNDEF: 0)
    3c74:	00067b9c 	muleq	r6, ip, fp
    3c78:	173f1a00 	ldrne	r1, [pc, -r0, lsl #20]!
    3c7c:	e2010000 	and	r0, r1, #0
    3c80:	00067b01 	andeq	r7, r6, r1, lsl #22
    3c84:	0016a100 	andseq	sl, r6, r0, lsl #2
    3c88:	16f91a00 	ldrbtne	r1, [r9], r0, lsl #20
    3c8c:	e3010000 	movw	r0, #4096	; 0x1000
    3c90:	00003a01 	andeq	r3, r0, r1, lsl #20
    3c94:	0016b600 	andseq	fp, r6, r0, lsl #12
    3c98:	09491a00 	stmdbeq	r9, {r9, fp, ip}^
    3c9c:	e4010000 	str	r0, [r1], #-0
    3ca0:	00003a01 	andeq	r3, r0, r1, lsl #20
    3ca4:	0016fa00 	andseq	pc, r6, r0, lsl #20
    3ca8:	14531a00 	ldrbne	r1, [r3], #-2560	; 0xa00
    3cac:	e6010000 	str	r0, [r1], -r0
    3cb0:	0001d701 	andeq	sp, r1, r1, lsl #14
    3cb4:	00174500 	andseq	r4, r7, r0, lsl #10
    3cb8:	150c1a00 	strne	r1, [ip, #-2560]	; 0xa00
    3cbc:	e7010000 	str	r0, [r1, -r0]
    3cc0:	00003a01 	andeq	r3, r0, r1, lsl #20
    3cc4:	00176300 	andseq	r6, r7, r0, lsl #6
    3cc8:	15421b00 	strbne	r1, [r2, #-2816]	; 0xb00
    3ccc:	10010000 	andne	r0, r1, r0
    3cd0:	00116802 	andseq	r6, r1, r2, lsl #16
    3cd4:	11361c08 	teqne	r6, r8, lsl #24
    3cd8:	06380800 	ldrteq	r0, [r8], -r0, lsl #16
    3cdc:	011d0000 	tsteq	sp, r0
    3ce0:	00750250 	rsbseq	r0, r5, r0, asr r2
    3ce4:	113e1e00 	teqne	lr, r0, lsl #28
    3ce8:	0d1c0800 	ldceq	8, cr0, [ip, #-0]
    3cec:	064b0000 	strbeq	r0, [fp], -r0
    3cf0:	011d0000 	tsteq	sp, r0
    3cf4:	00300150 	eorseq	r0, r0, r0, asr r1
    3cf8:	0011481e 	andseq	r4, r1, lr, lsl r8
    3cfc:	000d3208 	andeq	r3, sp, r8, lsl #4
    3d00:	00066500 	andeq	r6, r6, r0, lsl #10
    3d04:	52011d00 	andpl	r1, r1, #0, 26
    3d08:	1d007502 	cfstr32ne	mvfx7, [r0, #-8]
    3d0c:	79025001 	stmdbvc	r2, {r0, ip, lr}
    3d10:	501f0000 	andspl	r0, pc, r0
    3d14:	4d080011 	stcmi	0, cr0, [r8, #-68]	; 0xffffffbc
    3d18:	1d00000d 	stcne	0, cr0, [r0, #-52]	; 0xffffffcc
    3d1c:	75025101 	strvc	r5, [r2, #-257]	; 0x101
    3d20:	50011d00 	andpl	r1, r1, r0, lsl #26
    3d24:	00003001 	andeq	r3, r0, r1
    3d28:	026a040b 	rsbeq	r0, sl, #184549376	; 0xb000000
    3d2c:	67200000 	strvs	r0, [r0, -r0]!
    3d30:	01000014 	tsteq	r0, r4, lsl r0
    3d34:	00020d4a 	andeq	r0, r2, sl, asr #26
    3d38:	00118c00 	andseq	r8, r1, r0, lsl #24
    3d3c:	00003808 	andeq	r3, r0, r8, lsl #16
    3d40:	139c0100 	orrsne	r0, ip, #0, 2
    3d44:	0000152c 	andeq	r1, r0, ip, lsr #10
    3d48:	020d7801 	andeq	r7, sp, #65536	; 0x10000
    3d4c:	11c40000 	bicne	r0, r4, r0
    3d50:	00480800 	subeq	r0, r8, r0, lsl #16
    3d54:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d58:	000006be 			; <UNDEFINED> instruction: 0x000006be
    3d5c:	00655221 	rsbeq	r5, r5, r1, lsr #4
    3d60:	020d7a01 	andeq	r7, sp, #4096	; 0x1000
    3d64:	17a10000 	strne	r0, [r1, r0]!
    3d68:	13000000 	movwne	r0, #0
    3d6c:	0000164c 	andeq	r1, r0, ip, asr #12
    3d70:	020de901 	andeq	lr, sp, #16384	; 0x4000
    3d74:	120c0000 	andne	r0, ip, #0
    3d78:	00d00800 	sbcseq	r0, r0, r0, lsl #16
    3d7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d80:	00000796 	muleq	r0, r6, r7
    3d84:	0014aa16 	andseq	sl, r4, r6, lsl sl
    3d88:	3aeb0100 	bcc	ffac4190 <BootRAM+0xea34931>
    3d8c:	bf000000 	svclt	0x00000000
    3d90:	16000017 			; <UNDEFINED> instruction: 0x16000017
    3d94:	00000e1a 	andeq	r0, r0, sl, lsl lr
    3d98:	003aec01 	eorseq	lr, sl, r1, lsl #24
    3d9c:	17f70000 	ldrbne	r0, [r7, r0]!
    3da0:	28170000 	ldmdacs	r7, {}	; <UNPREDICTABLE>
    3da4:	9e080012 	mcrls	0, 0, r0, cr8, cr2, {0}
    3da8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3dac:	000015bc 			; <UNDEFINED> instruction: 0x000015bc
    3db0:	0796f601 	ldreq	pc, [r6, r1, lsl #12]
    3db4:	53160000 	tstpl	r6, #0
    3db8:	01000017 	tsteq	r0, r7, lsl r0
    3dbc:	00003af7 	strdeq	r3, [r0], -r7
    3dc0:	00182000 	andseq	r2, r8, r0
    3dc4:	176f1600 	strbne	r1, [pc, -r0, lsl #12]!
    3dc8:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    3dcc:	0000003a 	andeq	r0, r0, sl, lsr r0
    3dd0:	00001849 	andeq	r1, r0, r9, asr #16
    3dd4:	50457221 	subpl	r7, r5, r1, lsr #4
    3dd8:	3af90100 	bcc	ffe441e0 <BootRAM+0xedb4981>
    3ddc:	20000000 	andcs	r0, r0, r0
    3de0:	15000018 	strne	r0, [r0, #-24]
    3de4:	080012a8 	stmdaeq	r0, {r3, r5, r7, r9, ip}
    3de8:	00000012 	andeq	r0, r0, r2, lsl r0
    3dec:	00000754 	andeq	r0, r0, r4, asr r7
    3df0:	00045b1a 	andeq	r5, r4, sl, lsl fp
    3df4:	012f0100 	teqeq	pc, r0, lsl #2
    3df8:	0000004c 	andeq	r0, r0, ip, asr #32
    3dfc:	00001861 	andeq	r1, r0, r1, ror #16
    3e00:	12821e00 	addne	r1, r2, #0, 28
    3e04:	0d640800 	stcleq	8, cr0, [r4, #-0]
    3e08:	07680000 	strbeq	r0, [r8, -r0]!
    3e0c:	011d0000 	tsteq	sp, r0
    3e10:	00740250 	rsbseq	r0, r4, r0, asr r2
    3e14:	128a1e00 	addne	r1, sl, #0, 28
    3e18:	0d760800 	ldcleq	8, cr0, [r6, #-0]
    3e1c:	07820000 	streq	r0, [r2, r0]
    3e20:	011d0000 	tsteq	sp, r0
    3e24:	30080251 	andcc	r0, r8, r1, asr r2
    3e28:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    3e2c:	22000074 	andcs	r0, r0, #116	; 0x74
    3e30:	080012a2 	stmdaeq	r0, {r1, r5, r7, r9, ip}
    3e34:	00000d8d 	andeq	r0, r0, sp, lsl #27
    3e38:	0012a822 	andseq	sl, r2, r2, lsr #16
    3e3c:	000da408 	andeq	sl, sp, r8, lsl #8
    3e40:	0b000000 	bleq	3e48 <__Stack_Size+0x3a48>
    3e44:	00029a04 	andeq	r9, r2, r4, lsl #20
    3e48:	15722300 	ldrbne	r2, [r2, #-768]!	; 0x300
    3e4c:	42010000 	andmi	r0, r1, #0
    3e50:	00020d01 	andeq	r0, r2, r1, lsl #26
    3e54:	0012dc00 	andseq	sp, r2, r0, lsl #24
    3e58:	00008408 	andeq	r8, r0, r8, lsl #8
    3e5c:	2b9c0100 	blcs	fe704264 <BootRAM+0xd674a05>
    3e60:	1a000008 	bne	3e88 <__Stack_Size+0x3a88>
    3e64:	0000176f 	andeq	r1, r0, pc, ror #14
    3e68:	3a014401 	bcc	54e74 <__Stack_Size+0x54a74>
    3e6c:	8f000000 	svchi	0x00000000
    3e70:	1a000018 	bne	3ed8 <__Stack_Size+0x3ad8>
    3e74:	00001753 	andeq	r1, r0, r3, asr r7
    3e78:	3a014501 	bcc	55284 <__Stack_Size+0x54e84>
    3e7c:	b7000000 	strlt	r0, [r0, -r0]
    3e80:	24000018 	strcs	r0, [r0], #-24
    3e84:	00504572 	subseq	r4, r0, r2, ror r5
    3e88:	3a014601 	bcc	55694 <__Stack_Size+0x55294>
    3e8c:	b7000000 	strlt	r0, [r0, -r0]
    3e90:	1a000018 	bne	3ef8 <__Stack_Size+0x3af8>
    3e94:	00000e1a 	andeq	r0, r0, sl, lsl lr
    3e98:	3a014701 	bcc	55aa4 <__Stack_Size+0x556a4>
    3e9c:	ec000000 	stc	0, cr0, [r0], {-0}
    3ea0:	25000018 	strcs	r0, [r0, #-24]
    3ea4:	00000540 	andeq	r0, r0, r0, asr #10
    3ea8:	00000810 	andeq	r0, r0, r0, lsl r8
    3eac:	00045b1a 	andeq	r5, r4, sl, lsl fp
    3eb0:	01630100 	cmneq	r3, r0, lsl #2
    3eb4:	0000004c 	andeq	r0, r0, ip, asr #32
    3eb8:	0000190a 	andeq	r1, r0, sl, lsl #18
    3ebc:	13341700 	teqne	r4, #0, 14
    3ec0:	00100800 	andseq	r0, r0, r0, lsl #16
    3ec4:	5b1a0000 	blpl	683ecc <__Stack_Size+0x683acc>
    3ec8:	01000004 	tsteq	r0, r4
    3ecc:	004c0169 	subeq	r0, ip, r9, ror #2
    3ed0:	19320000 	ldmdbne	r2!, {}	; <UNPREDICTABLE>
    3ed4:	00000000 	andeq	r0, r0, r0
    3ed8:	0015c126 	andseq	ip, r5, r6, lsr #2
    3edc:	01780100 	cmneq	r8, r0, lsl #2
    3ee0:	0000020d 	andeq	r0, r0, sp, lsl #4
    3ee4:	08001360 	stmdaeq	r0, {r5, r6, r8, r9, ip}
    3ee8:	00000024 	andeq	r0, r0, r4, lsr #32
    3eec:	60279c01 	eorvs	r9, r7, r1, lsl #24
    3ef0:	01000008 	tsteq	r0, r8
    3ef4:	01d70192 			; <UNDEFINED> instruction: 0x01d70192
    3ef8:	13840000 	orrne	r0, r4, #0
    3efc:	001c0800 	andseq	r0, ip, r0, lsl #16
    3f00:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f04:	0000088c 	andeq	r0, r0, ip, lsl #17
    3f08:	00150c28 	andseq	r0, r5, r8, lsr #24
    3f0c:	01920100 	orrseq	r0, r2, r0, lsl #2
    3f10:	0000004c 	andeq	r0, r0, ip, asr #32
    3f14:	0000194b 	andeq	r1, r0, fp, asr #18
    3f18:	0015db28 	andseq	sp, r5, r8, lsr #22
    3f1c:	01920100 	orrseq	r0, r2, r0, lsl #2
    3f20:	0000088c 	andeq	r0, r0, ip, lsl #17
    3f24:	0000196c 	andeq	r1, r0, ip, ror #18
    3f28:	00031d1a 	andeq	r1, r3, sl, lsl sp
    3f2c:	01940100 	orrseq	r0, r4, r0, lsl #2
    3f30:	0000003a 	andeq	r0, r0, sl, lsr r0
    3f34:	00001998 	muleq	r0, r8, r9
    3f38:	dd040b00 	vstrle	d0, [r4, #-0]
    3f3c:	27000001 	strcs	r0, [r0, -r1]
    3f40:	00001445 	andeq	r1, r0, r5, asr #8
    3f44:	5e03c901 	cdppl	9, 0, cr12, cr3, cr1, {0}
    3f48:	a0000000 	andge	r0, r0, r0
    3f4c:	40080013 	andmi	r0, r8, r3, lsl r0
    3f50:	01000000 	mrseq	r0, (UNDEF: 0)
    3f54:	0008bc9c 	muleq	r8, ip, ip
    3f58:	13ae1f00 			; <UNDEFINED> instruction: 0x13ae1f00
    3f5c:	0d8d0800 	stceq	8, cr0, [sp]
    3f60:	011d0000 	tsteq	sp, r0
    3f64:	00300150 	eorseq	r0, r0, r0, asr r1
    3f68:	14b82900 	ldrtne	r2, [r8], #2304	; 0x900
    3f6c:	1b010000 	blne	43f74 <__Stack_Size+0x43b74>
    3f70:	08f60102 	ldmeq	r6!, {r1, r8}^
    3f74:	3e2a0000 	cdpcc	0, 2, cr0, cr10, cr0, {0}
    3f78:	01000014 	tsteq	r0, r4, lsl r0
    3f7c:	020d021d 	andeq	r0, sp, #-805306367	; 0xd0000001
    3f80:	5a2a0000 	bpl	a83f88 <__Stack_Size+0xa83b88>
    3f84:	01000015 	tsteq	r0, r5, lsl r0
    3f88:	003a021e 	eorseq	r0, sl, lr, lsl r2
    3f8c:	492a0000 	stmdbmi	sl!, {}	; <UNPREDICTABLE>
    3f90:	01000009 	tsteq	r0, r9
    3f94:	003a021f 	eorseq	r0, sl, pc, lsl r2
    3f98:	b32b0000 	teqlt	fp, #0
    3f9c:	01000014 	tsteq	r0, r4, lsl r0
    3fa0:	2900028b 	stmdbcs	r0, {r0, r1, r3, r7, r9}
    3fa4:	000014ba 			; <UNDEFINED> instruction: 0x000014ba
    3fa8:	01029701 	tsteq	r2, r1, lsl #14
    3fac:	00000978 	andeq	r0, r0, r8, ror r9
    3fb0:	0009562a 	andeq	r5, r9, sl, lsr #12
    3fb4:	02990100 	addseq	r0, r9, #0, 2
    3fb8:	00000264 	andeq	r0, r0, r4, ror #4
    3fbc:	00143e2a 	andseq	r3, r4, sl, lsr #28
    3fc0:	029a0100 	addseq	r0, sl, #0, 2
    3fc4:	0000020d 	andeq	r0, r0, sp, lsl #4
    3fc8:	00179e2a 	andseq	r9, r7, sl, lsr #28
    3fcc:	029b0100 	addseq	r0, fp, #0, 2
    3fd0:	0000003a 	andeq	r0, r0, sl, lsr r0
    3fd4:	0017532a 	andseq	r5, r7, sl, lsr #6
    3fd8:	029d0100 	addseq	r0, sp, #0, 2
    3fdc:	0000003a 	andeq	r0, r0, sl, lsr r0
    3fe0:	00145e2a 	andseq	r5, r4, sl, lsr #28
    3fe4:	029d0100 	addseq	r0, sp, #0, 2
    3fe8:	0000003a 	andeq	r0, r0, sl, lsr r0
    3fec:	00031d2a 	andeq	r1, r3, sl, lsr #26
    3ff0:	029e0100 	addseq	r0, lr, #0, 2
    3ff4:	0000003a 	andeq	r0, r0, sl, lsr r0
    3ff8:	000e1a2a 	andeq	r1, lr, sl, lsr #20
    3ffc:	029e0100 	addseq	r0, lr, #0, 2
    4000:	0000003a 	andeq	r0, r0, sl, lsr r0
    4004:	0009692c 	andeq	r6, r9, ip, lsr #18
    4008:	14c62a00 	strbne	r2, [r6], #2560	; 0xa00
    400c:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    4010:	00005e02 	andeq	r5, r0, r2, lsl #28
    4014:	2a2d0000 	bcs	b4401c <__Stack_Size+0xb43c1c>
    4018:	00000294 	muleq	r0, r4, r2
    401c:	6f032501 	svcvs	0x00032501
    4020:	00000000 	andeq	r0, r0, r0
    4024:	137c2300 	cmnne	ip, #0, 6
    4028:	4c010000 	stcmi	0, cr0, [r1], {-0}
    402c:	00005e03 	andeq	r5, r0, r3, lsl #28
    4030:	0013e000 	andseq	lr, r3, r0
    4034:	0002dc08 	andeq	sp, r2, r8, lsl #24
    4038:	e69c0100 	ldr	r0, [ip], r0, lsl #2
    403c:	2e00000a 	cdpcs	0, 0, cr0, cr0, cr10, {0}
    4040:	034f0104 	movteq	r0, #61700	; 0xf104
    4044:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    4048:	0100622f 	tsteq	r0, pc, lsr #4
    404c:	01d70351 	bicseq	r0, r7, r1, asr r3
    4050:	772f0000 	strvc	r0, [pc, -r0]!
    4054:	03520100 	cmpeq	r2, #0, 2
    4058:	00000ae6 	andeq	r0, r0, r6, ror #21
    405c:	17a91a00 	strne	r1, [r9, r0, lsl #20]!
    4060:	53010000 	movwpl	r0, #4096	; 0x1000
    4064:	00099203 	andeq	r9, r9, r3, lsl #4
    4068:	0019c900 	andseq	ip, r9, r0, lsl #18
    406c:	08bc3000 	ldmeq	ip!, {ip, sp}
    4070:	14260000 	strtne	r0, [r6], #-0
    4074:	00c40800 	sbceq	r0, r4, r0, lsl #16
    4078:	67010000 	strvs	r0, [r1, -r0]
    407c:	000a4003 	andeq	r4, sl, r3
    4080:	14261700 	strtne	r1, [r6], #-1792	; 0x700
    4084:	00c40800 	sbceq	r0, r4, r0, lsl #16
    4088:	c9310000 	ldmdbgt	r1!, {}	; <UNPREDICTABLE>
    408c:	ec000008 	stc	0, cr0, [r0], {8}
    4090:	31000019 	tstcc	r0, r9, lsl r0
    4094:	000008d5 	ldrdeq	r0, [r0], -r5
    4098:	00001a95 	muleq	r0, r5, sl
    409c:	0008e131 	andeq	lr, r8, r1, lsr r1
    40a0:	001aa800 	andseq	sl, sl, r0, lsl #16
    40a4:	08ed3200 	stmiaeq	sp!, {r9, ip, sp}^
    40a8:	14e40000 	strbtne	r0, [r4], #0
    40ac:	36220800 	strtcc	r0, [r2], -r0, lsl #16
    40b0:	81080014 	tsthi	r8, r4, lsl r0
    40b4:	1c000006 	stcne	0, cr0, [r0], {6}
    40b8:	08001470 	stmdaeq	r0, {r4, r5, r6, sl, ip}
    40bc:	00000a1a 	andeq	r0, r0, sl, lsl sl
    40c0:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    40c4:	22000074 	andcs	r0, r0, #116	; 0x74
    40c8:	08001486 	stmdaeq	r0, {r1, r2, r7, sl, ip}
    40cc:	0000082b 	andeq	r0, r0, fp, lsr #16
    40d0:	0014a222 	andseq	sl, r4, r2, lsr #4
    40d4:	0006be08 	andeq	fp, r6, r8, lsl #28
    40d8:	14b02200 	ldrtne	r2, [r0], #512	; 0x200
    40dc:	06960800 	ldreq	r0, [r6], r0, lsl #16
    40e0:	c2220000 	eorgt	r0, r2, #0
    40e4:	9c080014 	stcls	0, cr0, [r8], {20}
    40e8:	00000007 	andeq	r0, r0, r7
    40ec:	08f63300 	ldmeq	r6!, {r8, r9, ip, sp}^
    40f0:	14ea0000 	strbtne	r0, [sl], #0
    40f4:	05600800 	strbeq	r0, [r0, #-2048]!	; 0x800
    40f8:	6c010000 	stcvs	0, cr0, [r1], {-0}
    40fc:	000adc03 	andeq	sp, sl, r3, lsl #24
    4100:	05603400 	strbeq	r3, [r0, #-1024]!	; 0x400
    4104:	03310000 	teqeq	r1, #0
    4108:	c7000009 	strgt	r0, [r0, -r9]
    410c:	3100001a 	tstcc	r0, sl, lsl r0
    4110:	0000090f 	andeq	r0, r0, pc, lsl #18
    4114:	00001b5e 	andeq	r1, r0, lr, asr fp
    4118:	00091b31 	andeq	r1, r9, r1, lsr fp
    411c:	001b9e00 	andseq	r9, fp, r0, lsl #28
    4120:	09273100 	stmdbeq	r7!, {r8, ip, sp}
    4124:	1bc70000 	blne	ff1c412c <BootRAM+0xe1348cd>
    4128:	33310000 	teqcc	r1, #0
    412c:	da000009 	ble	4158 <__Stack_Size+0x3d58>
    4130:	3100001b 	tstcc	r0, fp, lsl r0
    4134:	0000093f 	andeq	r0, r0, pc, lsr r9
    4138:	00001bf5 	strdeq	r1, [r0], -r5
    413c:	00094b31 	andeq	r4, r9, r1, lsr fp
    4140:	001c1500 	andseq	r1, ip, r0, lsl #10
    4144:	14f41500 	ldrbtne	r1, [r4], #1280	; 0x500
    4148:	002c0800 	eoreq	r0, ip, r0, lsl #16
    414c:	0aaf0000 	beq	febc4154 <BootRAM+0xdb348f5>
    4150:	5c310000 	ldcpl	0, cr0, [r1], #-0
    4154:	28000009 	stmdacs	r0, {r0, r3}
    4158:	0000001c 	andeq	r0, r0, ip, lsl r0
    415c:	00162815 	andseq	r2, r6, r5, lsl r8
    4160:	00006008 	andeq	r6, r0, r8
    4164:	000ace00 	andeq	ip, sl, r0, lsl #28
    4168:	096a3500 	stmdbeq	sl!, {r8, sl, ip, sp}^
    416c:	91020000 	mrsls	r0, (UNDEF: 2)
    4170:	1686226c 	strne	r2, [r6], ip, ror #4
    4174:	05b60800 	ldreq	r0, [r6, #2048]!	; 0x800
    4178:	36000000 	strcc	r0, [r0], -r0
    417c:	080015ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, sl, ip}
    4180:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    4184:	00000074 	andeq	r0, r0, r4, ror r0
    4188:	16982200 	ldrne	r2, [r8], r0, lsl #4
    418c:	08920800 	ldmeq	r2, {fp}
    4190:	0b000000 	bleq	4198 <__Stack_Size+0x3d98>
    4194:	00004c04 	andeq	r4, r0, r4, lsl #24
    4198:	17862900 	strne	r2, [r6, r0, lsl #18]
    419c:	a7010000 	strge	r0, [r1, -r0]
    41a0:	0b2c0101 	bleq	b045ac <__Stack_Size+0xb041ac>
    41a4:	3f2a0000 	svccc	0x002a0000
    41a8:	01000017 	tsteq	r0, r7, lsl r0
    41ac:	067b01a9 	ldrbteq	r0, [fp], -r9, lsr #3
    41b0:	062a0000 	strteq	r0, [sl], -r0
    41b4:	01000015 	tsteq	r0, r5, lsl r0
    41b8:	003a01aa 	eorseq	r0, sl, sl, lsr #3
    41bc:	2a2d0000 	bcs	b441c4 <__Stack_Size+0xb43dc4>
    41c0:	00001457 	andeq	r1, r0, r7, asr r4
    41c4:	d701b001 	strle	fp, [r1, -r1]
    41c8:	2a000001 	bcs	41d4 <__Stack_Size+0x3dd4>
    41cc:	0000150c 	andeq	r1, r0, ip, lsl #10
    41d0:	3a01b101 	bcc	705dc <__Stack_Size+0x701dc>
    41d4:	00000000 	andeq	r0, r0, r0
    41d8:	13c62300 	bicne	r2, r6, #0, 6
    41dc:	a0010000 	andge	r0, r1, r0
    41e0:	00005e03 	andeq	r5, r0, r3, lsl #28
    41e4:	0016bc00 	andseq	fp, r6, r0, lsl #24
    41e8:	0000c808 	andeq	ip, r0, r8, lsl #16
    41ec:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
    41f0:	1a00000b 	bne	4224 <__Stack_Size+0x3e24>
    41f4:	00000949 	andeq	r0, r0, r9, asr #18
    41f8:	3a03a201 	bcc	eca04 <__Stack_Size+0xec604>
    41fc:	52000000 	andpl	r0, r0, #0
    4200:	3000001c 	andcc	r0, r0, ip, lsl r0
    4204:	00000aec 	andeq	r0, r0, ip, ror #21
    4208:	080016cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip}
    420c:	0000007e 	andeq	r0, r0, lr, ror r0
    4210:	f403a601 	vst1.8	{d10-d12}, [r3], r1
    4214:	1700000b 	strne	r0, [r0, -fp]
    4218:	080016cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip}
    421c:	0000007e 	andeq	r0, r0, lr, ror r0
    4220:	000af931 	andeq	pc, sl, r1, lsr r9	; <UNPREDICTABLE>
    4224:	001c9f00 	andseq	r9, ip, r0, lsl #30
    4228:	0b053100 	bleq	150630 <__Stack_Size+0x150230>
    422c:	1cb40000 	ldcne	0, cr0, [r4]
    4230:	d4150000 	ldrle	r0, [r5], #-0
    4234:	2a080016 	bcs	204294 <__Stack_Size+0x203e94>
    4238:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    423c:	3100000b 	tstcc	r0, fp
    4240:	00000b12 	andeq	r0, r0, r2, lsl fp
    4244:	00001cc7 	andeq	r1, r0, r7, asr #25
    4248:	000b1e31 	andeq	r1, fp, r1, lsr lr
    424c:	001ce500 	andseq	lr, ip, r0, lsl #10
    4250:	16e01c00 	strbtne	r1, [r0], r0, lsl #24
    4254:	0bb40800 	bleq	fed0625c <BootRAM+0xdc769fd>
    4258:	011d0000 	tsteq	sp, r0
    425c:	00760250 	rsbseq	r0, r6, r0, asr r2
    4260:	16f41e00 	ldrbtne	r1, [r4], r0, lsl #28
    4264:	0db60800 	ldceq	8, cr0, [r6]
    4268:	0bc70000 	bleq	ff1c4270 <BootRAM+0xe134a11>
    426c:	011d0000 	tsteq	sp, r0
    4270:	00300150 	eorseq	r0, r0, r0, asr r1
    4274:	0016fe1f 	andseq	pc, r6, pc, lsl lr	; <UNPREDICTABLE>
    4278:	000dcc08 	andeq	ip, sp, r8, lsl #24
    427c:	52011d00 	andpl	r1, r1, #0, 26
    4280:	1d007602 	stcne	6, cr7, [r0, #-8]
    4284:	77025001 	strvc	r5, [r2, -r1]
    4288:	1f000000 	svcne	0x00000000
    428c:	08001712 	stmdaeq	r0, {r1, r4, r8, r9, sl, ip}
    4290:	00000d4d 	andeq	r0, r0, sp, asr #26
    4294:	0151011d 	cmpeq	r1, sp, lsl r1
    4298:	50011d30 	andpl	r1, r1, r0, lsr sp
    429c:	00003001 	andeq	r3, r0, r1
    42a0:	176a3700 	strbne	r3, [sl, -r0, lsl #14]!
    42a4:	08920800 	ldmeq	r2, {fp}
    42a8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    42ac:	00000021 	andeq	r0, r0, r1, lsr #32
    42b0:	8403dd01 	strhi	sp, [r3], #-3329	; 0xd01
    42b4:	38080017 	stmdacc	r8, {r0, r1, r2, r4}
    42b8:	01000000 	mrseq	r0, (UNDEF: 0)
    42bc:	000c439c 	muleq	ip, ip, r3
    42c0:	61563900 	cmpvs	r6, r0, lsl #18
    42c4:	dd01006c 	stcle	0, cr0, [r1, #-432]	; 0xfffffe50
    42c8:	00005e03 	andeq	r5, r0, r3, lsl #28
    42cc:	001d1800 	andseq	r1, sp, r0, lsl #16
    42d0:	00692400 	rsbeq	r2, r9, r0, lsl #8
    42d4:	3a03df01 	bcc	fbee0 <__Stack_Size+0xfbae0>
    42d8:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    42dc:	2400001d 	strcs	r0, [r0], #-29
    42e0:	0050456e 	subseq	r4, r0, lr, ror #10
    42e4:	3a03e001 	bcc	fc2f0 <__Stack_Size+0xfbef0>
    42e8:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    42ec:	0000001d 	andeq	r0, r0, sp, lsl r0
    42f0:	0013ba23 	andseq	fp, r3, r3, lsr #20
    42f4:	03780100 	cmneq	r8, #0, 2
    42f8:	0000005e 	andeq	r0, r0, lr, asr r0
    42fc:	080017bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip}
    4300:	0000005c 	andeq	r0, r0, ip, asr r0
    4304:	0c899c01 	stceq	12, cr9, [r9], {1}
    4308:	491a0000 	ldmdbmi	sl, {}	; <UNPREDICTABLE>
    430c:	01000009 	tsteq	r0, r9
    4310:	003a037a 	eorseq	r0, sl, sl, ror r3
    4314:	1d6b0000 	stclne	0, cr0, [fp, #-0]
    4318:	d0220000 	eorle	r0, r2, r0
    431c:	b6080017 			; <UNDEFINED> instruction: 0xb6080017
    4320:	22000005 	andcs	r0, r0, #5
    4324:	080017ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip}
    4328:	00000bfe 	strdeq	r0, [r0], -lr
    432c:	00180a37 	andseq	r0, r8, r7, lsr sl
    4330:	00089208 	andeq	r9, r8, r8, lsl #4
    4334:	203a0000 	eorscs	r0, sl, r0
    4338:	01000015 	tsteq	r0, r5, lsl r0
    433c:	000003f1 	strdeq	r0, [r0], -r1
    4340:	00020000 	andeq	r0, r2, r0
    4344:	9c010000 	stcls	0, cr0, [r1], {-0}
    4348:	0005e73b 	andeq	lr, r5, fp, lsr r7
    434c:	6bec0400 	blvs	ffb05354 <BootRAM+0xea75af5>
    4350:	3b000004 	blcc	4368 <__Stack_Size+0x3f68>
    4354:	00000246 	andeq	r0, r0, r6, asr #4
    4358:	029aee04 	addseq	lr, sl, #4, 28	; 0x40
    435c:	8b3b0000 	blhi	ec4364 <__Stack_Size+0xec3f64>
    4360:	04000013 	streq	r0, [r0], #-19
    4364:	00004cf2 	strdeq	r4, [r0], -r2
    4368:	13963b00 	orrsne	r3, r6, #0, 22
    436c:	f3040000 	vhadd.u8	d0, d4, d0
    4370:	0000004c 	andeq	r0, r0, ip, asr #32
    4374:	00027c3b 	andeq	r7, r2, fp, lsr ip
    4378:	d2220500 	eorle	r0, r2, #0, 10
    437c:	0b00000c 	bleq	43b4 <__Stack_Size+0x3fb4>
    4380:	00038104 	andeq	r8, r3, r4, lsl #2
    4384:	052f3b00 	streq	r3, [pc, #-2816]!	; 388c <__Stack_Size+0x348c>
    4388:	25050000 	strcs	r0, [r5, #-0]
    438c:	00000ce3 	andeq	r0, r0, r3, ror #25
    4390:	046b040b 	strbteq	r0, [fp], #-1035	; 0x40b
    4394:	f83b0000 			; <UNDEFINED> instruction: 0xf83b0000
    4398:	05000013 	streq	r0, [r0, #-19]
    439c:	000cf42a 	andeq	pc, ip, sl, lsr #8
    43a0:	ef040b00 	svc	0x00040b00
    43a4:	3c000004 	stccc	0, cr0, [r0], {4}
    43a8:	00001764 	andeq	r1, r0, r4, ror #14
    43ac:	02e52401 	rsceq	r2, r5, #16777216	; 0x1000000
    43b0:	03050000 	movweq	r0, #20480	; 0x5000
    43b4:	20000312 	andcs	r0, r0, r2, lsl r3
    43b8:	0015a53c 	andseq	sl, r5, ip, lsr r5
    43bc:	94250100 	strtls	r0, [r5], #-256	; 0x100
    43c0:	05000000 	streq	r0, [r0, #-0]
    43c4:	000b2c03 	andeq	r2, fp, r3, lsl #24
    43c8:	131d3d20 	tstne	sp, #32, 26	; 0x800
    43cc:	53070000 	movwpl	r0, #28672	; 0x7000
    43d0:	00004c02 	andeq	r4, r0, r2, lsl #24
    43d4:	000d3200 	andeq	r3, sp, r0, lsl #4
    43d8:	005e0d00 	subseq	r0, lr, r0, lsl #26
    43dc:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    43e0:	000014f2 	strdeq	r1, [r0], -r2
    43e4:	0d4d1906 	stcleq	9, cr1, [sp, #-24]	; 0xffffffe8
    43e8:	d70d0000 	strle	r0, [sp, -r0]
    43ec:	0d000001 	stceq	0, cr0, [r0, #-4]
    43f0:	0000004c 	andeq	r0, r0, ip, asr #32
    43f4:	00004c0d 	andeq	r4, r0, sp, lsl #24
    43f8:	ef3f0000 	svc	0x003f0000
    43fc:	07000011 	smladeq	r0, r1, r0, r0
    4400:	0d640256 	sfmeq	f0, 2, [r4, #-344]!	; 0xfffffea8
    4404:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    4408:	0d000000 	stceq	0, cr0, [r0, #-0]
    440c:	0000004c 	andeq	r0, r0, ip, asr #32
    4410:	13293f00 	teqne	r9, #0, 30
    4414:	4e070000 	cdpmi	0, 0, cr0, cr7, cr0, {0}
    4418:	000d7602 	andeq	r7, sp, r2, lsl #12
    441c:	005e0d00 	subseq	r0, lr, r0, lsl #26
    4420:	3f000000 	svccc	0x00000000
    4424:	00001336 	andeq	r1, r0, r6, lsr r3
    4428:	8d023a07 	vstrhi	s6, [r2, #-28]	; 0xffffffe4
    442c:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    4430:	0000005e 	andeq	r0, r0, lr, asr r0
    4434:	00004c0d 	andeq	r4, r0, sp, lsl #24
    4438:	8d3f0000 	ldchi	0, cr0, [pc, #-0]	; 4440 <__Stack_Size+0x4040>
    443c:	07000007 	streq	r0, [r0, -r7]
    4440:	0da40257 	sfmeq	f0, 4, [r4, #348]!	; 0x15c
    4444:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    4448:	0d000000 	stceq	0, cr0, [r0, #-0]
    444c:	0000004c 	andeq	r0, r0, ip, asr #32
    4450:	10763f00 	rsbsne	r3, r6, r0, lsl #30
    4454:	4d070000 	stcmi	0, cr0, [r7, #-0]
    4458:	000db602 	andeq	fp, sp, r2, lsl #12
    445c:	005e0d00 	subseq	r0, lr, r0, lsl #26
    4460:	3d000000 	stccc	0, cr0, [r0, #-0]
    4464:	00001100 	andeq	r1, r0, r0, lsl #2
    4468:	4c025407 	cfstrsmi	mvf5, [r2], {7}
    446c:	cc000000 	stcgt	0, cr0, [r0], {-0}
    4470:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    4474:	0000005e 	andeq	r0, r0, lr, asr r0
    4478:	169f4000 	ldrne	r4, [pc], r0
    447c:	1a060000 	bne	184484 <__Stack_Size+0x184084>
    4480:	0001d70d 	andeq	sp, r1, sp, lsl #14
    4484:	004c0d00 	subeq	r0, ip, r0, lsl #26
    4488:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    448c:	00000000 	andeq	r0, r0, r0
    4490:	00017000 	andeq	r7, r1, r0
    4494:	df000400 	svcle	0x00000400
    4498:	04000013 	streq	r0, [r0], #-19
    449c:	00015801 	andeq	r5, r1, r1, lsl #16
    44a0:	17d90100 	ldrbne	r0, [r9, r0, lsl #2]
    44a4:	07cd0000 	strbeq	r0, [sp, r0]
    44a8:	06000000 	streq	r0, [r0], -r0
    44ac:	00000000 	andeq	r0, r0, r0
    44b0:	14010000 	strne	r0, [r1], #-0
    44b4:	04020000 	streq	r0, [r2], #-0
    44b8:	0001f605 	andeq	pc, r1, r5, lsl #12
    44bc:	05020200 	streq	r0, [r2, #-512]	; 0x200
    44c0:	00000698 	muleq	r0, r8, r6
    44c4:	44060102 	strmi	r0, [r6], #-258	; 0x102
    44c8:	03000006 	movweq	r0, #6
    44cc:	00323375 	eorseq	r3, r2, r5, ror r3
    44d0:	00452402 	subeq	r2, r5, r2, lsl #8
    44d4:	04020000 	streq	r0, [r2], #-0
    44d8:	00037b07 	andeq	r7, r3, r7, lsl #22
    44dc:	31750300 	cmncc	r5, r0, lsl #6
    44e0:	25020036 	strcs	r0, [r2, #-54]	; 0x36
    44e4:	00000057 	andeq	r0, r0, r7, asr r0
    44e8:	d7070202 	strle	r0, [r7, -r2, lsl #4]
    44ec:	03000003 	movweq	r0, #3
    44f0:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    44f4:	00006826 	andeq	r6, r0, r6, lsr #16
    44f8:	08010200 	stmdaeq	r1, {r9}
    44fc:	00000642 	andeq	r0, r0, r2, asr #12
    4500:	005e0404 	subseq	r0, lr, r4, lsl #8
    4504:	f2050000 	vhadd.s8	d0, d5, d0
    4508:	01000014 	tsteq	r0, r4, lsl r0
    450c:	00181823 	andseq	r1, r8, r3, lsr #16
    4510:	00003008 	andeq	r3, r0, r8
    4514:	fd9c0100 	ldc2	1, cr0, [ip]
    4518:	06000000 	streq	r0, [r0], -r0
    451c:	000017f3 	strdeq	r1, [r0], -r3
    4520:	006f2301 	rsbeq	r2, pc, r1, lsl #6
    4524:	1db10000 	ldcne	0, cr0, [r1]
    4528:	08060000 	stmdaeq	r6, {}	; <UNPREDICTABLE>
    452c:	01000018 	tsteq	r0, r8, lsl r0
    4530:	00004c23 	andeq	r4, r0, r3, lsr #24
    4534:	001df600 	andseq	pc, sp, r0, lsl #12
    4538:	17eb0600 	strbne	r0, [fp, r0, lsl #12]!
    453c:	23010000 	movwcs	r0, #4096	; 0x1000
    4540:	0000004c 	andeq	r0, r0, ip, asr #32
    4544:	00001e17 	andeq	r1, r0, r7, lsl lr
    4548:	01006e07 	tsteq	r0, r7, lsl #28
    454c:	00003a25 	andeq	r3, r0, r5, lsr #20
    4550:	08520100 	ldmdaeq	r2, {r8}^
    4554:	26010069 	strcs	r0, [r1], -r9, rrx
    4558:	0000003a 	andeq	r0, r0, sl, lsr r0
    455c:	00001e38 	andeq	r1, r0, r8, lsr lr
    4560:	0017fc09 	andseq	pc, r7, r9, lsl #24
    4564:	3a260100 	bcc	98496c <__Stack_Size+0x98456c>
    4568:	97000000 	strls	r0, [r0, -r0]
    456c:	0900001e 	stmdbeq	r0, {r1, r2, r3, r4}
    4570:	00001802 	andeq	r1, r0, r2, lsl #16
    4574:	003a2601 	eorseq	r2, sl, r1, lsl #12
    4578:	1ece0000 	cdpne	0, 12, cr0, cr14, cr0, {0}
    457c:	14090000 	strne	r0, [r9], #-0
    4580:	01000018 	tsteq	r0, r8, lsl r0
    4584:	0000fd27 	andeq	pc, r0, r7, lsr #26
    4588:	001ef200 	andseq	pc, lr, r0, lsl #4
    458c:	04040000 	streq	r0, [r4], #-0
    4590:	0000004c 	andeq	r0, r0, ip, asr #32
    4594:	00169f05 	andseq	r9, r6, r5, lsl #30
    4598:	483c0100 	ldmdami	ip!, {r8}
    459c:	24080018 	strcs	r0, [r8], #-24
    45a0:	01000000 	mrseq	r0, (UNDEF: 0)
    45a4:	00016d9c 	muleq	r1, ip, sp
    45a8:	17f30600 	ldrbne	r0, [r3, r0, lsl #12]!
    45ac:	3c010000 	stccc	0, cr0, [r1], {-0}
    45b0:	0000006f 	andeq	r0, r0, pc, rrx
    45b4:	00001f2d 	andeq	r1, r0, sp, lsr #30
    45b8:	00180806 	andseq	r0, r8, r6, lsl #16
    45bc:	4c3c0100 	ldfmis	f0, [ip], #-0
    45c0:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    45c4:	0600001f 			; <UNDEFINED> instruction: 0x0600001f
    45c8:	000017eb 	andeq	r1, r0, fp, ror #15
    45cc:	004c3c01 	subeq	r3, ip, r1, lsl #24
    45d0:	1f890000 	svcne	0x00890000
    45d4:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    45d8:	3a3e0100 	bcc	f849e0 <__Stack_Size+0xf845e0>
    45dc:	01000000 	mrseq	r0, (UNDEF: 0)
    45e0:	00690852 	rsbeq	r0, r9, r2, asr r8
    45e4:	003a3f01 	eorseq	r3, sl, r1, lsl #30
    45e8:	1faa0000 	svcne	0x00aa0000
    45ec:	14090000 	strne	r0, [r9], #-0
    45f0:	01000018 	tsteq	r0, r8, lsl r0
    45f4:	00016d40 	andeq	r6, r1, r0, asr #26
    45f8:	00200900 	eoreq	r0, r0, r0, lsl #18
    45fc:	04040000 	streq	r0, [r4], #-0
    4600:	0000003a 	andeq	r0, r0, sl, lsr r0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	03065506 	movweq	r5, #25862	; 0x6506
       8:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
       c:	00051308 	andeq	r1, r5, r8, lsl #6
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	11010000 	mrsne	r0, (UNDEF: 1)
      14:	11061000 	mrsne	r1, (UNDEF: 6)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	03011201 	movweq	r1, #4609	; 0x1201
      1c:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	00051308 	andeq	r1, r5, r8, lsl #6
      24:	11010000 	mrsne	r0, (UNDEF: 1)
      28:	130e2501 	movwne	r2, #58625	; 0xe501
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	1b0e030b 	blne	380c60 <__Stack_Size+0x380860>
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	1117550e 	tstne	r7, lr, lsl #10
      34:	00171001 	andseq	r1, r7, r1
      38:	00240200 	eoreq	r0, r4, r0, lsl #4

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	0b3e0b0b 	bleq	f82c70 <__Stack_Size+0xf82870>

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	00000e03 	andeq	r0, r0, r3, lsl #28
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	03001603 	movweq	r1, #1539	; 0x603
      48:	3b0b3a08 	blcc	2ce870 <__Stack_Size+0x2ce470>
      4c:	0013490b 	andseq	r4, r3, fp, lsl #18

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	00160400 	andseq	r0, r6, r0, lsl #8
      54:	0b3a0e03 	bleq	e83868 <__Stack_Size+0xe83468>
      58:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      5c:	35050000 	strcc	r0, [r5, #-0]
      60:	00134900 	andseq	r4, r3, r0, lsl #18
      64:	01040600 	tsteq	r4, r0, lsl #12
      68:	0b3a0b0b 	bleq	e82c9c <__Stack_Size+0xe8289c>
      6c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      70:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
      74:	1c0e0300 	stcne	3, cr0, [lr], {-0}
      78:	0800000d 	stmdaeq	r0, {r0, r2, r3}
      7c:	0b0b0113 	bleq	2c04d0 <__Stack_Size+0x2c00d0>
      80:	0b3b0b3a 	bleq	ec2d70 <__Stack_Size+0xec2970>
      84:	00001301 	andeq	r1, r0, r1, lsl #6
      88:	03000d09 	movweq	r0, #3337	; 0xd09
      8c:	3b0b3a0e 	blcc	2ce8cc <__Stack_Size+0x2ce4cc>
      90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      94:	0a00000b 	beq	c8 <_Minimum_Stack_Size-0x38>
      98:	0b0b000f 	bleq	2c00dc <__Stack_Size+0x2bfcdc>
      9c:	00001349 	andeq	r1, r0, r9, asr #6
      a0:	2700150b 	strcs	r1, [r0, -fp, lsl #10]
      a4:	0c000019 	stceq	0, cr0, [r0], {25}
      a8:	0e030104 	adfeqs	f0, f3, f4
      ac:	0b3a0b0b 	bleq	e82ce0 <__Stack_Size+0xe828e0>
      b0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      b4:	130d0000 	movwne	r0, #53248	; 0xd000
      b8:	0b0e0301 	bleq	380cc4 <__Stack_Size+0x3808c4>
      bc:	3b0b3a0b 	blcc	2ce8f0 <__Stack_Size+0x2ce4f0>
      c0:	0013010b 	andseq	r0, r3, fp, lsl #2
      c4:	01150e00 	tsteq	r5, r0, lsl #28
      c8:	13491927 	movtne	r1, #39207	; 0x9927
      cc:	00001301 	andeq	r1, r0, r1, lsl #6
      d0:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
      d4:	10000013 	andne	r0, r0, r3, lsl r0
      d8:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
      dc:	0b3a0b0b 	bleq	e82d10 <__Stack_Size+0xe82910>
      e0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      e4:	0d110000 	ldceq	0, cr0, [r1, #-0]
      e8:	3a080300 	bcc	200cf0 <__Stack_Size+0x2008f0>
      ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      f0:	000b3813 	andeq	r3, fp, r3, lsl r8
      f4:	01171200 	tsteq	r7, r0, lsl #4
      f8:	0b3a0b0b 	bleq	e82d2c <__Stack_Size+0xe8292c>
      fc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     100:	0d130000 	ldceq	0, cr0, [r3, #-0]
     104:	3a080300 	bcc	200d0c <__Stack_Size+0x20090c>
     108:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     10c:	14000013 	strne	r0, [r0], #-19
     110:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     114:	0b3a0e03 	bleq	e83928 <__Stack_Size+0xe83528>
     118:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     11c:	0b201349 	bleq	804e48 <__Stack_Size+0x804a48>
     120:	00001301 	andeq	r1, r0, r1, lsl #6
     124:	03000515 	movweq	r0, #1301	; 0x515
     128:	3b0b3a0e 	blcc	2ce968 <__Stack_Size+0x2ce568>
     12c:	00134905 	andseq	r4, r3, r5, lsl #18
     130:	002e1600 	eoreq	r1, lr, r0, lsl #12
     134:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     138:	0b3b0b3a 	bleq	ec2e28 <__Stack_Size+0xec2a28>
     13c:	0b201927 	bleq	8065e0 <__Stack_Size+0x8061e0>
     140:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
     144:	03193f00 	tsteq	r9, #0, 30
     148:	3b0b3a0e 	blcc	2ce988 <__Stack_Size+0x2ce588>
     14c:	1119270b 	tstne	r9, fp, lsl #14
     150:	40061201 	andmi	r1, r6, r1, lsl #4
     154:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     158:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     15c:	03193f00 	tsteq	r9, #0, 30
     160:	3b0b3a0e 	blcc	2ce9a0 <__Stack_Size+0x2ce5a0>
     164:	11192705 	tstne	r9, r5, lsl #14
     168:	40061201 	andmi	r1, r6, r1, lsl #4
     16c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     170:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     174:	03193f01 	tsteq	r9, #1, 30
     178:	3b0b3a0e 	blcc	2ce9b8 <__Stack_Size+0x2ce5b8>
     17c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     180:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     184:	97184006 	ldrls	r4, [r8, -r6]
     188:	13011942 	movwne	r1, #6466	; 0x1942
     18c:	051a0000 	ldreq	r0, [sl, #-0]
     190:	3a0e0300 	bcc	380d98 <__Stack_Size+0x380998>
     194:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     198:	00170213 	andseq	r0, r7, r3, lsl r2
     19c:	00051b00 	andeq	r1, r5, r0, lsl #22
     1a0:	0b3a0e03 	bleq	e839b4 <__Stack_Size+0xe835b4>
     1a4:	1349053b 	movtne	r0, #38203	; 0x953b
     1a8:	00001802 	andeq	r1, r0, r2, lsl #16
     1ac:	3f012e1c 	svccc	0x00012e1c
     1b0:	3a0e0319 	bcc	380e1c <__Stack_Size+0x380a1c>
     1b4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     1b8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     1bc:	97184006 	ldrls	r4, [r8, -r6]
     1c0:	13011942 	movwne	r1, #6466	; 0x1942
     1c4:	0b1d0000 	bleq	7401cc <__Stack_Size+0x73fdcc>
     1c8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     1cc:	00130106 	andseq	r0, r3, r6, lsl #2
     1d0:	00341e00 	eorseq	r1, r4, r0, lsl #28
     1d4:	0b3a0e03 	bleq	e839e8 <__Stack_Size+0xe835e8>
     1d8:	1349053b 	movtne	r0, #38203	; 0x953b
     1dc:	00001702 	andeq	r1, r0, r2, lsl #14
     1e0:	0182891f 	orreq	r8, r2, pc, lsl r9
     1e4:	31011100 	mrscc	r1, (UNDEF: 17)
     1e8:	20000013 	andcs	r0, r0, r3, lsl r0
     1ec:	01018289 	smlabbeq	r1, r9, r2, r8
     1f0:	13310111 	teqne	r1, #1073741828	; 0x40000004
     1f4:	00001301 	andeq	r1, r0, r1, lsl #6
     1f8:	01828a21 	orreq	r8, r2, r1, lsr #20
     1fc:	91180200 	tstls	r8, r0, lsl #4
     200:	00001842 	andeq	r1, r0, r2, asr #16
     204:	01828922 	orreq	r8, r2, r2, lsr #18
     208:	95011101 	strls	r1, [r1, #-257]	; 0x101
     20c:	13311942 	teqne	r1, #1081344	; 0x108000
     210:	89230000 	stmdbhi	r3!, {}	; <UNPREDICTABLE>
     214:	11010182 	smlabbne	r1, r2, r1, r0
     218:	24000001 	strcs	r0, [r0], #-1
     21c:	08030005 	stmdaeq	r3, {r0, r2}
     220:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     224:	17021349 	strne	r1, [r2, -r9, asr #6]
     228:	89250000 	stmdbhi	r5!, {}	; <UNPREDICTABLE>
     22c:	11000182 	smlabbne	r0, r2, r1, r0
     230:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     234:	00001331 	andeq	r1, r0, r1, lsr r3
     238:	03003426 	movweq	r3, #1062	; 0x426
     23c:	3b0b3a0e 	blcc	2cea7c <__Stack_Size+0x2ce67c>
     240:	00134905 	andseq	r4, r3, r5, lsl #18
     244:	012e2700 	teqeq	lr, r0, lsl #14
     248:	01111331 	tsteq	r1, r1, lsr r3
     24c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     250:	01194297 			; <UNDEFINED> instruction: 0x01194297
     254:	28000013 	stmdacs	r0, {r0, r1, r4}
     258:	13310005 	teqne	r1, #5
     25c:	00001702 	andeq	r1, r0, r2, lsl #14
     260:	11010b29 	tstne	r1, r9, lsr #22
     264:	00061201 	andeq	r1, r6, r1, lsl #4
     268:	012e2a00 	teqeq	lr, r0, lsl #20
     26c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     270:	0b3b0b3a 	bleq	ec2f60 <__Stack_Size+0xec2b60>
     274:	01111927 	tsteq	r1, r7, lsr #18
     278:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     27c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     280:	2b000013 	blcs	2d4 <_Minimum_Stack_Size+0x1d4>
     284:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     288:	0b3b0b3a 	bleq	ec2f78 <__Stack_Size+0xec2b78>
     28c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     290:	1d2c0000 	stcne	0, cr0, [ip, #-0]
     294:	11133101 	tstne	r3, r1, lsl #2
     298:	58061201 	stmdapl	r6, {r0, r9, ip}
     29c:	010b590b 	tsteq	fp, fp, lsl #18
     2a0:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     2a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     2a8:	0b3b0b3a 	bleq	ec2f98 <__Stack_Size+0xec2b98>
     2ac:	17021349 	strne	r1, [r2, -r9, asr #6]
     2b0:	052e0000 	streq	r0, [lr, #-0]!
     2b4:	3a0e0300 	bcc	380ebc <__Stack_Size+0x380abc>
     2b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2bc:	00170213 	andseq	r0, r7, r3, lsl r2
     2c0:	012e2f00 	teqeq	lr, r0, lsl #30
     2c4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     2c8:	0b3b0b3a 	bleq	ec2fb8 <__Stack_Size+0xec2bb8>
     2cc:	13491927 	movtne	r1, #39207	; 0x9927
     2d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     2d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     2d8:	00130119 	andseq	r0, r3, r9, lsl r1
     2dc:	00343000 	eorseq	r3, r4, r0
     2e0:	0b3a0e03 	bleq	e83af4 <__Stack_Size+0xe836f4>
     2e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2e8:	00000b1c 	andeq	r0, r0, ip, lsl fp
     2ec:	3f002e31 	svccc	0x00002e31
     2f0:	3a0e0319 	bcc	380f5c <__Stack_Size+0x380b5c>
     2f4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     2f8:	11134919 	tstne	r3, r9, lsl r9
     2fc:	40061201 	andmi	r1, r6, r1, lsl #4
     300:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     304:	34320000 	ldrtcc	r0, [r2], #-0
     308:	3a0e0300 	bcc	380f10 <__Stack_Size+0x380b10>
     30c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     310:	00180213 	andseq	r0, r8, r3, lsl r2
     314:	82893300 	addhi	r3, r9, #0, 6
     318:	01110101 	tsteq	r1, r1, lsl #2
     31c:	00001331 	andeq	r1, r0, r1, lsr r3
     320:	3f012e34 	svccc	0x00012e34
     324:	3a0e0319 	bcc	380f90 <__Stack_Size+0x380b90>
     328:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     32c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     330:	96184006 	ldrls	r4, [r8], -r6
     334:	13011942 	movwne	r1, #6466	; 0x1942
     338:	34350000 	ldrtcc	r0, [r5], #-0
     33c:	3a0e0300 	bcc	380f44 <__Stack_Size+0x380b44>
     340:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     344:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     348:	36000018 			; <UNDEFINED> instruction: 0x36000018
     34c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     350:	0b3b0b3a 	bleq	ec3040 <__Stack_Size+0xec2c40>
     354:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     358:	0000193c 	andeq	r1, r0, ip, lsr r9
     35c:	49010137 	stmdbmi	r1, {r0, r1, r2, r4, r5, r8}
     360:	00130113 	andseq	r0, r3, r3, lsl r1
     364:	00213800 	eoreq	r3, r1, r0, lsl #16
     368:	0b2f1349 	bleq	bc5094 <__Stack_Size+0xbc4c94>
     36c:	24390000 	ldrtcs	r0, [r9], #-0
     370:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     374:	0008030b 	andeq	r0, r8, fp, lsl #6
     378:	00213a00 	eoreq	r3, r1, r0, lsl #20
     37c:	2e3b0000 	cdpcs	0, 3, cr0, cr11, cr0, {0}
     380:	03193f00 	tsteq	r9, #0, 30
     384:	3b0b3a0e 	blcc	2cebc4 <__Stack_Size+0x2ce7c4>
     388:	3c19270b 	ldccc	7, cr2, [r9], {11}
     38c:	3c000019 	stccc	0, cr0, [r0], {25}
     390:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     394:	0b3a0e03 	bleq	e83ba8 <__Stack_Size+0xe837a8>
     398:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     39c:	1301193c 	movwne	r1, #6460	; 0x193c
     3a0:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
     3a4:	03193f01 	tsteq	r9, #1, 30
     3a8:	3b0b3a0e 	blcc	2cebe8 <__Stack_Size+0x2ce7e8>
     3ac:	3c19270b 	ldccc	7, cr2, [r9], {11}
     3b0:	00130119 	andseq	r0, r3, r9, lsl r1
     3b4:	002e3e00 	eoreq	r3, lr, r0, lsl #28
     3b8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     3bc:	0b3b0b3a 	bleq	ec30ac <__Stack_Size+0xec2cac>
     3c0:	13491927 	movtne	r1, #39207	; 0x9927
     3c4:	0000193c 	andeq	r1, r0, ip, lsr r9
     3c8:	3f012e3f 	svccc	0x00012e3f
     3cc:	3a0e0319 	bcc	381038 <__Stack_Size+0x380c38>
     3d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     3d4:	3c134919 	ldccc	9, cr4, [r3], {25}
     3d8:	00130119 	andseq	r0, r3, r9, lsl r1
     3dc:	002e4000 	eoreq	r4, lr, r0
     3e0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     3e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     3e8:	13491927 	movtne	r1, #39207	; 0x9927
     3ec:	0000193c 	andeq	r1, r0, ip, lsr r9
     3f0:	01110100 	tsteq	r1, r0, lsl #2
     3f4:	0b130e25 	bleq	4c3c90 <__Stack_Size+0x4c3890>
     3f8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     3fc:	00001710 	andeq	r1, r0, r0, lsl r7
     400:	0b002402 	bleq	9410 <__Stack_Size+0x9010>
     404:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     408:	0300000e 	movweq	r0, #14
     40c:	08030016 	stmdaeq	r3, {r1, r2, r4}
     410:	0b3b0b3a 	bleq	ec3100 <__Stack_Size+0xec2d00>
     414:	00001349 	andeq	r1, r0, r9, asr #6
     418:	03011304 	movweq	r1, #4868	; 0x1304
     41c:	3a0b0b0e 	bcc	2c305c <__Stack_Size+0x2c2c5c>
     420:	010b3b0b 	tsteq	fp, fp, lsl #22
     424:	05000013 	streq	r0, [r0, #-19]
     428:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     42c:	0b3b0b3a 	bleq	ec311c <__Stack_Size+0xec2d1c>
     430:	0b381349 	bleq	e0515c <__Stack_Size+0xe04d5c>
     434:	0f060000 	svceq	0x00060000
     438:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     43c:	07000013 	smladeq	r0, r3, r0, r0
     440:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     444:	0b3b0b3a 	bleq	ec3134 <__Stack_Size+0xec2d34>
     448:	00001349 	andeq	r1, r0, r9, asr #6
     44c:	03003408 	movweq	r3, #1032	; 0x408
     450:	3b0b3a0e 	blcc	2cec90 <__Stack_Size+0x2ce890>
     454:	3f13490b 	svccc	0x0013490b
     458:	00180219 	andseq	r0, r8, r9, lsl r2
     45c:	00240900 	eoreq	r0, r4, r0, lsl #18
     460:	0b3e0b0b 	bleq	f83094 <__Stack_Size+0xf82c94>
     464:	00000803 	andeq	r0, r0, r3, lsl #16
     468:	4901010a 	stmdbmi	r1, {r1, r3, r8}
     46c:	00130113 	andseq	r0, r3, r3, lsl r1
     470:	00210b00 	eoreq	r0, r1, r0, lsl #22
     474:	0b2f1349 	bleq	bc51a0 <__Stack_Size+0xbc4da0>
     478:	01000000 	mrseq	r0, (UNDEF: 0)
     47c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     480:	0e030b13 	vmoveq.32	d3[0], r0
     484:	17550e1b 	smmlane	r5, fp, lr, r0
     488:	17100111 			; <UNDEFINED> instruction: 0x17100111
     48c:	24020000 	strcs	r0, [r2], #-0
     490:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     494:	000e030b 	andeq	r0, lr, fp, lsl #6
     498:	00160300 	andseq	r0, r6, r0, lsl #6
     49c:	0b3a0803 	bleq	e824b0 <__Stack_Size+0xe820b0>
     4a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4a4:	04040000 	streq	r0, [r4], #-0
     4a8:	3a0b0b01 	bcc	2c30b4 <__Stack_Size+0x2c2cb4>
     4ac:	010b3b0b 	tsteq	fp, fp, lsl #22
     4b0:	05000013 	streq	r0, [r0, #-19]
     4b4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     4b8:	00000d1c 	andeq	r0, r0, ip, lsl sp
     4bc:	03001606 	movweq	r1, #1542	; 0x606
     4c0:	3b0b3a0e 	blcc	2ced00 <__Stack_Size+0x2ce900>
     4c4:	0013490b 	andseq	r4, r3, fp, lsl #18
     4c8:	012e0700 	teqeq	lr, r0, lsl #14
     4cc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     4d0:	0b3b0b3a 	bleq	ec31c0 <__Stack_Size+0xec2dc0>
     4d4:	01111349 	tsteq	r1, r9, asr #6
     4d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     4dc:	01194297 			; <UNDEFINED> instruction: 0x01194297
     4e0:	08000013 	stmdaeq	r0, {r0, r1, r4}
     4e4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     4e8:	0b3b0b3a 	bleq	ec31d8 <__Stack_Size+0xec2dd8>
     4ec:	17021349 	strne	r1, [r2, -r9, asr #6]
     4f0:	0b090000 	bleq	2404f8 <__Stack_Size+0x2400f8>
     4f4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     4f8:	00130106 	andseq	r0, r3, r6, lsl #2
     4fc:	012e0a00 	teqeq	lr, r0, lsl #20
     500:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     504:	0b3b0b3a 	bleq	ec31f4 <__Stack_Size+0xec2df4>
     508:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     50c:	00001301 	andeq	r1, r0, r1, lsl #6
     510:	0000180b 	andeq	r1, r0, fp, lsl #16
     514:	82890c00 	addhi	r0, r9, #0, 24
     518:	01110101 	tsteq	r1, r1, lsl #2
     51c:	13011331 	movwne	r1, #4913	; 0x1331
     520:	8a0d0000 	bhi	340528 <__Stack_Size+0x340128>
     524:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     528:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     52c:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
     530:	11000182 	smlabbne	r0, r2, r1, r0
     534:	00133101 	andseq	r3, r3, r1, lsl #2
     538:	82890f00 	addhi	r0, r9, #0, 30
     53c:	01110101 	tsteq	r1, r1, lsl #2
     540:	00001331 	andeq	r1, r0, r1, lsr r3
     544:	03003410 	movweq	r3, #1040	; 0x410
     548:	3b0b3a0e 	blcc	2ced88 <__Stack_Size+0x2ce988>
     54c:	0013490b 	andseq	r4, r3, fp, lsl #18
     550:	00241100 	eoreq	r1, r4, r0, lsl #2
     554:	0b3e0b0b 	bleq	f83188 <__Stack_Size+0xf82d88>
     558:	00000803 	andeq	r0, r0, r3, lsl #16
     55c:	03003412 	movweq	r3, #1042	; 0x412
     560:	3b0b3a0e 	blcc	2ceda0 <__Stack_Size+0x2ce9a0>
     564:	3f13490b 	svccc	0x0013490b
     568:	00180219 	andseq	r0, r8, r9, lsl r2
     56c:	012e1300 	teqeq	lr, r0, lsl #6
     570:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     574:	0b3b0b3a 	bleq	ec3264 <__Stack_Size+0xec2e64>
     578:	13491927 	movtne	r1, #39207	; 0x9927
     57c:	1301193c 	movwne	r1, #6460	; 0x193c
     580:	05140000 	ldreq	r0, [r4, #-0]
     584:	00134900 	andseq	r4, r3, r0, lsl #18
     588:	012e1500 	teqeq	lr, r0, lsl #10
     58c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     590:	0b3b0b3a 	bleq	ec3280 <__Stack_Size+0xec2e80>
     594:	1301193c 	movwne	r1, #6460	; 0x193c
     598:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
     59c:	03193f00 	tsteq	r9, #0, 30
     5a0:	3b0b3a0e 	blcc	2cede0 <__Stack_Size+0x2ce9e0>
     5a4:	3c19270b 	ldccc	7, cr2, [r9], {11}
     5a8:	17000019 	smladne	r0, r9, r0, r0
     5ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     5b0:	0b3a0e03 	bleq	e83dc4 <__Stack_Size+0xe839c4>
     5b4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     5b8:	1301193c 	movwne	r1, #6460	; 0x193c
     5bc:	01000000 	mrseq	r0, (UNDEF: 0)
     5c0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     5c4:	0e030b13 	vmoveq.32	d3[0], r0
     5c8:	17550e1b 	smmlane	r5, fp, lr, r0
     5cc:	17100111 			; <UNDEFINED> instruction: 0x17100111
     5d0:	24020000 	strcs	r0, [r2], #-0
     5d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     5d8:	000e030b 	andeq	r0, lr, fp, lsl #6
     5dc:	00160300 	andseq	r0, r6, r0, lsl #6
     5e0:	0b3a0803 	bleq	e825f4 <__Stack_Size+0xe821f4>
     5e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     5e8:	16040000 	strne	r0, [r4], -r0
     5ec:	3a0e0300 	bcc	3811f4 <__Stack_Size+0x380df4>
     5f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5f4:	05000013 	streq	r0, [r0, #-19]
     5f8:	13490035 	movtne	r0, #36917	; 0x9035
     5fc:	26060000 	strcs	r0, [r6], -r0
     600:	00134900 	andseq	r4, r3, r0, lsl #18
     604:	01040700 	tsteq	r4, r0, lsl #14
     608:	0b3a0b0b 	bleq	e8323c <__Stack_Size+0xe82e3c>
     60c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     610:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
     614:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     618:	0900000d 	stmdbeq	r0, {r0, r2, r3}
     61c:	0b0b0113 	bleq	2c0a70 <__Stack_Size+0x2c0670>
     620:	0b3b0b3a 	bleq	ec3310 <__Stack_Size+0xec2f10>
     624:	00001301 	andeq	r1, r0, r1, lsl #6
     628:	03000d0a 	movweq	r0, #3338	; 0xd0a
     62c:	3b0b3a08 	blcc	2cee54 <__Stack_Size+0x2cea54>
     630:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     634:	0b00000b 	bleq	668 <__Stack_Size+0x268>
     638:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     63c:	0b3b0b3a 	bleq	ec332c <__Stack_Size+0xec2f2c>
     640:	0b381349 	bleq	e0536c <__Stack_Size+0xe04f6c>
     644:	130c0000 	movwne	r0, #49152	; 0xc000
     648:	3a050b01 	bcc	143254 <__Stack_Size+0x142e54>
     64c:	010b3b0b 	tsteq	fp, fp, lsl #22
     650:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     654:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     658:	0b3b0b3a 	bleq	ec3348 <__Stack_Size+0xec2f48>
     65c:	05381349 	ldreq	r1, [r8, #-841]!	; 0x349
     660:	0d0e0000 	stceq	0, cr0, [lr, #-0]
     664:	3a080300 	bcc	20126c <__Stack_Size+0x200e6c>
     668:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     66c:	00053813 	andeq	r3, r5, r3, lsl r8
     670:	01010f00 	tsteq	r1, r0, lsl #30
     674:	13011349 	movwne	r1, #4937	; 0x1349
     678:	21100000 	tstcs	r0, r0
     67c:	2f134900 	svccs	0x00134900
     680:	1100000b 	tstne	r0, fp
     684:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     688:	0b3a0b0b 	bleq	e832bc <__Stack_Size+0xe82ebc>
     68c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     690:	15120000 	ldrne	r0, [r2, #-0]
     694:	00192700 	andseq	r2, r9, r0, lsl #14
     698:	000f1300 	andeq	r1, pc, r0, lsl #6
     69c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     6a0:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     6a4:	03193f00 	tsteq	r9, #0, 30
     6a8:	3b0b3a0e 	blcc	2ceee8 <__Stack_Size+0x2ceae8>
     6ac:	20192705 	andscs	r2, r9, r5, lsl #14
     6b0:	1500000b 	strne	r0, [r0, #-11]
     6b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     6b8:	0b3a0e03 	bleq	e83ecc <__Stack_Size+0xe83acc>
     6bc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     6c0:	13010b20 	movwne	r0, #6944	; 0x1b20
     6c4:	05160000 	ldreq	r0, [r6, #-0]
     6c8:	3a0e0300 	bcc	3812d0 <__Stack_Size+0x380ed0>
     6cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6d0:	17000013 	smladne	r0, r3, r0, r0
     6d4:	08030005 	stmdaeq	r3, {r0, r2}
     6d8:	0b3b0b3a 	bleq	ec33c8 <__Stack_Size+0xec2fc8>
     6dc:	00001349 	andeq	r1, r0, r9, asr #6
     6e0:	31012e18 	tstcc	r1, r8, lsl lr
     6e4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     6e8:	97184006 	ldrls	r4, [r8, -r6]
     6ec:	13011942 	movwne	r1, #6466	; 0x1942
     6f0:	05190000 	ldreq	r0, [r9, #-0]
     6f4:	02133100 	andseq	r3, r3, #0, 2
     6f8:	1a000018 	bne	760 <__Stack_Size+0x360>
     6fc:	13310005 	teqne	r1, #5
     700:	00001702 	andeq	r1, r0, r2, lsl #14
     704:	3f012e1b 	svccc	0x00012e1b
     708:	3a0e0319 	bcc	381374 <__Stack_Size+0x380f74>
     70c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     710:	11134919 	tstne	r3, r9, lsl r9
     714:	40061201 	andmi	r1, r6, r1, lsl #4
     718:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     71c:	00001301 	andeq	r1, r0, r1, lsl #6
     720:	0300051c 	movweq	r0, #1308	; 0x51c
     724:	3b0b3a0e 	blcc	2cef64 <__Stack_Size+0x2ceb64>
     728:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     72c:	1d000017 	stcne	0, cr0, [r0, #-92]	; 0xffffffa4
     730:	08030005 	stmdaeq	r3, {r0, r2}
     734:	0b3b0b3a 	bleq	ec3424 <__Stack_Size+0xec3024>
     738:	17021349 	strne	r1, [r2, -r9, asr #6]
     73c:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
     740:	03193f01 	tsteq	r9, #1, 30
     744:	3b0b3a0e 	blcc	2cef84 <__Stack_Size+0x2ceb84>
     748:	1113490b 	tstne	r3, fp, lsl #18
     74c:	40061201 	andmi	r1, r6, r1, lsl #4
     750:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     754:	00001301 	andeq	r1, r0, r1, lsl #6
     758:	0300341f 	movweq	r3, #1055	; 0x41f
     75c:	3b0b3a0e 	blcc	2cef9c <__Stack_Size+0x2ceb9c>
     760:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     764:	20000017 	andcs	r0, r0, r7, lsl r0
     768:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     76c:	0b3a0e03 	bleq	e83f80 <__Stack_Size+0xe83b80>
     770:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     774:	06120111 			; <UNDEFINED> instruction: 0x06120111
     778:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     77c:	00130119 	andseq	r0, r3, r9, lsl r1
     780:	00052100 	andeq	r2, r5, r0, lsl #2
     784:	0b3a0e03 	bleq	e83f98 <__Stack_Size+0xe83b98>
     788:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     78c:	00001802 	andeq	r1, r0, r2, lsl #16
     790:	03003422 	movweq	r3, #1058	; 0x422
     794:	3b0b3a08 	blcc	2cefbc <__Stack_Size+0x2cebbc>
     798:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     79c:	23000017 	movwcs	r0, #23
     7a0:	01018289 	smlabbeq	r1, r9, r2, r8
     7a4:	13310111 	teqne	r1, #1073741828	; 0x40000004
     7a8:	00001301 	andeq	r1, r0, r1, lsl #6
     7ac:	01828a24 	orreq	r8, r2, r4, lsr #20
     7b0:	91180200 	tstls	r8, r0, lsl #4
     7b4:	00001842 	andeq	r1, r0, r2, asr #16
     7b8:	01828925 	orreq	r8, r2, r5, lsr #18
     7bc:	31011101 	tstcc	r1, r1, lsl #2
     7c0:	26000013 			; <UNDEFINED> instruction: 0x26000013
     7c4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     7c8:	0b3a0e03 	bleq	e83fdc <__Stack_Size+0xe83bdc>
     7cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     7d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     7d8:	27000019 	smladcs	r0, r9, r0, r0
     7dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     7e0:	0b3b0b3a 	bleq	ec34d0 <__Stack_Size+0xec30d0>
     7e4:	0b1c1349 	bleq	705510 <__Stack_Size+0x705110>
     7e8:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
     7ec:	03193f01 	tsteq	r9, #1, 30
     7f0:	3b0b3a0e 	blcc	2cf030 <__Stack_Size+0x2cec30>
     7f4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     7f8:	010b2013 	tsteq	fp, r3, lsl r0
     7fc:	29000013 	stmdbcs	r0, {r0, r1, r4}
     800:	08030005 	stmdaeq	r3, {r0, r2}
     804:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     808:	00001349 	andeq	r1, r0, r9, asr #6
     80c:	0300342a 	movweq	r3, #1066	; 0x42a
     810:	3b0b3a0e 	blcc	2cf050 <__Stack_Size+0x2cec50>
     814:	00134905 	andseq	r4, r3, r5, lsl #18
     818:	00242b00 	eoreq	r2, r4, r0, lsl #22
     81c:	0b3e0b0b 	bleq	f83450 <__Stack_Size+0xf83050>
     820:	00000803 	andeq	r0, r0, r3, lsl #16
     824:	31011d2c 	tstcc	r1, ip, lsr #26
     828:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     82c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     830:	2d00000b 	stccs	0, cr0, [r0, #-44]	; 0xffffffd4
     834:	13310005 	teqne	r1, #5
     838:	00000b1c 	andeq	r0, r0, ip, lsl fp
     83c:	3100052e 	tstcc	r0, lr, lsr #10
     840:	00061c13 	andeq	r1, r6, r3, lsl ip
     844:	010b2f00 	tsteq	fp, r0, lsl #30
     848:	06120111 			; <UNDEFINED> instruction: 0x06120111
     84c:	2e300000 	cdpcs	0, 3, cr0, cr0, cr0, {0}
     850:	03193f01 	tsteq	r9, #1, 30
     854:	3b0b3a0e 	blcc	2cf094 <__Stack_Size+0x2cec94>
     858:	1119270b 	tstne	r9, fp, lsl #14
     85c:	40061201 	andmi	r1, r6, r1, lsl #4
     860:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     864:	00001301 	andeq	r1, r0, r1, lsl #6
     868:	3f012e31 	svccc	0x00012e31
     86c:	3a0e0319 	bcc	3814d8 <__Stack_Size+0x3810d8>
     870:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     874:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     878:	97184006 	ldrls	r4, [r8, -r6]
     87c:	13011942 	movwne	r1, #6466	; 0x1942
     880:	05320000 	ldreq	r0, [r2, #-0]!
     884:	3a0e0300 	bcc	38148c <__Stack_Size+0x38108c>
     888:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     88c:	00180213 	andseq	r0, r8, r3, lsl r2
     890:	00343300 	eorseq	r3, r4, r0, lsl #6
     894:	0b3a0e03 	bleq	e840a8 <__Stack_Size+0xe83ca8>
     898:	1349053b 	movtne	r0, #38203	; 0x953b
     89c:	00001702 	andeq	r1, r0, r2, lsl #14
     8a0:	03003434 	movweq	r3, #1076	; 0x434
     8a4:	3b0b3a0e 	blcc	2cf0e4 <__Stack_Size+0x2cece4>
     8a8:	1c134905 	ldcne	9, cr4, [r3], {5}
     8ac:	3500000d 	strcc	r0, [r0, #-13]
     8b0:	1331001d 	teqne	r1, #29
     8b4:	17550152 			; <UNDEFINED> instruction: 0x17550152
     8b8:	0b590b58 	bleq	1643620 <__Stack_Size+0x1643220>
     8bc:	89360000 	ldmdbhi	r6!, {}	; <UNPREDICTABLE>
     8c0:	11000182 	smlabbne	r0, r2, r1, r0
     8c4:	00133101 	andseq	r3, r3, r1, lsl #2
     8c8:	82893700 	addhi	r3, r9, #0, 14
     8cc:	01110101 	tsteq	r1, r1, lsl #2
     8d0:	31194295 			; <UNDEFINED> instruction: 0x31194295
     8d4:	38000013 	stmdacc	r0, {r0, r1, r4}
     8d8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     8dc:	0b3a0e03 	bleq	e840f0 <__Stack_Size+0xe83cf0>
     8e0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     8e4:	01111349 	tsteq	r1, r9, asr #6
     8e8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     8ec:	01194297 			; <UNDEFINED> instruction: 0x01194297
     8f0:	39000013 	stmdbcc	r0, {r0, r1, r4}
     8f4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     8f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     8fc:	17021349 	strne	r1, [r2, -r9, asr #6]
     900:	053a0000 	ldreq	r0, [sl, #-0]!
     904:	3a080300 	bcc	20150c <__Stack_Size+0x20110c>
     908:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     90c:	00170213 	andseq	r0, r7, r3, lsl r2
     910:	00343b00 	eorseq	r3, r4, r0, lsl #22
     914:	0b3a0e03 	bleq	e84128 <__Stack_Size+0xe83d28>
     918:	1349053b 	movtne	r0, #38203	; 0x953b
     91c:	00001802 	andeq	r1, r0, r2, lsl #16
     920:	31002e3c 	tstcc	r0, ip, lsr lr
     924:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     928:	97184006 	ldrls	r4, [r8, -r6]
     92c:	00001942 	andeq	r1, r0, r2, asr #18
     930:	3f002e3d 	svccc	0x00002e3d
     934:	3a0e0319 	bcc	3815a0 <__Stack_Size+0x3811a0>
     938:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     93c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     940:	97184006 	ldrls	r4, [r8, -r6]
     944:	00001942 	andeq	r1, r0, r2, asr #18
     948:	3100343e 	tstcc	r0, lr, lsr r4
     94c:	00170213 	andseq	r0, r7, r3, lsl r2
     950:	00343f00 	eorseq	r3, r4, r0, lsl #30
     954:	0b3a0e03 	bleq	e84168 <__Stack_Size+0xe83d68>
     958:	1349053b 	movtne	r0, #38203	; 0x953b
     95c:	0000061c 	andeq	r0, r0, ip, lsl r6
     960:	03003440 	movweq	r3, #1088	; 0x440
     964:	3b0b3a0e 	blcc	2cf1a4 <__Stack_Size+0x2ceda4>
     968:	3f13490b 	svccc	0x0013490b
     96c:	00180219 	andseq	r0, r8, r9, lsl r2
     970:	002e4100 	eoreq	r4, lr, r0, lsl #2
     974:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     978:	0b3b0b3a 	bleq	ec3668 <__Stack_Size+0xec3268>
     97c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     980:	01000000 	mrseq	r0, (UNDEF: 0)
     984:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     988:	0e030b13 	vmoveq.32	d3[0], r0
     98c:	17550e1b 	smmlane	r5, fp, lr, r0
     990:	17100111 			; <UNDEFINED> instruction: 0x17100111
     994:	24020000 	strcs	r0, [r2], #-0
     998:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     99c:	000e030b 	andeq	r0, lr, fp, lsl #6
     9a0:	00160300 	andseq	r0, r6, r0, lsl #6
     9a4:	0b3a0803 	bleq	e829b8 <__Stack_Size+0xe825b8>
     9a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9ac:	04040000 	streq	r0, [r4], #-0
     9b0:	3a0b0b01 	bcc	2c35bc <__Stack_Size+0x2c31bc>
     9b4:	010b3b0b 	tsteq	fp, fp, lsl #22
     9b8:	05000013 	streq	r0, [r0, #-19]
     9bc:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     9c0:	00000d1c 	andeq	r0, r0, ip, lsl sp
     9c4:	03001606 	movweq	r1, #1542	; 0x606
     9c8:	3b0b3a0e 	blcc	2cf208 <__Stack_Size+0x2cee08>
     9cc:	0013490b 	andseq	r4, r3, fp, lsl #18
     9d0:	000f0700 	andeq	r0, pc, r0, lsl #14
     9d4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     9d8:	13080000 	movwne	r0, #32768	; 0x8000
     9dc:	0b0e0301 	bleq	3815e8 <__Stack_Size+0x3811e8>
     9e0:	3b0b3a0b 	blcc	2cf214 <__Stack_Size+0x2cee14>
     9e4:	0013010b 	andseq	r0, r3, fp, lsl #2
     9e8:	000d0900 	andeq	r0, sp, r0, lsl #18
     9ec:	0b3a0e03 	bleq	e84200 <__Stack_Size+0xe83e00>
     9f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9f4:	00000b38 	andeq	r0, r0, r8, lsr fp
     9f8:	2701150a 	strcs	r1, [r1, -sl, lsl #10]
     9fc:	01134919 	tsteq	r3, r9, lsl r9
     a00:	0b000013 	bleq	a54 <__Stack_Size+0x654>
     a04:	13490005 	movtne	r0, #36869	; 0x9005
     a08:	130c0000 	movwne	r0, #49152	; 0xc000
     a0c:	0b080301 	bleq	201618 <__Stack_Size+0x201218>
     a10:	3b0b3a0b 	blcc	2cf244 <__Stack_Size+0x2cee44>
     a14:	0013010b 	andseq	r0, r3, fp, lsl #2
     a18:	000d0d00 	andeq	r0, sp, r0, lsl #26
     a1c:	0b3a0803 	bleq	e82a30 <__Stack_Size+0xe82630>
     a20:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a24:	00000b38 	andeq	r0, r0, r8, lsr fp
     a28:	0b01170e 	bleq	46668 <__Stack_Size+0x46268>
     a2c:	3b0b3a0b 	blcc	2cf260 <__Stack_Size+0x2cee60>
     a30:	0013010b 	andseq	r0, r3, fp, lsl #2
     a34:	000d0f00 	andeq	r0, sp, r0, lsl #30
     a38:	0b3a0803 	bleq	e82a4c <__Stack_Size+0xe8264c>
     a3c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a40:	04100000 	ldreq	r0, [r0], #-0
     a44:	0b0e0301 	bleq	381650 <__Stack_Size+0x381250>
     a48:	3b0b3a0b 	blcc	2cf27c <__Stack_Size+0x2cee7c>
     a4c:	0013010b 	andseq	r0, r3, fp, lsl #2
     a50:	00281100 	eoreq	r1, r8, r0, lsl #2
     a54:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     a58:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     a5c:	03193f00 	tsteq	r9, #0, 30
     a60:	3b0b3a0e 	blcc	2cf2a0 <__Stack_Size+0x2ceea0>
     a64:	1119270b 	tstne	r9, fp, lsl #14
     a68:	40061201 	andmi	r1, r6, r1, lsl #4
     a6c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     a70:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     a74:	03193f01 	tsteq	r9, #1, 30
     a78:	3b0b3a0e 	blcc	2cf2b8 <__Stack_Size+0x2ceeb8>
     a7c:	11192705 	tstne	r9, r5, lsl #14
     a80:	40061201 	andmi	r1, r6, r1, lsl #4
     a84:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     a88:	00001301 	andeq	r1, r0, r1, lsl #6
     a8c:	03003414 	movweq	r3, #1044	; 0x414
     a90:	3b0b3a0e 	blcc	2cf2d0 <__Stack_Size+0x2ceed0>
     a94:	02134905 	andseq	r4, r3, #81920	; 0x14000
     a98:	15000017 	strne	r0, [r0, #-23]
     a9c:	00018289 	andeq	r8, r1, r9, lsl #5
     aa0:	13310111 	teqne	r1, #1073741828	; 0x40000004
     aa4:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
     aa8:	11000182 	smlabbne	r0, r2, r1, r0
     aac:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     ab0:	00001331 	andeq	r1, r0, r1, lsr r3
     ab4:	3f002e17 	svccc	0x00002e17
     ab8:	3a0e0319 	bcc	381724 <__Stack_Size+0x381324>
     abc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     ac0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     ac4:	97184006 	ldrls	r4, [r8, -r6]
     ac8:	00001942 	andeq	r1, r0, r2, asr #18
     acc:	3f012e18 	svccc	0x00012e18
     ad0:	3a0e0319 	bcc	38173c <__Stack_Size+0x38133c>
     ad4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     ad8:	11134919 	tstne	r3, r9, lsl r9
     adc:	40061201 	andmi	r1, r6, r1, lsl #4
     ae0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     ae4:	00001301 	andeq	r1, r0, r1, lsl #6
     ae8:	03000519 	movweq	r0, #1305	; 0x519
     aec:	3b0b3a0e 	blcc	2cf32c <__Stack_Size+0x2cef2c>
     af0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     af4:	1a000017 	bne	b58 <__Stack_Size+0x758>
     af8:	08030034 	stmdaeq	r3, {r2, r4, r5}
     afc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     b00:	17021349 	strne	r1, [r2, -r9, asr #6]
     b04:	341b0000 	ldrcc	r0, [fp], #-0
     b08:	3a0e0300 	bcc	381710 <__Stack_Size+0x381310>
     b0c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b10:	1c000013 	stcne	0, cr0, [r0], {19}
     b14:	01018289 	smlabbeq	r1, r9, r2, r8
     b18:	13310111 	teqne	r1, #1073741828	; 0x40000004
     b1c:	00001301 	andeq	r1, r0, r1, lsl #6
     b20:	01828a1d 	orreq	r8, r2, sp, lsl sl
     b24:	91180200 	tstls	r8, r0, lsl #4
     b28:	00001842 	andeq	r1, r0, r2, asr #16
     b2c:	0182891e 	orreq	r8, r2, lr, lsl r9
     b30:	31011101 	tstcc	r1, r1, lsl #2
     b34:	1f000013 	svcne	0x00000013
     b38:	0b0b0024 	bleq	2c0bd0 <__Stack_Size+0x2c07d0>
     b3c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     b40:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     b44:	03193f01 	tsteq	r9, #1, 30
     b48:	3b0b3a0e 	blcc	2cf388 <__Stack_Size+0x2cef88>
     b4c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     b50:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     b54:	97184006 	ldrls	r4, [r8, -r6]
     b58:	13011942 	movwne	r1, #6466	; 0x1942
     b5c:	34210000 	strtcc	r0, [r1], #-0
     b60:	3a0e0300 	bcc	381768 <__Stack_Size+0x381368>
     b64:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b68:	00170213 	andseq	r0, r7, r3, lsl r2
     b6c:	002e2200 	eoreq	r2, lr, r0, lsl #4
     b70:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     b74:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     b78:	13491927 	movtne	r1, #39207	; 0x9927
     b7c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b80:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     b84:	23000019 	movwcs	r0, #25
     b88:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     b8c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     b90:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     b94:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
     b98:	03193f00 	tsteq	r9, #0, 30
     b9c:	3b0b3a0e 	blcc	2cf3dc <__Stack_Size+0x2cefdc>
     ba0:	11134905 	tstne	r3, r5, lsl #18
     ba4:	40061201 	andmi	r1, r6, r1, lsl #4
     ba8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     bac:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
     bb0:	03193f00 	tsteq	r9, #0, 30
     bb4:	3b0b3a0e 	blcc	2cf3f4 <__Stack_Size+0x2ceff4>
     bb8:	12011105 	andne	r1, r1, #1073741825	; 0x40000001
     bbc:	97184006 	ldrls	r4, [r8, -r6]
     bc0:	00001942 	andeq	r1, r0, r2, asr #18
     bc4:	03003426 	movweq	r3, #1062	; 0x426
     bc8:	3b0b3a0e 	blcc	2cf408 <__Stack_Size+0x2cf008>
     bcc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     bd0:	27000018 	smladcs	r0, r8, r0, r0
     bd4:	13490035 	movtne	r0, #36917	; 0x9035
     bd8:	01280000 	teqeq	r8, r0
     bdc:	01134901 	tsteq	r3, r1, lsl #18
     be0:	29000013 	stmdbcs	r0, {r0, r1, r4}
     be4:	13490021 	movtne	r0, #36897	; 0x9021
     be8:	0000052f 	andeq	r0, r0, pc, lsr #10
     bec:	0300342a 	movweq	r3, #1066	; 0x42a
     bf0:	3b0b3a0e 	blcc	2cf430 <__Stack_Size+0x2cf030>
     bf4:	3f13490b 	svccc	0x0013490b
     bf8:	00193c19 	andseq	r3, r9, r9, lsl ip
     bfc:	00342b00 	eorseq	r2, r4, r0, lsl #22
     c00:	0b3a0e03 	bleq	e84414 <__Stack_Size+0xe84014>
     c04:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c08:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     c0c:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
     c10:	03193f00 	tsteq	r9, #0, 30
     c14:	3b0b3a0e 	blcc	2cf454 <__Stack_Size+0x2cf054>
     c18:	3c192705 	ldccc	7, cr2, [r9], {5}
     c1c:	2d000019 	stccs	0, cr0, [r0, #-100]	; 0xffffff9c
     c20:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     c24:	0b3a0e03 	bleq	e84438 <__Stack_Size+0xe84038>
     c28:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     c2c:	0000193c 	andeq	r1, r0, ip, lsr r9
     c30:	3f012e2e 	svccc	0x00012e2e
     c34:	3a0e0319 	bcc	3818a0 <__Stack_Size+0x3814a0>
     c38:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     c3c:	3c134919 	ldccc	9, cr4, [r3], {25}
     c40:	00130119 	andseq	r0, r3, r9, lsl r1
     c44:	012e2f00 	teqeq	lr, r0, lsl #30
     c48:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     c4c:	0b3b0b3a 	bleq	ec393c <__Stack_Size+0xec353c>
     c50:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     c54:	00001301 	andeq	r1, r0, r1, lsl #6
     c58:	3f002e30 	svccc	0x00002e30
     c5c:	3a0e0319 	bcc	3818c8 <__Stack_Size+0x3814c8>
     c60:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     c64:	3c134919 	ldccc	9, cr4, [r3], {25}
     c68:	00000019 	andeq	r0, r0, r9, lsl r0
     c6c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     c70:	030b130e 	movweq	r1, #45838	; 0xb30e
     c74:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     c78:	10011117 	andne	r1, r1, r7, lsl r1
     c7c:	02000017 	andeq	r0, r0, #23
     c80:	0b0b0024 	bleq	2c0d18 <__Stack_Size+0x2c0918>
     c84:	0e030b3e 	vmoveq.16	d3[0], r0
     c88:	16030000 	strne	r0, [r3], -r0
     c8c:	3a080300 	bcc	201894 <__Stack_Size+0x201494>
     c90:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c94:	04000013 	streq	r0, [r0], #-19
     c98:	0e030104 	adfeqs	f0, f3, f4
     c9c:	0b3a0b0b 	bleq	e838d0 <__Stack_Size+0xe834d0>
     ca0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     ca4:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
     ca8:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     cac:	0600000d 	streq	r0, [r0], -sp
     cb0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     cb4:	0b3b0b3a 	bleq	ec39a4 <__Stack_Size+0xec35a4>
     cb8:	00001349 	andeq	r1, r0, r9, asr #6
     cbc:	3f012e07 	svccc	0x00012e07
     cc0:	3a0e0319 	bcc	38192c <__Stack_Size+0x38152c>
     cc4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     cc8:	20134919 	andscs	r4, r3, r9, lsl r9
     ccc:	0013010b 	andseq	r0, r3, fp, lsl #2
     cd0:	00050800 	andeq	r0, r5, r0, lsl #16
     cd4:	0b3a0e03 	bleq	e844e8 <__Stack_Size+0xe840e8>
     cd8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     cdc:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
     ce0:	03193f01 	tsteq	r9, #1, 30
     ce4:	3b0b3a0e 	blcc	2cf524 <__Stack_Size+0x2cf124>
     ce8:	1119270b 	tstne	r9, fp, lsl #14
     cec:	40061201 	andmi	r1, r6, r1, lsl #4
     cf0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     cf4:	00001301 	andeq	r1, r0, r1, lsl #6
     cf8:	0300050a 	movweq	r0, #1290	; 0x50a
     cfc:	3b0b3a0e 	blcc	2cf53c <__Stack_Size+0x2cf13c>
     d00:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d04:	0b000018 	bleq	d6c <__Stack_Size+0x96c>
     d08:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     d0c:	0b3a0e03 	bleq	e84520 <__Stack_Size+0xe84120>
     d10:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d14:	01111349 	tsteq	r1, r9, asr #6
     d18:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d1c:	00194297 	mulseq	r9, r7, r2
     d20:	00050c00 	andeq	r0, r5, r0, lsl #24
     d24:	0b3a0e03 	bleq	e84538 <__Stack_Size+0xe84138>
     d28:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d2c:	00001702 	andeq	r1, r0, r2, lsl #14
     d30:	31012e0d 	tstcc	r1, sp, lsl #28
     d34:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     d38:	97184006 	ldrls	r4, [r8, -r6]
     d3c:	13011942 	movwne	r1, #6466	; 0x1942
     d40:	050e0000 	streq	r0, [lr, #-0]
     d44:	02133100 	andseq	r3, r3, #0, 2
     d48:	0f000017 	svceq	0x00000017
     d4c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d50:	0b3a0e03 	bleq	e84564 <__Stack_Size+0xe84164>
     d54:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d58:	01111349 	tsteq	r1, r9, asr #6
     d5c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d60:	01194297 			; <UNDEFINED> instruction: 0x01194297
     d64:	10000013 	andne	r0, r0, r3, lsl r0
     d68:	0111010b 	tsteq	r1, fp, lsl #2
     d6c:	00000612 	andeq	r0, r0, r2, lsl r6
     d70:	03003411 	movweq	r3, #1041	; 0x411
     d74:	3b0b3a0e 	blcc	2cf5b4 <__Stack_Size+0x2cf1b4>
     d78:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d7c:	12000018 	andne	r0, r0, #24
     d80:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     d84:	0b3b0b3a 	bleq	ec3a74 <__Stack_Size+0xec3674>
     d88:	00001349 	andeq	r1, r0, r9, asr #6
     d8c:	31011d13 	tstcc	r1, r3, lsl sp
     d90:	55015213 	strpl	r5, [r1, #-531]	; 0x213
     d94:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
     d98:	1400000b 	strne	r0, [r0], #-11
     d9c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     da0:	0b3a0e03 	bleq	e845b4 <__Stack_Size+0xe841b4>
     da4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     da8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     dac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     db0:	00130119 	andseq	r0, r3, r9, lsl r1
     db4:	00051500 	andeq	r1, r5, r0, lsl #10
     db8:	0b3a0e03 	bleq	e845cc <__Stack_Size+0xe841cc>
     dbc:	1349053b 	movtne	r0, #38203	; 0x953b
     dc0:	00001702 	andeq	r1, r0, r2, lsl #14
     dc4:	03003416 	movweq	r3, #1046	; 0x416
     dc8:	3b0b3a0e 	blcc	2cf608 <__Stack_Size+0x2cf208>
     dcc:	02134905 	andseq	r4, r3, #81920	; 0x14000
     dd0:	17000017 	smladne	r0, r7, r0, r0
     dd4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     dd8:	0b3a0e03 	bleq	e845ec <__Stack_Size+0xe841ec>
     ddc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     de0:	01111349 	tsteq	r1, r9, asr #6
     de4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     de8:	01194297 			; <UNDEFINED> instruction: 0x01194297
     dec:	18000013 	stmdane	r0, {r0, r1, r4}
     df0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     df4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     df8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     dfc:	0f190000 	svceq	0x00190000
     e00:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     e04:	1a000013 	bne	e58 <__Stack_Size+0xa58>
     e08:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     e0c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e10:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     e14:	0b1b0000 	bleq	6c0e1c <__Stack_Size+0x6c0a1c>
     e18:	00175501 	andseq	r5, r7, r1, lsl #10
     e1c:	010b1c00 	tsteq	fp, r0, lsl #24
     e20:	06120111 			; <UNDEFINED> instruction: 0x06120111
     e24:	00001301 	andeq	r1, r0, r1, lsl #6
     e28:	0300051d 	movweq	r0, #1309	; 0x51d
     e2c:	3b0b3a08 	blcc	2cf654 <__Stack_Size+0x2cf254>
     e30:	02134905 	andseq	r4, r3, #81920	; 0x14000
     e34:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
     e38:	08030005 	stmdaeq	r3, {r0, r2}
     e3c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e40:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     e44:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
     e48:	03193f01 	tsteq	r9, #1, 30
     e4c:	3b0b3a0e 	blcc	2cf68c <__Stack_Size+0x2cf28c>
     e50:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     e54:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     e58:	97184006 	ldrls	r4, [r8, -r6]
     e5c:	00001942 	andeq	r1, r0, r2, asr #18
     e60:	01110100 	tsteq	r1, r0, lsl #2
     e64:	0b130e25 	bleq	4c4700 <__Stack_Size+0x4c4300>
     e68:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     e6c:	01111755 	tsteq	r1, r5, asr r7
     e70:	00001710 	andeq	r1, r0, r0, lsl r7
     e74:	0b002402 	bleq	9e84 <__Stack_Size+0x9a84>
     e78:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     e7c:	0300000e 	movweq	r0, #14
     e80:	08030016 	stmdaeq	r3, {r1, r2, r4}
     e84:	0b3b0b3a 	bleq	ec3b74 <__Stack_Size+0xec3774>
     e88:	00001349 	andeq	r1, r0, r9, asr #6
     e8c:	27001504 	strcs	r1, [r0, -r4, lsl #10]
     e90:	05000019 	streq	r0, [r0, #-25]
     e94:	0b0b000f 	bleq	2c0ed8 <__Stack_Size+0x2c0ad8>
     e98:	00001349 	andeq	r1, r0, r9, asr #6
     e9c:	3f012e06 	svccc	0x00012e06
     ea0:	3a0e0319 	bcc	381b0c <__Stack_Size+0x38170c>
     ea4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ea8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     eac:	96184006 	ldrls	r4, [r8], -r6
     eb0:	13011942 	movwne	r1, #6466	; 0x1942
     eb4:	34070000 	strcc	r0, [r7], #-0
     eb8:	3a0e0300 	bcc	381ac0 <__Stack_Size+0x3816c0>
     ebc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ec0:	00170213 	andseq	r0, r7, r3, lsl r2
     ec4:	010b0800 	tsteq	fp, r0, lsl #16
     ec8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ecc:	00001301 	andeq	r1, r0, r1, lsl #6
     ed0:	01828909 	orreq	r8, r2, r9, lsl #18
     ed4:	31011100 	mrscc	r1, (UNDEF: 17)
     ed8:	0a000013 	beq	f2c <__Stack_Size+0xb2c>
     edc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ee0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     ee4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     ee8:	0000193c 	andeq	r1, r0, ip, lsr r9
     eec:	4900350b 	stmdbmi	r0, {r0, r1, r3, r8, sl, ip, sp}
     ef0:	0c000013 	stceq	0, cr0, [r0], {19}
     ef4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ef8:	0b3b0b3a 	bleq	ec3be8 <__Stack_Size+0xec37e8>
     efc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     f00:	00001802 	andeq	r1, r0, r2, lsl #16
     f04:	0300340d 	movweq	r3, #1037	; 0x40d
     f08:	3b0b3a0e 	blcc	2cf748 <__Stack_Size+0x2cf348>
     f0c:	3f13490b 	svccc	0x0013490b
     f10:	00193c19 	andseq	r3, r9, r9, lsl ip
     f14:	01010e00 	tsteq	r1, r0, lsl #28
     f18:	13011349 	movwne	r1, #4937	; 0x1349
     f1c:	210f0000 	mrscs	r0, CPSR
     f20:	2f134900 	svccs	0x00134900
     f24:	1000000b 	andne	r0, r0, fp
     f28:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     f2c:	0b3a0e03 	bleq	e84740 <__Stack_Size+0xe84340>
     f30:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     f34:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     f38:	01000000 	mrseq	r0, (UNDEF: 0)
     f3c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     f40:	0e030b13 	vmoveq.32	d3[0], r0
     f44:	17550e1b 	smmlane	r5, fp, lr, r0
     f48:	17100111 			; <UNDEFINED> instruction: 0x17100111
     f4c:	24020000 	strcs	r0, [r2], #-0
     f50:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     f54:	000e030b 	andeq	r0, lr, fp, lsl #6
     f58:	00160300 	andseq	r0, r6, r0, lsl #6
     f5c:	0b3a0803 	bleq	e82f70 <__Stack_Size+0xe82b70>
     f60:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f64:	0f040000 	svceq	0x00040000
     f68:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     f6c:	05000013 	streq	r0, [r0, #-19]
     f70:	0e030104 	adfeqs	f0, f3, f4
     f74:	0b3a0b0b 	bleq	e83ba8 <__Stack_Size+0xe837a8>
     f78:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     f7c:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
     f80:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     f84:	0700000d 	streq	r0, [r0, -sp]
     f88:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     f8c:	0b3b0b3a 	bleq	ec3c7c <__Stack_Size+0xec387c>
     f90:	00001349 	andeq	r1, r0, r9, asr #6
     f94:	03011308 	movweq	r1, #4872	; 0x1308
     f98:	3a0b0b0e 	bcc	2c3bd8 <__Stack_Size+0x2c37d8>
     f9c:	010b3b0b 	tsteq	fp, fp, lsl #22
     fa0:	09000013 	stmdbeq	r0, {r0, r1, r4}
     fa4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     fa8:	0b3b0b3a 	bleq	ec3c98 <__Stack_Size+0xec3898>
     fac:	0b381349 	bleq	e05cd8 <__Stack_Size+0xe058d8>
     fb0:	150a0000 	strne	r0, [sl, #-0]
     fb4:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     fb8:	00130113 	andseq	r0, r3, r3, lsl r1
     fbc:	00050b00 	andeq	r0, r5, r0, lsl #22
     fc0:	00001349 	andeq	r1, r0, r9, asr #6
     fc4:	0301130c 	movweq	r1, #4876	; 0x130c
     fc8:	3a0b0b08 	bcc	2c3bf0 <__Stack_Size+0x2c37f0>
     fcc:	010b3b0b 	tsteq	fp, fp, lsl #22
     fd0:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     fd4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     fd8:	0b3b0b3a 	bleq	ec3cc8 <__Stack_Size+0xec38c8>
     fdc:	0b381349 	bleq	e05d08 <__Stack_Size+0xe05908>
     fe0:	170e0000 	strne	r0, [lr, -r0]
     fe4:	3a0b0b01 	bcc	2c3bf0 <__Stack_Size+0x2c37f0>
     fe8:	010b3b0b 	tsteq	fp, fp, lsl #22
     fec:	0f000013 	svceq	0x00000013
     ff0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     ff4:	0b3b0b3a 	bleq	ec3ce4 <__Stack_Size+0xec38e4>
     ff8:	00001349 	andeq	r1, r0, r9, asr #6
     ffc:	27001510 	smladcs	r0, r0, r5, r1
    1000:	11000019 	tstne	r0, r9, lsl r0
    1004:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1008:	0b3a0e03 	bleq	e8481c <__Stack_Size+0xe8441c>
    100c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1010:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1014:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1018:	12000019 	andne	r0, r0, #25
    101c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1020:	0b3b0b3a 	bleq	ec3d10 <__Stack_Size+0xec3910>
    1024:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1028:	0000193c 	andeq	r1, r0, ip, lsr r9
    102c:	03003413 	movweq	r3, #1043	; 0x413
    1030:	3b0b3a0e 	blcc	2cf870 <__Stack_Size+0x2cf470>
    1034:	3f13490b 	svccc	0x0013490b
    1038:	00180219 	andseq	r0, r8, r9, lsl r2
    103c:	11010000 	mrsne	r0, (UNDEF: 1)
    1040:	130e2501 	movwne	r2, #58625	; 0xe501
    1044:	1b0e030b 	blne	381c78 <__Stack_Size+0x381878>
    1048:	1117550e 	tstne	r7, lr, lsl #10
    104c:	00171001 	andseq	r1, r7, r1
    1050:	00240200 	eoreq	r0, r4, r0, lsl #4
    1054:	0b3e0b0b 	bleq	f83c88 <__Stack_Size+0xf83888>
    1058:	00000e03 	andeq	r0, r0, r3, lsl #28
    105c:	03001603 	movweq	r1, #1539	; 0x603
    1060:	3b0b3a08 	blcc	2cf888 <__Stack_Size+0x2cf488>
    1064:	0013490b 	andseq	r4, r3, fp, lsl #18
    1068:	00160400 	andseq	r0, r6, r0, lsl #8
    106c:	0b3a0e03 	bleq	e84880 <__Stack_Size+0xe84480>
    1070:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1074:	35050000 	strcc	r0, [r5, #-0]
    1078:	00134900 	andseq	r4, r3, r0, lsl #18
    107c:	01040600 	tsteq	r4, r0, lsl #12
    1080:	0b3a0b0b 	bleq	e83cb4 <__Stack_Size+0xe838b4>
    1084:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1088:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
    108c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1090:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    1094:	0e030104 	adfeqs	f0, f3, f4
    1098:	0b3a0b0b 	bleq	e83ccc <__Stack_Size+0xe838cc>
    109c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    10a0:	13090000 	movwne	r0, #36864	; 0x9000
    10a4:	0b0e0301 	bleq	381cb0 <__Stack_Size+0x3818b0>
    10a8:	3b0b3a0b 	blcc	2cf8dc <__Stack_Size+0x2cf4dc>
    10ac:	0013010b 	andseq	r0, r3, fp, lsl #2
    10b0:	000d0a00 	andeq	r0, sp, r0, lsl #20
    10b4:	0b3a0e03 	bleq	e848c8 <__Stack_Size+0xe844c8>
    10b8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    10bc:	00000b38 	andeq	r0, r0, r8, lsr fp
    10c0:	0b000f0b 	bleq	4cf4 <__Stack_Size+0x48f4>
    10c4:	0013490b 	andseq	r4, r3, fp, lsl #18
    10c8:	01150c00 	tsteq	r5, r0, lsl #24
    10cc:	13491927 	movtne	r1, #39207	; 0x9927
    10d0:	00001301 	andeq	r1, r0, r1, lsl #6
    10d4:	4900050d 	stmdbmi	r0, {r0, r2, r3, r8, sl}
    10d8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    10dc:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
    10e0:	0b3a0b0b 	bleq	e83d14 <__Stack_Size+0xe83914>
    10e4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    10e8:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 10f0 <__Stack_Size+0xcf0>
    10ec:	3a080300 	bcc	201cf4 <__Stack_Size+0x2018f4>
    10f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10f4:	000b3813 	andeq	r3, fp, r3, lsl r8
    10f8:	01171000 	tsteq	r7, r0
    10fc:	0b3a0b0b 	bleq	e83d30 <__Stack_Size+0xe83930>
    1100:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1104:	0d110000 	ldceq	0, cr0, [r1, #-0]
    1108:	3a080300 	bcc	201d10 <__Stack_Size+0x201910>
    110c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1110:	12000013 	andne	r0, r0, #19
    1114:	19270015 	stmdbne	r7!, {r0, r2, r4}
    1118:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    111c:	03193f01 	tsteq	r9, #1, 30
    1120:	3b0b3a0e 	blcc	2cf960 <__Stack_Size+0x2cf560>
    1124:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1128:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    112c:	96184006 	ldrls	r4, [r8], -r6
    1130:	13011942 	movwne	r1, #6466	; 0x1942
    1134:	05140000 	ldreq	r0, [r4, #-0]
    1138:	3a0e0300 	bcc	381d40 <__Stack_Size+0x381940>
    113c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1140:	00170213 	andseq	r0, r7, r3, lsl r2
    1144:	010b1500 	tsteq	fp, r0, lsl #10
    1148:	06120111 			; <UNDEFINED> instruction: 0x06120111
    114c:	00001301 	andeq	r1, r0, r1, lsl #6
    1150:	03003416 	movweq	r3, #1046	; 0x416
    1154:	3b0b3a0e 	blcc	2cf994 <__Stack_Size+0x2cf594>
    1158:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    115c:	17000017 	smladne	r0, r7, r0, r0
    1160:	0111010b 	tsteq	r1, fp, lsl #2
    1164:	00000612 	andeq	r0, r0, r2, lsl r6
    1168:	03003418 	movweq	r3, #1048	; 0x418
    116c:	3b0b3a0e 	blcc	2cf9ac <__Stack_Size+0x2cf5ac>
    1170:	0013490b 	andseq	r4, r3, fp, lsl #18
    1174:	012e1900 	teqeq	lr, r0, lsl #18
    1178:	0b3a0e03 	bleq	e8498c <__Stack_Size+0xe8458c>
    117c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1180:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1184:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1188:	00130119 	andseq	r0, r3, r9, lsl r1
    118c:	00341a00 	eorseq	r1, r4, r0, lsl #20
    1190:	0b3a0e03 	bleq	e849a4 <__Stack_Size+0xe845a4>
    1194:	1349053b 	movtne	r0, #38203	; 0x953b
    1198:	00001702 	andeq	r1, r0, r2, lsl #14
    119c:	03000a1b 	movweq	r0, #2587	; 0xa1b
    11a0:	3b0b3a0e 	blcc	2cf9e0 <__Stack_Size+0x2cf5e0>
    11a4:	00011105 	andeq	r1, r1, r5, lsl #2
    11a8:	82891c00 	addhi	r1, r9, #0, 24
    11ac:	01110101 	tsteq	r1, r1, lsl #2
    11b0:	00001301 	andeq	r1, r0, r1, lsl #6
    11b4:	01828a1d 	orreq	r8, r2, sp, lsl sl
    11b8:	91180200 	tstls	r8, r0, lsl #4
    11bc:	00001842 	andeq	r1, r0, r2, asr #16
    11c0:	0182891e 	orreq	r8, r2, lr, lsl r9
    11c4:	31011101 	tstcc	r1, r1, lsl #2
    11c8:	00130113 	andseq	r0, r3, r3, lsl r1
    11cc:	82891f00 	addhi	r1, r9, #0, 30
    11d0:	01110101 	tsteq	r1, r1, lsl #2
    11d4:	00001331 	andeq	r1, r0, r1, lsr r3
    11d8:	3f002e20 	svccc	0x00002e20
    11dc:	3a0e0319 	bcc	381e48 <__Stack_Size+0x381a48>
    11e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    11e4:	11134919 	tstne	r3, r9, lsl r9
    11e8:	40061201 	andmi	r1, r6, r1, lsl #4
    11ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    11f0:	34210000 	strtcc	r0, [r1], #-0
    11f4:	3a080300 	bcc	201dfc <__Stack_Size+0x2019fc>
    11f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    11fc:	00170213 	andseq	r0, r7, r3, lsl r2
    1200:	82892200 	addhi	r2, r9, #0, 4
    1204:	01110001 	tsteq	r1, r1
    1208:	00001331 	andeq	r1, r0, r1, lsr r3
    120c:	3f012e23 	svccc	0x00012e23
    1210:	3a0e0319 	bcc	381e7c <__Stack_Size+0x381a7c>
    1214:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1218:	11134919 	tstne	r3, r9, lsl r9
    121c:	40061201 	andmi	r1, r6, r1, lsl #4
    1220:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1224:	00001301 	andeq	r1, r0, r1, lsl #6
    1228:	03003424 	movweq	r3, #1060	; 0x424
    122c:	3b0b3a08 	blcc	2cfa54 <__Stack_Size+0x2cf654>
    1230:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1234:	25000017 	strcs	r0, [r0, #-23]
    1238:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    123c:	00001301 	andeq	r1, r0, r1, lsl #6
    1240:	3f002e26 	svccc	0x00002e26
    1244:	3a0e0319 	bcc	381eb0 <__Stack_Size+0x381ab0>
    1248:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    124c:	11134919 	tstne	r3, r9, lsl r9
    1250:	40061201 	andmi	r1, r6, r1, lsl #4
    1254:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1258:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
    125c:	03193f01 	tsteq	r9, #1, 30
    1260:	3b0b3a0e 	blcc	2cfaa0 <__Stack_Size+0x2cf6a0>
    1264:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1268:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    126c:	97184006 	ldrls	r4, [r8, -r6]
    1270:	13011942 	movwne	r1, #6466	; 0x1942
    1274:	05280000 	streq	r0, [r8, #-0]!
    1278:	3a0e0300 	bcc	381e80 <__Stack_Size+0x381a80>
    127c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1280:	00170213 	andseq	r0, r7, r3, lsl r2
    1284:	012e2900 	teqeq	lr, r0, lsl #18
    1288:	0b3a0e03 	bleq	e84a9c <__Stack_Size+0xe8469c>
    128c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1290:	13010b20 	movwne	r0, #6944	; 0x1b20
    1294:	342a0000 	strtcc	r0, [sl], #-0
    1298:	3a0e0300 	bcc	381ea0 <__Stack_Size+0x381aa0>
    129c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    12a0:	2b000013 	blcs	12f4 <__Stack_Size+0xef4>
    12a4:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    12a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    12ac:	0b2c0000 	bleq	b012b4 <__Stack_Size+0xb00eb4>
    12b0:	00130101 	andseq	r0, r3, r1, lsl #2
    12b4:	010b2d00 	tsteq	fp, r0, lsl #26
    12b8:	172e0000 	strne	r0, [lr, -r0]!
    12bc:	3a0b0b01 	bcc	2c3ec8 <__Stack_Size+0x2c3ac8>
    12c0:	01053b0b 	tsteq	r5, fp, lsl #22
    12c4:	2f000013 	svccs	0x00000013
    12c8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    12cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    12d0:	00001349 	andeq	r1, r0, r9, asr #6
    12d4:	31011d30 	tstcc	r1, r0, lsr sp
    12d8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    12dc:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    12e0:	00130105 	andseq	r0, r3, r5, lsl #2
    12e4:	00343100 	eorseq	r3, r4, r0, lsl #2
    12e8:	17021331 	smladxne	r2, r1, r3, r1
    12ec:	0a320000 	beq	c812f4 <__Stack_Size+0xc80ef4>
    12f0:	11133100 	tstne	r3, r0, lsl #2
    12f4:	33000001 	movwcc	r0, #1
    12f8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    12fc:	17550152 			; <UNDEFINED> instruction: 0x17550152
    1300:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    1304:	00001301 	andeq	r1, r0, r1, lsl #6
    1308:	55010b34 	strpl	r0, [r1, #-2868]	; 0xb34
    130c:	35000017 	strcc	r0, [r0, #-23]
    1310:	13310034 	teqne	r1, #52	; 0x34
    1314:	00001802 	andeq	r1, r0, r2, lsl #16
    1318:	01828936 	orreq	r8, r2, r6, lsr r9
    131c:	00011101 	andeq	r1, r1, r1, lsl #2
    1320:	82893700 	addhi	r3, r9, #0, 14
    1324:	01110001 	tsteq	r1, r1
    1328:	31194295 			; <UNDEFINED> instruction: 0x31194295
    132c:	38000013 	stmdacc	r0, {r0, r1, r4}
    1330:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1334:	0b3a0e03 	bleq	e84b48 <__Stack_Size+0xe84748>
    1338:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    133c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1340:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1344:	00130119 	andseq	r0, r3, r9, lsl r1
    1348:	00053900 	andeq	r3, r5, r0, lsl #18
    134c:	0b3a0803 	bleq	e83360 <__Stack_Size+0xe82f60>
    1350:	1349053b 	movtne	r0, #38203	; 0x953b
    1354:	00001702 	andeq	r1, r0, r2, lsl #14
    1358:	3f002e3a 	svccc	0x00002e3a
    135c:	3a0e0319 	bcc	381fc8 <__Stack_Size+0x381bc8>
    1360:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1364:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1368:	97184006 	ldrls	r4, [r8, -r6]
    136c:	00001942 	andeq	r1, r0, r2, asr #18
    1370:	0300343b 	movweq	r3, #1083	; 0x43b
    1374:	3b0b3a0e 	blcc	2cfbb4 <__Stack_Size+0x2cf7b4>
    1378:	3f13490b 	svccc	0x0013490b
    137c:	00193c19 	andseq	r3, r9, r9, lsl ip
    1380:	00343c00 	eorseq	r3, r4, r0, lsl #24
    1384:	0b3a0e03 	bleq	e84b98 <__Stack_Size+0xe84798>
    1388:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    138c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1390:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
    1394:	03193f01 	tsteq	r9, #1, 30
    1398:	3b0b3a0e 	blcc	2cfbd8 <__Stack_Size+0x2cf7d8>
    139c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    13a0:	01193c13 	tsteq	r9, r3, lsl ip
    13a4:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
    13a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    13ac:	0b3a0e03 	bleq	e84bc0 <__Stack_Size+0xe847c0>
    13b0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    13b4:	1301193c 	movwne	r1, #6460	; 0x193c
    13b8:	2e3f0000 	cdpcs	0, 3, cr0, cr15, cr0, {0}
    13bc:	03193f01 	tsteq	r9, #1, 30
    13c0:	3b0b3a0e 	blcc	2cfc00 <__Stack_Size+0x2cf800>
    13c4:	3c192705 	ldccc	7, cr2, [r9], {5}
    13c8:	00130119 	andseq	r0, r3, r9, lsl r1
    13cc:	012e4000 	teqeq	lr, r0
    13d0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    13d4:	0b3b0b3a 	bleq	ec40c4 <__Stack_Size+0xec3cc4>
    13d8:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    13dc:	01000000 	mrseq	r0, (UNDEF: 0)
    13e0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    13e4:	0e030b13 	vmoveq.32	d3[0], r0
    13e8:	17550e1b 	smmlane	r5, fp, lr, r0
    13ec:	17100111 			; <UNDEFINED> instruction: 0x17100111
    13f0:	24020000 	strcs	r0, [r2], #-0
    13f4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    13f8:	000e030b 	andeq	r0, lr, fp, lsl #6
    13fc:	00160300 	andseq	r0, r6, r0, lsl #6
    1400:	0b3a0803 	bleq	e83414 <__Stack_Size+0xe83014>
    1404:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1408:	0f040000 	svceq	0x00040000
    140c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1410:	05000013 	streq	r0, [r0, #-19]
    1414:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1418:	0b3a0e03 	bleq	e84c2c <__Stack_Size+0xe8482c>
    141c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1420:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1424:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1428:	00130119 	andseq	r0, r3, r9, lsl r1
    142c:	00050600 	andeq	r0, r5, r0, lsl #12
    1430:	0b3a0e03 	bleq	e84c44 <__Stack_Size+0xe84844>
    1434:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1438:	00001702 	andeq	r1, r0, r2, lsl #14
    143c:	03003407 	movweq	r3, #1031	; 0x407
    1440:	3b0b3a08 	blcc	2cfc68 <__Stack_Size+0x2cf868>
    1444:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1448:	08000018 	stmdaeq	r0, {r3, r4}
    144c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1450:	0b3b0b3a 	bleq	ec4140 <__Stack_Size+0xec3d40>
    1454:	17021349 	strne	r1, [r2, -r9, asr #6]
    1458:	34090000 	strcc	r0, [r9], #-0
    145c:	3a0e0300 	bcc	382064 <__Stack_Size+0x381c64>
    1460:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1464:	00170213 	andseq	r0, r7, r3, lsl r2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000071 	andeq	r0, r0, r1, ror r0
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00310002 	eorseq	r0, r1, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	73010000 	movwvc	r0, #4096	; 0x1000
      1c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
      24:	5f630000 	svcpl	0x00630000
      28:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	6174735f 	cmnvs	r4, pc, asr r3
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	70757472 	rsbsvc	r7, r5, r2, ror r4
      34:	0100732e 	tsteq	r0, lr, lsr #6
      38:	00000000 	andeq	r0, r0, r0

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	00f00205 	rscseq	r0, r0, r5, lsl #4

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	c1030800 	tstgt	r3, r0, lsl #16
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	31210100 	teqcc	r1, r0, lsl #2
      48:	23212121 	teqcs	r1, #1073741832	; 0x40000008
      4c:	21212121 	teqcs	r1, r1, lsr #2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	2131212f 	teqcs	r1, pc, lsr #2
      54:	30212131 	eorcc	r2, r1, r1, lsr r1
      58:	2068032f 	rsbcs	r0, r8, pc, lsr #6
      5c:	36322f34 	shasxcc	r2, r2, r4
      60:	01000202 	tsteq	r0, r2, lsl #4
      64:	02050001 	andeq	r0, r5, #1
      68:	08000138 	stmdaeq	r0, {r3, r4, r5, r8}
      6c:	0100eb03 	tsteq	r0, r3, lsl #22
      70:	01000202 	tsteq	r0, r2, lsl #4
      74:	0000a201 	andeq	sl, r0, r1, lsl #4
      78:	33000200 	movwcc	r0, #512	; 0x200
      7c:	02000000 	andeq	r0, r0, #0
      80:	0d0efb01 	vstreq	d15, [lr, #-4]
      84:	01010100 	mrseq	r0, (UNDEF: 17)
      88:	00000001 	andeq	r0, r0, r1
      8c:	01000001 	tsteq	r0, r1
      90:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
      94:	5f32336d 	svcpl	0x0032336d
      98:	0062696c 	rsbeq	r6, r2, ip, ror #18
      9c:	726f6300 	rsbvc	r6, pc, #0, 6
      a0:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
      a4:	616d5f33 	cmnvs	sp, r3, lsr pc
      a8:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
      ac:	00010053 	andeq	r0, r1, r3, asr r0
      b0:	05000000 	streq	r0, [r0, #-0]
      b4:	00000002 	andeq	r0, r0, r2
      b8:	01370300 	teqeq	r7, r0, lsl #6
      bc:	200b0321 	andcs	r0, fp, r1, lsr #6
      c0:	200b0321 	andcs	r0, fp, r1, lsr #6
      c4:	200b0321 	andcs	r0, fp, r1, lsr #6
      c8:	200b032f 	andcs	r0, fp, pc, lsr #6
      cc:	200b032f 	andcs	r0, fp, pc, lsr #6
      d0:	200b032f 	andcs	r0, fp, pc, lsr #6
      d4:	200b0321 	andcs	r0, fp, r1, lsr #6
      d8:	200b032f 	andcs	r0, fp, pc, lsr #6
      dc:	0a032f2f 	beq	cbda0 <__Stack_Size+0xcb9a0>
      e0:	0b032f20 	bleq	cbd68 <__Stack_Size+0xcb968>
      e4:	0b032f20 	bleq	cbd6c <__Stack_Size+0xcb96c>
      e8:	0b032f20 	bleq	cbd70 <__Stack_Size+0xcb970>
      ec:	0b032f20 	bleq	cbd74 <__Stack_Size+0xcb974>
      f0:	0b032120 	bleq	c8578 <__Stack_Size+0xc8178>
      f4:	0b032120 	bleq	c857c <__Stack_Size+0xc817c>
      f8:	0b032f20 	bleq	cbd80 <__Stack_Size+0xcb980>
      fc:	0b032120 	bleq	c8584 <__Stack_Size+0xc8184>
     100:	0b032120 	bleq	c8588 <__Stack_Size+0xc8188>
     104:	0b032f20 	bleq	cbd8c <__Stack_Size+0xcb98c>
     108:	0b032f20 	bleq	cbd90 <__Stack_Size+0xcb990>
     10c:	0a032f20 	beq	cbd94 <__Stack_Size+0xcb994>
     110:	0b032120 	bleq	c8598 <__Stack_Size+0xc8198>
     114:	01022120 	tsteq	r2, r0, lsr #2
     118:	85010100 	strhi	r0, [r1, #-256]	; 0x100
     11c:	02000003 	andeq	r0, r0, #3
     120:	0000be00 	andeq	fp, r0, r0, lsl #28
     124:	fb010200 	blx	4092e <__Stack_Size+0x4052e>
     128:	01000d0e 	tsteq	r0, lr, lsl #26
     12c:	00010101 	andeq	r0, r1, r1, lsl #2
     130:	00010000 	andeq	r0, r1, r0
     134:	2f2e0100 	svccs	0x002e0100
     138:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     13c:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     140:	2f2e0062 	svccs	0x002e0062
     144:	5f627375 	svcpl	0x00627375
     148:	0062696c 	rsbeq	r6, r2, ip, ror #18
     14c:	62737500 	rsbsvs	r7, r3, #0, 10
     150:	0000632e 	andeq	r6, r0, lr, lsr #6
     154:	74730000 	ldrbtvc	r0, [r3], #-0
     158:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     15c:	5f783031 	svcpl	0x00783031
     160:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     164:	0100682e 	tsteq	r0, lr, lsr #16
     168:	61680000 	cmnvs	r8, r0
     16c:	61776472 	cmnvs	r7, r2, ror r4
     170:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     174:	00000000 	andeq	r0, r0, r0
     178:	5f627375 	svcpl	0x00627375
     17c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     180:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     184:	73750000 	cmnvc	r5, #0
     188:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     18c:	00682e66 	rsbeq	r2, r8, r6, ror #28
     190:	75000002 	strvc	r0, [r0, #-2]
     194:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
     198:	00000000 	andeq	r0, r0, r0
     19c:	5f627375 	svcpl	0x00627375
     1a0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     1a4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1a8:	73750000 	cmnvc	r5, #0
     1ac:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     1b0:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     1b4:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     1b8:	0000682e 	andeq	r6, r0, lr, lsr #16
     1bc:	66640000 	strbtvs	r0, [r4], -r0
     1c0:	00682e75 	rsbeq	r2, r8, r5, ror lr
     1c4:	75000000 	strvc	r0, [r0, #-0]
     1c8:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
     1cc:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
     1d0:	00020068 	andeq	r0, r2, r8, rrx
     1d4:	62737500 	rsbsvs	r7, r3, #0, 10
     1d8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     1dc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1e0:	00000000 	andeq	r0, r0, r0
     1e4:	013c0205 	teqeq	ip, r5, lsl #4
     1e8:	a1030800 	tstge	r3, r0, lsl #16
     1ec:	01020101 	tsteq	r2, r1, lsl #2
     1f0:	00010100 	andeq	r0, r1, r0, lsl #2
     1f4:	013e0205 	teqeq	lr, r5, lsl #4
     1f8:	b6030800 	strlt	r0, [r3], -r0, lsl #16
     1fc:	01020102 	tsteq	r2, r2, lsl #2
     200:	00010100 	andeq	r0, r1, r0, lsl #2
     204:	01400205 	cmpeq	r0, r5, lsl #4
     208:	b9030800 	stmdblt	r3, {fp}
     20c:	01020102 	tsteq	r2, r2, lsl #2
     210:	00010100 	andeq	r0, r1, r0, lsl #2
     214:	01420205 	cmpeq	r2, r5, lsl #4
     218:	ed030800 	stc	8, cr0, [r3, #-0]
     21c:	24150102 	ldrcs	r0, [r5], #-258	; 0x102
     220:	01000402 	tsteq	r0, r2, lsl #8
     224:	02050001 	andeq	r0, r5, #1
     228:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
     22c:	01039403 	tsteq	r3, r3, lsl #8
     230:	01000102 	tsteq	r0, r2, lsl #2
     234:	02050001 	andeq	r0, r5, #1
     238:	08000150 	stmdaeq	r0, {r4, r6, r8}
     23c:	01039803 	tsteq	r3, r3, lsl #16
     240:	08024b13 	stmdaeq	r2, {r0, r1, r4, r8, r9, fp, lr}
     244:	00010100 	andeq	r0, r1, r0, lsl #2
     248:	01680205 	cmneq	r8, r5, lsl #4
     24c:	9e030800 	cdpls	8, 0, cr0, cr3, cr0, {0}
     250:	01020103 	tsteq	r2, r3, lsl #2
     254:	00010100 	andeq	r0, r1, r0, lsl #2
     258:	016a0205 	cmneq	sl, r5, lsl #4
     25c:	a2030800 	andge	r0, r3, #0, 16
     260:	01020103 	tsteq	r2, r3, lsl #2
     264:	00010100 	andeq	r0, r1, r0, lsl #2
     268:	016c0205 	cmneq	ip, r5, lsl #4
     26c:	a6030800 	strge	r0, [r3], -r0, lsl #16
     270:	01020103 	tsteq	r2, r3, lsl #2
     274:	00010100 	andeq	r0, r1, r0, lsl #2
     278:	016e0205 	cmneq	lr, r5, lsl #4
     27c:	aa030800 	bge	c2284 <__Stack_Size+0xc1e84>
     280:	01020103 	tsteq	r2, r3, lsl #2
     284:	00010100 	andeq	r0, r1, r0, lsl #2
     288:	01700205 	cmneq	r0, r5, lsl #4
     28c:	ae030800 	cdpge	8, 0, cr0, cr3, cr0, {0}
     290:	01020103 	tsteq	r2, r3, lsl #2
     294:	00010100 	andeq	r0, r1, r0, lsl #2
     298:	01720205 	cmneq	r2, r5, lsl #4
     29c:	b2030800 	andlt	r0, r3, #0, 16
     2a0:	01020103 	tsteq	r2, r3, lsl #2
     2a4:	00010100 	andeq	r0, r1, r0, lsl #2
     2a8:	01740205 	cmneq	r4, r5, lsl #4
     2ac:	b6030800 	strlt	r0, [r3], -r0, lsl #16
     2b0:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     2b4:	01010006 	tsteq	r1, r6
     2b8:	80020500 	andhi	r0, r2, r0, lsl #10
     2bc:	03080001 	movweq	r0, #32769	; 0x8001
     2c0:	2101029d 			; <UNDEFINED> instruction: 0x2101029d
     2c4:	2f1f2130 	svccs	0x001f2130
     2c8:	0b03211f 	bleq	c874c <__Stack_Size+0xc834c>
     2cc:	20750320 	rsbscs	r0, r5, r0, lsr #6
     2d0:	231d2322 	tstcs	sp, #-2013265920	; 0x88000000
     2d4:	92759291 	rsbsls	r9, r5, #268435465	; 0x10000009
     2d8:	2f3e7630 	svccs	0x003e7630
     2dc:	08212c21 	stmdaeq	r1!, {r0, r5, sl, fp, sp}
     2e0:	00010100 	andeq	r0, r1, r0, lsl #2
     2e4:	02280205 	eoreq	r0, r8, #1342177280	; 0x50000000
     2e8:	bc030800 	stclt	8, cr0, [r3], {-0}
     2ec:	1b250102 	blne	9406fc <__Stack_Size+0x9402fc>
     2f0:	8a3e7525 	bhi	f9d78c <__Stack_Size+0xf9d38c>
     2f4:	03212221 	teqeq	r1, #268435458	; 0x10000002
     2f8:	03312076 	teqeq	r1, #118	; 0x76
     2fc:	21212010 	teqcs	r1, r0, lsl r0
     300:	2221211e 	eorcs	r2, r1, #-2147483641	; 0x80000007
     304:	0b022131 	bleq	887d0 <__Stack_Size+0x883d0>
     308:	00010100 	andeq	r0, r1, r0, lsl #2
     30c:	02880205 	addeq	r0, r8, #1342177280	; 0x50000000
     310:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
     314:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     318:	01010006 	tsteq	r1, r6
     31c:	94020500 	strls	r0, [r2], #-1280	; 0x500
     320:	03080002 	movweq	r0, #32770	; 0x8002
     324:	130102fa 	movwne	r0, #4858	; 0x12fa
     328:	01000602 	tsteq	r0, r2, lsl #12
     32c:	02050001 	andeq	r0, r5, #1
     330:	080002a0 	stmdaeq	r0, {r5, r7, r9}
     334:	0102fe03 	tsteq	r2, r3, lsl #28
     338:	5a313d13 	bpl	c4f78c <__Stack_Size+0xc4f38c>
     33c:	01000602 	tsteq	r0, r2, lsl #12
     340:	02050001 	andeq	r0, r5, #1
     344:	080002c0 	stmdaeq	r0, {r6, r7, r9}
     348:	01038703 	tsteq	r3, r3, lsl #14
     34c:	00060213 	andeq	r0, r6, r3, lsl r2
     350:	05000101 	streq	r0, [r0, #-257]	; 0x101
     354:	0002cc02 	andeq	ip, r2, r2, lsl #24
     358:	02e30308 	rsceq	r0, r3, #8, 6	; 0x20000000
     35c:	3d762101 	ldfcce	f2, [r6, #-4]!
     360:	0402214d 	streq	r2, [r2], #-333	; 0x14d
     364:	00010100 	andeq	r0, r1, r0, lsl #2
     368:	02f40205 	rscseq	r0, r4, #1342177280	; 0x50000000
     36c:	27030800 	strcs	r0, [r3, -r0, lsl #16]
     370:	20110301 	andscs	r0, r1, r1, lsl #6
     374:	02005b92 	andeq	r5, r0, #149504	; 0x24800
     378:	20060204 	andcs	r0, r6, r4, lsl #4
     37c:	3d888606 	stccc	6, cr8, [r8, #24]
     380:	2d21211f 	stfcss	f2, [r1, #-124]!	; 0xffffff84
     384:	032f302f 	teqeq	pc, #47	; 0x2f
     388:	032000dc 	teqeq	r0, #220	; 0xdc
     38c:	022e7fa8 	eoreq	r7, lr, #168, 30	; 0x2a0
     390:	0101000d 	tsteq	r1, sp
     394:	00020500 	andeq	r0, r2, r0, lsl #10
     398:	03000000 	movweq	r0, #0
     39c:	150101a5 	strne	r0, [r1, #-421]	; 0x1a5
     3a0:	01000202 	tsteq	r0, r2, lsl #4
     3a4:	02050001 	andeq	r0, r5, #1
     3a8:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
     3ac:	0101ab03 	tsteq	r1, r3, lsl #22
     3b0:	023f3e14 	eorseq	r3, pc, #20, 28	; 0x140
     3b4:	01010008 	tsteq	r1, r8
     3b8:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
     3bc:	03080003 	movweq	r0, #32771	; 0x8003
     3c0:	170101b5 			; <UNDEFINED> instruction: 0x170101b5
     3c4:	32222c22 	eorcc	r2, r2, #8704	; 0x2200
     3c8:	01000602 	tsteq	r0, r2, lsl #12
     3cc:	02050001 	andeq	r0, r5, #1
     3d0:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
     3d4:	0101c303 	tsteq	r1, r3, lsl #6
     3d8:	84302131 	ldrthi	r2, [r0], #-305	; 0x131
     3dc:	2f312f40 	svccs	0x00312f40
     3e0:	312f4b31 	teqcc	pc, r1, lsr fp	; <UNPREDICTABLE>
     3e4:	2f2f3d3e 	svccs	0x002f3d3e
     3e8:	222f4b22 	eorcs	r4, pc, #34816	; 0x8800
     3ec:	502f222c 	eorpl	r2, pc, ip, lsr #4
     3f0:	01000702 	tsteq	r0, r2, lsl #14
     3f4:	02050001 	andeq	r0, r5, #1
     3f8:	08000428 	stmdaeq	r0, {r3, r5, sl}
     3fc:	0101f303 	tsteq	r1, r3, lsl #6
     400:	221f4016 	andscs	r4, pc, #22
     404:	3d21211e 	stfccs	f2, [r1, #-120]!	; 0xffffff88
     408:	00080223 	andeq	r0, r8, r3, lsr #4
     40c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     410:	00045002 	andeq	r5, r4, r2
     414:	02820308 	addeq	r0, r2, #8, 6	; 0x20000000
     418:	3d3d1301 	ldccc	3, cr1, [sp, #-4]!
     41c:	00060236 	andeq	r0, r6, r6, lsr r2
     420:	05000101 	streq	r0, [r0, #-257]	; 0x101
     424:	00046c02 	andeq	r6, r4, r2, lsl #24
     428:	00d50308 	sbcseq	r0, r5, r8, lsl #6
     42c:	02021401 	andeq	r1, r2, #16777216	; 0x1000000
     430:	00010100 	andeq	r0, r1, r0, lsl #2
     434:	04700205 	ldrbteq	r0, [r0], #-517	; 0x205
     438:	bc030800 	stclt	8, cr0, [r3], {-0}
     43c:	3d240103 	stfccs	f0, [r4, #-12]!
     440:	3d1f303d 	ldccc	0, cr3, [pc, #-244]	; 354 <_Minimum_Stack_Size+0x254>
     444:	0003022f 	andeq	r0, r3, pc, lsr #4
     448:	05000101 	streq	r0, [r0, #-257]	; 0x101
     44c:	00049402 	andeq	r9, r4, r2, lsl #8
     450:	028f0308 	addeq	r0, pc, #8, 6	; 0x20000000
     454:	4b302101 	blmi	c08860 <__Stack_Size+0xc08460>
     458:	211f2130 	tstcs	pc, r0, lsr r1	; <UNPREDICTABLE>
     45c:	022f303d 	eoreq	r3, pc, #61	; 0x3d
     460:	0101000d 	tsteq	r1, sp
     464:	d4020500 	strle	r0, [r2], #-1280	; 0x500
     468:	03080004 	movweq	r0, #32772	; 0x8004
     46c:	220103c7 	andcs	r0, r1, #469762051	; 0x1c000003
     470:	2f3d1d40 	svccs	0x003d1d40
     474:	03022f2f 	movweq	r2, #12079	; 0x2f2f
     478:	00010100 	andeq	r0, r1, r0, lsl #2
     47c:	04f80205 	ldrbteq	r0, [r8], #517	; 0x205
     480:	d0030800 	andle	r0, r3, r0, lsl #16
     484:	40210103 	eormi	r0, r1, r3, lsl #2
     488:	3d59321c 	lfmcc	f3, 2, [r9, #-112]	; 0xffffff90
     48c:	4b3c0d03 	blmi	f038a0 <__Stack_Size+0xf034a0>
     490:	423d4b50 	eorsmi	r4, sp, #80, 22	; 0x14000
     494:	5942345c 	stmdbpl	r2, {r2, r3, r4, r6, sl, ip, sp}^
     498:	3e4b5e3d 	mcrcc	14, 2, r5, cr11, cr13, {1}
     49c:	022a5f42 	eoreq	r5, sl, #264	; 0x108
     4a0:	0101000e 	tsteq	r1, lr
     4a4:	0000006e 	andeq	r0, r0, lr, rrx
     4a8:	00680002 	rsbeq	r0, r8, r2
     4ac:	01020000 	mrseq	r0, (UNDEF: 2)
     4b0:	000d0efb 	strdeq	r0, [sp], -fp
     4b4:	01010101 	tsteq	r1, r1, lsl #2
     4b8:	01000000 	mrseq	r0, (UNDEF: 0)
     4bc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     4c0:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     4c4:	6c5f3233 	lfmvs	f3, 2, [pc], {51}	; 0x33
     4c8:	2e006269 	cdpcs	2, 0, cr6, cr0, cr9, {3}
     4cc:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
     4d0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     4d4:	74730000 	ldrbtvc	r0, [r3], #-0
     4d8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     4dc:	5f783031 	svcpl	0x00783031
     4e0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     4e4:	0100682e 	tsteq	r0, lr, lsr #16
     4e8:	73750000 	cmnvc	r5, #0
     4ec:	6f635f62 	svcvs	0x00635f62
     4f0:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     4f4:	00000200 	andeq	r0, r0, r0, lsl #4
     4f8:	2e627375 	mcrcs	3, 3, r7, cr2, cr5, {3}
     4fc:	00000068 	andeq	r0, r0, r8, rrx
     500:	62737500 	rsbsvs	r7, r3, #0, 10
     504:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
     508:	70697263 	rsbvc	r7, r9, r3, ror #4
     50c:	2e726f74 	mrccs	15, 3, r6, cr2, cr4, {3}
     510:	00000063 	andeq	r0, r0, r3, rrx
     514:	00930000 	addseq	r0, r3, r0
     518:	00020000 	andeq	r0, r2, r0
     51c:	0000005d 	andeq	r0, r0, sp, asr r0
     520:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     524:	0101000d 	tsteq	r1, sp
     528:	00000101 	andeq	r0, r0, r1, lsl #2
     52c:	00000100 	andeq	r0, r0, r0, lsl #2
     530:	732f2e01 	teqvc	pc, #1, 28
     534:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     538:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     53c:	616d0000 	cmnvs	sp, r0
     540:	632e6e69 	teqvs	lr, #1680	; 0x690
     544:	00000000 	andeq	r0, r0, r0
     548:	2e756664 	cdpcs	6, 7, cr6, cr5, cr4, {3}
     54c:	00000068 	andeq	r0, r0, r8, rrx
     550:	72616800 	rsbvc	r6, r1, #0, 16
     554:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
     558:	00682e65 	rsbeq	r2, r8, r5, ror #28
     55c:	75000000 	strvc	r0, [r0, #-0]
     560:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
     564:	00000000 	andeq	r0, r0, r0
     568:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     56c:	30316632 	eorscc	r6, r1, r2, lsr r6
     570:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     574:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     578:	00000100 	andeq	r0, r0, r0, lsl #2
     57c:	02050000 	andeq	r0, r5, #0
     580:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
     584:	24012603 	strcs	r2, [r1], #-1539	; 0x603
     588:	2f2f2f2f 	svccs	0x002f2f2f
     58c:	661c0330 			; <UNDEFINED> instruction: 0x661c0330
     590:	0402004e 	streq	r0, [r2], #-78	; 0x4e
     594:	02004601 	andeq	r4, r0, #1048576	; 0x100000
     598:	17030104 	strne	r0, [r3, -r4, lsl #2]
     59c:	0a034c66 	beq	d373c <__Stack_Size+0xd333c>
     5a0:	4c324c3c 	ldcmi	12, cr4, [r2], #-240	; 0xffffff10
     5a4:	334a0903 	movtcc	r0, #43267	; 0xa903
     5a8:	01000602 	tsteq	r0, r2, lsl #12
     5ac:	0002e001 	andeq	lr, r2, r1
     5b0:	58000200 	stmdapl	r0, {r9}
     5b4:	02000000 	andeq	r0, r0, #0
     5b8:	0d0efb01 	vstreq	d15, [lr, #-4]
     5bc:	01010100 	mrseq	r0, (UNDEF: 17)
     5c0:	00000001 	andeq	r0, r0, r1
     5c4:	01000001 	tsteq	r0, r1
     5c8:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
     5cc:	5f32336d 	svcpl	0x0032336d
     5d0:	0062696c 	rsbeq	r6, r2, ip, ror #18
     5d4:	72616800 	rsbvc	r6, r1, #0, 16
     5d8:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
     5dc:	00632e65 	rsbeq	r2, r3, r5, ror #28
     5e0:	73000000 	movwvc	r0, #0
     5e4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     5e8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     5ec:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     5f0:	00682e65 	rsbeq	r2, r8, r5, ror #28
     5f4:	68000001 	stmdavs	r0, {r0}
     5f8:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
     5fc:	2e657261 	cdpcs	2, 6, cr7, cr5, cr1, {3}
     600:	00000068 	andeq	r0, r0, r8, rrx
     604:	62737500 	rsbsvs	r7, r3, #0, 10
     608:	0000682e 	andeq	r6, r0, lr, lsr #16
     60c:	00000000 	andeq	r0, r0, r0
     610:	06240205 	strteq	r0, [r4], -r5, lsl #4
     614:	2c030800 	stccs	8, cr0, [r3], {-0}
     618:	4b3b1401 	blmi	ec5624 <__Stack_Size+0xec5224>
     61c:	01000402 	tsteq	r0, r2, lsl #8
     620:	02050001 	andeq	r0, r5, #1
     624:	00000000 	andeq	r0, r0, r0
     628:	14013103 	strne	r3, [r1], #-259	; 0x103
     62c:	0004025d 	andeq	r0, r4, sp, asr r2
     630:	05000101 	streq	r0, [r0, #-257]	; 0x101
     634:	00063c02 	andeq	r3, r6, r2, lsl #24
     638:	013a0308 	teqeq	sl, r8, lsl #6
     63c:	2e0b0316 	mcrcs	3, 0, r0, cr11, cr6, {0}
     640:	01000602 	tsteq	r0, r2, lsl #12
     644:	02050001 	andeq	r0, r5, #1
     648:	00000000 	andeq	r0, r0, r0
     64c:	0100cc03 	tsteq	r0, r3, lsl #24
     650:	3d493d2e 	stclcc	13, cr3, [r9, #-184]	; 0xffffff48
     654:	01040200 	mrseq	r0, R12_usr
     658:	00200631 	eoreq	r0, r0, r1, lsr r6
     65c:	06010402 	streq	r0, [r1], -r2, lsl #8
     660:	04020022 	streq	r0, [r2], #-34	; 0x22
     664:	02002202 	andeq	r2, r0, #536870912	; 0x20000000
     668:	331e0204 	tstcc	lr, #4, 4	; 0x40000000
     66c:	0402005a 	streq	r0, [r2], #-90	; 0x5a
     670:	00200601 	eoreq	r0, r0, r1, lsl #12
     674:	06020402 	streq	r0, [r2], -r2, lsl #8
     678:	04020022 	streq	r0, [r2], #-34	; 0x22
     67c:	02321e02 	eorseq	r1, r2, #2, 28
     680:	0101000a 	tsteq	r1, sl
     684:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
     688:	03080006 	movweq	r0, #32774	; 0x8006
     68c:	130100e1 	movwne	r0, #4321	; 0x10e1
     690:	4b4b1f21 	blmi	12c831c <__Stack_Size+0x12c7f1c>
     694:	024c4b67 	subeq	r4, ip, #105472	; 0x19c00
     698:	0101000c 	tsteq	r1, ip
     69c:	94020500 	strls	r0, [r2], #-1280	; 0x500
     6a0:	03080006 	movweq	r0, #32774	; 0x8006
     6a4:	150100eb 	strne	r0, [r1, #-235]	; 0xeb
     6a8:	01040200 	mrseq	r0, R12_usr
     6ac:	85424d59 	strbhi	r4, [r2, #-3417]	; 0xd59
     6b0:	01040200 	mrseq	r0, R12_usr
     6b4:	4a0c0351 	bmi	301400 <__Stack_Size+0x301000>
     6b8:	01040200 	mrseq	r0, R12_usr
     6bc:	024b3e4b 	subeq	r3, fp, #1200	; 0x4b0
     6c0:	01010009 	tsteq	r1, r9
     6c4:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
     6c8:	03080006 	movweq	r0, #32774	; 0x8006
     6cc:	16010196 			; <UNDEFINED> instruction: 0x16010196
     6d0:	3c7f9403 	cfldrdcc	mvd9, [pc], #-12	; 6cc <__Stack_Size+0x2cc>
     6d4:	01000902 	tsteq	r0, r2, lsl #18
     6d8:	02050001 	andeq	r0, r5, #1
     6dc:	0800070c 	stmdaeq	r0, {r2, r3, r8, r9, sl}
     6e0:	0101a303 	tsteq	r1, r3, lsl #6
     6e4:	2f214b14 	svccs	0x00214b14
     6e8:	01040200 	mrseq	r0, R12_usr
     6ec:	03023d24 	movweq	r3, #11556	; 0x2d24
     6f0:	00010100 	andeq	r0, r1, r0, lsl #2
     6f4:	07280205 	streq	r0, [r8, -r5, lsl #4]!
     6f8:	af030800 	svcge	0x00030800
     6fc:	22130101 	andscs	r0, r3, #1073741824	; 0x40000000
     700:	00070233 	andeq	r0, r7, r3, lsr r2
     704:	05000101 	streq	r0, [r0, #-257]	; 0x101
     708:	00073c02 	andeq	r3, r7, r2, lsl #24
     70c:	01b90308 			; <UNDEFINED> instruction: 0x01b90308
     710:	01090301 	tsteq	r9, r1, lsl #6
     714:	25207703 	strcs	r7, [r0, #-1795]!	; 0x703
     718:	023e2224 	eorseq	r2, lr, #36, 4	; 0x40000002
     71c:	01010005 	tsteq	r1, r5
     720:	54020500 	strpl	r0, [r2], #-1280	; 0x500
     724:	03080007 	movweq	r0, #32775	; 0x8007
     728:	140101de 	strne	r0, [r1], #-478	; 0x1de
     72c:	02316a5c 	eorseq	r6, r1, #92, 20	; 0x5c000
     730:	01010009 	tsteq	r1, r9
     734:	80020500 	andhi	r0, r2, r0, lsl #10
     738:	03080007 	movweq	r0, #32775	; 0x8007
     73c:	240101f0 	strcs	r0, [r1], #-496	; 0x1f0
     740:	8b5a2c22 	blhi	168b7d0 <__Stack_Size+0x168b3d0>
     744:	3e263136 	mcrcc	1, 1, r3, cr6, cr6, {1}
     748:	00060250 	andeq	r0, r6, r0, asr r2
     74c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     750:	0007c802 	andeq	ip, r7, r2, lsl #16
     754:	028e0308 	addeq	r0, lr, #8, 6	; 0x20000000
     758:	010c0301 	tsteq	ip, r1, lsl #6
     75c:	03207403 	teqeq	r0, #50331648	; 0x3000000
     760:	1c24200c 	stcne	0, cr2, [r4], #-48	; 0xffffffd0
     764:	312c313d 	teqcc	ip, sp, lsr r1
     768:	3b311d23 	blcc	c47bfc <__Stack_Size+0xc477fc>
     76c:	73231d24 	teqvc	r3, #36, 26	; 0x900
     770:	22212f30 	eorcs	r2, r1, #48, 30	; 0xc0
     774:	211f2131 	tstcs	pc, r1, lsr r1	; <UNPREDICTABLE>
     778:	00090249 	andeq	r0, r9, r9, asr #4
     77c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     780:	00083402 	andeq	r3, r8, r2, lsl #8
     784:	02b10308 	adcseq	r0, r1, #8, 6	; 0x20000000
     788:	2f591401 	svccs	0x00591401
     78c:	0702302f 	streq	r3, [r2, -pc, lsr #32]
     790:	00010100 	andeq	r0, r1, r0, lsl #2
     794:	08580205 	ldmdaeq	r8, {r0, r2, r9}^
     798:	ca030800 	bgt	c27a0 <__Stack_Size+0xc23a0>
     79c:	b7030101 	strlt	r0, [r3, -r1, lsl #2]
     7a0:	c9032001 	stmdbgt	r3, {r0, sp}
     7a4:	b7032e7e 	smlsdxlt	r3, lr, lr, r2
     7a8:	cf032001 	svcgt	0x00032001
     7ac:	312f207e 	teqcc	pc, lr, ror r0	; <UNPREDICTABLE>
     7b0:	2d213032 	stccs	0, cr3, [r1, #-200]!	; 0xffffff38
     7b4:	01000402 	tsteq	r0, r2, lsl #8
     7b8:	02050001 	andeq	r0, r5, #1
     7bc:	08000880 	stmdaeq	r0, {r7, fp}
     7c0:	0102bb03 	tsteq	r2, r3, lsl #22
     7c4:	04020016 	streq	r0, [r2], #-22
     7c8:	07024001 	streq	r4, [r2, -r1]
     7cc:	00010100 	andeq	r0, r1, r0, lsl #2
     7d0:	08940205 	ldmeq	r4, {r0, r2, r9}
     7d4:	c7030800 	strgt	r0, [r3, -r0, lsl #16]
     7d8:	1f130102 	svcne	0x00130102
     7dc:	02002221 	andeq	r2, r0, #268435458	; 0x10000002
     7e0:	67300104 	ldrvs	r0, [r0, -r4, lsl #2]!
     7e4:	04020021 	streq	r0, [r2], #-33	; 0x21
     7e8:	234f2f01 	movtcs	r2, #65281	; 0xff01
     7ec:	01000702 	tsteq	r0, r2, lsl #14
     7f0:	02050001 	andeq	r0, r5, #1
     7f4:	00000000 	andeq	r0, r0, r0
     7f8:	0102d803 	tsteq	r2, r3, lsl #16
     7fc:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     800:	b14b2f01 	cmplt	fp, r1, lsl #30
     804:	00040221 	andeq	r0, r4, r1, lsr #4
     808:	05000101 	streq	r0, [r0, #-257]	; 0x101
     80c:	0008c802 	andeq	ip, r8, r2, lsl #16
     810:	02e20308 	rsceq	r0, r2, #8, 6	; 0x20000000
     814:	302f2201 	eorcc	r2, pc, r1, lsl #4
     818:	00211f21 	eoreq	r1, r1, r1, lsr #30
     81c:	24010402 	strcs	r0, [r1], #-1026	; 0x402
     820:	0402004b 	streq	r0, [r2], #-75	; 0x4b
     824:	003d3d01 	eorseq	r3, sp, r1, lsl #26
     828:	3d010402 	cfstrscc	mvf0, [r1, #-8]
     82c:	25232f3e 	strcs	r2, [r3, #-3902]!	; 0xf3e
     830:	01000902 	tsteq	r0, r2, lsl #18
     834:	02050001 	andeq	r0, r5, #1
     838:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
     83c:	0102fd03 	tsteq	r2, r3, lsl #26
     840:	00060216 	andeq	r0, r6, r6, lsl r2
     844:	05000101 	streq	r0, [r0, #-257]	; 0x101
     848:	00092002 	andeq	r2, r9, r2
     84c:	03840308 	orreq	r0, r4, #8, 6	; 0x20000000
     850:	023d1401 	eorseq	r1, sp, #16777216	; 0x1000000
     854:	01010009 	tsteq	r1, r9
     858:	38020500 	stmdacc	r2, {r8, sl}
     85c:	03080009 	movweq	r0, #32777	; 0x8009
     860:	1401038d 	strne	r0, [r1], #-909	; 0x38d
     864:	024c3022 	subeq	r3, ip, #34	; 0x22
     868:	01010002 	tsteq	r1, r2
     86c:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
     870:	03080009 	movweq	r0, #32777	; 0x8009
     874:	14010399 	strne	r0, [r1], #-921	; 0x399
     878:	0004024b 	andeq	r0, r4, fp, asr #4
     87c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     880:	00095c02 	andeq	r5, r9, r2, lsl #24
     884:	039f0308 	orrseq	r0, pc, #8, 6	; 0x20000000
     888:	26301501 	ldrtcs	r1, [r0], -r1, lsl #10
     88c:	01000902 	tsteq	r0, r2, lsl #18
     890:	00022e01 	andeq	r2, r2, r1, lsl #28
     894:	82000200 	andhi	r0, r0, #0, 4
     898:	02000000 	andeq	r0, r0, #0
     89c:	0d0efb01 	vstreq	d15, [lr, #-4]
     8a0:	01010100 	mrseq	r0, (UNDEF: 17)
     8a4:	00000001 	andeq	r0, r0, r1
     8a8:	01000001 	tsteq	r0, r1
     8ac:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
     8b0:	5f32336d 	svcpl	0x0032336d
     8b4:	0062696c 	rsbeq	r6, r2, ip, ror #18
     8b8:	73752f2e 	cmnvc	r5, #46, 30	; 0xb8
     8bc:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
     8c0:	64000062 	strvs	r0, [r0], #-98	; 0x62
     8c4:	632e7566 	teqvs	lr, #427819008	; 0x19800000
     8c8:	00000000 	andeq	r0, r0, r0
     8cc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     8d0:	30316632 	eorscc	r6, r1, r2, lsr r6
     8d4:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     8d8:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     8dc:	00000100 	andeq	r0, r0, r0, lsl #2
     8e0:	5f627375 	svcpl	0x00627375
     8e4:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     8e8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     8ec:	66640000 	strbtvs	r0, [r4], -r0
     8f0:	00682e75 	rsbeq	r2, r8, r5, ror lr
     8f4:	75000000 	strvc	r0, [r0, #-0]
     8f8:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
     8fc:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
     900:	00020068 	andeq	r0, r2, r8, rrx
     904:	62737500 	rsbsvs	r7, r3, #0, 10
     908:	0000682e 	andeq	r6, r0, lr, lsr #16
     90c:	61680000 	cmnvs	r8, r0
     910:	61776472 	cmnvs	r7, r2, ror r4
     914:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     918:	00000000 	andeq	r0, r0, r0
     91c:	02050000 	andeq	r0, r5, #0
     920:	08000974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp}
     924:	13013703 	movwne	r3, #5891	; 0x1703
     928:	21211c32 	teqcs	r1, r2, lsr ip
     92c:	21212121 	teqcs	r1, r1, lsr #2
     930:	2f211e22 	svccs	0x00211e22
     934:	1f214b2f 	svcne	0x00214b2f
     938:	15022f21 	strne	r2, [r2, #-3873]	; 0xf21
     93c:	00010100 	andeq	r0, r1, r0, lsl #2
     940:	09d00205 	ldmibeq	r0, {r0, r2, r9}^
     944:	da030800 	ble	c294c <__Stack_Size+0xc254c>
     948:	21210102 	teqcs	r1, r2, lsl #2
     94c:	231f211f 	tstcs	pc, #-1073741817	; 0xc0000007
     950:	2f21221e 	svccs	0x0021221e
     954:	2e0e0322 	cdpcs	3, 0, cr0, cr14, cr2, {1}
     958:	302e7303 	eorcc	r7, lr, r3, lsl #6
     95c:	2c242f42 	stccs	15, cr2, [r4], #-264	; 0xfffffef8
     960:	01000802 	tsteq	r0, r2, lsl #16
     964:	02050001 	andeq	r0, r5, #1
     968:	00000000 	andeq	r0, r0, r0
     96c:	0102f203 	tsteq	r2, r3, lsl #4
     970:	01000102 	tsteq	r0, r2, lsl #2
     974:	02050001 	andeq	r0, r5, #1
     978:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
     97c:	0102f503 	tsteq	r2, r3, lsl #10
     980:	224b2113 	subcs	r2, fp, #-1073741820	; 0xc0000004
     984:	00050222 	andeq	r0, r5, r2, lsr #4
     988:	05000101 	streq	r0, [r0, #-257]	; 0x101
     98c:	000a2c02 	andeq	r2, sl, r2, lsl #24
     990:	02fe0308 	rscseq	r0, lr, #8, 6	; 0x20000000
     994:	4b211301 	blmi	8455a0 <__Stack_Size+0x8451a0>
     998:	05022222 	streq	r2, [r2, #-546]	; 0x222
     99c:	00010100 	andeq	r0, r1, r0, lsl #2
     9a0:	0a440205 	beq	11011bc <__Stack_Size+0x1100dbc>
     9a4:	88030800 	stmdahi	r3, {fp}
     9a8:	1f220103 	svcne	0x00220103
     9ac:	222f4b21 	eorcs	r4, pc, #33792	; 0x8400
     9b0:	0007023e 	andeq	r0, r7, lr, lsr r2
     9b4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     9b8:	000a6c02 	andeq	r6, sl, r2, lsl #24
     9bc:	03920308 	orrseq	r0, r2, #8, 6	; 0x20000000
     9c0:	67212101 	strvs	r2, [r1, -r1, lsl #2]!
     9c4:	09028422 	stmdbeq	r2, {r1, r5, sl, pc}
     9c8:	00010100 	andeq	r0, r1, r0, lsl #2
     9cc:	0aa00205 	beq	fe8011e8 <BootRAM+0xd771989>
     9d0:	9b030800 	blls	c29d8 <__Stack_Size+0xc25d8>
     9d4:	13030103 	movwne	r0, #12547	; 0x3103
     9d8:	221e3e20 	andscs	r3, lr, #32, 28	; 0x200
     9dc:	003e315c 	eorseq	r3, lr, ip, asr r1
     9e0:	06010402 	streq	r0, [r1], -r2, lsl #8
     9e4:	04020020 	streq	r0, [r2], #-32
     9e8:	00590602 	subseq	r0, r9, r2, lsl #12
     9ec:	57020402 	strpl	r0, [r2, -r2, lsl #8]
     9f0:	0c025a33 	stceq	10, cr5, [r2], {51}	; 0x33
     9f4:	00010100 	andeq	r0, r1, r0, lsl #2
     9f8:	0afc0205 	beq	fff01214 <BootRAM+0xee719b5>
     9fc:	ca030800 	bgt	c2a04 <__Stack_Size+0xc2604>
     a00:	24310100 	ldrtcs	r0, [r1], #-256	; 0x100
     a04:	1f21321c 	svcne	0x0021321c
     a08:	22221e23 	eorcs	r1, r2, #560	; 0x230
     a0c:	224b5a22 	subcs	r5, fp, #139264	; 0x22000
     a10:	3d1f221e 	lfmcc	f2, 4, [pc, #-120]	; 9a0 <__Stack_Size+0x5a0>
     a14:	2f3c1703 	svccs	0x003c1703
     a18:	70032f3e 	andvc	r2, r3, lr, lsr pc
     a1c:	2f313d3c 	svccs	0x00313d3c
     a20:	3c0a0330 	stccc	3, cr0, [sl], {48}	; 0x30
     a24:	2f36234c 	svccs	0x0036234c
     a28:	674c3d31 	smlaldxvs	r3, ip, r1, sp
     a2c:	2a580c03 	bcs	1603a40 <__Stack_Size+0x1603640>
     a30:	254b2f24 	strbcs	r2, [fp, #-3876]	; 0xf24
     a34:	3031312f 	eorscc	r3, r1, pc, lsr #2
     a38:	1d033135 	stfnes	f3, [r3, #-212]	; 0xffffff2c
     a3c:	353f2f58 	ldrcc	r2, [pc, #-3928]!	; fffffaec <BootRAM+0xef7028d>
     a40:	211f4c30 	tstcs	pc, r0, lsr ip	; <UNPREDICTABLE>
     a44:	59304121 	ldmdbpl	r0!, {r0, r5, r8, lr}
     a48:	3e31312f 	rsfccsp	f3, f1, #10.0
     a4c:	31433030 	cmpcc	r3, r0, lsr r0
     a50:	432f2f59 	teqmi	pc, #356	; 0x164
     a54:	59313535 	ldmdbpl	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
     a58:	3d1f3d30 	ldccc	13, cr3, [pc, #-192]	; 9a0 <__Stack_Size+0x5a0>
     a5c:	4fc9211f 	svcmi	0x00c9211f
     a60:	2f414b76 	svccs	0x00414b76
     a64:	302f2f30 	eorcc	r2, pc, r0, lsr pc	; <UNPREDICTABLE>
     a68:	5a31352f 	bpl	c4df2c <__Stack_Size+0xc4db2c>
     a6c:	2f30302f 	svccs	0x0030302f
     a70:	25312f36 	ldrcs	r2, [r1, #-3894]!	; 0xf36
     a74:	01001f02 	tsteq	r0, r2, lsl #30
     a78:	02050001 	andeq	r0, r5, #1
     a7c:	00000000 	andeq	r0, r0, r0
     a80:	0103c303 	tsteq	r3, r3, lsl #6
     a84:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
     a88:	00010100 	andeq	r0, r1, r0, lsl #2
     a8c:	00000205 	andeq	r0, r0, r5, lsl #4
     a90:	c7030000 	strgt	r0, [r3, -r0]
     a94:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     a98:	01010006 	tsteq	r1, r6
     a9c:	38020500 	stmdacc	r2, {r8, sl}
     aa0:	0308000d 	movweq	r0, #32781	; 0x800d
     aa4:	130103cb 	movwne	r0, #5067	; 0x13cb
     aa8:	0004022f 	andeq	r0, r4, pc, lsr #4
     aac:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ab0:	000d4402 	andeq	r4, sp, r2, lsl #8
     ab4:	03cf0308 	biceq	r0, pc, #8, 6	; 0x20000000
     ab8:	04020001 	streq	r0, [r2], #-1
     abc:	02021501 	andeq	r1, r2, #4194304	; 0x400000
     ac0:	c7010100 	strgt	r0, [r1, -r0, lsl #2]
     ac4:	02000004 	andeq	r0, r0, #4
     ac8:	00004500 	andeq	r4, r0, r0, lsl #10
     acc:	fb010200 	blx	412d6 <__Stack_Size+0x40ed6>
     ad0:	01000d0e 	tsteq	r0, lr, lsl #26
     ad4:	00010101 	andeq	r0, r1, r1, lsl #2
     ad8:	00010000 	andeq	r0, r1, r0
     adc:	73750100 	cmnvc	r5, #0, 2
     ae0:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
     ae4:	75000062 	strvc	r0, [r0, #-98]	; 0x62
     ae8:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
     aec:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
     af0:	00010063 	andeq	r0, r1, r3, rrx
     af4:	62737500 	rsbsvs	r7, r3, #0, 10
     af8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     afc:	00682e65 	rsbeq	r2, r8, r5, ror #28
     b00:	75000001 	strvc	r0, [r0, #-1]
     b04:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
     b08:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
     b0c:	00010068 	andeq	r0, r1, r8, rrx
     b10:	05000000 	streq	r0, [r0, #-0]
     b14:	00000002 	andeq	r0, r0, r2
     b18:	01220300 	teqeq	r2, r0, lsl #6
     b1c:	00060213 	andeq	r0, r6, r3, lsl r2
     b20:	05000101 	streq	r0, [r0, #-257]	; 0x101
     b24:	00000002 	andeq	r0, r0, r2
     b28:	012e0300 	teqeq	lr, r0, lsl #6
     b2c:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
     b30:	00010100 	andeq	r0, r1, r0, lsl #2
     b34:	00000205 	andeq	r0, r0, r5, lsl #4
     b38:	3a030000 	bcc	c0b40 <__Stack_Size+0xc0740>
     b3c:	06021301 	streq	r1, [r2], -r1, lsl #6
     b40:	00010100 	andeq	r0, r1, r0, lsl #2
     b44:	00000205 	andeq	r0, r0, r5, lsl #4
     b48:	c6030000 	strgt	r0, [r3], -r0
     b4c:	2f130100 	svccs	0x00130100
     b50:	01000402 	tsteq	r0, r2, lsl #8
     b54:	02050001 	andeq	r0, r5, #1
     b58:	00000000 	andeq	r0, r0, r0
     b5c:	0100d203 	tsteq	r0, r3, lsl #4
     b60:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
     b64:	00010100 	andeq	r0, r1, r0, lsl #2
     b68:	00000205 	andeq	r0, r0, r5, lsl #4
     b6c:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
     b70:	02130100 	andseq	r0, r3, #0, 2
     b74:	01010006 	tsteq	r1, r6
     b78:	00020500 	andeq	r0, r2, r0, lsl #10
     b7c:	03000000 	movweq	r0, #0
     b80:	130100ea 	movwne	r0, #4330	; 0x10ea
     b84:	0004022f 	andeq	r0, r4, pc, lsr #4
     b88:	05000101 	streq	r0, [r0, #-257]	; 0x101
     b8c:	00000002 	andeq	r0, r0, r2
     b90:	00f60300 	rscseq	r0, r6, r0, lsl #6
     b94:	08021301 	stmdaeq	r2, {r0, r8, r9, ip}
     b98:	00010100 	andeq	r0, r1, r0, lsl #2
     b9c:	00000205 	andeq	r0, r0, r5, lsl #4
     ba0:	82030000 	andhi	r0, r3, #0
     ba4:	2f130101 	svccs	0x00130101
     ba8:	01000402 	tsteq	r0, r2, lsl #8
     bac:	02050001 	andeq	r0, r5, #1
     bb0:	00000000 	andeq	r0, r0, r0
     bb4:	01018f03 	tsteq	r1, r3, lsl #30
     bb8:	00070213 	andeq	r0, r7, r3, lsl r2
     bbc:	05000101 	streq	r0, [r0, #-257]	; 0x101
     bc0:	00000002 	andeq	r0, r0, r2
     bc4:	019b0300 	orrseq	r0, fp, r0, lsl #6
     bc8:	02671301 	rsbeq	r1, r7, #67108864	; 0x4000000
     bcc:	01010002 	tsteq	r1, r2
     bd0:	00020500 	andeq	r0, r2, r0, lsl #10
     bd4:	03000000 	movweq	r0, #0
     bd8:	130101a8 	movwne	r0, #4520	; 0x11a8
     bdc:	01000e02 	tsteq	r0, r2, lsl #28
     be0:	02050001 	andeq	r0, r5, #1
     be4:	00000000 	andeq	r0, r0, r0
     be8:	0101b403 	tsteq	r1, r3, lsl #8
     bec:	03026713 	movweq	r6, #10003	; 0x2713
     bf0:	00010100 	andeq	r0, r1, r0, lsl #2
     bf4:	0d480205 	sfmeq	f0, 2, [r8, #-20]	; 0xffffffec
     bf8:	c1030800 	tstgt	r3, r0, lsl #16
     bfc:	02130101 	andseq	r0, r3, #1073741824	; 0x40000000
     c00:	01010015 	tsteq	r1, r5, lsl r0
     c04:	00020500 	andeq	r0, r2, r0, lsl #10
     c08:	03000000 	movweq	r0, #0
     c0c:	130101ce 	movwne	r0, #4558	; 0x11ce
     c10:	01001502 	tsteq	r0, r2, lsl #10
     c14:	02050001 	andeq	r0, r5, #1
     c18:	00000000 	andeq	r0, r0, r0
     c1c:	0101db03 	tsteq	r1, r3, lsl #22
     c20:	03014103 	movweq	r4, #4355	; 0x1103
     c24:	035800c2 	cmpeq	r8, #194	; 0xc2
     c28:	03207fbe 	teqeq	r0, #760	; 0x2f8
     c2c:	222000c2 	eorcs	r0, r0, #194	; 0xc2
     c30:	0502303e 	streq	r3, [r2, #-62]	; 0x3e
     c34:	00010100 	andeq	r0, r1, r0, lsl #2
     c38:	00000205 	andeq	r0, r0, r5, lsl #4
     c3c:	f0030000 			; <UNDEFINED> instruction: 0xf0030000
     c40:	67130101 	ldrvs	r0, [r3, -r1, lsl #2]
     c44:	01000302 	tsteq	r0, r2, lsl #6
     c48:	02050001 	andeq	r0, r5, #1
     c4c:	00000000 	andeq	r0, r0, r0
     c50:	0101fc03 	tsteq	r1, r3, lsl #24
     c54:	03026713 	movweq	r6, #10003	; 0x2713
     c58:	00010100 	andeq	r0, r1, r0, lsl #2
     c5c:	00000205 	andeq	r0, r0, r5, lsl #4
     c60:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
     c64:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     c68:	0101000f 	tsteq	r1, pc
     c6c:	72020500 	andvc	r0, r2, #0, 10
     c70:	0308000d 	movweq	r0, #32781	; 0x800d
     c74:	13010294 	movwne	r0, #4756	; 0x1294
     c78:	01000f02 	tsteq	r0, r2, lsl #30
     c7c:	02050001 	andeq	r0, r5, #1
     c80:	00000000 	andeq	r0, r0, r0
     c84:	0102a003 	tsteq	r2, r3
     c88:	000f0213 	andeq	r0, pc, r3, lsl r2	; <UNPREDICTABLE>
     c8c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c90:	00000002 	andeq	r0, r0, r2
     c94:	02ac0300 	adceq	r0, ip, #0, 6
     c98:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
     c9c:	00010100 	andeq	r0, r1, r0, lsl #2
     ca0:	0d900205 	lfmeq	f0, 4, [r0, #20]
     ca4:	b7030800 	strlt	r0, [r3, -r0, lsl #16]
     ca8:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     cac:	0101000e 	tsteq	r1, lr
     cb0:	00020500 	andeq	r0, r2, r0, lsl #10
     cb4:	03000000 	movweq	r0, #0
     cb8:	130102c2 	movwne	r0, #4802	; 0x12c2
     cbc:	01000f02 	tsteq	r0, r2, lsl #30
     cc0:	02050001 	andeq	r0, r5, #1
     cc4:	00000000 	andeq	r0, r0, r0
     cc8:	0102cd03 	tsteq	r2, r3, lsl #26
     ccc:	000f0213 	andeq	r0, pc, r3, lsl r2	; <UNPREDICTABLE>
     cd0:	05000101 	streq	r0, [r0, #-257]	; 0x101
     cd4:	00000002 	andeq	r0, r0, r2
     cd8:	02d80300 	sbcseq	r0, r8, #0, 6
     cdc:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
     ce0:	00010100 	andeq	r0, r1, r0, lsl #2
     ce4:	00000205 	andeq	r0, r0, r5, lsl #4
     ce8:	e3030000 	movw	r0, #12288	; 0x3000
     cec:	83130102 	tsthi	r3, #-2147483648	; 0x80000000
     cf0:	01000502 	tsteq	r0, r2, lsl #10
     cf4:	02050001 	andeq	r0, r5, #1
     cf8:	00000000 	andeq	r0, r0, r0
     cfc:	0102ee03 	tsteq	r2, r3, lsl #28
     d00:	05028313 	streq	r8, [r2, #-787]	; 0x313
     d04:	00010100 	andeq	r0, r1, r0, lsl #2
     d08:	00000205 	andeq	r0, r0, r5, lsl #4
     d0c:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
     d10:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     d14:	0101000c 	tsteq	r1, ip
     d18:	00020500 	andeq	r0, r2, r0, lsl #10
     d1c:	03000000 	movweq	r0, #0
     d20:	13010384 	movwne	r0, #4996	; 0x1384
     d24:	01000e02 	tsteq	r0, r2, lsl #28
     d28:	02050001 	andeq	r0, r5, #1
     d2c:	00000000 	andeq	r0, r0, r0
     d30:	01038f03 	tsteq	r3, r3, lsl #30
     d34:	00100213 	andseq	r0, r0, r3, lsl r2
     d38:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d3c:	00000002 	andeq	r0, r0, r2
     d40:	039a0300 	orrseq	r0, sl, #0, 6
     d44:	10021301 	andne	r1, r2, r1, lsl #6
     d48:	00010100 	andeq	r0, r1, r0, lsl #2
     d4c:	0dac0205 	sfmeq	f0, 4, [ip, #20]!
     d50:	a5030800 	strge	r0, [r3, #-2048]	; 0x800
     d54:	00130103 	andseq	r0, r3, r3, lsl #2
     d58:	06010402 	streq	r0, [r1], -r2, lsl #8
     d5c:	00080282 	andeq	r0, r8, r2, lsl #5
     d60:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d64:	000dcc02 	andeq	ip, sp, r2, lsl #24
     d68:	03b00308 	movseq	r0, #8, 6	; 0x20000000
     d6c:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
     d70:	82060104 	andhi	r0, r6, #4, 2
     d74:	01000802 	tsteq	r0, r2, lsl #16
     d78:	02050001 	andeq	r0, r5, #1
     d7c:	00000000 	andeq	r0, r0, r0
     d80:	0103bc03 	tsteq	r3, r3, lsl #24
     d84:	000f0213 	andeq	r0, pc, r3, lsl r2	; <UNPREDICTABLE>
     d88:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d8c:	00000002 	andeq	r0, r0, r2
     d90:	03c70300 	biceq	r0, r7, #0, 6
     d94:	02671301 	rsbeq	r1, r7, #67108864	; 0x4000000
     d98:	01010003 	tsteq	r1, r3
     d9c:	00020500 	andeq	r0, r2, r0, lsl #10
     da0:	03000000 	movweq	r0, #0
     da4:	130103d3 	movwne	r0, #5075	; 0x13d3
     da8:	01001002 	tsteq	r0, r2
     dac:	02050001 	andeq	r0, r5, #1
     db0:	00000000 	andeq	r0, r0, r0
     db4:	0103df03 	tsteq	r3, r3, lsl #30
     db8:	00100213 	andseq	r0, r0, r3, lsl r2
     dbc:	05000101 	streq	r0, [r0, #-257]	; 0x101
     dc0:	000dec02 	andeq	lr, sp, r2, lsl #24
     dc4:	03ea0308 	mvneq	r0, #8, 6	; 0x20000000
     dc8:	029f1301 	addseq	r1, pc, #67108864	; 0x4000000
     dcc:	01010004 	tsteq	r1, r4
     dd0:	08020500 	stmdaeq	r2, {r8, sl}
     dd4:	0308000e 	movweq	r0, #32782	; 0x800e
     dd8:	130103f5 	movwne	r0, #5109	; 0x13f5
     ddc:	00060283 	andeq	r0, r6, r3, lsl #5
     de0:	05000101 	streq	r0, [r0, #-257]	; 0x101
     de4:	000e2402 	andeq	r2, lr, r2, lsl #8
     de8:	04810308 	streq	r0, [r1], #776	; 0x308
     dec:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
     df0:	00010100 	andeq	r0, r1, r0, lsl #2
     df4:	00000205 	andeq	r0, r0, r5, lsl #4
     df8:	8d030000 	stchi	0, cr0, [r3, #-0]
     dfc:	00130104 	andseq	r0, r3, r4, lsl #2
     e00:	06010402 	streq	r0, [r1], -r2, lsl #8
     e04:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     e08:	07029e02 	streq	r9, [r2, -r2, lsl #28]
     e0c:	00010100 	andeq	r0, r1, r0, lsl #2
     e10:	0e400205 	cdpeq	2, 4, cr0, cr0, cr5, {0}
     e14:	99030800 	stmdbls	r3, {fp}
     e18:	00130104 	andseq	r0, r3, r4, lsl #2
     e1c:	06010402 	streq	r0, [r1], -r2, lsl #8
     e20:	040200ac 	streq	r0, [r2], #-172	; 0xac
     e24:	0b029e02 	bleq	a8634 <__Stack_Size+0xa8234>
     e28:	00010100 	andeq	r0, r1, r0, lsl #2
     e2c:	00000205 	andeq	r0, r0, r5, lsl #4
     e30:	a4030000 	strge	r0, [r3], #-0
     e34:	91130104 	tstls	r3, r4, lsl #2
     e38:	01000702 	tsteq	r0, r2, lsl #14
     e3c:	02050001 	andeq	r0, r5, #1
     e40:	00000000 	andeq	r0, r0, r0
     e44:	0104af03 	tsteq	r4, r3, lsl #30
     e48:	07029113 	smladeq	r2, r3, r1, r9
     e4c:	00010100 	andeq	r0, r1, r0, lsl #2
     e50:	00000205 	andeq	r0, r0, r5, lsl #4
     e54:	bc030000 	stclt	0, cr0, [r3], {-0}
     e58:	02210104 	eoreq	r0, r1, #4, 2
     e5c:	0101001b 	tsteq	r1, fp, lsl r0
     e60:	00020500 	andeq	r0, r2, r0, lsl #10
     e64:	03000000 	movweq	r0, #0
     e68:	130104c8 	movwne	r0, #5320	; 0x14c8
     e6c:	01001002 	tsteq	r0, r2
     e70:	02050001 	andeq	r0, r5, #1
     e74:	00000000 	andeq	r0, r0, r0
     e78:	0104d403 	tsteq	r4, r3, lsl #8
     e7c:	00100213 	andseq	r0, r0, r3, lsl r2
     e80:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e84:	00000002 	andeq	r0, r0, r2
     e88:	04df0300 	ldrbeq	r0, [pc], #768	; e90 <__Stack_Size+0xa90>
     e8c:	029f1301 	addseq	r1, pc, #67108864	; 0x4000000
     e90:	01010004 	tsteq	r1, r4
     e94:	00020500 	andeq	r0, r2, r0, lsl #10
     e98:	03000000 	movweq	r0, #0
     e9c:	130104ea 	movwne	r0, #5354	; 0x14ea
     ea0:	00060283 	andeq	r0, r6, r3, lsl #5
     ea4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ea8:	00000002 	andeq	r0, r0, r2
     eac:	04f60300 	ldrbteq	r0, [r6], #768	; 0x300
     eb0:	211f1301 	tstcs	pc, r1, lsl #6
     eb4:	01040200 	mrseq	r0, R12_usr
     eb8:	02002006 	andeq	r2, r0, #6
     ebc:	58080204 	stmdapl	r8, {r2, r9}
     ec0:	01040200 	mrseq	r0, R12_usr
     ec4:	040200f2 	streq	r0, [r2], #-242	; 0xf2
     ec8:	02009e02 	andeq	r9, r0, #2, 28
     ecc:	002e0104 	eoreq	r0, lr, r4, lsl #2
     ed0:	08020402 	stmdaeq	r2, {r1, sl}
     ed4:	000e0212 	andeq	r0, lr, r2, lsl r2
     ed8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     edc:	00000002 	andeq	r0, r0, r2
     ee0:	05820300 	streq	r0, [r2, #768]	; 0x300
     ee4:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
     ee8:	2e060104 	adfcss	f0, f6, f4
     eec:	02040200 	andeq	r0, r4, #0, 4
     ef0:	02004a08 	andeq	r4, r0, #8, 20	; 0x8000
     ef4:	02900104 	addseq	r0, r0, #4, 2
     ef8:	0101000e 	tsteq	r1, lr
     efc:	00020500 	andeq	r0, r2, r0, lsl #10
     f00:	03000000 	movweq	r0, #0
     f04:	1301058e 	movwne	r0, #5518	; 0x158e
     f08:	01040200 	mrseq	r0, R12_usr
     f0c:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
     f10:	4a080204 	bmi	201728 <__Stack_Size+0x201328>
     f14:	01040200 	mrseq	r0, R12_usr
     f18:	000e0290 	muleq	lr, r0, r2
     f1c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     f20:	00000002 	andeq	r0, r0, r2
     f24:	059a0300 	ldreq	r0, [sl, #768]	; 0x300
     f28:	02911301 	addseq	r1, r1, #67108864	; 0x4000000
     f2c:	01010007 	tsteq	r1, r7
     f30:	00020500 	andeq	r0, r2, r0, lsl #10
     f34:	03000000 	movweq	r0, #0
     f38:	130105a6 	movwne	r0, #5542	; 0x15a6
     f3c:	00070291 	muleq	r7, r1, r2
     f40:	05000101 	streq	r0, [r0, #-257]	; 0x101
     f44:	00000002 	andeq	r0, r0, r2
     f48:	05b20300 	ldreq	r0, [r2, #768]!	; 0x300
     f4c:	9fbc1301 	svcls	0x00bc1301
     f50:	07022548 	streq	r2, [r2, -r8, asr #10]
     f54:	00010100 	andeq	r0, r1, r0, lsl #2
     f58:	00000205 	andeq	r0, r0, r5, lsl #4
     f5c:	c3030000 	movwgt	r0, #12288	; 0x3000
     f60:	30130105 	andscc	r0, r3, r5, lsl #2
     f64:	0d0230bc 	stceq	0, cr3, [r2, #-752]	; 0xfffffd10
     f68:	00010100 	andeq	r0, r1, r0, lsl #2
     f6c:	00000205 	andeq	r0, r0, r5, lsl #4
     f70:	d6030000 	strle	r0, [r3], -r0
     f74:	02160105 	andseq	r0, r6, #1073741825	; 0x40000001
     f78:	01010003 	tsteq	r1, r3
     f7c:	00020500 	andeq	r0, r2, r0, lsl #10
     f80:	03000000 	movweq	r0, #0
     f84:	160105e3 	strne	r0, [r1], -r3, ror #11
     f88:	00030230 	andeq	r0, r3, r0, lsr r2
     f8c:	00b40101 	adcseq	r0, r4, r1, lsl #2
     f90:	00020000 	andeq	r0, r2, r0
     f94:	00000060 	andeq	r0, r0, r0, rrx
     f98:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     f9c:	0101000d 	tsteq	r1, sp
     fa0:	00000101 	andeq	r0, r0, r1, lsl #2
     fa4:	00000100 	andeq	r0, r0, r0, lsl #2
     fa8:	62737501 	rsbsvs	r7, r3, #4194304	; 0x400000
     fac:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     fb0:	73750000 	cmnvc	r5, #0
     fb4:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
     fb8:	00632e74 	rsbeq	r2, r3, r4, ror lr
     fbc:	75000001 	strvc	r0, [r0, #-1]
     fc0:	745f6273 	ldrbvc	r6, [pc], #-627	; fc8 <__Stack_Size+0xbc8>
     fc4:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     fc8:	00010068 	andeq	r0, r1, r8, rrx
     fcc:	62737500 	rsbsvs	r7, r3, #0, 10
     fd0:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
     fd4:	00682e73 	rsbeq	r2, r8, r3, ror lr
     fd8:	75000001 	strvc	r0, [r0, #-1]
     fdc:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
     fe0:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
     fe4:	00010068 	andeq	r0, r1, r8, rrx
     fe8:	62737500 	rsbsvs	r7, r3, #0, 10
     fec:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
     ff0:	00682e65 	rsbeq	r2, r8, r5, ror #28
     ff4:	00000001 	andeq	r0, r0, r1
     ff8:	80020500 	andhi	r0, r2, r0, lsl #10
     ffc:	0308000e 	movweq	r0, #32782	; 0x800e
    1000:	84230129 	strthi	r0, [r3], #-297	; 0x129
    1004:	3d36593e 	ldccc	9, cr5, [r6, #-248]!	; 0xffffff08
    1008:	914b3d1f 	cmpls	fp, pc, lsl sp
    100c:	3c170395 	ldccc	3, cr0, [r7], {149}	; 0x95
    1010:	42593021 	subsmi	r3, r9, #33	; 0x21
    1014:	30435930 	subcc	r5, r3, r0, lsr r9
    1018:	13083059 	movwne	r3, #32857	; 0x8059
    101c:	200903f3 	strdcs	r0, [r9], -r3
    1020:	5c5b3167 	ldfple	f3, [fp], {103}	; 0x67
    1024:	311d933f 	tstcc	sp, pc, lsr r3
    1028:	01001602 	tsteq	r0, r2, lsl #12
    102c:	02050001 	andeq	r0, r5, #1
    1030:	00000000 	andeq	r0, r0, r0
    1034:	01019e03 	tsteq	r1, r3, lsl #28
    1038:	5a3e7623 	bpl	f9e8cc <__Stack_Size+0xf9e4cc>
    103c:	3f5b3167 	svccc	0x005b3167
    1040:	00085b31 	andeq	r5, r8, r1, lsr fp
    1044:	00630101 	rsbeq	r0, r3, r1, lsl #2
    1048:	00020000 	andeq	r0, r2, r0
    104c:	00000045 	andeq	r0, r0, r5, asr #32
    1050:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1054:	0101000d 	tsteq	r1, sp
    1058:	00000101 	andeq	r0, r0, r1, lsl #2
    105c:	00000100 	andeq	r0, r0, r0, lsl #2
    1060:	62737501 	rsbsvs	r7, r3, #4194304	; 0x400000
    1064:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1068:	73750000 	cmnvc	r5, #0
    106c:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
    1070:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    1074:	00000100 	andeq	r0, r0, r0, lsl #2
    1078:	5f627375 	svcpl	0x00627375
    107c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    1080:	0100682e 	tsteq	r0, lr, lsr #16
    1084:	73750000 	cmnvc	r5, #0
    1088:	6f635f62 	svcvs	0x00635f62
    108c:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
    1090:	00000100 	andeq	r0, r0, r0, lsl #2
    1094:	02050000 	andeq	r0, r5, #0
    1098:	08000fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp}
    109c:	21013503 	tstcs	r1, r3, lsl #10
    10a0:	2f211d31 	svccs	0x00211d31
    10a4:	231d233d 	tstcs	sp, #-201326592	; 0xf4000000
    10a8:	01000f02 	tsteq	r0, r2, lsl #30
    10ac:	00035001 	andeq	r5, r3, r1
    10b0:	7b000200 	blvc	18b8 <__Stack_Size+0x14b8>
    10b4:	02000000 	andeq	r0, r0, #0
    10b8:	0d0efb01 	vstreq	d15, [lr, #-4]
    10bc:	01010100 	mrseq	r0, (UNDEF: 17)
    10c0:	00000001 	andeq	r0, r0, r1
    10c4:	01000001 	tsteq	r0, r1
    10c8:	5f627375 	svcpl	0x00627375
    10cc:	0062696c 	rsbeq	r6, r2, ip, ror #18
    10d0:	62737500 	rsbsvs	r7, r3, #0, 10
    10d4:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    10d8:	00632e65 	rsbeq	r2, r3, r5, ror #28
    10dc:	75000001 	strvc	r0, [r0, #-1]
    10e0:	745f6273 	ldrbvc	r6, [pc], #-627	; 10e8 <__Stack_Size+0xce8>
    10e4:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    10e8:	00010068 	andeq	r0, r1, r8, rrx
    10ec:	62737500 	rsbsvs	r7, r3, #0, 10
    10f0:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    10f4:	0100682e 	tsteq	r0, lr, lsr #16
    10f8:	73750000 	cmnvc	r5, #0
    10fc:	6f635f62 	svcvs	0x00635f62
    1100:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
    1104:	00000100 	andeq	r0, r0, r0, lsl #2
    1108:	5f627375 	svcpl	0x00627375
    110c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    1110:	0100682e 	tsteq	r0, lr, lsr #16
    1114:	73750000 	cmnvc	r5, #0
    1118:	656d5f62 	strbvs	r5, [sp, #-3938]!	; 0xf62
    111c:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    1120:	75000001 	strvc	r0, [r0, #-1]
    1124:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
    1128:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
    112c:	00010068 	andeq	r0, r1, r8, rrx
    1130:	05000000 	streq	r0, [r0, #-0]
    1134:	00100c02 	andseq	r0, r0, r2, lsl #24
    1138:	01350308 	teqeq	r5, r8, lsl #6
    113c:	223e222f 	eorscs	r2, lr, #-268435454	; 0xf0000002
    1140:	05022f4b 	streq	r2, [r2, #-3915]	; 0xf4b
    1144:	00010100 	andeq	r0, r1, r0, lsl #2
    1148:	10300205 	eorsne	r0, r0, r5, lsl #4
    114c:	e3030800 	movw	r0, #14336	; 0x3800
    1150:	222f0100 	eorcs	r0, pc, #0, 2
    1154:	2f4b223e 	svccs	0x004b223e
    1158:	01000502 	tsteq	r0, r2, lsl #10
    115c:	02050001 	andeq	r0, r5, #1
    1160:	08001054 	stmdaeq	r0, {r2, r4, r6, ip}
    1164:	01019b03 	tsteq	r1, r3, lsl #22
    1168:	233d222f 	teqcs	sp, #-268435454	; 0xf0000002
    116c:	5b311d23 	blpl	c48600 <__Stack_Size+0xc48200>
    1170:	30402223 	subcc	r2, r0, r3, lsr #4
    1174:	3133404e 	teqcc	r3, lr, asr #32
    1178:	31474022 	cmpcc	r7, r2, lsr #32
    117c:	424c231d 	submi	r2, ip, #1946157056	; 0x74000000
    1180:	4b580b03 	blmi	1603d94 <__Stack_Size+0x1603994>
    1184:	032e6003 	teqeq	lr, #3
    1188:	07022021 	streq	r2, [r2, -r1, lsr #32]
    118c:	00010100 	andeq	r0, r1, r0, lsl #2
    1190:	10e40205 	rscne	r0, r4, r5, lsl #4
    1194:	e0030800 	and	r0, r3, r0, lsl #16
    1198:	1f130103 	svcne	0x00130103
    119c:	33212f2f 	teqcc	r1, #47, 30	; 0xbc
    11a0:	01040200 	mrseq	r0, R12_usr
    11a4:	30062006 	andcc	r2, r6, r6
    11a8:	2d34924d 	lfmcs	f1, 1, [r4, #-308]!	; 0xfffffecc
    11ac:	76512135 			; <UNDEFINED> instruction: 0x76512135
    11b0:	2a244c84 	bcs	9143c8 <__Stack_Size+0x913fc8>
    11b4:	1d302f2f 	ldcne	15, cr2, [r0, #-188]!	; 0xffffff44
    11b8:	12022323 	andne	r2, r2, #-1946157056	; 0x8c000000
    11bc:	00010100 	andeq	r0, r1, r0, lsl #2
    11c0:	118c0205 	orrne	r0, ip, r5, lsl #4
    11c4:	ca030800 	bgt	c31cc <__Stack_Size+0xc2dcc>
    11c8:	21220100 	teqcs	r2, r0, lsl #2
    11cc:	302f591f 	eorcc	r5, pc, pc, lsl r9	; <UNPREDICTABLE>
    11d0:	22324b21 	eorscs	r4, r2, #33792	; 0x8400
    11d4:	01000802 	tsteq	r0, r2, lsl #16
    11d8:	02050001 	andeq	r0, r5, #1
    11dc:	080011c4 	stmdaeq	r0, {r2, r6, r7, r8, ip}
    11e0:	0100f803 	tsteq	r0, r3, lsl #16
    11e4:	003e8424 	eorseq	r8, lr, r4, lsr #8
    11e8:	06010402 	streq	r0, [r1], -r2, lsl #8
    11ec:	342f0620 	strtcc	r0, [pc], #-1568	; 11f4 <__Stack_Size+0xdf4>
    11f0:	2f1e224b 	svccs	0x001e224b
    11f4:	0221252f 	eoreq	r2, r1, #197132288	; 0xbc00000
    11f8:	01010007 	tsteq	r1, r7
    11fc:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
    1200:	03080012 	movweq	r0, #32786	; 0x8012
    1204:	210101e9 	smlattcs	r1, r9, r1, r0
    1208:	224b3e40 	subcs	r3, fp, #64, 28	; 0x400
    120c:	03423d35 	movteq	r3, #11573	; 0x2d35
    1210:	7203200f 	andvc	r2, r3, #15
    1214:	035f4320 	cmpeq	pc, #32, 6	; 0x80000000
    1218:	40322075 	eorsmi	r2, r2, r5, ror r0
    121c:	04020031 	streq	r0, [r2], #-49	; 0x31
    1220:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    1224:	2e09032f 	cdpcs	3, 0, cr0, cr9, cr15, {1}
    1228:	231d2347 	tstcs	sp, #469762049	; 0x1c000001
    122c:	5a5e4b4c 	bpl	1793f64 <__Stack_Size+0x1793b64>
    1230:	942f6b23 	strtls	r6, [pc], #-2851	; 1238 <__Stack_Size+0xe38>
    1234:	0221314b 	eoreq	r3, r1, #-1073741806	; 0xc0000012
    1238:	0101000a 	tsteq	r1, sl
    123c:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
    1240:	03080012 	movweq	r0, #32786	; 0x8012
    1244:	260102c2 	strcs	r0, [r1], -r2, asr #5
    1248:	03200f03 	teqeq	r0, #3, 30
    124c:	0f032071 	svceq	0x00032071
    1250:	20710320 	rsbscs	r0, r1, r0, lsr #6
    1254:	32544321 	subscc	r4, r4, #-2080374784	; 0x84000000
    1258:	002f3140 	eoreq	r3, pc, r0, asr #2
    125c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1260:	0321062e 	teqeq	r1, #48234496	; 0x2e00000
    1264:	31472e09 	cmpcc	r7, r9, lsl #28
    1268:	8588231d 	strhi	r2, [r8, #797]	; 0x31d
    126c:	2e6f034b 	cdpcs	3, 6, cr0, cr15, cr11, {2}
    1270:	02201203 	eoreq	r1, r0, #805306368	; 0x30000000
    1274:	01010007 	tsteq	r1, r7
    1278:	60020500 	andvs	r0, r2, r0, lsl #10
    127c:	03080013 	movweq	r0, #32787	; 0x8013
    1280:	210102f8 	strdcs	r0, [r1, -r8]
    1284:	07024c67 	streq	r4, [r2, -r7, ror #24]
    1288:	00010100 	andeq	r0, r1, r0, lsl #2
    128c:	13840205 	orrne	r0, r4, #1342177280	; 0x50000000
    1290:	92030800 	andls	r0, r3, #0, 16
    1294:	3d150103 	ldfccs	f0, [r5, #-12]
    1298:	2f233d22 	svccs	0x00233d22
    129c:	01000402 	tsteq	r0, r2, lsl #8
    12a0:	02050001 	andeq	r0, r5, #1
    12a4:	080013a0 	stmdaeq	r0, {r5, r7, r8, r9, ip}
    12a8:	0107c903 	tsteq	r7, r3, lsl #18
    12ac:	4b5a6821 	blmi	169b338 <__Stack_Size+0x169af38>
    12b0:	000d0240 	andeq	r0, sp, r0, asr #4
    12b4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    12b8:	0013e002 	andseq	lr, r3, r2
    12bc:	06cc0308 	strbeq	r0, [ip], r8, lsl #6
    12c0:	2c3e2801 	ldccs	8, cr2, [lr], #-4
    12c4:	2f5c563e 	svccs	0x005c563e
    12c8:	31303030 	teqcc	r0, r0, lsr r0
    12cc:	7dbd032f 	ldcvc	3, cr0, [sp, #188]!	; 0xbc
    12d0:	40304e4a 	eorsmi	r4, r0, sl, asr #28
    12d4:	3d294f30 	stccc	15, cr4, [r9, #-192]!	; 0xffffff40
    12d8:	4a0c033d 	bmi	301fd4 <__Stack_Size+0x301bd4>
    12dc:	3c3c0330 	ldccc	3, cr0, [ip], #-192	; 0xffffff40
    12e0:	3c440359 	mcrrcc	3, 5, r0, r4, cr9
    12e4:	30443e3d 	subcc	r3, r4, sp, lsr lr
    12e8:	033e3d3d 	teqeq	lr, #3904	; 0xf40
    12ec:	30313c0b 	eorscc	r3, r1, fp, lsl #24
    12f0:	30333141 	eorscc	r3, r3, r1, asr #2
    12f4:	032e0903 	teqeq	lr, #49152	; 0xc000
    12f8:	9c362e0a 	ldcls	14, cr2, [r6], #-40	; 0xffffffd8
    12fc:	032e7503 	teqeq	lr, #12582912	; 0xc00000
    1300:	19032010 	stmdbne	r3, {r4, sp}
    1304:	2f3e303c 	svccs	0x003e303c
    1308:	3e303e30 	mrccc	14, 1, r3, cr0, cr0, {1}
    130c:	42303d30 	eorsmi	r3, r0, #48, 26	; 0xc00
    1310:	5e4b695a 	mcrpl	9, 2, r6, cr11, cr10, {2}
    1314:	306d7530 	rsbcc	r7, sp, r0, lsr r5
    1318:	03200e03 	teqeq	r0, #3, 28	; 0x30
    131c:	5f432072 	svcpl	0x00432072
    1320:	32207503 	eorcc	r7, r0, #12582912	; 0xc00000
    1324:	03593140 	cmpeq	r9, #64, 2
    1328:	50303c09 	eorspl	r3, r0, r9, lsl #24
    132c:	674b5930 	smlaldxvs	r5, fp, r0, r9
    1330:	233d2289 	teqcs	sp, #-1879048184	; 0x90000008
    1334:	3067322f 	rsbcc	r3, r7, pc, lsr #4
    1338:	3f316941 	svccc	0x00316941
    133c:	4c314d41 	ldcmi	13, cr4, [r1], #-260	; 0xfffffefc
    1340:	5a302308 	bpl	c09f68 <__Stack_Size+0xc09b68>
    1344:	4b405a30 	blmi	1017c0c <__Stack_Size+0x101780c>
    1348:	2f032f40 	svccs	0x00032f40
    134c:	d6032f4a 	strle	r2, [r3], -sl, asr #30
    1350:	2c032e7e 	stccs	14, cr2, [r3], {126}	; 0x7e
    1354:	2e0b032e 	cdpcs	3, 0, cr0, cr11, cr14, {1}
    1358:	01000c02 	tsteq	r0, r2, lsl #24
    135c:	02050001 	andeq	r0, r5, #1
    1360:	080016bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, ip}
    1364:	0107a003 	tsteq	r7, r3
    1368:	02003e21 	andeq	r3, r0, #528	; 0x210
    136c:	2e060104 	adfcss	f0, f6, f4
    1370:	7c8a0306 	stcvc	3, cr0, [sl], {6}
    1374:	33221e2e 	teqcc	r2, #736	; 0x2e0
    1378:	211f5926 	tstcs	pc, r6, lsr #18
    137c:	301e222f 	andscc	r2, lr, pc, lsr #4
    1380:	1f213077 	svcne	0x00213077
    1384:	2f211f2f 	svccs	0x00211f2f
    1388:	22404c3f 	subcs	r4, r0, #16128	; 0x3f00
    138c:	d3033d4e 	movwle	r3, #15694	; 0x3d4e
    1390:	303f9e03 	eorscc	r9, pc, r3, lsl #28
    1394:	20090351 	andcs	r0, r9, r1, asr r3
    1398:	0f022d31 	svceq	0x00022d31
    139c:	00010100 	andeq	r0, r1, r0, lsl #2
    13a0:	17840205 	strne	r0, [r4, r5, lsl #4]
    13a4:	dd030800 	stcle	8, cr0, [r3, #-0]
    13a8:	31220107 	teqcc	r2, r7, lsl #2
    13ac:	01040200 	mrseq	r0, R12_usr
    13b0:	02002006 	andeq	r2, r0, #6
    13b4:	76060204 	strvc	r0, [r6], -r4, lsl #4
    13b8:	02040200 	andeq	r0, r4, #0, 4
    13bc:	09023264 	stmdbeq	r2, {r2, r5, r6, r9, ip, sp}
    13c0:	00010100 	andeq	r0, r1, r0, lsl #2
    13c4:	17bc0205 	ldrne	r0, [ip, r5, lsl #4]!
    13c8:	f8030800 			; <UNDEFINED> instruction: 0xf8030800
    13cc:	3e210106 	sufccs	f0, f1, f6
    13d0:	01040200 	mrseq	r0, R12_usr
    13d4:	30062e06 	andcc	r2, r6, r6, lsl #28
    13d8:	00303f30 	eorseq	r3, r0, r0, lsr pc
    13dc:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    13e0:	01040200 	mrseq	r0, R12_usr
    13e4:	4c3d311f 	ldfmis	f3, [sp], #-124	; 0xffffff84
    13e8:	2d312350 	ldccs	3, cr2, [r1, #-320]!	; 0xfffffec0
    13ec:	01000902 	tsteq	r0, r2, lsl #18
    13f0:	02050001 	andeq	r0, r5, #1
    13f4:	00000000 	andeq	r0, r0, r0
    13f8:	0107f103 	tsteq	r7, r3, lsl #2
    13fc:	01000102 	tsteq	r0, r2, lsl #2
    1400:	00008f01 	andeq	r8, r0, r1, lsl #30
    1404:	36000200 	strcc	r0, [r0], -r0, lsl #4
    1408:	02000000 	andeq	r0, r0, #0
    140c:	0d0efb01 	vstreq	d15, [lr, #-4]
    1410:	01010100 	mrseq	r0, (UNDEF: 17)
    1414:	00000001 	andeq	r0, r0, r1
    1418:	01000001 	tsteq	r0, r1
    141c:	5f627375 	svcpl	0x00627375
    1420:	0062696c 	rsbeq	r6, r2, ip, ror #18
    1424:	62737500 	rsbsvs	r7, r3, #0, 10
    1428:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
    142c:	0100632e 	tsteq	r0, lr, lsr #6
    1430:	73750000 	cmnvc	r5, #0
    1434:	79745f62 	ldmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1438:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    143c:	00000100 	andeq	r0, r0, r0, lsl #2
    1440:	02050000 	andeq	r0, r5, #0
    1444:	08001818 	stmdaeq	r0, {r3, r4, fp, ip}
    1448:	24012303 	strcs	r2, [r1], #-771	; 0x303
    144c:	232b232b 	teqcs	fp, #-1409286144	; 0xac000000
    1450:	04020021 	streq	r0, [r2], #-33	; 0x21
    1454:	00200601 	eoreq	r0, r0, r1, lsl #12
    1458:	06020402 	streq	r0, [r2], -r2, lsl #8
    145c:	0402004e 	streq	r0, [r2], #-78	; 0x4e
    1460:	02002c02 	andeq	r2, r0, #512	; 0x200
    1464:	00300204 	eorseq	r0, r0, r4, lsl #4
    1468:	2f020402 	svccs	0x00020402
    146c:	0001024e 	andeq	r0, r1, lr, asr #4
    1470:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1474:	00184802 	andseq	r4, r8, r2, lsl #16
    1478:	013c0308 	teqeq	ip, r8, lsl #6
    147c:	2b232b24 	blcs	8cc114 <__Stack_Size+0x8cbd14>
    1480:	02002123 	andeq	r2, r0, #-1073741816	; 0xc0000008
    1484:	20060104 	andcs	r0, r6, r4, lsl #2
    1488:	02040200 	andeq	r0, r4, #0, 4
    148c:	02693006 	rsbeq	r3, r9, #6
    1490:	01010001 	tsteq	r1, r1

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	0800013c 	stmdaeq	r0, {r2, r3, r4, r5, r8}
  1c:	00000002 	andeq	r0, r0, r2
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	0000000c 	andeq	r0, r0, ip
  24:	00000000 	andeq	r0, r0, r0
  28:	0800013e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8}
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	00000002 	andeq	r0, r0, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	0000000c 	andeq	r0, r0, ip
  34:	00000000 	andeq	r0, r0, r0
  38:	08000140 	stmdaeq	r0, {r6, r8}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	00000002 	andeq	r0, r0, r2

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	0000000c 	andeq	r0, r0, ip
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	00000000 	andeq	r0, r0, r0
  48:	08000142 	stmdaeq	r0, {r1, r6, r8}
  4c:	0000000a 	andeq	r0, r0, sl

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	0000000c 	andeq	r0, r0, ip
  54:	00000000 	andeq	r0, r0, r0
  58:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
  5c:	00000002 	andeq	r0, r0, r2
  60:	0000000c 	andeq	r0, r0, ip
  64:	00000000 	andeq	r0, r0, r0
  68:	08000150 	stmdaeq	r0, {r4, r6, r8}
  6c:	00000018 	andeq	r0, r0, r8, lsl r0
  70:	0000000c 	andeq	r0, r0, ip
  74:	00000000 	andeq	r0, r0, r0
  78:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}
  7c:	00000002 	andeq	r0, r0, r2
  80:	0000000c 	andeq	r0, r0, ip
  84:	00000000 	andeq	r0, r0, r0
  88:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
  8c:	00000002 	andeq	r0, r0, r2
  90:	0000000c 	andeq	r0, r0, ip
  94:	00000000 	andeq	r0, r0, r0
  98:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  9c:	00000002 	andeq	r0, r0, r2
  a0:	0000000c 	andeq	r0, r0, ip
  a4:	00000000 	andeq	r0, r0, r0
  a8:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
  ac:	00000002 	andeq	r0, r0, r2
  b0:	0000000c 	andeq	r0, r0, ip
  b4:	00000000 	andeq	r0, r0, r0
  b8:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
  bc:	00000002 	andeq	r0, r0, r2
  c0:	0000000c 	andeq	r0, r0, ip
  c4:	00000000 	andeq	r0, r0, r0
  c8:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
  cc:	00000002 	andeq	r0, r0, r2
  d0:	0000000c 	andeq	r0, r0, ip
  d4:	00000000 	andeq	r0, r0, r0
  d8:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	00000018 	andeq	r0, r0, r8, lsl r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	08000180 	stmdaeq	r0, {r7, r8}
  ec:	000000a8 	andeq	r0, r0, r8, lsr #1
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
  f8:	00000001 	andeq	r0, r0, r1
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	00000000 	andeq	r0, r0, r0
 104:	08000228 	stmdaeq	r0, {r3, r5, r9}
 108:	00000060 	andeq	r0, r0, r0, rrx
 10c:	40100e41 	andsmi	r0, r0, r1, asr #28
 110:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 114:	02854003 	addeq	r4, r5, #3
 118:	00018e40 	andeq	r8, r1, r0, asr #28
 11c:	0000000c 	andeq	r0, r0, ip
 120:	00000000 	andeq	r0, r0, r0
 124:	08000288 	stmdaeq	r0, {r3, r7, r9}
 128:	0000000c 	andeq	r0, r0, ip
 12c:	0000000c 	andeq	r0, r0, ip
 130:	00000000 	andeq	r0, r0, r0
 134:	08000294 	stmdaeq	r0, {r2, r4, r7, r9}
 138:	0000000c 	andeq	r0, r0, ip
 13c:	0000000c 	andeq	r0, r0, ip
 140:	00000000 	andeq	r0, r0, r0
 144:	080002a0 	stmdaeq	r0, {r5, r7, r9}
 148:	00000020 	andeq	r0, r0, r0, lsr #32
 14c:	0000000c 	andeq	r0, r0, ip
 150:	00000000 	andeq	r0, r0, r0
 154:	080002c0 	stmdaeq	r0, {r6, r7, r9}
 158:	0000000c 	andeq	r0, r0, ip
 15c:	00000018 	andeq	r0, r0, r8, lsl r0
 160:	00000000 	andeq	r0, r0, r0
 164:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
 168:	00000028 	andeq	r0, r0, r8, lsr #32
 16c:	40080e41 	andmi	r0, r8, r1, asr #28
 170:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 174:	00000001 	andeq	r0, r0, r1
 178:	00000024 	andeq	r0, r0, r4, lsr #32
 17c:	00000000 	andeq	r0, r0, r0
 180:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
 184:	0000007c 	andeq	r0, r0, ip, ror r0
 188:	40180e41 	andsmi	r0, r8, r1, asr #28
 18c:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 190:	04824005 	streq	r4, [r2], #5
 194:	40038440 	andmi	r8, r3, r0, asr #8
 198:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
 19c:	00000001 	andeq	r0, r0, r1
 1a0:	0000000c 	andeq	r0, r0, ip
	...
 1ac:	00000004 	andeq	r0, r0, r4
 1b0:	0000000c 	andeq	r0, r0, ip
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	0000000c 	andeq	r0, r0, ip
 1c4:	00000000 	andeq	r0, r0, r0
 1c8:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
 1cc:	00000018 	andeq	r0, r0, r8, lsl r0
 1d0:	00000018 	andeq	r0, r0, r8, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
 1dc:	00000084 	andeq	r0, r0, r4, lsl #1
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 1e8:	00000001 	andeq	r0, r0, r1
 1ec:	0000000c 	andeq	r0, r0, ip
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	08000428 	stmdaeq	r0, {r3, r5, sl}
 1f8:	00000028 	andeq	r0, r0, r8, lsr #32
 1fc:	0000000c 	andeq	r0, r0, ip
 200:	00000000 	andeq	r0, r0, r0
 204:	08000450 	stmdaeq	r0, {r4, r6, sl}
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	0000000c 	andeq	r0, r0, ip
 210:	00000000 	andeq	r0, r0, r0
 214:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
 218:	00000004 	andeq	r0, r0, r4
 21c:	0000001c 	andeq	r0, r0, ip, lsl r0
 220:	00000000 	andeq	r0, r0, r0
 224:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
 228:	00000024 	andeq	r0, r0, r4, lsr #32
 22c:	40100e41 	andsmi	r0, r0, r1, asr #28
 230:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
 234:	02824003 	addeq	r4, r2, #3
 238:	00018e40 	andeq	r8, r1, r0, asr #28
 23c:	00000018 	andeq	r0, r0, r8, lsl r0
 240:	00000000 	andeq	r0, r0, r0
 244:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
 248:	00000040 	andeq	r0, r0, r0, asr #32
 24c:	40080e41 	andmi	r0, r8, r1, asr #28
 250:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 254:	00000001 	andeq	r0, r0, r1
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000000 	andeq	r0, r0, r0
 260:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
 264:	00000022 	andeq	r0, r0, r2, lsr #32
 268:	40100e41 	andsmi	r0, r0, r1, asr #28
 26c:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
 270:	02824003 	addeq	r4, r2, #3
 274:	00018e40 	andeq	r8, r1, r0, asr #28
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	080004f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl}
 284:	000000b4 	strheq	r0, [r0], -r4
 288:	40100e41 	andsmi	r0, r0, r1, asr #28
 28c:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
 290:	02864003 	addeq	r4, r6, #3
 294:	00018e40 	andeq	r8, r1, r0, asr #28
 298:	0000000c 	andeq	r0, r0, ip
 29c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a8:	00000018 	andeq	r0, r0, r8, lsl r0
 2ac:	00000298 	muleq	r0, r8, r2
 2b0:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
 2b4:	00000078 	andeq	r0, r0, r8, ror r0
 2b8:	40080e41 	andmi	r0, r8, r1, asr #28
 2bc:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 2c0:	00000001 	andeq	r0, r0, r1
 2c4:	0000000c 	andeq	r0, r0, ip
 2c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2cc:	7c020001 	stcvc	0, cr0, [r2], {1}
 2d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2d4:	0000000c 	andeq	r0, r0, ip
 2d8:	000002c4 	andeq	r0, r0, r4, asr #5
 2dc:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 2e0:	00000016 	andeq	r0, r0, r6, lsl r0
 2e4:	0000000c 	andeq	r0, r0, ip
 2e8:	000002c4 	andeq	r0, r0, r4, asr #5
 2ec:	00000000 	andeq	r0, r0, r0
 2f0:	00000012 	andeq	r0, r0, r2, lsl r0
 2f4:	0000000c 	andeq	r0, r0, ip
 2f8:	000002c4 	andeq	r0, r0, r4, asr #5
 2fc:	0800063c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl}
 300:	00000010 	andeq	r0, r0, r0, lsl r0
 304:	00000028 	andeq	r0, r0, r8, lsr #32
 308:	000002c4 	andeq	r0, r0, r4, asr #5
 30c:	00000000 	andeq	r0, r0, r0
 310:	00000050 	andeq	r0, r0, r0, asr r0
 314:	40200e42 	eormi	r0, r0, r2, asr #28
 318:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
 31c:	06864007 	streq	r4, [r6], r7
 320:	40058740 	andmi	r8, r5, r0, asr #14
 324:	89400488 	stmdbhi	r0, {r3, r7, sl}^
 328:	028a4003 	addeq	r4, sl, #3
 32c:	00018e40 	andeq	r8, r1, r0, asr #28
 330:	0000000c 	andeq	r0, r0, ip
 334:	000002c4 	andeq	r0, r0, r4, asr #5
 338:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
 33c:	00000048 	andeq	r0, r0, r8, asr #32
 340:	0000000c 	andeq	r0, r0, ip
 344:	000002c4 	andeq	r0, r0, r4, asr #5
 348:	08000694 	stmdaeq	r0, {r2, r4, r7, r9, sl}
 34c:	00000060 	andeq	r0, r0, r0, rrx
 350:	0000000c 	andeq	r0, r0, ip
 354:	000002c4 	andeq	r0, r0, r4, asr #5
 358:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
 35c:	00000018 	andeq	r0, r0, r8, lsl r0
 360:	0000000c 	andeq	r0, r0, ip
 364:	000002c4 	andeq	r0, r0, r4, asr #5
 368:	0800070c 	stmdaeq	r0, {r2, r3, r8, r9, sl}
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	0000000c 	andeq	r0, r0, ip
 374:	000002c4 	andeq	r0, r0, r4, asr #5
 378:	08000728 	stmdaeq	r0, {r3, r5, r8, r9, sl}
 37c:	00000014 	andeq	r0, r0, r4, lsl r0
 380:	00000018 	andeq	r0, r0, r8, lsl r0
 384:	000002c4 	andeq	r0, r0, r4, asr #5
 388:	0800073c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl}
 38c:	00000018 	andeq	r0, r0, r8, lsl r0
 390:	40080e42 	andmi	r0, r8, r2, asr #28
 394:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 398:	00000001 	andeq	r0, r0, r1
 39c:	0000000c 	andeq	r0, r0, ip
 3a0:	000002c4 	andeq	r0, r0, r4, asr #5
 3a4:	08000754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl}
 3a8:	0000002c 	andeq	r0, r0, ip, lsr #32
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	000002c4 	andeq	r0, r0, r4, asr #5
 3b4:	08000780 	stmdaeq	r0, {r7, r8, r9, sl}
 3b8:	00000048 	andeq	r0, r0, r8, asr #32
 3bc:	40100e41 	andsmi	r0, r0, r1, asr #28
 3c0:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 3c4:	02854003 	addeq	r4, r5, #3
 3c8:	00018e40 	andeq	r8, r1, r0, asr #28
 3cc:	00000018 	andeq	r0, r0, r8, lsl r0
 3d0:	000002c4 	andeq	r0, r0, r4, asr #5
 3d4:	080007c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl}
 3d8:	0000006c 	andeq	r0, r0, ip, rrx
 3dc:	400c0e42 	andmi	r0, ip, r2, asr #28
 3e0:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
 3e4:	018e4002 	orreq	r4, lr, r2
 3e8:	0000000c 	andeq	r0, r0, ip
 3ec:	000002c4 	andeq	r0, r0, r4, asr #5
 3f0:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
 3f4:	00000024 	andeq	r0, r0, r4, lsr #32
 3f8:	00000018 	andeq	r0, r0, r8, lsl r0
 3fc:	000002c4 	andeq	r0, r0, r4, asr #5
 400:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
 404:	00000028 	andeq	r0, r0, r8, lsr #32
 408:	40080e41 	andmi	r0, r8, r1, asr #28
 40c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 410:	00000001 	andeq	r0, r0, r1
 414:	0000000c 	andeq	r0, r0, ip
 418:	000002c4 	andeq	r0, r0, r4, asr #5
 41c:	08000880 	stmdaeq	r0, {r7, fp}
 420:	00000014 	andeq	r0, r0, r4, lsl r0
 424:	00000018 	andeq	r0, r0, r8, lsl r0
 428:	000002c4 	andeq	r0, r0, r4, asr #5
 42c:	08000894 	stmdaeq	r0, {r2, r4, r7, fp}
 430:	00000034 	andeq	r0, r0, r4, lsr r0
 434:	40080e42 	andmi	r0, r8, r2, asr #28
 438:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 43c:	00000001 	andeq	r0, r0, r1
 440:	0000001c 	andeq	r0, r0, ip, lsl r0
 444:	000002c4 	andeq	r0, r0, r4, asr #5
 448:	00000000 	andeq	r0, r0, r0
 44c:	00000030 	andeq	r0, r0, r0, lsr r0
 450:	40100e42 	andsmi	r0, r0, r2, asr #28
 454:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 458:	02854003 	addeq	r4, r5, #3
 45c:	00018e40 	andeq	r8, r1, r0, asr #28
 460:	00000024 	andeq	r0, r0, r4, lsr #32
 464:	000002c4 	andeq	r0, r0, r4, asr #5
 468:	080008c8 	stmdaeq	r0, {r3, r6, r7, fp}
 46c:	0000004c 	andeq	r0, r0, ip, asr #32
 470:	40180e41 	andsmi	r0, r8, r1, asr #28
 474:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 478:	04824005 	streq	r4, [r2], #5
 47c:	40038440 	andmi	r8, r3, r0, asr #8
 480:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
 484:	00000001 	andeq	r0, r0, r1
 488:	0000000c 	andeq	r0, r0, ip
 48c:	000002c4 	andeq	r0, r0, r4, asr #5
 490:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
 494:	0000000c 	andeq	r0, r0, ip
 498:	0000000c 	andeq	r0, r0, ip
 49c:	000002c4 	andeq	r0, r0, r4, asr #5
 4a0:	08000920 	stmdaeq	r0, {r5, r8, fp}
 4a4:	00000018 	andeq	r0, r0, r8, lsl r0
 4a8:	0000000c 	andeq	r0, r0, ip
 4ac:	000002c4 	andeq	r0, r0, r4, asr #5
 4b0:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
 4b4:	00000012 	andeq	r0, r0, r2, lsl r0
 4b8:	0000000c 	andeq	r0, r0, ip
 4bc:	000002c4 	andeq	r0, r0, r4, asr #5
 4c0:	0800094c 	stmdaeq	r0, {r2, r3, r6, r8, fp}
 4c4:	00000010 	andeq	r0, r0, r0, lsl r0
 4c8:	0000000c 	andeq	r0, r0, ip
 4cc:	000002c4 	andeq	r0, r0, r4, asr #5
 4d0:	0800095c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp}
 4d4:	00000018 	andeq	r0, r0, r8, lsl r0
 4d8:	0000000c 	andeq	r0, r0, ip
 4dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4e0:	7c020001 	stcvc	0, cr0, [r2], {1}
 4e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4e8:	0000000c 	andeq	r0, r0, ip
 4ec:	000004d8 	ldrdeq	r0, [r0], -r8
 4f0:	08000974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp}
 4f4:	0000005c 	andeq	r0, r0, ip, asr r0
 4f8:	00000018 	andeq	r0, r0, r8, lsl r0
 4fc:	000004d8 	ldrdeq	r0, [r0], -r8
 500:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
 504:	00000044 	andeq	r0, r0, r4, asr #32
 508:	40080e41 	andmi	r0, r8, r1, asr #28
 50c:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 510:	00000001 	andeq	r0, r0, r1
 514:	0000000c 	andeq	r0, r0, ip
 518:	000004d8 	ldrdeq	r0, [r0], -r8
 51c:	00000000 	andeq	r0, r0, r0
 520:	00000002 	andeq	r0, r0, r2
 524:	0000000c 	andeq	r0, r0, ip
 528:	000004d8 	ldrdeq	r0, [r0], -r8
 52c:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
 530:	00000018 	andeq	r0, r0, r8, lsl r0
 534:	0000000c 	andeq	r0, r0, ip
 538:	000004d8 	ldrdeq	r0, [r0], -r8
 53c:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
 540:	00000018 	andeq	r0, r0, r8, lsl r0
 544:	0000000c 	andeq	r0, r0, ip
 548:	000004d8 	ldrdeq	r0, [r0], -r8
 54c:	08000a44 	stmdaeq	r0, {r2, r6, r9, fp}
 550:	00000028 	andeq	r0, r0, r8, lsr #32
 554:	0000000c 	andeq	r0, r0, ip
 558:	000004d8 	ldrdeq	r0, [r0], -r8
 55c:	08000a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp}
 560:	00000034 	andeq	r0, r0, r4, lsr r0
 564:	0000001c 	andeq	r0, r0, ip, lsl r0
 568:	000004d8 	ldrdeq	r0, [r0], -r8
 56c:	08000aa0 	stmdaeq	r0, {r5, r7, r9, fp}
 570:	0000005c 	andeq	r0, r0, ip, asr r0
 574:	40100e41 	andsmi	r0, r0, r1, asr #28
 578:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
 57c:	02864003 	addeq	r4, r6, #3
 580:	00018e40 	andeq	r8, r1, r0, asr #28
 584:	00000024 	andeq	r0, r0, r4, lsr #32
 588:	000004d8 	ldrdeq	r0, [r0], -r8
 58c:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
 590:	0000023c 	andeq	r0, r0, ip, lsr r2
 594:	40180e42 	andsmi	r0, r8, r2, asr #28
 598:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
 59c:	04864005 	streq	r4, [r6], #5
 5a0:	40038740 	andmi	r8, r3, r0, asr #14
 5a4:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
 5a8:	00000001 	andeq	r0, r0, r1
 5ac:	0000000c 	andeq	r0, r0, ip
 5b0:	000004d8 	ldrdeq	r0, [r0], -r8
 5b4:	00000000 	andeq	r0, r0, r0
 5b8:	0000000c 	andeq	r0, r0, ip
 5bc:	0000000c 	andeq	r0, r0, ip
 5c0:	000004d8 	ldrdeq	r0, [r0], -r8
 5c4:	00000000 	andeq	r0, r0, r0
 5c8:	0000000c 	andeq	r0, r0, ip
 5cc:	0000000c 	andeq	r0, r0, ip
 5d0:	000004d8 	ldrdeq	r0, [r0], -r8
 5d4:	08000d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp}
 5d8:	0000000c 	andeq	r0, r0, ip
 5dc:	0000000c 	andeq	r0, r0, ip
 5e0:	000004d8 	ldrdeq	r0, [r0], -r8
 5e4:	08000d44 	stmdaeq	r0, {r2, r6, r8, sl, fp}
 5e8:	00000004 	andeq	r0, r0, r4
 5ec:	0000000c 	andeq	r0, r0, ip
 5f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 5f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5fc:	0000000c 	andeq	r0, r0, ip
 600:	000005ec 	andeq	r0, r0, ip, ror #11
 604:	00000000 	andeq	r0, r0, r0
 608:	0000000c 	andeq	r0, r0, ip
 60c:	0000000c 	andeq	r0, r0, ip
 610:	000005ec 	andeq	r0, r0, ip, ror #11
 614:	00000000 	andeq	r0, r0, r0
 618:	0000000c 	andeq	r0, r0, ip
 61c:	0000000c 	andeq	r0, r0, ip
 620:	000005ec 	andeq	r0, r0, ip, ror #11
 624:	00000000 	andeq	r0, r0, r0
 628:	0000000c 	andeq	r0, r0, ip
 62c:	0000000c 	andeq	r0, r0, ip
 630:	000005ec 	andeq	r0, r0, ip, ror #11
 634:	00000000 	andeq	r0, r0, r0
 638:	0000000c 	andeq	r0, r0, ip
 63c:	0000000c 	andeq	r0, r0, ip
 640:	000005ec 	andeq	r0, r0, ip, ror #11
 644:	00000000 	andeq	r0, r0, r0
 648:	0000000c 	andeq	r0, r0, ip
 64c:	0000000c 	andeq	r0, r0, ip
 650:	000005ec 	andeq	r0, r0, ip, ror #11
 654:	00000000 	andeq	r0, r0, r0
 658:	0000000c 	andeq	r0, r0, ip
 65c:	0000000c 	andeq	r0, r0, ip
 660:	000005ec 	andeq	r0, r0, ip, ror #11
 664:	00000000 	andeq	r0, r0, r0
 668:	0000000c 	andeq	r0, r0, ip
 66c:	0000000c 	andeq	r0, r0, ip
 670:	000005ec 	andeq	r0, r0, ip, ror #11
 674:	00000000 	andeq	r0, r0, r0
 678:	00000010 	andeq	r0, r0, r0, lsl r0
 67c:	0000000c 	andeq	r0, r0, ip
 680:	000005ec 	andeq	r0, r0, ip, ror #11
 684:	00000000 	andeq	r0, r0, r0
 688:	0000000c 	andeq	r0, r0, ip
 68c:	0000000c 	andeq	r0, r0, ip
 690:	000005ec 	andeq	r0, r0, ip, ror #11
 694:	00000000 	andeq	r0, r0, r0
 698:	0000000e 	andeq	r0, r0, lr
 69c:	0000000c 	andeq	r0, r0, ip
 6a0:	000005ec 	andeq	r0, r0, ip, ror #11
 6a4:	00000000 	andeq	r0, r0, r0
 6a8:	00000010 	andeq	r0, r0, r0, lsl r0
 6ac:	0000000c 	andeq	r0, r0, ip
 6b0:	000005ec 	andeq	r0, r0, ip, ror #11
 6b4:	00000000 	andeq	r0, r0, r0
 6b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6bc:	0000000c 	andeq	r0, r0, ip
 6c0:	000005ec 	andeq	r0, r0, ip, ror #11
 6c4:	00000000 	andeq	r0, r0, r0
 6c8:	00000012 	andeq	r0, r0, r2, lsl r0
 6cc:	0000000c 	andeq	r0, r0, ip
 6d0:	000005ec 	andeq	r0, r0, ip, ror #11
 6d4:	08000d48 	stmdaeq	r0, {r3, r6, r8, sl, fp}
 6d8:	0000002a 	andeq	r0, r0, sl, lsr #32
 6dc:	0000000c 	andeq	r0, r0, ip
 6e0:	000005ec 	andeq	r0, r0, ip, ror #11
 6e4:	00000000 	andeq	r0, r0, r0
 6e8:	0000002a 	andeq	r0, r0, sl, lsr #32
 6ec:	0000000c 	andeq	r0, r0, ip
 6f0:	000005ec 	andeq	r0, r0, ip, ror #11
 6f4:	00000000 	andeq	r0, r0, r0
 6f8:	00000024 	andeq	r0, r0, r4, lsr #32
 6fc:	0000000c 	andeq	r0, r0, ip
 700:	000005ec 	andeq	r0, r0, ip, ror #11
 704:	00000000 	andeq	r0, r0, r0
 708:	00000012 	andeq	r0, r0, r2, lsl r0
 70c:	0000000c 	andeq	r0, r0, ip
 710:	000005ec 	andeq	r0, r0, ip, ror #11
 714:	00000000 	andeq	r0, r0, r0
 718:	00000012 	andeq	r0, r0, r2, lsl r0
 71c:	0000000c 	andeq	r0, r0, ip
 720:	000005ec 	andeq	r0, r0, ip, ror #11
 724:	00000000 	andeq	r0, r0, r0
 728:	0000001e 	andeq	r0, r0, lr, lsl r0
 72c:	0000000c 	andeq	r0, r0, ip
 730:	000005ec 	andeq	r0, r0, ip, ror #11
 734:	08000d72 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, fp}
 738:	0000001e 	andeq	r0, r0, lr, lsl r0
 73c:	0000000c 	andeq	r0, r0, ip
 740:	000005ec 	andeq	r0, r0, ip, ror #11
 744:	00000000 	andeq	r0, r0, r0
 748:	0000001e 	andeq	r0, r0, lr, lsl r0
 74c:	0000000c 	andeq	r0, r0, ip
 750:	000005ec 	andeq	r0, r0, ip, ror #11
 754:	00000000 	andeq	r0, r0, r0
 758:	0000001c 	andeq	r0, r0, ip, lsl r0
 75c:	0000000c 	andeq	r0, r0, ip
 760:	000005ec 	andeq	r0, r0, ip, ror #11
 764:	08000d90 	stmdaeq	r0, {r4, r7, r8, sl, fp}
 768:	0000001c 	andeq	r0, r0, ip, lsl r0
 76c:	0000000c 	andeq	r0, r0, ip
 770:	000005ec 	andeq	r0, r0, ip, ror #11
 774:	00000000 	andeq	r0, r0, r0
 778:	0000001e 	andeq	r0, r0, lr, lsl r0
 77c:	0000000c 	andeq	r0, r0, ip
 780:	000005ec 	andeq	r0, r0, ip, ror #11
 784:	00000000 	andeq	r0, r0, r0
 788:	0000001e 	andeq	r0, r0, lr, lsl r0
 78c:	0000000c 	andeq	r0, r0, ip
 790:	000005ec 	andeq	r0, r0, ip, ror #11
 794:	00000000 	andeq	r0, r0, r0
 798:	0000001c 	andeq	r0, r0, ip, lsl r0
 79c:	0000000c 	andeq	r0, r0, ip
 7a0:	000005ec 	andeq	r0, r0, ip, ror #11
 7a4:	00000000 	andeq	r0, r0, r0
 7a8:	0000001a 	andeq	r0, r0, sl, lsl r0
 7ac:	0000000c 	andeq	r0, r0, ip
 7b0:	000005ec 	andeq	r0, r0, ip, ror #11
 7b4:	00000000 	andeq	r0, r0, r0
 7b8:	0000001a 	andeq	r0, r0, sl, lsl r0
 7bc:	0000000c 	andeq	r0, r0, ip
 7c0:	000005ec 	andeq	r0, r0, ip, ror #11
 7c4:	00000000 	andeq	r0, r0, r0
 7c8:	00000018 	andeq	r0, r0, r8, lsl r0
 7cc:	0000000c 	andeq	r0, r0, ip
 7d0:	000005ec 	andeq	r0, r0, ip, ror #11
 7d4:	00000000 	andeq	r0, r0, r0
 7d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7dc:	0000000c 	andeq	r0, r0, ip
 7e0:	000005ec 	andeq	r0, r0, ip, ror #11
 7e4:	00000000 	andeq	r0, r0, r0
 7e8:	00000020 	andeq	r0, r0, r0, lsr #32
 7ec:	0000000c 	andeq	r0, r0, ip
 7f0:	000005ec 	andeq	r0, r0, ip, ror #11
 7f4:	00000000 	andeq	r0, r0, r0
 7f8:	00000020 	andeq	r0, r0, r0, lsr #32
 7fc:	0000000c 	andeq	r0, r0, ip
 800:	000005ec 	andeq	r0, r0, ip, ror #11
 804:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 808:	00000020 	andeq	r0, r0, r0, lsr #32
 80c:	0000000c 	andeq	r0, r0, ip
 810:	000005ec 	andeq	r0, r0, ip, ror #11
 814:	08000dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp}
 818:	00000020 	andeq	r0, r0, r0, lsr #32
 81c:	0000000c 	andeq	r0, r0, ip
 820:	000005ec 	andeq	r0, r0, ip, ror #11
 824:	00000000 	andeq	r0, r0, r0
 828:	0000001e 	andeq	r0, r0, lr, lsl r0
 82c:	0000000c 	andeq	r0, r0, ip
 830:	000005ec 	andeq	r0, r0, ip, ror #11
 834:	00000000 	andeq	r0, r0, r0
 838:	00000012 	andeq	r0, r0, r2, lsl r0
 83c:	0000000c 	andeq	r0, r0, ip
 840:	000005ec 	andeq	r0, r0, ip, ror #11
 844:	00000000 	andeq	r0, r0, r0
 848:	00000020 	andeq	r0, r0, r0, lsr #32
 84c:	0000000c 	andeq	r0, r0, ip
 850:	000005ec 	andeq	r0, r0, ip, ror #11
 854:	00000000 	andeq	r0, r0, r0
 858:	00000020 	andeq	r0, r0, r0, lsr #32
 85c:	0000000c 	andeq	r0, r0, ip
 860:	000005ec 	andeq	r0, r0, ip, ror #11
 864:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
 868:	0000001c 	andeq	r0, r0, ip, lsl r0
 86c:	0000000c 	andeq	r0, r0, ip
 870:	000005ec 	andeq	r0, r0, ip, ror #11
 874:	08000e08 	stmdaeq	r0, {r3, r9, sl, fp}
 878:	0000001c 	andeq	r0, r0, ip, lsl r0
 87c:	0000000c 	andeq	r0, r0, ip
 880:	000005ec 	andeq	r0, r0, ip, ror #11
 884:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
 888:	0000001c 	andeq	r0, r0, ip, lsl r0
 88c:	0000000c 	andeq	r0, r0, ip
 890:	000005ec 	andeq	r0, r0, ip, ror #11
 894:	00000000 	andeq	r0, r0, r0
 898:	00000026 	andeq	r0, r0, r6, lsr #32
 89c:	0000000c 	andeq	r0, r0, ip
 8a0:	000005ec 	andeq	r0, r0, ip, ror #11
 8a4:	08000e40 	stmdaeq	r0, {r6, r9, sl, fp}
 8a8:	00000040 	andeq	r0, r0, r0, asr #32
 8ac:	0000000c 	andeq	r0, r0, ip
 8b0:	000005ec 	andeq	r0, r0, ip, ror #11
 8b4:	00000000 	andeq	r0, r0, r0
 8b8:	00000020 	andeq	r0, r0, r0, lsr #32
 8bc:	0000000c 	andeq	r0, r0, ip
 8c0:	000005ec 	andeq	r0, r0, ip, ror #11
 8c4:	00000000 	andeq	r0, r0, r0
 8c8:	00000020 	andeq	r0, r0, r0, lsr #32
 8cc:	00000018 	andeq	r0, r0, r8, lsl r0
 8d0:	000005ec 	andeq	r0, r0, ip, ror #11
 8d4:	00000000 	andeq	r0, r0, r0
 8d8:	00000038 	andeq	r0, r0, r8, lsr r0
 8dc:	40080e41 	andmi	r0, r8, r1, asr #28
 8e0:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 8e4:	00000001 	andeq	r0, r0, r1
 8e8:	0000000c 	andeq	r0, r0, ip
 8ec:	000005ec 	andeq	r0, r0, ip, ror #11
 8f0:	00000000 	andeq	r0, r0, r0
 8f4:	00000020 	andeq	r0, r0, r0, lsr #32
 8f8:	0000000c 	andeq	r0, r0, ip
 8fc:	000005ec 	andeq	r0, r0, ip, ror #11
 900:	00000000 	andeq	r0, r0, r0
 904:	00000020 	andeq	r0, r0, r0, lsr #32
 908:	0000000c 	andeq	r0, r0, ip
 90c:	000005ec 	andeq	r0, r0, ip, ror #11
 910:	00000000 	andeq	r0, r0, r0
 914:	0000001c 	andeq	r0, r0, ip, lsl r0
 918:	0000000c 	andeq	r0, r0, ip
 91c:	000005ec 	andeq	r0, r0, ip, ror #11
 920:	00000000 	andeq	r0, r0, r0
 924:	0000001c 	andeq	r0, r0, ip, lsl r0
 928:	00000018 	andeq	r0, r0, r8, lsl r0
 92c:	000005ec 	andeq	r0, r0, ip, ror #11
 930:	00000000 	andeq	r0, r0, r0
 934:	000000a8 	andeq	r0, r0, r8, lsr #1
 938:	40080e42 	andmi	r0, r8, r2, asr #28
 93c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 940:	00000001 	andeq	r0, r0, r1
 944:	0000000c 	andeq	r0, r0, ip
 948:	000005ec 	andeq	r0, r0, ip, ror #11
 94c:	00000000 	andeq	r0, r0, r0
 950:	0000005c 	andeq	r0, r0, ip, asr r0
 954:	0000000c 	andeq	r0, r0, ip
 958:	000005ec 	andeq	r0, r0, ip, ror #11
 95c:	00000000 	andeq	r0, r0, r0
 960:	0000005c 	andeq	r0, r0, ip, asr r0
 964:	0000000c 	andeq	r0, r0, ip
 968:	000005ec 	andeq	r0, r0, ip, ror #11
 96c:	00000000 	andeq	r0, r0, r0
 970:	00000020 	andeq	r0, r0, r0, lsr #32
 974:	0000000c 	andeq	r0, r0, ip
 978:	000005ec 	andeq	r0, r0, ip, ror #11
 97c:	00000000 	andeq	r0, r0, r0
 980:	00000020 	andeq	r0, r0, r0, lsr #32
 984:	0000000c 	andeq	r0, r0, ip
 988:	000005ec 	andeq	r0, r0, ip, ror #11
 98c:	00000000 	andeq	r0, r0, r0
 990:	00000044 	andeq	r0, r0, r4, asr #32
 994:	0000000c 	andeq	r0, r0, ip
 998:	000005ec 	andeq	r0, r0, ip, ror #11
 99c:	00000000 	andeq	r0, r0, r0
 9a0:	0000003a 	andeq	r0, r0, sl, lsr r0
 9a4:	0000000c 	andeq	r0, r0, ip
 9a8:	000005ec 	andeq	r0, r0, ip, ror #11
 9ac:	00000000 	andeq	r0, r0, r0
 9b0:	00000006 	andeq	r0, r0, r6
 9b4:	0000000c 	andeq	r0, r0, ip
 9b8:	000005ec 	andeq	r0, r0, ip, ror #11
 9bc:	00000000 	andeq	r0, r0, r0
 9c0:	0000000a 	andeq	r0, r0, sl
 9c4:	0000000c 	andeq	r0, r0, ip
 9c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 9cc:	7c020001 	stcvc	0, cr0, [r2], {1}
 9d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 9d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 9d8:	000009c4 	andeq	r0, r0, r4, asr #19
 9dc:	08000e80 	stmdaeq	r0, {r7, r9, sl, fp}
 9e0:	00000154 	andeq	r0, r0, r4, asr r1
 9e4:	40100e41 	andsmi	r0, r0, r1, asr #28
 9e8:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
 9ec:	02864003 	addeq	r4, r6, #3
 9f0:	00018e40 	andeq	r8, r1, r0, asr #28
 9f4:	00000018 	andeq	r0, r0, r8, lsl r0
 9f8:	000009c4 	andeq	r0, r0, r4, asr #19
 9fc:	00000000 	andeq	r0, r0, r0
 a00:	00000070 	andeq	r0, r0, r0, ror r0
 a04:	40080e41 	andmi	r0, r8, r1, asr #28
 a08:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 a0c:	00000001 	andeq	r0, r0, r1
 a10:	0000000c 	andeq	r0, r0, ip
 a14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a18:	7c020001 	stcvc	0, cr0, [r2], {1}
 a1c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a20:	00000018 	andeq	r0, r0, r8, lsl r0
 a24:	00000a10 	andeq	r0, r0, r0, lsl sl
 a28:	08000fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp}
 a2c:	00000038 	andeq	r0, r0, r8, lsr r0
 a30:	40080e41 	andmi	r0, r8, r1, asr #28
 a34:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 a38:	00000001 	andeq	r0, r0, r1
 a3c:	0000000c 	andeq	r0, r0, ip
 a40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a44:	7c020001 	stcvc	0, cr0, [r2], {1}
 a48:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a4c:	00000018 	andeq	r0, r0, r8, lsl r0
 a50:	00000a3c 	andeq	r0, r0, ip, lsr sl
 a54:	0800100c 	stmdaeq	r0, {r2, r3, ip}
 a58:	00000024 	andeq	r0, r0, r4, lsr #32
 a5c:	40080e41 	andmi	r0, r8, r1, asr #28
 a60:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 a64:	00000001 	andeq	r0, r0, r1
 a68:	00000018 	andeq	r0, r0, r8, lsl r0
 a6c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 a70:	08001030 	stmdaeq	r0, {r4, r5, ip}
 a74:	00000024 	andeq	r0, r0, r4, lsr #32
 a78:	40080e41 	andmi	r0, r8, r1, asr #28
 a7c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 a80:	00000001 	andeq	r0, r0, r1
 a84:	00000018 	andeq	r0, r0, r8, lsl r0
 a88:	00000a3c 	andeq	r0, r0, ip, lsr sl
 a8c:	08001054 	stmdaeq	r0, {r2, r4, r6, ip}
 a90:	00000090 	muleq	r0, r0, r0
 a94:	40080e41 	andmi	r0, r8, r1, asr #28
 a98:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 a9c:	00000001 	andeq	r0, r0, r1
 aa0:	00000028 	andeq	r0, r0, r8, lsr #32
 aa4:	00000a3c 	andeq	r0, r0, ip, lsr sl
 aa8:	080010e4 	stmdaeq	r0, {r2, r5, r6, r7, ip}
 aac:	000000a8 	andeq	r0, r0, r8, lsr #1
 ab0:	40200e43 	eormi	r0, r0, r3, asr #28
 ab4:	84400883 	strbhi	r0, [r0], #-2179	; 0x883
 ab8:	06854007 	streq	r4, [r5], r7
 abc:	40058640 	andmi	r8, r5, r0, asr #12
 ac0:	88400487 	stmdahi	r0, {r0, r1, r2, r7, sl}^
 ac4:	02894003 	addeq	r4, r9, #3
 ac8:	00018e40 	andeq	r8, r1, r0, asr #28
 acc:	00000018 	andeq	r0, r0, r8, lsl r0
 ad0:	00000a3c 	andeq	r0, r0, ip, lsr sl
 ad4:	0800118c 	stmdaeq	r0, {r2, r3, r7, r8, ip}
 ad8:	00000038 	andeq	r0, r0, r8, lsr r0
 adc:	40080e41 	andmi	r0, r8, r1, asr #28
 ae0:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 ae4:	00000001 	andeq	r0, r0, r1
 ae8:	0000001c 	andeq	r0, r0, ip, lsl r0
 aec:	00000a3c 	andeq	r0, r0, ip, lsr sl
 af0:	080011c4 	stmdaeq	r0, {r2, r6, r7, r8, ip}
 af4:	00000048 	andeq	r0, r0, r8, asr #32
 af8:	40100e41 	andsmi	r0, r0, r1, asr #28
 afc:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 b00:	02854003 	addeq	r4, r5, #3
 b04:	00018e40 	andeq	r8, r1, r0, asr #28
 b08:	0000001c 	andeq	r0, r0, ip, lsl r0
 b0c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b10:	0800120c 	stmdaeq	r0, {r2, r3, r9, ip}
 b14:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 b18:	40100e41 	andsmi	r0, r0, r1, asr #28
 b1c:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 b20:	02854003 	addeq	r4, r5, #3
 b24:	00018e40 	andeq	r8, r1, r0, asr #28
 b28:	0000001c 	andeq	r0, r0, ip, lsl r0
 b2c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b30:	080012dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, ip}
 b34:	00000084 	andeq	r0, r0, r4, lsl #1
 b38:	40100e41 	andsmi	r0, r0, r1, asr #28
 b3c:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 b40:	02854003 	addeq	r4, r5, #3
 b44:	00018e40 	andeq	r8, r1, r0, asr #28
 b48:	00000018 	andeq	r0, r0, r8, lsl r0
 b4c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b50:	08001360 	stmdaeq	r0, {r5, r6, r8, r9, ip}
 b54:	00000024 	andeq	r0, r0, r4, lsr #32
 b58:	40080e41 	andmi	r0, r8, r1, asr #28
 b5c:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 b60:	00000001 	andeq	r0, r0, r1
 b64:	0000000c 	andeq	r0, r0, ip
 b68:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b6c:	08001384 	stmdaeq	r0, {r2, r7, r8, r9, ip}
 b70:	0000001c 	andeq	r0, r0, ip, lsl r0
 b74:	00000018 	andeq	r0, r0, r8, lsl r0
 b78:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b7c:	080013a0 	stmdaeq	r0, {r5, r7, r8, r9, ip}
 b80:	00000040 	andeq	r0, r0, r0, asr #32
 b84:	40080e41 	andmi	r0, r8, r1, asr #28
 b88:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 b8c:	00000001 	andeq	r0, r0, r1
 b90:	00000024 	andeq	r0, r0, r4, lsr #32
 b94:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b98:	080013e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip}
 b9c:	000002dc 	ldrdeq	r0, [r0], -ip
 ba0:	40180e41 	andsmi	r0, r8, r1, asr #28
 ba4:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 ba8:	04844005 	streq	r4, [r4], #5
 bac:	40038540 	andmi	r8, r3, r0, asr #10
 bb0:	8e400286 	cdphi	2, 4, cr0, cr0, cr6, {4}
 bb4:	00000001 	andeq	r0, r0, r1
 bb8:	00000024 	andeq	r0, r0, r4, lsr #32
 bbc:	00000a3c 	andeq	r0, r0, ip, lsr sl
 bc0:	080016bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, ip}
 bc4:	000000c8 	andeq	r0, r0, r8, asr #1
 bc8:	40180e41 	andsmi	r0, r8, r1, asr #28
 bcc:	84400683 	strbhi	r0, [r0], #-1667	; 0x683
 bd0:	04854005 	streq	r4, [r5], #5
 bd4:	40038640 	andmi	r8, r3, r0, asr #12
 bd8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bdc:	00000001 	andeq	r0, r0, r1
 be0:	00000018 	andeq	r0, r0, r8, lsl r0
 be4:	00000a3c 	andeq	r0, r0, ip, lsr sl
 be8:	08001784 	stmdaeq	r0, {r2, r7, r8, r9, sl, ip}
 bec:	00000038 	andeq	r0, r0, r8, lsr r0
 bf0:	400c0e41 	andmi	r0, ip, r1, asr #28
 bf4:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
 bf8:	018e4002 	orreq	r4, lr, r2
 bfc:	00000018 	andeq	r0, r0, r8, lsl r0
 c00:	00000a3c 	andeq	r0, r0, ip, lsr sl
 c04:	080017bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip}
 c08:	0000005c 	andeq	r0, r0, ip, asr r0
 c0c:	40080e41 	andmi	r0, r8, r1, asr #28
 c10:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 c14:	00000001 	andeq	r0, r0, r1
 c18:	0000000c 	andeq	r0, r0, ip
 c1c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 c20:	00000000 	andeq	r0, r0, r0
 c24:	00000002 	andeq	r0, r0, r2
 c28:	0000000c 	andeq	r0, r0, ip
 c2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 c30:	7c020001 	stcvc	0, cr0, [r2], {1}
 c34:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 c38:	00000018 	andeq	r0, r0, r8, lsl r0
 c3c:	00000c28 	andeq	r0, r0, r8, lsr #24
 c40:	08001818 	stmdaeq	r0, {r3, r4, fp, ip}
 c44:	00000030 	andeq	r0, r0, r0, lsr r0
 c48:	400c0e41 	andmi	r0, ip, r1, asr #28
 c4c:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
 c50:	018e4002 	orreq	r4, lr, r2
 c54:	00000018 	andeq	r0, r0, r8, lsl r0
 c58:	00000c28 	andeq	r0, r0, r8, lsr #24
 c5c:	08001848 	stmdaeq	r0, {r3, r6, fp, ip}
 c60:	00000024 	andeq	r0, r0, r4, lsr #32
 c64:	40080e41 	andmi	r0, r8, r1, asr #28
 c68:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 c6c:	00000001 	andeq	r0, r0, r1

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4349564e 	movtmi	r5, #38478	; 0x964e
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	5152495f 	cmppl	r2, pc, asr r9
       8:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
       c:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	7300646d 	movwvc	r6, #1133	; 0x46d
      14:	6e497274 	mcrvs	2, 2, r7, cr9, cr4, {3}
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	00786564 	rsbseq	r6, r8, r4, ror #10
      1c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
      24:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
      28:	64416563 	strbvs	r6, [r1], #-1379	; 0x563
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	45700073 	ldrbmi	r0, [r0, #-115]!	; 0x73
      34:	746e4970 	strbtvc	r4, [lr], #-2416	; 0x970
      38:	004e495f 	subeq	r4, lr, pc, asr r9

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	5645445f 			; <UNDEFINED> instruction: 0x5645445f

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	5f454349 	svcpl	0x00454349
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	4f464e49 	svcmi	0x00464e49
      48:	65446200 	strbvs	r6, [r4, #-512]	; 0x200
      4c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
      54:	73750065 	cmnvc	r5, #101	; 0x65
      58:	626e4562 	rsbvs	r4, lr, #411041792	; 0x18800000
      5c:	00525349 	subseq	r5, r2, r9, asr #6
      60:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
      64:	575f454d 	ldrbpl	r4, [pc, -sp, asr #10]
      68:	00544941 	subseq	r4, r4, r1, asr #18
      6c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
      70:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
      74:	50646e45 	rsbpl	r6, r4, r5, asr #28
      78:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
      7c:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
      80:	00657275 	rsbeq	r7, r5, r5, ror r2
      84:	49756664 	ldmdbmi	r5!, {r2, r5, r6, r9, sl, sp, lr}^
      88:	0074696e 	rsbseq	r6, r4, lr, ror #18
      8c:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xe4f
      90:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
      94:	6f747069 	svcvs	0x00747069
      98:	73750072 	cmnvc	r5, #114	; 0x72
      9c:	73755362 	cmnvc	r5, #-2013265919	; 0x88000001
      a0:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
      a4:	53456200 	movtpl	r6, #20992	; 0x5200
      a8:	6e63464f 	cdpvs	6, 6, cr4, cr3, cr15, {2}
      ac:	73750074 	cmnvc	r5, #116	; 0x74
      b0:	73655262 	cmnvc	r5, #536870918	; 0x20000006
      b4:	00656d75 	rsbeq	r6, r5, r5, ror sp
      b8:	50535553 	subspl	r5, r3, r3, asr r5
      bc:	45444e45 	strbmi	r4, [r4, #-3653]	; 0xe45
      c0:	45520044 	ldrbmi	r0, [r2, #-68]	; 0x44
      c4:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
      c8:	4154535f 	cmpmi	r4, pc, asr r3
      cc:	75005452 	strvc	r5, [r0, #-1106]	; 0x452
      d0:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
      d4:	76654474 			; <UNDEFINED> instruction: 0x76654474
      d8:	46656369 	strbtmi	r6, [r5], -r9, ror #6
      dc:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0x165
      e0:	43006572 	movwmi	r6, #1394	; 0x572
      e4:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0x6f
      e8:	00617461 	rsbeq	r7, r1, r1, ror #8
      ec:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
      f0:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
      f4:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
      f8:	63616672 	cmnvs	r1, #119537664	; 0x7200000
      fc:	45440065 	strbmi	r0, [r4, #-101]	; 0x65
     100:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
     104:	4345525f 	movtmi	r5, #21087	; 0x525f
     108:	45495049 	strbmi	r5, [r9, #-73]	; 0x49
     10c:	5000544e 	andpl	r5, r0, lr, asr #8
     110:	5245574f 	subpl	r5, r5, #20709376	; 0x13c0000
     114:	75004445 	strvc	r4, [r0, #-1093]	; 0x445
     118:	632e6273 	teqvs	lr, #805306375	; 0x30000007
     11c:	62737500 	rsbsvs	r7, r3, #0, 10
     120:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     124:	6544676e 	strbvs	r6, [r4, #-1902]	; 0x76e
     128:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     12c:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     130:	62737500 	rsbsvs	r7, r3, #0, 10
     134:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0x547
     138:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     13c:	73654465 	cmnvc	r5, #1694498816	; 0x65000000
     140:	70697263 	rsbvc	r7, r9, r3, ror #4
     144:	00726f74 	rsbseq	r6, r2, r4, ror pc
     148:	77425355 	smlsldvc	r5, r2, r5, r3
     14c:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xe49
     150:	76007378 			; <UNDEFINED> instruction: 0x76007378
     154:	00363175 	eorseq	r3, r6, r5, ror r1
     158:	20554e47 	subscs	r4, r5, r7, asr #28
     15c:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
     160:	20332e38 	eorscs	r2, r3, r8, lsr lr
     164:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
     168:	38323230 	ldmdacc	r2!, {r4, r5, r9, ip, sp}
     16c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0x820
     170:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
     174:	5b202965 	blpl	80a710 <__Stack_Size+0x80a310>
     178:	2f4d5241 	svccs	0x004d5241
     17c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     180:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     184:	385f342d 	ldmdacc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     188:	6172622d 	cmnvs	r2, sp, lsr #4
     18c:	2068636e 	rsbcs	r6, r8, lr, ror #6
     190:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     194:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
     198:	38303220 	ldmdacc	r0!, {r5, r9, ip, sp}
     19c:	5d323233 	lfmpl	f3, 4, [r2, #-204]!	; 0xffffff34
     1a0:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
     1a4:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     1a8:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
     1ac:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
     1b0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0x26f
     1b4:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
     1b8:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
     1bc:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     1c0:	746e692d 	strbtvc	r6, [lr], #-2349	; 0x92d
     1c4:	6f777265 	svcvs	0x00777265
     1c8:	2d206b72 	vstmdbcs	r0!, {d6-<overflow reg d62>}
     1cc:	4f2d2067 	svcmi	0x002d2067
     1d0:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     1d4:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     1d8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1dc:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     1e0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1e4:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     1e8:	61746164 	cmnvs	r4, r4, ror #2
     1ec:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     1f0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1f4:	6f6c0073 	svcvs	0x006c0073
     1f8:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     1fc:	7500746e 	strvc	r7, [r0, #-1134]	; 0x46e
     200:	65476273 	strbvs	r6, [r7, #-627]	; 0x273
     204:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     208:	44676966 	strbtmi	r6, [r7], #-2406	; 0x966
     20c:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     210:	6f747069 	svcvs	0x00747069
     214:	53550072 	cmppl	r5, #114	; 0x72
     218:	65526242 	ldrbvs	r6, [r2, #-578]	; 0x242
     21c:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     220:	53550074 	cmppl	r5, #116	; 0x74
     224:	4f4e5f42 	svcmi	0x004e5f42
     228:	45525f54 	ldrbmi	r5, [r2, #-3924]	; 0xf54
     22c:	00594441 	subseq	r4, r9, r1, asr #8
     230:	74734977 	ldrbtvc	r4, [r3], #-2423	; 0x977
     234:	45520072 	ldrbmi	r0, [r2, #-114]	; 0x72
     238:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
     23c:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0x55f
     240:	414e5245 	cmpmi	lr, r5, asr #4
     244:	6544004c 	strbvs	r0, [r4, #-76]	; 0x4c
     248:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     24c:	6261545f 	rsbvs	r5, r1, #1593835520	; 0x5f000000
     250:	7300656c 	movwvc	r6, #1388	; 0x56c
     254:	70757465 	rsbsvc	r7, r5, r5, ror #8
     258:	00425355 	subeq	r5, r2, r5, asr r3
     25c:	47627375 			; <UNDEFINED> instruction: 0x47627375
     260:	6f437465 	svcvs	0x00437465
     264:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     268:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     26c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     270:	746e4962 	strbtvc	r4, [lr], #-2402	; 0x962
     274:	6b636150 	blvs	18d87bc <__Stack_Size+0x18d83bc>
     278:	00464f53 	subeq	r4, r6, r3, asr pc
     27c:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
     280:	616d726f 	cmnvs	sp, pc, ror #4
     284:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     288:	4d726300 	ldclmi	3, cr6, [r2, #-0]
     28c:	006b7361 	rsbeq	r7, fp, r1, ror #6
     290:	5f627355 	svcpl	0x00627355
     294:	6e654c77 	mcrvs	12, 3, r4, cr5, cr7, {3}
     298:	00687467 	rsbeq	r7, r8, r7, ror #8
     29c:	73655265 	cmnvc	r5, #1342177286	; 0x50000006
     2a0:	53656d75 	cmnpl	r5, #7488	; 0x1d40
     2a4:	61567465 	cmpvs	r6, r5, ror #8
     2a8:	4e49006c 	cdpmi	0, 4, cr0, cr9, cr12, {3}
     2ac:	46524554 			; <UNDEFINED> instruction: 0x46524554
     2b0:	5f454341 	svcpl	0x00454341
     2b4:	49434552 	stmdbmi	r3, {r1, r4, r6, r8, sl, lr}^
     2b8:	4e454950 	mcrmi	9, 2, r4, cr5, cr0, {2}
     2bc:	43770054 	cmnmi	r7, #84	; 0x54
     2c0:	0052544e 	subseq	r5, r2, lr, asr #8
     2c4:	46746567 	ldrbtmi	r6, [r4], -r7, ror #10
     2c8:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     2cc:	65676150 	strbvs	r6, [r7, #-336]!	; 0x150
     2d0:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
     2d4:	4e4f5000 	cdpmi	0, 4, cr5, cr15, cr0, {0}
     2d8:	45445f45 	strbmi	r5, [r4, #-3909]	; 0xf45
     2dc:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
     2e0:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
     2e4:	62737500 	rsbsvs	r7, r3, #0, 10
     2e8:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
     2ec:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     2f0:	64644165 	strbtvs	r4, [r4], #-357	; 0x165
     2f4:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     2f8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     2fc:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     300:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     304:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     308:	00657275 	rsbeq	r7, r5, r5, ror r2
     30c:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     310:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     314:	74754f73 	ldrbtvc	r4, [r5], #-3955	; 0xf73
     318:	62735500 	rsbsvs	r5, r3, #0, 10
     31c:	664f775f 			; <UNDEFINED> instruction: 0x664f775f
     320:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
     324:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     328:	61647055 	qdsubvs	r7, r5, r4
     32c:	79426574 	stmdbvc	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
     330:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0x552
     334:	00747365 	rsbseq	r7, r4, r5, ror #6
     338:	41545441 	cmpmi	r4, r1, asr #8
     33c:	44454843 	strbmi	r4, [r5], #-2115	; 0x843
     340:	62737500 	rsbsvs	r7, r3, #0, 10
     344:	61446f4e 	cmpvs	r4, lr, asr #30
     348:	65536174 	ldrbvs	r6, [r3, #-372]	; 0x174
     34c:	00707574 	rsbseq	r7, r0, r4, ror r5
     350:	4349564e 	movtmi	r5, #38478	; 0x964e
     354:	5152495f 	cmppl	r2, pc, asr r9
     358:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     35c:	536c656e 	cmnpl	ip, #461373440	; 0x1b800000
     360:	72506275 	subsvc	r6, r0, #1342177287	; 0x50000007
     364:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     368:	5f007974 	svcpl	0x00007974
     36c:	49434552 	stmdbmi	r3, {r1, r4, r6, r8, sl, lr}^
     370:	4e454950 	mcrmi	9, 2, r4, cr5, cr0, {2}
     374:	59545f54 	ldmdbpl	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     378:	6c004550 	cfstr32vs	mvfx4, [r0], {80}	; 0x50
     37c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     380:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     384:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
     388:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
     38c:	52544300 	subspl	r4, r4, #0, 6
     390:	00504c5f 	subseq	r4, r0, pc, asr ip
     394:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     398:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     39c:	006e4973 	rsbeq	r4, lr, r3, ror r9
     3a0:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     3a4:	5f746e65 	svcpl	0x00746e65
     3a8:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     3ac:	00657275 	rsbeq	r7, r5, r5, ror r2
     3b0:	61746f54 	cmnvs	r4, r4, asr pc
     3b4:	6f435f6c 	svcvs	0x00435f6c
     3b8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     3bc:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     3c0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     3c4:	52627375 	rsbpl	r7, r2, #-738197503	; 0xd4000001
     3c8:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     3cc:	62737500 	rsbsvs	r7, r3, #0, 10
     3d0:	49627344 	stmdbmi	r2!, {r2, r6, r8, r9, ip, sp, lr}^
     3d4:	73005253 	movwvc	r5, #595	; 0x253
     3d8:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xf68
     3dc:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     3e0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
     3e4:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     3e8:	53550074 	cmppl	r5, #116	; 0x74
     3ec:	52455f42 	subpl	r5, r5, #264	; 0x108
     3f0:	00524f52 	subseq	r4, r2, r2, asr pc
     3f4:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     3f8:	4f5f454d 	svcmi	0x005f454d
     3fc:	75004646 	strvc	r4, [r0, #-1606]	; 0x646
     400:	755f3631 	ldrbvc	r3, [pc, #-1585]	; fffffdd7 <BootRAM+0xef70578>
     404:	73550038 	cmpvc	r5, #56	; 0x38
     408:	435f7265 	cmpmi	pc, #1342177286	; 0x50000006
     40c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     410:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     414:	00657275 	rsbeq	r7, r5, r5, ror r2
     418:	77425355 	smlsldvc	r5, r2, r5, r3
     41c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
     420:	4f007365 	svcmi	0x00007365
     424:	52454854 	subpl	r4, r5, #84, 16	; 0x540000
     428:	4345525f 	movtmi	r5, #21087	; 0x525f
     42c:	45495049 	strbmi	r5, [r9, #-73]	; 0x49
     430:	6200544e 	andvs	r5, r0, #1308622848	; 0x4e000000
     434:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
     438:	61725477 	cmnvs	r2, r7, ror r4
     43c:	6566736e 	strbvs	r7, [r6, #-878]!	; 0x36e
     440:	7a695372 	bvc	1a55210 <__Stack_Size+0x1a54e10>
     444:	75760065 	ldrbvc	r0, [r6, #-101]!	; 0x65
     448:	4e003233 	mcrmi	2, 0, r3, cr0, cr3, {1}
     44c:	5f434956 	svcpl	0x00434956
     450:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
     454:	6e6e6168 	powvsez	f6, f6, #0.0
     458:	5f006c65 	svcpl	0x00006c65
     45c:	67655277 			; <UNDEFINED> instruction: 0x67655277
     460:	006c6156 	rsbeq	r6, ip, r6, asr r1
     464:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     468:	63616672 	cmnvs	r1, #119537664	; 0x7200000
     46c:	564e0065 	strbpl	r0, [lr], -r5, rrx
     470:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     474:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     478:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     47c:	6572506c 	ldrbvs	r5, [r2, #-108]!	; 0x6c
     480:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xd65
     484:	506e6f69 	rsbpl	r6, lr, r9, ror #30
     488:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     48c:	00797469 	rsbseq	r7, r9, r9, ror #8
     490:	4349564e 	movtmi	r5, #38478	; 0x964e
     494:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     498:	70795474 	rsbsvc	r5, r9, r4, ror r4
     49c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     4a0:	72754300 	rsbsvc	r4, r5, #0, 6
     4a4:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
     4a8:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     4ac:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     4b0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     4b4:	75006e6f 	strvc	r6, [r0, #-3695]	; 0xe6f
     4b8:	70416273 	subvc	r6, r1, r3, ror r2
     4bc:	696e4970 	stmdbvs	lr!, {r4, r5, r6, r8, fp, lr}^
     4c0:	49770074 	ldmdbmi	r7!, {r2, r4, r5, r6}^
     4c4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     4c8:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
     4cc:	73614d5f 	cmnvc	r1, #6080	; 0x17c0
     4d0:	7375006b 	cmnvc	r5, #107	; 0x6b
     4d4:	74655362 	strbtvc	r5, [r5], #-866	; 0x362
     4d8:	70646e45 	rsbvc	r6, r4, r5, asr #28
     4dc:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
     4e0:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     4e4:	00657275 	rsbeq	r7, r5, r5, ror r2
     4e8:	73616c43 	cmnvc	r1, #17152	; 0x4300
     4ec:	65475f73 	strbvs	r5, [r7, #-3955]	; 0xf73
     4f0:	6e495f74 	mcrvs	15, 2, r5, cr9, cr4, {3}
     4f4:	66726574 			; <UNDEFINED> instruction: 0x66726574
     4f8:	5f656361 	svcpl	0x00656361
     4fc:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0x553
     500:	00676e69 	rsbeq	r6, r7, r9, ror #28
     504:	55756664 	ldrbpl	r6, [r5, #-1636]!	; 0x664
     508:	74616470 	strbtvc	r6, [r1], #-1136	; 0x470
     50c:	52794265 	rsbspl	r4, r9, #1342177286	; 0x50000006
     510:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     514:	7a697300 	bvc	1a5d11c <__Stack_Size+0x1a5cd1c>
     518:	70797465 	rsbsvc	r7, r9, r5, ror #8
     51c:	6c430065 	mcrrvs	0, 6, r0, r3, cr5
     520:	5f737361 	svcpl	0x00737361
     524:	61746144 	cmnvs	r4, r4, asr #2
     528:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     52c:	70007075 	andvc	r7, r0, r5, ror r0
     530:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
     534:	79747265 	ldmdbvc	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     538:	42535500 	subsmi	r5, r3, #0, 10
     53c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     540:	445f0074 	ldrbmi	r0, [pc], #-116	; 548 <__Stack_Size+0x148>
     544:	43495645 	movtmi	r5, #38469	; 0x9645
     548:	54535f45 	ldrbpl	r5, [r3], #-3909	; 0xf45
     54c:	00455441 	subeq	r5, r5, r1, asr #8
     550:	62425355 	subvs	r5, r2, #1409286145	; 0x54000001
     554:	7165526d 	cmnvc	r5, sp, ror #4
     558:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
     55c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     560:	62737500 	rsbsvs	r7, r3, #0, 10
     564:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xf50
     568:	006e4f72 	rsbeq	r4, lr, r2, ror pc
     56c:	6f697067 	svcvs	0x00697067
     570:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     574:	625f6574 	subsvs	r6, pc, #116, 10	; 0x1d000000
     578:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
     57c:	5f504578 	svcpl	0x00504578
     580:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     584:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     588:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
     58c:	53455f45 	movtpl	r5, #24389	; 0x5f45
     590:	4400464f 	strmi	r4, [r0], #-1615	; 0x64f
     594:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     598:	6f747069 	svcvs	0x00747069
     59c:	69535f72 	ldmdbvs	r3, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     5a0:	5500657a 	strpl	r6, [r0, #-1402]	; 0x57a
     5a4:	5f726573 	svcpl	0x00726573
     5a8:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
     5ac:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     5b0:	61654665 	cmnvs	r5, r5, ror #12
     5b4:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     5b8:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     5bc:	65535f72 	ldrbvs	r5, [r3, #-3954]	; 0xf72
     5c0:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     5c4:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     5c8:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     5cc:	46006e6f 	strmi	r6, [r0], -pc, ror #28
     5d0:	45534c41 	ldrbmi	r4, [r3, #-3137]	; 0xc41
     5d4:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     5d8:	65475f72 	strbvs	r5, [r7, #-3954]	; 0xf72
     5dc:	746e4974 	strbtvc	r4, [lr], #-2420	; 0x974
     5e0:	61667265 	cmnvs	r6, r5, ror #4
     5e4:	44006563 	strmi	r6, [r0], #-1379	; 0x563
     5e8:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     5ec:	72505f65 	subsvc	r5, r0, #404	; 0x194
     5f0:	7265706f 	rsbvc	r7, r5, #111	; 0x6f
     5f4:	52007974 	andpl	r7, r0, #116, 18	; 0x1d0000
     5f8:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
     5fc:	4e4f5f45 	cdpmi	15, 4, cr5, cr15, cr5, {2}
     600:	62737500 	rsbsvs	r7, r3, #0, 10
     604:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     608:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
     60c:	616e6f69 	cmnvs	lr, r9, ror #30
     610:	7365446c 	cmnvc	r5, #108, 8	; 0x6c000000
     614:	70697263 	rsbvc	r7, r9, r3, ror #4
     618:	00726f74 	rsbseq	r6, r2, r4, ror pc
     61c:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     620:	5f746e65 	svcpl	0x00746e65
     624:	65746c41 	ldrbvs	r6, [r4, #-3137]!	; 0xc41
     628:	74616e72 	strbtvc	r6, [r1], #-3698	; 0xe72
     62c:	74655365 	strbtvc	r5, [r5], #-869	; 0x365
     630:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     634:	62737500 	rsbsvs	r7, r3, #0, 10
     638:	61746144 	cmnvs	r4, r4, asr #2
     63c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
     640:	6e750070 	mrcvs	0, 3, r0, cr5, cr0, {3}
     644:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     648:	63206465 	teqvs	r0, #1694498816	; 0x65000000
     64c:	00726168 	rsbseq	r6, r2, r8, ror #2
     650:	4553555f 	ldrbmi	r5, [r3, #-1375]	; 0x55f
     654:	54535f52 	ldrbpl	r5, [r3], #-3922	; 0xf52
     658:	41444e41 	cmpmi	r4, r1, asr #28
     65c:	525f4452 	subspl	r4, pc, #1375731712	; 0x52000000
     660:	45555145 	ldrbmi	r5, [r5, #-325]	; 0x145
     664:	00535453 	subseq	r5, r3, r3, asr r4
     668:	5f425355 	svcpl	0x00425355
     66c:	435f504c 	cmpmi	pc, #76	; 0x4c
     670:	5f314e41 	svcpl	0x00314e41
     674:	5f305852 	svcpl	0x00305852
     678:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     67c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     680:	64007265 	strvs	r7, [r0], #-613	; 0x265
     684:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     688:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     68c:	65475f72 	strbvs	r5, [r7, #-3954]	; 0xf72
     690:	61745374 	cmnvs	r4, r4, ror r3
     694:	00737574 	rsbseq	r7, r3, r4, ror r5
     698:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     69c:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
     6a0:	38750074 	ldmdacc	r5!, {r2, r4, r5, r6}^
     6a4:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     6a8:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
     6ac:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     6b0:	65446c61 	strbvs	r6, [r4, #-3169]	; 0xc61
     6b4:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     6b8:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     6bc:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     6c0:	65475f72 	strbvs	r5, [r7, #-3954]	; 0xf72
     6c4:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     6c8:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     6cc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     6d0:	52006e6f 	andpl	r6, r0, #1776	; 0x6f0
     6d4:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
     6d8:	414c5f45 	cmpmi	ip, r5, asr #30
     6dc:	00524554 	subseq	r4, r2, r4, asr r5
     6e0:	47627375 			; <UNDEFINED> instruction: 0x47627375
     6e4:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
     6e8:	66726574 			; <UNDEFINED> instruction: 0x66726574
     6ec:	53656361 	cmnpl	r5, #-2080374783	; 0x84000001
     6f0:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     6f4:	4300676e 	movwmi	r6, #1902	; 0x76e
     6f8:	7373616c 	cmnvc	r3, #108, 2
     6fc:	446f4e5f 	strbtmi	r4, [pc], #-3679	; 704 <__Stack_Size+0x304>
     700:	5f617461 	svcpl	0x00617461
     704:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
     708:	766e0070 			; <UNDEFINED> instruction: 0x766e0070
     70c:	6e496369 	cdpvs	3, 4, cr6, cr9, cr9, {3}
     710:	43007469 	movwmi	r7, #1129	; 0x469
     714:	5f6c7274 	svcpl	0x006c7274
     718:	6f666e49 	svcvs	0x00666e49
     71c:	73655200 	cmnvc	r5, #0, 4
     720:	53656d75 	cmnpl	r5, #7488	; 0x1d40
     724:	62737500 	rsbsvs	r7, r3, #0, 10
     728:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
     72c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     730:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     734:	45525f00 	ldrbmi	r5, [r2, #-3840]	; 0xf00
     738:	544c5553 	strbpl	r5, [ip], #-1363	; 0x553
     73c:	55525400 	ldrbpl	r5, [r2, #-1024]	; 0x400
     740:	445f0045 	ldrbmi	r0, [pc], #-69	; 748 <__Stack_Size+0x348>
     744:	43495645 	movtmi	r5, #38469	; 0x9645
     748:	52505f45 	subspl	r5, r0, #276	; 0x114
     74c:	7500504f 	strvc	r5, [r0, #-79]	; 0x4f
     750:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
     754:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     758:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     75c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     760:	43006e6f 	movwmi	r6, #3695	; 0xe6f
     764:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     768:	6174535f 	cmnvs	r4, pc, asr r3
     76c:	5f737574 	svcpl	0x00737574
     770:	0074754f 	rsbseq	r7, r4, pc, asr #10
     774:	5f425355 	svcpl	0x00425355
     778:	55534e55 	ldrbpl	r4, [r3, #-3669]	; 0xe55
     77c:	524f5050 	subpl	r5, pc, #80	; 0x50
     780:	6c610054 	stclvs	0, cr0, [r1], #-336	; 0xfffffeb0
     784:	74655374 	strbtvc	r5, [r5], #-884	; 0x374
     788:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     78c:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
     790:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
     794:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     798:	72500074 	subsvc	r0, r0, #116	; 0x74
     79c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
     7a0:	74535f73 	ldrbvc	r5, [r3], #-3955	; 0xf73
     7a4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     7a8:	004e495f 	subeq	r4, lr, pc, asr r9
     7ac:	636f7250 	cmnvs	pc, #80, 4
     7b0:	5f737365 	svcpl	0x00737365
     7b4:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     7b8:	4f5f7375 	svcmi	0x005f7375
     7bc:	75005455 	strvc	r5, [r0, #-1109]	; 0x455
     7c0:	65526273 	ldrbvs	r6, [r2, #-627]	; 0x273
     7c4:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0x573
     7c8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     7cc:	656d2f00 	strbvs	r2, [sp, #-3840]!	; 0xf00
     7d0:	2f616964 	svccs	0x00616964
     7d4:	475f6673 			; <UNDEFINED> instruction: 0x475f6673
     7d8:	75487469 	strbvc	r7, [r8, #-1129]	; 0x469
     7dc:	616d2f62 	cmnvs	sp, r2, ror #30
     7e0:	78697274 	stmdavc	r9!, {r2, r4, r5, r6, r9, ip, sp, lr}^
     7e4:	666f732f 	strbtvs	r7, [pc], -pc, lsr #6
     7e8:	72617774 	rsbvc	r7, r1, #116, 14	; 0x1d00000
     7ec:	6f622f65 	svcvs	0x00622f65
     7f0:	6f6c746f 	svcvs	0x006c746f
     7f4:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
     7f8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     7fc:	45445f00 	strbmi	r5, [r4, #-3840]	; 0xf00
     800:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
     804:	62737500 	rsbsvs	r7, r3, #0, 10
     808:	42627344 	rsbmi	r7, r2, #68, 6	; 0x10000001
     80c:	70007375 	andvc	r7, r0, r5, ror r3
     810:	6e497045 	cdpvs	0, 4, cr7, cr9, cr5, {2}
     814:	554f5f74 	strbpl	r5, [pc, #-3956]	; fffff8a8 <BootRAM+0xef70049>
     818:	65720054 	ldrbvs	r0, [r2, #-84]!	; 0x54
     81c:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     820:	4e450074 	mcrmi	0, 2, r0, cr5, cr4, {3}
     824:	494f5044 	stmdbmi	pc, {r2, r6, ip, lr}^	; <UNPREDICTABLE>
     828:	525f544e 	subspl	r5, pc, #1308622848	; 0x4e000000
     82c:	50494345 	subpl	r4, r9, r5, asr #6
     830:	544e4549 	strbpl	r4, [lr], #-1353	; 0x549
     834:	62737500 	rsbsvs	r7, r3, #0, 10
     838:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     83c:	42535500 	subsmi	r5, r3, #0, 10
     840:	6e654c77 	mcrvs	12, 3, r4, cr5, cr7, {3}
     844:	73687467 	cmnvc	r8, #1728053248	; 0x67000000
     848:	62737500 	rsbsvs	r7, r3, #0, 10
     84c:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     850:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     854:	73654467 	cmnvc	r5, #1728053248	; 0x67000000
     858:	70697263 	rsbvc	r7, r9, r3, ror #4
     85c:	00726f74 	rsbseq	r6, r2, r4, ror pc
     860:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
     864:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
     868:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     86c:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     870:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     874:	6144726f 	cmpvs	r4, pc, ror #4
     878:	43006174 	movwmi	r6, #372	; 0x174
     87c:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
     880:	45525547 	ldrbmi	r5, [r2, #-1351]	; 0x547
     884:	73750044 	cmnvc	r5, #68	; 0x44
     888:	776f5062 	strbvc	r5, [pc, -r2, rrx]!
     88c:	664f7265 	strbvs	r7, [pc], -r5, ror #4
     890:	75430066 	strbvc	r0, [r3, #-102]	; 0x66
     894:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     898:	6e495f74 	mcrvs	15, 2, r5, cr9, cr4, {3}
     89c:	66726574 			; <UNDEFINED> instruction: 0x66726574
     8a0:	00656361 	rsbeq	r6, r5, r1, ror #6
     8a4:	47627375 			; <UNDEFINED> instruction: 0x47627375
     8a8:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
     8ac:	66726574 			; <UNDEFINED> instruction: 0x66726574
     8b0:	00656361 	rsbeq	r6, r5, r1, ror #6
     8b4:	755f3875 	ldrbvc	r3, [pc, #-2165]	; 47 <_Minimum_Stack_Size-0xb9>
     8b8:	6f436273 	svcvs	0x00436273
     8bc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     8c0:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     8c4:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     8c8:	4644726f 	strbmi	r7, [r4], -pc, ror #4
     8cc:	44410055 	strbmi	r0, [r1], #-85	; 0x55
     8d0:	53455244 	movtpl	r5, #21060	; 0x5244
     8d4:	00444553 	subeq	r4, r4, r3, asr r5
     8d8:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     8dc:	495f454d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, sl, lr}^	; <UNPREDICTABLE>
     8e0:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
     8e4:	004c414e 	subeq	r4, ip, lr, asr #2
     8e8:	5345525f 	movtpl	r5, #21087	; 0x525f
     8ec:	5f454d55 	svcpl	0x00454d55
     8f0:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
     8f4:	53550045 	cmppl	r5, #69	; 0x45
     8f8:	55535f42 	ldrbpl	r5, [r3, #-3906]	; 0xf42
     8fc:	53454343 	movtpl	r4, #21315	; 0x5343
     900:	4e550053 	mrcmi	0, 2, r0, cr5, cr3, {2}
     904:	4e4e4f43 	cdpmi	15, 4, cr4, cr14, cr3, {2}
     908:	45544345 	ldrbmi	r4, [r4, #-837]	; 0x345
     90c:	73750044 	cmnvc	r5, #68	; 0x44
     910:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
     914:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     918:	5f007375 	svcpl	0x00007375
     91c:	50444e45 	subpl	r4, r4, r5, asr #28
     920:	544e494f 	strbpl	r4, [lr], #-2383	; 0x94f
     924:	464e495f 			; <UNDEFINED> instruction: 0x464e495f
     928:	7375004f 	cmnvc	r5, #79	; 0x4f
     92c:	656c4362 	strbvs	r4, [ip, #-866]!	; 0x362
     930:	65467261 	strbvs	r7, [r6, #-609]	; 0x261
     934:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
     938:	6f540065 	svcvs	0x00540065
     93c:	5f6c6174 	svcpl	0x006c6174
     940:	70646e45 	rsbvc	r6, r4, r5, asr #28
     944:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
     948:	6e6f4300 	cdpvs	3, 6, cr4, cr15, cr0, {0}
     94c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 784 <__Stack_Size+0x384>
     950:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     954:	6f430065 	svcvs	0x00430065
     958:	6f527970 	svcvs	0x00527970
     95c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     960:	65530065 	ldrbvs	r0, [r3, #-101]	; 0x65
     964:	52504574 	subspl	r4, r0, #116, 10	; 0x1d000000
     968:	6c615678 	stclvs	6, cr5, [r1], #-480	; 0xfffffe20
     96c:	6e006469 	cdpvs	4, 0, cr6, cr0, cr9, {3}
     970:	6968746f 	stmdbvs	r8!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     974:	7250676e 	subsvc	r6, r0, #28835840	; 0x1b80000
     978:	7500636f 	strvc	r6, [r0, #-879]	; 0x36f
     97c:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     980:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     984:	56676e69 	strbtpl	r6, [r7], -r9, ror #28
     988:	6f646e65 	svcvs	0x00646e65
     98c:	38750072 	ldmdacc	r5!, {r1, r4, r5, r6}^
     990:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     994:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     998:	6e49676e 	cdpvs	7, 4, cr6, cr9, cr14, {3}
     99c:	66726574 			; <UNDEFINED> instruction: 0x66726574
     9a0:	00656361 	rsbeq	r6, r5, r1, ror #6
     9a4:	755f3875 	ldrbvc	r3, [pc, #-2165]	; 137 <_Minimum_Stack_Size+0x37>
     9a8:	65446273 	strbvs	r6, [r4, #-627]	; 0x273
     9ac:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     9b0:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     9b4:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     9b8:	4644726f 	strbmi	r7, [r4], -pc, ror #4
     9bc:	38750055 	ldmdacc	r5!, {r0, r2, r4, r6}^
     9c0:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     9c4:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     9c8:	6553676e 	ldrbvs	r6, [r3, #-1902]	; 0x76e
     9cc:	6c616972 	stclvs	9, cr6, [r1], #-456	; 0xfffffe38
     9d0:	5f387500 	svcpl	0x00387500
     9d4:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     9d8:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     9dc:	746c4167 	strbtvc	r4, [ip], #-359	; 0x167
     9e0:	38750030 	ldmdacc	r5!, {r4, r5}^
     9e4:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     9e8:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     9ec:	6c41676e 	mcrrvs	7, 6, r6, r1, cr14
     9f0:	75003174 	strvc	r3, [r0, #-372]	; 0x174
     9f4:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     9f8:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     9fc:	41676e69 	cmnmi	r7, r9, ror #28
     a00:	0032746c 	eorseq	r7, r2, ip, ror #8
     a04:	755f3875 	ldrbvc	r3, [pc, #-2165]	; 197 <_Minimum_Stack_Size+0x97>
     a08:	74536273 	ldrbvc	r6, [r3], #-627	; 0x273
     a0c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     a10:	646f7250 	strbtvs	r7, [pc], #-592	; a18 <__Stack_Size+0x618>
     a14:	00746375 	rsbseq	r6, r4, r5, ror r3
     a18:	755f3875 	ldrbvc	r3, [pc, #-2165]	; 1ab <_Minimum_Stack_Size+0xab>
     a1c:	74536273 	ldrbvc	r6, [r3], #-627	; 0x273
     a20:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     a24:	676e614c 	strbvs	r6, [lr, -ip, asr #2]!
     a28:	75006449 	strvc	r6, [r0, #-1097]	; 0x449
     a2c:	645f6273 	ldrbvs	r6, [pc], #-627	; a34 <__Stack_Size+0x634>
     a30:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     a34:	6f747069 	svcvs	0x00747069
     a38:	00632e72 	rsbeq	r2, r3, r2, ror lr
     a3c:	46756664 	ldrbtmi	r6, [r5], -r4, ror #12
     a40:	73696e69 	cmnvc	r9, #1680	; 0x690
     a44:	6c705568 	cfldr64vs	mvdx5, [r0], #-416	; 0xfffffe60
     a48:	0064616f 	rsbeq	r6, r4, pc, ror #2
     a4c:	706d756a 	rsbvc	r7, sp, sl, ror #10
     a50:	73556f54 	cmpvc	r5, #84, 30	; 0x150
     a54:	73007265 	movwvc	r7, #613	; 0x265
     a58:	70757465 	rsbsvc	r7, r5, r5, ror #8
     a5c:	4144454c 	cmpmi	r4, ip, asr #10
     a60:	7542646e 	strbvc	r6, [r2, #-1134]	; 0x46e
     a64:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
     a68:	65686300 	strbvs	r6, [r8, #-768]!	; 0x300
     a6c:	6e416b63 	vmlsvs.f64	d22, d1, d19
     a70:	656c4364 	strbvs	r4, [ip, #-868]!	; 0x364
     a74:	6f427261 	svcvs	0x00427261
     a78:	6f6c746f 	svcvs	0x006c746f
     a7c:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
     a80:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     a84:	6e6f6400 	cdpvs	4, 6, cr6, cr15, cr0, {0}
     a88:	61775f74 	cmnvs	r7, r4, ror pc
     a8c:	63007469 	movwvs	r7, #1129	; 0x469
     a90:	6b636568 	blvs	18da038 <__Stack_Size+0x18d9c38>
     a94:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     a98:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xf43
     a9c:	73797300 	cmnvc	r9, #0, 6
     aa0:	526d6574 	rsbpl	r6, sp, #116, 10	; 0x1d000000
     aa4:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     aa8:	61657200 	cmnvs	r5, r0, lsl #4
     aac:	74754264 	ldrbtvc	r4, [r5], #-612	; 0x264
     ab0:	536e6f74 	cmnpl	lr, #116, 30	; 0x1d0
     ab4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     ab8:	74657300 	strbtvc	r7, [r5], #-768	; 0x300
     abc:	4c467075 	mcrrmi	0, 7, r7, r6, cr5
     ac0:	00485341 	subeq	r5, r8, r1, asr #6
     ac4:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0x573
     ac8:	4b4c4370 	blmi	1311890 <__Stack_Size+0x1311490>
     acc:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     ad0:	6f6e006e 	svcvs	0x006e006e
     ad4:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
     ad8:	756a5f72 	strbvc	r5, [sl, #-3954]!	; 0xf72
     adc:	6d00706d 	stcvs	0, cr7, [r0, #-436]	; 0xfffffe4c
     ae0:	2e6e6961 	cdpcs	9, 6, cr6, cr14, cr1, {3}
     ae4:	79730063 	ldmdbvc	r3!, {r0, r1, r5, r6}^
     ae8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     aec:	64726148 	ldrbtvs	r6, [r2], #-328	; 0x148
     af0:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     af4:	65640074 	strbvs	r0, [r4, #-116]!	; 0x74
     af8:	5f79616c 	svcpl	0x0079616c
     afc:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
     b00:	66640074 			; <UNDEFINED> instruction: 0x66640074
     b04:	6c705575 	cfldr64vs	mvdx5, [r0], #-468	; 0xfffffe2c
     b08:	5364616f 	cmnpl	r4, #-1073741797	; 0xc000001b
     b0c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
     b10:	73006465 	movwvc	r6, #1125	; 0x465
     b14:	734d7465 	movtvc	r7, #54373	; 0xd465
     b18:	646e4170 	strbtvs	r4, [lr], #-368	; 0x170
     b1c:	706d754a 	rsbvc	r7, sp, sl, asr #10
     b20:	50434900 	subpl	r4, r3, r0, lsl #18
     b24:	61700052 	cmnvs	r0, r2, asr r0
     b28:	64416567 	strbvs	r6, [r1], #-1383	; 0x567
     b2c:	74007264 	strvc	r7, [r0], #-612	; 0x264
     b30:	7573706d 	ldrbvc	r7, [r3, #-109]!	; 0x6d
     b34:	77720062 	ldrbvc	r0, [r2, -r2, rrx]!
     b38:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
     b3c:	50534900 	subspl	r4, r3, r0, lsl #18
     b40:	65720052 	ldrbvs	r0, [r2, #-82]!	; 0x52
     b44:	69506461 	ldmdbvs	r0, {r0, r5, r6, sl, sp, lr}^
     b48:	6c66006e 	stclvs	0, cr0, [r6], #-440	; 0xfffffe48
     b4c:	45687361 	strbmi	r7, [r8, #-865]!	; 0x361
     b50:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0x172
     b54:	65676150 	strbvs	r6, [r7, #-336]!	; 0x150
     b58:	61720073 	cmnvs	r2, r3, ror r0
     b5c:	73006574 	movwvc	r6, #1396	; 0x574
     b60:	626f7274 	rsbvs	r7, pc, #116, 4	; 0x40000007
     b64:	6e695065 	cdpvs	0, 6, cr5, cr9, cr5, {3}
     b68:	64646100 	strbtvs	r6, [r4], #-256	; 0x100
     b6c:	45520072 	ldrbmi	r0, [r2, #-114]	; 0x72
     b70:	56524553 			; <UNDEFINED> instruction: 0x56524553
     b74:	30314445 	eorscc	r4, r1, r5, asr #8
     b78:	53455200 	movtpl	r5, #20992	; 0x5200
     b7c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     b80:	00313144 	eorseq	r3, r1, r4, asr #2
     b84:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
     b88:	73006765 	movwvc	r6, #1893	; 0x765
     b8c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     b90:	42504100 	subsmi	r4, r0, #0, 2
     b94:	54535232 	ldrbpl	r5, [r3], #-562	; 0x232
     b98:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
     b9c:	545f4349 	ldrbpl	r4, [pc], #-841	; ba4 <__Stack_Size+0x7a4>
     ba0:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     ba4:	74006665 	strvc	r6, [r0], #-1637	; 0x665
     ba8:	7270706d 	rsbsvc	r7, r0, #109	; 0x6d
     bac:	6c660065 	stclvs	0, cr0, [r6], #-404	; 0xfffffe6c
     bb0:	55687361 	strbpl	r7, [r8, #-865]!	; 0x361
     bb4:	636f6c6e 	cmnvs	pc, #28160	; 0x6e00
     bb8:	6567006b 	strbvs	r0, [r7, #-107]!	; 0x6b
     bbc:	616c4674 	smcvs	50276	; 0xc464
     bc0:	6e456873 	mcrvs	8, 2, r6, cr5, cr3, {3}
     bc4:	46420064 	strbmi	r0, [r2], -r4, rrx
     bc8:	72005241 	andvc	r5, r0, #268435460	; 0x10000004
     bcc:	4349564e 	movtmi	r5, #38478	; 0x964e
     bd0:	69766e00 	ldmdbvs	r6!, {r9, sl, fp, sp, lr}^
     bd4:	73694463 	cmnvc	r9, #1660944384	; 0x63000000
     bd8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
     bdc:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
     be0:	70757272 	rsbsvc	r7, r5, r2, ror r2
     be4:	76007374 			; <UNDEFINED> instruction: 0x76007374
     be8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
     bec:	4f545600 	svcmi	0x00545600
     bf0:	756a0052 	strbvc	r0, [sl, #-82]!	; 0x52
     bf4:	6441706d 	strbvs	r7, [r1], #-109	; 0x6d
     bf8:	52007264 	andpl	r7, r0, #100, 4	; 0x40000006
     bfc:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
     c00:	74536765 	ldrbvc	r6, [r3], #-1893	; 0x765
     c04:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     c08:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     c0c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     c10:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     c14:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     c18:	53434900 	movtpl	r4, #14592	; 0x3900
     c1c:	6d740052 	ldclvs	0, cr0, [r4, #-328]!	; 0xfffffeb8
     c20:	73616d70 	cmnvc	r1, #112, 26	; 0x1c00
     c24:	4841006b 	stmdami	r1, {r0, r1, r3, r5, r6}^
     c28:	524e4542 	subpl	r4, lr, #276824064	; 0x10800000
     c2c:	52494100 	subpl	r4, r9, #0, 2
     c30:	4d005243 	sfmmi	f5, 4, [r0, #-268]	; 0xfffffef4
     c34:	5241464d 	subpl	r4, r1, #80740352	; 0x4d00000
     c38:	57686c00 	strbpl	r6, [r8, -r0, lsl #24]!
     c3c:	0064726f 	rsbeq	r7, r4, pc, ror #4
     c40:	73616c66 	cmnvc	r1, #26112	; 0x6600
     c44:	636f4c68 	cmnvs	pc, #104, 24	; 0x6800
     c48:	7770006b 	ldrbvc	r0, [r0, -fp, rrx]!
     c4c:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xf72
     c50:	616d5f67 	cmnvs	sp, r7, ror #30
     c54:	46430070 			; <UNDEFINED> instruction: 0x46430070
     c58:	49005253 	stmdbmi	r0, {r0, r1, r4, r6, r9, ip, lr}
     c5c:	00524241 	subseq	r4, r2, r1, asr #4
     c60:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xf77
     c64:	45434900 	strbmi	r4, [r3, #-2304]	; 0x900
     c68:	50410052 	subpl	r0, r1, r2, asr r0
     c6c:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
     c70:	62005254 	andvs	r5, r0, #84, 4	; 0x40000005
     c74:	725f706b 	subsvc	r7, pc, #107	; 0x6b
     c78:	6d5f6765 	ldclvs	7, cr6, [pc, #-404]	; aec <__Stack_Size+0x6ec>
     c7c:	43007061 	movwmi	r7, #97	; 0x61
     c80:	44495550 	strbmi	r5, [r9], #-1360	; 0x550
     c84:	43537200 	cmpmi	r3, #0, 4
     c88:	45520042 	ldrbmi	r0, [r2, #-66]	; 0x42
     c8c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     c90:	00304445 	eorseq	r4, r0, r5, asr #8
     c94:	52534644 	subspl	r4, r3, #68, 12	; 0x4400000
     c98:	53455200 	movtpl	r5, #20992	; 0x5200
     c9c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     ca0:	52003244 	andpl	r3, r0, #68, 4	; 0x40000004
     ca4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     ca8:	33444556 	movtcc	r4, #17750	; 0x4556
     cac:	53455200 	movtpl	r5, #20992	; 0x5200
     cb0:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     cb4:	52003444 	andpl	r3, r0, #68, 8	; 0x44000000
     cb8:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     cbc:	35444556 	strbcc	r4, [r4, #-1366]	; 0x556
     cc0:	53455200 	movtpl	r5, #20992	; 0x5200
     cc4:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     cc8:	52003644 	andpl	r3, r0, #68, 12	; 0x4400000
     ccc:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     cd0:	37444556 	smlsldcc	r4, r4, r6, r5	; <UNPREDICTABLE>
     cd4:	43485300 	movtmi	r5, #33536	; 0x8300
     cd8:	49005253 	stmdbmi	r0, {r0, r1, r4, r6, r9, ip, lr}
     cdc:	00524553 	subseq	r4, r2, r3, asr r5
     ce0:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     ce4:	43705574 	cmnmi	r0, #116, 10	; 0x1d000000
     ce8:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
     cec:	44007265 	strmi	r7, [r0], #-613	; 0x265
     cf0:	00303152 	eorseq	r3, r0, r2, asr r1
     cf4:	32425041 	subcc	r5, r2, #65	; 0x41
     cf8:	00524e45 	subseq	r4, r2, r5, asr #28
     cfc:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     d00:	00746553 	rsbseq	r6, r4, r3, asr r5
     d04:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     d08:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     d0c:	73750031 	cmnvc	r5, #49	; 0x31
     d10:	69614d72 	stmdbvs	r1!, {r1, r4, r5, r6, r8, sl, fp, lr}^
     d14:	4641006e 	strbmi	r0, [r1], -lr, rrx
     d18:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
     d1c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     d20:	39444556 	stmdbcc	r4, {r1, r2, r4, r6, r8, sl, lr}^
     d24:	72616800 	rsbvc	r6, r1, #0, 16
     d28:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
     d2c:	00632e65 	rsbeq	r2, r3, r5, ror #28
     d30:	31425041 	cmpcc	r2, r1, asr #32
     d34:	00524e45 	subseq	r4, r2, r5, asr #28
     d38:	73616c66 	cmnvc	r1, #26112	; 0x6600
     d3c:	69725768 	ldmdbvs	r2!, {r3, r5, r6, r8, r9, sl, ip, lr}^
     d40:	6f576574 	svcvs	0x00576574
     d44:	66006472 			; <UNDEFINED> instruction: 0x66006472
     d48:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     d4c:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
     d50:	50485300 	subpl	r5, r8, r0, lsl #6
     d54:	54520052 	ldrbpl	r0, [r2], #-82	; 0x52
     d58:	00524343 	subseq	r4, r2, r3, asr #6
     d5c:	6b6e6162 	blvs	1b992ec <__Stack_Size+0x1b98eec>
     d60:	616c6600 	cmnvs	ip, r0, lsl #12
     d64:	64416873 	strbvs	r6, [r1], #-2163	; 0x873
     d68:	66007264 	strvs	r7, [r0], -r4, ror #4
     d6c:	50636e75 	rsbpl	r6, r3, r5, ror lr
     d70:	75007274 	strvc	r7, [r0, #-628]	; 0x274
     d74:	64417273 	strbvs	r7, [r1], #-627	; 0x273
     d78:	52007264 	andpl	r7, r0, #100, 4	; 0x40000006
     d7c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     d80:	38444556 	stmdacc	r4, {r1, r2, r4, r6, r8, sl, lr}^
     d84:	616c6600 	cmnvs	ip, r0, lsl #12
     d88:	72456873 	subvc	r6, r5, #7536640	; 0x730000
     d8c:	50657361 	rsbpl	r7, r5, r1, ror #6
     d90:	00656761 	rsbeq	r6, r5, r1, ror #14
     d94:	31706b62 	cmncc	r0, r2, ror #22
     d98:	69725730 	ldmdbvs	r2!, {r4, r5, r8, r9, sl, ip, lr}^
     d9c:	42006574 	andmi	r6, r0, #116, 10	; 0x1d000000
     da0:	00524344 	subseq	r4, r2, r4, asr #6
     da4:	70706d74 	rsbsvc	r6, r0, r4, ror sp
     da8:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     dac:	00797469 	rsbseq	r7, r9, r9, ror #8
     db0:	6f576868 	svcvs	0x00576868
     db4:	52006472 	andpl	r6, r0, #1912602624	; 0x72000000
     db8:	56524553 			; <UNDEFINED> instruction: 0x56524553
     dbc:	00314445 	eorseq	r4, r1, r5, asr #8
     dc0:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     dc4:	63757600 	cmnvs	r5, #0, 12
     dc8:	53003233 	movwpl	r3, #563	; 0x233
     dcc:	545f4243 	ldrbpl	r4, [pc], #-579	; dd4 <__Stack_Size+0x9d4>
     dd0:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     dd4:	48006665 	stmdami	r0, {r0, r2, r5, r6, r9, sl, sp, lr}
     dd8:	00525346 	subseq	r5, r2, r6, asr #6
     ddc:	72745369 	rsbsvc	r5, r4, #-1543503871	; 0xa4000001
     de0:	00676e69 	rsbeq	r6, r7, r9, ror #28
     de4:	76636572 			; <UNDEFINED> instruction: 0x76636572
     de8:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     dec:	64007265 	strvs	r7, [r0], #-613	; 0x265
     df0:	632e7566 	teqvs	lr, #427819008	; 0x19800000
     df4:	4c505f00 	mrrcmi	15, 0, r5, r0, cr0
     df8:	4400544f 	strmi	r5, [r0], #-1103	; 0x44f
     dfc:	555f5546 	ldrbpl	r5, [pc, #-1350]	; 8be <__Stack_Size+0x4be>
     e00:	414f4c50 	cmpmi	pc, r0, asr ip	; <UNPREDICTABLE>
     e04:	4c465f44 	mcrrmi	15, 4, r5, r6, cr4
     e08:	5f485341 	svcpl	0x00485341
     e0c:	30385830 	eorscc	r5, r8, r0, lsr r8
     e10:	30303530 	eorscc	r3, r0, r0, lsr r5
     e14:	445f0030 	ldrbmi	r0, [pc], #-48	; e1c <__Stack_Size+0xa1c>
     e18:	74535546 	ldrbvc	r5, [r3], #-1350	; 0x546
     e1c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     e20:	65737500 	ldrbvs	r7, [r3, #-1280]!	; 0x500
     e24:	70704172 	rsbsvc	r4, r0, r2, ror r1
     e28:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
     e2c:	50776200 	rsbspl	r6, r7, r0, lsl #4
     e30:	546c6c6f 	strbtpl	r6, [ip], #-3183	; 0xc6f
     e34:	6f656d69 	svcvs	0x00656d69
     e38:	00307475 	eorseq	r7, r0, r5, ror r4
     e3c:	6f507762 	svcvs	0x00507762
     e40:	69546c6c 	ldmdbvs	r4, {r2, r3, r5, r6, sl, fp, sp, lr}^
     e44:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8df <__Stack_Size+0x4df>
     e48:	62003174 	andvs	r3, r0, #116, 2
     e4c:	6c6f5077 	stclvs	0, cr5, [pc], #-476	; c78 <__Stack_Size+0x878>
     e50:	6d69546c 	cfstrdvs	mvd5, [r9, #-432]!	; 0xfffffe50
     e54:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
     e58:	46440032 			; <UNDEFINED> instruction: 0x46440032
     e5c:	50555f55 	subspl	r5, r5, r5, asr pc
     e60:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
     e64:	4e4f4e5f 	mcrmi	14, 2, r4, cr15, cr15, {2}
     e68:	66640045 	strbtvs	r0, [r4], -r5, asr #32
     e6c:	706f4375 	rsbvc	r4, pc, r5, ror r3	; <UNPREDICTABLE>
     e70:	4c505579 	cfldr64mi	mvdx5, [r0], {121}	; 0x79
     e74:	0044414f 	subeq	r4, r4, pc, asr #2
     e78:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     e7c:	6f6c7055 	svcvs	0x006c7055
     e80:	79546461 	ldmdbvc	r4, {r0, r5, r6, sl, sp, lr}^
     e84:	64006570 	strvs	r6, [r0], #-1392	; 0x570
     e88:	6f437566 	svcvs	0x00437566
     e8c:	75427970 	strbvc	r7, [r2, #-2416]	; 0x970
     e90:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     e94:	78456f54 	stmdavc	r5, {r2, r4, r6, r8, r9, sl, fp, sp, lr}^
     e98:	64006365 	strvs	r6, [r0], #-869	; 0x365
     e9c:	6f437566 	svcvs	0x00437566
     ea0:	74537970 	ldrbvc	r7, [r3], #-2416	; 0x970
     ea4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     ea8:	646f6300 	strbtvs	r6, [pc], #-768	; eb0 <__Stack_Size+0xab0>
     eac:	6f635f65 	svcvs	0x00635f65
     eb0:	6c5f7970 	mrrcvs	9, 7, r7, pc, cr0	; <UNPREDICTABLE>
     eb4:	006b636f 	rsbeq	r6, fp, pc, ror #6
     eb8:	43756664 	cmnmi	r5, #100, 12	; 0x6400000
     ebc:	5379706f 	cmnpl	r9, #111	; 0x6f
     ec0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     ec4:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     ec8:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
     ecc:	4f4c4e44 	svcmi	0x004c4e44
     ed0:	64004441 	strvs	r4, [r0], #-1089	; 0x441
     ed4:	70557566 	subsvc	r7, r5, r6, ror #10
     ed8:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0x164
     edc:	69547942 	ldmdbvs	r4, {r1, r6, r8, fp, ip, sp, lr}^
     ee0:	756f656d 	strbvc	r6, [pc, #-1389]!	; 97b <__Stack_Size+0x57b>
     ee4:	46440074 			; <UNDEFINED> instruction: 0x46440074
     ee8:	50555f55 	subspl	r5, r5, r5, asr pc
     eec:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
     ef0:	414c465f 	cmpmi	ip, pc, asr r6
     ef4:	305f4853 	subscc	r4, pc, r3, asr r8	; <UNPREDICTABLE>
     ef8:	30303858 	eorscc	r3, r0, r8, asr r8
     efc:	30303032 	eorscc	r3, r0, r2, lsr r0
     f00:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
     f04:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     f08:	66640065 	strbtvs	r0, [r4], -r5, rrx
     f0c:	6c705575 	cfldr64vs	mvdx5, [r0], #-468	; 0xfffffe2c
     f10:	5464616f 	strbtpl	r6, [r4], #-367	; 0x16f
     f14:	73657079 	cmnvc	r5, #121	; 0x79
     f18:	6400745f 	strvs	r7, [r0], #-1119	; 0x45f
     f1c:	70417566 	subvc	r7, r1, r6, ror #10
     f20:	61745370 	cmnvs	r4, r0, ror r3
     f24:	00737574 	rsbseq	r7, r3, r4, ror r5
     f28:	6f6c7075 	svcvs	0x006c7075
     f2c:	6c426461 	cfstrdvs	mvd6, [r2], {97}	; 0x61
     f30:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
     f34:	74006e65 	strvc	r6, [r0], #-3685	; 0xe65
     f38:	42736968 	rsbsmi	r6, r3, #104, 18	; 0x1a0000
     f3c:	6b636f6c 	blvs	18dccf4 <__Stack_Size+0x18dc8f4>
     f40:	006e654c 	rsbeq	r6, lr, ip, asr #10
     f44:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     f48:	6d726946 	ldclvs	9, cr6, [r2, #-280]!	; 0xfffffee8
     f4c:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     f50:	006e654c 	rsbeq	r6, lr, ip, asr #10
     f54:	42756664 	rsbsmi	r6, r5, #100, 12	; 0x6400000
     f58:	00797375 	rsbseq	r7, r9, r5, ror r3
     f5c:	61745362 	cmnvs	r4, r2, ror #6
     f60:	6c006574 	cfstr32vs	mvfx6, [r0], {116}	; 0x74
     f64:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
     f68:	74730068 	ldrbtvc	r0, [r3], #-104	; 0x68
     f6c:	53747261 	cmnpl	r4, #268435462	; 0x10000006
     f70:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     f74:	55464400 	strbpl	r4, [r6, #-1024]	; 0x400
     f78:	4c50555f 	cfldr64mi	mvdx5, [r0], {95}	; 0x5f
     f7c:	5f44414f 	svcpl	0x0044414f
     f80:	004d4152 	subeq	r4, sp, r2, asr r1
     f84:	49474542 	stmdbmi	r7, {r1, r6, r8, sl, lr}^
     f88:	4e494e4e 	cdpmi	14, 4, cr4, cr9, cr14, {2}
     f8c:	73750047 	cmnvc	r5, #71	; 0x47
     f90:	70537265 	subsvc	r7, r3, r5, ror #4
     f94:	00656361 	rsbeq	r6, r5, r1, ror #6
     f98:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     f9c:	45707041 	ldrbmi	r7, [r0, #-65]!	; 0x41
     fa0:	6200646e 	andvs	r6, r0, #1845493760	; 0x6e000000
     fa4:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     fa8:	64007375 	strvs	r7, [r0], #-885	; 0x375
     fac:	65537566 	ldrbvs	r7, [r3, #-1382]	; 0x566
     fb0:	61745374 	cmnvs	r4, r4, ror r3
     fb4:	4d006574 	cfstr32mi	mvfx6, [r0, #-464]	; 0xfffffe30
     fb8:	4c444449 	cfstrdmi	mvd4, [r4], {73}	; 0x49
     fbc:	66640045 	strbtvs	r0, [r4], -r5, asr #32
     fc0:	74654775 	strbtvc	r4, [r5], #-1909	; 0x775
     fc4:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     fc8:	72460065 	subvc	r0, r6, #101	; 0x65
     fcc:	73556565 	cmpvc	r5, #423624704	; 0x19400000
     fd0:	75427265 	strbvc	r7, [r2, #-613]	; 0x265
     fd4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     fd8:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
     fdc:	74537854 	ldrbvc	r7, [r3], #-2132	; 0x854
     fe0:	536c6c61 	cmnpl	ip, #24832	; 0x6100
     fe4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     fe8:	65530073 	ldrbvs	r0, [r3, #-115]	; 0x73
     fec:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
     ff0:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
     ff4:	64413166 	strbvs	r3, [r1], #-358	; 0x166
     ff8:	53007264 	movwpl	r7, #612	; 0x264
     ffc:	50457465 	subpl	r7, r5, r5, ror #8
    1000:	61567854 	cmpvs	r6, r4, asr r8
    1004:	0064696c 	rsbeq	r6, r4, ip, ror #18
    1008:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
    100c:	6c42756f 	cfstr64vs	mvdx7, [r2], {111}	; 0x6f
    1010:	66754265 	ldrbtvs	r4, [r5], -r5, ror #4
    1014:	53504566 	cmppl	r0, #427819008	; 0x19800000
    1018:	6c6c6174 	stfvse	f6, [ip], #-464	; 0xfffffe30
    101c:	5f504500 	svcpl	0x00504500
    1020:	46554244 	ldrbmi	r4, [r5], -r4, asr #4
    1024:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xf5f
    1028:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    102c:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
    1030:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1034:	54007375 	strpl	r7, [r0], #-885	; 0x375
    1038:	6c67676f 	stclvs	7, cr6, [r7], #-444	; 0xfffffe44
    103c:	4f544465 	svcmi	0x00544465
    1040:	58545f47 	ldmdapl	r4, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    1044:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1048:	64415045 	strbvs	r5, [r1], #-69	; 0x45
    104c:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    1050:	455f0073 	ldrbmi	r0, [pc, #-115]	; fe5 <__Stack_Size+0xbe5>
    1054:	42445f50 	submi	r5, r4, #80, 30	; 0x140
    1058:	445f4655 	ldrbmi	r4, [pc], #-1621	; 1060 <__Stack_Size+0xc60>
    105c:	62005249 	andvs	r5, r0, #-1879048188	; 0x90000004
    1060:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1064:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1068:	52545349 	subspl	r5, r4, #603979777	; 0x24000001
    106c:	424e7700 	submi	r7, lr, #0, 14
    1070:	6b636f6c 	blvs	18dce28 <__Stack_Size+0x18dca28>
    1074:	6c430073 	mcrrvs	0, 7, r0, r3, cr3
    1078:	44726165 	ldrbtmi	r6, [r2], #-357	; 0x165
    107c:	5f474f54 	svcpl	0x00474f54
    1080:	47005852 	smlsdmi	r0, r2, r8, r5
    1084:	4e437465 	cdpmi	4, 4, cr7, cr3, cr5, {3}
    1088:	47005254 	smlsdmi	r0, r4, r2, r5
    108c:	78527465 	ldmdavc	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1090:	6c617453 	cfstrdvs	mvd7, [r1], #-332	; 0xfffffeb4
    1094:	6174536c 	cmnvs	r4, ip, ror #6
    1098:	00737574 	rsbseq	r7, r3, r4, ror r5
    109c:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0x547
    10a0:	52444441 	subpl	r4, r4, #1090519040	; 0x41000000
    10a4:	6f437700 	svcvs	0x00437700
    10a8:	00746e75 	rsbseq	r6, r4, r5, ror lr
    10ac:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    10b0:	64644150 	strbtvs	r4, [r4], #-336	; 0x150
    10b4:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    10b8:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    10bc:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
    10c0:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    10c4:	54007375 	strpl	r7, [r0], #-885	; 0x375
    10c8:	6c67676f 	stclvs	7, cr6, [r7], #-444	; 0xfffffe44
    10cc:	4f544465 	svcmi	0x00544465
    10d0:	58525f47 	ldmdapl	r2, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    10d4:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    10d8:	62445045 	subvs	r5, r4, #69	; 0x45
    10dc:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    10e0:	64644166 	strbtvs	r4, [r4], #-358	; 0x166
    10e4:	65530072 	ldrbvs	r0, [r3, #-114]	; 0x72
    10e8:	54504574 	ldrbpl	r4, [r0], #-1396	; 0x574
    10ec:	00657079 	rsbeq	r7, r5, r9, ror r0
    10f0:	445f5045 	ldrbmi	r5, [pc], #-69	; 10f8 <__Stack_Size+0xcf8>
    10f4:	5f465542 	svcpl	0x00465542
    10f8:	77004e49 	strvc	r4, [r0, -r9, asr #28]
    10fc:	00746552 	rsbseq	r6, r4, r2, asr r5
    1100:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1104:	41785250 	cmnmi	r8, r0, asr r2
    1108:	00726464 	rsbseq	r6, r2, r4, ror #8
    110c:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1110:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    1114:	30667542 	rsbcc	r7, r6, r2, asr #10
    1118:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    111c:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1120:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    1124:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1128:	62007375 	andvs	r7, r0, #-738197503	; 0xd4000001
    112c:	00726944 	rsbseq	r6, r2, r4, asr #18
    1130:	70795477 	rsbsvc	r5, r9, r7, ror r4
    1134:	73750065 	cmnvc	r5, #101	; 0x65
    1138:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    113c:	73752f62 	cmnvc	r5, #392	; 0x188
    1140:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xf62
    1144:	632e7367 	teqvs	lr, #-1677721599	; 0x9c000001
    1148:	5f504500 	svcpl	0x00504500
    114c:	46554244 	ldrbmi	r4, [r5], -r4, asr #4
    1150:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
    1154:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1158:	62445045 	subvs	r5, r4, #69	; 0x45
    115c:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    1160:	00726944 	rsbseq	r6, r2, r4, asr #18
    1164:	66754277 			; <UNDEFINED> instruction: 0x66754277
    1168:	64644131 	strbtvs	r4, [r4], #-305	; 0x131
    116c:	53770072 	cmnpl	r7, #114	; 0x72
    1170:	53005777 	movwpl	r5, #1911	; 0x777
    1174:	50457465 	subpl	r7, r5, r5, ror #8
    1178:	62756f44 	rsbsvs	r6, r5, #68, 30	; 0x110
    117c:	7542656c 	strbvc	r6, [r2, #-1388]	; 0x56c
    1180:	54006666 	strpl	r6, [r0], #-1638	; 0x666
    1184:	726f576f 	rsbvc	r5, pc, #29097984	; 0x1bc0000
    1188:	65530064 	ldrbvs	r0, [r3, #-100]	; 0x64
    118c:	54504574 	ldrbpl	r4, [r0], #-1396	; 0x574
    1190:	64644178 	strbtvs	r4, [r4], #-376	; 0x178
    1194:	6c430072 	mcrrvs	0, 7, r0, r3, cr2
    1198:	45726165 	ldrbmi	r6, [r2, #-357]!	; 0x165
    119c:	756f4450 	strbvc	r4, [pc, #-1104]!	; d54 <__Stack_Size+0x954>
    11a0:	42656c62 	rsbmi	r6, r5, #25088	; 0x6200
    11a4:	00666675 	rsbeq	r6, r6, r5, ror r6
    11a8:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    11ac:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    11b0:	31667542 	cmncc	r6, r2, asr #10
    11b4:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    11b8:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    11bc:	79545045 	ldmdbvc	r4, {r0, r2, r6, ip, lr}^
    11c0:	43006570 	movwmi	r6, #1392	; 0x570
    11c4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    11c8:	435f5045 	cmpmi	pc, #69	; 0x45
    11cc:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    11d0:	65530058 	ldrbvs	r0, [r3, #-88]	; 0x58
    11d4:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    11d8:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    11dc:	6f436666 	svcvs	0x00436666
    11e0:	00746e75 	rsbseq	r6, r4, r5, ror lr
    11e4:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    11e8:	494b5f50 	stmdbmi	fp, {r4, r6, r8, r9, sl, fp, ip, lr}^
    11ec:	5300444e 	movwpl	r4, #1102	; 0x44e
    11f0:	50457465 	subpl	r7, r5, r5, ror #8
    11f4:	6f437854 	svcvs	0x00437854
    11f8:	00746e75 	rsbseq	r6, r4, r5, ror lr
    11fc:	61656c43 	cmnvs	r5, r3, asr #24
    1200:	5f504572 	svcpl	0x00504572
    1204:	444e494b 	strbmi	r4, [lr], #-2379	; 0x94b
    1208:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    120c:	42415442 	submi	r5, r1, #1107296256	; 0x42000000
    1210:	4700454c 	strmi	r4, [r0, -ip, asr #10]
    1214:	53497465 	movtpl	r7, #37989	; 0x9465
    1218:	77005254 	smlsdvc	r0, r4, r2, r5
    121c:	56676552 			; <UNDEFINED> instruction: 0x56676552
    1220:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    1224:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1228:	50444e45 	subpl	r4, r4, r5, asr #28
    122c:	544e494f 	strbpl	r4, [lr], #-2383	; 0x94f
    1230:	64417700 	strbvs	r7, [r1], #-1792	; 0x700
    1234:	47007264 	strmi	r7, [r0, -r4, ror #4]
    1238:	50457465 	subpl	r7, r5, r5, ror #8
    123c:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    1240:	43306675 	teqmi	r0, #122683392	; 0x7500000
    1244:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1248:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    124c:	44444144 	strbmi	r4, [r4], #-324	; 0x144
    1250:	64700052 	ldrbtvs	r0, [r0], #-82	; 0x52
    1254:	67655277 			; <UNDEFINED> instruction: 0x67655277
    1258:	74794200 	ldrbtvc	r4, [r9], #-512	; 0x200
    125c:	61775365 	cmnvs	r7, r5, ror #6
    1260:	65530070 	ldrbvs	r0, [r3, #-112]	; 0x70
    1264:	43504574 	cmpmi	r0, #116, 10	; 0x1d000000
    1268:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    126c:	65527852 	ldrbvs	r7, [r2, #-2130]	; 0x852
    1270:	65470067 	strbvs	r0, [r7, #-103]	; 0x67
    1274:	52504574 	subspl	r4, r0, #116, 10	; 0x1d000000
    1278:	756f4378 	strbvc	r4, [pc, #-888]!	; f08 <__Stack_Size+0xb08>
    127c:	6200746e 	andvs	r7, r0, #1845493760	; 0x6e000000
    1280:	706d6554 	rsbvc	r6, sp, r4, asr r5
    1284:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1288:	52544e43 	subspl	r4, r4, #1072	; 0x430
    128c:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1290:	42415442 	submi	r5, r1, #1107296256	; 0x42000000
    1294:	4700454c 	strmi	r4, [r0, -ip, asr #10]
    1298:	50457465 	subpl	r7, r5, r5, ror #8
    129c:	6f437854 	svcvs	0x00437854
    12a0:	00746e75 	rsbseq	r6, r4, r5, ror lr
    12a4:	61656c43 	cmnvs	r5, r3, asr #24
    12a8:	5f504572 	svcpl	0x00504572
    12ac:	5f525443 	svcpl	0x00525443
    12b0:	47005854 	smlsdmi	r0, r4, r8, r5
    12b4:	50457465 	subpl	r7, r5, r5, ror #8
    12b8:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    12bc:	43316675 	teqmi	r1, #122683392	; 0x7500000
    12c0:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    12c4:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    12c8:	62445045 	subvs	r5, r4, #69	; 0x45
    12cc:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    12d0:	756f4330 	strbvc	r4, [pc, #-816]!	; fa8 <__Stack_Size+0xba8>
    12d4:	7700746e 	strvc	r7, [r0, -lr, ror #8]
    12d8:	30667542 	rsbcc	r7, r6, r2, asr #10
    12dc:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    12e0:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    12e4:	6174535f 	cmnvs	r4, pc, asr r3
    12e8:	5f737574 	svcpl	0x00737574
    12ec:	0074754f 	rsbseq	r7, r4, pc, asr #10
    12f0:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    12f4:	4700524e 	strmi	r5, [r0, -lr, asr #4]
    12f8:	50457465 	subpl	r7, r5, r5, ror #8
    12fc:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    1300:	41306675 	teqmi	r0, r5, ror r6
    1304:	00726464 	rsbseq	r6, r2, r4, ror #8
    1308:	70646e45 	rsbvc	r6, r4, r5, asr #28
    130c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
    1310:	4f54445f 	svcmi	0x0054445f
    1314:	74535f47 	ldrbvc	r5, [r3], #-3911	; 0xf47
    1318:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    131c:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1320:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    1324:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1328:	656c4300 	strbvs	r4, [ip, #-768]!	; 0x300
    132c:	54447261 	strbpl	r7, [r4], #-609	; 0x261
    1330:	545f474f 	ldrbpl	r4, [pc], #-1871	; 1338 <__Stack_Size+0xf38>
    1334:	65530058 	ldrbvs	r0, [r3, #-88]	; 0x58
    1338:	54504574 	ldrbpl	r4, [r0], #-1396	; 0x574
    133c:	61745378 	cmnvs	r4, r8, ror r3
    1340:	00737574 	rsbseq	r7, r3, r4, ror r5
    1344:	4e704562 	cdpmi	5, 7, cr4, cr0, cr2, {3}
    1348:	53006d75 	movwpl	r6, #3445	; 0xd75
    134c:	4e457465 	cdpmi	4, 4, cr7, cr5, cr5, {3}
    1350:	494f5044 	stmdbmi	pc, {r2, r6, ip, lr}^	; <UNPREDICTABLE>
    1354:	5300544e 	movwpl	r5, #1102	; 0x44e
    1358:	50457465 	subpl	r7, r5, r5, ror #8
    135c:	64417852 	strbvs	r7, [r1], #-2130	; 0x852
    1360:	53007264 	movwpl	r7, #612	; 0x264
    1364:	50457465 	subpl	r7, r5, r5, ror #8
    1368:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    136c:	43316675 	teqmi	r1, #122683392	; 0x7500000
    1370:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1374:	52544300 	subspl	r4, r4, #0, 6
    1378:	0050485f 	subseq	r4, r0, pc, asr r8
    137c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
    1380:	505f3070 	subspl	r3, pc, r0, ror r0	; <UNPREDICTABLE>
    1384:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
    1388:	53007373 	movwpl	r7, #883	; 0x373
    138c:	52657661 	rsbpl	r7, r5, #101711872	; 0x6100000
    1390:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1394:	61530065 	cmpvs	r3, r5, rrx
    1398:	53546576 	cmppl	r4, #494927872	; 0x1d800000
    139c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    13a0:	50457700 	subpl	r7, r5, r0, lsl #14
    13a4:	006c6156 	rsbeq	r6, ip, r6, asr r1
    13a8:	5f627375 	svcpl	0x00627375
    13ac:	2f62696c 	svccs	0x0062696c
    13b0:	5f627375 	svcpl	0x00627375
    13b4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    13b8:	6e490063 	cdpvs	0, 4, cr0, cr9, cr3, {3}
    13bc:	72505f30 	subsvc	r5, r0, #48, 30	; 0xc0
    13c0:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    13c4:	754f0073 	strbvc	r0, [pc, #-115]	; 1359 <__Stack_Size+0xf59>
    13c8:	505f3074 	subspl	r3, pc, r4, ror r0	; <UNPREDICTABLE>
    13cc:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
    13d0:	45007373 	strmi	r7, [r0, #-883]	; 0x373
    13d4:	646e6950 	strbtvs	r6, [lr], #-2384	; 0x950
    13d8:	53007865 	movwpl	r7, #2149	; 0x865
    13dc:	53657661 	cmnpl	r5, #101711872	; 0x6100000
    13e0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    13e4:	62737500 	rsbsvs	r7, r3, #0, 10
    13e8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    13ec:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
    13f0:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    13f4:	00632e74 	rsbeq	r2, r3, r4, ror lr
    13f8:	65735570 	ldrbvs	r5, [r3, #-1392]!	; 0x570
    13fc:	74535f72 	ldrbvc	r5, [r3], #-3954	; 0xf72
    1400:	61646e61 	cmnvs	r4, r1, ror #28
    1404:	525f6472 	subspl	r6, pc, #1912602624	; 0x72000000
    1408:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
    140c:	00737473 	rsbseq	r7, r3, r3, ror r4
    1410:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    1414:	495f6563 	ldmdbmi	pc, {r0, r1, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    1418:	006f666e 	rsbeq	r6, pc, lr, ror #12
    141c:	5f627375 	svcpl	0x00627375
    1420:	2f62696c 	svccs	0x0062696c
    1424:	5f627375 	svcpl	0x00627375
    1428:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    142c:	4500632e 	strmi	r6, [r0, #-814]	; 0x32e
    1430:	4f50444e 	svcmi	0x0050444e
    1434:	5f544e49 	svcpl	0x00544e49
    1438:	4c415453 	cfstrdmi	mvd5, [r1], {83}	; 0x53
    143c:	6552004c 	ldrbvs	r0, [r2, #-76]	; 0x4c
    1440:	746c7573 	strbtvc	r7, [ip], #-1395	; 0x573
    1444:	736f5000 	cmnvc	pc, #0
    1448:	505f3074 	subspl	r3, pc, r4, ror r0	; <UNPREDICTABLE>
    144c:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
    1450:	44007373 	strmi	r7, [r0], #-883	; 0x373
    1454:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    1458:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    145c:	65520072 	ldrbvs	r0, [r2, #-114]	; 0x72
    1460:	76726573 			; <UNDEFINED> instruction: 0x76726573
    1464:	53006465 	movwpl	r6, #1125	; 0x465
    1468:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
    146c:	5f647261 	svcpl	0x00647261
    1470:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    1474:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1478:	61727567 	cmnvs	r2, r7, ror #10
    147c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1480:	74614400 	strbtvc	r4, [r1], #-1024	; 0x400
    1484:	61745361 	cmnvs	r4, r1, ror #6
    1488:	6e496567 	cdpvs	5, 4, cr6, cr9, cr7, {3}
    148c:	56454400 	strbpl	r4, [r5], -r0, lsl #8
    1490:	5f454349 	svcpl	0x00454349
    1494:	4f4d4552 	svcmi	0x004d4552
    1498:	575f4554 			; <UNDEFINED> instruction: 0x575f4554
    149c:	55454b41 	strbpl	r4, [r5, #-2881]	; 0xb41
    14a0:	54530050 	ldrbpl	r0, [r3], #-80	; 0x50
    14a4:	454c4c41 	strbmi	r4, [ip, #-3137]	; 0xc41
    14a8:	79540044 	ldmdbvc	r4, {r2, r6}^
    14ac:	525f6570 	subspl	r6, pc, #112, 10	; 0x1c000000
    14b0:	65006365 	strvs	r6, [r0, #-869]	; 0x365
    14b4:	5f746978 	svcpl	0x00746978
    14b8:	61446f4e 	cmpvs	r4, lr, asr #30
    14bc:	535f6174 	cmppl	pc, #116, 2
    14c0:	70757465 	rsbsvc	r7, r5, r5, ror #8
    14c4:	56770030 			; <UNDEFINED> instruction: 0x56770030
    14c8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    14cc:	45440031 	strbmi	r0, [r4, #-49]	; 0x31
    14d0:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
    14d4:	5345445f 	movtpl	r4, #21599	; 0x545f
    14d8:	50495243 	subpl	r5, r9, r3, asr #4
    14dc:	00524f54 	subseq	r4, r2, r4, asr pc
    14e0:	49525453 	ldmdbmi	r2, {r0, r1, r4, r6, sl, ip, lr}^
    14e4:	445f474e 	ldrbmi	r4, [pc], #-1870	; 14ec <__Stack_Size+0x10ec>
    14e8:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    14ec:	4f545049 	svcmi	0x00545049
    14f0:	73550052 	cmpvc	r5, #82	; 0x52
    14f4:	6f547265 	svcvs	0x00547265
    14f8:	42414d50 	submi	r4, r1, #80, 26	; 0x1400
    14fc:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    1500:	706f4372 	rsbvc	r4, pc, r2, ror r3	; <UNPREDICTABLE>
    1504:	61730079 	cmnvs	r3, r9, ror r0
    1508:	725f6576 	subsvc	r6, pc, #494927872	; 0x1d800000
    150c:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    1510:	4c006874 	stcmi	8, cr6, [r0], {116}	; 0x74
    1514:	5f545341 	svcpl	0x00545341
    1518:	445f4e49 	ldrbmi	r4, [pc], #-3657	; 1520 <__Stack_Size+0x1120>
    151c:	00415441 	subeq	r5, r1, r1, asr #8
    1520:	5f504f4e 	svcpl	0x00504f4e
    1524:	636f7250 	cmnvs	pc, #80, 4
    1528:	00737365 	rsbseq	r7, r3, r5, ror #6
    152c:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    1530:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    1534:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    1538:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    153c:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    1540:	78450065 	stmdavc	r5, {r0, r2, r5, r6}^
    1544:	74636570 	strbtvc	r6, [r3], #-1392	; 0x570
    1548:	6174535f 	cmnvs	r4, pc, asr r3
    154c:	5f737574 	svcpl	0x00737574
    1550:	0074754f 	rsbseq	r7, r4, pc, asr #10
    1554:	53554150 	cmppl	r5, #80, 2
    1558:	65520045 	ldrbvs	r0, [r2, #-69]	; 0x45
    155c:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    1560:	006f4e74 	rsbeq	r4, pc, r4, ror lr	; <UNPREDICTABLE>
    1564:	5f544547 	svcpl	0x00544547
    1568:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xe49
    156c:	43414652 	movtmi	r4, #5714	; 0x1652
    1570:	74530045 	ldrbvc	r0, [r3], #-69	; 0x45
    1574:	61646e61 	cmnvs	r4, r1, ror #28
    1578:	535f6472 	cmppl	pc, #1912602624	; 0x72000000
    157c:	6e457465 	cdpvs	4, 4, cr7, cr5, cr5, {3}
    1580:	696f5064 	stmdbvs	pc!, {r2, r5, r6, ip, lr}^	; <UNPREDICTABLE>
    1584:	6546746e 	strbvs	r7, [r6, #-1134]	; 0x46e
    1588:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    158c:	45470065 	strbmi	r0, [r7, #-101]	; 0x65
    1590:	54535f54 	ldrbpl	r5, [r3], #-3924	; 0xf54
    1594:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    1598:	54455300 	strbpl	r5, [r5], #-768	; 0x300
    159c:	4145465f 	cmpmi	r5, pc, asr r6
    15a0:	45525554 	ldrbmi	r5, [r2, #-1364]	; 0x554
    15a4:	74614400 	strbtvc	r4, [r1], #-1024	; 0x400
    15a8:	754d5f61 	strbvc	r5, [sp, #-3937]	; 0xf61
    15ac:	614d5f6c 	cmpvs	sp, ip, ror #30
    15b0:	63615078 	cmnvs	r1, #120	; 0x78
    15b4:	5374656b 	cmnpl	r4, #448790528	; 0x1ac00000
    15b8:	00657a69 	rsbeq	r7, r5, r9, ror #20
    15bc:	76654470 			; <UNDEFINED> instruction: 0x76654470
    15c0:	61745300 	cmnvs	r4, r0, lsl #6
    15c4:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    15c8:	65535f64 	ldrbvs	r5, [r3, #-3940]	; 0xf64
    15cc:	76654474 			; <UNDEFINED> instruction: 0x76654474
    15d0:	46656369 	strbtmi	r6, [r5], -r9, ror #6
    15d4:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0x165
    15d8:	70006572 	andvc	r6, r0, r2, ror r5
    15dc:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
    15e0:	4e595300 	cdpmi	3, 5, cr5, cr9, cr0, {0}
    15e4:	465f4843 	ldrbmi	r4, [pc], -r3, asr #16
    15e8:	454d4152 	strbmi	r4, [sp, #-338]	; 0x152
    15ec:	61745300 	cmnvs	r4, r0, lsl #6
    15f0:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    15f4:	65475f64 	strbvs	r5, [r7, #-3940]	; 0xf64
    15f8:	746e4974 	strbtvc	r4, [lr], #-2420	; 0x974
    15fc:	61667265 	cmnvs	r6, r5, ror #4
    1600:	53006563 	movwpl	r6, #1379	; 0x563
    1604:	445f5445 	ldrbmi	r5, [pc], #-1093	; 160c <__Stack_Size+0x120c>
    1608:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    160c:	4f545049 	svcmi	0x00545049
    1610:	45530052 	ldrbmi	r0, [r3, #-82]	; 0x52
    1614:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    1618:	46524554 			; <UNDEFINED> instruction: 0x46524554
    161c:	00454341 	subeq	r4, r5, r1, asr #6
    1620:	4145465f 	cmpmi	r5, pc, asr r6
    1624:	45525554 	ldrbmi	r5, [r2, #-1364]	; 0x554
    1628:	4c45535f 	mcrrmi	3, 5, r5, r5, cr15
    162c:	4f544345 	svcmi	0x00544345
    1630:	74530052 	ldrbvc	r0, [r3], #-82	; 0x52
    1634:	61646e61 	cmnvs	r4, r1, ror #28
    1638:	475f6472 			; <UNDEFINED> instruction: 0x475f6472
    163c:	6f437465 	svcvs	0x00437465
    1640:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1644:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
    1648:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    164c:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    1650:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    1654:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    1658:	65467261 	strbvs	r7, [r6, #-609]	; 0x261
    165c:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    1660:	45470065 	strbmi	r0, [r7, #-101]	; 0x65
    1664:	4f435f54 	svcmi	0x00435f54
    1668:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
    166c:	54415255 	strbpl	r5, [r1], #-597	; 0x255
    1670:	004e4f49 	subeq	r4, lr, r9, asr #30
    1674:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
    1678:	4c4f5254 	sfmmi	f5, 2, [pc], {84}	; 0x54
    167c:	4154535f 	cmpmi	r4, pc, asr r3
    1680:	5f004554 	svcpl	0x00004554
    1684:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    1688:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
    168c:	545f524f 	ldrbpl	r5, [pc], #-591	; 1694 <__Stack_Size+0x1294>
    1690:	00455059 	subeq	r5, r5, r9, asr r0
    1694:	54544553 	ldrbpl	r4, [r4], #-1363	; 0x553
    1698:	5f474e49 	svcpl	0x00474e49
    169c:	50005055 	andpl	r5, r0, r5, asr r0
    16a0:	6f54414d 	svcvs	0x0054414d
    16a4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    16a8:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    16ac:	6f437265 	svcvs	0x00437265
    16b0:	53007970 	movwpl	r7, #2416	; 0x970
    16b4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    16b8:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
    16bc:	41525547 	cmpmi	r2, r7, asr #10
    16c0:	4e4f4954 	mcrmi	9, 2, r4, cr15, cr4, {2}
    16c4:	49415700 	stmdbmi	r1, {r8, r9, sl, ip, lr}^
    16c8:	54535f54 	ldrbpl	r5, [r3], #-3924	; 0xf54
    16cc:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    16d0:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xf5f
    16d4:	544f5400 	strbpl	r5, [pc], #-1024	; 16dc <__Stack_Size+0x12dc>
    16d8:	735f4c41 	cmpvc	pc, #16640	; 0x4100
    16dc:	55514552 	ldrbpl	r4, [r1, #-1362]	; 0x552
    16e0:	00545345 	subseq	r5, r4, r5, asr #6
    16e4:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xe49
    16e8:	43414652 	movtmi	r4, #5714	; 0x1652
    16ec:	45445f45 	strbmi	r5, [r4, #-3909]	; 0xf45
    16f0:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    16f4:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    16f8:	76617300 	strbtvc	r7, [r1], -r0, lsl #6
    16fc:	4c775f65 	ldclmi	15, cr5, [r7], #-404	; 0xfffffe6c
    1700:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    1704:	74530068 	ldrbvc	r0, [r3], #-104	; 0x68
    1708:	61646e61 	cmnvs	r4, r1, ror #28
    170c:	475f6472 			; <UNDEFINED> instruction: 0x475f6472
    1710:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465
    1714:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1718:	444e4500 	strbmi	r4, [lr], #-1280	; 0x500
    171c:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
    1720:	45445f54 	strbmi	r5, [r4, #-3924]	; 0xf54
    1724:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    1728:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    172c:	4e4f4300 	cdpmi	3, 4, cr4, cr15, cr0, {0}
    1730:	5f474946 	svcpl	0x00474946
    1734:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    1738:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
    173c:	7000524f 	andvc	r5, r0, pc, asr #4
    1740:	6e695045 	cdpvs	0, 6, cr5, cr9, cr5, {2}
    1744:	53006f66 	movwpl	r6, #3942	; 0xf66
    1748:	415f5445 	cmpmi	pc, r5, asr #8
    174c:	45524444 	ldrbmi	r4, [r2, #-1092]	; 0x444
    1750:	52005353 	andpl	r5, r0, #1275068417	; 0x4c000001
    1754:	74616c65 	strbtvc	r6, [r1], #-3173	; 0xc65
    1758:	455f6465 	ldrbmi	r6, [pc, #-1125]	; 12fb <__Stack_Size+0xefb>
    175c:	6f70646e 	svcvs	0x0070646e
    1760:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1764:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1768:	6e497375 	mcrvs	3, 2, r7, cr9, cr5, {3}
    176c:	77006f66 	strvc	r6, [r0, -r6, ror #30]
    1770:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xe49
    1774:	47003078 	smlsdxmi	r0, r8, r0, r3
    1778:	445f5445 	ldrbmi	r5, [pc], #-1093	; 1780 <__Stack_Size+0x1380>
    177c:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    1780:	4f545049 	svcmi	0x00545049
    1784:	61440052 	qdaddvs	r0, r2, r4
    1788:	74536174 	ldrbvc	r6, [r3], #-372	; 0x174
    178c:	4f656761 	svcmi	0x00656761
    1790:	57007475 	smlsdxpl	r0, r5, r4, r7
    1794:	5f544941 	svcpl	0x00544941
    1798:	55544553 	ldrbpl	r4, [r4, #-1363]	; 0x553
    179c:	65520050 	ldrbvs	r0, [r2, #-80]	; 0x50
    17a0:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    17a4:	6f4e5f74 	svcvs	0x004e5f74
    17a8:	75427000 	strbvc	r7, [r2, #-0]
    17ac:	41570066 	cmpmi	r7, r6, rrx
    17b0:	535f5449 	cmppl	pc, #1224736768	; 0x49000000
    17b4:	55544154 	ldrbpl	r4, [r4, #-340]	; 0x154
    17b8:	4e495f53 	mcrmi	15, 2, r5, cr9, cr3, {2}
    17bc:	454c4300 	strbmi	r4, [ip, #-768]	; 0x300
    17c0:	465f5241 	ldrbmi	r5, [pc], -r1, asr #4
    17c4:	55544145 	ldrbpl	r4, [r4, #-325]	; 0x145
    17c8:	4c004552 	cfstr32mi	mvfx4, [r0], {82}	; 0x52
    17cc:	5f545341 	svcpl	0x00545341
    17d0:	5f54554f 	svcpl	0x0054554f
    17d4:	41544144 	cmpmi	r4, r4, asr #2
    17d8:	62737500 	rsbsvs	r7, r3, #0, 10
    17dc:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    17e0:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
    17e4:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
    17e8:	7700632e 	strvc	r6, [r0, -lr, lsr #6]
    17ec:	7479424e 	ldrbtvc	r4, [r9], #-590	; 0x24e
    17f0:	70007365 	andvc	r7, r0, r5, ror #6
    17f4:	72735562 	rsbsvc	r5, r3, #411041792	; 0x18800000
    17f8:	00667542 	rsbeq	r7, r6, r2, asr #10
    17fc:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1800:	65740031 	ldrbvs	r0, [r4, #-49]!	; 0x31
    1804:	0032706d 	eorseq	r7, r2, sp, rrx
    1808:	414d5077 	hvcmi	54535	; 0xd507
    180c:	41667542 	cmnmi	r6, r2, asr #10
    1810:	00726464 	rsbseq	r6, r2, r4, ror #8
    1814:	56776470 			; <UNDEFINED> instruction: 0x56776470
    1818:	Address 0x0000000000001818 is out of bounds.


Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	08000142 	stmdaeq	r0, {r1, r6, r8}
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	0800014a 	stmdaeq	r0, {r1, r3, r6, r8}
       8:	4a500001 	bmi	1400014 <__Stack_Size+0x13ffc14>
       c:	4c080001 	stcmi	0, cr0, [r8], {1}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	04080001 	streq	r0, [r8], #-1
      14:	5001f300 	andpl	pc, r1, r0, lsl #6
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      1c:	00000000 	andeq	r0, r0, r0
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	0001bc00 	andeq	fp, r1, r0, lsl #24
      24:	0001c008 	andeq	ip, r1, r8
      28:	71000508 	tstvc	r0, r8, lsl #10
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	9f274000 	svcls	0x00274000
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	080001c0 	stmdaeq	r0, {r6, r7, r8}
      34:	080001c4 	stmdaeq	r0, {r2, r6, r7, r8}
      38:	00710007 	rsbseq	r0, r1, r7

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	27402740 	strbcs	r2, [r0, -r0, asr #14]

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	0001c49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	0001c608 	andeq	ip, r1, r8, lsl #12
      48:	73000808 	movwvc	r0, #2056	; 0x808
      4c:	27400600 	strbcs	r0, [r0, -r0, lsl #12]

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	c69f2740 	ldrgt	r2, [pc], r0, asr #14
      54:	e5080001 	str	r0, [r8, #-1]
      58:	0b080001 	bleq	200064 <__Stack_Size+0x1ffc64>
      5c:	5c000c00 	stcpl	12, cr0, [r0], {-0}
      60:	40064000 	andmi	r4, r6, r0
      64:	9f274027 	svcls	0x00274027
	...
      70:	08000228 	stmdaeq	r0, {r3, r5, r9}
      74:	0800023f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r9}
      78:	3f500001 	svccc	0x00500001
      7c:	88080002 	stmdahi	r8, {r1}
      80:	04080002 	streq	r0, [r8], #-2
      84:	5001f300 	andpl	pc, r1, r0, lsl #6
      88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      8c:	00000000 	andeq	r0, r0, r0
      90:	00022800 	andeq	r2, r2, r0, lsl #16
      94:	00025208 	andeq	r5, r2, r8, lsl #4
      98:	30000208 	andcc	r0, r0, r8, lsl #4
      9c:	00025a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
      a0:	00026008 	andeq	r6, r2, r8
      a4:	30000208 	andcc	r0, r0, r8, lsl #4
      a8:	0002609f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
      ac:	00026b08 	andeq	r6, r2, r8, lsl #22
      b0:	53000108 	movwpl	r0, #264	; 0x108
      b4:	08000270 	stmdaeq	r0, {r4, r5, r6, r9}
      b8:	08000288 	stmdaeq	r0, {r3, r7, r9}
      bc:	9f300002 	svcls	0x00300002
	...
      c8:	08000288 	stmdaeq	r0, {r3, r7, r9}
      cc:	0800028d 	stmdaeq	r0, {r0, r2, r3, r7, r9}
      d0:	8d500001 	ldclhi	0, cr0, [r0, #-4]
      d4:	94080002 	strls	r0, [r8], #-2
      d8:	04080002 	streq	r0, [r8], #-2
      dc:	5001f300 	andpl	pc, r1, r0, lsl #6
      e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      e4:	00000000 	andeq	r0, r0, r0
      e8:	00029400 	andeq	r9, r2, r0, lsl #8
      ec:	00029908 	andeq	r9, r2, r8, lsl #18
      f0:	50000108 	andpl	r0, r0, r8, lsl #2
      f4:	08000299 	stmdaeq	r0, {r0, r3, r4, r7, r9}
      f8:	080002a0 	stmdaeq	r0, {r5, r7, r9}
      fc:	01f30004 	mvnseq	r0, r4
     100:	00009f50 	andeq	r9, r0, r0, asr pc
     104:	00000000 	andeq	r0, r0, r0
     108:	02a00000 	adceq	r0, r0, #0
     10c:	02b30800 	adcseq	r0, r3, #0, 16
     110:	00010800 	andeq	r0, r1, r0, lsl #16
     114:	0002b350 	andeq	fp, r2, r0, asr r3
     118:	0002b408 	andeq	fp, r2, r8, lsl #8
     11c:	f3000408 	vshl.u8	d0, d8, d0
     120:	b49f5001 	ldrlt	r5, [pc], #1	; 128 <_Minimum_Stack_Size+0x28>
     124:	b6080002 	strlt	r0, [r8], -r2
     128:	01080002 	tsteq	r8, r2
     12c:	02b65000 	adcseq	r5, r6, #0
     130:	02c00800 	sbceq	r0, r0, #0, 16
     134:	00040800 	andeq	r0, r4, r0, lsl #16
     138:	9f5001f3 	svcls	0x005001f3
	...
     144:	080002c0 	stmdaeq	r0, {r6, r7, r9}
     148:	080002c5 	stmdaeq	r0, {r0, r2, r6, r7, r9}
     14c:	c5500001 	ldrbgt	r0, [r0, #-1]
     150:	cc080002 	stcgt	0, cr0, [r8], {2}
     154:	04080002 	streq	r0, [r8], #-2
     158:	5001f300 	andpl	pc, r1, r0, lsl #6
     15c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     160:	00000000 	andeq	r0, r0, r0
     164:	0002cc00 	andeq	ip, r2, r0, lsl #24
     168:	0002df08 	andeq	sp, r2, r8, lsl #30
     16c:	50000108 	andpl	r0, r0, r8, lsl #2
     170:	080002df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r9}
     174:	080002ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9}
     178:	01f30004 	mvnseq	r0, r4
     17c:	02ea9f50 	rsceq	r9, sl, #80, 30	; 0x140
     180:	02ec0800 	rsceq	r0, ip, #0, 16
     184:	00010800 	andeq	r0, r1, r0, lsl #16
     188:	0002ec50 	andeq	lr, r2, r0, asr ip
     18c:	0002f408 	andeq	pc, r2, r8, lsl #8
     190:	f3000408 	vshl.u8	d0, d8, d0
     194:	009f5001 	addseq	r5, pc, r1
     198:	00000000 	andeq	r0, r0, r0
     19c:	dc000000 	stcle	0, cr0, [r0], {-0}
     1a0:	ea080002 	b	2001b0 <__Stack_Size+0x1ffdb0>
     1a4:	04080002 	streq	r0, [r8], #-2
     1a8:	5001f300 	andpl	pc, r1, r0, lsl #6
     1ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     1b0:	00000000 	andeq	r0, r0, r0
     1b4:	00037600 	andeq	r7, r3, r0, lsl #12
     1b8:	00037a08 	andeq	r7, r3, r8, lsl #20
     1bc:	72000508 	andvc	r0, r0, #8, 10	; 0x2000000
     1c0:	9f213c00 	svcls	0x00213c00
	...
     1cc:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
     1d0:	080003c1 	stmdaeq	r0, {r0, r6, r7, r8, r9}
     1d4:	c1500001 	cmpgt	r0, r1
     1d8:	c4080003 	strgt	r0, [r8], #-3
     1dc:	04080003 	streq	r0, [r8], #-3
     1e0:	5001f300 	andpl	pc, r1, r0, lsl #6
     1e4:	0003c49f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
     1e8:	0003c708 	andeq	ip, r3, r8, lsl #14
     1ec:	50000108 	andpl	r0, r0, r8, lsl #2
     1f0:	080003c7 	stmdaeq	r0, {r0, r1, r2, r6, r7, r8, r9}
     1f4:	080003cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9}
     1f8:	01f30004 	mvnseq	r0, r4
     1fc:	03cc9f50 	biceq	r9, ip, #80, 30	; 0x140
     200:	041a0800 	ldreq	r0, [sl], #-2048	; 0x800
     204:	00010800 	andeq	r0, r1, r0, lsl #16
     208:	00041a50 	andeq	r1, r4, r0, asr sl
     20c:	00042808 	andeq	r2, r4, r8, lsl #16
     210:	f3000408 	vshl.u8	d0, d8, d0
     214:	009f5001 	addseq	r5, pc, r1
     218:	00000000 	andeq	r0, r0, r0
     21c:	ea000000 	b	224 <_Minimum_Stack_Size+0x124>
     220:	ee080003 	cdp	0, 0, cr0, cr8, cr3, {0}
     224:	05080003 	streq	r0, [r8, #-3]
     228:	40007200 	andmi	r7, r0, r0, lsl #4
     22c:	040e9f21 	streq	r9, [lr], #-3873	; 0xf21
     230:	04140800 	ldreq	r0, [r4], #-2048	; 0x800
     234:	00060800 	andeq	r0, r6, r0, lsl #16
     238:	ef090071 	svc	0x00090071
     23c:	00009f1a 	andeq	r9, r0, sl, lsl pc
     240:	00000000 	andeq	r0, r0, r0
     244:	05ac0000 	streq	r0, [ip, #0]!
     248:	05f80800 	ldrbeq	r0, [r8, #2048]!	; 0x800
     24c:	00020800 	andeq	r0, r2, r0, lsl #16
     250:	00009f30 	andeq	r9, r0, r0, lsr pc
     254:	00000000 	andeq	r0, r0, r0
     258:	05ac0000 	streq	r0, [ip, #0]!
     25c:	05ce0800 	strbeq	r0, [lr, #2048]	; 0x800
     260:	00020800 	andeq	r0, r2, r0, lsl #16
     264:	05ce9f30 	strbeq	r9, [lr, #3888]	; 0xf30
     268:	05ea0800 	strbeq	r0, [sl, #2048]!	; 0x800
     26c:	00020800 	andeq	r0, r2, r0, lsl #16
     270:	05f89f31 	ldrbeq	r9, [r8, #3889]!	; 0xf31
     274:	06240800 	strteq	r0, [r4], -r0, lsl #16
     278:	00020800 	andeq	r0, r2, r0, lsl #16
     27c:	00009f31 	andeq	r9, r0, r1, lsr pc
     280:	00000000 	andeq	r0, r0, r0
     284:	06240000 	strteq	r0, [r4], -r0
     288:	062a0800 	strteq	r0, [sl], -r0, lsl #16
     28c:	00010800 	andeq	r0, r1, r0, lsl #16
     290:	00062a51 	andeq	r2, r6, r1, asr sl
     294:	00063a08 	andeq	r3, r6, r8, lsl #20
     298:	f3000408 	vshl.u8	d0, d8, d0
     29c:	009f5101 	addseq	r5, pc, r1, lsl #2
     2a0:	00000000 	andeq	r0, r0, r0
     2a4:	24000000 	strcs	r0, [r0], #-0
     2a8:	24080006 	strcs	r0, [r8], #-6
     2ac:	01080006 	tsteq	r8, r6
     2b0:	06245200 	strteq	r5, [r4], -r0, lsl #4
     2b4:	062e0800 	strteq	r0, [lr], -r0, lsl #16
     2b8:	00070800 	andeq	r0, r7, r0, lsl #16
     2bc:	24480072 	strbcs	r0, [r8], #-114	; 0x72
     2c0:	2e9f2930 	mrccs	9, 4, r2, cr15, cr0, {1}
     2c4:	3a080006 	bcc	2002e4 <__Stack_Size+0x1ffee4>
     2c8:	08080006 	stmdaeq	r8, {r1, r2}
     2cc:	5201f300 	andpl	pc, r1, #0, 6
     2d0:	29302448 	ldmdbcs	r0!, {r3, r6, sl, sp}
     2d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     2e4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     2f0:	01f30004 	mvnseq	r0, r4
     2f4:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     304:	00010000 	andeq	r0, r1, r0
     308:	00000051 	andeq	r0, r0, r1, asr r0
     30c:	00000000 	andeq	r0, r0, r0
     310:	f3000400 	vshl.u8	d0, d0, d0
     314:	009f5101 	addseq	r5, pc, r1, lsl #2
     318:	00000000 	andeq	r0, r0, r0
     31c:	3c000000 	stccc	0, cr0, [r0], {-0}
     320:	40080006 	andmi	r0, r8, r6
     324:	02080006 	andeq	r0, r8, #6
     328:	409f3000 	addsmi	r3, pc, r0
     32c:	44080006 	strmi	r0, [r8], #-6
     330:	08080006 	stmdaeq	r8, {r1, r2}
     334:	08007000 	stmdaeq	r0, {ip, sp, lr}
     338:	2e301a80 	vaddcs.f32	s2, s1, s0
     33c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     34c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     358:	00580001 	subseq	r0, r8, r1
	...
     368:	01000000 	mrseq	r0, (UNDEF: 0)
     36c:	00005100 	andeq	r5, r0, r0, lsl #2
     370:	00000000 	andeq	r0, r0, r0
     374:	00040000 	andeq	r0, r4, r0
     378:	9f5101f3 	svcls	0x005101f3
	...
     38c:	00520001 	subseq	r0, r2, r1
     390:	00000000 	andeq	r0, r0, r0
     394:	04000000 	streq	r0, [r0], #-0
     398:	5201f300 	andpl	pc, r1, #0, 6
     39c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     3a0:	00000000 	andeq	r0, r0, r0
     3a4:	74000300 	strvc	r0, [r0], #-768	; 0x300
     3a8:	00009f7f 	andeq	r9, r0, pc, ror pc
     3ac:	00000000 	andeq	r0, r0, r0
     3b0:	00030000 	andeq	r0, r3, r0
     3b4:	009f0074 	addseq	r0, pc, r4, ror r0	; <UNPREDICTABLE>
     3b8:	00000000 	andeq	r0, r0, r0
     3bc:	03000000 	movweq	r0, #0
     3c0:	9f7f7400 	svcls	0x007f7400
	...
     3d4:	00530001 	subseq	r0, r3, r1
     3d8:	00000000 	andeq	r0, r0, r0
     3dc:	01000000 	mrseq	r0, (UNDEF: 0)
     3e0:	00005600 	andeq	r5, r0, r0, lsl #12
	...
     3f0:	00010000 	andeq	r0, r1, r0
     3f4:	00000055 	andeq	r0, r0, r5, asr r0
     3f8:	00000000 	andeq	r0, r0, r0
     3fc:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     408:	00550001 	subseq	r0, r5, r1
     40c:	00000000 	andeq	r0, r0, r0
     410:	16000000 	strne	r0, [r0], -r0
     414:	1c080007 	stcne	0, cr0, [r8], {7}
     418:	01080007 	tsteq	r8, r7
     41c:	00005200 	andeq	r5, r0, r0, lsl #4
     420:	00000000 	andeq	r0, r0, r0
     424:	07280000 	streq	r0, [r8, -r0]!
     428:	072c0800 	streq	r0, [ip, -r0, lsl #16]!
     42c:	00010800 	andeq	r0, r1, r0, lsl #16
     430:	00072c50 	andeq	r2, r7, r0, asr ip
     434:	00073c08 	andeq	r3, r7, r8, lsl #24
     438:	f3000408 	vshl.u8	d0, d8, d0
     43c:	009f5001 	addseq	r5, pc, r1
     440:	00000000 	andeq	r0, r0, r0
     444:	2a000000 	bcs	44c <__Stack_Size+0x4c>
     448:	32080007 	andcc	r0, r8, #7
     44c:	01080007 	tsteq	r8, r7
     450:	00005300 	andeq	r5, r0, r0, lsl #6
     454:	00000000 	andeq	r0, r0, r0
     458:	073c0000 	ldreq	r0, [ip, -r0]!
     45c:	074b0800 	strbeq	r0, [fp, -r0, lsl #16]
     460:	00010800 	andeq	r0, r1, r0, lsl #16
     464:	00074b50 	andeq	r4, r7, r0, asr fp
     468:	00075408 	andeq	r5, r7, r8, lsl #8
     46c:	f3000408 	vshl.u8	d0, d8, d0
     470:	009f5001 	addseq	r5, pc, r1
     474:	00000000 	andeq	r0, r0, r0
     478:	42000000 	andmi	r0, r0, #0
     47c:	4b080007 	blmi	2004a0 <__Stack_Size+0x2000a0>
     480:	01080007 	tsteq	r8, r7
     484:	00005300 	andeq	r5, r0, r0, lsl #6
     488:	00000000 	andeq	r0, r0, r0
     48c:	07800000 	streq	r0, [r0, r0]
     490:	07ae0800 	streq	r0, [lr, r0, lsl #16]!
     494:	00020800 	andeq	r0, r2, r0, lsl #16
     498:	07ae9f30 			; <UNDEFINED> instruction: 0x07ae9f30
     49c:	07bc0800 	ldreq	r0, [ip, r0, lsl #16]!
     4a0:	00010800 	andeq	r0, r1, r0, lsl #16
     4a4:	00000054 	andeq	r0, r0, r4, asr r0
     4a8:	00000000 	andeq	r0, r0, r0
     4ac:	0007c800 	andeq	ip, r7, r0, lsl #16
     4b0:	0007d608 	andeq	sp, r7, r8, lsl #12
     4b4:	30000208 	andcc	r0, r0, r8, lsl #4
     4b8:	0007d69f 	muleq	r7, pc, r6	; <UNPREDICTABLE>
     4bc:	0007de08 	andeq	sp, r7, r8, lsl #28
     4c0:	53000108 	movwpl	r0, #264	; 0x108
     4c4:	080007de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl}
     4c8:	080007ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, sl}
     4cc:	ea520001 	b	14804d8 <__Stack_Size+0x14800d8>
     4d0:	0c080007 	stceq	0, cr0, [r8], {7}
     4d4:	01080008 	tsteq	r8, r8
     4d8:	080c5400 	stmdaeq	ip, {sl, ip, lr}
     4dc:	080e0800 	stmdaeq	lr, {fp}
     4e0:	00060800 	andeq	r0, r6, r0, lsl #16
     4e4:	00720074 	rsbseq	r0, r2, r4, ror r0
     4e8:	080e9f1a 	stmdaeq	lr, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
     4ec:	08100800 	ldmdaeq	r0, {fp}
     4f0:	00010800 	andeq	r0, r1, r0, lsl #16
     4f4:	00081052 	andeq	r1, r8, r2, asr r0
     4f8:	00081408 	andeq	r1, r8, r8, lsl #8
     4fc:	08001208 	stmdaeq	r0, {r3, r9, ip}
     500:	940070ff 	strls	r7, [r0], #-255	; 0xff
     504:	081a3301 	ldmdaeq	sl, {r0, r8, r9, ip, sp}
     508:	24331aff 	ldrtcs	r1, [r3], #-2815	; 0xaff
     50c:	1a007424 	bne	1d5a4 <__Stack_Size+0x1d1a4>
     510:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     514:	00000000 	andeq	r0, r0, r0
     518:	0007c800 	andeq	ip, r7, r0, lsl #16
     51c:	00080808 	andeq	r0, r8, r8, lsl #16
     520:	30000208 	andcc	r0, r0, r8, lsl #4
     524:	0008089f 	muleq	r8, pc, r8	; <UNPREDICTABLE>
     528:	00080c08 	andeq	r0, r8, r8, lsl #24
     52c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     530:	0800080c 	stmdaeq	r0, {r2, r3, fp}
     534:	08000810 	stmdaeq	r0, {r4, fp}
     538:	10510001 	subsne	r0, r1, r1
     53c:	18080008 	stmdane	r8, {r3}
     540:	01080008 	tsteq	r8, r8
     544:	00005200 	andeq	r5, r0, r0, lsl #4
     548:	00000000 	andeq	r0, r0, r0
     54c:	07c80000 	strbeq	r0, [r8, r0]
     550:	08080800 	stmdaeq	r8, {fp}
     554:	00020800 	andeq	r0, r2, r0, lsl #16
     558:	08089f30 	stmdaeq	r8, {r4, r5, r8, r9, sl, fp, ip, pc}
     55c:	080e0800 	stmdaeq	lr, {fp}
     560:	00010800 	andeq	r0, r1, r0, lsl #16
     564:	00080e52 	andeq	r0, r8, r2, asr lr
     568:	00081408 	andeq	r1, r8, r8, lsl #8
     56c:	08000f08 	stmdaeq	r0, {r3, r8, r9, sl, fp}
     570:	940070ff 	strls	r7, [r0], #-255	; 0xff
     574:	081a3301 	ldmdaeq	sl, {r0, r8, r9, ip, sp}
     578:	24331aff 	ldrtcs	r1, [r3], #-2815	; 0xaff
     57c:	00009f24 	andeq	r9, r0, r4, lsr #30
     580:	00000000 	andeq	r0, r0, r0
     584:	07c80000 	strbeq	r0, [r8, r0]
     588:	07d60800 	ldrbeq	r0, [r6, r0, lsl #16]
     58c:	00020800 	andeq	r0, r2, r0, lsl #16
     590:	07d69f30 			; <UNDEFINED> instruction: 0x07d69f30
     594:	07da0800 	ldrbeq	r0, [sl, r0, lsl #16]
     598:	00050800 	andeq	r0, r5, r0, lsl #16
     59c:	1c007334 	stcne	3, cr7, [r0], {52}	; 0x34
     5a0:	0007da9f 	muleq	r7, pc, sl	; <UNPREDICTABLE>
     5a4:	0007de08 	andeq	sp, r7, r8, lsl #28
     5a8:	52000108 	andpl	r0, r0, #8, 2
     5ac:	080007de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl}
     5b0:	080007e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl}
     5b4:	73340005 	teqvc	r4, #5
     5b8:	009f1c00 	addseq	r1, pc, r0, lsl #24
     5bc:	00000000 	andeq	r0, r0, r0
     5c0:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     5c4:	d6080007 	strle	r0, [r8], -r7
     5c8:	02080007 	andeq	r0, r8, #7
     5cc:	d69f3f00 	ldrle	r3, [pc], r0, lsl #30
     5d0:	e2080007 	and	r0, r8, #7
     5d4:	05080007 	streq	r0, [r8, #-7]
     5d8:	00733f00 	rsbseq	r3, r3, r0, lsl #30
     5dc:	07e29f25 	strbeq	r9, [r2, r5, lsr #30]!
     5e0:	07e80800 	strbeq	r0, [r8, r0, lsl #16]!
     5e4:	00010800 	andeq	r0, r1, r0, lsl #16
     5e8:	00000054 	andeq	r0, r0, r4, asr r0
     5ec:	00000000 	andeq	r0, r0, r0
     5f0:	00085800 	andeq	r5, r8, r0, lsl #16
     5f4:	00086508 	andeq	r6, r8, r8, lsl #10
     5f8:	50000108 	andpl	r0, r0, r8, lsl #2
     5fc:	08000865 	stmdaeq	r0, {r0, r2, r5, r6, fp}
     600:	08000878 	stmdaeq	r0, {r3, r4, r5, r6, fp}
     604:	78540001 	ldmdavc	r4, {r0}^
     608:	7b080008 	blvc	200630 <__Stack_Size+0x200230>
     60c:	01080008 	tsteq	r8, r8
     610:	087b5000 	ldmdaeq	fp!, {ip, lr}^
     614:	08800800 	stmeq	r0, {fp}
     618:	00040800 	andeq	r0, r4, r0, lsl #16
     61c:	9f5001f3 	svcls	0x005001f3
	...
     628:	08000894 	stmdaeq	r0, {r2, r4, r7, fp}
     62c:	080008bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp}
     630:	bc500001 	mrrclt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     634:	c8080008 	stmdagt	r8, {r3}
     638:	04080008 	streq	r0, [r8], #-8
     63c:	5001f300 	andpl	pc, r1, r0, lsl #6
     640:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     644:	00000000 	andeq	r0, r0, r0
     648:	00089a00 	andeq	r9, r8, r0, lsl #20
     64c:	0008b808 	andeq	fp, r8, r8, lsl #16
     650:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
     654:	0008b89f 	muleq	r8, pc, r8	; <UNPREDICTABLE>
     658:	0008c808 	andeq	ip, r8, r8, lsl #16
     65c:	30000208 	andcc	r0, r0, r8, lsl #4
     660:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     670:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     67c:	00550001 	subseq	r0, r5, r1
     680:	00000000 	andeq	r0, r0, r0
     684:	04000000 	streq	r0, [r0], #-0
     688:	5001f300 	andpl	pc, r1, r0, lsl #6
     68c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     69c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     6a8:	01f30004 	mvnseq	r0, r4
     6ac:	00009f51 	andeq	r9, r0, r1, asr pc
     6b0:	00000000 	andeq	r0, r0, r0
     6b4:	00010000 	andeq	r0, r1, r0
     6b8:	00000054 	andeq	r0, r0, r4, asr r0
     6bc:	00000000 	andeq	r0, r0, r0
     6c0:	74000300 	strvc	r0, [r0], #-768	; 0x300
     6c4:	00009f01 	andeq	r9, r0, r1, lsl #30
     6c8:	00000000 	andeq	r0, r0, r0
     6cc:	00010000 	andeq	r0, r1, r0
     6d0:	00000054 	andeq	r0, r0, r4, asr r0
     6d4:	00000000 	andeq	r0, r0, r0
     6d8:	0008c800 	andeq	ip, r8, r0, lsl #16
     6dc:	00090208 	andeq	r0, r9, r8, lsl #4
     6e0:	50000108 	andpl	r0, r0, r8, lsl #2
     6e4:	08000902 	stmdaeq	r0, {r1, r8, fp}
     6e8:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
     6ec:	01f30004 	mvnseq	r0, r4
     6f0:	00009f50 	andeq	r9, r0, r0, asr pc
     6f4:	00000000 	andeq	r0, r0, r0
     6f8:	08d80000 	ldmeq	r8, {}^	; <UNPREDICTABLE>
     6fc:	08fe0800 	ldmeq	lr!, {fp}^
     700:	00010800 	andeq	r0, r1, r0, lsl #16
     704:	0008fe54 	andeq	pc, r8, r4, asr lr	; <UNPREDICTABLE>
     708:	00091408 	andeq	r1, r9, r8, lsl #8
     70c:	52000108 	andpl	r0, r0, #8, 2
	...
     718:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
     71c:	0800093e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, fp}
     720:	3e500001 	cdpcc	0, 5, cr0, cr0, cr1, {0}
     724:	42080009 	andmi	r0, r8, #9
     728:	01080009 	tsteq	r8, r9
     72c:	00005000 	andeq	r5, r0, r0
     730:	00000000 	andeq	r0, r0, r0
     734:	093e0000 	ldmdbeq	lr!, {}	; <UNPREDICTABLE>
     738:	09420800 	stmdbeq	r2, {fp}^
     73c:	00070800 	andeq	r0, r7, r0, lsl #16
     740:	3200703f 	andcc	r7, r0, #63	; 0x3f
     744:	469f2424 	ldrmi	r2, [pc], r4, lsr #8
     748:	48080009 	stmdami	r8, {r0, r3}
     74c:	01080009 	tsteq	r8, r9
     750:	09485000 	stmdbeq	r8, {ip, lr}^
     754:	094a0800 	stmdbeq	sl, {fp}^
     758:	00040800 	andeq	r0, r4, r0, lsl #16
     75c:	9f200070 	svcls	0x00200070
	...
     768:	080009dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp}
     76c:	080009e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp}
     770:	f4510001 			; <UNDEFINED> instruction: 0xf4510001
     774:	fc080009 	stc2	0, cr0, [r8], {9}
     778:	01080009 	tsteq	r8, r9
     77c:	0a085100 	beq	214b84 <__Stack_Size+0x214784>
     780:	0a140800 	beq	502788 <__Stack_Size+0x502388>
     784:	00010800 	andeq	r0, r1, r0, lsl #16
     788:	00000051 	andeq	r0, r0, r1, asr r0
     78c:	00000000 	andeq	r0, r0, r0
     790:	000a1400 	andeq	r1, sl, r0, lsl #8
     794:	000a2208 	andeq	r2, sl, r8, lsl #4
     798:	50000108 	andpl	r0, r0, r8, lsl #2
     79c:	08000a22 	stmdaeq	r0, {r1, r5, r9, fp}
     7a0:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
     7a4:	01f30004 	mvnseq	r0, r4
     7a8:	00009f50 	andeq	r9, r0, r0, asr pc
     7ac:	00000000 	andeq	r0, r0, r0
     7b0:	0a2c0000 	beq	b007b8 <__Stack_Size+0xb003b8>
     7b4:	0a3a0800 	beq	e827bc <__Stack_Size+0xe823bc>
     7b8:	00010800 	andeq	r0, r1, r0, lsl #16
     7bc:	000a3a50 	andeq	r3, sl, r0, asr sl
     7c0:	000a4408 	andeq	r4, sl, r8, lsl #8
     7c4:	f3000408 	vshl.u8	d0, d8, d0
     7c8:	009f5001 	addseq	r5, pc, r1
     7cc:	00000000 	andeq	r0, r0, r0
     7d0:	44000000 	strmi	r0, [r0], #-0
     7d4:	5c08000a 	stcpl	0, cr0, [r8], {10}
     7d8:	0108000a 	tsteq	r8, sl
     7dc:	0a5c5000 	beq	17147e4 <__Stack_Size+0x17143e4>
     7e0:	0a6c0800 	beq	1b027e8 <__Stack_Size+0x1b023e8>
     7e4:	00040800 	andeq	r0, r4, r0, lsl #16
     7e8:	9f5001f3 	svcls	0x005001f3
	...
     7f4:	08000a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp}
     7f8:	08000a88 	stmdaeq	r0, {r3, r7, r9, fp}
     7fc:	88500001 	ldmdahi	r0, {r0}^
     800:	a008000a 	andge	r0, r8, sl
     804:	0408000a 	streq	r0, [r8], #-10
     808:	5001f300 	andpl	pc, r1, r0, lsl #6
     80c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     810:	00000000 	andeq	r0, r0, r0
     814:	000ac000 	andeq	ip, sl, r0
     818:	000ac208 	andeq	ip, sl, r8, lsl #4
     81c:	30000208 	andcc	r0, r0, r8, lsl #4
     820:	000ac29f 	muleq	sl, pc, r2	; <UNPREDICTABLE>
     824:	000aea08 	andeq	lr, sl, r8, lsl #20
     828:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
     834:	08000b0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, fp}
     838:	08000b3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, fp}
     83c:	50530001 	subspl	r0, r3, r1
     840:	5d08000b 	stcpl	0, cr0, [r8, #-44]	; 0xffffffd4
     844:	0108000b 	tsteq	r8, fp
     848:	0b725300 	bleq	1c95450 <__Stack_Size+0x1c95050>
     84c:	0b740800 	bleq	1d02854 <__Stack_Size+0x1d02454>
     850:	00010800 	andeq	r0, r1, r0, lsl #16
     854:	000b7653 	andeq	r7, fp, r3, asr r6
     858:	000b7c08 	andeq	r7, fp, r8, lsl #24
     85c:	53000108 	movwpl	r0, #264	; 0x108
     860:	08000bbe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, fp}
     864:	08000bda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, fp}
     868:	e2530001 	subs	r0, r3, #1
     86c:	f408000b 	vst4.8	{d0-d3}, [r8], fp
     870:	0108000b 	tsteq	r8, fp
     874:	0bfe5300 	bleq	fff9547c <BootRAM+0xef05c1d>
     878:	0c040800 	stceq	8, cr0, [r4], {-0}
     87c:	00010800 	andeq	r0, r1, r0, lsl #16
     880:	000c2c53 	andeq	r2, ip, r3, asr ip
     884:	000c3c08 	andeq	r3, ip, r8, lsl #24
     888:	53000108 	movwpl	r0, #264	; 0x108
     88c:	08000c42 	stmdaeq	r0, {r1, r6, sl, fp}
     890:	08000c56 	stmdaeq	r0, {r1, r2, r4, r6, sl, fp}
     894:	ce530001 	cdpgt	0, 5, cr0, cr3, cr1, {0}
     898:	d408000c 	strle	r0, [r8], #-12
     89c:	0108000c 	tsteq	r8, ip
     8a0:	00005300 	andeq	r5, r0, r0, lsl #6
	...
     8b0:	00010000 	andeq	r0, r1, r0
     8b4:	00000050 	andeq	r0, r0, r0, asr r0
     8b8:	00000000 	andeq	r0, r0, r0
     8bc:	f3000400 	vshl.u8	d0, d0, d0
     8c0:	009f5001 	addseq	r5, pc, r1
	...
     8d0:	01000000 	mrseq	r0, (UNDEF: 0)
     8d4:	00005000 	andeq	r5, r0, r0
     8d8:	00000000 	andeq	r0, r0, r0
     8dc:	00040000 	andeq	r0, r4, r0
     8e0:	9f5001f3 	svcls	0x005001f3
	...
     8f4:	00500001 	subseq	r0, r0, r1
     8f8:	00000000 	andeq	r0, r0, r0
     8fc:	04000000 	streq	r0, [r0], #-0
     900:	5001f300 	andpl	pc, r1, r0, lsl #6
     904:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     914:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     920:	01f30004 	mvnseq	r0, r4
     924:	00009f51 	andeq	r9, r0, r1, asr pc
	...
     934:	00010000 	andeq	r0, r1, r0
     938:	00000050 	andeq	r0, r0, r0, asr r0
     93c:	00000000 	andeq	r0, r0, r0
     940:	f3000400 	vshl.u8	d0, d0, d0
     944:	009f5001 	addseq	r5, pc, r1
     948:	00000000 	andeq	r0, r0, r0
     94c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     950:	4a08000d 	bmi	20098c <__Stack_Size+0x20058c>
     954:	0108000d 	tsteq	r8, sp
     958:	0d4a5000 	stcleq	0, cr5, [sl, #-0]
     95c:	0d720800 	ldcleq	8, cr0, [r2, #-0]
     960:	00040800 	andeq	r0, r4, r0, lsl #16
     964:	9f5001f3 	svcls	0x005001f3
	...
     978:	00500001 	subseq	r0, r0, r1
     97c:	00000000 	andeq	r0, r0, r0
     980:	04000000 	streq	r0, [r0], #-0
     984:	5001f300 	andpl	pc, r1, r0, lsl #6
     988:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     998:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     9a4:	01f30004 	mvnseq	r0, r4
     9a8:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     9b8:	00010000 	andeq	r0, r1, r0
     9bc:	00000050 	andeq	r0, r0, r0, asr r0
     9c0:	00000000 	andeq	r0, r0, r0
     9c4:	f3000400 	vshl.u8	d0, d0, d0
     9c8:	009f5001 	addseq	r5, pc, r1
	...
     9d8:	01000000 	mrseq	r0, (UNDEF: 0)
     9dc:	00005000 	andeq	r5, r0, r0
     9e0:	00000000 	andeq	r0, r0, r0
     9e4:	00040000 	andeq	r0, r4, r0
     9e8:	9f5001f3 	svcls	0x005001f3
	...
     9fc:	00500001 	subseq	r0, r0, r1
     a00:	00000000 	andeq	r0, r0, r0
     a04:	04000000 	streq	r0, [r0], #-0
     a08:	5001f300 	andpl	pc, r1, r0, lsl #6
     a0c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     a1c:	73000600 	movwvc	r0, #1536	; 0x600
     a20:	27300800 	ldrcs	r0, [r0, -r0, lsl #16]!
     a24:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a28:	00000000 	andeq	r0, r0, r0
     a2c:	73000900 	movwvc	r0, #2304	; 0x900
     a30:	27300800 	ldrcs	r0, [r0, -r0, lsl #16]!
     a34:	9f273008 	svcls	0x00273008
	...
     a40:	08000d72 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, fp}
     a44:	08000d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp}
     a48:	74500001 	ldrbvc	r0, [r0], #-1
     a4c:	9008000d 	andls	r0, r8, sp
     a50:	0408000d 	streq	r0, [r8], #-13
     a54:	5001f300 	andpl	pc, r1, r0, lsl #6
     a58:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a5c:	00000000 	andeq	r0, r0, r0
     a60:	000d8800 	andeq	r8, sp, r0, lsl #16
     a64:	000d8c08 	andeq	r8, sp, r8, lsl #24
     a68:	73000708 	movwvc	r0, #1800	; 0x708
     a6c:	30000a00 	andcc	r0, r0, r0, lsl #20
     a70:	0d8c9f27 	stceq	15, cr9, [ip, #156]	; 0x9c
     a74:	0d900800 	ldceq	8, cr0, [r0]
     a78:	000b0800 	andeq	r0, fp, r0, lsl #16
     a7c:	000a0073 	andeq	r0, sl, r3, ror r0
     a80:	000a2730 	andeq	r2, sl, r0, lsr r7
     a84:	009f2730 	addseq	r2, pc, r0, lsr r7	; <UNPREDICTABLE>
	...
     a94:	01000000 	mrseq	r0, (UNDEF: 0)
     a98:	00005000 	andeq	r5, r0, r0
     a9c:	00000000 	andeq	r0, r0, r0
     aa0:	00040000 	andeq	r0, r4, r0
     aa4:	9f5001f3 	svcls	0x005001f3
	...
     ab8:	00500001 	subseq	r0, r0, r1
     abc:	00000000 	andeq	r0, r0, r0
     ac0:	04000000 	streq	r0, [r0], #-0
     ac4:	5001f300 	andpl	pc, r1, r0, lsl #6
     ac8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     acc:	00000000 	andeq	r0, r0, r0
     ad0:	000d9000 	andeq	r9, sp, r0
     ad4:	000d9208 	andeq	r9, sp, r8, lsl #4
     ad8:	50000108 	andpl	r0, r0, r8, lsl #2
     adc:	08000d92 	stmdaeq	r0, {r1, r4, r7, r8, sl, fp}
     ae0:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
     ae4:	01f30004 	mvnseq	r0, r4
     ae8:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     af8:	00010000 	andeq	r0, r1, r0
     afc:	00000050 	andeq	r0, r0, r0, asr r0
     b00:	00000000 	andeq	r0, r0, r0
     b04:	f3000400 	vshl.u8	d0, d0, d0
     b08:	009f5001 	addseq	r5, pc, r1
	...
     b18:	01000000 	mrseq	r0, (UNDEF: 0)
     b1c:	00005000 	andeq	r5, r0, r0
     b20:	00000000 	andeq	r0, r0, r0
     b24:	00040000 	andeq	r0, r4, r0
     b28:	9f5001f3 	svcls	0x005001f3
	...
     b3c:	00500001 	subseq	r0, r0, r1
     b40:	00000000 	andeq	r0, r0, r0
     b44:	04000000 	streq	r0, [r0], #-0
     b48:	5001f300 	andpl	pc, r1, r0, lsl #6
     b4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     b5c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     b68:	01f30004 	mvnseq	r0, r4
     b6c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     b7c:	00010000 	andeq	r0, r1, r0
     b80:	00000050 	andeq	r0, r0, r0, asr r0
     b84:	00000000 	andeq	r0, r0, r0
     b88:	f3000400 	vshl.u8	d0, d0, d0
     b8c:	009f5001 	addseq	r5, pc, r1
	...
     b9c:	01000000 	mrseq	r0, (UNDEF: 0)
     ba0:	00005000 	andeq	r5, r0, r0
     ba4:	00000000 	andeq	r0, r0, r0
     ba8:	00040000 	andeq	r0, r4, r0
     bac:	9f5001f3 	svcls	0x005001f3
	...
     bc0:	00500001 	subseq	r0, r0, r1
     bc4:	00000000 	andeq	r0, r0, r0
     bc8:	04000000 	streq	r0, [r0], #-0
     bcc:	5001f300 	andpl	pc, r1, r0, lsl #6
     bd0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     be0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     bec:	01f30004 	mvnseq	r0, r4
     bf0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     c00:	00010000 	andeq	r0, r1, r0
     c04:	00000050 	andeq	r0, r0, r0, asr r0
     c08:	00000000 	andeq	r0, r0, r0
     c0c:	f3000400 	vshl.u8	d0, d0, d0
     c10:	009f5001 	addseq	r5, pc, r1
     c14:	00000000 	andeq	r0, r0, r0
     c18:	ac000000 	stcge	0, cr0, [r0], {-0}
     c1c:	ae08000d 	cdpge	0, 0, cr0, cr8, cr13, {0}
     c20:	0108000d 	tsteq	r8, sp
     c24:	0dae5000 	stceq	0, cr5, [lr]
     c28:	0dcc0800 	stcleq	8, cr0, [ip]
     c2c:	00040800 	andeq	r0, r4, r0, lsl #16
     c30:	9f5001f3 	svcls	0x005001f3
	...
     c3c:	08000dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp}
     c40:	08000dce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, fp}
     c44:	ce500001 	cdpgt	0, 5, cr0, cr0, cr1, {0}
     c48:	ec08000d 	stc	0, cr0, [r8], {13}
     c4c:	0408000d 	streq	r0, [r8], #-13
     c50:	5001f300 	andpl	pc, r1, r0, lsl #6
     c54:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     c64:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     c70:	01f30004 	mvnseq	r0, r4
     c74:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     c84:	00010000 	andeq	r0, r1, r0
     c88:	00000051 	andeq	r0, r0, r1, asr r0
     c8c:	00000000 	andeq	r0, r0, r0
     c90:	f3000400 	vshl.u8	d0, d0, d0
     c94:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     ca4:	01000000 	mrseq	r0, (UNDEF: 0)
     ca8:	00005000 	andeq	r5, r0, r0
     cac:	00000000 	andeq	r0, r0, r0
     cb0:	00040000 	andeq	r0, r4, r0
     cb4:	9f5001f3 	svcls	0x005001f3
	...
     cc8:	00500001 	subseq	r0, r0, r1
     ccc:	00000000 	andeq	r0, r0, r0
     cd0:	04000000 	streq	r0, [r0], #-0
     cd4:	5001f300 	andpl	pc, r1, r0, lsl #6
     cd8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     ce8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     cf4:	01f30004 	mvnseq	r0, r4
     cf8:	00009f51 	andeq	r9, r0, r1, asr pc
	...
     d08:	00010000 	andeq	r0, r1, r0
     d0c:	00000050 	andeq	r0, r0, r0, asr r0
     d10:	00000000 	andeq	r0, r0, r0
     d14:	f3000400 	vshl.u8	d0, d0, d0
     d18:	009f5001 	addseq	r5, pc, r1
	...
     d28:	01000000 	mrseq	r0, (UNDEF: 0)
     d2c:	00005100 	andeq	r5, r0, r0, lsl #2
     d30:	00000000 	andeq	r0, r0, r0
     d34:	00040000 	andeq	r0, r4, r0
     d38:	9f5101f3 	svcls	0x005101f3
	...
     d44:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
     d48:	08000df6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sl, fp}
     d4c:	f6500001 			; <UNDEFINED> instruction: 0xf6500001
     d50:	0808000d 	stmdaeq	r8, {r0, r2, r3}
     d54:	0408000e 	streq	r0, [r8], #-14
     d58:	5001f300 	andpl	pc, r1, r0, lsl #6
     d5c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     d60:	00000000 	andeq	r0, r0, r0
     d64:	000e0800 	andeq	r0, lr, r0, lsl #16
     d68:	000e1208 	andeq	r1, lr, r8, lsl #4
     d6c:	50000108 	andpl	r0, r0, r8, lsl #2
     d70:	08000e12 	stmdaeq	r0, {r1, r4, r9, sl, fp}
     d74:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
     d78:	01f30004 	mvnseq	r0, r4
     d7c:	00009f50 	andeq	r9, r0, r0, asr pc
     d80:	00000000 	andeq	r0, r0, r0
     d84:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
     d88:	0e2e0800 	cdpeq	8, 2, cr0, cr14, cr0, {0}
     d8c:	00010800 	andeq	r0, r1, r0, lsl #16
     d90:	000e2e50 	andeq	r2, lr, r0, asr lr
     d94:	000e4008 	andeq	r4, lr, r8
     d98:	f3000408 	vshl.u8	d0, d8, d0
     d9c:	009f5001 	addseq	r5, pc, r1
	...
     dac:	01000000 	mrseq	r0, (UNDEF: 0)
     db0:	00005100 	andeq	r5, r0, r0, lsl #2
     db4:	00000000 	andeq	r0, r0, r0
     db8:	00040000 	andeq	r0, r4, r0
     dbc:	9f5101f3 	svcls	0x005101f3
	...
     dc8:	00510001 	subseq	r0, r1, r1
     dcc:	00000000 	andeq	r0, r0, r0
     dd0:	04000000 	streq	r0, [r0], #-0
     dd4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     dd8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     de8:	53000100 	movwpl	r0, #256	; 0x100
	...
     df4:	00530001 	subseq	r0, r3, r1
     df8:	00000000 	andeq	r0, r0, r0
     dfc:	01000000 	mrseq	r0, (UNDEF: 0)
     e00:	00005300 	andeq	r5, r0, r0, lsl #6
     e04:	00000000 	andeq	r0, r0, r0
     e08:	0e400000 	cdpeq	0, 4, cr0, cr0, cr0, {0}
     e0c:	0e4c0800 	cdpeq	8, 4, cr0, cr12, cr0, {0}
     e10:	00010800 	andeq	r0, r1, r0, lsl #16
     e14:	000e4c50 	andeq	r4, lr, r0, asr ip
     e18:	000e8008 	andeq	r8, lr, r8
     e1c:	f3000408 	vshl.u8	d0, d8, d0
     e20:	009f5001 	addseq	r5, pc, r1
     e24:	00000000 	andeq	r0, r0, r0
     e28:	40000000 	andmi	r0, r0, r0
     e2c:	6e08000e 	cdpvs	0, 0, cr0, cr8, cr14, {0}
     e30:	0108000e 	tsteq	r8, lr
     e34:	0e6e5100 	poweqe	f5, f6, f0
     e38:	0e800800 	cdpeq	8, 8, cr0, cr0, cr0, {0}
     e3c:	00040800 	andeq	r0, r4, r0, lsl #16
     e40:	9f5101f3 	svcls	0x005101f3
	...
     e4c:	08000e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp}
     e50:	08000e60 	stmdaeq	r0, {r5, r6, r9, sl, fp}
     e54:	60530001 	subsvs	r0, r3, r1
     e58:	6208000e 	andvs	r0, r8, #14
     e5c:	0508000e 	streq	r0, [r8, #-14]
     e60:	35007100 	strcc	r7, [r0, #-256]	; 0x100
     e64:	0e629f25 	cdpeq	15, 6, cr9, cr2, cr5, {1}
     e68:	0e640800 	cdpeq	8, 6, cr0, cr4, cr0, {0}
     e6c:	00010800 	andeq	r0, r1, r0, lsl #16
     e70:	000e6c53 	andeq	r6, lr, r3, asr ip
     e74:	000e7408 	andeq	r7, lr, r8, lsl #8
     e78:	53000108 	movwpl	r0, #264	; 0x108
	...
     e8c:	00500001 	subseq	r0, r0, r1
     e90:	00000000 	andeq	r0, r0, r0
     e94:	04000000 	streq	r0, [r0], #-0
     e98:	5001f300 	andpl	pc, r1, r0, lsl #6
     e9c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     eac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     eb8:	01f30004 	mvnseq	r0, r4
     ebc:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     ecc:	00010000 	andeq	r0, r1, r0
     ed0:	00000050 	andeq	r0, r0, r0, asr r0
     ed4:	00000000 	andeq	r0, r0, r0
     ed8:	f3000400 	vshl.u8	d0, d0, d0
     edc:	009f5001 	addseq	r5, pc, r1
	...
     eec:	01000000 	mrseq	r0, (UNDEF: 0)
     ef0:	00005100 	andeq	r5, r0, r0, lsl #2
     ef4:	00000000 	andeq	r0, r0, r0
     ef8:	00040000 	andeq	r0, r4, r0
     efc:	9f5101f3 	svcls	0x005101f3
	...
     f10:	00520001 	subseq	r0, r2, r1
     f14:	00000000 	andeq	r0, r0, r0
     f18:	04000000 	streq	r0, [r0], #-0
     f1c:	5201f300 	andpl	pc, r1, #0, 6
     f20:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     f30:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     f3c:	01f30004 	mvnseq	r0, r4
     f40:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     f50:	00010000 	andeq	r0, r1, r0
     f54:	00000051 	andeq	r0, r0, r1, asr r0
     f58:	00000000 	andeq	r0, r0, r0
     f5c:	f3000400 	vshl.u8	d0, d0, d0
     f60:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     f70:	01000000 	mrseq	r0, (UNDEF: 0)
     f74:	00005000 	andeq	r5, r0, r0
     f78:	00000000 	andeq	r0, r0, r0
     f7c:	00040000 	andeq	r0, r4, r0
     f80:	9f5001f3 	svcls	0x005001f3
	...
     f94:	00510001 	subseq	r0, r1, r1
     f98:	00000000 	andeq	r0, r0, r0
     f9c:	04000000 	streq	r0, [r0], #-0
     fa0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     fa4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     fb4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     fc0:	01f30004 	mvnseq	r0, r4
     fc4:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     fd4:	00010000 	andeq	r0, r1, r0
     fd8:	00000050 	andeq	r0, r0, r0, asr r0
     fdc:	00000000 	andeq	r0, r0, r0
     fe0:	f3000400 	vshl.u8	d0, d0, d0
     fe4:	009f5001 	addseq	r5, pc, r1
	...
     ff4:	01000000 	mrseq	r0, (UNDEF: 0)
     ff8:	00005000 	andeq	r5, r0, r0
     ffc:	00000000 	andeq	r0, r0, r0
    1000:	00040000 	andeq	r0, r4, r0
    1004:	9f5001f3 	svcls	0x005001f3
	...
    1010:	00500001 	subseq	r0, r0, r1
    1014:	00000000 	andeq	r0, r0, r0
    1018:	04000000 	streq	r0, [r0], #-0
    101c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1020:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1024:	00000000 	andeq	r0, r0, r0
    1028:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    103c:	00510001 	subseq	r0, r1, r1
    1040:	00000000 	andeq	r0, r0, r0
    1044:	04000000 	streq	r0, [r0], #-0
    1048:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    104c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1050:	00000000 	andeq	r0, r0, r0
    1054:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1060:	01f30004 	mvnseq	r0, r4
    1064:	00009f51 	andeq	r9, r0, r1, asr pc
    1068:	00000000 	andeq	r0, r0, r0
    106c:	00010000 	andeq	r0, r1, r0
    1070:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1080:	52000100 	andpl	r0, r0, #0, 2
	...
    108c:	01f30004 	mvnseq	r0, r4
    1090:	00009f52 	andeq	r9, r0, r2, asr pc
    1094:	00000000 	andeq	r0, r0, r0
    1098:	00010000 	andeq	r0, r1, r0
    109c:	00000052 	andeq	r0, r0, r2, asr r0
	...
    10ac:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    10b8:	00510001 	subseq	r0, r1, r1
	...
    10c8:	01000000 	mrseq	r0, (UNDEF: 0)
    10cc:	00005300 	andeq	r5, r0, r0, lsl #6
    10d0:	00000000 	andeq	r0, r0, r0
    10d4:	00050000 	andeq	r0, r5, r0
    10d8:	25350072 	ldrcs	r0, [r5, #-114]!	; 0x72
    10dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    10e0:	00000000 	andeq	r0, r0, r0
    10e4:	53000100 	movwpl	r0, #256	; 0x100
	...
    10f0:	00530001 	subseq	r0, r3, r1
	...
    1100:	01000000 	mrseq	r0, (UNDEF: 0)
    1104:	00005300 	andeq	r5, r0, r0, lsl #6
    1108:	00000000 	andeq	r0, r0, r0
    110c:	00010000 	andeq	r0, r1, r0
    1110:	00000053 	andeq	r0, r0, r3, asr r0
	...
    1120:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    112c:	00720005 	rsbseq	r0, r2, r5
    1130:	009f2535 	addseq	r2, pc, r5, lsr r5	; <UNPREDICTABLE>
    1134:	00000000 	andeq	r0, r0, r0
    1138:	01000000 	mrseq	r0, (UNDEF: 0)
    113c:	00005100 	andeq	r5, r0, r0, lsl #2
    1140:	00000000 	andeq	r0, r0, r0
    1144:	00010000 	andeq	r0, r1, r0
    1148:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1158:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1164:	01f30004 	mvnseq	r0, r4
    1168:	00009f50 	andeq	r9, r0, r0, asr pc
    116c:	00000000 	andeq	r0, r0, r0
    1170:	00010000 	andeq	r0, r1, r0
    1174:	00000050 	andeq	r0, r0, r0, asr r0
    1178:	00000000 	andeq	r0, r0, r0
    117c:	f3000400 	vshl.u8	d0, d0, d0
    1180:	009f5001 	addseq	r5, pc, r1
	...
    1190:	01000000 	mrseq	r0, (UNDEF: 0)
    1194:	00005100 	andeq	r5, r0, r0, lsl #2
    1198:	00000000 	andeq	r0, r0, r0
    119c:	00040000 	andeq	r0, r4, r0
    11a0:	9f5101f3 	svcls	0x005101f3
	...
    11ac:	00510001 	subseq	r0, r1, r1
	...
    11bc:	01000000 	mrseq	r0, (UNDEF: 0)
    11c0:	00005200 	andeq	r5, r0, r0, lsl #4
    11c4:	00000000 	andeq	r0, r0, r0
    11c8:	00040000 	andeq	r0, r4, r0
    11cc:	9f5201f3 	svcls	0x005201f3
	...
    11d8:	00520001 	subseq	r0, r2, r1
	...
    11e8:	01000000 	mrseq	r0, (UNDEF: 0)
    11ec:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    11fc:	00010000 	andeq	r0, r1, r0
    1200:	00000053 	andeq	r0, r0, r3, asr r0
    1204:	00000000 	andeq	r0, r0, r0
    1208:	72000500 	andvc	r0, r0, #0, 10
    120c:	9f253500 	svcls	0x00253500
	...
    1218:	00530001 	subseq	r0, r3, r1
    121c:	00000000 	andeq	r0, r0, r0
    1220:	01000000 	mrseq	r0, (UNDEF: 0)
    1224:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    1234:	00010000 	andeq	r0, r1, r0
    1238:	00000050 	andeq	r0, r0, r0, asr r0
    123c:	00000000 	andeq	r0, r0, r0
    1240:	f3000400 	vshl.u8	d0, d0, d0
    1244:	009f5001 	addseq	r5, pc, r1
    1248:	00000000 	andeq	r0, r0, r0
    124c:	01000000 	mrseq	r0, (UNDEF: 0)
    1250:	00005000 	andeq	r5, r0, r0
    1254:	00000000 	andeq	r0, r0, r0
    1258:	00040000 	andeq	r0, r4, r0
    125c:	9f5001f3 	svcls	0x005001f3
	...
    1270:	00510001 	subseq	r0, r1, r1
    1274:	00000000 	andeq	r0, r0, r0
    1278:	04000000 	streq	r0, [r0], #-0
    127c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1280:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1284:	00000000 	andeq	r0, r0, r0
    1288:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    129c:	00520001 	subseq	r0, r2, r1
    12a0:	00000000 	andeq	r0, r0, r0
    12a4:	04000000 	streq	r0, [r0], #-0
    12a8:	5201f300 	andpl	pc, r1, #0, 6
    12ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    12b0:	00000000 	andeq	r0, r0, r0
    12b4:	52000100 	andpl	r0, r0, #0, 2
	...
    12c8:	00510001 	subseq	r0, r1, r1
	...
    12d8:	01000000 	mrseq	r0, (UNDEF: 0)
    12dc:	00005300 	andeq	r5, r0, r0, lsl #6
    12e0:	00000000 	andeq	r0, r0, r0
    12e4:	00050000 	andeq	r0, r5, r0
    12e8:	25350072 	ldrcs	r0, [r5, #-114]!	; 0x72
    12ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    12f0:	00000000 	andeq	r0, r0, r0
    12f4:	53000100 	movwpl	r0, #256	; 0x100
	...
    1300:	00530001 	subseq	r0, r3, r1
	...
    1310:	01000000 	mrseq	r0, (UNDEF: 0)
    1314:	00005000 	andeq	r5, r0, r0
    1318:	00000000 	andeq	r0, r0, r0
    131c:	00040000 	andeq	r0, r4, r0
    1320:	9f5001f3 	svcls	0x005001f3
	...
    1334:	00500001 	subseq	r0, r0, r1
    1338:	00000000 	andeq	r0, r0, r0
    133c:	04000000 	streq	r0, [r0], #-0
    1340:	5001f300 	andpl	pc, r1, r0, lsl #6
    1344:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1354:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1360:	01f30004 	mvnseq	r0, r4
    1364:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    1374:	00010000 	andeq	r0, r1, r0
    1378:	00000050 	andeq	r0, r0, r0, asr r0
    137c:	00000000 	andeq	r0, r0, r0
    1380:	f3000400 	vshl.u8	d0, d0, d0
    1384:	009f5001 	addseq	r5, pc, r1
    1388:	00000000 	andeq	r0, r0, r0
    138c:	01000000 	mrseq	r0, (UNDEF: 0)
    1390:	00005000 	andeq	r5, r0, r0
    1394:	00000000 	andeq	r0, r0, r0
    1398:	00040000 	andeq	r0, r4, r0
    139c:	9f5001f3 	svcls	0x005001f3
	...
    13b0:	00500001 	subseq	r0, r0, r1
    13b4:	00000000 	andeq	r0, r0, r0
    13b8:	04000000 	streq	r0, [r0], #-0
    13bc:	5001f300 	andpl	pc, r1, r0, lsl #6
    13c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    13d0:	70000e00 	andvc	r0, r0, r0, lsl #28
    13d4:	1aff0800 	bne	fffc33dc <BootRAM+0xef33b7d>
    13d8:	00712438 	rsbseq	r2, r1, r8, lsr r4
    13dc:	211aff08 	tstcs	sl, r8, lsl #30
    13e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    13e4:	00000000 	andeq	r0, r0, r0
    13e8:	f3000f00 	vpmax.f32	d0, d0, d0
    13ec:	ff085001 			; <UNDEFINED> instruction: 0xff085001
    13f0:	7124381a 	teqvc	r4, sl, lsl r8
    13f4:	1aff0800 	bne	fffc33fc <BootRAM+0xef33b9d>
    13f8:	00009f21 	andeq	r9, r0, r1, lsr #30
	...
    1408:	00010000 	andeq	r0, r1, r0
    140c:	00000050 	andeq	r0, r0, r0, asr r0
    1410:	00000000 	andeq	r0, r0, r0
    1414:	f3000400 	vshl.u8	d0, d0, d0
    1418:	009f5001 	addseq	r5, pc, r1
	...
    1428:	01000000 	mrseq	r0, (UNDEF: 0)
    142c:	00005000 	andeq	r5, r0, r0
	...
    143c:	000d0000 	andeq	r0, sp, r0
    1440:	25380070 	ldrcs	r0, [r8, #-112]!	; 0x70
    1444:	ff080070 			; <UNDEFINED> instruction: 0xff080070
    1448:	2124381a 	teqcs	r4, sl, lsl r8
    144c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1450:	00000000 	andeq	r0, r0, r0
    1454:	000e8200 	andeq	r8, lr, r0, lsl #4
    1458:	000ee808 	andeq	lr, lr, r8, lsl #16
    145c:	30000208 	andcc	r0, r0, r8, lsl #4
    1460:	000ee89f 	muleq	lr, pc, r8	; <UNPREDICTABLE>
    1464:	000eec08 	andeq	lr, lr, r8, lsl #24
    1468:	73000708 	movwvc	r0, #1800	; 0x708
    146c:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    1470:	0efc9f1a 	mrceq	15, 7, r9, cr12, cr10, {0}
    1474:	0f060800 	svceq	0x00060800
    1478:	00070800 	andeq	r0, r7, r0, lsl #16
    147c:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    1480:	109f1aff 			; <UNDEFINED> instruction: 0x109f1aff
    1484:	1a08000f 	bne	2014c8 <__Stack_Size+0x2010c8>
    1488:	0708000f 	streq	r0, [r8, -pc]
    148c:	0a007300 	beq	1e094 <__Stack_Size+0x1dc94>
    1490:	9f1affff 	svcls	0x001affff
    1494:	08000f66 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sl, fp}
    1498:	08000f72 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, sl, fp}
    149c:	9f300002 	svcls	0x00300002
    14a0:	08000f72 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, sl, fp}
    14a4:	08000fb2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, sl, fp}
    14a8:	00750007 	rsbseq	r0, r5, r7
    14ac:	1affff0a 	bne	10dc <__Stack_Size+0xcdc>
    14b0:	000fb29f 	muleq	pc, pc, r2	; <UNPREDICTABLE>
    14b4:	000fd408 	andeq	sp, pc, r8, lsl #8
    14b8:	30000208 	andcc	r0, r0, r8, lsl #4
    14bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    14c0:	00000000 	andeq	r0, r0, r0
    14c4:	000ec800 	andeq	ip, lr, r0, lsl #16
    14c8:	000ecc08 	andeq	ip, lr, r8, lsl #24
    14cc:	72000708 	andvc	r0, r0, #8, 14	; 0x200000
    14d0:	20000a00 	andcs	r0, r0, r0, lsl #20
    14d4:	0ecc9f27 	cdpeq	15, 12, cr9, cr12, cr7, {1}
    14d8:	0ed00800 	cdpeq	8, 13, cr0, cr0, cr0, {0}
    14dc:	000b0800 	andeq	r0, fp, r0, lsl #16
    14e0:	000a0072 	andeq	r0, sl, r2, ror r0
    14e4:	000a2720 	andeq	r2, sl, r0, lsr #14
    14e8:	d09f2720 	addsle	r2, pc, r0, lsr #14
    14ec:	e008000e 	and	r0, r8, lr
    14f0:	0c08000e 	stceq	0, cr0, [r8], {14}
    14f4:	06007400 	streq	r7, [r0], -r0, lsl #8
    14f8:	2720000a 	strcs	r0, [r0, -sl]!
    14fc:	2720000a 	strcs	r0, [r0, -sl]!
    1500:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1504:	00000000 	andeq	r0, r0, r0
    1508:	000eda00 	andeq	sp, lr, r0, lsl #20
    150c:	000ede08 	andeq	sp, lr, r8, lsl #28
    1510:	72000608 	andvc	r0, r0, #8, 12	; 0x800000
    1514:	27200800 	strcs	r0, [r0, -r0, lsl #16]!
    1518:	000ede9f 	muleq	lr, pc, lr	; <UNPREDICTABLE>
    151c:	000eee08 	andeq	lr, lr, r8, lsl #28
    1520:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    1524:	27200800 	strcs	r0, [r0, -r0, lsl #16]!
    1528:	9f272008 	svcls	0x00272008
    152c:	08000eee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, sl, fp}
    1530:	08000ef6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl, fp}
    1534:	0074000a 	rsbseq	r0, r4, sl
    1538:	27200806 	strcs	r0, [r0, -r6, lsl #16]!
    153c:	9f272008 	svcls	0x00272008
    1540:	08000efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp}
    1544:	08000efe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl, fp}
    1548:	00720009 	rsbseq	r0, r2, r9
    154c:	08272008 	stmdaeq	r7!, {r3, sp}
    1550:	fe9f2720 	cdp2	7, 9, cr2, cr15, cr0, {1}
    1554:	0a08000e 	beq	201594 <__Stack_Size+0x201194>
    1558:	0a08000f 	beq	20159c <__Stack_Size+0x20119c>
    155c:	06007400 	streq	r7, [r0], -r0, lsl #8
    1560:	08272008 	stmdaeq	r7!, {r3, sp}
    1564:	109f2720 	addsne	r2, pc, r0, lsr #14
    1568:	1e08000f 	cdpne	0, 0, cr0, cr8, cr15, {0}
    156c:	0a08000f 	beq	2015b0 <__Stack_Size+0x2011b0>
    1570:	06007400 	streq	r7, [r0], -r0, lsl #8
    1574:	08272008 	stmdaeq	r7!, {r3, sp}
    1578:	009f2720 	addseq	r2, pc, r0, lsr #14
    157c:	00000000 	andeq	r0, r0, r0
    1580:	30000000 	andcc	r0, r0, r0
    1584:	4608000f 	strmi	r0, [r8], -pc
    1588:	0108000f 	tsteq	r8, pc
    158c:	0f465300 	svceq	0x00465300
    1590:	0f640800 	svceq	0x00640800
    1594:	00040800 	andeq	r0, r4, r0, lsl #16
    1598:	9f060072 	svcls	0x00060072
	...
    15a4:	08000f52 	stmdaeq	r0, {r1, r4, r6, r8, r9, sl, fp}
    15a8:	08000f66 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sl, fp}
    15ac:	00530001 	subseq	r0, r3, r1
	...
    15bc:	02000000 	andeq	r0, r0, #0
    15c0:	009f3000 	addseq	r3, pc, r0
    15c4:	00000000 	andeq	r0, r0, r0
    15c8:	07000000 	streq	r0, [r0, -r0]
    15cc:	0a007100 	beq	1d9d4 <__Stack_Size+0x1d5d4>
    15d0:	9f1affff 	svcls	0x001affff
	...
    15dc:	00710007 	rsbseq	r0, r1, r7
    15e0:	1affff0a 	bne	1210 <__Stack_Size+0xe10>
    15e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    15e8:	00000000 	andeq	r0, r0, r0
    15ec:	30000200 	andcc	r0, r0, r0, lsl #4
    15f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    15f4:	00000000 	andeq	r0, r0, r0
    15f8:	00100c00 	andseq	r0, r0, r0, lsl #24
    15fc:	00102108 	andseq	r2, r0, r8, lsl #2
    1600:	50000108 	andpl	r0, r0, r8, lsl #2
    1604:	08001021 	stmdaeq	r0, {r0, r5, ip}
    1608:	08001030 	stmdaeq	r0, {r4, r5, ip}
    160c:	01f30004 	mvnseq	r0, r4
    1610:	00009f50 	andeq	r9, r0, r0, asr pc
    1614:	00000000 	andeq	r0, r0, r0
    1618:	10300000 	eorsne	r0, r0, r0
    161c:	10450800 	subne	r0, r5, r0, lsl #16
    1620:	00010800 	andeq	r0, r1, r0, lsl #16
    1624:	00104550 	andseq	r4, r0, r0, asr r5
    1628:	00105408 	andseq	r5, r0, r8, lsl #8
    162c:	f3000408 	vshl.u8	d0, d8, d0
    1630:	009f5001 	addseq	r5, pc, r1
    1634:	00000000 	andeq	r0, r0, r0
    1638:	54000000 	strpl	r0, [r0], #-0
    163c:	68080010 	stmdavs	r8, {r4}
    1640:	01080010 	tsteq	r8, r0, lsl r0
    1644:	10685000 	rsbne	r5, r8, r0
    1648:	10e40800 	rscne	r0, r4, r0, lsl #16
    164c:	00040800 	andeq	r0, r4, r0, lsl #16
    1650:	9f5001f3 	svcls	0x005001f3
	...
    165c:	08001076 	stmdaeq	r0, {r1, r2, r4, r5, r6, ip}
    1660:	08001078 	stmdaeq	r0, {r3, r4, r5, r6, ip}
    1664:	09710002 	ldmdbeq	r1!, {r1}^
	...
    1670:	0800109e 	stmdaeq	r0, {r1, r2, r3, r4, r7, ip}
    1674:	080010a0 	stmdaeq	r0, {r5, r7, ip}
    1678:	a0520001 	subsge	r0, r2, r1
    167c:	ba080010 	blt	2016c4 <__Stack_Size+0x2012c4>
    1680:	05080010 	streq	r0, [r8, #-16]
    1684:	3f007100 	svccc	0x00007100
    1688:	10be9f1a 	adcsne	r9, lr, sl, lsl pc
    168c:	10c80800 	sbcne	r0, r8, r0, lsl #16
    1690:	00050800 	andeq	r0, r5, r0, lsl #16
    1694:	1a3f0071 	bne	fc1860 <__Stack_Size+0xfc1460>
    1698:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    169c:	00000000 	andeq	r0, r0, r0
    16a0:	0010ec00 	andseq	lr, r0, r0, lsl #24
    16a4:	00117208 	andseq	r7, r1, r8, lsl #4
    16a8:	74000308 	strvc	r0, [r0], #-776	; 0x308
    16ac:	00009f10 	andeq	r9, r0, r0, lsl pc
    16b0:	00000000 	andeq	r0, r0, r0
    16b4:	10f00000 	rscsne	r0, r0, r0
    16b8:	111a0800 	tstne	sl, r0, lsl #16
    16bc:	00010800 	andeq	r0, r1, r0, lsl #16
    16c0:	00111a53 	andseq	r1, r1, r3, asr sl
    16c4:	00112008 	andseq	r2, r1, r8
    16c8:	74000908 	strvc	r0, [r0], #-2312	; 0x908
    16cc:	0a029410 	beq	a6714 <__Stack_Size+0xa6314>
    16d0:	9f1affff 	svcls	0x001affff
    16d4:	08001120 	stmdaeq	r0, {r5, r8, ip}
    16d8:	08001134 	stmdaeq	r0, {r2, r4, r5, r8, ip}
    16dc:	34530001 	ldrbcc	r0, [r3], #-1
    16e0:	35080011 	strcc	r0, [r8, #-17]
    16e4:	09080011 	stmdbeq	r8, {r0, r4}
    16e8:	94107400 	ldrls	r7, [r0], #-1024	; 0x400
    16ec:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    16f0:	00009f1a 	andeq	r9, r0, sl, lsl pc
    16f4:	00000000 	andeq	r0, r0, r0
    16f8:	10f20000 	rscsne	r0, r2, r0
    16fc:	11140800 	tstne	r4, r0, lsl #16
    1700:	00060800 	andeq	r0, r6, r0, lsl #16
    1704:	ff080076 			; <UNDEFINED> instruction: 0xff080076
    1708:	11149f1a 	tstne	r4, sl, lsl pc
    170c:	11180800 	tstne	r8, r0, lsl #16
    1710:	00020800 	andeq	r0, r2, r0, lsl #16
    1714:	11189f34 	tstne	r8, r4, lsr pc
    1718:	11200800 	teqne	r0, r0, lsl #16
    171c:	00020800 	andeq	r0, r2, r0, lsl #16
    1720:	11209f37 	teqne	r0, r7, lsr pc
    1724:	112a0800 	teqne	sl, r0, lsl #16
    1728:	00060800 	andeq	r0, r6, r0, lsl #16
    172c:	ff080076 			; <UNDEFINED> instruction: 0xff080076
    1730:	112a9f1a 	teqne	sl, sl, lsl pc
    1734:	11720800 	cmnne	r2, r0, lsl #16
    1738:	00010800 	andeq	r0, r1, r0, lsl #16
    173c:	00000056 	andeq	r0, r0, r6, asr r0
    1740:	00000000 	andeq	r0, r0, r0
    1744:	00113800 	andseq	r3, r1, r0, lsl #16
    1748:	00113a08 	andseq	r3, r1, r8, lsl #20
    174c:	50000108 	andpl	r0, r0, r8, lsl #2
    1750:	0800113a 	stmdaeq	r0, {r1, r3, r4, r5, r8, ip}
    1754:	08001168 	stmdaeq	r0, {r3, r5, r6, r8, ip}
    1758:	00590001 	subseq	r0, r9, r1
    175c:	00000000 	andeq	r0, r0, r0
    1760:	22000000 	andcs	r0, r0, #0
    1764:	2a080011 	bcs	2017b0 <__Stack_Size+0x2013b0>
    1768:	01080011 	tsteq	r8, r1, lsl r0
    176c:	112a5500 	teqne	sl, r0, lsl #10
    1770:	11300800 	teqne	r0, r0, lsl #16
    1774:	00160800 	andseq	r0, r6, r0, lsl #16
    1778:	40120075 	andsmi	r0, r2, r5, ror r0
    177c:	7322244b 	teqvc	r2, #1258291200	; 0x4b000000
    1780:	40141600 	andsmi	r1, r4, r0, lsl #12
    1784:	2d22244b 	cfstrscs	mvf2, [r2, #-300]!	; 0xfffffed4
    1788:	16000128 	strne	r0, [r0], -r8, lsr #2
    178c:	11309f13 	teqne	r0, r3, lsl pc
    1790:	115e0800 	cmpne	lr, r0, lsl #16
    1794:	00010800 	andeq	r0, r1, r0, lsl #16
    1798:	00000055 	andeq	r0, r0, r5, asr r0
    179c:	00000000 	andeq	r0, r0, r0
    17a0:	0011d600 	andseq	sp, r1, r0, lsl #12
    17a4:	0011ed08 	andseq	lr, r1, r8, lsl #26
    17a8:	50000108 	andpl	r0, r0, r8, lsl #2
    17ac:	080011fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, ip}
    17b0:	080011fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, ip}
    17b4:	00500001 	subseq	r0, r0, r1
    17b8:	00000000 	andeq	r0, r0, r0
    17bc:	14000000 	strne	r0, [r0], #-0
    17c0:	18080012 	stmdane	r8, {r1, r4}
    17c4:	06080012 			; <UNDEFINED> instruction: 0x06080012
    17c8:	08007000 	stmdaeq	r0, {ip, sp, lr}
    17cc:	189f1a7f 	ldmne	pc, {r0, r1, r2, r3, r4, r5, r6, r9, fp, ip}	; <UNPREDICTABLE>
    17d0:	3c080012 	stccc	0, cr0, [r8], {18}
    17d4:	01080012 	tsteq	r8, r2, lsl r0
    17d8:	123c5000 	eorsne	r5, ip, #0
    17dc:	12620800 	rsbne	r0, r2, #0, 16
    17e0:	000b0800 	andeq	r0, fp, r0, lsl #16
    17e4:	01940073 	orrseq	r0, r4, r3, ror r0
    17e8:	081a7f08 	ldmdaeq	sl, {r3, r8, r9, sl, fp, ip, sp, lr}
    17ec:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    17f0:	00000000 	andeq	r0, r0, r0
    17f4:	54000000 	strpl	r0, [r0], #-0
    17f8:	81080012 	tsthi	r8, r2, lsl r0
    17fc:	01080012 	tsteq	r8, r2, lsl r0
    1800:	128c5100 	addne	r5, ip, #0, 2
    1804:	129e0800 	addsne	r0, lr, #0, 16
    1808:	00010800 	andeq	r0, r1, r0, lsl #16
    180c:	0012a451 	andseq	sl, r2, r1, asr r4
    1810:	0012a708 	andseq	sl, r2, r8, lsl #14
    1814:	51000108 	tstpl	r0, r8, lsl #2
	...
    1820:	0800123c 	stmdaeq	r0, {r2, r3, r4, r5, r9, ip}
    1824:	0800127e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, ip}
    1828:	8c500001 	mrrchi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    182c:	a1080012 	tstge	r8, r2, lsl r0
    1830:	01080012 	tsteq	r8, r2, lsl r0
    1834:	12a45000 	adcne	r5, r4, #0
    1838:	12a70800 	adcne	r0, r7, #0, 16
    183c:	00010800 	andeq	r0, r1, r0, lsl #16
    1840:	00000050 	andeq	r0, r0, r0, asr r0
    1844:	00000000 	andeq	r0, r0, r0
    1848:	00123600 	andseq	r3, r2, r0, lsl #12
    184c:	00126e08 	andseq	r6, r2, r8, lsl #28
    1850:	72000608 	andvc	r0, r0, #8, 12	; 0x800000
    1854:	1aff0800 	bne	fffc385c <BootRAM+0xef33ffd>
    1858:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    185c:	00000000 	andeq	r0, r0, r0
    1860:	0012b400 	andseq	fp, r2, r0, lsl #8
    1864:	0012b808 	andseq	fp, r2, r8, lsl #16
    1868:	73000708 	movwvc	r0, #1800	; 0x708
    186c:	30000a00 	andcc	r0, r0, r0, lsl #20
    1870:	12b89f27 	adcsne	r9, r8, #39, 30	; 0x9c
    1874:	12ba0800 	adcsne	r0, sl, #0, 16
    1878:	000b0800 	andeq	r0, fp, r0, lsl #16
    187c:	000a0073 	andeq	r0, sl, r3, ror r0
    1880:	000a2730 	andeq	r2, sl, r0, lsr r7
    1884:	009f2730 	addseq	r2, pc, r0, lsr r7	; <UNPREDICTABLE>
    1888:	00000000 	andeq	r0, r0, r0
    188c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    1890:	22080012 	andcs	r0, r8, #18
    1894:	06080013 			; <UNDEFINED> instruction: 0x06080013
    1898:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    189c:	509f1aff 			; <UNDEFINED> instruction: 0x509f1aff
    18a0:	60080013 	andvs	r0, r8, r3, lsl r0
    18a4:	06080013 			; <UNDEFINED> instruction: 0x06080013
    18a8:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    18ac:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    18b0:	00000000 	andeq	r0, r0, r0
    18b4:	ec000000 	stc	0, cr0, [r0], {-0}
    18b8:	0c080012 	stceq	0, cr0, [r8], {18}
    18bc:	01080013 	tsteq	r8, r3, lsl r0
    18c0:	130c5400 	movwne	r5, #50176	; 0xc400
    18c4:	13220800 	teqne	r2, #0, 16
    18c8:	00070800 	andeq	r0, r7, r0, lsl #16
    18cc:	7f0b0072 	svcvc	0x000b0072
    18d0:	509f1aff 			; <UNDEFINED> instruction: 0x509f1aff
    18d4:	60080013 	andvs	r0, r8, r3, lsl r0
    18d8:	07080013 	smladeq	r8, r3, r0, r0
    18dc:	0b007200 	bleq	1e0e4 <__Stack_Size+0x1dce4>
    18e0:	9f1aff7f 	svcls	0x001aff7f
	...
    18ec:	08001302 	stmdaeq	r0, {r1, r8, r9, ip}
    18f0:	0800134b 	stmdaeq	r0, {r0, r1, r3, r6, r8, r9, ip}
    18f4:	50500001 	subspl	r0, r0, r1
    18f8:	52080013 	andpl	r0, r8, #19
    18fc:	01080013 	tsteq	r8, r3, lsl r0
    1900:	00005000 	andeq	r5, r0, r0
    1904:	00000000 	andeq	r0, r0, r0
    1908:	132e0000 	teqne	lr, #0
    190c:	13320800 	teqne	r2, #0, 16
    1910:	00050800 	andeq	r0, r5, r0, lsl #16
    1914:	27400072 	smlsldxcs	r0, r0, r2, r0	; <UNPREDICTABLE>
    1918:	0013329f 	mulseq	r3, pc, r2	; <UNPREDICTABLE>
    191c:	00133408 	andseq	r3, r3, r8, lsl #8
    1920:	72000708 	andvc	r0, r0, #8, 14	; 0x200000
    1924:	40274000 	eormi	r4, r7, r0
    1928:	00009f27 	andeq	r9, r0, r7, lsr #30
    192c:	00000000 	andeq	r0, r0, r0
    1930:	133e0000 	teqne	lr, #0
    1934:	13420800 	movtne	r0, #10240	; 0x2800
    1938:	00070800 	andeq	r0, r7, r0, lsl #16
    193c:	000a0072 	andeq	r0, sl, r2, ror r0
    1940:	009f2710 	addseq	r2, pc, r0, lsl r7	; <UNPREDICTABLE>
    1944:	00000000 	andeq	r0, r0, r0
    1948:	84000000 	strhi	r0, [r0], #-0
    194c:	96080013 			; <UNDEFINED> instruction: 0x96080013
    1950:	01080013 	tsteq	r8, r3, lsl r0
    1954:	13965000 	orrsne	r5, r6, #0
    1958:	13a00800 	movne	r0, #0, 16
    195c:	00040800 	andeq	r0, r4, r0, lsl #16
    1960:	9f5001f3 	svcls	0x005001f3
	...
    196c:	08001384 	stmdaeq	r0, {r2, r7, r8, r9, ip}
    1970:	0800138e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, ip}
    1974:	8e510001 	cdphi	0, 5, cr0, cr1, cr1, {0}
    1978:	94080013 	strls	r0, [r8], #-19
    197c:	04080013 	streq	r0, [r8], #-19
    1980:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1984:	0013949f 	mulseq	r3, pc, r4	; <UNPREDICTABLE>
    1988:	0013a008 	andseq	sl, r3, r8
    198c:	51000108 	tstpl	r0, r8, lsl #2
	...
    1998:	0800138a 	stmdaeq	r0, {r1, r3, r7, r8, r9, ip}
    199c:	08001390 	stmdaeq	r0, {r4, r7, r8, r9, ip}
    19a0:	90530001 	subsls	r0, r3, r1
    19a4:	94080013 	strls	r0, [r8], #-19
    19a8:	09080013 	stmdbeq	r8, {r0, r1, r4}
    19ac:	94127200 	ldrls	r7, [r2], #-512	; 0x200
    19b0:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    19b4:	13949f1a 	orrsne	r9, r4, #26, 30	; 0x68
    19b8:	13a00800 	movne	r0, #0, 16
    19bc:	00010800 	andeq	r0, r1, r0, lsl #16
    19c0:	00000053 	andeq	r0, r0, r3, asr r0
    19c4:	00000000 	andeq	r0, r0, r0
    19c8:	0013f200 	andseq	pc, r3, r0, lsl #4
    19cc:	0013fc08 	andseq	pc, r3, r8, lsl #24
    19d0:	72001108 	andvc	r1, r0, #8, 2
    19d4:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    19d8:	2324311a 	teqcs	r4, #-2147483642	; 0x80000006
    19dc:	8081c080 	addhi	ip, r1, r0, lsl #1
    19e0:	04939f04 	ldreq	r9, [r3], #3844	; 0xf04
	...
    19ec:	08001426 	stmdaeq	r0, {r1, r2, r5, sl, ip}
    19f0:	08001436 	stmdaeq	r0, {r1, r2, r4, r5, sl, ip}
    19f4:	9f320002 	svcls	0x00320002
    19f8:	08001436 	stmdaeq	r0, {r1, r2, r4, r5, sl, ip}
    19fc:	08001438 	stmdaeq	r0, {r3, r4, r5, sl, ip}
    1a00:	38500001 	ldmdacc	r0, {r0}^
    1a04:	44080014 	strmi	r0, [r8], #-20
    1a08:	02080014 	andeq	r0, r8, #20
    1a0c:	489f3200 	ldmmi	pc, {r9, ip, sp}	; <UNPREDICTABLE>
    1a10:	66080014 			; <UNDEFINED> instruction: 0x66080014
    1a14:	02080014 	andeq	r0, r8, #20
    1a18:	709f3200 	addsvc	r3, pc, r0, lsl #4
    1a1c:	76080014 			; <UNDEFINED> instruction: 0x76080014
    1a20:	01080014 	tsteq	r8, r4, lsl r0
    1a24:	14765000 	ldrbtne	r5, [r6], #-0
    1a28:	14860800 	strne	r0, [r6], #2048	; 0x800
    1a2c:	00020800 	andeq	r0, r2, r0, lsl #16
    1a30:	14869f32 	strne	r9, [r6], #3890	; 0xf32
    1a34:	14880800 	strne	r0, [r8], #2048	; 0x800
    1a38:	00010800 	andeq	r0, r1, r0, lsl #16
    1a3c:	00148850 	andseq	r8, r4, r0, asr r8
    1a40:	0014a208 	andseq	sl, r4, r8, lsl #4
    1a44:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    1a48:	0014a29f 	mulseq	r4, pc, r2	; <UNPREDICTABLE>
    1a4c:	0014a408 	andseq	sl, r4, r8, lsl #8
    1a50:	50000108 	andpl	r0, r0, r8, lsl #2
    1a54:	080014a4 	stmdaeq	r0, {r2, r5, r7, sl, ip}
    1a58:	080014b0 	stmdaeq	r0, {r4, r5, r7, sl, ip}
    1a5c:	9f320002 	svcls	0x00320002
    1a60:	080014b0 	stmdaeq	r0, {r4, r5, r7, sl, ip}
    1a64:	080014b2 	stmdaeq	r0, {r1, r4, r5, r7, sl, ip}
    1a68:	b2500001 	subslt	r0, r0, #1
    1a6c:	c2080014 	andgt	r0, r8, #20
    1a70:	02080014 	andeq	r0, r8, #20
    1a74:	c29f3200 	addsgt	r3, pc, #0, 4
    1a78:	ca080014 	bgt	201ad0 <__Stack_Size+0x2016d0>
    1a7c:	01080014 	tsteq	r8, r4, lsl r0
    1a80:	14e25000 	strbtne	r5, [r2], #0
    1a84:	14e40800 	strbtne	r0, [r4], #2048	; 0x800
    1a88:	00010800 	andeq	r0, r1, r0, lsl #16
    1a8c:	00000050 	andeq	r0, r0, r0, asr r0
    1a90:	00000000 	andeq	r0, r0, r0
    1a94:	00142600 	andseq	r2, r4, r0, lsl #12
    1a98:	0014ea08 	andseq	lr, r4, r8, lsl #20
    1a9c:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    1aa8:	080014ca 	stmdaeq	r0, {r1, r3, r6, r7, sl, ip}
    1aac:	080014e2 	stmdaeq	r0, {r1, r5, r6, r7, sl, ip}
    1ab0:	9f360002 	svcls	0x00360002
    1ab4:	080014e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip}
    1ab8:	080014ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, ip}
    1abc:	00530001 	subseq	r0, r3, r1
    1ac0:	00000000 	andeq	r0, r0, r0
    1ac4:	ea000000 	b	1acc <__Stack_Size+0x16cc>
    1ac8:	00080014 	andeq	r0, r8, r4, lsl r0
    1acc:	02080015 	andeq	r0, r8, #21
    1ad0:	009f3000 	addseq	r3, pc, r0
    1ad4:	02080015 	andeq	r0, r8, #21
    1ad8:	01080015 	tsteq	r8, r5, lsl r0
    1adc:	15025300 	strne	r5, [r2, #-768]	; 0x300
    1ae0:	150a0800 	strne	r0, [sl, #-2048]	; 0x800
    1ae4:	00020800 	andeq	r0, r2, r0, lsl #16
    1ae8:	150a9f30 	strne	r9, [sl, #-3888]	; 0xf30
    1aec:	150c0800 	strne	r0, [ip, #-2048]	; 0x800
    1af0:	00010800 	andeq	r0, r1, r0, lsl #16
    1af4:	00150c53 	andseq	r0, r5, r3, asr ip
    1af8:	00151408 	andseq	r1, r5, r8, lsl #8
    1afc:	30000208 	andcc	r0, r0, r8, lsl #4
    1b00:	0015149f 	mulseq	r5, pc, r4	; <UNPREDICTABLE>
    1b04:	00151608 	andseq	r1, r5, r8, lsl #12
    1b08:	53000108 	movwpl	r0, #264	; 0x108
    1b0c:	08001516 	stmdaeq	r0, {r1, r2, r4, r8, sl, ip}
    1b10:	0800151e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, ip}
    1b14:	9f300002 	svcls	0x00300002
    1b18:	0800151e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, ip}
    1b1c:	08001520 	stmdaeq	r0, {r5, r8, sl, ip}
    1b20:	20530001 	subscs	r0, r3, r1
    1b24:	dc080015 	stcle	0, cr0, [r8], {21}
    1b28:	02080015 	andeq	r0, r8, #21
    1b2c:	dc9f3000 	ldcle	0, cr3, [pc], {0}
    1b30:	e9080015 	stmdb	r8, {r0, r2, r4}
    1b34:	01080015 	tsteq	r8, r5, lsl r0
    1b38:	169c5300 	ldrne	r5, [ip], r0, lsl #6
    1b3c:	16a60800 	strtne	r0, [r6], r0, lsl #16
    1b40:	00020800 	andeq	r0, r2, r0, lsl #16
    1b44:	16a69f30 	ssat16ne	r9, #7, r0
    1b48:	16bc0800 	ldrtne	r0, [ip], r0, lsl #16
    1b4c:	00060800 	andeq	r0, r6, r0, lsl #16
    1b50:	00103103 	andseq	r3, r0, r3, lsl #2
    1b54:	00009f08 	andeq	r9, r0, r8, lsl #30
    1b58:	00000000 	andeq	r0, r0, r0
    1b5c:	15ea0000 	strbne	r0, [sl, #0]!
    1b60:	15ee0800 	strbne	r0, [lr, #2048]!	; 0x800
    1b64:	00020800 	andeq	r0, r2, r0, lsl #16
    1b68:	15fa9f30 	ldrbne	r9, [sl, #3888]!	; 0xf30
    1b6c:	16100800 	ldrne	r0, [r0], -r0, lsl #16
    1b70:	00010800 	andeq	r0, r1, r0, lsl #16
    1b74:	00161450 	andseq	r1, r6, r0, asr r4
    1b78:	00161c08 	andseq	r1, r6, r8, lsl #24
    1b7c:	50000108 	andpl	r0, r0, r8, lsl #2
    1b80:	08001620 	stmdaeq	r0, {r5, r9, sl, ip}
    1b84:	0800162e 	stmdaeq	r0, {r1, r2, r3, r5, r9, sl, ip}
    1b88:	88500001 	ldmdahi	r0, {r0}^
    1b8c:	94080016 	strls	r0, [r8], #-22
    1b90:	01080016 	tsteq	r8, r6, lsl r0
    1b94:	00005000 	andeq	r5, r0, r0
    1b98:	00000000 	andeq	r0, r0, r0
    1b9c:	14ea0000 	strbtne	r0, [sl], #0
    1ba0:	15e20800 	strbne	r0, [r2, #2048]!	; 0x800
    1ba4:	00010800 	andeq	r0, r1, r0, lsl #16
    1ba8:	0015ee54 	andseq	lr, r5, r4, asr lr
    1bac:	00160408 	andseq	r0, r6, r8, lsl #8
    1bb0:	54000108 	strpl	r0, [r0], #-264	; 0x108
    1bb4:	0800169c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip}
    1bb8:	080016bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, ip}
    1bbc:	00540001 	subseq	r0, r4, r1
    1bc0:	00000000 	andeq	r0, r0, r0
    1bc4:	72000000 	andvc	r0, r0, #0
    1bc8:	9e080015 	mcrls	0, 0, r0, cr8, cr5, {0}
    1bcc:	01080015 	tsteq	r8, r5, lsl r0
    1bd0:	00005100 	andeq	r5, r0, r0, lsl #2
    1bd4:	00000000 	andeq	r0, r0, r0
    1bd8:	15720000 	ldrbne	r0, [r2, #-0]!
    1bdc:	159e0800 	ldrne	r0, [lr, #2048]	; 0x800
    1be0:	00090800 	andeq	r0, r9, r0, lsl #16
    1be4:	70080073 	andvc	r0, r8, r3, ror r0
    1be8:	1aff081a 	bne	fffc3c58 <BootRAM+0xef343f9>
    1bec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1bf0:	00000000 	andeq	r0, r0, r0
    1bf4:	0014ea00 	andseq	lr, r4, r0, lsl #20
    1bf8:	00169408 	andseq	r9, r6, r8, lsl #8
    1bfc:	30000208 	andcc	r0, r0, r8, lsl #4
    1c00:	00169c9f 	mulseq	r6, pc, ip	; <UNPREDICTABLE>
    1c04:	0016bc08 	andseq	fp, r6, r8, lsl #24
    1c08:	30000208 	andcc	r0, r0, r8, lsl #4
    1c0c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1c10:	00000000 	andeq	r0, r0, r0
    1c14:	00158a00 	andseq	r8, r5, r0, lsl #20
    1c18:	00159e08 	andseq	r9, r5, r8, lsl #28
    1c1c:	52000108 	andpl	r0, r0, #8, 2
	...
    1c28:	080014f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, ip}
    1c2c:	080014f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, ip}
    1c30:	03730002 	cmneq	r3, #2
    1c34:	080014f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, ip}
    1c38:	08001520 	stmdaeq	r0, {r5, r8, sl, ip}
    1c3c:	dc520001 	mrrcle	0, 0, r0, r2, cr1
    1c40:	de080015 	mcrle	0, 0, r0, cr8, cr5, {0}
    1c44:	01080015 	tsteq	r8, r5, lsl r0
    1c48:	00005200 	andeq	r5, r0, r0, lsl #4
    1c4c:	00000000 	andeq	r0, r0, r0
    1c50:	16c40000 	strbne	r0, [r4], r0
    1c54:	16ce0800 	strbne	r0, [lr], r0, lsl #16
    1c58:	00010800 	andeq	r0, r1, r0, lsl #16
    1c5c:	0016ce53 	andseq	ip, r6, r3, asr lr
    1c60:	0016df08 	andseq	sp, r6, r8, lsl #30
    1c64:	74000808 	strvc	r0, [r0], #-2056	; 0x808
    1c68:	08019408 	stmdaeq	r1, {r3, sl, ip, pc}
    1c6c:	4e9f1aff 	mrcmi	10, 4, r1, cr15, cr15, {7}
    1c70:	56080017 			; <UNDEFINED> instruction: 0x56080017
    1c74:	01080017 	tsteq	r8, r7, lsl r0
    1c78:	17565300 	ldrbne	r5, [r6, -r0, lsl #6]
    1c7c:	175b0800 	ldrbne	r0, [fp, -r0, lsl #16]
    1c80:	00080800 	andeq	r0, r8, r0, lsl #16
    1c84:	01940874 	orrseq	r0, r4, r4, ror r8
    1c88:	9f1aff08 	svcls	0x001aff08
    1c8c:	0800175e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, sl, ip}
    1c90:	08001766 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sl, ip}
    1c94:	00530001 	subseq	r0, r3, r1
    1c98:	00000000 	andeq	r0, r0, r0
    1c9c:	cc000000 	stcgt	0, cr0, [r0], {-0}
    1ca0:	50080016 	andpl	r0, r8, r6, lsl r0
    1ca4:	03080017 	movweq	r0, #32791	; 0x8017
    1ca8:	9f107400 	svcls	0x00107400
	...
    1cb4:	080016d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, ip}
    1cb8:	080016df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r9, sl, ip}
    1cbc:	00520001 	subseq	r0, r2, r1
    1cc0:	00000000 	andeq	r0, r0, r0
    1cc4:	e4000000 	str	r0, [r0], #-0
    1cc8:	ec080016 	stc	0, cr0, [r8], {22}
    1ccc:	01080016 	tsteq	r8, r6, lsl r0
    1cd0:	16ec5000 	strbtne	r5, [ip], r0
    1cd4:	16fe0800 	ldrbtne	r0, [lr], r0, lsl #16
    1cd8:	00010800 	andeq	r0, r1, r0, lsl #16
    1cdc:	00000057 	andeq	r0, r0, r7, asr r0
    1ce0:	00000000 	andeq	r0, r0, r0
    1ce4:	0016d600 	andseq	sp, r6, r0, lsl #12
    1ce8:	0016dc08 	andseq	sp, r6, r8, lsl #24
    1cec:	76001608 	strvc	r1, [r0], -r8, lsl #12
    1cf0:	4b401200 	blmi	10064f8 <__Stack_Size+0x10060f8>
    1cf4:	00722224 	rsbseq	r2, r2, r4, lsr #4
    1cf8:	4b401416 	blmi	1006d58 <__Stack_Size+0x1006958>
    1cfc:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    1d00:	13160001 	tstne	r6, #1
    1d04:	0016dc9f 	mulseq	r6, pc, ip	; <UNPREDICTABLE>
    1d08:	0016fe08 	andseq	pc, r6, r8, lsl #28
    1d0c:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    1d18:	08001784 	stmdaeq	r0, {r2, r7, r8, r9, sl, ip}
    1d1c:	080017b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, ip}
    1d20:	b0500001 	subslt	r0, r0, r1
    1d24:	bc080017 	stclt	0, cr0, [r8], {23}
    1d28:	04080017 	streq	r0, [r8], #-23
    1d2c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1d30:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1d34:	00000000 	andeq	r0, r0, r0
    1d38:	00178a00 	andseq	r8, r7, r0, lsl #20
    1d3c:	00178c08 	andseq	r8, r7, r8, lsl #24
    1d40:	30000208 	andcc	r0, r0, r8, lsl #4
    1d44:	00178c9f 	mulseq	r7, pc, ip	; <UNPREDICTABLE>
    1d48:	0017ac08 	andseq	sl, r7, r8, lsl #24
    1d4c:	53000108 	movwpl	r0, #264	; 0x108
	...
    1d58:	0800178a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, ip}
    1d5c:	080017b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, ip}
    1d60:	00540001 	subseq	r0, r4, r1
    1d64:	00000000 	andeq	r0, r0, r0
    1d68:	c4000000 	strgt	r0, [r0], #-0
    1d6c:	cf080017 	svcgt	0x00080017
    1d70:	01080017 	tsteq	r8, r7, lsl r0
    1d74:	17d45200 	ldrbne	r5, [r4, r0, lsl #4]
    1d78:	17d60800 	ldrbne	r0, [r6, r0, lsl #16]
    1d7c:	00010800 	andeq	r0, r1, r0, lsl #16
    1d80:	0017d653 	andseq	sp, r7, r3, asr r6
    1d84:	0017dc08 	andseq	sp, r7, r8, lsl #24
    1d88:	52000108 	andpl	r0, r0, #8, 2
    1d8c:	080017dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, ip}
    1d90:	080017eb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, r8, r9, sl, ip}
    1d94:	08730008 	ldmdaeq	r3!, {r3}^
    1d98:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    1d9c:	17fe9f1a 			; <UNDEFINED> instruction: 0x17fe9f1a
    1da0:	18090800 	stmdane	r9, {fp}
    1da4:	00010800 	andeq	r0, r1, r0, lsl #16
    1da8:	00000053 	andeq	r0, r0, r3, asr r0
    1dac:	00000000 	andeq	r0, r0, r0
    1db0:	00181800 	andseq	r1, r8, r0, lsl #16
    1db4:	00183008 	andseq	r3, r8, r8
    1db8:	50000108 	andpl	r0, r0, r8, lsl #2
    1dbc:	08001830 	stmdaeq	r0, {r4, r5, fp, ip}
    1dc0:	08001832 	stmdaeq	r0, {r1, r4, r5, fp, ip}
    1dc4:	7e700003 	cdpvc	0, 7, cr0, cr0, cr3, {0}
    1dc8:	0018329f 	mulseq	r8, pc, r2	; <UNPREDICTABLE>
    1dcc:	00184208 	andseq	r4, r8, r8, lsl #4
    1dd0:	70000308 	andvc	r0, r0, r8, lsl #6
    1dd4:	18429f7f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}^
    1dd8:	18460800 	stmdane	r6, {fp}^
    1ddc:	00010800 	andeq	r0, r1, r0, lsl #16
    1de0:	00184650 	andseq	r4, r8, r0, asr r6
    1de4:	00184808 	andseq	r4, r8, r8, lsl #16
    1de8:	70000308 	andvc	r0, r0, r8, lsl #6
    1dec:	00009f7e 	andeq	r9, r0, lr, ror pc
    1df0:	00000000 	andeq	r0, r0, r0
    1df4:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
    1df8:	181e0800 	ldmdane	lr, {fp}
    1dfc:	00010800 	andeq	r0, r1, r0, lsl #16
    1e00:	00181e51 	andseq	r1, r8, r1, asr lr
    1e04:	00184808 	andseq	r4, r8, r8, lsl #16
    1e08:	f3000408 	vshl.u8	d0, d8, d0
    1e0c:	009f5101 	addseq	r5, pc, r1, lsl #2
    1e10:	00000000 	andeq	r0, r0, r0
    1e14:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1e18:	20080018 	andcs	r0, r8, r8, lsl r0
    1e1c:	01080018 	tsteq	r8, r8, lsl r0
    1e20:	18205200 	stmdane	r0!, {r9, ip, lr}
    1e24:	18480800 	stmdane	r8, {fp}^
    1e28:	00040800 	andeq	r0, r4, r0, lsl #16
    1e2c:	9f5201f3 	svcls	0x005201f3
	...
    1e38:	08001828 	stmdaeq	r0, {r3, r5, fp, ip}
    1e3c:	0800182a 	stmdaeq	r0, {r1, r3, r5, fp, ip}
    1e40:	2a520001 	bcs	1481e4c <__Stack_Size+0x1481a4c>
    1e44:	42080018 	andmi	r0, r8, #24
    1e48:	0f080018 	svceq	0x00080018
    1e4c:	5201f300 	andpl	pc, r1, #0, 6
    1e50:	1affff0a 	bne	1a80 <__Stack_Size+0x1680>
    1e54:	26310123 	ldrtcs	r0, [r1], -r3, lsr #2
    1e58:	9f1c0073 	svcls	0x001c0073
    1e5c:	08001842 	stmdaeq	r0, {r1, r6, fp, ip}
    1e60:	08001844 	stmdaeq	r0, {r2, r6, fp, ip}
    1e64:	01f30010 	mvnseq	r0, r0, lsl r0
    1e68:	ffff0a52 			; <UNDEFINED> instruction: 0xffff0a52
    1e6c:	3101231a 	tstcc	r1, sl, lsl r3
    1e70:	20007326 	andcs	r7, r0, r6, lsr #6
    1e74:	18449f22 	stmdane	r4, {r1, r5, r8, r9, sl, fp, ip, pc}^
    1e78:	18480800 	stmdane	r8, {fp}^
    1e7c:	000f0800 	andeq	r0, pc, r0, lsl #16
    1e80:	0a5201f3 	beq	1482654 <__Stack_Size+0x1482254>
    1e84:	231affff 	tstcs	sl, #1020	; 0x3fc
    1e88:	73263101 	teqvc	r6, #1073741824	; 0x40000000
    1e8c:	009f1c00 	addseq	r1, pc, r0, lsl #24
    1e90:	00000000 	andeq	r0, r0, r0
    1e94:	32000000 	andcc	r0, r0, #0
    1e98:	3a080018 	bcc	201f00 <__Stack_Size+0x201b00>
    1e9c:	08080018 	stmdaeq	r8, {r3, r4}
    1ea0:	947e7000 	ldrbtls	r7, [lr], #-0
    1ea4:	1aff0801 	bne	fffc3eb0 <BootRAM+0xef34651>
    1ea8:	00183a9f 	mulseq	r8, pc, sl	; <UNPREDICTABLE>
    1eac:	00183e08 	andseq	r3, r8, r8, lsl #28
    1eb0:	54000108 	strpl	r0, [r0], #-264	; 0x108
    1eb4:	0800183e 	stmdaeq	r0, {r1, r2, r3, r4, r5, fp, ip}
    1eb8:	08001842 	stmdaeq	r0, {r1, r6, fp, ip}
    1ebc:	7e700008 	cdpvc	0, 7, cr0, cr0, cr8, {0}
    1ec0:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    1ec4:	00009f1a 	andeq	r9, r0, sl, lsl pc
    1ec8:	00000000 	andeq	r0, r0, r0
    1ecc:	18320000 	ldmdane	r2!, {}	; <UNPREDICTABLE>
    1ed0:	18420800 	stmdane	r2, {fp}^
    1ed4:	00120800 	andseq	r0, r2, r0, lsl #16
    1ed8:	01947f70 	orrseq	r7, r4, r0, ror pc
    1edc:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    1ee0:	947e7024 	ldrbtls	r7, [lr], #-36	; 0x24
    1ee4:	1aff0801 	bne	fffc3ef0 <BootRAM+0xef34691>
    1ee8:	00009f21 	andeq	r9, r0, r1, lsr #30
    1eec:	00000000 	andeq	r0, r0, r0
    1ef0:	18280000 	stmdane	r8!, {}	; <UNPREDICTABLE>
    1ef4:	182a0800 	stmdane	sl!, {fp}
    1ef8:	00010800 	andeq	r0, r1, r0, lsl #16
    1efc:	00184251 	andseq	r4, r8, r1, asr r2
    1f00:	00184408 	andseq	r4, r8, r8, lsl #8
    1f04:	73000a08 	movwvc	r0, #2568	; 0xa08
    1f08:	71243200 	teqvc	r4, r0, lsl #4
    1f0c:	04232200 	strteq	r2, [r3], #-512	; 0x200
    1f10:	0018449f 	mulseq	r8, pc, r4	; <UNPREDICTABLE>
    1f14:	00184608 	andseq	r4, r8, r8, lsl #12
    1f18:	73000a08 	movwvc	r0, #2568	; 0xa08
    1f1c:	7124327f 	teqvc	r4, pc, ror r2
    1f20:	04232200 	strteq	r2, [r3], #-512	; 0x200
    1f24:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f28:	00000000 	andeq	r0, r0, r0
    1f2c:	00184800 	andseq	r4, r8, r0, lsl #16
    1f30:	00185a08 	andseq	r5, r8, r8, lsl #20
    1f34:	50000108 	andpl	r0, r0, r8, lsl #2
    1f38:	08001866 	stmdaeq	r0, {r1, r2, r5, r6, fp, ip}
    1f3c:	08001868 	stmdaeq	r0, {r3, r5, r6, fp, ip}
    1f40:	0073000a 	rsbseq	r0, r3, sl
    1f44:	00702431 	rsbseq	r2, r0, r1, lsr r4
    1f48:	9f022322 	svcls	0x00022322
    1f4c:	08001868 	stmdaeq	r0, {r3, r5, r6, fp, ip}
    1f50:	0800186a 	stmdaeq	r0, {r1, r3, r5, r6, fp, ip}
    1f54:	7f73000a 	svcvc	0x0073000a
    1f58:	00702431 	rsbseq	r2, r0, r1, lsr r4
    1f5c:	9f022322 	svcls	0x00022322
	...
    1f68:	08001848 	stmdaeq	r0, {r3, r6, fp, ip}
    1f6c:	0800184e 	stmdaeq	r0, {r1, r2, r3, r6, fp, ip}
    1f70:	4e510001 	cdpmi	0, 5, cr0, cr1, cr1, {0}
    1f74:	6c080018 	stcvs	0, cr0, [r8], {24}
    1f78:	04080018 	streq	r0, [r8], #-24
    1f7c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1f80:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f84:	00000000 	andeq	r0, r0, r0
    1f88:	00184800 	andseq	r4, r8, r0, lsl #16
    1f8c:	00185008 	andseq	r5, r8, r8
    1f90:	52000108 	andpl	r0, r0, #8, 2
    1f94:	08001850 	stmdaeq	r0, {r4, r6, fp, ip}
    1f98:	0800186c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip}
    1f9c:	01f30004 	mvnseq	r0, r4
    1fa0:	00009f52 	andeq	r9, r0, r2, asr pc
    1fa4:	00000000 	andeq	r0, r0, r0
    1fa8:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
    1fac:	185a0800 	ldmdane	sl, {fp}^
    1fb0:	00010800 	andeq	r0, r1, r0, lsl #16
    1fb4:	00185a52 	andseq	r5, r8, r2, asr sl
    1fb8:	00186608 	andseq	r6, r8, r8, lsl #12
    1fbc:	f3000f08 	vpmax.f32	d0, d0, d8
    1fc0:	ff0a5201 			; <UNDEFINED> instruction: 0xff0a5201
    1fc4:	01231aff 	strdeq	r1, [r3, -pc]!
    1fc8:	00732631 	rsbseq	r2, r3, r1, lsr r6
    1fcc:	18669f1c 	stmdane	r6!, {r2, r3, r4, r8, r9, sl, fp, ip, pc}^
    1fd0:	18680800 	stmdane	r8!, {fp}^
    1fd4:	00100800 	andseq	r0, r0, r0, lsl #16
    1fd8:	0a5201f3 	beq	14827ac <__Stack_Size+0x14823ac>
    1fdc:	231affff 	tstcs	sl, #1020	; 0x3fc
    1fe0:	73263101 	teqvc	r6, #1073741824	; 0x40000000
    1fe4:	9f222000 	svcls	0x00222000
    1fe8:	08001868 	stmdaeq	r0, {r3, r5, r6, fp, ip}
    1fec:	0800186c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip}
    1ff0:	01f3000f 	mvnseq	r0, pc
    1ff4:	ffff0a52 			; <UNDEFINED> instruction: 0xffff0a52
    1ff8:	3101231a 	tstcc	r1, sl, lsl r3
    1ffc:	1c007326 	stcne	3, cr7, [r0], {38}	; 0x26
    2000:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2004:	00000000 	andeq	r0, r0, r0
    2008:	00185800 	andseq	r5, r8, r0, lsl #16
    200c:	00185a08 	andseq	r5, r8, r8, lsl #20
    2010:	51000108 	tstpl	r0, r8, lsl #2
    2014:	0800185e 	stmdaeq	r0, {r1, r2, r3, r4, r6, fp, ip}
    2018:	08001868 	stmdaeq	r0, {r3, r5, r6, fp, ip}
    201c:	0073000a 	rsbseq	r0, r3, sl
    2020:	00712432 	rsbseq	r2, r1, r2, lsr r4
    2024:	9f042322 	svcls	0x00042322
    2028:	08001868 	stmdaeq	r0, {r3, r5, r6, fp, ip}
    202c:	0800186a 	stmdaeq	r0, {r1, r3, r5, r6, fp, ip}
    2030:	7f73000a 	svcvc	0x0073000a
    2034:	00712432 	rsbseq	r2, r1, r2, lsr r4
    2038:	9f042322 	svcls	0x00042322
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	00000000 	andeq	r0, r0, r0
   8:	080000f0 	stmdaeq	r0, {r4, r5, r6, r7}
   c:	08000138 	stmdaeq	r0, {r3, r4, r5, r8}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	08000138 	stmdaeq	r0, {r3, r4, r5, r8}
  14:	0800013c 	stmdaeq	r0, {r2, r3, r4, r5, r8}
	...
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	0800013c 	stmdaeq	r0, {r2, r3, r4, r5, r8}
  24:	0800013e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8}
  28:	0800013e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8}
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	08000140 	stmdaeq	r0, {r6, r8}
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	08000140 	stmdaeq	r0, {r6, r8}
  34:	08000142 	stmdaeq	r0, {r1, r6, r8}
  38:	08000142 	stmdaeq	r0, {r1, r6, r8}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	0800014e 	stmdaeq	r0, {r1, r2, r3, r6, r8}
  48:	08000150 	stmdaeq	r0, {r4, r6, r8}
  4c:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}
  54:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
  58:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
  5c:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  60:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  64:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
  68:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
  6c:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
  70:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
  74:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
  78:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
  7c:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  80:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  84:	08000180 	stmdaeq	r0, {r7, r8}
  88:	08000180 	stmdaeq	r0, {r7, r8}
  8c:	08000228 	stmdaeq	r0, {r3, r5, r9}
  90:	08000228 	stmdaeq	r0, {r3, r5, r9}
  94:	08000288 	stmdaeq	r0, {r3, r7, r9}
  98:	08000288 	stmdaeq	r0, {r3, r7, r9}
  9c:	08000294 	stmdaeq	r0, {r2, r4, r7, r9}
  a0:	08000294 	stmdaeq	r0, {r2, r4, r7, r9}
  a4:	080002a0 	stmdaeq	r0, {r5, r7, r9}
  a8:	080002a0 	stmdaeq	r0, {r5, r7, r9}
  ac:	080002c0 	stmdaeq	r0, {r6, r7, r9}
  b0:	080002c0 	stmdaeq	r0, {r6, r7, r9}
  b4:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
  b8:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
  bc:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
  c0:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
  c4:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
  c8:	00000001 	andeq	r0, r0, r1
  cc:	00000001 	andeq	r0, r0, r1
  d0:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
  d4:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
  d8:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
  dc:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
  e0:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
  e4:	08000428 	stmdaeq	r0, {r3, r5, sl}
  e8:	08000428 	stmdaeq	r0, {r3, r5, sl}
  ec:	08000450 	stmdaeq	r0, {r4, r6, sl}
  f0:	08000450 	stmdaeq	r0, {r4, r6, sl}
  f4:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
  f8:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
  fc:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
 100:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
 104:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
 108:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
 10c:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
 110:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
 114:	080004f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl}
 118:	080004f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl}
 11c:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
	...
 128:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
 12c:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
	...
 138:	0800085a 	stmdaeq	r0, {r1, r3, r4, r6, fp}
 13c:	0800085e 	stmdaeq	r0, {r1, r2, r3, r4, r6, fp}
 140:	08000860 	stmdaeq	r0, {r5, r6, fp}
 144:	08000862 	stmdaeq	r0, {r1, r5, r6, fp}
	...
 150:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 154:	0800063a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl}
 158:	00000001 	andeq	r0, r0, r1
 15c:	00000001 	andeq	r0, r0, r1
 160:	0800063c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl}
 164:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
 168:	00000001 	andeq	r0, r0, r1
 16c:	00000001 	andeq	r0, r0, r1
 170:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
 174:	08000694 	stmdaeq	r0, {r2, r4, r7, r9, sl}
 178:	08000694 	stmdaeq	r0, {r2, r4, r7, r9, sl}
 17c:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
 180:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
 184:	0800070c 	stmdaeq	r0, {r2, r3, r8, r9, sl}
 188:	0800070c 	stmdaeq	r0, {r2, r3, r8, r9, sl}
 18c:	08000728 	stmdaeq	r0, {r3, r5, r8, r9, sl}
 190:	08000728 	stmdaeq	r0, {r3, r5, r8, r9, sl}
 194:	0800073c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl}
 198:	0800073c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl}
 19c:	08000754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl}
 1a0:	08000754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl}
 1a4:	08000780 	stmdaeq	r0, {r7, r8, r9, sl}
 1a8:	08000780 	stmdaeq	r0, {r7, r8, r9, sl}
 1ac:	080007c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl}
 1b0:	080007c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl}
 1b4:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
 1b8:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
 1bc:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
 1c0:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
 1c4:	08000880 	stmdaeq	r0, {r7, fp}
 1c8:	08000880 	stmdaeq	r0, {r7, fp}
 1cc:	08000894 	stmdaeq	r0, {r2, r4, r7, fp}
 1d0:	08000894 	stmdaeq	r0, {r2, r4, r7, fp}
 1d4:	080008c8 	stmdaeq	r0, {r3, r6, r7, fp}
 1d8:	00000001 	andeq	r0, r0, r1
 1dc:	00000001 	andeq	r0, r0, r1
 1e0:	080008c8 	stmdaeq	r0, {r3, r6, r7, fp}
 1e4:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
 1e8:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
 1ec:	08000920 	stmdaeq	r0, {r5, r8, fp}
 1f0:	08000920 	stmdaeq	r0, {r5, r8, fp}
 1f4:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
 1f8:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
 1fc:	0800094a 	stmdaeq	r0, {r1, r3, r6, r8, fp}
 200:	0800094c 	stmdaeq	r0, {r2, r3, r6, r8, fp}
 204:	0800095c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp}
 208:	0800095c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp}
 20c:	08000974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp}
	...
 218:	08000974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp}
 21c:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
 220:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
 224:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
 228:	00000001 	andeq	r0, r0, r1
 22c:	00000001 	andeq	r0, r0, r1
 230:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
 234:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
 238:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
 23c:	08000a44 	stmdaeq	r0, {r2, r6, r9, fp}
 240:	08000a44 	stmdaeq	r0, {r2, r6, r9, fp}
 244:	08000a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp}
 248:	08000a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp}
 24c:	08000aa0 	stmdaeq	r0, {r5, r7, r9, fp}
 250:	08000aa0 	stmdaeq	r0, {r5, r7, r9, fp}
 254:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
 258:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
 25c:	08000d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp}
 260:	00000001 	andeq	r0, r0, r1
 264:	00000001 	andeq	r0, r0, r1
 268:	00000001 	andeq	r0, r0, r1
 26c:	00000001 	andeq	r0, r0, r1
 270:	08000d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp}
 274:	08000d44 	stmdaeq	r0, {r2, r6, r8, sl, fp}
 278:	08000d44 	stmdaeq	r0, {r2, r6, r8, sl, fp}
 27c:	08000d48 	stmdaeq	r0, {r3, r6, r8, sl, fp}
	...
 288:	00000001 	andeq	r0, r0, r1
 28c:	00000001 	andeq	r0, r0, r1
 290:	00000001 	andeq	r0, r0, r1
 294:	00000001 	andeq	r0, r0, r1
	...
 2a0:	08000e42 	stmdaeq	r0, {r1, r6, r9, sl, fp}
 2a4:	08000e44 	stmdaeq	r0, {r2, r6, r9, sl, fp}
 2a8:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
 2ac:	08000e80 	stmdaeq	r0, {r7, r9, sl, fp}
	...
 2b8:	00000001 	andeq	r0, r0, r1
 2bc:	00000001 	andeq	r0, r0, r1
 2c0:	00000001 	andeq	r0, r0, r1
 2c4:	00000001 	andeq	r0, r0, r1
	...
 2d0:	00000001 	andeq	r0, r0, r1
 2d4:	00000001 	andeq	r0, r0, r1
 2d8:	00000001 	andeq	r0, r0, r1
 2dc:	00000001 	andeq	r0, r0, r1
	...
 2e8:	00000001 	andeq	r0, r0, r1
 2ec:	00000001 	andeq	r0, r0, r1
 2f0:	00000001 	andeq	r0, r0, r1
 2f4:	00000001 	andeq	r0, r0, r1
 2f8:	00000001 	andeq	r0, r0, r1
 2fc:	00000001 	andeq	r0, r0, r1
	...
 308:	00000001 	andeq	r0, r0, r1
 30c:	00000001 	andeq	r0, r0, r1
 310:	00000001 	andeq	r0, r0, r1
 314:	00000001 	andeq	r0, r0, r1
	...
 320:	00000001 	andeq	r0, r0, r1
 324:	00000001 	andeq	r0, r0, r1
 328:	00000001 	andeq	r0, r0, r1
 32c:	00000001 	andeq	r0, r0, r1
	...
 338:	00000001 	andeq	r0, r0, r1
 33c:	00000001 	andeq	r0, r0, r1
 340:	00000001 	andeq	r0, r0, r1
 344:	00000001 	andeq	r0, r0, r1
 348:	00000001 	andeq	r0, r0, r1
 34c:	00000001 	andeq	r0, r0, r1
 350:	00000001 	andeq	r0, r0, r1
 354:	00000001 	andeq	r0, r0, r1
 358:	00000001 	andeq	r0, r0, r1
 35c:	00000001 	andeq	r0, r0, r1
 360:	00000001 	andeq	r0, r0, r1
 364:	00000001 	andeq	r0, r0, r1
 368:	00000001 	andeq	r0, r0, r1
 36c:	00000001 	andeq	r0, r0, r1
 370:	00000001 	andeq	r0, r0, r1
 374:	00000001 	andeq	r0, r0, r1
 378:	00000001 	andeq	r0, r0, r1
 37c:	00000001 	andeq	r0, r0, r1
 380:	00000001 	andeq	r0, r0, r1
 384:	00000001 	andeq	r0, r0, r1
 388:	00000001 	andeq	r0, r0, r1
 38c:	00000001 	andeq	r0, r0, r1
 390:	00000001 	andeq	r0, r0, r1
 394:	00000001 	andeq	r0, r0, r1
 398:	00000001 	andeq	r0, r0, r1
 39c:	00000001 	andeq	r0, r0, r1
 3a0:	08000d48 	stmdaeq	r0, {r3, r6, r8, sl, fp}
 3a4:	08000d72 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, fp}
 3a8:	00000001 	andeq	r0, r0, r1
 3ac:	00000001 	andeq	r0, r0, r1
 3b0:	00000001 	andeq	r0, r0, r1
 3b4:	00000001 	andeq	r0, r0, r1
 3b8:	00000001 	andeq	r0, r0, r1
 3bc:	00000001 	andeq	r0, r0, r1
 3c0:	00000001 	andeq	r0, r0, r1
 3c4:	00000001 	andeq	r0, r0, r1
 3c8:	00000001 	andeq	r0, r0, r1
 3cc:	00000001 	andeq	r0, r0, r1
 3d0:	08000d72 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, fp}
 3d4:	08000d90 	stmdaeq	r0, {r4, r7, r8, sl, fp}
 3d8:	00000001 	andeq	r0, r0, r1
 3dc:	00000001 	andeq	r0, r0, r1
 3e0:	00000001 	andeq	r0, r0, r1
 3e4:	00000001 	andeq	r0, r0, r1
 3e8:	08000d90 	stmdaeq	r0, {r4, r7, r8, sl, fp}
 3ec:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 3f0:	00000001 	andeq	r0, r0, r1
 3f4:	00000001 	andeq	r0, r0, r1
 3f8:	00000001 	andeq	r0, r0, r1
 3fc:	00000001 	andeq	r0, r0, r1
 400:	00000001 	andeq	r0, r0, r1
 404:	00000001 	andeq	r0, r0, r1
 408:	00000001 	andeq	r0, r0, r1
 40c:	00000001 	andeq	r0, r0, r1
 410:	00000001 	andeq	r0, r0, r1
 414:	00000001 	andeq	r0, r0, r1
 418:	00000001 	andeq	r0, r0, r1
 41c:	00000001 	andeq	r0, r0, r1
 420:	00000001 	andeq	r0, r0, r1
 424:	00000001 	andeq	r0, r0, r1
 428:	00000001 	andeq	r0, r0, r1
 42c:	00000001 	andeq	r0, r0, r1
 430:	00000001 	andeq	r0, r0, r1
 434:	00000001 	andeq	r0, r0, r1
 438:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 43c:	08000dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp}
 440:	08000dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp}
 444:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
 448:	00000001 	andeq	r0, r0, r1
 44c:	00000001 	andeq	r0, r0, r1
 450:	00000001 	andeq	r0, r0, r1
 454:	00000001 	andeq	r0, r0, r1
 458:	00000001 	andeq	r0, r0, r1
 45c:	00000001 	andeq	r0, r0, r1
 460:	00000001 	andeq	r0, r0, r1
 464:	00000001 	andeq	r0, r0, r1
 468:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
 46c:	08000e08 	stmdaeq	r0, {r3, r9, sl, fp}
 470:	08000e08 	stmdaeq	r0, {r3, r9, sl, fp}
 474:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
 478:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
 47c:	08000e40 	stmdaeq	r0, {r6, r9, sl, fp}
 480:	00000001 	andeq	r0, r0, r1
 484:	00000001 	andeq	r0, r0, r1
 488:	08000e40 	stmdaeq	r0, {r6, r9, sl, fp}
 48c:	08000e80 	stmdaeq	r0, {r7, r9, sl, fp}
 490:	00000001 	andeq	r0, r0, r1
 494:	00000001 	andeq	r0, r0, r1
 498:	00000001 	andeq	r0, r0, r1
 49c:	00000001 	andeq	r0, r0, r1
 4a0:	00000001 	andeq	r0, r0, r1
 4a4:	00000001 	andeq	r0, r0, r1
 4a8:	00000001 	andeq	r0, r0, r1
 4ac:	00000001 	andeq	r0, r0, r1
 4b0:	00000001 	andeq	r0, r0, r1
 4b4:	00000001 	andeq	r0, r0, r1
 4b8:	00000001 	andeq	r0, r0, r1
 4bc:	00000001 	andeq	r0, r0, r1
 4c0:	00000001 	andeq	r0, r0, r1
 4c4:	00000001 	andeq	r0, r0, r1
 4c8:	00000001 	andeq	r0, r0, r1
 4cc:	00000001 	andeq	r0, r0, r1
 4d0:	00000001 	andeq	r0, r0, r1
 4d4:	00000001 	andeq	r0, r0, r1
 4d8:	00000001 	andeq	r0, r0, r1
 4dc:	00000001 	andeq	r0, r0, r1
 4e0:	00000001 	andeq	r0, r0, r1
 4e4:	00000001 	andeq	r0, r0, r1
 4e8:	00000001 	andeq	r0, r0, r1
 4ec:	00000001 	andeq	r0, r0, r1
 4f0:	00000001 	andeq	r0, r0, r1
 4f4:	00000001 	andeq	r0, r0, r1
 4f8:	00000001 	andeq	r0, r0, r1
 4fc:	00000001 	andeq	r0, r0, r1
 500:	00000001 	andeq	r0, r0, r1
 504:	00000001 	andeq	r0, r0, r1
 508:	00000001 	andeq	r0, r0, r1
 50c:	00000001 	andeq	r0, r0, r1
	...
 518:	08000e80 	stmdaeq	r0, {r7, r9, sl, fp}
 51c:	08000fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp}
 520:	00000001 	andeq	r0, r0, r1
 524:	00000001 	andeq	r0, r0, r1
	...
 530:	08000fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp}
 534:	0800100c 	stmdaeq	r0, {r2, r3, ip}
	...
 540:	08001314 	stmdaeq	r0, {r2, r4, r8, r9, ip}
 544:	0800131c 	stmdaeq	r0, {r2, r3, r4, r8, r9, ip}
 548:	08001320 	stmdaeq	r0, {r5, r8, r9, ip}
 54c:	08001322 	stmdaeq	r0, {r1, r5, r8, r9, ip}
 550:	08001324 	stmdaeq	r0, {r2, r5, r8, r9, ip}
 554:	08001334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip}
	...
 560:	080014ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, ip}
 564:	08001694 	stmdaeq	r0, {r2, r4, r7, r9, sl, ip}
 568:	0800169c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip}
 56c:	080016bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, ip}
	...
 578:	0800100c 	stmdaeq	r0, {r2, r3, ip}
 57c:	08001030 	stmdaeq	r0, {r4, r5, ip}
 580:	08001030 	stmdaeq	r0, {r4, r5, ip}
 584:	08001054 	stmdaeq	r0, {r2, r4, r6, ip}
 588:	08001054 	stmdaeq	r0, {r2, r4, r6, ip}
 58c:	080010e4 	stmdaeq	r0, {r2, r5, r6, r7, ip}
 590:	080010e4 	stmdaeq	r0, {r2, r5, r6, r7, ip}
 594:	0800118c 	stmdaeq	r0, {r2, r3, r7, r8, ip}
 598:	0800118c 	stmdaeq	r0, {r2, r3, r7, r8, ip}
 59c:	080011c4 	stmdaeq	r0, {r2, r6, r7, r8, ip}
 5a0:	080011c4 	stmdaeq	r0, {r2, r6, r7, r8, ip}
 5a4:	0800120c 	stmdaeq	r0, {r2, r3, r9, ip}
 5a8:	0800120c 	stmdaeq	r0, {r2, r3, r9, ip}
 5ac:	080012dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, ip}
 5b0:	080012dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, ip}
 5b4:	08001360 	stmdaeq	r0, {r5, r6, r8, r9, ip}
 5b8:	08001360 	stmdaeq	r0, {r5, r6, r8, r9, ip}
 5bc:	08001384 	stmdaeq	r0, {r2, r7, r8, r9, ip}
 5c0:	08001384 	stmdaeq	r0, {r2, r7, r8, r9, ip}
 5c4:	080013a0 	stmdaeq	r0, {r5, r7, r8, r9, ip}
 5c8:	080013a0 	stmdaeq	r0, {r5, r7, r8, r9, ip}
 5cc:	080013e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip}
 5d0:	080013e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip}
 5d4:	080016bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, ip}
 5d8:	080016bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, ip}
 5dc:	08001784 	stmdaeq	r0, {r2, r7, r8, r9, sl, ip}
 5e0:	08001784 	stmdaeq	r0, {r2, r7, r8, r9, sl, ip}
 5e4:	080017bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip}
 5e8:	080017bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip}
 5ec:	08001818 	stmdaeq	r0, {r3, r4, fp, ip}
 5f0:	00000001 	andeq	r0, r0, r1
 5f4:	00000001 	andeq	r0, r0, r1
	...
 600:	08001818 	stmdaeq	r0, {r3, r4, fp, ip}
 604:	08001848 	stmdaeq	r0, {r3, r6, fp, ip}
 608:	08001848 	stmdaeq	r0, {r3, r6, fp, ip}
 60c:	0800186c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip}
	...
