
build/maple_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000f0  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000175c  080000f0  080000f0  000080f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000002d0  20000000  0800184c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000044  200002d0  08001b1c  000102d0  2**2
                  ALLOC
  4 .bss.bIntPackSOF 00000001  20000314  08001b60  000102d0  2**0
                  ALLOC
  5 .bss.bDeviceState 00000004  20000318  08001b64  000102d0  2**2
                  ALLOC
  6 .bss.recvBuffer 00000800  2000031c  08001b68  000102d0  2**2
                  ALLOC
  7 .bss.uploadBlockLen 00000002  20000b1c  08002368  000102d0  2**1
                  ALLOC
  8 .bss.thisBlockLen 00000002  20000b1e  0800236a  000102d0  2**1
                  ALLOC
  9 .bss.userFirmwareLen 00000004  20000b20  0800236c  000102d0  2**2
                  ALLOC
 10 .bss.userUploadType 00000001  20000b24  08002370  000102d0  2**0
                  ALLOC
 11 .bss.dfuAppStatus 00000006  20000b25  08002371  000102d0  2**0
                  ALLOC
 12 .bss.dfuBusy  00000001  20000b2b  08002377  000102d0  2**0
                  ALLOC
 13 .bss.Data_Mul_MaxPacketSize 00000001  20000b2c  08002378  000102d0  2**0
                  ALLOC
 14 ._usrstack    00000103  20000b2d  08002379  000102d0  2**0
                  ALLOC
 15 .comment      00000080  00000000  00000000  000102d0  2**0
                  CONTENTS, READONLY
 16 .ARM.attributes 0000002f  00000000  00000000  00010350  2**0
                  CONTENTS, READONLY
 17 .debug_aranges 000005e8  00000000  00000000  00010380  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_info   0000458f  00000000  00000000  00010968  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 000013c0  00000000  00000000  00014ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0000148e  00000000  00000000  000162b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  00000c70  00000000  00000000  00017748  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    0000180e  00000000  00000000  000183b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0000201e  00000000  00000000  00019bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_ranges 00000618  00000000  00000000  0001bbe8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20005000 	andcs	r5, r0, r0
 8000004:	080000f1 	stmdaeq	r0, {r0, r4, r5, r6, r7}
 8000008:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800000c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000010:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000014:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000018:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
	...
 800002c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000030:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800003c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000040:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000044:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000048:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800004c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000050:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000054:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000058:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800005c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000060:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000064:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000068:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800006c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000070:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000074:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000078:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800007c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000080:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000084:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000088:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800008c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000090:	080004f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, sl}
 8000094:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 8000098:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 800009c:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000a0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000a4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000a8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000ac:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000b0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000b4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000b8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000bc:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000c0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000c4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000c8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000cc:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000d0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000d4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000d8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000dc:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000e0:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000e4:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000e8:	08000139 	stmdaeq	r0, {r0, r3, r4, r5, r8}
 80000ec:	f108f85f 			; <UNDEFINED> instruction: 0xf108f85f

Disassembly of section .text:

080000f0 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80000f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80000f2:	f000 b804 	b.w	80000fe <LoopCopyDataInit>

080000f6 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80000f6:	4b0b      	ldr	r3, [pc, #44]	; (8000124 <LoopFillZerobss+0xe>)
	ldr	r3, [r3, r1]
 80000f8:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80000fa:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80000fc:	3104      	adds	r1, #4

080000fe <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80000fe:	480a      	ldr	r0, [pc, #40]	; (8000128 <LoopFillZerobss+0x12>)
	ldr	r3, =_edata
 8000100:	4b0a      	ldr	r3, [pc, #40]	; (800012c <LoopFillZerobss+0x16>)
	adds	r2, r0, r1
 8000102:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000104:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000106:	f4ff aff6 	bcc.w	80000f6 <CopyDataInit>
	ldr	r2, =_sbss
 800010a:	4a09      	ldr	r2, [pc, #36]	; (8000130 <LoopFillZerobss+0x1a>)
	b	LoopFillZerobss
 800010c:	f000 b803 	b.w	8000116 <LoopFillZerobss>

08000110 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000110:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000112:	f842 3b04 	str.w	r3, [r2], #4

08000116 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000116:	4b07      	ldr	r3, [pc, #28]	; (8000134 <LoopFillZerobss+0x1e>)
	cmp	r2, r3
 8000118:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800011a:	f4ff aff9 	bcc.w	8000110 <FillZerobss>
/* Call the application's entry point.*/
	bl	main
 800011e:	f000 fa45 	bl	80005ac <main>
	bx	lr
 8000122:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000124:	0800184c 	stmdaeq	r0, {r2, r3, r6, fp, ip}
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000128:	20000000 	andcs	r0, r0, r0
	ldr	r3, =_edata
 800012c:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000130:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000134:	20000314 	andcs	r0, r0, r4, lsl r3

08000138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000138:	f7ff bffe 	b.w	8000138 <ADC1_2_IRQHandler>

0800013c <nothingProc>:
    volatile RESUME_STATE eState;
    volatile u8 bESOFcnt;
} ResumeS;

/* dummy proc */
void nothingProc(void) {
 800013c:	4770      	bx	lr

0800013e <usbStatusIn>:

    bDeviceState = ATTACHED;
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
}

void usbStatusIn(void) {
 800013e:	4770      	bx	lr

08000140 <usbStatusOut>:
}

void usbStatusOut(void) {
 8000140:	4770      	bx	lr

08000142 <usbGetInterfaceSetting>:
}

RESULT usbGetInterfaceSetting(u8 interface, u8 altSetting) {
    /* alt setting 0 -> program RAM, alt setting 1 -> FLASH */
    if (interface > NUM_ALT_SETTINGS) {
        return USB_UNSUPPORT;
 8000142:	2803      	cmp	r0, #3
    } else {
        return USB_SUCCESS;
    }
}
 8000144:	bf8c      	ite	hi
 8000146:	2002      	movhi	r0, #2
 8000148:	2000      	movls	r0, #0
 800014a:	4770      	bx	lr

0800014c <usbGetConfiguration>:
 * These are the USER STANDARD REQUESTS, they are handled
 * in the core but we are given these callbacks at the
 * application level
 *******************************************/

void usbGetConfiguration(void) {
 800014c:	4770      	bx	lr
	...

08000150 <usbSetConfiguration>:
    /* nothing process */
}

void usbSetConfiguration(void) {
    if (pInformation->Current_Configuration != 0) {
 8000150:	4b03      	ldr	r3, [pc, #12]	; (8000160 <usbSetConfiguration+0x10>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	7a9b      	ldrb	r3, [r3, #10]
 8000156:	b113      	cbz	r3, 800015e <usbSetConfiguration+0xe>
        bDeviceState = CONFIGURED;
 8000158:	4b02      	ldr	r3, [pc, #8]	; (8000164 <usbSetConfiguration+0x14>)
 800015a:	2205      	movs	r2, #5
 800015c:	601a      	str	r2, [r3, #0]
 800015e:	4770      	bx	lr
 8000160:	2000030c 	andcs	r0, r0, ip, lsl #6
 8000164:	20000318 	andcs	r0, r0, r8, lsl r3

08000168 <usbGetInterface>:
    }
}

void usbGetInterface(void) {
 8000168:	4770      	bx	lr

0800016a <usbSetInterface>:
    /* nothing process */
}

void usbSetInterface(void) {
 800016a:	4770      	bx	lr

0800016c <usbGetStatus>:
    /* nothing process */
}

void usbGetStatus(void) {
 800016c:	4770      	bx	lr

0800016e <usbClearFeature>:
    /* nothing process */
}

void usbClearFeature(void) {
 800016e:	4770      	bx	lr

08000170 <usbSetEndpointFeature>:
    /* nothing process */
}

void usbSetEndpointFeature(void) {
 8000170:	4770      	bx	lr

08000172 <usbSetDeviceFeature>:
    /* nothing process */
}

void usbSetDeviceFeature(void) {
 8000172:	4770      	bx	lr

08000174 <usbSetDeviceAddress>:
    /* nothing process */
}

void usbSetDeviceAddress(void) {
    bDeviceState = ADDRESSED;
 8000174:	4b01      	ldr	r3, [pc, #4]	; (800017c <usbSetDeviceAddress+0x8>)
 8000176:	2204      	movs	r2, #4
 8000178:	601a      	str	r2, [r3, #0]
 800017a:	4770      	bx	lr
 800017c:	20000318 	andcs	r0, r0, r8, lsl r3

08000180 <usbReset>:

    usbEnbISR(); /* configure the cortex M3 private peripheral NVIC */
    bDeviceState = UNCONNECTED;
}

void usbReset(void) {
 8000180:	b510      	push	{r4, lr}
    dfuUpdateByReset();
 8000182:	f000 fc15 	bl	80009b0 <dfuUpdateByReset>

    pInformation->Current_Configuration = 0;
 8000186:	4b21      	ldr	r3, [pc, #132]	; (800020c <usbReset+0x8c>)
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000188:	4a21      	ldr	r2, [pc, #132]	; (8000210 <usbReset+0x90>)
}

void usbReset(void) {
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2400      	movs	r4, #0
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 800018e:	6812      	ldr	r2, [r2, #0]
}

void usbReset(void) {
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 8000190:	729c      	strb	r4, [r3, #10]
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000192:	79d2      	ldrb	r2, [r2, #7]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);

    Clear_Status_Out(ENDP0);
 8000194:	4620      	mov	r0, r4

void usbReset(void) {
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000196:	725a      	strb	r2, [r3, #9]

    _SetBTABLE(BTABLE_ADDRESS);
 8000198:	4a1e      	ldr	r2, [pc, #120]	; (8000214 <usbReset+0x94>)

    /* setup the ctrl endpoint */
    _SetEPType(ENDP0, EP_CONTROL);
 800019a:	4b1f      	ldr	r3, [pc, #124]	; (8000218 <usbReset+0x98>)
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];

    _SetBTABLE(BTABLE_ADDRESS);
 800019c:	6014      	str	r4, [r2, #0]

    /* setup the ctrl endpoint */
    _SetEPType(ENDP0, EP_CONTROL);
 800019e:	6819      	ldr	r1, [r3, #0]
 80001a0:	f421 41ec 	bic.w	r1, r1, #30208	; 0x7600
 80001a4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80001a8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80001ac:	b289      	uxth	r1, r1
 80001ae:	6019      	str	r1, [r3, #0]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);
 80001b0:	6819      	ldr	r1, [r3, #0]
 80001b2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80001b6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80001ba:	b289      	uxth	r1, r1
 80001bc:	f081 0110 	eor.w	r1, r1, #16
 80001c0:	6019      	str	r1, [r3, #0]

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 80001c2:	6811      	ldr	r1, [r2, #0]
 80001c4:	4b15      	ldr	r3, [pc, #84]	; (800021c <usbReset+0x9c>)
 80001c6:	b289      	uxth	r1, r1
 80001c8:	440b      	add	r3, r1
 80001ca:	005b      	lsls	r3, r3, #1
 80001cc:	2140      	movs	r1, #64	; 0x40
 80001ce:	6019      	str	r1, [r3, #0]
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 80001d0:	6813      	ldr	r3, [r2, #0]
 80001d2:	2280      	movs	r2, #128	; 0x80
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80001da:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80001de:	005b      	lsls	r3, r3, #1
 80001e0:	601a      	str	r2, [r3, #0]

    Clear_Status_Out(ENDP0);
 80001e2:	f000 fdc5 	bl	8000d70 <Clear_Status_Out>

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
 80001e6:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <usbReset+0xa0>)
 80001e8:	4620      	mov	r0, r4
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80001f0:	f000 fe16 	bl	8000e20 <SetEPRxCount>
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);
 80001f4:	4620      	mov	r0, r4
 80001f6:	f000 fdac 	bl	8000d52 <SetEPRxValid>

    bDeviceState = ATTACHED;
 80001fa:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <usbReset+0xa4>)
 80001fc:	2201      	movs	r2, #1
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 80001fe:	4620      	mov	r0, r4
}
 8000200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);

    bDeviceState = ATTACHED;
 8000204:	601a      	str	r2, [r3, #0]
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 8000206:	f001 baad 	b.w	8001764 <SetDeviceAddress>
 800020a:	bf00      	nop
 800020c:	2000030c 	andcs	r0, r0, ip, lsl #6
 8000210:	200002c0 	andcs	r0, r0, r0, asr #5
 8000214:	40005c50 	andmi	r5, r0, r0, asr ip
 8000218:	40005c00 	andmi	r5, r0, r0, lsl #24
 800021c:	20003004 	andcs	r3, r0, r4
 8000220:	200002e4 	andcs	r0, r0, r4, ror #5
 8000224:	20000318 	andcs	r0, r0, r8, lsl r3

08000228 <usbDataSetup>:
}

void usbStatusOut(void) {
}

RESULT usbDataSetup(u8 request) {
 8000228:	b538      	push	{r3, r4, r5, lr}
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    /* handle dfu class requests */
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 800022a:	4b12      	ldr	r3, [pc, #72]	; (8000274 <usbDataSetup+0x4c>)
}

void usbStatusOut(void) {
}

RESULT usbDataSetup(u8 request) {
 800022c:	4605      	mov	r5, r0
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    /* handle dfu class requests */
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	461c      	mov	r4, r3
 8000232:	7812      	ldrb	r2, [r2, #0]
 8000234:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000238:	2a21      	cmp	r2, #33	; 0x21
 800023a:	d119      	bne.n	8000270 <usbDataSetup+0x48>
        if (dfuUpdateByRequest()) {
 800023c:	f000 fc4e 	bl	8000adc <dfuUpdateByRequest>
 8000240:	b1b0      	cbz	r0, 8000270 <usbDataSetup+0x48>
            /* successfull state transition, handle the request */
            switch (request) {
 8000242:	1e68      	subs	r0, r5, #1
 8000244:	2804      	cmp	r0, #4
 8000246:	d813      	bhi.n	8000270 <usbDataSetup+0x48>
 8000248:	e8df f000 	tbb	[pc, r0]
 800024c:	12070503 	andne	r0, r7, #12582912	; 0xc00000
 8000250:	4b090009 	blmi	824027c <_etext+0x23ea30>
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
                break;
            case(DFU_DNLOAD):
                CopyRoutine = dfuCopyDNLOAD;
                break;
 8000254:	e004      	b.n	8000260 <usbDataSetup+0x38>
            case(DFU_UPLOAD):
                CopyRoutine = dfuCopyUPLOAD;
 8000256:	4b09      	ldr	r3, [pc, #36]	; (800027c <usbDataSetup+0x54>)
                break;
 8000258:	e002      	b.n	8000260 <usbDataSetup+0x38>
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
        if (dfuUpdateByRequest()) {
            /* successfull state transition, handle the request */
            switch (request) {
            case(DFU_GETSTATUS):
                CopyRoutine = dfuCopyStatus;
 800025a:	4b09      	ldr	r3, [pc, #36]	; (8000280 <usbDataSetup+0x58>)
 800025c:	e000      	b.n	8000260 <usbDataSetup+0x38>
                break;
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <usbDataSetup+0x5c>)
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000260:	6822      	ldr	r2, [r4, #0]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000262:	2400      	movs	r4, #0
        (*CopyRoutine)(0);
 8000264:	4620      	mov	r0, r4
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000266:	6193      	str	r3, [r2, #24]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000268:	8254      	strh	r4, [r2, #18]
        (*CopyRoutine)(0);
 800026a:	4798      	blx	r3

        return USB_SUCCESS;
 800026c:	4620      	mov	r0, r4
 800026e:	bd38      	pop	{r3, r4, r5, pc}
    }

    return USB_UNSUPPORT;
 8000270:	2002      	movs	r0, #2
}
 8000272:	bd38      	pop	{r3, r4, r5, pc}
 8000274:	2000030c 	andcs	r0, r0, ip, lsl #6
 8000278:	08000a25 	stmdaeq	r0, {r0, r2, r5, r9, fp}
 800027c:	08000a4d 	stmdaeq	r0, {r0, r2, r3, r6, r9, fp}
 8000280:	08000a0d 	stmdaeq	r0, {r0, r2, r3, r9, fp}
 8000284:	080009f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, fp}

08000288 <usbGetDeviceDescriptor>:
        return USB_SUCCESS;
    }
}

u8 *usbGetDeviceDescriptor(u16 len) {
    return Standard_GetDescriptorData(len, &usbDeviceDescriptorDFU);
 8000288:	4901      	ldr	r1, [pc, #4]	; (8000290 <usbGetDeviceDescriptor+0x8>)
 800028a:	f001 b86b 	b.w	8001364 <Standard_GetDescriptorData>
 800028e:	bf00      	nop
 8000290:	2000014c 	andcs	r0, r0, ip, asr #2

08000294 <usbGetConfigDescriptor>:
}

u8 *usbGetConfigDescriptor(u16 len) {
    return Standard_GetDescriptorData(len, &usbConfigDescriptorDFU);
 8000294:	4901      	ldr	r1, [pc, #4]	; (800029c <usbGetConfigDescriptor+0x8>)
 8000296:	f001 b865 	b.w	8001364 <Standard_GetDescriptorData>
 800029a:	bf00      	nop
 800029c:	200002c0 	andcs	r0, r0, r0, asr #5

080002a0 <usbGetStringDescriptor>:
}

u8 *usbGetStringDescriptor(u16 len) {
    u8 strIndex = pInformation->USBwValue0;
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <usbGetStringDescriptor+0x18>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	789b      	ldrb	r3, [r3, #2]
    if (strIndex > STR_DESC_LEN) {
 80002a6:	2b07      	cmp	r3, #7
 80002a8:	d804      	bhi.n	80002b4 <usbGetStringDescriptor+0x14>
        return NULL;
    } else {
        return Standard_GetDescriptorData(len, &usbStringDescriptor[strIndex]);
 80002aa:	4904      	ldr	r1, [pc, #16]	; (80002bc <usbGetStringDescriptor+0x1c>)
 80002ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80002b0:	f001 b858 	b.w	8001364 <Standard_GetDescriptorData>
    }
}
 80002b4:	2000      	movs	r0, #0
 80002b6:	4770      	bx	lr
 80002b8:	2000030c 	andcs	r0, r0, ip, lsl #6
 80002bc:	20000094 	mulcs	r0, r4, r0

080002c0 <usbGetFunctionalDescriptor>:

u8 *usbGetFunctionalDescriptor(u16 len) {
    return Standard_GetDescriptorData(len, &usbFunctionalDescriptor);
 80002c0:	4901      	ldr	r1, [pc, #4]	; (80002c8 <usbGetFunctionalDescriptor+0x8>)
 80002c2:	f001 b84f 	b.w	8001364 <Standard_GetDescriptorData>
 80002c6:	bf00      	nop
 80002c8:	200000e0 	andcs	r0, r0, r0, ror #1

080002cc <usbNoDataSetup>:
    }

    return USB_UNSUPPORT;
}

RESULT usbNoDataSetup(u8 request) {
 80002cc:	b508      	push	{r3, lr}
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 80002ce:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <usbNoDataSetup+0x24>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002d8:	2b21      	cmp	r3, #33	; 0x21
 80002da:	d106      	bne.n	80002ea <usbNoDataSetup+0x1e>
        /* todo, keep track of the destination interface, often stored in wIndex */
        if (dfuUpdateByRequest()) {
 80002dc:	f000 fbfe 	bl	8000adc <dfuUpdateByRequest>
 80002e0:	2800      	cmp	r0, #0
            return USB_SUCCESS;
 80002e2:	bf0c      	ite	eq
 80002e4:	2002      	moveq	r0, #2
 80002e6:	2000      	movne	r0, #0
 80002e8:	bd08      	pop	{r3, pc}
        }
    }
    return USB_UNSUPPORT;
 80002ea:	2002      	movs	r0, #2
}
 80002ec:	bd08      	pop	{r3, pc}
 80002ee:	bf00      	nop
 80002f0:	2000030c 	andcs	r0, r0, ip, lsl #6

080002f4 <setupUSB>:


extern u8 u8_usbConfigDescriptorDFU[];
extern u8 u8_usbFunctionalDescriptor[];

void setupUSB (void) {
 80002f4:	b537      	push	{r0, r1, r2, r4, r5, lr}

/* Generic boards don't have disconnect hardware, so we drive PA12 which is connected to the usb D+ line*/
#define USB_DISC_BANK         GPIOA
#define USB_DISC_PIN              12

    SET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN),(GET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN)) & crMask(USB_DISC_PIN)) | CR_OUTPUT_PP << CR_SHITF(USB_DISC_PIN));
 80002f6:	4c19      	ldr	r4, [pc, #100]	; (800035c <setupUSB+0x68>)
 80002f8:	200c      	movs	r0, #12
 80002fa:	6825      	ldr	r5, [r4, #0]
 80002fc:	f000 fb0c 	bl	8000918 <crMask>
 8000300:	4028      	ands	r0, r5
 8000302:	f440 3580 	orr.w	r5, r0, #65536	; 0x10000
 8000306:	6025      	str	r5, [r4, #0]

    gpio_write_bit(USB_DISC_BANK,USB_DISC_PIN,0);  /* present ourselves to the host */
 8000308:	4815      	ldr	r0, [pc, #84]	; (8000360 <setupUSB+0x6c>)
 800030a:	210c      	movs	r1, #12
 800030c:	2200      	movs	r2, #0
 800030e:	f000 f989 	bl	8000624 <gpio_write_bit>

    volatile unsigned int delay;
    for(delay = 0;delay<512;delay++);
 8000312:	2300      	movs	r3, #0
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	9b01      	ldr	r3, [sp, #4]
 8000318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800031c:	d202      	bcs.n	8000324 <setupUSB+0x30>
 800031e:	9b01      	ldr	r3, [sp, #4]
 8000320:	3301      	adds	r3, #1
 8000322:	e7f7      	b.n	8000314 <setupUSB+0x20>

    //  volatile unsigned x = 1024; do { ; }while(--x);// wait a moment
    /* turn on the USB clock */
    SET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN),
 8000324:	200c      	movs	r0, #12
 8000326:	6825      	ldr	r5, [r4, #0]
 8000328:	f000 faf6 	bl	8000918 <crMask>
 800032c:	4028      	ands	r0, r5
 800032e:	f440 2580 	orr.w	r5, r0, #262144	; 0x40000
 8000332:	6025      	str	r5, [r4, #0]
        (GET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN)) & crMask(USB_DISC_PIN)) | CR_INPUT << CR_SHITF(USB_DISC_PIN)); //Sets the PA12 as floating input
    //  pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
#endif
    /* initialize the usb application */

    wTransferSize=getFlashPageSize();
 8000334:	f000 fb02 	bl	800093c <getFlashPageSize>
 8000338:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <setupUSB+0x70>)
    u8_usbConfigDescriptorDFU[41]=(wTransferSize & 0x00FF);
 800033a:	b2c2      	uxtb	r2, r0
        (GET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC_PIN)) & crMask(USB_DISC_PIN)) | CR_INPUT << CR_SHITF(USB_DISC_PIN)); //Sets the PA12 as floating input
    //  pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
#endif
    /* initialize the usb application */

    wTransferSize=getFlashPageSize();
 800033c:	6018      	str	r0, [r3, #0]
    u8_usbConfigDescriptorDFU[41]=(wTransferSize & 0x00FF);
 800033e:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <setupUSB+0x74>)
    u8_usbConfigDescriptorDFU[42]=(wTransferSize & 0xFF00)>>8;
 8000340:	f3c0 2007 	ubfx	r0, r0, #8, #8
    //  pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
#endif
    /* initialize the usb application */

    wTransferSize=getFlashPageSize();
    u8_usbConfigDescriptorDFU[41]=(wTransferSize & 0x00FF);
 8000344:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8_usbConfigDescriptorDFU[42]=(wTransferSize & 0xFF00)>>8;
 8000348:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a

    u8_usbFunctionalDescriptor[5]=(wTransferSize & 0x00FF);
 800034c:	4b07      	ldr	r3, [pc, #28]	; (800036c <setupUSB+0x78>)
 800034e:	715a      	strb	r2, [r3, #5]
    u8_usbFunctionalDescriptor[6]=(wTransferSize & 0xFF00)>>8;
 8000350:	7198      	strb	r0, [r3, #6]

/* Function Definitions */
void usbAppInit(void) {
    /* hook in to usb_core, depends on all those damn
       non encapsulated externs! */
    USB_Init();
 8000352:	f000 fe2f 	bl	8000fb4 <USB_Init>
    u8_usbFunctionalDescriptor[5]=(wTransferSize & 0x00FF);
    u8_usbFunctionalDescriptor[6]=(wTransferSize & 0xFF00)>>8;

    usbAppInit();

}
 8000356:	b003      	add	sp, #12
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	bf00      	nop
 800035c:	40010804 	andmi	r0, r1, r4, lsl #16
 8000360:	40010800 	andmi	r0, r1, r0, lsl #16
 8000364:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8000368:	200000ec 	andcs	r0, r0, ip, ror #1
 800036c:	20000129 	andcs	r0, r0, r9, lsr #2

08000370 <usbSuspend>:
    USB_Init();
}

void usbSuspend(void) {
    u16 wCNTR;
    wCNTR = _GetCNTR();
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <usbSuspend+0x14>)
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	b292      	uxth	r2, r2
    wCNTR |= CNTR_FSUSP | CNTR_LPMODE;
    _SetCNTR(wCNTR);
 8000376:	f042 020c 	orr.w	r2, r2, #12
 800037a:	601a      	str	r2, [r3, #0]

    /* run any power reduction handlers */
    bDeviceState = SUSPENDED;
 800037c:	4b02      	ldr	r3, [pc, #8]	; (8000388 <usbSuspend+0x18>)
 800037e:	2203      	movs	r2, #3
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	4770      	bx	lr
 8000384:	40005c40 	andmi	r5, r0, r0, asr #24
 8000388:	20000318 	andcs	r0, r0, r8, lsl r3

0800038c <usbResumeInit>:
void usbResumeInit(void) {
    u16 wCNTR;

    /* restart any clocks that had been stopped */

    wCNTR = _GetCNTR();
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <usbResumeInit+0x14>)
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 800038e:	f64f 72fb 	movw	r2, #65531	; 0xfffb
void usbResumeInit(void) {
    u16 wCNTR;

    /* restart any clocks that had been stopped */

    wCNTR = _GetCNTR();
 8000392:	6819      	ldr	r1, [r3, #0]
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000394:	400a      	ands	r2, r1
 8000396:	601a      	str	r2, [r3, #0]

    /* undo power reduction handlers here */

    _SetCNTR(ISR_MSK);
 8000398:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	4770      	bx	lr
 80003a0:	40005c40 	andmi	r5, r0, r0, asr #24

080003a4 <usbResume>:
}

void usbResume(RESUME_STATE eResumeSetVal) {
 80003a4:	b510      	push	{r4, lr}
 80003a6:	4c1e      	ldr	r4, [pc, #120]	; (8000420 <usbResume+0x7c>)
    u16 wCNTR;

    if (eResumeSetVal != RESUME_ESOF)
 80003a8:	2807      	cmp	r0, #7
        ResumeS.eState = eResumeSetVal;
 80003aa:	bf18      	it	ne
 80003ac:	7020      	strbne	r0, [r4, #0]

    switch (ResumeS.eState) {
 80003ae:	7823      	ldrb	r3, [r4, #0]
 80003b0:	2b05      	cmp	r3, #5
 80003b2:	d832      	bhi.n	800041a <usbResume+0x76>
 80003b4:	e8df f003 	tbb	[pc, r3]
 80003b8:	0e0a0603 	cfmadd32eq	mvax0, mvfx0, mvfx10, mvfx3
 80003bc:	f7ff2116 			; <UNDEFINED> instruction: 0xf7ff2116
    case RESUME_EXTERNAL:
        usbResumeInit();
 80003c0:	ffe5 e02a 	vaddl.u32	q15, d5, d26
        ResumeS.eState = RESUME_OFF;
        break;
    case RESUME_INTERNAL:
        usbResumeInit();
 80003c4:	f7ff ffe2 	bl	800038c <usbResumeInit>
        ResumeS.eState = RESUME_START;
 80003c8:	2304      	movs	r3, #4
 80003ca:	e027      	b.n	800041c <usbResume+0x78>
        break;
    case RESUME_LATER:
        ResumeS.bESOFcnt = 2;
 80003cc:	2302      	movs	r3, #2
 80003ce:	7063      	strb	r3, [r4, #1]
        ResumeS.eState = RESUME_WAIT;
 80003d0:	2303      	movs	r3, #3
 80003d2:	e023      	b.n	800041c <usbResume+0x78>
        break;
    case RESUME_WAIT:
        ResumeS.bESOFcnt--;
 80003d4:	7863      	ldrb	r3, [r4, #1]
 80003d6:	3b01      	subs	r3, #1
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	7063      	strb	r3, [r4, #1]
        if (ResumeS.bESOFcnt == 0)
 80003dc:	7863      	ldrb	r3, [r4, #1]
 80003de:	b9f3      	cbnz	r3, 800041e <usbResume+0x7a>
            ResumeS.eState = RESUME_START;
 80003e0:	2204      	movs	r2, #4
 80003e2:	e017      	b.n	8000414 <usbResume+0x70>
        break;
    case RESUME_START:
        wCNTR = _GetCNTR();
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <usbResume+0x80>)
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	b292      	uxth	r2, r2
        wCNTR |= CNTR_RESUME;
        _SetCNTR(wCNTR);
 80003ea:	f042 0210 	orr.w	r2, r2, #16
 80003ee:	601a      	str	r2, [r3, #0]
        ResumeS.eState = RESUME_ON;
 80003f0:	2305      	movs	r3, #5
 80003f2:	7023      	strb	r3, [r4, #0]
        ResumeS.bESOFcnt = 10;
 80003f4:	230a      	movs	r3, #10
 80003f6:	7063      	strb	r3, [r4, #1]
        break;
 80003f8:	bd10      	pop	{r4, pc}
    case RESUME_ON:
        ResumeS.bESOFcnt--;
 80003fa:	7863      	ldrb	r3, [r4, #1]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	7063      	strb	r3, [r4, #1]
        if (ResumeS.bESOFcnt == 0) {
 8000402:	7863      	ldrb	r3, [r4, #1]
 8000404:	b95b      	cbnz	r3, 800041e <usbResume+0x7a>
            wCNTR = _GetCNTR();
 8000406:	4a07      	ldr	r2, [pc, #28]	; (8000424 <usbResume+0x80>)
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 8000408:	f64f 73ef 	movw	r3, #65519	; 0xffef
        ResumeS.bESOFcnt = 10;
        break;
    case RESUME_ON:
        ResumeS.bESOFcnt--;
        if (ResumeS.bESOFcnt == 0) {
            wCNTR = _GetCNTR();
 800040c:	6811      	ldr	r1, [r2, #0]
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 800040e:	400b      	ands	r3, r1
 8000410:	6013      	str	r3, [r2, #0]
            ResumeS.eState = RESUME_OFF;
 8000412:	2206      	movs	r2, #6
 8000414:	4b02      	ldr	r3, [pc, #8]	; (8000420 <usbResume+0x7c>)
 8000416:	701a      	strb	r2, [r3, #0]
 8000418:	bd10      	pop	{r4, pc}
        }
        break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
        ResumeS.eState = RESUME_OFF;
 800041a:	2306      	movs	r3, #6
 800041c:	7023      	strb	r3, [r4, #0]
 800041e:	bd10      	pop	{r4, pc}
 8000420:	200002d6 	ldrdcs	r0, [r0], -r6
 8000424:	40005c40 	andmi	r5, r0, r0, asr #24

08000428 <usbPowerOn>:

RESULT usbPowerOn(void) {
    u16 wRegVal;

    wRegVal = CNTR_FRES;
    _SetCNTR(wRegVal);
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <usbPowerOn+0x1c>)
 800042a:	2201      	movs	r2, #1
 800042c:	601a      	str	r2, [r3, #0]

    wInterrupt_Mask = 0;
    _SetCNTR(wInterrupt_Mask);
    _SetISTR(0);
 800042e:	4a06      	ldr	r2, [pc, #24]	; (8000448 <usbPowerOn+0x20>)

    wRegVal = CNTR_FRES;
    _SetCNTR(wRegVal);

    wInterrupt_Mask = 0;
    _SetCNTR(wInterrupt_Mask);
 8000430:	2000      	movs	r0, #0
    _SetISTR(0);
    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 8000432:	4906      	ldr	r1, [pc, #24]	; (800044c <usbPowerOn+0x24>)

    wRegVal = CNTR_FRES;
    _SetCNTR(wRegVal);

    wInterrupt_Mask = 0;
    _SetCNTR(wInterrupt_Mask);
 8000434:	6018      	str	r0, [r3, #0]
    _SetISTR(0);
 8000436:	6010      	str	r0, [r2, #0]
    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 8000438:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800043c:	800a      	strh	r2, [r1, #0]
    _SetCNTR(wInterrupt_Mask);
 800043e:	601a      	str	r2, [r3, #0]

    return USB_SUCCESS;
}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40005c40 	andmi	r5, r0, r0, asr #24
 8000448:	40005c44 	andmi	r5, r0, r4, asr #24
 800044c:	20000310 	andcs	r0, r0, r0, lsl r3

08000450 <usbPowerOff>:

RESULT usbPowerOff(void) {
    _SetCNTR(CNTR_FRES);
 8000450:	4b04      	ldr	r3, [pc, #16]	; (8000464 <usbPowerOff+0x14>)
 8000452:	2201      	movs	r2, #1
 8000454:	601a      	str	r2, [r3, #0]
    _SetISTR(0);
 8000456:	4a04      	ldr	r2, [pc, #16]	; (8000468 <usbPowerOff+0x18>)
 8000458:	2000      	movs	r0, #0
 800045a:	6010      	str	r0, [r2, #0]
    _SetCNTR(CNTR_FRES + CNTR_PDWN);
 800045c:	2203      	movs	r2, #3
 800045e:	601a      	str	r2, [r3, #0]
       usb peripheral. we have no disabled the clocks,
       pulled the USB_DISC_PIN pin back up, or reset the
       application state machines */

    return USB_SUCCESS;
}
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40005c40 	andmi	r5, r0, r0, asr #24
 8000468:	40005c44 	andmi	r5, r0, r4, asr #24

0800046c <usbDsbBus>:



void usbDsbBus(void) {
// setPin(USB_DISC_BANK,USB_DISC_PIN);
usbPowerOff();
 800046c:	f7ff bff0 	b.w	8000450 <usbPowerOff>

08000470 <usbEnbISR>:
    bDeviceState = ADDRESSED;
}
/***** end of USER STANDARD REQUESTS *****/


void usbEnbISR(void) {
 8000470:	b507      	push	{r0, r1, r2, lr}
    NVIC_InitTypeDef NVIC_InitStructure;


    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 8000472:	2314      	movs	r3, #20
 8000474:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	f88d 3005 	strb.w	r3, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800047e:	f88d 3006 	strb.w	r3, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
 8000482:	a801      	add	r0, sp, #4


    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
 8000484:	2301      	movs	r3, #1
 8000486:	f88d 3007 	strb.w	r3, [sp, #7]
    nvicInit(&NVIC_InitStructure);
 800048a:	f000 f98d 	bl	80007a8 <nvicInit>
}
 800048e:	b003      	add	sp, #12
 8000490:	f85d fb04 	ldr.w	pc, [sp], #4

08000494 <usbInit>:
       application state machines */

    return USB_SUCCESS;
}

void usbInit(void) {
 8000494:	b510      	push	{r4, lr}
    dfuInit();
 8000496:	f000 fa5d 	bl	8000954 <dfuInit>

    pInformation->Current_Configuration = 0;
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <usbInit+0x2c>)
 800049c:	2400      	movs	r4, #0
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	729c      	strb	r4, [r3, #10]
    usbPowerOn();
 80004a2:	f7ff ffc1 	bl	8000428 <usbPowerOn>

    _SetISTR(0);
 80004a6:	4b07      	ldr	r3, [pc, #28]	; (80004c4 <usbInit+0x30>)
    wInterrupt_Mask = ISR_MSK;
 80004a8:	4a07      	ldr	r2, [pc, #28]	; (80004c8 <usbInit+0x34>)
    dfuInit();

    pInformation->Current_Configuration = 0;
    usbPowerOn();

    _SetISTR(0);
 80004aa:	601c      	str	r4, [r3, #0]
    wInterrupt_Mask = ISR_MSK;
 80004ac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80004b0:	8013      	strh	r3, [r2, #0]
    _SetCNTR(wInterrupt_Mask);
 80004b2:	4a06      	ldr	r2, [pc, #24]	; (80004cc <usbInit+0x38>)
 80004b4:	6013      	str	r3, [r2, #0]

    usbEnbISR(); /* configure the cortex M3 private peripheral NVIC */
 80004b6:	f7ff ffdb 	bl	8000470 <usbEnbISR>
    bDeviceState = UNCONNECTED;
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <usbInit+0x3c>)
 80004bc:	601c      	str	r4, [r3, #0]
 80004be:	bd10      	pop	{r4, pc}
 80004c0:	2000030c 	andcs	r0, r0, ip, lsl #6
 80004c4:	40005c44 	andmi	r5, r0, r4, asr #24
 80004c8:	20000310 	andcs	r0, r0, r0, lsl r3
 80004cc:	40005c40 	andmi	r5, r0, r0, asr #24
 80004d0:	20000318 	andcs	r0, r0, r8, lsl r3

080004d4 <usbDsbISR>:
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
}

void usbDsbISR(void) {
 80004d4:	b507      	push	{r0, r1, r2, lr}
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 80004d6:	2314      	movs	r3, #20
 80004d8:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
    nvicInit(&NVIC_InitStructure);
 80004dc:	a801      	add	r0, sp, #4
}

void usbDsbISR(void) {
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	f88d 3005 	strb.w	r3, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80004e4:	f88d 3006 	strb.w	r3, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
 80004e8:	f88d 3007 	strb.w	r3, [sp, #7]
    nvicInit(&NVIC_InitStructure);
 80004ec:	f000 f95c 	bl	80007a8 <nvicInit>
}
 80004f0:	b003      	add	sp, #12
 80004f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080004f8 <USB_LP_CAN1_RX0_IRQHandler>:

void USB_LP_CAN1_RX0_IRQHandler(void) {
 80004f8:	b570      	push	{r4, r5, r6, lr}
    wIstr = _GetISTR();
 80004fa:	4d27      	ldr	r5, [pc, #156]	; (8000598 <USB_LP_CAN1_RX0_IRQHandler+0xa0>)
 80004fc:	4c27      	ldr	r4, [pc, #156]	; (800059c <USB_LP_CAN1_RX0_IRQHandler+0xa4>)
 80004fe:	682b      	ldr	r3, [r5, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
 8000500:	4e27      	ldr	r6, [pc, #156]	; (80005a0 <USB_LP_CAN1_RX0_IRQHandler+0xa8>)
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
    nvicInit(&NVIC_InitStructure);
}

void USB_LP_CAN1_RX0_IRQHandler(void) {
    wIstr = _GetISTR();
 8000502:	b29b      	uxth	r3, r3
 8000504:	8023      	strh	r3, [r4, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
 8000506:	8822      	ldrh	r2, [r4, #0]
 8000508:	8833      	ldrh	r3, [r6, #0]
 800050a:	4013      	ands	r3, r2
 800050c:	0559      	lsls	r1, r3, #21
 800050e:	d505      	bpl.n	800051c <USB_LP_CAN1_RX0_IRQHandler+0x24>
        _SetISTR((u16)CLR_RESET);
 8000510:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8000514:	602b      	str	r3, [r5, #0]
        Device_Property.Reset();
 8000516:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <USB_LP_CAN1_RX0_IRQHandler+0xac>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	4798      	blx	r3
    }
#endif


#if (ISR_MSK & ISTR_ERR)
    if (wIstr & ISTR_ERR & wInterrupt_Mask) {
 800051c:	8822      	ldrh	r2, [r4, #0]
 800051e:	8833      	ldrh	r3, [r6, #0]
 8000520:	401a      	ands	r2, r3
 8000522:	0492      	lsls	r2, r2, #18
        _SetISTR((u16)CLR_ERR);
 8000524:	bf44      	itt	mi
 8000526:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 800052a:	602a      	strmi	r2, [r5, #0]
    }
#endif


#if (ISR_MSK & ISTR_WKUP)
    if (wIstr & ISTR_WKUP & wInterrupt_Mask) {
 800052c:	8822      	ldrh	r2, [r4, #0]
 800052e:	4013      	ands	r3, r2
 8000530:	04db      	lsls	r3, r3, #19
 8000532:	d505      	bpl.n	8000540 <USB_LP_CAN1_RX0_IRQHandler+0x48>
        _SetISTR((u16)CLR_WKUP);
 8000534:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000538:	602b      	str	r3, [r5, #0]
        usbResume(RESUME_EXTERNAL);
 800053a:	2000      	movs	r0, #0
 800053c:	f7ff ff32 	bl	80003a4 <usbResume>
    }
#endif

    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_SUSP)
    if (wIstr & ISTR_SUSP & wInterrupt_Mask) {
 8000540:	8822      	ldrh	r2, [r4, #0]
 8000542:	8833      	ldrh	r3, [r6, #0]
 8000544:	4013      	ands	r3, r2
 8000546:	0518      	lsls	r0, r3, #20
 8000548:	d504      	bpl.n	8000554 <USB_LP_CAN1_RX0_IRQHandler+0x5c>

        /* check if SUSPEND is possible */
        if (F_SUSPEND_ENABLED) {
            usbSuspend();
 800054a:	f7ff ff11 	bl	8000370 <usbSuspend>
        } else {
            /* if not possible then resume after xx ms */
            usbResume(RESUME_LATER);
        }
        /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
        _SetISTR((u16)CLR_SUSP);
 800054e:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8000552:	602b      	str	r3, [r5, #0]
    }
#endif


#if (ISR_MSK & ISTR_SOF)
    if (wIstr & ISTR_SOF & wInterrupt_Mask) {
 8000554:	8822      	ldrh	r2, [r4, #0]
 8000556:	8833      	ldrh	r3, [r6, #0]
 8000558:	401a      	ands	r2, r3
 800055a:	0591      	lsls	r1, r2, #22
 800055c:	d507      	bpl.n	800056e <USB_LP_CAN1_RX0_IRQHandler+0x76>
        _SetISTR((u16)CLR_SOF);
 800055e:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8000562:	602a      	str	r2, [r5, #0]
        bIntPackSOF++;
 8000564:	4a10      	ldr	r2, [pc, #64]	; (80005a8 <USB_LP_CAN1_RX0_IRQHandler+0xb0>)
 8000566:	7811      	ldrb	r1, [r2, #0]
 8000568:	3101      	adds	r1, #1
 800056a:	b2c9      	uxtb	r1, r1
 800056c:	7011      	strb	r1, [r2, #0]
    }
#endif


#if (ISR_MSK & ISTR_ESOF)
    if (wIstr & ISTR_ESOF & wInterrupt_Mask) {
 800056e:	8822      	ldrh	r2, [r4, #0]
 8000570:	4013      	ands	r3, r2
 8000572:	05da      	lsls	r2, r3, #23
 8000574:	d505      	bpl.n	8000582 <USB_LP_CAN1_RX0_IRQHandler+0x8a>
        _SetISTR((u16)CLR_ESOF);
 8000576:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800057a:	602b      	str	r3, [r5, #0]
        /* resume handling timing is made with ESOFs */
        usbResume(RESUME_ESOF); /* request without change of the machine state */
 800057c:	2007      	movs	r0, #7
 800057e:	f7ff ff11 	bl	80003a4 <usbResume>
    }
#endif

    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
 8000582:	8822      	ldrh	r2, [r4, #0]
 8000584:	8833      	ldrh	r3, [r6, #0]
 8000586:	4013      	ands	r3, r2
 8000588:	041b      	lsls	r3, r3, #16
 800058a:	d503      	bpl.n	8000594 <USB_LP_CAN1_RX0_IRQHandler+0x9c>
        /* clear of the CTR flag into the sub */
        CTR_LP(); /* low priority ISR defined in the usb core lib */
    }
#endif

}
 800058c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
        /* servicing of the endpoint correct transfer interrupt */
        /* clear of the CTR flag into the sub */
        CTR_LP(); /* low priority ISR defined in the usb core lib */
 8000590:	f000 bc66 	b.w	8000e60 <CTR_LP>
 8000594:	bd70      	pop	{r4, r5, r6, pc}
 8000596:	bf00      	nop
 8000598:	40005c44 	andmi	r5, r0, r4, asr #24
 800059c:	200002d4 	ldrdcs	r0, [r0], -r4
 80005a0:	20000310 	andcs	r0, r0, r0, lsl r3
 80005a4:	20000000 	andcs	r0, r0, r0
 80005a8:	20000314 	andcs	r0, r0, r4, lsl r3

080005ac <main>:
#include "common.h"
#include "dfu.h"
extern volatile dfuUploadTypes_t userUploadType;

int main()
{
 80005ac:	b508      	push	{r3, lr}
  bool no_user_jump = FALSE;
  bool dont_wait = FALSE;

  systemReset(); // peripherals but not PC
 80005ae:	f000 f847 	bl	8000640 <systemReset>
  setupCLK();
 80005b2:	f000 f869 	bl	8000688 <setupCLK>
  setupLEDAndButton();
 80005b6:	f000 f897 	bl	80006e8 <setupLEDAndButton>
  setupUSB();
 80005ba:	f7ff fe9b 	bl	80002f4 <setupUSB>
  setupFLASH();
 80005be:	f000 f895 	bl	80006ec <setupFLASH>

  switch(checkAndClearBootloaderFlag())
 80005c2:	f000 f8cd 	bl	8000760 <checkAndClearBootloaderFlag>
 80005c6:	2801      	cmp	r0, #1
 80005c8:	d00f      	beq.n	80005ea <main+0x3e>
 80005ca:	2802      	cmp	r0, #2
 80005cc:	d014      	beq.n	80005f8 <main+0x4c>

    #ifndef NOLED
    strobePin(LED_BANK, LED_PIN, STARTUP_BLINKS, BLINK_FAST,LED_ON_STATE);
    #endif

    if (!checkUserCode(USER_CODE_FLASH0X8005000) && !checkUserCode(USER_CODE_FLASH0X8002000))
 80005ce:	4813      	ldr	r0, [pc, #76]	; (800061c <main+0x70>)
 80005d0:	f000 f89a 	bl	8000708 <checkUserCode>
 80005d4:	b118      	cbz	r0, 80005de <main+0x32>
    {
      no_user_jump = TRUE;
    }
    else if (readButtonState())
 80005d6:	f000 f830 	bl	800063a <readButtonState>
 80005da:	b930      	cbnz	r0, 80005ea <main+0x3e>
 80005dc:	e00c      	b.n	80005f8 <main+0x4c>

    #ifndef NOLED
    strobePin(LED_BANK, LED_PIN, STARTUP_BLINKS, BLINK_FAST,LED_ON_STATE);
    #endif

    if (!checkUserCode(USER_CODE_FLASH0X8005000) && !checkUserCode(USER_CODE_FLASH0X8002000))
 80005de:	4810      	ldr	r0, [pc, #64]	; (8000620 <main+0x74>)
 80005e0:	f000 f892 	bl	8000708 <checkUserCode>
 80005e4:	2800      	cmp	r0, #0
 80005e6:	d1f6      	bne.n	80005d6 <main+0x2a>
 80005e8:	e006      	b.n	80005f8 <main+0x4c>
    while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
    {
      #ifndef NOLED
      strobePin(LED_BANK, LED_PIN, 1, BLINK_SLOW,LED_ON_STATE);
      #endif
      if (dfuUploadStarted())
 80005ea:	f000 fb95 	bl	8000d18 <dfuUploadStarted>
 80005ee:	2800      	cmp	r0, #0
 80005f0:	d0fb      	beq.n	80005ea <main+0x3e>
      {
        dfuFinishUpload(); // systemHardReset from DFU once done
 80005f2:	f000 fb97 	bl	8000d24 <dfuFinishUpload>
 80005f6:	e7f8      	b.n	80005ea <main+0x3e>
      //   break;
      // }
    }
  }

  if (checkUserCode(USER_CODE_FLASH0X8002000))
 80005f8:	4809      	ldr	r0, [pc, #36]	; (8000620 <main+0x74>)
 80005fa:	f000 f885 	bl	8000708 <checkUserCode>
 80005fe:	b108      	cbz	r0, 8000604 <main+0x58>
  {
    jumpToUser(USER_CODE_FLASH0X8002000);
 8000600:	4807      	ldr	r0, [pc, #28]	; (8000620 <main+0x74>)
 8000602:	e004      	b.n	800060e <main+0x62>
  }
  else
  {
    if (checkUserCode(USER_CODE_FLASH0X8005000))
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <main+0x70>)
 8000606:	f000 f87f 	bl	8000708 <checkUserCode>
 800060a:	b118      	cbz	r0, 8000614 <main+0x68>
    {
      jumpToUser(USER_CODE_FLASH0X8005000);
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <main+0x70>)
 800060e:	f000 f913 	bl	8000838 <jumpToUser>
 8000612:	e001      	b.n	8000618 <main+0x6c>
      // Nothing to execute in either Flash or RAM
      #ifndef NOLED
      strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);
      #endif

      systemHardReset();
 8000614:	f000 f924 	bl	8000860 <systemHardReset>
    }
  }

  return 0;// Added to please the compiler
}
 8000618:	2000      	movs	r0, #0
 800061a:	bd08      	pop	{r3, pc}
 800061c:	08005000 	stmdaeq	r0, {ip, lr}
 8000620:	08002000 	stmdaeq	r0, {sp}

08000624 <gpio_write_bit>:
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 8000624:	2301      	movs	r3, #1
 8000626:	fa03 f101 	lsl.w	r1, r3, r1
    u32 pinMask = 0x1 << (16 + pin);
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits
 800062a:	f1d2 0201 	rsbs	r2, r2, #1
 800062e:	bf38      	it	cc
 8000630:	2200      	movcc	r2, #0
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 8000632:	0113      	lsls	r3, r2, #4
 8000634:	4099      	lsls	r1, r3
 8000636:	6101      	str	r1, [r0, #16]
 8000638:	4770      	bx	lr

0800063a <readButtonState>:
    {
        state=!state;
    }
#endif
    return state;
}
 800063a:	2000      	movs	r0, #0
 800063c:	4770      	bx	lr
	...

08000640 <systemReset>:
        gpio_write_bit( bank,pin,1-onState);
    }
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <systemReset+0x38>)
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8000642:	490e      	ldr	r1, [pc, #56]	; (800067c <systemReset+0x3c>)
        gpio_write_bit( bank,pin,1-onState);
    }
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	f042 0201 	orr.w	r2, r2, #1
 800064a:	601a      	str	r2, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <systemReset+0x40>)
 800064e:	6810      	ldr	r0, [r2, #0]
 8000650:	4001      	ands	r1, r0
 8000652:	6011      	str	r1, [r2, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
 8000654:	6819      	ldr	r1, [r3, #0]
 8000656:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800065a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800065e:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
 8000660:	6819      	ldr	r1, [r3, #0]
 8000662:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000666:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);
 8000668:	6813      	ldr	r3, [r2, #0]
 800066a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800066e:	6013      	str	r3, [r2, #0]

    SET_REG(RCC_CIR, 0x00000000);  /* disable all RCC interrupts */
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <systemReset+0x44>)
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	4770      	bx	lr
 8000678:	40021000 	andmi	r1, r2, r0
 800067c:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000
 8000680:	40021004 	andmi	r1, r2, r4
 8000684:	40021008 	andmi	r1, r2, r8

08000688 <setupCLK>:
}

void setupCLK(void) {
    unsigned int StartUpCounter=0;
    /* enable HSE */
    SET_REG(RCC_CR, GET_REG(RCC_CR) | 0x00010001);
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <setupCLK+0x58>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
 8000690:	601a      	str	r2, [r3, #0]
    while ((GET_REG(RCC_CR) & 0x00020000) == 0); /* for it to come on */
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4812      	ldr	r0, [pc, #72]	; (80006e0 <setupCLK+0x58>)
 8000696:	0392      	lsls	r2, r2, #14
 8000698:	d5fb      	bpl.n	8000692 <setupCLK+0xa>

    /* enable flash prefetch buffer */
    SET_REG(FLASH_ACR, 0x00000012);
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <setupCLK+0x5c>)
 800069c:	2112      	movs	r1, #18
 800069e:	6011      	str	r1, [r2, #0]

    /* Configure PLL */
#ifdef XTAL12M
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00110400); /* pll=72Mhz(x6),APB1=36Mhz,AHB=72Mhz */
#else
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x001D0400); /* pll=72Mhz(x9),APB1=36Mhz,AHB=72Mhz */
 80006a0:	f6a2 72fc 	subw	r2, r2, #4092	; 0xffc
 80006a4:	6811      	ldr	r1, [r2, #0]
 80006a6:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 80006aa:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80006ae:	6011      	str	r1, [r2, #0]
#endif

    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x01000000); /* enable the pll */
 80006b0:	6801      	ldr	r1, [r0, #0]
 80006b2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80006b6:	6001      	str	r1, [r0, #0]

#if !defined  (HSE_STARTUP_TIMEOUT)
#define HSE_STARTUP_TIMEOUT    ((unsigned int)0x0500)   /*!< Time out for HSE start up */
#endif /* HSE_STARTUP_TIMEOUT */

    while ((GET_REG(RCC_CR) & 0x03000000) == 0 && StartUpCounter < HSE_STARTUP_TIMEOUT)
 80006b8:	6819      	ldr	r1, [r3, #0]
 80006ba:	f011 7f40 	tst.w	r1, #50331648	; 0x3000000
 80006be:	d0fb      	beq.n	80006b8 <setupCLK+0x30>
        // HSE has not started. Try restarting the processor
        systemHardReset();
    }

    /* Set SYSCLK as PLL */
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00000002);
 80006c0:	6811      	ldr	r1, [r2, #0]
 80006c2:	f041 0102 	orr.w	r1, r1, #2
 80006c6:	6011      	str	r1, [r2, #0]
    while ((GET_REG(RCC_CFGR) & 0x00000008) == 0); /* wait for it to come on */
 80006c8:	6811      	ldr	r1, [r2, #0]
 80006ca:	0709      	lsls	r1, r1, #28
 80006cc:	d5fc      	bpl.n	80006c8 <setupCLK+0x40>

    pRCC->APB2ENR |= 0B111111100;// Enable All GPIO channels (A to G)
 80006ce:	699a      	ldr	r2, [r3, #24]
 80006d0:	f442 72fe 	orr.w	r2, r2, #508	; 0x1fc
 80006d4:	619a      	str	r2, [r3, #24]
    pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
 80006d6:	69da      	ldr	r2, [r3, #28]
 80006d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80006dc:	61da      	str	r2, [r3, #28]
 80006de:	4770      	bx	lr
 80006e0:	40021000 	andmi	r1, r2, r0
 80006e4:	40022000 	andmi	r2, r2, r0

080006e8 <setupLEDAndButton>:
}


void setupLEDAndButton (void) {
 80006e8:	4770      	bx	lr
	...

080006ec <setupFLASH>:
  #endif
}

void setupFLASH() {
    /* configure the HSI oscillator */
    if ((pRCC->CR & 0x01) == 0x00) {
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <setupFLASH+0x18>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	07d1      	lsls	r1, r2, #31
 80006f2:	d403      	bmi.n	80006fc <setupFLASH+0x10>
        u32 rwmVal = pRCC->CR;
 80006f4:	681a      	ldr	r2, [r3, #0]
        rwmVal |= 0x01;
 80006f6:	f042 0201 	orr.w	r2, r2, #1
        pRCC->CR = rwmVal;
 80006fa:	601a      	str	r2, [r3, #0]
    }

    /* wait for it to come on */
    while ((pRCC->CR & 0x02) == 0x00) {}
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	0792      	lsls	r2, r2, #30
 8000700:	d5fc      	bpl.n	80006fc <setupFLASH+0x10>
}
 8000702:	4770      	bx	lr
 8000704:	40021000 	andmi	r1, r2, r0

08000708 <checkUserCode>:

bool checkUserCode(u32 usrAddr) {
    u32 sp = *(vu32 *) usrAddr;
 8000708:	6803      	ldr	r3, [r0, #0]

    if ((sp & 0x2FFE0000) == 0x20000000) {
 800070a:	4803      	ldr	r0, [pc, #12]	; (8000718 <checkUserCode+0x10>)
 800070c:	4018      	ands	r0, r3
        return (TRUE);
    } else {
        return (FALSE);
    }
}
 800070e:	f1b0 5300 	subs.w	r3, r0, #536870912	; 0x20000000
 8000712:	4258      	negs	r0, r3
 8000714:	4158      	adcs	r0, r3
 8000716:	4770      	bx	lr
 8000718:	2ffe0000 	svccs	0x00fe0000

0800071c <setMspAndJump>:
    typedef void (*funcPtr)(void);
    u32 jumpAddr = *(vu32 *)(usrAddr + 0x04); /* reset ptr in vector table */

    funcPtr usrMain = (funcPtr) jumpAddr;

    SET_REG(SCB_VTOR, (vu32) (usrAddr));
 800071c:	4a04      	ldr	r2, [pc, #16]	; (8000730 <setMspAndJump+0x14>)
    } else {
        return (FALSE);
    }
}

void setMspAndJump(u32 usrAddr) {
 800071e:	b508      	push	{r3, lr}
    // Dedicated function with no call to any function (appart the last call)
    // This way, there is no manipulation of the stack here, ensuring that GGC
    // didn't insert any pop from the SP after having set the MSP.
    typedef void (*funcPtr)(void);
    u32 jumpAddr = *(vu32 *)(usrAddr + 0x04); /* reset ptr in vector table */
 8000720:	6843      	ldr	r3, [r0, #4]

    funcPtr usrMain = (funcPtr) jumpAddr;

    SET_REG(SCB_VTOR, (vu32) (usrAddr));
 8000722:	6010      	str	r0, [r2, #0]

    asm volatile("msr msp, %0"::"g"(*(volatile u32 *)usrAddr));
 8000724:	6802      	ldr	r2, [r0, #0]
 8000726:	f382 8808 	msr	MSP, r2

    usrMain();                                /* go! */
 800072a:	4798      	blx	r3
 800072c:	bd08      	pop	{r3, pc}
 800072e:	bf00      	nop
 8000730:	e000ed08 	and	lr, r0, r8, lsl #26

08000734 <bkp10Write>:
}

void bkp10Write(u16 value)
{
        // Enable clocks for the backup domain registers
        pRCC->APB1ENR |= (RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <bkp10Write+0x24>)
 8000736:	69da      	ldr	r2, [r3, #28]
 8000738:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
 800073c:	61da      	str	r2, [r3, #28]
        //pRCC->APB1ENR = 0;

        // Disable backup register write protection
        pPWR->CR |= PWR_CR_DBP;
 800073e:	f5a3 33d0 	sub.w	r3, r3, #106496	; 0x1a000
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000748:	601a      	str	r2, [r3, #0]
        //pPWR->CR |= (1 << 8)

        // store value in pBK DR10
        pBKP->DR10 = value;
 800074a:	4a04      	ldr	r2, [pc, #16]	; (800075c <bkp10Write+0x28>)
 800074c:	8510      	strh	r0, [r2, #40]	; 0x28

        // Re-enable backup register write protection
        pPWR->CR &=~ PWR_CR_DBP;
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	4770      	bx	lr
 8000758:	40021000 	andmi	r1, r2, r0
 800075c:	40006c00 	andmi	r6, r0, r0, lsl #24

08000760 <checkAndClearBootloaderFlag>:
        //pPWR->CR &=~ (1 << 8)
}

int checkAndClearBootloaderFlag()
{
 8000760:	b538      	push	{r3, r4, r5, lr}
    bool flagSet = 0x00;// Flag not used

    // Enable clocks for the backup domain registers
    pRCC->APB1ENR |= (RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <checkAndClearBootloaderFlag+0x40>)

    switch (pBKP->DR10)
 8000764:	f244 214c 	movw	r1, #16972	; 0x424c
int checkAndClearBootloaderFlag()
{
    bool flagSet = 0x00;// Flag not used

    // Enable clocks for the backup domain registers
    pRCC->APB1ENR |= (RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
 8000768:	69da      	ldr	r2, [r3, #28]
 800076a:	461d      	mov	r5, r3
 800076c:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
 8000770:	61da      	str	r2, [r3, #28]

    switch (pBKP->DR10)
 8000772:	4a0c      	ldr	r2, [pc, #48]	; (80007a4 <checkAndClearBootloaderFlag+0x44>)
 8000774:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8000776:	b292      	uxth	r2, r2
 8000778:	428a      	cmp	r2, r1
 800077a:	d005      	beq.n	8000788 <checkAndClearBootloaderFlag+0x28>
 800077c:	f244 234d 	movw	r3, #16973	; 0x424d
 8000780:	429a      	cmp	r2, r3
 8000782:	d003      	beq.n	800078c <checkAndClearBootloaderFlag+0x2c>
        //pPWR->CR &=~ (1 << 8)
}

int checkAndClearBootloaderFlag()
{
    bool flagSet = 0x00;// Flag not used
 8000784:	2400      	movs	r4, #0
 8000786:	e009      	b.n	800079c <checkAndClearBootloaderFlag+0x3c>
    pRCC->APB1ENR |= (RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);

    switch (pBKP->DR10)
    {
        case RTC_BOOTLOADER_FLAG:
            flagSet = 0x01;
 8000788:	2401      	movs	r4, #1
 800078a:	e000      	b.n	800078e <checkAndClearBootloaderFlag+0x2e>
            break;
        case RTC_BOOTLOADER_JUST_UPLOADED:
            flagSet = 0x02;
 800078c:	2402      	movs	r4, #2
            break;
    }

    if (flagSet!=0x00)
    {
        bkp10Write(0x0000);// Clear the flag
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff ffd0 	bl	8000734 <bkp10Write>
        // Disable clocks
        pRCC->APB1ENR &= ~(RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
 8000794:	69eb      	ldr	r3, [r5, #28]
 8000796:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 800079a:	61eb      	str	r3, [r5, #28]
    }



    return flagSet;
}
 800079c:	4620      	mov	r0, r4
 800079e:	bd38      	pop	{r3, r4, r5, pc}
 80007a0:	40021000 	andmi	r1, r2, r0
 80007a4:	40006c00 	andmi	r6, r0, r0, lsl #24

080007a8 <nvicInit>:
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <nvicInit+0x64>)
    return flagSet;
}



void nvicInit(NVIC_InitTypeDef *NVIC_InitStruct) {
 80007aa:	b530      	push	{r4, r5, lr}
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 80007ac:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80007ae:	7844      	ldrb	r4, [r0, #1]
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 80007b0:	43db      	mvns	r3, r3
 80007b2:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 80007b6:	f1c3 0204 	rsb	r2, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80007ba:	fa04 f202 	lsl.w	r2, r4, r2


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80007be:	240f      	movs	r4, #15
 80007c0:	40dc      	lsrs	r4, r3

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80007c2:	7881      	ldrb	r1, [r0, #2]

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007c4:	7803      	ldrb	r3, [r0, #0]
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80007c6:	400c      	ands	r4, r1
 80007c8:	4314      	orrs	r4, r2

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007ca:	f003 0103 	and.w	r1, r3, #3
 80007ce:	00c9      	lsls	r1, r1, #3
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 80007d0:	0124      	lsls	r4, r4, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007d2:	22ff      	movs	r2, #255	; 0xff

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007d4:	408c      	lsls	r4, r1

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80007d6:	408a      	lsls	r2, r1
 80007d8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80007dc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80007e0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 80007e4:	f8d3 5300 	ldr.w	r5, [r3, #768]	; 0x300
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 80007e8:	ea25 0102 	bic.w	r1, r5, r2
    tmppriority &= tmpmask;
 80007ec:	4022      	ands	r2, r4
    tmpreg |= tmppriority;
 80007ee:	430a      	orrs	r2, r1

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 80007f0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 80007f4:	7803      	ldrb	r3, [r0, #0]
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 80007f6:	2201      	movs	r2, #1
    tmpreg |= tmppriority;

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 80007f8:	0959      	lsrs	r1, r3, #5
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 80007fa:	f003 031f 	and.w	r3, r3, #31
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
    tmpreg |= tmppriority;

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8000802:	4a03      	ldr	r2, [pc, #12]	; (8000810 <nvicInit+0x68>)
 8000804:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8000808:	bd30      	pop	{r4, r5, pc}
 800080a:	bf00      	nop
 800080c:	e000ed00 	and	lr, r0, r0, lsl #26
 8000810:	e000e100 	and	lr, r0, r0, lsl #2

08000814 <nvicDisableInterrupts>:
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
}

void nvicDisableInterrupts() {
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;
    rNVIC->ICER[0] = 0xFFFFFFFF;
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <nvicDisableInterrupts+0x20>)
 8000816:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800081a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    rNVIC->ICER[1] = 0xFFFFFFFF;
 800081e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    rNVIC->ICPR[0] = 0xFFFFFFFF;
 8000822:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    rNVIC->ICPR[1] = 0xFFFFFFFF;
 8000826:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    SET_REG(STK_CTRL, 0x04); /* disable the systick, which operates separately from nvic */
 800082a:	2204      	movs	r2, #4
 800082c:	f843 2cf0 	str.w	r2, [r3, #-240]
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000e100 	and	lr, r0, r0, lsl #2

08000838 <jumpToUser>:

    usrMain();                                /* go! */
}


void jumpToUser(u32 usrAddr) {
 8000838:	b510      	push	{r4, lr}

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <jumpToUser+0x24>)
 800083c:	2280      	movs	r2, #128	; 0x80

    usrMain();                                /* go! */
}


void jumpToUser(u32 usrAddr) {
 800083e:	4604      	mov	r4, r0

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 8000840:	601a      	str	r2, [r3, #0]

    /* tear down all the dfu related setup */
    // disable usb interrupts, clear them, turn off usb, set the disc pin
    // todo pick exactly what we want to do here, now its just a conservative
    flashLock();
    usbDsbISR();
 8000842:	f7ff fe47 	bl	80004d4 <usbDsbISR>
    nvicDisableInterrupts();
 8000846:	f7ff ffe5 	bl	8000814 <nvicDisableInterrupts>

#ifndef HAS_MAPLE_HARDWARE
    usbDsbBus();
 800084a:	f7ff fe0f 	bl	800046c <usbDsbBus>
#endif

// Does nothing, as PC12 is not connected on teh Maple mini according to the schemmatic     setPin(GPIOC, 12); // disconnect usb from host. todo, macroize pin
    systemReset(); // resets clocks and periphs, not core regs
 800084e:	f7ff fef7 	bl	8000640 <systemReset>

    setMspAndJump(usrAddr);
 8000852:	4620      	mov	r0, r4
}
 8000854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif

// Does nothing, as PC12 is not connected on teh Maple mini according to the schemmatic     setPin(GPIOC, 12); // disconnect usb from host. todo, macroize pin
    systemReset(); // resets clocks and periphs, not core regs

    setMspAndJump(usrAddr);
 8000858:	f7ff bf60 	b.w	800071c <setMspAndJump>
 800085c:	40022010 	andmi	r2, r2, r0, lsl r0

08000860 <systemHardReset>:

void systemHardReset(void) {
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;

    /* Reset  */
    rSCB->AIRCR = (u32)AIRCR_RESET_REQ;
 8000860:	4a02      	ldr	r2, [pc, #8]	; (800086c <systemHardReset+0xc>)
 8000862:	4b03      	ldr	r3, [pc, #12]	; (8000870 <systemHardReset+0x10>)
 8000864:	60da      	str	r2, [r3, #12]

    /*  should never get here */
    while (1) {
        asm volatile("nop");
 8000866:	bf00      	nop
 8000868:	e7fd      	b.n	8000866 <systemHardReset+0x6>
 800086a:	bf00      	nop
 800086c:	05fa0004 	ldrbeq	r0, [sl, #4]!
 8000870:	e000ed00 	and	lr, r0, r0, lsl #26

08000874 <flashErasePage>:
    }
}

bool flashErasePage(u32 pageAddr) {
    u32 rwmVal = GET_REG(FLASH_CR);
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <flashErasePage+0x2c>)
    while (1) {
        asm volatile("nop");
    }
}

bool flashErasePage(u32 pageAddr) {
 8000876:	b510      	push	{r4, lr}
    u32 rwmVal = GET_REG(FLASH_CR);
 8000878:	681a      	ldr	r2, [r3, #0]
    rwmVal = FLASH_CR_PER;
    SET_REG(FLASH_CR, rwmVal);
 800087a:	2202      	movs	r2, #2
 800087c:	601a      	str	r2, [r3, #0]

    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 800087e:	4a09      	ldr	r2, [pc, #36]	; (80008a4 <flashErasePage+0x30>)
 8000880:	6811      	ldr	r1, [r2, #0]
 8000882:	4614      	mov	r4, r2
 8000884:	f011 0f01 	tst.w	r1, #1
 8000888:	d1f9      	bne.n	800087e <flashErasePage+0xa>
    SET_REG(FLASH_AR, pageAddr);
 800088a:	6090      	str	r0, [r2, #8]
    SET_REG(FLASH_CR, FLASH_CR_START | FLASH_CR_PER);
 800088c:	2242      	movs	r2, #66	; 0x42
 800088e:	601a      	str	r2, [r3, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8000890:	6822      	ldr	r2, [r4, #0]
 8000892:	f012 0101 	ands.w	r1, r2, #1
 8000896:	d1fb      	bne.n	8000890 <flashErasePage+0x1c>

    /* todo: verify the page was erased */

    rwmVal = 0x00;
    SET_REG(FLASH_CR, rwmVal);
 8000898:	6019      	str	r1, [r3, #0]

    return TRUE;
}
 800089a:	2001      	movs	r0, #1
 800089c:	bd10      	pop	{r4, pc}
 800089e:	bf00      	nop
 80008a0:	40022010 	andmi	r2, r2, r0, lsl r0
 80008a4:	4002200c 	andmi	r2, r2, ip

080008a8 <flashWriteWord>:
    }

    return TRUE;
}

bool flashWriteWord(u32 addr, u32 word) {
 80008a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
 80008aa:	b28b      	uxth	r3, r1
 80008ac:	9300      	str	r3, [sp, #0]
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;
 80008ae:	0c0b      	lsrs	r3, r1, #16
 80008b0:	9301      	str	r3, [sp, #4]

    u32 rwmVal = GET_REG(FLASH_CR);
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <flashWriteWord+0x44>)
    SET_REG(FLASH_CR, FLASH_CR_PG);
 80008b4:	2201      	movs	r2, #1
bool flashWriteWord(u32 addr, u32 word) {
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;

    u32 rwmVal = GET_REG(FLASH_CR);
 80008b6:	681c      	ldr	r4, [r3, #0]
    SET_REG(FLASH_CR, FLASH_CR_PG);
 80008b8:	601a      	str	r2, [r3, #0]

    /* apparently we need not write to FLASH_AR and can
       simply do a native write of a half word */
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80008ba:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <flashWriteWord+0x48>)
 80008bc:	6815      	ldr	r5, [r2, #0]
 80008be:	07ed      	lsls	r5, r5, #31
 80008c0:	d4fb      	bmi.n	80008ba <flashWriteWord+0x12>
    *(flashAddr + 0x01) = (vu16)hhWord;
 80008c2:	9d01      	ldr	r5, [sp, #4]
 80008c4:	b2ad      	uxth	r5, r5
 80008c6:	8045      	strh	r5, [r0, #2]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80008c8:	6815      	ldr	r5, [r2, #0]
 80008ca:	07ed      	lsls	r5, r5, #31
 80008cc:	d4fc      	bmi.n	80008c8 <flashWriteWord+0x20>
    *(flashAddr) = (vu16)lhWord;
 80008ce:	9d00      	ldr	r5, [sp, #0]
 80008d0:	b2ad      	uxth	r5, r5
 80008d2:	8005      	strh	r5, [r0, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80008d4:	6815      	ldr	r5, [r2, #0]
 80008d6:	07ed      	lsls	r5, r5, #31
 80008d8:	d4fc      	bmi.n	80008d4 <flashWriteWord+0x2c>

    rwmVal &= 0xFFFFFFFE;
 80008da:	f024 0201 	bic.w	r2, r4, #1
    SET_REG(FLASH_CR, rwmVal);
 80008de:	601a      	str	r2, [r3, #0]

    /* verify the write */
    if (*(vu32 *)addr != word) {
 80008e0:	6800      	ldr	r0, [r0, #0]
        return FALSE;
    }

    return TRUE;
}
 80008e2:	1a43      	subs	r3, r0, r1
 80008e4:	4258      	negs	r0, r3
 80008e6:	4158      	adcs	r0, r3
 80008e8:	b003      	add	sp, #12
 80008ea:	bd30      	pop	{r4, r5, pc}
 80008ec:	40022010 	andmi	r2, r2, r0, lsl r0
 80008f0:	4002200c 	andmi	r2, r2, ip

080008f4 <flashLock>:

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 80008f4:	4b01      	ldr	r3, [pc, #4]	; (80008fc <flashLock+0x8>)
 80008f6:	2280      	movs	r2, #128	; 0x80
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	4770      	bx	lr
 80008fc:	40022010 	andmi	r2, r2, r0, lsl r0

08000900 <flashUnlock>:
}

void flashUnlock() {
    /* unlock the flash */
    SET_REG(FLASH_KEYR, FLASH_KEY1);
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <flashUnlock+0x10>)
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <flashUnlock+0x14>)
 8000904:	601a      	str	r2, [r3, #0]
    SET_REG(FLASH_KEYR, FLASH_KEY2);
 8000906:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40022004 	andmi	r2, r2, r4
 8000914:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123

08000918 <crMask>:

// Used to create the control register masking pattern, when setting control register mode.
unsigned int crMask(int pin)
{
    unsigned int mask;
    if (pin>=8)
 8000918:	2807      	cmp	r0, #7
    {
        pin-=8;
 800091a:	bfc8      	it	gt
 800091c:	3808      	subgt	r0, #8
    }
    mask = 0x0F << (pin<<2);
 800091e:	230f      	movs	r3, #15
 8000920:	0080      	lsls	r0, r0, #2
 8000922:	fa03 f000 	lsl.w	r0, r3, r0
    return ~mask;
}
 8000926:	43c0      	mvns	r0, r0
 8000928:	4770      	bx	lr
	...

0800092c <getFlashEnd>:

#define FLASH_SIZE_REG 0x1FFFF7E0
int getFlashEnd(void)
{
    unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register
    return ((int)(*flashSize & 0xffff) * 1024) + 0x08000000;
 800092c:	4b02      	ldr	r3, [pc, #8]	; (8000938 <getFlashEnd+0xc>)
 800092e:	8818      	ldrh	r0, [r3, #0]
 8000930:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
}
 8000934:	0280      	lsls	r0, r0, #10
 8000936:	4770      	bx	lr
 8000938:	1ffff7e0 	svcne	0x00fff7e0

0800093c <getFlashPageSize>:

int getFlashPageSize(void)
{

    unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register
    if ((*flashSize & 0xffff) > 128)
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <getFlashPageSize+0x14>)
 800093e:	881b      	ldrh	r3, [r3, #0]
    {
        return 0x800;
 8000940:	2b81      	cmp	r3, #129	; 0x81
    }
    else
    {
        return 0x400;
    }
}
 8000942:	bf34      	ite	cc
 8000944:	f44f 6080 	movcc.w	r0, #1024	; 0x400
 8000948:	f44f 6000 	movcs.w	r0, #2048	; 0x800
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	1ffff7e0 	svcne	0x00fff7e0

08000954 <dfuInit>:

volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
 8000954:	4a0d      	ldr	r2, [pc, #52]	; (800098c <dfuInit+0x38>)
 8000956:	2300      	movs	r3, #0
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
 8000958:	2102      	movs	r1, #2

volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
 800095a:	7013      	strb	r3, [r2, #0]
    dfuAppStatus.bwPollTimeout0 = 0x00;
 800095c:	7053      	strb	r3, [r2, #1]
    dfuAppStatus.bwPollTimeout1 = 0x00;
 800095e:	7093      	strb	r3, [r2, #2]
    dfuAppStatus.bwPollTimeout2 = 0x00;
 8000960:	70d3      	strb	r3, [r2, #3]
    dfuAppStatus.bState = dfuIDLE;
 8000962:	7111      	strb	r1, [r2, #4]
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
 8000964:	7153      	strb	r3, [r2, #5]
    userFirmwareLen = 0;
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <dfuInit+0x3c>)
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 8000968:	490a      	ldr	r1, [pc, #40]	; (8000994 <dfuInit+0x40>)
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
 800096a:	6013      	str	r3, [r2, #0]
    thisBlockLen = 0;;
 800096c:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <dfuInit+0x44>)
 800096e:	8013      	strh	r3, [r2, #0]
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 8000970:	4a0a      	ldr	r2, [pc, #40]	; (800099c <dfuInit+0x48>)
 8000972:	6011      	str	r1, [r2, #0]
    userAppEnd = RAM_END;
 8000974:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <dfuInit+0x4c>)
 8000976:	f501 4188 	add.w	r1, r1, #17408	; 0x4400
 800097a:	6011      	str	r1, [r2, #0]
    userUploadType=DFU_UPLOAD_NONE;
 800097c:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <dfuInit+0x50>)
    code_copy_lock = WAIT;
 800097e:	2103      	movs	r1, #3
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
    userAppEnd = RAM_END;
    userUploadType=DFU_UPLOAD_NONE;
 8000980:	7013      	strb	r3, [r2, #0]
    code_copy_lock = WAIT;
 8000982:	4a09      	ldr	r2, [pc, #36]	; (80009a8 <dfuInit+0x54>)
 8000984:	7011      	strb	r1, [r2, #0]
    dfuBusy = FALSE;
 8000986:	4a09      	ldr	r2, [pc, #36]	; (80009ac <dfuInit+0x58>)
 8000988:	7013      	strb	r3, [r2, #0]
 800098a:	4770      	bx	lr
 800098c:	20000b25 	andcs	r0, r0, r5, lsr #22
 8000990:	20000b20 	andcs	r0, r0, r0, lsr #22
 8000994:	20000c00 	andcs	r0, r0, r0, lsl #24
 8000998:	20000b1e 	andcs	r0, r0, lr, lsl fp
 800099c:	200002cc 	andcs	r0, r0, ip, asr #5
 80009a0:	200002c8 	andcs	r0, r0, r8, asr #5
 80009a4:	20000b24 	andcs	r0, r0, r4, lsr #22
 80009a8:	200002d8 	ldrdcs	r0, [r0], -r8
 80009ac:	20000b2b 	andcs	r0, r0, fp, lsr #22

080009b0 <dfuUpdateByReset>:
    } else {
        return FALSE;
    }
}

void dfuUpdateByReset(void) {
 80009b0:	b508      	push	{r3, lr}
    u8 startState = dfuAppStatus.bState;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <dfuUpdateByReset+0x3c>)
    userFirmwareLen = 0;
 80009b4:	480e      	ldr	r0, [pc, #56]	; (80009f0 <dfuUpdateByReset+0x40>)
        return FALSE;
    }
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 80009b6:	7919      	ldrb	r1, [r3, #4]
    userFirmwareLen = 0;
 80009b8:	2200      	movs	r2, #0
        return FALSE;
    }
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 80009ba:	b2c9      	uxtb	r1, r1
    userFirmwareLen = 0;

    if (startState == appDETACH) {
 80009bc:	2901      	cmp	r1, #1
    }
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
    userFirmwareLen = 0;
 80009be:	6002      	str	r2, [r0, #0]

    if (startState == appDETACH) {
 80009c0:	d108      	bne.n	80009d4 <dfuUpdateByReset+0x24>
        dfuAppStatus.bState = dfuIDLE;
 80009c2:	2102      	movs	r1, #2
 80009c4:	7119      	strb	r1, [r3, #4]
        dfuAppStatus.bStatus = OK;
 80009c6:	701a      	strb	r2, [r3, #0]

        nvicDisableInterrupts();
 80009c8:	f7ff ff24 	bl	8000814 <nvicDisableInterrupts>
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
    }
}
 80009cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (startState == appDETACH) {
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        nvicDisableInterrupts();
        usbEnbISR();
 80009d0:	f7ff bd4e 	b.w	8000470 <usbEnbISR>

    } else if (startState == appIDLE || startState == dfuIDLE) {
 80009d4:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 80009d8:	d006      	beq.n	80009e8 <dfuUpdateByReset+0x38>
        /* do nothing...might be normal usb bus activity */
    } else {
        /* we reset from the dfu, reset everything and startover,
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
 80009da:	2102      	movs	r1, #2
 80009dc:	7119      	strb	r1, [r3, #4]
        dfuAppStatus.bStatus = OK;
 80009de:	701a      	strb	r2, [r3, #0]

        systemHardReset();
    }
}
 80009e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
 80009e4:	f7ff bf3c 	b.w	8000860 <systemHardReset>
 80009e8:	bd08      	pop	{r3, pc}
 80009ea:	bf00      	nop
 80009ec:	20000b25 	andcs	r0, r0, r5, lsr #22
 80009f0:	20000b20 	andcs	r0, r0, r0, lsr #22

080009f4 <dfuCopyState>:

void dfuUpdateByTimeout(void) {
}

u8 *dfuCopyState(u16 length) {
    if (length == 0) {
 80009f4:	b920      	cbnz	r0, 8000a00 <dfuCopyState+0xc>
        pInformation->Ctrl_Info.Usb_wLength = 1;
 80009f6:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <dfuCopyState+0x10>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	821a      	strh	r2, [r3, #16]
        return NULL;
 80009fe:	4770      	bx	lr
    } else {
        return (&(dfuAppStatus.bState));
 8000a00:	4801      	ldr	r0, [pc, #4]	; (8000a08 <dfuCopyState+0x14>)
    }
}
 8000a02:	4770      	bx	lr
 8000a04:	2000030c 	andcs	r0, r0, ip, lsl #6
 8000a08:	20000b29 	andcs	r0, r0, r9, lsr #22

08000a0c <dfuCopyStatus>:

u8 *dfuCopyStatus(u16 length) {
    if (length == 0) {
 8000a0c:	b920      	cbnz	r0, 8000a18 <dfuCopyStatus+0xc>
        pInformation->Ctrl_Info.Usb_wLength = 6;
 8000a0e:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <dfuCopyStatus+0x10>)
 8000a10:	2206      	movs	r2, #6
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	821a      	strh	r2, [r3, #16]
        return NULL;
 8000a16:	4770      	bx	lr
    } else {
        return (u8*)(&dfuAppStatus);
 8000a18:	4801      	ldr	r0, [pc, #4]	; (8000a20 <dfuCopyStatus+0x14>)
    }
}
 8000a1a:	4770      	bx	lr
 8000a1c:	2000030c 	andcs	r0, r0, ip, lsl #6
 8000a20:	20000b25 	andcs	r0, r0, r5, lsr #22

08000a24 <dfuCopyDNLOAD>:


u8 *dfuCopyDNLOAD(u16 length) {
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <dfuCopyDNLOAD+0x1c>)
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8000a26:	681b      	ldr	r3, [r3, #0]
    }
}


u8 *dfuCopyDNLOAD(u16 length) {
    if (length == 0) {
 8000a28:	b930      	cbnz	r0, 8000a38 <dfuCopyDNLOAD+0x14>
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8000a2a:	88da      	ldrh	r2, [r3, #6]
 8000a2c:	8a59      	ldrh	r1, [r3, #18]
 8000a2e:	1a51      	subs	r1, r2, r1
 8000a30:	8219      	strh	r1, [r3, #16]
        thisBlockLen = pInformation->USBwLengths.w;
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <dfuCopyDNLOAD+0x20>)
 8000a34:	801a      	strh	r2, [r3, #0]
        return NULL;
 8000a36:	4770      	bx	lr
    } else {
        return ((u8 *)recvBuffer + pInformation->Ctrl_Info.Usb_wOffset);
 8000a38:	8a5b      	ldrh	r3, [r3, #18]
 8000a3a:	4803      	ldr	r0, [pc, #12]	; (8000a48 <dfuCopyDNLOAD+0x24>)
 8000a3c:	4418      	add	r0, r3
    }
}
 8000a3e:	4770      	bx	lr
 8000a40:	2000030c 	andcs	r0, r0, ip, lsl #6
 8000a44:	20000b1e 	andcs	r0, r0, lr, lsl fp
 8000a48:	2000031c 	andcs	r0, r0, ip, lsl r3

08000a4c <dfuCopyUPLOAD>:

u8 *dfuCopyUPLOAD(u16 length) {
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <dfuCopyUPLOAD+0x24>)
    if (length == 0) {
 8000a4e:	b930      	cbnz	r0, 8000a5e <dfuCopyUPLOAD+0x12>
        pInformation->Ctrl_Info.Usb_wLength = thisBlockLen - pInformation->Ctrl_Info.Usb_wOffset;
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <dfuCopyUPLOAD+0x28>)
 8000a54:	8811      	ldrh	r1, [r2, #0]
 8000a56:	8a5a      	ldrh	r2, [r3, #18]
 8000a58:	1a8a      	subs	r2, r1, r2
 8000a5a:	821a      	strh	r2, [r3, #16]
        return NULL;
 8000a5c:	4770      	bx	lr
    } else {
        return((u8*) userAppAddr + userFirmwareLen + pInformation->Ctrl_Info.Usb_wOffset);
 8000a5e:	4906      	ldr	r1, [pc, #24]	; (8000a78 <dfuCopyUPLOAD+0x2c>)
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <dfuCopyUPLOAD+0x30>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	6812      	ldr	r2, [r2, #0]
 8000a66:	6808      	ldr	r0, [r1, #0]
 8000a68:	8a5b      	ldrh	r3, [r3, #18]
 8000a6a:	4410      	add	r0, r2
 8000a6c:	4418      	add	r0, r3
    }
}
 8000a6e:	4770      	bx	lr
 8000a70:	2000030c 	andcs	r0, r0, ip, lsl #6
 8000a74:	20000b1e 	andcs	r0, r0, lr, lsl fp
 8000a78:	200002cc 	andcs	r0, r0, ip, asr #5
 8000a7c:	20000b20 	andcs	r0, r0, r0, lsr #22

08000a80 <dfuCopyBufferToExec>:

void dfuCopyBufferToExec() {
 8000a80:	b570      	push	{r4, r5, r6, lr}
        }
    }
    else
*/
    {
        if (userUploadType == DFU_UPLOAD_FLASH_0X8005000)
 8000a82:	4b12      	ldr	r3, [pc, #72]	; (8000acc <dfuCopyBufferToExec+0x4c>)
 8000a84:	4e12      	ldr	r6, [pc, #72]	; (8000ad0 <dfuCopyBufferToExec+0x50>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
        {
            userSpace = (u32 *)(USER_CODE_FLASH0X8005000 + userFirmwareLen);
 8000a88:	6834      	ldr	r4, [r6, #0]
        }
    }
    else
*/
    {
        if (userUploadType == DFU_UPLOAD_FLASH_0X8005000)
 8000a8a:	2b02      	cmp	r3, #2
        {
            userSpace = (u32 *)(USER_CODE_FLASH0X8005000 + userFirmwareLen);
 8000a8c:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
 8000a90:	bf0c      	ite	eq
 8000a92:	f504 44a0 	addeq.w	r4, r4, #20480	; 0x5000
        }
        else
        {
            userSpace = (u32 *)(USER_CODE_FLASH0X8002000 + userFirmwareLen);
 8000a96:	f504 5400 	addne.w	r4, r4, #8192	; 0x2000
        }

        flashErasePage((u32)(userSpace));
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	f7ff feea 	bl	8000874 <flashErasePage>

        for (i = 0; i < thisBlockLen; i = i + 4) {
 8000aa0:	2500      	movs	r5, #0
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <dfuCopyBufferToExec+0x54>)
 8000aa4:	881a      	ldrh	r2, [r3, #0]
 8000aa6:	b292      	uxth	r2, r2
 8000aa8:	4295      	cmp	r5, r2
 8000aaa:	da06      	bge.n	8000aba <dfuCopyBufferToExec+0x3a>
            flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
 8000aac:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <dfuCopyBufferToExec+0x58>)
 8000aae:	1960      	adds	r0, r4, r5
 8000ab0:	58e9      	ldr	r1, [r5, r3]
 8000ab2:	f7ff fef9 	bl	80008a8 <flashWriteWord>
            userSpace = (u32 *)(USER_CODE_FLASH0X8002000 + userFirmwareLen);
        }

        flashErasePage((u32)(userSpace));

        for (i = 0; i < thisBlockLen; i = i + 4) {
 8000ab6:	3504      	adds	r5, #4
 8000ab8:	e7f3      	b.n	8000aa2 <dfuCopyBufferToExec+0x22>
            flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
        }

    }
    userFirmwareLen += thisBlockLen;
 8000aba:	6831      	ldr	r1, [r6, #0]
 8000abc:	881a      	ldrh	r2, [r3, #0]
 8000abe:	b292      	uxth	r2, r2
 8000ac0:	440a      	add	r2, r1
 8000ac2:	6032      	str	r2, [r6, #0]

    thisBlockLen = 0;
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	801a      	strh	r2, [r3, #0]
 8000ac8:	bd70      	pop	{r4, r5, r6, pc}
 8000aca:	bf00      	nop
 8000acc:	20000b24 	andcs	r0, r0, r4, lsr #22
 8000ad0:	20000b20 	andcs	r0, r0, r0, lsr #22
 8000ad4:	20000b1e 	andcs	r0, r0, lr, lsl fp
 8000ad8:	2000031c 	andcs	r0, r0, ip, lsl r3

08000adc <dfuUpdateByRequest>:
}




bool dfuUpdateByRequest(void) {
 8000adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 8000ae0:	4981      	ldr	r1, [pc, #516]	; (8000ce8 <dfuUpdateByRequest+0x20c>)



    u8 startState = dfuAppStatus.bState;
 8000ae2:	4c82      	ldr	r4, [pc, #520]	; (8000cec <dfuUpdateByRequest+0x210>)


bool dfuUpdateByRequest(void) {
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	7008      	strb	r0, [r1, #0]



    u8 startState = dfuAppStatus.bState;
 8000ae8:	7923      	ldrb	r3, [r4, #4]
    dfuAppStatus.bStatus = OK;
 8000aea:	2200      	movs	r2, #0
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;



    u8 startState = dfuAppStatus.bState;
 8000aec:	b2db      	uxtb	r3, r3
    dfuAppStatus.bStatus = OK;
    /* often leaner to nest if's then embed a switch/case */
    if (startState == dfuIDLE)  {
 8000aee:	2b02      	cmp	r3, #2
    dfuBusy = TRUE;



    u8 startState = dfuAppStatus.bState;
    dfuAppStatus.bStatus = OK;
 8000af0:	7022      	strb	r2, [r4, #0]
    /* often leaner to nest if's then embed a switch/case */
    if (startState == dfuIDLE)  {
 8000af2:	d15a      	bne.n	8000baa <dfuUpdateByRequest+0xce>
        /*  device running inside DFU mode */
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop
 8000af4:	7008      	strb	r0, [r1, #0]

        if (pInformation->USBbRequest == DFU_DNLOAD) {
 8000af6:	497e      	ldr	r1, [pc, #504]	; (8000cf0 <dfuUpdateByRequest+0x214>)
 8000af8:	6809      	ldr	r1, [r1, #0]
 8000afa:	7848      	ldrb	r0, [r1, #1]
 8000afc:	2801      	cmp	r0, #1
 8000afe:	d12a      	bne.n	8000b56 <dfuUpdateByRequest+0x7a>

            if (pInformation->USBwLengths.w > 0) {
 8000b00:	88c8      	ldrh	r0, [r1, #6]
 8000b02:	2800      	cmp	r0, #0
 8000b04:	f000 80c5 	beq.w	8000c92 <dfuUpdateByRequest+0x1b6>
                userFirmwareLen = 0;
 8000b08:	487a      	ldr	r0, [pc, #488]	; (8000cf4 <dfuUpdateByRequest+0x218>)
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
                switch(pInformation->Current_AlternateSetting)
 8000b0a:	7b09      	ldrb	r1, [r1, #12]
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop

        if (pInformation->USBbRequest == DFU_DNLOAD) {

            if (pInformation->USBwLengths.w > 0) {
                userFirmwareLen = 0;
 8000b0c:	6002      	str	r2, [r0, #0]
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
                switch(pInformation->Current_AlternateSetting)
 8000b0e:	2901      	cmp	r1, #1

        if (pInformation->USBbRequest == DFU_DNLOAD) {

            if (pInformation->USBwLengths.w > 0) {
                userFirmwareLen = 0;
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 8000b10:	f04f 0203 	mov.w	r2, #3
 8000b14:	7122      	strb	r2, [r4, #4]
                switch(pInformation->Current_AlternateSetting)
 8000b16:	d00b      	beq.n	8000b30 <dfuUpdateByRequest+0x54>
 8000b18:	2902      	cmp	r1, #2
 8000b1a:	d11a      	bne.n	8000b52 <dfuUpdateByRequest+0x76>
                        flashErasePage((u32)USER_CODE_FLASH0X8002000);
                        bkp10Write(RTC_BOOTLOADER_JUST_UPLOADED);

                        break;
                    case 2:
                        userUploadType = DFU_UPLOAD_FLASH_0X8002000;
 8000b1c:	4b76      	ldr	r3, [pc, #472]	; (8000cf8 <dfuUpdateByRequest+0x21c>)
 8000b1e:	701a      	strb	r2, [r3, #0]
                        userAppAddr = USER_CODE_FLASH0X8002000;
 8000b20:	4a76      	ldr	r2, [pc, #472]	; (8000cfc <dfuUpdateByRequest+0x220>)
 8000b22:	4b77      	ldr	r3, [pc, #476]	; (8000d00 <dfuUpdateByRequest+0x224>)
 8000b24:	601a      	str	r2, [r3, #0]
                        /* make sure the flash is setup properly, unlock it */
                        setupFLASH();
 8000b26:	f7ff fde1 	bl	80006ec <setupFLASH>
                        flashUnlock();
 8000b2a:	f7ff fee9 	bl	8000900 <flashUnlock>
 8000b2e:	e00b      	b.n	8000b48 <dfuUpdateByRequest+0x6c>
                        userUploadType = DFU_UPLOAD_RAM;
                        break;
                        */
                    case 1:

                        userAppAddr = USER_CODE_FLASH0X8005000;
 8000b30:	4974      	ldr	r1, [pc, #464]	; (8000d04 <dfuUpdateByRequest+0x228>)
 8000b32:	4a73      	ldr	r2, [pc, #460]	; (8000d00 <dfuUpdateByRequest+0x224>)
 8000b34:	6011      	str	r1, [r2, #0]
                        userUploadType = DFU_UPLOAD_FLASH_0X8005000;
 8000b36:	4a70      	ldr	r2, [pc, #448]	; (8000cf8 <dfuUpdateByRequest+0x21c>)
 8000b38:	7013      	strb	r3, [r2, #0]

                        /* make sure the flash is setup properly, unlock it */
                        setupFLASH();
 8000b3a:	f7ff fdd7 	bl	80006ec <setupFLASH>
                        flashUnlock();
 8000b3e:	f7ff fedf 	bl	8000900 <flashUnlock>
                        // Clear lower memory so that we can check on cold boot, whether the last upload was to 0x8002000 or 0x8005000
                        flashErasePage((u32)USER_CODE_FLASH0X8002000);
 8000b42:	486e      	ldr	r0, [pc, #440]	; (8000cfc <dfuUpdateByRequest+0x220>)
 8000b44:	f7ff fe96 	bl	8000874 <flashErasePage>
                        userUploadType = DFU_UPLOAD_FLASH_0X8002000;
                        userAppAddr = USER_CODE_FLASH0X8002000;
                        /* make sure the flash is setup properly, unlock it */
                        setupFLASH();
                        flashUnlock();
                        bkp10Write(RTC_BOOTLOADER_JUST_UPLOADED);
 8000b48:	f244 204d 	movw	r0, #16973	; 0x424d
 8000b4c:	f7ff fdf2 	bl	8000734 <bkp10Write>

                        break;
 8000b50:	e0c2      	b.n	8000cd8 <dfuUpdateByRequest+0x1fc>
                    default:
                    // Roger Clark. Report error
                        dfuAppStatus.bState  = dfuERROR;
 8000b52:	230a      	movs	r3, #10
 8000b54:	e062      	b.n	8000c1c <dfuUpdateByRequest+0x140>
                }
            } else {
                dfuAppStatus.bState  = dfuERROR;
                dfuAppStatus.bStatus = errNOTDONE;
            }
        } else if (pInformation->USBbRequest == DFU_UPLOAD) {
 8000b56:	2802      	cmp	r0, #2
 8000b58:	d121      	bne.n	8000b9e <dfuUpdateByRequest+0xc2>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 8000b5a:	2309      	movs	r3, #9
 8000b5c:	7123      	strb	r3, [r4, #4]
            /* record length of first block for calculating target
               address from wValue in consecutive blocks */
            uploadBlockLen = pInformation->USBwLengths.w;
 8000b5e:	88ca      	ldrh	r2, [r1, #6]
 8000b60:	4b69      	ldr	r3, [pc, #420]	; (8000d08 <dfuUpdateByRequest+0x22c>)
 8000b62:	801a      	strh	r2, [r3, #0]
            thisBlockLen = uploadBlockLen; /* for this first block as well */
 8000b64:	8818      	ldrh	r0, [r3, #0]
 8000b66:	4a69      	ldr	r2, [pc, #420]	; (8000d0c <dfuUpdateByRequest+0x230>)
 8000b68:	b280      	uxth	r0, r0
 8000b6a:	8010      	strh	r0, [r2, #0]
            /* calculate where the data should be copied from */
            userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000b6c:	881a      	ldrh	r2, [r3, #0]
 8000b6e:	884b      	ldrh	r3, [r1, #2]
 8000b70:	b292      	uxth	r2, r2
 8000b72:	435a      	muls	r2, r3
 8000b74:	4b5f      	ldr	r3, [pc, #380]	; (8000cf4 <dfuUpdateByRequest+0x218>)
 8000b76:	601a      	str	r2, [r3, #0]
            switch(pInformation->Current_AlternateSetting)
 8000b78:	7b0b      	ldrb	r3, [r1, #12]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d003      	beq.n	8000b86 <dfuUpdateByRequest+0xaa>
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d109      	bne.n	8000b96 <dfuUpdateByRequest+0xba>
                case 1:
                    userAppAddr = USER_CODE_FLASH0X8005000;
                    userAppEnd = getFlashEnd();
                    break;
                case 2:
                    userAppAddr = USER_CODE_FLASH0X8002000;
 8000b82:	4a5e      	ldr	r2, [pc, #376]	; (8000cfc <dfuUpdateByRequest+0x220>)
 8000b84:	e000      	b.n	8000b88 <dfuUpdateByRequest+0xac>
                case 0:
                    userAppAddr = USER_CODE_RAM;
                    userAppEnd = RAM_END;
                    */
                case 1:
                    userAppAddr = USER_CODE_FLASH0X8005000;
 8000b86:	4a5f      	ldr	r2, [pc, #380]	; (8000d04 <dfuUpdateByRequest+0x228>)
                    userAppEnd = getFlashEnd();
                    break;
                case 2:
                    userAppAddr = USER_CODE_FLASH0X8002000;
 8000b88:	4b5d      	ldr	r3, [pc, #372]	; (8000d00 <dfuUpdateByRequest+0x224>)
 8000b8a:	601a      	str	r2, [r3, #0]
                    userAppEnd = getFlashEnd();
 8000b8c:	f7ff fece 	bl	800092c <getFlashEnd>
 8000b90:	4b5f      	ldr	r3, [pc, #380]	; (8000d10 <dfuUpdateByRequest+0x234>)
 8000b92:	6018      	str	r0, [r3, #0]
                    break;
 8000b94:	e0a0      	b.n	8000cd8 <dfuUpdateByRequest+0x1fc>
                default:
                // Roger Clark.
                // Changed this to report error that its unable to write to this memory
                // However the code should never get here as only AlternateSetting 1 and 2 are allowed (see above)
                    dfuAppStatus.bState  = dfuERROR;
 8000b96:	230a      	movs	r3, #10
 8000b98:	7123      	strb	r3, [r4, #4]
                    dfuAppStatus.bStatus = errWRITE;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	e09b      	b.n	8000cd6 <dfuUpdateByRequest+0x1fa>
                    break;
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8000b9e:	2806      	cmp	r0, #6
 8000ba0:	d03c      	beq.n	8000c1c <dfuUpdateByRequest+0x140>
            dfuAppStatus.bState  = dfuIDLE;
            dfuAppStatus.bStatus = OK;  /* are we really ok? we were just aborted */
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000ba2:	2803      	cmp	r0, #3
 8000ba4:	d019      	beq.n	8000bda <dfuUpdateByRequest+0xfe>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000ba6:	2805      	cmp	r0, #5
 8000ba8:	e03c      	b.n	8000c24 <dfuUpdateByRequest+0x148>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuDNLOAD_SYNC)         {
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d10b      	bne.n	8000bc6 <dfuUpdateByRequest+0xea>
        /* device received block, waiting for DFU_GETSTATUS request */

        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000bae:	4a50      	ldr	r2, [pc, #320]	; (8000cf0 <dfuUpdateByRequest+0x214>)
 8000bb0:	6812      	ldr	r2, [r2, #0]
 8000bb2:	7852      	ldrb	r2, [r2, #1]
 8000bb4:	2a03      	cmp	r2, #3
 8000bb6:	d104      	bne.n	8000bc2 <dfuUpdateByRequest+0xe6>

            }
            else
            */
            {
                dfuAppStatus.bState = dfuDNLOAD_IDLE;
 8000bb8:	2305      	movs	r3, #5
 8000bba:	7123      	strb	r3, [r4, #4]
                dfuCopyBufferToExec();
 8000bbc:	f7ff ff60 	bl	8000a80 <dfuCopyBufferToExec>
 8000bc0:	e08a      	b.n	8000cd8 <dfuUpdateByRequest+0x1fc>
            }

        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000bc2:	2a05      	cmp	r2, #5
 8000bc4:	e02e      	b.n	8000c24 <dfuUpdateByRequest+0x148>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuDNBUSY)              {
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	d109      	bne.n	8000bde <dfuUpdateByRequest+0x102>
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {
 8000bca:	4952      	ldr	r1, [pc, #328]	; (8000d14 <dfuUpdateByRequest+0x238>)
 8000bcc:	7808      	ldrb	r0, [r1, #0]
 8000bce:	2802      	cmp	r0, #2
 8000bd0:	d103      	bne.n	8000bda <dfuUpdateByRequest+0xfe>
            dfuAppStatus.bwPollTimeout0 = 0x00;
            code_copy_lock = WAIT;
 8000bd2:	2303      	movs	r3, #3
        }

    } else if (startState == dfuDNBUSY)              {
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {
            dfuAppStatus.bwPollTimeout0 = 0x00;
 8000bd4:	7062      	strb	r2, [r4, #1]
            code_copy_lock = WAIT;
 8000bd6:	700b      	strb	r3, [r1, #0]
            dfuAppStatus.bState = dfuDNLOAD_IDLE;
 8000bd8:	2305      	movs	r3, #5
 8000bda:	7123      	strb	r3, [r4, #4]
 8000bdc:	e07c      	b.n	8000cd8 <dfuUpdateByRequest+0x1fc>
        } else {
            dfuAppStatus.bState = dfuDNBUSY;
        }

    } else if (startState == dfuDNLOAD_IDLE)         {
 8000bde:	2b05      	cmp	r3, #5
 8000be0:	d114      	bne.n	8000c0c <dfuUpdateByRequest+0x130>
        /* device is expecting dfu_dnload requests */
        if (pInformation->USBbRequest == DFU_DNLOAD) {
 8000be2:	4b43      	ldr	r3, [pc, #268]	; (8000cf0 <dfuUpdateByRequest+0x214>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	7853      	ldrb	r3, [r2, #1]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d108      	bne.n	8000bfe <dfuUpdateByRequest+0x122>
            if (pInformation->USBwLengths.w > 0) {
 8000bec:	88d3      	ldrh	r3, [r2, #6]
 8000bee:	b10b      	cbz	r3, 8000bf4 <dfuUpdateByRequest+0x118>
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e7f2      	b.n	8000bda <dfuUpdateByRequest+0xfe>
            } else {
                /* todo, support "disagreement" if device expects more data than this */
                dfuAppStatus.bState  = dfuMANIFEST_SYNC;
 8000bf4:	2306      	movs	r3, #6
 8000bf6:	7123      	strb	r3, [r4, #4]

                /* relock the flash */
                flashLock();
 8000bf8:	f7ff fe7c 	bl	80008f4 <flashLock>
 8000bfc:	e06c      	b.n	8000cd8 <dfuUpdateByRequest+0x1fc>
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8000bfe:	2b06      	cmp	r3, #6
 8000c00:	d04d      	beq.n	8000c9e <dfuUpdateByRequest+0x1c2>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d04b      	beq.n	8000c9e <dfuUpdateByRequest+0x1c2>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000c06:	2b05      	cmp	r3, #5
 8000c08:	d162      	bne.n	8000cd0 <dfuUpdateByRequest+0x1f4>
 8000c0a:	e048      	b.n	8000c9e <dfuUpdateByRequest+0x1c2>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuMANIFEST_SYNC)       {
 8000c0c:	2b06      	cmp	r3, #6
 8000c0e:	d10b      	bne.n	8000c28 <dfuUpdateByRequest+0x14c>
        /* device has received last block, waiting DFU_GETSTATUS request */

        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000c10:	4937      	ldr	r1, [pc, #220]	; (8000cf0 <dfuUpdateByRequest+0x214>)
 8000c12:	6809      	ldr	r1, [r1, #0]
 8000c14:	7849      	ldrb	r1, [r1, #1]
 8000c16:	2903      	cmp	r1, #3
 8000c18:	d103      	bne.n	8000c22 <dfuUpdateByRequest+0x146>
            dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	7123      	strb	r3, [r4, #4]
            dfuAppStatus.bStatus = OK;
 8000c1e:	7022      	strb	r2, [r4, #0]
 8000c20:	e05a      	b.n	8000cd8 <dfuUpdateByRequest+0x1fc>
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000c22:	2905      	cmp	r1, #5
 8000c24:	d154      	bne.n	8000cd0 <dfuUpdateByRequest+0x1f4>
 8000c26:	e7d8      	b.n	8000bda <dfuUpdateByRequest+0xfe>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuMANIFEST)            {
 8000c28:	2b07      	cmp	r3, #7
 8000c2a:	d0f6      	beq.n	8000c1a <dfuUpdateByRequest+0x13e>

        /* should never receive request while in manifest! */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
        dfuAppStatus.bStatus = OK;

    } else if (startState == dfuMANIFEST_WAIT_RESET) {
 8000c2c:	2b08      	cmp	r3, #8
 8000c2e:	d0d4      	beq.n	8000bda <dfuUpdateByRequest+0xfe>
           usb reset or power on reset to run the new code */

        /* consider timing out and self-resetting */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;

    } else if (startState == dfuUPLOAD_IDLE)         {
 8000c30:	2b09      	cmp	r3, #9
 8000c32:	d13c      	bne.n	8000cae <dfuUpdateByRequest+0x1d2>
        /* device expecting further dfu_upload requests */

        if (pInformation->USBbRequest == DFU_UPLOAD) {
 8000c34:	4b2e      	ldr	r3, [pc, #184]	; (8000cf0 <dfuUpdateByRequest+0x214>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	7853      	ldrb	r3, [r2, #1]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d12d      	bne.n	8000c9a <dfuUpdateByRequest+0x1be>
            if (pInformation->USBwLengths.w > 0) {
 8000c3e:	88d0      	ldrh	r0, [r2, #6]
 8000c40:	b338      	cbz	r0, 8000c92 <dfuUpdateByRequest+0x1b6>
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000c42:	4931      	ldr	r1, [pc, #196]	; (8000d08 <dfuUpdateByRequest+0x22c>)
 8000c44:	8852      	ldrh	r2, [r2, #2]
 8000c46:	880b      	ldrh	r3, [r1, #0]
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8000c48:	4d2d      	ldr	r5, [pc, #180]	; (8000d00 <dfuUpdateByRequest+0x224>)
        /* device expecting further dfu_upload requests */

        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	4353      	muls	r3, r2
 8000c4e:	4a29      	ldr	r2, [pc, #164]	; (8000cf4 <dfuUpdateByRequest+0x218>)
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8000c50:	4e2f      	ldr	r6, [pc, #188]	; (8000d10 <dfuUpdateByRequest+0x234>)
        /* device expecting further dfu_upload requests */

        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000c52:	6013      	str	r3, [r2, #0]
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8000c54:	682f      	ldr	r7, [r5, #0]
 8000c56:	f8d2 8000 	ldr.w	r8, [r2]
 8000c5a:	f8b1 c000 	ldrh.w	ip, [r1]
 8000c5e:	4447      	add	r7, r8
 8000c60:	6833      	ldr	r3, [r6, #0]
 8000c62:	fa1f fc8c 	uxth.w	ip, ip
 8000c66:	4467      	add	r7, ip
 8000c68:	429f      	cmp	r7, r3
 8000c6a:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <dfuUpdateByRequest+0x230>)
 8000c6c:	d803      	bhi.n	8000c76 <dfuUpdateByRequest+0x19a>
                    thisBlockLen = uploadBlockLen;
 8000c6e:	880a      	ldrh	r2, [r1, #0]
 8000c70:	b292      	uxth	r2, r2
 8000c72:	801a      	strh	r2, [r3, #0]
 8000c74:	e019      	b.n	8000caa <dfuUpdateByRequest+0x1ce>
                    dfuAppStatus.bState  = dfuUPLOAD_IDLE;
                } else {
                    /* if above comparison was just equal, thisBlockLen becomes zero
                    next time when USBWValue has been increased by one */
                    thisBlockLen = userAppEnd - userAppAddr - userFirmwareLen;
 8000c76:	6836      	ldr	r6, [r6, #0]
 8000c78:	682d      	ldr	r5, [r5, #0]
 8000c7a:	6811      	ldr	r1, [r2, #0]
 8000c7c:	1b72      	subs	r2, r6, r5
 8000c7e:	1a52      	subs	r2, r2, r1
 8000c80:	b292      	uxth	r2, r2
 8000c82:	801a      	strh	r2, [r3, #0]
                    /* check for overflow due to USBwValue out of range */
                    if (thisBlockLen >= pInformation->USBwLengths.w) {
 8000c84:	881a      	ldrh	r2, [r3, #0]
 8000c86:	b292      	uxth	r2, r2
 8000c88:	4282      	cmp	r2, r0
 8000c8a:	d308      	bcc.n	8000c9e <dfuUpdateByRequest+0x1c2>
                        thisBlockLen = 0;
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	801a      	strh	r2, [r3, #0]
 8000c90:	e005      	b.n	8000c9e <dfuUpdateByRequest+0x1c2>
                    }
                    dfuAppStatus.bState  = dfuIDLE;
                }
            } else {
                dfuAppStatus.bState  = dfuERROR;
 8000c92:	230a      	movs	r3, #10
 8000c94:	7123      	strb	r3, [r4, #4]
                dfuAppStatus.bStatus = errNOTDONE;
 8000c96:	2309      	movs	r3, #9
 8000c98:	e01d      	b.n	8000cd6 <dfuUpdateByRequest+0x1fa>
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d101      	bne.n	8000ca2 <dfuUpdateByRequest+0x1c6>
            dfuAppStatus.bState  = dfuIDLE;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	e79b      	b.n	8000bda <dfuUpdateByRequest+0xfe>
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d001      	beq.n	8000caa <dfuUpdateByRequest+0x1ce>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000ca6:	2b05      	cmp	r3, #5
 8000ca8:	d112      	bne.n	8000cd0 <dfuUpdateByRequest+0x1f4>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 8000caa:	2309      	movs	r3, #9
 8000cac:	e795      	b.n	8000bda <dfuUpdateByRequest+0xfe>
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }


    } else if (startState == dfuERROR)               {
 8000cae:	2b0a      	cmp	r3, #10
 8000cb0:	d10e      	bne.n	8000cd0 <dfuUpdateByRequest+0x1f4>
        /* status is in error, awaiting DFU_CLRSTATUS request */

        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <dfuUpdateByRequest+0x214>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	785b      	ldrb	r3, [r3, #1]
 8000cb8:	2b03      	cmp	r3, #3
 8000cba:	d101      	bne.n	8000cc0 <dfuUpdateByRequest+0x1e4>
            /* todo, add routine to wait for last block write to finish */
            dfuAppStatus.bState  = dfuERROR;
 8000cbc:	230a      	movs	r3, #10
 8000cbe:	e78c      	b.n	8000bda <dfuUpdateByRequest+0xfe>
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000cc0:	2b05      	cmp	r3, #5
 8000cc2:	d0fb      	beq.n	8000cbc <dfuUpdateByRequest+0x1e0>
            dfuAppStatus.bState  = dfuERROR;
        } else if (pInformation->USBbRequest == DFU_CLRSTATUS) {
 8000cc4:	2b04      	cmp	r3, #4
 8000cc6:	d103      	bne.n	8000cd0 <dfuUpdateByRequest+0x1f4>
            /* todo handle any cleanup we need here */
            dfuAppStatus.bState  = dfuIDLE;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	7123      	strb	r3, [r4, #4]
            dfuAppStatus.bStatus = OK;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	e002      	b.n	8000cd6 <dfuUpdateByRequest+0x1fa>
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else {
        /* some kind of error... */
        dfuAppStatus.bState  = dfuERROR;
 8000cd0:	230a      	movs	r3, #10
 8000cd2:	7123      	strb	r3, [r4, #4]
        dfuAppStatus.bStatus = errSTALLEDPKT;
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	7023      	strb	r3, [r4, #0]
    }

    if (dfuAppStatus.bStatus == OK) {
 8000cd8:	7820      	ldrb	r0, [r4, #0]
        return TRUE;
    } else {
        return FALSE;
    }
}
 8000cda:	f1d0 0001 	rsbs	r0, r0, #1
 8000cde:	bf38      	it	cc
 8000ce0:	2000      	movcc	r0, #0
 8000ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000b2b 	andcs	r0, r0, fp, lsr #22
 8000cec:	20000b25 	andcs	r0, r0, r5, lsr #22
 8000cf0:	2000030c 	andcs	r0, r0, ip, lsl #6
 8000cf4:	20000b20 	andcs	r0, r0, r0, lsr #22
 8000cf8:	20000b24 	andcs	r0, r0, r4, lsr #22
 8000cfc:	08002000 	stmdaeq	r0, {sp}
 8000d00:	200002cc 	andcs	r0, r0, ip, asr #5
 8000d04:	08005000 	stmdaeq	r0, {ip, lr}
 8000d08:	20000b1c 	andcs	r0, r0, ip, lsl fp
 8000d0c:	20000b1e 	andcs	r0, r0, lr, lsl fp
 8000d10:	200002c8 	andcs	r0, r0, r8, asr #5
 8000d14:	200002d8 	ldrdcs	r0, [r0], -r8

08000d18 <dfuUploadStarted>:
void dfuSetState(u8 newState) {
    dfuAppStatus.bState = newState;
}

bool dfuUploadStarted() {
    return dfuBusy;
 8000d18:	4b01      	ldr	r3, [pc, #4]	; (8000d20 <dfuUploadStarted+0x8>)
 8000d1a:	7818      	ldrb	r0, [r3, #0]
}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000b2b 	andcs	r0, r0, fp, lsr #22

08000d24 <dfuFinishUpload>:

void dfuFinishUpload() {
    while (1)
    {
        __asm("nop");
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <dfuFinishUpload>

08000d28 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(u8 bEpNum, u16 wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8000d28:	0080      	lsls	r0, r0, #2
 8000d2a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000d2e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000d32:	6803      	ldr	r3, [r0, #0]
 8000d34:	06ca      	lsls	r2, r1, #27
 8000d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	bf48      	it	mi
 8000d42:	f083 0310 	eormi.w	r3, r3, #16
 8000d46:	068a      	lsls	r2, r1, #26
 8000d48:	bf48      	it	mi
 8000d4a:	f083 0320 	eormi.w	r3, r3, #32
 8000d4e:	6003      	str	r3, [r0, #0]
 8000d50:	4770      	bx	lr

08000d52 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(u8 bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8000d52:	0080      	lsls	r0, r0, #2
 8000d54:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000d58:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000d5c:	6803      	ldr	r3, [r0, #0]
 8000d5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000d6c:	6003      	str	r3, [r0, #0]
 8000d6e:	4770      	bx	lr

08000d70 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(u8 bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8000d70:	0080      	lsls	r0, r0, #2
 8000d72:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000d76:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000d7a:	6803      	ldr	r3, [r0, #0]
 8000d7c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8000d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d84:	041b      	lsls	r3, r3, #16
 8000d86:	0c1b      	lsrs	r3, r3, #16
 8000d88:	6003      	str	r3, [r0, #0]
 8000d8a:	4770      	bx	lr

08000d8c <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(u8 bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8000d8c:	0080      	lsls	r0, r0, #2
 8000d8e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000d92:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000d96:	6803      	ldr	r3, [r0, #0]
 8000d98:	045b      	lsls	r3, r3, #17
 8000d9a:	d506      	bpl.n	8000daa <ClearDTOG_RX+0x1e>
 8000d9c:	6802      	ldr	r2, [r0, #0]
 8000d9e:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8000da2:	4013      	ands	r3, r2
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6003      	str	r3, [r0, #0]
 8000daa:	4770      	bx	lr

08000dac <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(u8 bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8000dac:	0080      	lsls	r0, r0, #2
 8000dae:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000db2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000db6:	6803      	ldr	r3, [r0, #0]
 8000db8:	065b      	lsls	r3, r3, #25
 8000dba:	d506      	bpl.n	8000dca <ClearDTOG_TX+0x1e>
 8000dbc:	6802      	ldr	r2, [r0, #0]
 8000dbe:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc8:	6003      	str	r3, [r0, #0]
 8000dca:	4770      	bx	lr

08000dcc <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPTxAddr(u8 bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <GetEPTxAddr+0x18>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000dd6:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8000dda:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8000dde:	0040      	lsls	r0, r0, #1
}
 8000de0:	8800      	ldrh	r0, [r0, #0]
 8000de2:	4770      	bx	lr
 8000de4:	40005c50 	andmi	r5, r0, r0, asr ip

08000de8 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPRxAddr(u8 bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <GetEPRxAddr+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000df2:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <GetEPRxAddr+0x18>)
 8000df4:	4403      	add	r3, r0
 8000df6:	005b      	lsls	r3, r3, #1
}
 8000df8:	8818      	ldrh	r0, [r3, #0]
 8000dfa:	4770      	bx	lr
 8000dfc:	40005c50 	andmi	r5, r0, r0, asr ip
 8000e00:	20003004 	andcs	r3, r0, r4

08000e04 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(u8 bEpNum, u16 wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <SetEPTxCount+0x14>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e0e:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <SetEPTxCount+0x18>)
 8000e10:	4403      	add	r3, r0
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	6019      	str	r1, [r3, #0]
 8000e16:	4770      	bx	lr
 8000e18:	40005c50 	andmi	r5, r0, r0, asr ip
 8000e1c:	20003002 	andcs	r3, r0, r2

08000e20 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(u8 bEpNum, u16 wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8000e20:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <SetEPRxCount+0x38>)
 8000e22:	293e      	cmp	r1, #62	; 0x3e
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <SetEPRxCount+0x3c>)
 8000e2e:	4403      	add	r3, r0
 8000e30:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8000e34:	d909      	bls.n	8000e4a <SetEPRxCount+0x2a>
 8000e36:	094b      	lsrs	r3, r1, #5
 8000e38:	06c8      	lsls	r0, r1, #27
 8000e3a:	bf04      	itt	eq
 8000e3c:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 8000e40:	b29b      	uxtheq	r3, r3
 8000e42:	029b      	lsls	r3, r3, #10
 8000e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e48:	e004      	b.n	8000e54 <SetEPRxCount+0x34>
 8000e4a:	084b      	lsrs	r3, r1, #1
 8000e4c:	07c9      	lsls	r1, r1, #31
 8000e4e:	bf48      	it	mi
 8000e50:	3301      	addmi	r3, #1
 8000e52:	029b      	lsls	r3, r3, #10
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	4770      	bx	lr
 8000e58:	40005c50 	andmi	r5, r0, r0, asr ip
 8000e5c:	20003006 	andcs	r3, r0, r6

08000e60 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8000e60:	b570      	push	{r4, r5, r6, lr}
  u32 wEPVal = 0;
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8000e62:	4a4c      	ldr	r2, [pc, #304]	; (8000f94 <CTR_LP+0x134>)
 8000e64:	4b4c      	ldr	r3, [pc, #304]	; (8000f98 <CTR_LP+0x138>)
 8000e66:	6811      	ldr	r1, [r2, #0]
 8000e68:	b288      	uxth	r0, r1
 8000e6a:	040c      	lsls	r4, r1, #16
 8000e6c:	8018      	strh	r0, [r3, #0]
 8000e6e:	f140 8090 	bpl.w	8000f92 <CTR_LP+0x132>
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
 8000e72:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000e76:	6011      	str	r1, [r2, #0]
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
 8000e78:	881a      	ldrh	r2, [r3, #0]
 8000e7a:	4c48      	ldr	r4, [pc, #288]	; (8000f9c <CTR_LP+0x13c>)
 8000e7c:	f002 020f 	and.w	r2, r2, #15
 8000e80:	7022      	strb	r2, [r4, #0]
    if (EPindex == 0)
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d15f      	bne.n	8000f46 <CTR_LP+0xe6>
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 8000e86:	4c46      	ldr	r4, [pc, #280]	; (8000fa0 <CTR_LP+0x140>)
 8000e88:	4d46      	ldr	r5, [pc, #280]	; (8000fa4 <CTR_LP+0x144>)
 8000e8a:	6822      	ldr	r2, [r4, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 8000e8c:	4e46      	ldr	r6, [pc, #280]	; (8000fa8 <CTR_LP+0x148>)
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 8000e8e:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8000e92:	802a      	strh	r2, [r5, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 8000e94:	6822      	ldr	r2, [r4, #0]
 8000e96:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8000e9a:	8032      	strh	r2, [r6, #0]
      _SetEPRxStatus(ENDP0, EP_RX_NAK);
 8000e9c:	6822      	ldr	r2, [r4, #0]
 8000e9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ea2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000ea6:	b292      	uxth	r2, r2
 8000ea8:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8000eac:	6022      	str	r2, [r4, #0]
      _SetEPTxStatus(ENDP0, EP_TX_NAK);
 8000eae:	6822      	ldr	r2, [r4, #0]
 8000eb0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000eb8:	b292      	uxth	r2, r2
 8000eba:	f082 0220 	eor.w	r2, r2, #32
 8000ebe:	6022      	str	r2, [r4, #0]


      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	06d8      	lsls	r0, r3, #27
 8000ec4:	d502      	bpl.n	8000ecc <CTR_LP+0x6c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8000ec6:	6823      	ldr	r3, [r4, #0]
        if ((wEPVal & EP_CTR_TX) != 0)
 8000ec8:	0619      	lsls	r1, r3, #24
 8000eca:	d507      	bpl.n	8000edc <CTR_LP+0x7c>
        {
          _ClearEP_CTR_TX(ENDP0);
 8000ecc:	6822      	ldr	r2, [r4, #0]
 8000ece:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	6023      	str	r3, [r4, #0]
          In0_Process();
 8000ed6:	f000 fc61 	bl	800179c <In0_Process>
 8000eda:	e012      	b.n	8000f02 <CTR_LP+0xa2>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }
        else if ((wEPVal &EP_SETUP) != 0)
 8000edc:	051a      	lsls	r2, r3, #20
 8000ede:	d507      	bpl.n	8000ef0 <CTR_LP+0x90>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8000ee0:	6822      	ldr	r2, [r4, #0]
 8000ee2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 8000eea:	f000 fa69 	bl	80013c0 <Setup0_Process>
 8000eee:	e008      	b.n	8000f02 <CTR_LP+0xa2>
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8000ef0:	0418      	lsls	r0, r3, #16
 8000ef2:	d5b6      	bpl.n	8000e62 <CTR_LP+0x2>
        {
          _ClearEP_CTR_RX(ENDP0);
 8000ef4:	6822      	ldr	r2, [r4, #0]
 8000ef6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000efa:	4013      	ands	r3, r2
 8000efc:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8000efe:	f000 fbcd 	bl	800169c <Out0_Process>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	882a      	ldrh	r2, [r5, #0]
 8000f06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	04d1      	lsls	r1, r2, #19
 8000f12:	bf48      	it	mi
 8000f14:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 8000f18:	0495      	lsls	r5, r2, #18
 8000f1a:	4a21      	ldr	r2, [pc, #132]	; (8000fa0 <CTR_LP+0x140>)
 8000f1c:	bf48      	it	mi
 8000f1e:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 8000f22:	6013      	str	r3, [r2, #0]
          _SetEPTxStatus(ENDP0, SaveTState);
 8000f24:	6813      	ldr	r3, [r2, #0]
 8000f26:	8831      	ldrh	r1, [r6, #0]
 8000f28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	06cc      	lsls	r4, r1, #27
 8000f34:	bf48      	it	mi
 8000f36:	f083 0310 	eormi.w	r3, r3, #16
 8000f3a:	0688      	lsls	r0, r1, #26
 8000f3c:	bf48      	it	mi
 8000f3e:	f083 0320 	eormi.w	r3, r3, #32
 8000f42:	6013      	str	r3, [r2, #0]
          return;
 8000f44:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8000f46:	0093      	lsls	r3, r2, #2
 8000f48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f4c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000f50:	681d      	ldr	r5, [r3, #0]
      if ((wEPVal & EP_CTR_RX) != 0)
 8000f52:	0429      	lsls	r1, r5, #16
 8000f54:	d509      	bpl.n	8000f6a <CTR_LP+0x10a>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8000f56:	6818      	ldr	r0, [r3, #0]
 8000f58:	f640 718f 	movw	r1, #3983	; 0xf8f
 8000f5c:	4001      	ands	r1, r0
 8000f5e:	6019      	str	r1, [r3, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <CTR_LP+0x14c>)
 8000f62:	3a01      	subs	r2, #1
 8000f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f68:	4798      	blx	r3

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8000f6a:	062b      	lsls	r3, r5, #24
 8000f6c:	f57f af79 	bpl.w	8000e62 <CTR_LP+0x2>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8000f70:	7821      	ldrb	r1, [r4, #0]
 8000f72:	f648 720f 	movw	r2, #36623	; 0x8f0f
 8000f76:	008b      	lsls	r3, r1, #2
 8000f78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f7c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000f80:	6818      	ldr	r0, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8000f82:	3901      	subs	r1, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8000f84:	4002      	ands	r2, r0
 8000f86:	601a      	str	r2, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <CTR_LP+0x150>)
 8000f8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f8e:	4798      	blx	r3
 8000f90:	e767      	b.n	8000e62 <CTR_LP+0x2>
 8000f92:	bd70      	pop	{r4, r5, r6, pc}
 8000f94:	40005c44 	andmi	r5, r0, r4, asr #24
 8000f98:	200002d4 	ldrdcs	r0, [r0], -r4
 8000f9c:	200002e8 	andcs	r0, r0, r8, ror #5
 8000fa0:	40005c00 	andmi	r5, r0, r0, lsl #24
 8000fa4:	200002da 	ldrdcs	r0, [r0], -sl
 8000fa8:	200002dc 	ldrdcs	r0, [r0], -ip
 8000fac:	20000050 	andcs	r0, r0, r0, asr r0
 8000fb0:	20000034 	andcs	r0, r0, r4, lsr r0

08000fb4 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8000fb4:	b508      	push	{r3, lr}
  pInformation = &Device_Info;
 8000fb6:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <USB_Init+0x20>)
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <USB_Init+0x24>)
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <USB_Init+0x28>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 8000fbc:	6013      	str	r3, [r2, #0]
  pInformation->ControlState = 2;
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	721a      	strb	r2, [r3, #8]
  pProperty = &Device_Property;
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <USB_Init+0x2c>)
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <USB_Init+0x30>)
 8000fc6:	6013      	str	r3, [r2, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <USB_Init+0x34>)
  /* Initialize devices one by one */

  pProperty->Init();
 8000fca:	681b      	ldr	r3, [r3, #0]
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8000fcc:	6011      	str	r1, [r2, #0]
  /* Initialize devices one by one */

  pProperty->Init();
 8000fce:	4798      	blx	r3
 8000fd0:	bd08      	pop	{r3, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000030c 	andcs	r0, r0, ip, lsl #6
 8000fd8:	200002ec 	andcs	r0, r0, ip, ror #5
 8000fdc:	2000006c 	andcs	r0, r0, ip, rrx
 8000fe0:	20000000 	andcs	r0, r0, r0
 8000fe4:	200002e4 	andcs	r0, r0, r4, ror #5
 8000fe8:	20000308 	andcs	r0, r0, r8, lsl #6

08000fec <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetConfiguration(u16 Length)
{
 8000fec:	b510      	push	{r4, lr}
 8000fee:	4c06      	ldr	r4, [pc, #24]	; (8001008 <Standard_GetConfiguration+0x1c>)
  if (Length == 0)
 8000ff0:	b918      	cbnz	r0, 8000ffa <Standard_GetConfiguration+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8000ff2:	6823      	ldr	r3, [r4, #0]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8000ff8:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <Standard_GetConfiguration+0x20>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4798      	blx	r3
  return (u8 *)&pInformation->Current_Configuration;
 8001002:	6820      	ldr	r0, [r4, #0]
 8001004:	300a      	adds	r0, #10
}
 8001006:	bd10      	pop	{r4, pc}
 8001008:	2000030c 	andcs	r0, r0, ip, lsl #6
 800100c:	20000308 	andcs	r0, r0, r8, lsl #6

08001010 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetInterface(u16 Length)
{
 8001010:	b510      	push	{r4, lr}
 8001012:	4c06      	ldr	r4, [pc, #24]	; (800102c <Standard_GetInterface+0x1c>)
  if (Length == 0)
 8001014:	b918      	cbnz	r0, 800101e <Standard_GetInterface+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	2201      	movs	r2, #1
 800101a:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 800101c:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetInterface();
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <Standard_GetInterface+0x20>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	4798      	blx	r3
  return (u8 *)&pInformation->Current_AlternateSetting;
 8001026:	6820      	ldr	r0, [r4, #0]
 8001028:	300c      	adds	r0, #12
}
 800102a:	bd10      	pop	{r4, pc}
 800102c:	2000030c 	andcs	r0, r0, ip, lsl #6
 8001030:	20000308 	andcs	r0, r0, r8, lsl #6

08001034 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
u8 *Standard_GetStatus(u16 Length)
{
 8001034:	b510      	push	{r4, lr}
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <Standard_GetStatus+0x84>)
  if (Length == 0)
 8001038:	b918      	cbnz	r0, 8001042 <Standard_GetStatus+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2202      	movs	r2, #2
 800103e:	821a      	strh	r2, [r3, #16]
    return 0;
 8001040:	bd10      	pop	{r4, pc}
  }

  StatusInfo.w = 0;
 8001042:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <Standard_GetStatus+0x88>)
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001044:	6819      	ldr	r1, [r3, #0]
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  StatusInfo.w = 0;
 8001046:	2000      	movs	r0, #0
 8001048:	8010      	strh	r0, [r2, #0]
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800104a:	780c      	ldrb	r4, [r1, #0]
 800104c:	4613      	mov	r3, r2
 800104e:	f014 047f 	ands.w	r4, r4, #127	; 0x7f
 8001052:	d10d      	bne.n	8001070 <Standard_GetStatus+0x3c>
  {
    /*Get Device Status */
    u8 Feature = pInformation->Current_Feature;
 8001054:	7a4a      	ldrb	r2, [r1, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 8001056:	0691      	lsls	r1, r2, #26
    {
      SetBit(StatusInfo0, 1);
 8001058:	bf44      	itt	mi
 800105a:	2102      	movmi	r1, #2
 800105c:	7019      	strbmi	r1, [r3, #0]
    }

    /* Bus-powered */
    if (ValBit(Feature, 6))
 800105e:	f012 0f40 	tst.w	r2, #64	; 0x40
    {
      ClrBit(StatusInfo0, 0);
 8001062:	781a      	ldrb	r2, [r3, #0]
 8001064:	bf14      	ite	ne
 8001066:	f022 0201 	bicne.w	r2, r2, #1
    }
    else /* Self-powered */
    {
      SetBit(StatusInfo0, 0);
 800106a:	f042 0201 	orreq.w	r2, r2, #1
 800106e:	e014      	b.n	800109a <Standard_GetStatus+0x66>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001070:	2c01      	cmp	r4, #1
 8001072:	d01f      	beq.n	80010b4 <Standard_GetStatus+0x80>
  {
    return (u8 *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001074:	2c02      	cmp	r4, #2
 8001076:	d11e      	bne.n	80010b6 <Standard_GetStatus+0x82>
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;
 8001078:	7909      	ldrb	r1, [r1, #4]

    Related_Endpoint = (wIndex0 & 0x0f);
 800107a:	f001 020f 	and.w	r2, r1, #15
 800107e:	0092      	lsls	r2, r2, #2
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001080:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001084:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8001088:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800108c:	6812      	ldr	r2, [r2, #0]
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 800108e:	d006      	beq.n	800109e <Standard_GetStatus+0x6a>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001090:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001094:	2a10      	cmp	r2, #16
 8001096:	d107      	bne.n	80010a8 <Standard_GetStatus+0x74>
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
 800109c:	e004      	b.n	80010a8 <Standard_GetStatus+0x74>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800109e:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80010a2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80010a6:	e7f6      	b.n	8001096 <Standard_GetStatus+0x62>
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <Standard_GetStatus+0x8c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	4798      	blx	r3
  return (u8 *)&StatusInfo;
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <Standard_GetStatus+0x88>)
 80010b2:	bd10      	pop	{r4, pc}
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    return (u8 *)&StatusInfo;
 80010b4:	4610      	mov	r0, r2
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
  return (u8 *)&StatusInfo;
}
 80010b6:	bd10      	pop	{r4, pc}
 80010b8:	2000030c 	andcs	r0, r0, ip, lsl #6
 80010bc:	20000312 	andcs	r0, r0, r2, lsl r3
 80010c0:	20000308 	andcs	r0, r0, r8, lsl #6

080010c4 <DataStageIn>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 80010c4:	4a23      	ldr	r2, [pc, #140]	; (8001154 <DataStageIn+0x90>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 80010c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 80010ca:	6814      	ldr	r4, [r2, #0]
 80010cc:	4690      	mov	r8, r2
  u32 save_wLength = pEPinfo->Usb_wLength;
 80010ce:	8a23      	ldrh	r3, [r4, #16]
  u32 ControlState = pInformation->ControlState;
 80010d0:	7a26      	ldrb	r6, [r4, #8]
 80010d2:	4f21      	ldr	r7, [pc, #132]	; (8001158 <DataStageIn+0x94>)

  u8 *DataBuffer;
  u32 Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 80010d4:	b9a3      	cbnz	r3, 8001100 <DataStageIn+0x3c>
 80010d6:	2e04      	cmp	r6, #4
 80010d8:	d112      	bne.n	8001100 <DataStageIn+0x3c>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 80010da:	4920      	ldr	r1, [pc, #128]	; (800115c <DataStageIn+0x98>)
 80010dc:	780a      	ldrb	r2, [r1, #0]
 80010de:	2a01      	cmp	r2, #1
 80010e0:	d10a      	bne.n	80010f8 <DataStageIn+0x34>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 80010e2:	4a1f      	ldr	r2, [pc, #124]	; (8001160 <DataStageIn+0x9c>)
 80010e4:	6810      	ldr	r0, [r2, #0]
 80010e6:	4a1f      	ldr	r2, [pc, #124]	; (8001164 <DataStageIn+0xa0>)
 80010e8:	b280      	uxth	r0, r0
 80010ea:	4402      	add	r2, r0
 80010ec:	0052      	lsls	r2, r2, #1
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	2230      	movs	r2, #48	; 0x30
 80010f2:	803a      	strh	r2, [r7, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 80010f4:	700b      	strb	r3, [r1, #0]
 80010f6:	e027      	b.n	8001148 <DataStageIn+0x84>
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 80010f8:	2310      	movs	r3, #16
 80010fa:	803b      	strh	r3, [r7, #0]
      Data_Mul_MaxPacketSize = FALSE;
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
 80010fc:	2607      	movs	r6, #7
 80010fe:	e023      	b.n	8001148 <DataStageIn+0x84>
    }

    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8001100:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8001102:	42ab      	cmp	r3, r5
 8001104:	bf8c      	ite	hi
 8001106:	2602      	movhi	r6, #2
 8001108:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800110a:	429d      	cmp	r5, r3
 800110c:	bf28      	it	cs
 800110e:	461d      	movcs	r5, r3
 8001110:	4628      	mov	r0, r5
 8001112:	69a3      	ldr	r3, [r4, #24]
 8001114:	4798      	blx	r3
 8001116:	4681      	mov	r9, r0

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff fe57 	bl	8000dcc <GetEPTxAddr>
 800111e:	462a      	mov	r2, r5
 8001120:	4601      	mov	r1, r0
 8001122:	4648      	mov	r0, r9
 8001124:	f000 fb68 	bl	80017f8 <UserToPMABufferCopy>

  SetEPTxCount(ENDP0, Length);
 8001128:	4629      	mov	r1, r5
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff fe6a 	bl	8000e04 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
 8001130:	8a23      	ldrh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001132:	f44f 5240 	mov.w	r2, #12288	; 0x3000

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8001136:	1b5b      	subs	r3, r3, r5
 8001138:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 800113a:	8a63      	ldrh	r3, [r4, #18]
 800113c:	441d      	add	r5, r3
  vSetEPTxStatus(EP_TX_VALID);
 800113e:	2330      	movs	r3, #48	; 0x30
 8001140:	803b      	strh	r3, [r7, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <DataStageIn+0xa4>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8001144:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001146:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8001148:	f8d8 3000 	ldr.w	r3, [r8]
 800114c:	721e      	strb	r6, [r3, #8]
 800114e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001152:	bf00      	nop
 8001154:	2000030c 	andcs	r0, r0, ip, lsl #6
 8001158:	200002dc 	ldrdcs	r0, [r0], -ip
 800115c:	20000b2c 	andcs	r0, r0, ip, lsr #22
 8001160:	40005c50 	andmi	r5, r0, r0, asr ip
 8001164:	20003002 	andcs	r3, r0, r2
 8001168:	200002da 	ldrdcs	r0, [r0], -sl

0800116c <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 800116c:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <Standard_SetConfiguration+0x2c>)
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001170:	490a      	ldr	r1, [pc, #40]	; (800119c <Standard_SetConfiguration+0x30>)
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	7849      	ldrb	r1, [r1, #1]
 8001176:	789a      	ldrb	r2, [r3, #2]
 8001178:	4291      	cmp	r1, r2
 800117a:	d30a      	bcc.n	8001192 <Standard_SetConfiguration+0x26>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800117c:	78d9      	ldrb	r1, [r3, #3]
 800117e:	b941      	cbnz	r1, 8001192 <Standard_SetConfiguration+0x26>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8001180:	889c      	ldrh	r4, [r3, #4]
 8001182:	b934      	cbnz	r4, 8001192 <Standard_SetConfiguration+0x26>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8001184:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <Standard_SetConfiguration+0x34>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	4798      	blx	r3
    return USB_SUCCESS;
 800118e:	4620      	mov	r0, r4
 8001190:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USB_UNSUPPORT;
 8001192:	2002      	movs	r0, #2
  }
}
 8001194:	bd10      	pop	{r4, pc}
 8001196:	bf00      	nop
 8001198:	2000030c 	andcs	r0, r0, ip, lsl #6
 800119c:	20000090 	mulcs	r0, r0, r0
 80011a0:	20000308 	andcs	r0, r0, r8, lsl #6

080011a4 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 80011a4:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 80011a6:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <Standard_SetInterface+0x3c>)
 80011a8:	4c0e      	ldr	r4, [pc, #56]	; (80011e4 <Standard_SetInterface+0x40>)
 80011aa:	6812      	ldr	r2, [r2, #0]
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	6992      	ldr	r2, [r2, #24]
 80011b0:	7918      	ldrb	r0, [r3, #4]
 80011b2:	7899      	ldrb	r1, [r3, #2]
 80011b4:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 80011b6:	6823      	ldr	r3, [r4, #0]
 80011b8:	7a9a      	ldrb	r2, [r3, #10]
 80011ba:	b17a      	cbz	r2, 80011dc <Standard_SetInterface+0x38>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 80011bc:	b970      	cbnz	r0, 80011dc <Standard_SetInterface+0x38>
 80011be:	795a      	ldrb	r2, [r3, #5]
 80011c0:	b962      	cbnz	r2, 80011dc <Standard_SetInterface+0x38>
        || (pInformation->USBwValue1 != 0))
 80011c2:	78dd      	ldrb	r5, [r3, #3]
 80011c4:	b955      	cbnz	r5, 80011dc <Standard_SetInterface+0x38>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <Standard_SetInterface+0x44>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80011ce:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 80011d0:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80011d2:	791a      	ldrb	r2, [r3, #4]
 80011d4:	72da      	strb	r2, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 80011d6:	789a      	ldrb	r2, [r3, #2]
 80011d8:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 80011da:	bd38      	pop	{r3, r4, r5, pc}
    }

  }

  return USB_UNSUPPORT;
 80011dc:	2002      	movs	r0, #2
}
 80011de:	bd38      	pop	{r3, r4, r5, pc}
 80011e0:	200002e4 	andcs	r0, r0, r4, ror #5
 80011e4:	2000030c 	andcs	r0, r0, ip, lsl #6
 80011e8:	20000308 	andcs	r0, r0, r8, lsl #6

080011ec <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 80011ec:	b538      	push	{r3, r4, r5, lr}
  u32     Type_Rec = Type_Recipient;
 80011ee:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <Standard_ClearFeature+0xc0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	7818      	ldrb	r0, [r3, #0]
  u32     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80011f4:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 80011f8:	d104      	bne.n	8001204 <Standard_ClearFeature+0x18>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 80011fa:	7a5a      	ldrb	r2, [r3, #9]
 80011fc:	f022 0220 	bic.w	r2, r2, #32
 8001200:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 8001202:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001204:	2802      	cmp	r0, #2
 8001206:	d14e      	bne.n	80012a6 <Standard_ClearFeature+0xba>
    DEVICE* pDev;
    u32 Related_Endpoint;
    u32 wIndex0;
    u32 rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8001208:	885a      	ldrh	r2, [r3, #2]
 800120a:	2a00      	cmp	r2, #0
 800120c:	d14c      	bne.n	80012a8 <Standard_ClearFeature+0xbc>
        || (pInformation->USBwIndex1 != 0))
 800120e:	795a      	ldrb	r2, [r3, #5]
 8001210:	2a00      	cmp	r2, #0
 8001212:	d149      	bne.n	80012a8 <Standard_ClearFeature+0xbc>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 8001214:	791a      	ldrb	r2, [r3, #4]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001216:	4d26      	ldr	r5, [pc, #152]	; (80012b0 <Standard_ClearFeature+0xc4>)
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
 8001218:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 800121c:	0084      	lsls	r4, r0, #2

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800121e:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 8001222:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8001226:	6809      	ldr	r1, [r1, #0]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001228:	782d      	ldrb	r5, [r5, #0]
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 800122a:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800122e:	bf14      	ite	ne
 8001230:	f001 0130 	andne.w	r1, r1, #48	; 0x30
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8001234:	f401 5140 	andeq.w	r1, r1, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001238:	42a8      	cmp	r0, r5
 800123a:	d234      	bcs.n	80012a6 <Standard_ClearFeature+0xba>
 800123c:	2900      	cmp	r1, #0
 800123e:	d032      	beq.n	80012a6 <Standard_ClearFeature+0xba>
        || (pInformation->Current_Configuration == 0))
 8001240:	7a9b      	ldrb	r3, [r3, #10]
 8001242:	b383      	cbz	r3, 80012a6 <Standard_ClearFeature+0xba>


    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001244:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001248:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 800124c:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 800124e:	6823      	ldr	r3, [r4, #0]
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8001250:	d50c      	bpl.n	800126c <Standard_ClearFeature+0x80>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001252:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001256:	2b10      	cmp	r3, #16
 8001258:	d11f      	bne.n	800129a <Standard_ClearFeature+0xae>
      {
        ClearDTOG_TX(Related_Endpoint);
 800125a:	b2c4      	uxtb	r4, r0
 800125c:	4620      	mov	r0, r4
 800125e:	f7ff fda5 	bl	8000dac <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8001262:	4620      	mov	r0, r4
 8001264:	2130      	movs	r1, #48	; 0x30
 8001266:	f7ff fd5f 	bl	8000d28 <SetEPTxStatus>
 800126a:	e016      	b.n	800129a <Standard_ClearFeature+0xae>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800126c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001274:	d111      	bne.n	800129a <Standard_ClearFeature+0xae>
      {
        if (Related_Endpoint == ENDP0)
 8001276:	b928      	cbnz	r0, 8001284 <Standard_ClearFeature+0x98>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <Standard_ClearFeature+0xc8>)
 800127a:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 800127e:	f7ff fdcf 	bl	8000e20 <SetEPRxCount>
 8001282:	e001      	b.n	8001288 <Standard_ClearFeature+0x9c>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 8001284:	f7ff fd82 	bl	8000d8c <ClearDTOG_RX>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8001288:	6823      	ldr	r3, [r4, #0]
 800128a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800128e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001292:	b29b      	uxth	r3, r3
 8001294:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001298:	6023      	str	r3, [r4, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <Standard_ClearFeature+0xcc>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	4798      	blx	r3
    return USB_SUCCESS;
 80012a2:	2000      	movs	r0, #0
 80012a4:	bd38      	pop	{r3, r4, r5, pc}
  }

  return USB_UNSUPPORT;
 80012a6:	2002      	movs	r0, #2
}
 80012a8:	bd38      	pop	{r3, r4, r5, pc}
 80012aa:	bf00      	nop
 80012ac:	2000030c 	andcs	r0, r0, ip, lsl #6
 80012b0:	20000090 	mulcs	r0, r0, r0
 80012b4:	20000000 	andcs	r0, r0, r0
 80012b8:	20000308 	andcs	r0, r0, r8, lsl #6

080012bc <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 80012bc:	b538      	push	{r3, r4, r5, lr}
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <Standard_SetEndPointFeature+0x78>)
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80012c0:	4d1d      	ldr	r5, [pc, #116]	; (8001338 <Standard_SetEndPointFeature+0x7c>)
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 80012c2:	6819      	ldr	r1, [r3, #0]
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80012c4:	782d      	ldrb	r5, [r5, #0]
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 80012c6:	790a      	ldrb	r2, [r1, #4]
  rEP = wIndex0 & ~0x80;
 80012c8:	f022 0480 	bic.w	r4, r2, #128	; 0x80
 80012cc:	00a3      	lsls	r3, r4, #2

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80012ce:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 80012d2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80012d6:	6800      	ldr	r0, [r0, #0]

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 80012d8:	f012 0f80 	tst.w	r2, #128	; 0x80
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80012dc:	bf14      	ite	ne
 80012de:	f000 0030 	andne.w	r0, r0, #48	; 0x30
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 80012e2:	f400 5040 	andeq.w	r0, r0, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80012e6:	42ac      	cmp	r4, r5
 80012e8:	d222      	bcs.n	8001330 <Standard_SetEndPointFeature+0x74>
      || pInformation->USBwValue != 0 || Status == 0
 80012ea:	884c      	ldrh	r4, [r1, #2]
 80012ec:	bb04      	cbnz	r4, 8001330 <Standard_SetEndPointFeature+0x74>
 80012ee:	b1f8      	cbz	r0, 8001330 <Standard_SetEndPointFeature+0x74>
      || pInformation->Current_Configuration == 0)
 80012f0:	7a89      	ldrb	r1, [r1, #10]
 80012f2:	b1e9      	cbz	r1, 8001330 <Standard_SetEndPointFeature+0x74>
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80012f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012f8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80012fc:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001300:	681a      	ldr	r2, [r3, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8001302:	d007      	beq.n	8001314 <Standard_SetEndPointFeature+0x58>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001304:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800130c:	b292      	uxth	r2, r2
 800130e:	f082 0210 	eor.w	r2, r2, #16
 8001312:	e006      	b.n	8001322 <Standard_SetEndPointFeature+0x66>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8001314:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001318:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800131c:	b292      	uxth	r2, r2
 800131e:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8001322:	601a      	str	r2, [r3, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <Standard_SetEndPointFeature+0x80>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	4798      	blx	r3
  return USB_SUCCESS;
 800132c:	2000      	movs	r0, #0
 800132e:	bd38      	pop	{r3, r4, r5, pc}

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8001330:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 8001332:	bd38      	pop	{r3, r4, r5, pc}
 8001334:	2000030c 	andcs	r0, r0, ip, lsl #6
 8001338:	20000090 	mulcs	r0, r0, r0
 800133c:	20000308 	andcs	r0, r0, r8, lsl #6

08001340 <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 8001340:	b508      	push	{r3, lr}
  SetBit(pInformation->Current_Feature, 5);
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <Standard_SetDeviceFeature+0x1c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	7a5a      	ldrb	r2, [r3, #9]
 8001348:	f042 0220 	orr.w	r2, r2, #32
 800134c:	725a      	strb	r2, [r3, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <Standard_SetDeviceFeature+0x20>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	4798      	blx	r3
  return USB_SUCCESS;
}
 8001356:	2000      	movs	r0, #0
 8001358:	bd08      	pop	{r3, pc}
 800135a:	bf00      	nop
 800135c:	2000030c 	andcs	r0, r0, ip, lsl #6
 8001360:	20000308 	andcs	r0, r0, r8, lsl #6

08001364 <Standard_GetDescriptorData>:
*******************************************************************************/
u8 *Standard_GetDescriptorData(u16 Length, ONE_DESCRIPTOR *pDesc)
{
  u32  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <Standard_GetDescriptorData+0x18>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	8a53      	ldrh	r3, [r2, #18]
  if (Length == 0)
 800136a:	b918      	cbnz	r0, 8001374 <Standard_GetDescriptorData+0x10>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 800136c:	8889      	ldrh	r1, [r1, #4]
 800136e:	1acb      	subs	r3, r1, r3
 8001370:	8213      	strh	r3, [r2, #16]
    return 0;
 8001372:	4770      	bx	lr
  }

  return pDesc->Descriptor + wOffset;
 8001374:	6808      	ldr	r0, [r1, #0]
 8001376:	4418      	add	r0, r3
}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	2000030c 	andcs	r0, r0, ip, lsl #6

08001380 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
u8 Post0_Process(void)
{
 8001380:	b508      	push	{r3, lr}
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <Post0_Process+0x30>)
 8001384:	2000      	movs	r0, #0
 8001386:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 800138a:	f7ff fd49 	bl	8000e20 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <Post0_Process+0x34>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	7a18      	ldrb	r0, [r3, #8]
 8001394:	2808      	cmp	r0, #8
 8001396:	d106      	bne.n	80013a6 <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <Post0_Process+0x38>)
 800139a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800139e:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <Post0_Process+0x3c>)
 80013a2:	2210      	movs	r2, #16
 80013a4:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 80013a6:	f1b0 0309 	subs.w	r3, r0, #9
 80013aa:	4258      	negs	r0, r3
 80013ac:	4158      	adcs	r0, r3
 80013ae:	bd08      	pop	{r3, pc}
 80013b0:	20000000 	andcs	r0, r0, r0
 80013b4:	2000030c 	andcs	r0, r0, ip, lsl #6
 80013b8:	200002da 	ldrdcs	r0, [r0], -sl
 80013bc:	200002dc 	ldrdcs	r0, [r0], -ip

080013c0 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Setup0_Process(void)
{
 80013c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80013c2:	4e96      	ldr	r6, [pc, #600]	; (800161c <Setup0_Process+0x25c>)
 80013c4:	4b96      	ldr	r3, [pc, #600]	; (8001620 <Setup0_Process+0x260>)
 80013c6:	6832      	ldr	r2, [r6, #0]

  if (pInformation->ControlState != PAUSE)
 80013c8:	4d96      	ldr	r5, [pc, #600]	; (8001624 <Setup0_Process+0x264>)
 80013ca:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80013cc:	4413      	add	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 80013d2:	682b      	ldr	r3, [r5, #0]
 80013d4:	7a19      	ldrb	r1, [r3, #8]
 80013d6:	2909      	cmp	r1, #9
 80013d8:	d00f      	beq.n	80013fa <Setup0_Process+0x3a>
 80013da:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80013dc:	0052      	lsls	r2, r2, #1
 80013de:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80013e2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 80013e6:	7811      	ldrb	r1, [r2, #0]
 80013e8:	7019      	strb	r1, [r3, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 80013ea:	7851      	ldrb	r1, [r2, #1]
 80013ec:	7059      	strb	r1, [r3, #1]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = *pBuf.w++; /* wValue in Little Endian */
 80013ee:	8891      	ldrh	r1, [r2, #4]
 80013f0:	8059      	strh	r1, [r3, #2]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = *pBuf.w++; /* wIndex in Little Endian */
 80013f2:	8911      	ldrh	r1, [r2, #8]
 80013f4:	8099      	strh	r1, [r3, #4]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength in Little Endian */
 80013f6:	8992      	ldrh	r2, [r2, #12]
 80013f8:	80da      	strh	r2, [r3, #6]
  }

  pInformation->ControlState = SETTING_UP;
 80013fa:	2201      	movs	r2, #1
 80013fc:	721a      	strb	r2, [r3, #8]
  if (pInformation->USBwLength == 0)
 80013fe:	88da      	ldrh	r2, [r3, #6]
 8001400:	785c      	ldrb	r4, [r3, #1]
 8001402:	2a00      	cmp	r2, #0
 8001404:	d161      	bne.n	80014ca <Setup0_Process+0x10a>
{
  RESULT Result = USB_UNSUPPORT;
  u32 RequestNo = pInformation->USBbRequest;
  u32 ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001406:	781a      	ldrb	r2, [r3, #0]
 8001408:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 800140c:	d13a      	bne.n	8001484 <Setup0_Process+0xc4>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 800140e:	2c09      	cmp	r4, #9
 8001410:	d102      	bne.n	8001418 <Setup0_Process+0x58>
    {
      Result = Standard_SetConfiguration();
 8001412:	f7ff feab 	bl	800116c <Standard_SetConfiguration>
 8001416:	e044      	b.n	80014a2 <Setup0_Process+0xe2>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8001418:	2c05      	cmp	r4, #5
 800141a:	d10f      	bne.n	800143c <Setup0_Process+0x7c>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 800141c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8001420:	2a00      	cmp	r2, #0
 8001422:	da01      	bge.n	8001428 <Setup0_Process+0x68>
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 8001424:	2308      	movs	r3, #8
 8001426:	e04d      	b.n	80014c4 <Setup0_Process+0x104>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8001428:	78da      	ldrb	r2, [r3, #3]
 800142a:	2a00      	cmp	r2, #0
 800142c:	d1fa      	bne.n	8001424 <Setup0_Process+0x64>
          || (pInformation->USBwIndex != 0)
 800142e:	889a      	ldrh	r2, [r3, #4]
 8001430:	2a00      	cmp	r2, #0
 8001432:	d1f7      	bne.n	8001424 <Setup0_Process+0x64>
          || (pInformation->Current_Configuration != 0))
 8001434:	7a9b      	ldrb	r3, [r3, #10]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d037      	beq.n	80014aa <Setup0_Process+0xea>
 800143a:	e7f3      	b.n	8001424 <Setup0_Process+0x64>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 800143c:	2c03      	cmp	r4, #3
 800143e:	d113      	bne.n	8001468 <Setup0_Process+0xa8>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 8001440:	789a      	ldrb	r2, [r3, #2]
 8001442:	2a01      	cmp	r2, #1
 8001444:	d007      	beq.n	8001456 <Setup0_Process+0x96>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8001446:	4b78      	ldr	r3, [pc, #480]	; (8001628 <Setup0_Process+0x268>)
 8001448:	4620      	mov	r0, r4
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8001450:	2803      	cmp	r0, #3
 8001452:	d128      	bne.n	80014a6 <Setup0_Process+0xe6>
 8001454:	e035      	b.n	80014c2 <Setup0_Process+0x102>
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
          && (pInformation->USBwIndex == 0)
 8001456:	889a      	ldrh	r2, [r3, #4]
 8001458:	2a00      	cmp	r2, #0
 800145a:	d1f4      	bne.n	8001446 <Setup0_Process+0x86>
          && (ValBit(pInformation->Current_Feature, 5)))
 800145c:	7a5b      	ldrb	r3, [r3, #9]
 800145e:	0698      	lsls	r0, r3, #26
 8001460:	d5f1      	bpl.n	8001446 <Setup0_Process+0x86>
      {
        Result = Standard_SetDeviceFeature();
 8001462:	f7ff ff6d 	bl	8001340 <Standard_SetDeviceFeature>
 8001466:	e01c      	b.n	80014a2 <Setup0_Process+0xe2>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8001468:	2c01      	cmp	r4, #1
 800146a:	d1ec      	bne.n	8001446 <Setup0_Process+0x86>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 800146c:	789a      	ldrb	r2, [r3, #2]
 800146e:	2a01      	cmp	r2, #1
 8001470:	d1e9      	bne.n	8001446 <Setup0_Process+0x86>
          && pInformation->USBwIndex == 0
 8001472:	889a      	ldrh	r2, [r3, #4]
 8001474:	2a00      	cmp	r2, #0
 8001476:	d1e6      	bne.n	8001446 <Setup0_Process+0x86>
          && ValBit(pInformation->Current_Feature, 5))
 8001478:	7a5b      	ldrb	r3, [r3, #9]
 800147a:	0699      	lsls	r1, r3, #26
 800147c:	d5e3      	bpl.n	8001446 <Setup0_Process+0x86>
      {
        Result = Standard_ClearFeature();
 800147e:	f7ff feb5 	bl	80011ec <Standard_ClearFeature>
 8001482:	e00e      	b.n	80014a2 <Setup0_Process+0xe2>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001484:	2a01      	cmp	r2, #1
 8001486:	d104      	bne.n	8001492 <Setup0_Process+0xd2>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8001488:	2c0b      	cmp	r4, #11
 800148a:	d1dc      	bne.n	8001446 <Setup0_Process+0x86>
    {
      Result = Standard_SetInterface();
 800148c:	f7ff fe8a 	bl	80011a4 <Standard_SetInterface>
 8001490:	e007      	b.n	80014a2 <Setup0_Process+0xe2>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001492:	2a02      	cmp	r2, #2
 8001494:	d1d7      	bne.n	8001446 <Setup0_Process+0x86>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 8001496:	2c01      	cmp	r4, #1
 8001498:	d0f1      	beq.n	800147e <Setup0_Process+0xbe>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 800149a:	2c03      	cmp	r4, #3
 800149c:	d1d3      	bne.n	8001446 <Setup0_Process+0x86>
    {
      Result = Standard_SetEndPointFeature();
 800149e:	f7ff ff0d 	bl	80012bc <Standard_SetEndPointFeature>
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 80014a2:	b110      	cbz	r0, 80014aa <Setup0_Process+0xea>
 80014a4:	e7cf      	b.n	8001446 <Setup0_Process+0x86>
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 80014a6:	2800      	cmp	r0, #0
 80014a8:	d1bc      	bne.n	8001424 <Setup0_Process+0x64>
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 80014aa:	6832      	ldr	r2, [r6, #0]
 80014ac:	4b5f      	ldr	r3, [pc, #380]	; (800162c <Setup0_Process+0x26c>)
 80014ae:	b292      	uxth	r2, r2
 80014b0:	4413      	add	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	4b5d      	ldr	r3, [pc, #372]	; (8001630 <Setup0_Process+0x270>)
 80014ba:	2230      	movs	r2, #48	; 0x30
 80014bc:	801a      	strh	r2, [r3, #0]
  {
    ControlState = STALLED;
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 80014be:	2306      	movs	r3, #6
 80014c0:	e000      	b.n	80014c4 <Setup0_Process+0x104>
  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
    {
      ControlState = PAUSE;
 80014c2:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 80014c4:	682a      	ldr	r2, [r5, #0]
 80014c6:	7213      	strb	r3, [r2, #8]
 80014c8:	e0d4      	b.n	8001674 <Setup0_Process+0x2b4>


  CopyRoutine = NULL;
  wOffset = 0;

  if (Request_No == GET_DESCRIPTOR)
 80014ca:	2c06      	cmp	r4, #6
 80014cc:	d118      	bne.n	8001500 <Setup0_Process+0x140>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80014ce:	781a      	ldrb	r2, [r3, #0]
 80014d0:	0652      	lsls	r2, r2, #25
 80014d2:	d17c      	bne.n	80015ce <Setup0_Process+0x20e>
    {
      u8 wValue1 = pInformation->USBwValue1;
 80014d4:	78da      	ldrb	r2, [r3, #3]
 80014d6:	4b54      	ldr	r3, [pc, #336]	; (8001628 <Setup0_Process+0x268>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 80014d8:	2a01      	cmp	r2, #1
 80014da:	d102      	bne.n	80014e2 <Setup0_Process+0x122>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	e06c      	b.n	80015bc <Setup0_Process+0x1fc>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 80014e2:	2a02      	cmp	r2, #2
 80014e4:	d102      	bne.n	80014ec <Setup0_Process+0x12c>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	e067      	b.n	80015bc <Setup0_Process+0x1fc>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 80014ec:	2a03      	cmp	r2, #3
 80014ee:	d102      	bne.n	80014f6 <Setup0_Process+0x136>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	e062      	b.n	80015bc <Setup0_Process+0x1fc>
      } else if (wValue1 == 0x21) /* added to support functional descriptors */
 80014f6:	2a21      	cmp	r2, #33	; 0x21
 80014f8:	d169      	bne.n	80015ce <Setup0_Process+0x20e>
      {
	CopyRoutine = pProperty->GetFunctionalDescriptor;
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fe:	e05d      	b.n	80015bc <Setup0_Process+0x1fc>
      } /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8001500:	2c00      	cmp	r4, #0
 8001502:	d13c      	bne.n	800157e <Setup0_Process+0x1be>
 8001504:	8859      	ldrh	r1, [r3, #2]
 8001506:	2900      	cmp	r1, #0
 8001508:	d161      	bne.n	80015ce <Setup0_Process+0x20e>
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001510:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001514:	d15b      	bne.n	80015ce <Setup0_Process+0x20e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001516:	781a      	ldrb	r2, [r3, #0]
 8001518:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 800151c:	d104      	bne.n	8001528 <Setup0_Process+0x168>
        && (pInformation->USBwIndex == 0))
 800151e:	889b      	ldrh	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80ab 	beq.w	800167c <Setup0_Process+0x2bc>
 8001526:	e052      	b.n	80015ce <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001528:	2a01      	cmp	r2, #1
 800152a:	d10c      	bne.n	8001546 <Setup0_Process+0x186>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 800152c:	4a3e      	ldr	r2, [pc, #248]	; (8001628 <Setup0_Process+0x268>)
 800152e:	7918      	ldrb	r0, [r3, #4]
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	6992      	ldr	r2, [r2, #24]
 8001534:	4790      	blx	r2
 8001536:	2800      	cmp	r0, #0
 8001538:	d149      	bne.n	80015ce <Setup0_Process+0x20e>
          && (pInformation->Current_Configuration != 0))
 800153a:	682b      	ldr	r3, [r5, #0]
 800153c:	7a9b      	ldrb	r3, [r3, #10]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f040 809c 	bne.w	800167c <Setup0_Process+0x2bc>
 8001544:	e043      	b.n	80015ce <Setup0_Process+0x20e>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001546:	2a02      	cmp	r2, #2
 8001548:	d141      	bne.n	80015ce <Setup0_Process+0x20e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800154a:	791b      	ldrb	r3, [r3, #4]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800154c:	4839      	ldr	r0, [pc, #228]	; (8001634 <Setup0_Process+0x274>)
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800154e:	f003 010f 	and.w	r1, r3, #15
 8001552:	008a      	lsls	r2, r1, #2

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001554:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001558:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800155c:	6812      	ldr	r2, [r2, #0]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800155e:	7800      	ldrb	r0, [r0, #0]
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8001560:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001564:	bf14      	ite	ne
 8001566:	f002 0230 	andne.w	r2, r2, #48	; 0x30
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 800156a:	f402 5240 	andeq.w	r2, r2, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800156e:	4281      	cmp	r1, r0
 8001570:	d22d      	bcs.n	80015ce <Setup0_Process+0x20e>
 8001572:	f013 0f70 	tst.w	r3, #112	; 0x70
 8001576:	d12a      	bne.n	80015ce <Setup0_Process+0x20e>
          && (Status != 0))
 8001578:	2a00      	cmp	r2, #0
 800157a:	d17f      	bne.n	800167c <Setup0_Process+0x2bc>
 800157c:	e027      	b.n	80015ce <Setup0_Process+0x20e>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 800157e:	2c08      	cmp	r4, #8
 8001580:	d103      	bne.n	800158a <Setup0_Process+0x1ca>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	065b      	lsls	r3, r3, #25
 8001586:	d07b      	beq.n	8001680 <Setup0_Process+0x2c0>
 8001588:	e021      	b.n	80015ce <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 800158a:	2c0a      	cmp	r4, #10
 800158c:	d11f      	bne.n	80015ce <Setup0_Process+0x20e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800158e:	781a      	ldrb	r2, [r3, #0]
 8001590:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001594:	2a01      	cmp	r2, #1
 8001596:	d11a      	bne.n	80015ce <Setup0_Process+0x20e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8001598:	7a9a      	ldrb	r2, [r3, #10]
 800159a:	b1c2      	cbz	r2, 80015ce <Setup0_Process+0x20e>
 800159c:	8859      	ldrh	r1, [r3, #2]
 800159e:	b9b1      	cbnz	r1, 80015ce <Setup0_Process+0x20e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015a6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80015aa:	d110      	bne.n	80015ce <Setup0_Process+0x20e>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 80015ac:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <Setup0_Process+0x268>)
 80015ae:	7918      	ldrb	r0, [r3, #4]
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	6992      	ldr	r2, [r2, #24]
 80015b4:	4790      	blx	r2
 80015b6:	2800      	cmp	r0, #0
 80015b8:	d064      	beq.n	8001684 <Setup0_Process+0x2c4>
 80015ba:	e008      	b.n	80015ce <Setup0_Process+0x20e>
      CopyRoutine = Standard_GetInterface;
    }

  }

  if (CopyRoutine)
 80015bc:	b13b      	cbz	r3, 80015ce <Setup0_Process+0x20e>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 80015be:	682a      	ldr	r2, [r5, #0]
 80015c0:	2400      	movs	r4, #0
 80015c2:	8254      	strh	r4, [r2, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80015c4:	6193      	str	r3, [r2, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 80015c6:	4620      	mov	r0, r4
 80015c8:	4798      	blx	r3
    Result = USB_SUCCESS;
 80015ca:	4620      	mov	r0, r4
 80015cc:	e00a      	b.n	80015e4 <Setup0_Process+0x224>
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 80015ce:	4b16      	ldr	r3, [pc, #88]	; (8001628 <Setup0_Process+0x268>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	682b      	ldr	r3, [r5, #0]
 80015d4:	6912      	ldr	r2, [r2, #16]
 80015d6:	7858      	ldrb	r0, [r3, #1]
 80015d8:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 80015da:	2803      	cmp	r0, #3
 80015dc:	d102      	bne.n	80015e4 <Setup0_Process+0x224>
    {
      pInformation->ControlState = PAUSE;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <Setup0_Process+0x264>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	e005      	b.n	80015f0 <Setup0_Process+0x230>
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 80015e4:	682b      	ldr	r3, [r5, #0]
 80015e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015ea:	8a1a      	ldrh	r2, [r3, #16]
 80015ec:	428a      	cmp	r2, r1
 80015ee:	d101      	bne.n	80015f4 <Setup0_Process+0x234>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 80015f0:	2209      	movs	r2, #9
 80015f2:	e003      	b.n	80015fc <Setup0_Process+0x23c>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 80015f4:	2802      	cmp	r0, #2
 80015f6:	d000      	beq.n	80015fa <Setup0_Process+0x23a>
 80015f8:	b912      	cbnz	r2, 8001600 <Setup0_Process+0x240>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 80015fa:	2208      	movs	r2, #8
 80015fc:	721a      	strb	r2, [r3, #8]
 80015fe:	e039      	b.n	8001674 <Setup0_Process+0x2b4>
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8001600:	f993 1000 	ldrsb.w	r1, [r3]
 8001604:	2900      	cmp	r1, #0
 8001606:	da2f      	bge.n	8001668 <Setup0_Process+0x2a8>
  {
    /* Device ==> Host */
    vu32 wLength = pInformation->USBwLength;
 8001608:	88d9      	ldrh	r1, [r3, #6]
 800160a:	9101      	str	r1, [sp, #4]

    /* Restrict the data length to be the one host asks */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 800160c:	9801      	ldr	r0, [sp, #4]
 800160e:	4282      	cmp	r2, r0
 8001610:	4805      	ldr	r0, [pc, #20]	; (8001628 <Setup0_Process+0x268>)
 8001612:	d911      	bls.n	8001638 <Setup0_Process+0x278>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8001614:	9a01      	ldr	r2, [sp, #4]
 8001616:	821a      	strh	r2, [r3, #16]
 8001618:	e01f      	b.n	800165a <Setup0_Process+0x29a>
 800161a:	bf00      	nop
 800161c:	40005c50 	andmi	r5, r0, r0, asr ip
 8001620:	20003004 	andcs	r3, r0, r4
 8001624:	2000030c 	andcs	r0, r0, ip, lsl #6
 8001628:	200002e4 	andcs	r0, r0, r4, ror #5
 800162c:	20003002 	andcs	r3, r0, r2
 8001630:	200002dc 	ldrdcs	r0, [r0], -ip
 8001634:	20000090 	mulcs	r0, r0, r0
    }

    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8001638:	428a      	cmp	r2, r1
 800163a:	d20e      	bcs.n	800165a <Setup0_Process+0x29a>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800163c:	6801      	ldr	r1, [r0, #0]
 800163e:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 8001642:	428a      	cmp	r2, r1
 8001644:	d201      	bcs.n	800164a <Setup0_Process+0x28a>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8001646:	2100      	movs	r1, #0
 8001648:	e005      	b.n	8001656 <Setup0_Process+0x296>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800164a:	fb92 f4f1 	sdiv	r4, r2, r1
 800164e:	fb01 2214 	mls	r2, r1, r4, r2
 8001652:	b912      	cbnz	r2, 800165a <Setup0_Process+0x29a>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8001654:	2101      	movs	r1, #1
 8001656:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <Setup0_Process+0x2c8>)
 8001658:	7011      	strb	r1, [r2, #0]
      }
    }

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 800165a:	6802      	ldr	r2, [r0, #0]
 800165c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8001660:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8001662:	f7ff fd2f 	bl	80010c4 <DataStageIn>
 8001666:	e005      	b.n	8001674 <Setup0_Process+0x2b4>
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8001668:	2203      	movs	r2, #3
 800166a:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <Setup0_Process+0x2cc>)
 800166e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001672:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8001674:	f7ff fe84 	bl	8001380 <Post0_Process>
}
 8001678:	b002      	add	sp, #8
 800167a:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
        && (pInformation->USBwIndex == 0))
    {
      CopyRoutine = Standard_GetStatus;
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <Setup0_Process+0x2d0>)
 800167e:	e79e      	b.n	80015be <Setup0_Process+0x1fe>
  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      CopyRoutine = Standard_GetConfiguration;
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <Setup0_Process+0x2d4>)
 8001682:	e79c      	b.n	80015be <Setup0_Process+0x1fe>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
    {
      CopyRoutine = Standard_GetInterface;
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <Setup0_Process+0x2d8>)
 8001686:	e79a      	b.n	80015be <Setup0_Process+0x1fe>
 8001688:	20000b2c 	andcs	r0, r0, ip, lsr #22
 800168c:	200002da 	ldrdcs	r0, [r0], -sl
 8001690:	08001035 	stmdaeq	r0, {r0, r2, r4, r5, ip}
 8001694:	08000fed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, sl, fp}
 8001698:	08001011 	stmdaeq	r0, {r0, r4, ip}

0800169c <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Out0_Process(void)
{
 800169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32 ControlState = pInformation->ControlState;
 800169e:	4d2b      	ldr	r5, [pc, #172]	; (800174c <Out0_Process+0xb0>)
 80016a0:	682c      	ldr	r4, [r5, #0]
 80016a2:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d001      	beq.n	80016ac <Out0_Process+0x10>
 80016a8:	2b05      	cmp	r3, #5
 80016aa:	d141      	bne.n	8001730 <Out0_Process+0x94>
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 80016ac:	69a3      	ldr	r3, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 80016ae:	8a22      	ldrh	r2, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 80016b0:	b1ab      	cbz	r3, 80016de <Out0_Process+0x42>
 80016b2:	b1a2      	cbz	r2, 80016de <Out0_Process+0x42>
  {
    u8 *Buffer;
    u32 Length;

    Length = pEPinfo->PacketSize;
 80016b4:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80016b6:	4296      	cmp	r6, r2
 80016b8:	bf28      	it	cs
 80016ba:	4616      	movcs	r6, r2
 80016bc:	4630      	mov	r0, r6
 80016be:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 80016c0:	8a23      	ldrh	r3, [r4, #16]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80016c2:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 80016c4:	1b9b      	subs	r3, r3, r6
 80016c6:	8223      	strh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 80016c8:	8a63      	ldrh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 80016ca:	2000      	movs	r0, #0
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 80016cc:	4433      	add	r3, r6
 80016ce:	8263      	strh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 80016d0:	f7ff fb8a 	bl	8000de8 <GetEPRxAddr>
 80016d4:	4632      	mov	r2, r6
 80016d6:	4601      	mov	r1, r0
 80016d8:	4638      	mov	r0, r7
 80016da:	f000 f8a5 	bl	8001828 <PMAToUserBufferCopy>
  }

  if (pEPinfo->Usb_rLength != 0)
 80016de:	8a23      	ldrh	r3, [r4, #16]
 80016e0:	b153      	cbz	r3, 80016f8 <Out0_Process+0x5c>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80016e2:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <Out0_Process+0xb4>)
    SetEPTxCount(ENDP0, 0);
 80016e4:	2000      	movs	r0, #0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80016e6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 80016ea:	4601      	mov	r1, r0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80016ec:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 80016ee:	f7ff fb89 	bl	8000e04 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <Out0_Process+0xb8>)
 80016f4:	2230      	movs	r2, #48	; 0x30
 80016f6:	801a      	strh	r2, [r3, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80016f8:	8a23      	ldrh	r3, [r4, #16]
 80016fa:	8aa2      	ldrh	r2, [r4, #20]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d802      	bhi.n	8001706 <Out0_Process+0x6a>
  {
    pInformation->ControlState = OUT_DATA;
 8001700:	682b      	ldr	r3, [r5, #0]
 8001702:	2203      	movs	r2, #3
 8001704:	e002      	b.n	800170c <Out0_Process+0x70>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8001706:	b11b      	cbz	r3, 8001710 <Out0_Process+0x74>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8001708:	682b      	ldr	r3, [r5, #0]
 800170a:	2205      	movs	r2, #5
 800170c:	721a      	strb	r2, [r3, #8]
 800170e:	e00c      	b.n	800172a <Out0_Process+0x8e>
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8001710:	682a      	ldr	r2, [r5, #0]
 8001712:	2106      	movs	r1, #6
 8001714:	7211      	strb	r1, [r2, #8]
      USB_StatusIn();
 8001716:	4a10      	ldr	r2, [pc, #64]	; (8001758 <Out0_Process+0xbc>)
 8001718:	6811      	ldr	r1, [r2, #0]
 800171a:	4a10      	ldr	r2, [pc, #64]	; (800175c <Out0_Process+0xc0>)
 800171c:	b289      	uxth	r1, r1
 800171e:	440a      	add	r2, r1
 8001720:	0052      	lsls	r2, r2, #1
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <Out0_Process+0xb8>)
 8001726:	2230      	movs	r2, #48	; 0x30
 8001728:	801a      	strh	r2, [r3, #0]
  u32 ControlState = pInformation->ControlState;

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 800172a:	682b      	ldr	r3, [r5, #0]
 800172c:	7a1b      	ldrb	r3, [r3, #8]
 800172e:	e006      	b.n	800173e <Out0_Process+0xa2>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8001730:	2b07      	cmp	r3, #7
 8001732:	d103      	bne.n	800173c <Out0_Process+0xa0>
  {
    (*pProperty->Process_Status_OUT)();
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <Out0_Process+0xc4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	4798      	blx	r3
  }

  else if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 800173c:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 800173e:	682a      	ldr	r2, [r5, #0]
 8001740:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 8001742:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 8001746:	f7ff be1b 	b.w	8001380 <Post0_Process>
 800174a:	bf00      	nop
 800174c:	2000030c 	andcs	r0, r0, ip, lsl #6
 8001750:	200002da 	ldrdcs	r0, [r0], -sl
 8001754:	200002dc 	ldrdcs	r0, [r0], -ip
 8001758:	40005c50 	andmi	r5, r0, r0, asr ip
 800175c:	20003002 	andcs	r3, r0, r2
 8001760:	200002e4 	andcs	r0, r0, r4, ror #5

08001764 <SetDeviceAddress>:
* Input          : - Val: device adress.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(u8 Val)
{
 8001764:	b530      	push	{r4, r5, lr}
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <SetDeviceAddress+0x30>)
 8001768:	781c      	ldrb	r4, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800176a:	2300      	movs	r3, #0
 800176c:	42a3      	cmp	r3, r4
 800176e:	d20c      	bcs.n	800178a <SetDeviceAddress+0x26>
 8001770:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8001774:	f502 52b8 	add.w	r2, r2, #5888	; 0x1700
 8001778:	0091      	lsls	r1, r2, #2
  {
    _SetEPAddress((u8)i, (u8)i);
 800177a:	680d      	ldr	r5, [r1, #0]
 800177c:	f648 728f 	movw	r2, #36751	; 0x8f8f
 8001780:	402a      	ands	r2, r5
 8001782:	431a      	orrs	r2, r3
 8001784:	600a      	str	r2, [r1, #0]
{
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8001786:	3301      	adds	r3, #1
 8001788:	e7f0      	b.n	800176c <SetDeviceAddress+0x8>
  {
    _SetEPAddress((u8)i, (u8)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800178a:	4b03      	ldr	r3, [pc, #12]	; (8001798 <SetDeviceAddress+0x34>)
 800178c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8001790:	6018      	str	r0, [r3, #0]
 8001792:	bd30      	pop	{r4, r5, pc}
 8001794:	20000090 	mulcs	r0, r0, r0
 8001798:	40005c4c 	andmi	r5, r0, ip, asr #24

0800179c <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 In0_Process(void)
{
 800179c:	b510      	push	{r4, lr}
  u32 ControlState = pInformation->ControlState;
 800179e:	4c13      	ldr	r4, [pc, #76]	; (80017ec <In0_Process+0x50>)
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80017a4:	2a02      	cmp	r2, #2
 80017a6:	d001      	beq.n	80017ac <In0_Process+0x10>
 80017a8:	2a04      	cmp	r2, #4
 80017aa:	d104      	bne.n	80017b6 <In0_Process+0x1a>
  {
    DataStageIn();
 80017ac:	f7ff fc8a 	bl	80010c4 <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 80017b0:	6823      	ldr	r3, [r4, #0]
 80017b2:	7a1b      	ldrb	r3, [r3, #8]
 80017b4:	e013      	b.n	80017de <In0_Process+0x42>
  }

  else if (ControlState == WAIT_STATUS_IN)
 80017b6:	2a06      	cmp	r2, #6
 80017b8:	d110      	bne.n	80017dc <In0_Process+0x40>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80017ba:	785a      	ldrb	r2, [r3, #1]
 80017bc:	2a05      	cmp	r2, #5
 80017be:	d109      	bne.n	80017d4 <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 80017c0:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80017c2:	0652      	lsls	r2, r2, #25
 80017c4:	d106      	bne.n	80017d4 <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 80017c6:	7898      	ldrb	r0, [r3, #2]
 80017c8:	f7ff ffcc 	bl	8001764 <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <In0_Process+0x54>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	4798      	blx	r3
    }
    (*pProperty->Process_Status_IN)();
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <In0_Process+0x58>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	4798      	blx	r3
    ControlState = STALLED;
  }

  else
  {
    ControlState = STALLED;
 80017dc:	2308      	movs	r3, #8
  }

  pInformation->ControlState = ControlState;
 80017de:	6822      	ldr	r2, [r4, #0]
 80017e0:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 80017e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 80017e6:	f7ff bdcb 	b.w	8001380 <Post0_Process>
 80017ea:	bf00      	nop
 80017ec:	2000030c 	andcs	r0, r0, ip, lsl #6
 80017f0:	20000308 	andcs	r0, r0, r8, lsl #6
 80017f4:	200002e4 	andcs	r0, r0, r4, ror #5

080017f8 <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 80017f8:	b530      	push	{r4, r5, lr}
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 80017fa:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 80017fe:	3201      	adds	r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 8001800:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8001804:	1052      	asrs	r2, r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 8001806:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8001808:	2300      	movs	r3, #0
 800180a:	4293      	cmp	r3, r2
 800180c:	f100 0002 	add.w	r0, r0, #2
 8001810:	d009      	beq.n	8001826 <UserToPMABufferCopy+0x2e>
  {
    temp1 = (u16) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 8001812:	f810 5c01 	ldrb.w	r5, [r0, #-1]
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (u16) * pbUsrBuf;
 8001816:	f810 4c02 	ldrb.w	r4, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 800181a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    *pdwVal++ = temp2;
 800181e:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 8001822:	3301      	adds	r3, #1
 8001824:	e7f1      	b.n	800180a <UserToPMABufferCopy+0x12>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001826:	bd30      	pop	{r4, r5, pc}

08001828 <PMAToUserBufferCopy>:
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 8001828:	b510      	push	{r4, lr}
  u32 n = (wNBytes + 1) >> 1;/* /2*/
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 800182a:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 800182e:	3201      	adds	r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 8001830:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 8001834:	1052      	asrs	r2, r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 8001836:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8001838:	2300      	movs	r3, #0
 800183a:	4293      	cmp	r3, r2
 800183c:	d005      	beq.n	800184a <PMAToUserBufferCopy+0x22>
  {
    *(u16*)pbUsrBuf++ = *pdwVal++;
 800183e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8001842:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 8001846:	3301      	adds	r3, #1
 8001848:	e7f7      	b.n	800183a <PMAToUserBufferCopy+0x12>
    pbUsrBuf++;
  }
}
 800184a:	bd10      	pop	{r4, pc}

Disassembly of section .data:

20000000 <Device_Property>:
20000000:	08000495 	stmdaeq	r0, {r0, r2, r4, r7, sl}
20000004:	08000181 	stmdaeq	r0, {r0, r7, r8}
20000008:	0800013f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r8}
2000000c:	08000141 	stmdaeq	r0, {r0, r6, r8}
20000010:	08000229 	stmdaeq	r0, {r0, r3, r5, r9}
20000014:	080002cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9}
20000018:	08000143 	stmdaeq	r0, {r0, r1, r6, r8}
2000001c:	08000289 	stmdaeq	r0, {r0, r3, r7, r9}
20000020:	08000295 	stmdaeq	r0, {r0, r2, r4, r7, r9}
20000024:	080002a1 	stmdaeq	r0, {r0, r5, r7, r9}
20000028:	080002c1 	stmdaeq	r0, {r0, r6, r7, r9}
2000002c:	00000000 	andeq	r0, r0, r0
20000030:	00000040 	andeq	r0, r0, r0, asr #32

20000034 <pEpInt_IN>:
20000034:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000038:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
2000003c:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000040:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000044:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000048:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
2000004c:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}

20000050 <pEpInt_OUT>:
20000050:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000054:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000058:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
2000005c:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000060:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000064:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}
20000068:	0800013d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8}

2000006c <User_Standard_Requests>:
2000006c:	0800014d 	stmdaeq	r0, {r0, r2, r3, r6, r8}
20000070:	08000151 	stmdaeq	r0, {r0, r4, r6, r8}
20000074:	08000169 	stmdaeq	r0, {r0, r3, r5, r6, r8}
20000078:	0800016b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r8}
2000007c:	0800016d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8}
20000080:	0800016f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r8}
20000084:	08000171 	stmdaeq	r0, {r0, r4, r5, r6, r8}
20000088:	08000173 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8}
2000008c:	08000175 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8}

20000090 <Device_Table>:
20000090:	00000101 	andeq	r0, r0, r1, lsl #2

20000094 <usbStringDescriptor>:
20000094:	200000e8 	andcs	r0, r0, r8, ror #1
20000098:	00000004 	andeq	r0, r0, r4
2000009c:	20000132 	andcs	r0, r0, r2, lsr r1
200000a0:	0000001a 	andeq	r0, r0, sl, lsl r0
200000a4:	20000154 	andcs	r0, r0, r4, asr r1
200000a8:	00000014 	andeq	r0, r0, r4, lsl r0
200000ac:	20000119 	andcs	r0, r0, r9, lsl r1
200000b0:	00000010 	andeq	r0, r0, r0, lsl r0
200000b4:	20000168 	andcs	r0, r0, r8, ror #2
200000b8:	00000080 	andeq	r0, r0, r0, lsl #1
200000bc:	200001e8 	andcs	r0, r0, r8, ror #3
200000c0:	0000006c 	andeq	r0, r0, ip, rrx
200000c4:	20000254 	andcs	r0, r0, r4, asr r2
200000c8:	0000006c 	andeq	r0, r0, ip, rrx

200000cc <u8_usbDeviceDescriptorDFU>:
200000cc:	01000112 	tsteq	r0, r2, lsl r1
200000d0:	40000000 	andmi	r0, r0, r0
200000d4:	00030203 	andeq	r0, r3, r3, lsl #4
200000d8:	02010201 	andeq	r0, r1, #268435456	; 0x10000000
200000dc:	00000103 	andeq	r0, r0, r3, lsl #2

200000e0 <usbFunctionalDescriptor>:
200000e0:	20000129 	andcs	r0, r0, r9, lsr #2
200000e4:	00000009 	andeq	r0, r0, r9

200000e8 <u8_usbStringLangId>:
200000e8:	04090304 	streq	r0, [r9], #-772	; 0x304

200000ec <u8_usbConfigDescriptorDFU>:
200000ec:	002d0209 	eoreq	r0, sp, r9, lsl #4
200000f0:	80000101 	andhi	r0, r0, r1, lsl #2
200000f4:	00040932 	andeq	r0, r4, r2, lsr r9
200000f8:	01fe0000 	mvnseq	r0, r0
200000fc:	04090402 	streq	r0, [r9], #-1026	; 0x402
20000100:	fe000100 	cdp2	1, 0, cr0, cr0, cr0, {0}
20000104:	09050201 	stmdbeq	r5, {r0, r9}
20000108:	00020004 	andeq	r0, r2, r4
2000010c:	060201fe 			; <UNDEFINED> instruction: 0x060201fe
20000110:	ff032109 			; <UNDEFINED> instruction: 0xff032109
20000114:	10080000 	andne	r0, r8, r0
20000118:	4c031001 	stcmi	0, cr1, [r3], {1}

20000119 <u8_usbStringSerial>:
20000119:	004c0310 	subeq	r0, ip, r0, lsl r3
2000011d:	004d004c 	subeq	r0, sp, ip, asr #32
20000121:	00300020 	eorseq	r0, r0, r0, lsr #32
20000125:	00330030 	eorseq	r0, r3, r0, lsr r0

20000129 <u8_usbFunctionalDescriptor>:
20000129:	ff032109 			; <UNDEFINED> instruction: 0xff032109
2000012d:	10080000 	andne	r0, r8, r0
20000131:	32031a01 	andcc	r1, r3, #4096	; 0x1000

20000132 <u8_usbStringVendor>:
20000132:	0032031a 	eorseq	r0, r2, sl, lsl r3
20000136:	00330030 	eorseq	r0, r3, r0, lsr r0
2000013a:	006e0049 	rsbeq	r0, lr, r9, asr #32
2000013e:	00750064 	rsbseq	r0, r5, r4, rrx
20000142:	00740073 	rsbseq	r0, r4, r3, ror r0
20000146:	00690072 	rsbeq	r0, r9, r2, ror r0
2000014a:	00cc0065 	sbceq	r0, ip, r5, rrx

2000014c <usbDeviceDescriptorDFU>:
2000014c:	200000cc 	andcs	r0, r0, ip, asr #1
20000150:	00000012 	andeq	r0, r0, r2, lsl r0

20000154 <u8_usbStringProduct>:
20000154:	004d0314 	subeq	r0, sp, r4, lsl r3
20000158:	00740061 	rsbseq	r0, r4, r1, rrx
2000015c:	00690072 	rsbeq	r0, r9, r2, ror r0
20000160:	00200078 	eoreq	r0, r0, r8, ror r0
20000164:	00460044 	subeq	r0, r6, r4, asr #32

20000168 <u8_usbStringAlt0>:
20000168:	00530380 	subseq	r0, r3, r0, lsl #7
2000016c:	004d0054 	subeq	r0, sp, r4, asr r0
20000170:	00320033 	eorseq	r0, r2, r3, lsr r0
20000174:	00750064 	rsbseq	r0, r5, r4, rrx
20000178:	006e0069 	rsbeq	r0, lr, r9, rrx
2000017c:	0020006f 	eoreq	r0, r0, pc, rrx
20000180:	006f0062 	rsbeq	r0, pc, r2, rrx
20000184:	0074006f 	rsbseq	r0, r4, pc, rrx
20000188:	006f006c 	rsbeq	r0, pc, ip, rrx
2000018c:	00640061 	rsbeq	r0, r4, r1, rrx
20000190:	00720065 	rsbseq	r0, r2, r5, rrx
20000194:	00760020 	rsbseq	r0, r6, r0, lsr #32
20000198:	002e0031 	eoreq	r0, lr, r1, lsr r0
2000019c:	00200030 	eoreq	r0, r0, r0, lsr r0
200001a0:	00450020 	subeq	r0, r5, r0, lsr #32
200001a4:	00520052 	subseq	r0, r2, r2, asr r0
200001a8:	0052004f 	subseq	r0, r2, pc, asr #32
200001ac:	0020002e 	eoreq	r0, r0, lr, lsr #32
200001b0:	00700055 	rsbseq	r0, r0, r5, asr r0
200001b4:	006f006c 	rsbeq	r0, pc, ip, rrx
200001b8:	00640061 	rsbeq	r0, r4, r1, rrx
200001bc:	00740020 	rsbseq	r0, r4, r0, lsr #32
200001c0:	0020006f 	eoreq	r0, r0, pc, rrx
200001c4:	00410052 	subeq	r0, r1, r2, asr r0
200001c8:	0020004d 	eoreq	r0, r0, sp, asr #32
200001cc:	006f006e 	rsbeq	r0, pc, lr, rrx
200001d0:	00200074 	eoreq	r0, r0, r4, ror r0
200001d4:	00750073 	rsbseq	r0, r5, r3, ror r0
200001d8:	00700070 	rsbseq	r0, r0, r0, ror r0
200001dc:	0072006f 	rsbseq	r0, r2, pc, rrx
200001e0:	00650074 	rsbeq	r0, r5, r4, ror r0
200001e4:	002e0064 	eoreq	r0, lr, r4, rrx

200001e8 <u8_usbStringAlt1>:
200001e8:	0053036c 	subseq	r0, r3, ip, ror #6
200001ec:	004d0054 	subeq	r0, sp, r4, asr r0
200001f0:	00320033 	eorseq	r0, r2, r3, lsr r0
200001f4:	00750064 	rsbseq	r0, r5, r4, rrx
200001f8:	006e0069 	rsbeq	r0, lr, r9, rrx
200001fc:	0020006f 	eoreq	r0, r0, pc, rrx
20000200:	006f0062 	rsbeq	r0, pc, r2, rrx
20000204:	0074006f 	rsbseq	r0, r4, pc, rrx
20000208:	006f006c 	rsbeq	r0, pc, ip, rrx
2000020c:	00640061 	rsbeq	r0, r4, r1, rrx
20000210:	00720065 	rsbseq	r0, r2, r5, rrx
20000214:	00760020 	rsbseq	r0, r6, r0, lsr #32
20000218:	002e0031 	eoreq	r0, lr, r1, lsr r0
2000021c:	00200030 	eoreq	r0, r0, r0, lsr r0
20000220:	00550020 	subseq	r0, r5, r0, lsr #32
20000224:	006c0070 	rsbeq	r0, ip, r0, ror r0
20000228:	0061006f 	rsbeq	r0, r1, pc, rrx
2000022c:	00200064 	eoreq	r0, r0, r4, rrx
20000230:	006f0074 	rsbeq	r0, pc, r4, ror r0	; <UNPREDICTABLE>
20000234:	00460020 	subeq	r0, r6, r0, lsr #32
20000238:	0061006c 	rsbeq	r0, r1, ip, rrx
2000023c:	00680073 	rsbeq	r0, r8, r3, ror r0
20000240:	00300020 	eorseq	r0, r0, r0, lsr #32
20000244:	00380078 	eorseq	r0, r8, r8, ror r0
20000248:	00300030 	eorseq	r0, r0, r0, lsr r0
2000024c:	00300035 	eorseq	r0, r0, r5, lsr r0
20000250:	00300030 	eorseq	r0, r0, r0, lsr r0

20000254 <u8_usbStringAlt2>:
20000254:	0053036c 	subseq	r0, r3, ip, ror #6
20000258:	004d0054 	subeq	r0, sp, r4, asr r0
2000025c:	00320033 	eorseq	r0, r2, r3, lsr r0
20000260:	00750064 	rsbseq	r0, r5, r4, rrx
20000264:	006e0069 	rsbeq	r0, lr, r9, rrx
20000268:	0020006f 	eoreq	r0, r0, pc, rrx
2000026c:	006f0062 	rsbeq	r0, pc, r2, rrx
20000270:	0074006f 	rsbseq	r0, r4, pc, rrx
20000274:	006f006c 	rsbeq	r0, pc, ip, rrx
20000278:	00640061 	rsbeq	r0, r4, r1, rrx
2000027c:	00720065 	rsbseq	r0, r2, r5, rrx
20000280:	00760020 	rsbseq	r0, r6, r0, lsr #32
20000284:	002e0031 	eoreq	r0, lr, r1, lsr r0
20000288:	00200030 	eoreq	r0, r0, r0, lsr r0
2000028c:	00550020 	subseq	r0, r5, r0, lsr #32
20000290:	006c0070 	rsbeq	r0, ip, r0, ror r0
20000294:	0061006f 	rsbeq	r0, r1, pc, rrx
20000298:	00200064 	eoreq	r0, r0, r4, rrx
2000029c:	006f0074 	rsbeq	r0, pc, r4, ror r0	; <UNPREDICTABLE>
200002a0:	00460020 	subeq	r0, r6, r0, lsr #32
200002a4:	0061006c 	rsbeq	r0, r1, ip, rrx
200002a8:	00680073 	rsbeq	r0, r8, r3, ror r0
200002ac:	00300020 	eorseq	r0, r0, r0, lsr #32
200002b0:	00380078 	eorseq	r0, r8, r8, ror r0
200002b4:	00300030 	eorseq	r0, r0, r0, lsr r0
200002b8:	00300032 	eorseq	r0, r0, r2, lsr r0
200002bc:	00300030 	eorseq	r0, r0, r0, lsr r0

200002c0 <usbConfigDescriptorDFU>:
200002c0:	200000ec 	andcs	r0, r0, ip, ror #1
200002c4:	0000002d 	andeq	r0, r0, sp, lsr #32

200002c8 <userAppEnd>:
200002c8:	20005000 	andcs	r5, r0, r0

200002cc <userAppAddr>:
200002cc:	20000c00 	andcs	r0, r0, r0, lsl #24

Disassembly of section .bss:

200002d0 <_sbss>:
200002d0:	00000000 	andeq	r0, r0, r0

200002d4 <wIstr>:
	...

200002d6 <ResumeS>:
	...

200002d8 <code_copy_lock>:
	...

200002da <SaveRState>:
	...

200002dc <SaveTState>:
200002dc:	00000000 	andeq	r0, r0, r0

200002e0 <SaveState>:
200002e0:	00000000 	andeq	r0, r0, r0

200002e4 <pProperty>:
200002e4:	00000000 	andeq	r0, r0, r0

200002e8 <EPindex>:
200002e8:	00000000 	andeq	r0, r0, r0

200002ec <Device_Info>:
	...

20000308 <pUser_Standard_Requests>:
20000308:	00000000 	andeq	r0, r0, r0

2000030c <pInformation>:
2000030c:	00000000 	andeq	r0, r0, r0

20000310 <wInterrupt_Mask>:
	...

20000312 <StatusInfo>:
	...

Disassembly of section .bss.bIntPackSOF:

20000314 <bIntPackSOF>:
	...

Disassembly of section .bss.bDeviceState:

20000318 <bDeviceState>:
20000318:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.recvBuffer:

2000031c <recvBuffer>:
	...

Disassembly of section .bss.uploadBlockLen:

20000b1c <uploadBlockLen>:
	...

Disassembly of section .bss.thisBlockLen:

20000b1e <thisBlockLen>:
	...

Disassembly of section .bss.userFirmwareLen:

20000b20 <userFirmwareLen>:
20000b20:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.userUploadType:

20000b24 <userUploadType>:
	...

Disassembly of section .bss.dfuAppStatus:

20000b25 <dfuAppStatus>:
20000b25:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .bss.dfuBusy:

20000b2b <dfuBusy>:
	...

Disassembly of section .bss.Data_Mul_MaxPacketSize:

20000b2c <Data_Mul_MaxPacketSize>:
	...

Disassembly of section ._usrstack:

20000b2d <_susrstack-0x3>:
20000b2d:	00000000 	andeq	r0, r0, r0

20000b30 <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
   0:	3a434347 	bcc	10d0d24 <__Stack_Size+0x10d0924>
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xd45
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	64724128 	ldrbtvs	r4, [r2], #-296	; 0x128
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	6f6e6975 	svcvs	0x006e6975
  34:	69756220 	ldmdbvs	r5!, {r5, r9, sp, lr}^
  38:	2929646c 	stmdbcs	r9!, {r2, r3, r5, r6, sl, sp, lr}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	3220332e 	eorcc	r3, r0, #-1207959552	; 0xb8000000
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	30343130 	eorscc	r3, r4, r0, lsr r1
  48:	20383232 	eorscs	r3, r8, r2, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <BootRAM+0xef6faaf>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	2d385f34 	ldccs	15, cr5, [r8, #-208]!	; 0xffffff30
  68:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  6c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(u8 bEpNum, u8 bDir, u16 wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
  70:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  74:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  78:	33383032 	teqcc	r8, #50	; 0x32
  7c:	005d3232 	subseq	r3, sp, r2, lsr r2

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	14041202 	strne	r1, [r4], #-514	; 0x202
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	1a011803 	bne	4603c <__Stack_Size+0x45c3c>
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	080000f0 	stmdaeq	r0, {r4, r5, r6, r7}
  14:	00000048 	andeq	r0, r0, r8, asr #32
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	08000138 	stmdaeq	r0, {r3, r4, r5, r8}
  1c:	00000004 	andeq	r0, r0, r4
	...
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	00620002 	rsbeq	r0, r2, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	00040000 	andeq	r0, r4, r0
	...

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	0000007a 	andeq	r0, r0, sl, ror r0
	...

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  48:	00000114 	andeq	r0, r0, r4, lsl r1
  4c:	00ca0002 	sbceq	r0, sl, r2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	0800013c 	stmdaeq	r0, {r2, r3, r4, r5, r8}
  5c:	00000002 	andeq	r0, r0, r2
  60:	0800013e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8}
  64:	00000002 	andeq	r0, r0, r2
  68:	08000140 	stmdaeq	r0, {r6, r8}
  6c:	00000002 	andeq	r0, r0, r2
  70:	08000142 	stmdaeq	r0, {r1, r6, r8}
  74:	0000000a 	andeq	r0, r0, sl
  78:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
  7c:	00000002 	andeq	r0, r0, r2
  80:	08000150 	stmdaeq	r0, {r4, r6, r8}
  84:	00000018 	andeq	r0, r0, r8, lsl r0
  88:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}
  8c:	00000002 	andeq	r0, r0, r2
  90:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
  94:	00000002 	andeq	r0, r0, r2
  98:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  9c:	00000002 	andeq	r0, r0, r2
  a0:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
  a4:	00000002 	andeq	r0, r0, r2
  a8:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
  ac:	00000002 	andeq	r0, r0, r2
  b0:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
  b4:	00000002 	andeq	r0, r0, r2
  b8:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	08000180 	stmdaeq	r0, {r7, r8}
  c4:	000000a8 	andeq	r0, r0, r8, lsr #1
  c8:	08000228 	stmdaeq	r0, {r3, r5, r9}
  cc:	00000060 	andeq	r0, r0, r0, rrx
  d0:	08000288 	stmdaeq	r0, {r3, r7, r9}
  d4:	0000000c 	andeq	r0, r0, ip
  d8:	08000294 	stmdaeq	r0, {r2, r4, r7, r9}
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	080002a0 	stmdaeq	r0, {r5, r7, r9}
  e4:	00000020 	andeq	r0, r0, r0, lsr #32
  e8:	080002c0 	stmdaeq	r0, {r6, r7, r9}
  ec:	0000000c 	andeq	r0, r0, ip
  f0:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
  f8:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
  fc:	0000007c 	andeq	r0, r0, ip, ror r0
 100:	00000000 	andeq	r0, r0, r0
 104:	00000004 	andeq	r0, r0, r4
 108:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
 10c:	0000001c 	andeq	r0, r0, ip, lsl r0
 110:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
 114:	00000018 	andeq	r0, r0, r8, lsl r0
 118:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
 11c:	00000084 	andeq	r0, r0, r4, lsl #1
 120:	08000428 	stmdaeq	r0, {r3, r5, sl}
 124:	00000028 	andeq	r0, r0, r8, lsr #32
 128:	08000450 	stmdaeq	r0, {r4, r6, sl}
 12c:	0000001c 	andeq	r0, r0, ip, lsl r0
 130:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
 134:	00000004 	andeq	r0, r0, r4
 138:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
 13c:	00000024 	andeq	r0, r0, r4, lsr #32
 140:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
 144:	00000040 	andeq	r0, r0, r0, asr #32
 148:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
 14c:	00000022 	andeq	r0, r0, r2, lsr #32
 150:	080004f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl}
 154:	000000b4 	strheq	r0, [r0], -r4
	...
 160:	00000014 	andeq	r0, r0, r4, lsl r0
 164:	0ddc0002 	ldcleq	0, cr0, [ip, #8]
 168:	00040000 	andeq	r0, r4, r0
	...
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	102d0002 	eorne	r0, sp, r2
 180:	00040000 	andeq	r0, r4, r0
 184:	00000000 	andeq	r0, r0, r0
 188:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
 18c:	00000078 	andeq	r0, r0, r8, ror r0
	...
 198:	000000d4 	ldrdeq	r0, [r0], -r4
 19c:	12820002 	addne	r0, r2, #2
 1a0:	00040000 	andeq	r0, r4, r0
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 1ac:	00000016 	andeq	r0, r0, r6, lsl r0
 1b0:	00000000 	andeq	r0, r0, r0
 1b4:	00000012 	andeq	r0, r0, r2, lsl r0
 1b8:	0800063a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl}
 1bc:	00000004 	andeq	r0, r0, r4
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	00000050 	andeq	r0, r0, r0, asr r0
 1c8:	08000640 	stmdaeq	r0, {r6, r9, sl}
 1cc:	00000048 	andeq	r0, r0, r8, asr #32
 1d0:	08000688 	stmdaeq	r0, {r3, r7, r9, sl}
 1d4:	00000060 	andeq	r0, r0, r0, rrx
 1d8:	080006e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl}
 1dc:	00000002 	andeq	r0, r0, r2
 1e0:	080006ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl}
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e8:	08000708 	stmdaeq	r0, {r3, r8, r9, sl}
 1ec:	00000014 	andeq	r0, r0, r4, lsl r0
 1f0:	0800071c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl}
 1f4:	00000018 	andeq	r0, r0, r8, lsl r0
 1f8:	08000734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl}
 1fc:	0000002c 	andeq	r0, r0, ip, lsr #32
 200:	08000760 	stmdaeq	r0, {r5, r6, r8, r9, sl}
 204:	00000048 	andeq	r0, r0, r8, asr #32
 208:	080007a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl}
 20c:	0000006c 	andeq	r0, r0, ip, rrx
 210:	08000814 	stmdaeq	r0, {r2, r4, fp}
 214:	00000024 	andeq	r0, r0, r4, lsr #32
 218:	08000838 	stmdaeq	r0, {r3, r4, r5, fp}
 21c:	00000028 	andeq	r0, r0, r8, lsr #32
 220:	08000860 	stmdaeq	r0, {r5, r6, fp}
 224:	00000014 	andeq	r0, r0, r4, lsl r0
 228:	08000874 	stmdaeq	r0, {r2, r4, r5, r6, fp}
 22c:	00000034 	andeq	r0, r0, r4, lsr r0
 230:	00000000 	andeq	r0, r0, r0
 234:	00000030 	andeq	r0, r0, r0, lsr r0
 238:	080008a8 	stmdaeq	r0, {r3, r5, r7, fp}
 23c:	0000004c 	andeq	r0, r0, ip, asr #32
 240:	080008f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp}
 244:	0000000c 	andeq	r0, r0, ip
 248:	08000900 	stmdaeq	r0, {r8, fp}
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
 250:	08000918 	stmdaeq	r0, {r3, r4, r8, fp}
 254:	00000012 	andeq	r0, r0, r2, lsl r0
 258:	0800092c 	stmdaeq	r0, {r2, r3, r5, r8, fp}
 25c:	00000010 	andeq	r0, r0, r0, lsl r0
 260:	0800093c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp}
 264:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 270:	0000007c 	andeq	r0, r0, ip, ror r0
 274:	1d4d0002 	stclne	0, cr0, [sp, #-8]
 278:	00040000 	andeq	r0, r4, r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	08000954 	stmdaeq	r0, {r2, r4, r6, r8, fp}
 284:	0000005c 	andeq	r0, r0, ip, asr r0
 288:	080009b0 	stmdaeq	r0, {r4, r5, r7, r8, fp}
 28c:	00000044 	andeq	r0, r0, r4, asr #32
 290:	00000000 	andeq	r0, r0, r0
 294:	00000002 	andeq	r0, r0, r2
 298:	080009f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp}
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	08000a0c 	stmdaeq	r0, {r2, r3, r9, fp}
 2a4:	00000018 	andeq	r0, r0, r8, lsl r0
 2a8:	08000a24 	stmdaeq	r0, {r2, r5, r9, fp}
 2ac:	00000028 	andeq	r0, r0, r8, lsr #32
 2b0:	08000a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp}
 2b4:	00000034 	andeq	r0, r0, r4, lsr r0
 2b8:	08000a80 	stmdaeq	r0, {r7, r9, fp}
 2bc:	0000005c 	andeq	r0, r0, ip, asr r0
 2c0:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
 2c4:	0000023c 	andeq	r0, r0, ip, lsr r2
 2c8:	00000000 	andeq	r0, r0, r0
 2cc:	0000000c 	andeq	r0, r0, ip
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	0000000c 	andeq	r0, r0, ip
 2d8:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
 2dc:	0000000c 	andeq	r0, r0, ip
 2e0:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
 2e4:	00000004 	andeq	r0, r0, r4
	...
 2f0:	000001ec 	andeq	r0, r0, ip, ror #3
 2f4:	23d20002 	bicscs	r0, r2, #2
 2f8:	00040000 	andeq	r0, r4, r0
	...
 304:	0000000c 	andeq	r0, r0, ip
 308:	00000000 	andeq	r0, r0, r0
 30c:	0000000c 	andeq	r0, r0, ip
 310:	00000000 	andeq	r0, r0, r0
 314:	0000000c 	andeq	r0, r0, ip
 318:	00000000 	andeq	r0, r0, r0
 31c:	0000000c 	andeq	r0, r0, ip
 320:	00000000 	andeq	r0, r0, r0
 324:	0000000c 	andeq	r0, r0, ip
 328:	00000000 	andeq	r0, r0, r0
 32c:	0000000c 	andeq	r0, r0, ip
 330:	00000000 	andeq	r0, r0, r0
 334:	0000000c 	andeq	r0, r0, ip
 338:	00000000 	andeq	r0, r0, r0
 33c:	00000010 	andeq	r0, r0, r0, lsl r0
 340:	00000000 	andeq	r0, r0, r0
 344:	0000000c 	andeq	r0, r0, ip
 348:	00000000 	andeq	r0, r0, r0
 34c:	0000000e 	andeq	r0, r0, lr
 350:	00000000 	andeq	r0, r0, r0
 354:	00000010 	andeq	r0, r0, r0, lsl r0
 358:	00000000 	andeq	r0, r0, r0
 35c:	0000001c 	andeq	r0, r0, ip, lsl r0
 360:	00000000 	andeq	r0, r0, r0
 364:	00000012 	andeq	r0, r0, r2, lsl r0
 368:	08000d28 	stmdaeq	r0, {r3, r5, r8, sl, fp}
 36c:	0000002a 	andeq	r0, r0, sl, lsr #32
 370:	00000000 	andeq	r0, r0, r0
 374:	0000002a 	andeq	r0, r0, sl, lsr #32
 378:	00000000 	andeq	r0, r0, r0
 37c:	00000024 	andeq	r0, r0, r4, lsr #32
 380:	00000000 	andeq	r0, r0, r0
 384:	00000012 	andeq	r0, r0, r2, lsl r0
 388:	00000000 	andeq	r0, r0, r0
 38c:	00000012 	andeq	r0, r0, r2, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	0000001e 	andeq	r0, r0, lr, lsl r0
 398:	08000d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp}
 39c:	0000001e 	andeq	r0, r0, lr, lsl r0
 3a0:	00000000 	andeq	r0, r0, r0
 3a4:	0000001e 	andeq	r0, r0, lr, lsl r0
 3a8:	00000000 	andeq	r0, r0, r0
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
 3b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b8:	00000000 	andeq	r0, r0, r0
 3bc:	0000001e 	andeq	r0, r0, lr, lsl r0
 3c0:	00000000 	andeq	r0, r0, r0
 3c4:	0000001e 	andeq	r0, r0, lr, lsl r0
 3c8:	00000000 	andeq	r0, r0, r0
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	0000001a 	andeq	r0, r0, sl, lsl r0
 3d8:	00000000 	andeq	r0, r0, r0
 3dc:	0000001a 	andeq	r0, r0, sl, lsl r0
 3e0:	00000000 	andeq	r0, r0, r0
 3e4:	00000018 	andeq	r0, r0, r8, lsl r0
 3e8:	00000000 	andeq	r0, r0, r0
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	00000020 	andeq	r0, r0, r0, lsr #32
 3f8:	00000000 	andeq	r0, r0, r0
 3fc:	00000020 	andeq	r0, r0, r0, lsr #32
 400:	08000d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp}
 404:	00000020 	andeq	r0, r0, r0, lsr #32
 408:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 40c:	00000020 	andeq	r0, r0, r0, lsr #32
 410:	00000000 	andeq	r0, r0, r0
 414:	0000001e 	andeq	r0, r0, lr, lsl r0
 418:	00000000 	andeq	r0, r0, r0
 41c:	00000012 	andeq	r0, r0, r2, lsl r0
 420:	00000000 	andeq	r0, r0, r0
 424:	00000020 	andeq	r0, r0, r0, lsr #32
 428:	00000000 	andeq	r0, r0, r0
 42c:	00000020 	andeq	r0, r0, r0, lsr #32
 430:	08000dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp}
 434:	0000001c 	andeq	r0, r0, ip, lsl r0
 438:	08000de8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, fp}
 43c:	0000001c 	andeq	r0, r0, ip, lsl r0
 440:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
 444:	0000001c 	andeq	r0, r0, ip, lsl r0
 448:	00000000 	andeq	r0, r0, r0
 44c:	00000026 	andeq	r0, r0, r6, lsr #32
 450:	08000e20 	stmdaeq	r0, {r5, r9, sl, fp}
 454:	00000040 	andeq	r0, r0, r0, asr #32
 458:	00000000 	andeq	r0, r0, r0
 45c:	00000020 	andeq	r0, r0, r0, lsr #32
 460:	00000000 	andeq	r0, r0, r0
 464:	00000020 	andeq	r0, r0, r0, lsr #32
 468:	00000000 	andeq	r0, r0, r0
 46c:	00000038 	andeq	r0, r0, r8, lsr r0
 470:	00000000 	andeq	r0, r0, r0
 474:	00000020 	andeq	r0, r0, r0, lsr #32
 478:	00000000 	andeq	r0, r0, r0
 47c:	00000020 	andeq	r0, r0, r0, lsr #32
 480:	00000000 	andeq	r0, r0, r0
 484:	0000001c 	andeq	r0, r0, ip, lsl r0
 488:	00000000 	andeq	r0, r0, r0
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000000 	andeq	r0, r0, r0
 494:	000000a8 	andeq	r0, r0, r8, lsr #1
 498:	00000000 	andeq	r0, r0, r0
 49c:	0000005c 	andeq	r0, r0, ip, asr r0
 4a0:	00000000 	andeq	r0, r0, r0
 4a4:	0000005c 	andeq	r0, r0, ip, asr r0
 4a8:	00000000 	andeq	r0, r0, r0
 4ac:	00000020 	andeq	r0, r0, r0, lsr #32
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	00000020 	andeq	r0, r0, r0, lsr #32
 4b8:	00000000 	andeq	r0, r0, r0
 4bc:	00000044 	andeq	r0, r0, r4, asr #32
 4c0:	00000000 	andeq	r0, r0, r0
 4c4:	0000003a 	andeq	r0, r0, sl, lsr r0
 4c8:	00000000 	andeq	r0, r0, r0
 4cc:	00000006 	andeq	r0, r0, r6
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	0000000a 	andeq	r0, r0, sl
	...
 4e0:	00000024 	andeq	r0, r0, r4, lsr #32
 4e4:	305e0002 	subscc	r0, lr, r2
 4e8:	00040000 	andeq	r0, r4, r0
 4ec:	00000000 	andeq	r0, r0, r0
 4f0:	08000e60 	stmdaeq	r0, {r5, r6, r9, sl, fp}
 4f4:	00000154 	andeq	r0, r0, r4, asr r1
 4f8:	00000000 	andeq	r0, r0, r0
 4fc:	00000070 	andeq	r0, r0, r0, ror r0
	...
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
 50c:	323a0002 	eorscc	r0, sl, #2
 510:	00040000 	andeq	r0, r4, r0
 514:	00000000 	andeq	r0, r0, r0
 518:	08000fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp}
 51c:	00000038 	andeq	r0, r0, r8, lsr r0
	...
 528:	00000094 	muleq	r0, r4, r0
 52c:	36370002 	ldrtcc	r0, [r7], -r2
 530:	00040000 	andeq	r0, r4, r0
 534:	00000000 	andeq	r0, r0, r0
 538:	08000fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp}
 53c:	00000024 	andeq	r0, r0, r4, lsr #32
 540:	08001010 	stmdaeq	r0, {r4, ip}
 544:	00000024 	andeq	r0, r0, r4, lsr #32
 548:	08001034 	stmdaeq	r0, {r2, r4, r5, ip}
 54c:	00000090 	muleq	r0, r0, r0
 550:	080010c4 	stmdaeq	r0, {r2, r6, r7, ip}
 554:	000000a8 	andeq	r0, r0, r8, lsr #1
 558:	0800116c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip}
 55c:	00000038 	andeq	r0, r0, r8, lsr r0
 560:	080011a4 	stmdaeq	r0, {r2, r5, r7, r8, ip}
 564:	00000048 	andeq	r0, r0, r8, asr #32
 568:	080011ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip}
 56c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 570:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
 574:	00000084 	andeq	r0, r0, r4, lsl #1
 578:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
 57c:	00000024 	andeq	r0, r0, r4, lsr #32
 580:	08001364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip}
 584:	0000001c 	andeq	r0, r0, ip, lsl r0
 588:	08001380 	stmdaeq	r0, {r7, r8, r9, ip}
 58c:	00000040 	andeq	r0, r0, r0, asr #32
 590:	080013c0 	stmdaeq	r0, {r6, r7, r8, r9, ip}
 594:	000002dc 	ldrdeq	r0, [r0], -ip
 598:	0800169c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip}
 59c:	000000c8 	andeq	r0, r0, r8, asr #1
 5a0:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
 5a4:	00000038 	andeq	r0, r0, r8, lsr r0
 5a8:	0800179c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip}
 5ac:	0000005c 	andeq	r0, r0, ip, asr r0
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	00000002 	andeq	r0, r0, r2
	...
 5c0:	00000024 	andeq	r0, r0, r4, lsr #32
 5c4:	441b0002 	ldrmi	r0, [fp], #-2
 5c8:	00040000 	andeq	r0, r4, r0
 5cc:	00000000 	andeq	r0, r0, r0
 5d0:	080017f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, ip}
 5d4:	00000030 	andeq	r0, r0, r0, lsr r0
 5d8:	08001828 	stmdaeq	r0, {r3, r5, fp, ip}
 5dc:	00000024 	andeq	r0, r0, r4, lsr #32
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000005e 	andeq	r0, r0, lr, asr r0
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	mrseq	r0, (UNDEF: 4)
	...
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      14:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
      1c:	5f632f62 	svcpl	0x00632f62
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
      24:	6174735f 	cmnvs	r4, pc, asr r3
      28:	70757472 	rsbsvc	r7, r5, r2, ror r4
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	2f00732e 	svccs	0x0000732e
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	6964656d 	stmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
      34:	66732f61 	ldrbtvs	r2, [r3], -r1, ror #30
      38:	7469475f 	strbtvc	r4, [r9], #-1887	; 0x75f

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	2f627548 	svccs	0x00627548

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	7274614d 	rsbsvc	r6, r4, #1073741843	; 0x40000013
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	622f7869 	eorvs	r7, pc, #6881280	; 0x690000
      48:	6c746f6f 	ldclvs	15, cr6, [r4], #-444	; 0xfffffe44
      4c:	6564616f 	strbvs	r6, [r4, #-367]!	; 0x16f

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	4e470072 	mcrmi	0, 2, r0, cr7, cr2, {3}
      54:	53412055 	movtpl	r2, #4181	; 0x1055
      58:	322e3220 	eorcc	r3, lr, #32, 4
      5c:	00322e33 	eorseq	r2, r2, r3, lsr lr
      60:	00648001 	rsbeq	r8, r4, r1
      64:	00020000 	andeq	r0, r2, r0
      68:	00000012 	andeq	r0, r0, r2, lsl r0
      6c:	00750104 	rsbseq	r0, r5, r4, lsl #2
	...
      78:	2f2e0000 	svccs	0x002e0000
      7c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
      80:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
      84:	6f632f62 	svcvs	0x00632f62
      88:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
      8c:	6d5f336d 	ldclvs	3, cr3, [pc, #-436]	; fffffee0 <BootRAM+0xef70681>
      90:	6f726361 	svcvs	0x00726361
      94:	2f00532e 	svccs	0x0000532e
      98:	6964656d 	stmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
      9c:	66732f61 	ldrbtvs	r2, [r3], -r1, ror #30
      a0:	7469475f 	strbtvc	r4, [r9], #-1887	; 0x75f
      a4:	2f627548 	svccs	0x00627548
      a8:	7274614d 	rsbsvc	r6, r4, #1073741843	; 0x40000013
      ac:	622f7869 	eorvs	r7, pc, #6881280	; 0x690000
      b0:	6c746f6f 	ldclvs	15, cr6, [r4], #-444	; 0xfffffe44
      b4:	6564616f 	strbvs	r6, [r4, #-367]!	; 0x16f
      b8:	4e470072 	mcrmi	0, 2, r0, cr7, cr2, {3}
      bc:	53412055 	movtpl	r2, #4181	; 0x1055
      c0:	322e3220 	eorcc	r3, lr, #32, 4
      c4:	00322e33 	eorseq	r2, r2, r3, lsr lr
      c8:	0d0e8001 	stceq	0, cr8, [lr, #-4]
      cc:	00040000 	andeq	r0, r4, r0
      d0:	00000026 	andeq	r0, r0, r6, lsr #32
      d4:	01580104 	cmpeq	r8, r4, lsl #2
      d8:	17010000 	strne	r0, [r1, -r0]
      dc:	7b000001 	blvc	e8 <_Minimum_Stack_Size-0x18>
      e0:	20000003 	andcs	r0, r0, r3
      e4:	00000000 	andeq	r0, r0, r0
      e8:	1b000000 	blne	f0 <_Minimum_Stack_Size-0x10>
      ec:	02000001 	andeq	r0, r0, #1
      f0:	01f60504 	mvnseq	r0, r4, lsl #10
      f4:	02020000 	andeq	r0, r2, #0
      f8:	0006a905 	andeq	sl, r6, r5, lsl #18
      fc:	06010200 	streq	r0, [r1], -r0, lsl #4
     100:	00000655 	andeq	r0, r0, r5, asr r6
     104:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
     108:	45270200 	strmi	r0, [r7, #-512]!	; 0x200
     10c:	02000000 	andeq	r0, r0, #0
     110:	07930704 	ldreq	r0, [r3, r4, lsl #14]
     114:	75030000 	strvc	r0, [r3, #-0]
     118:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
     11c:	00005728 	andeq	r5, r0, r8, lsr #14
     120:	07020200 	streq	r0, [r2, -r0, lsl #4]
     124:	000003e8 	andeq	r0, r0, r8, ror #7
     128:	00387503 	eorseq	r7, r8, r3, lsl #10
     12c:	00682902 	rsbeq	r2, r8, r2, lsl #18
     130:	01020000 	mrseq	r0, (UNDEF: 2)
     134:	00065308 	andeq	r5, r6, r8, lsl #6
     138:	04570400 	ldrbeq	r0, [r7], #-1024	; 0x400
     13c:	2f020000 	svccs	0x00020000
     140:	0000007a 	andeq	r0, r0, sl, ror r0
     144:	00004505 	andeq	r4, r0, r5, lsl #10
     148:	01530400 	cmpeq	r3, r0, lsl #8
     14c:	30020000 	andcc	r0, r2, r0
     150:	0000008a 	andeq	r0, r0, sl, lsl #1
     154:	00005705 	andeq	r5, r0, r5, lsl #14
     158:	75760300 	ldrbvc	r0, [r6, #-768]!	; 0x300
     15c:	31020038 	tstcc	r2, r8, lsr r0
     160:	0000009a 	muleq	r0, sl, r0
     164:	00006805 	andeq	r6, r0, r5, lsl #16
     168:	02010600 	andeq	r0, r1, #0, 12
     16c:	0000b437 	andeq	fp, r0, r7, lsr r4
     170:	05e00700 	strbeq	r0, [r0, #1792]!	; 0x700
     174:	07000000 	streq	r0, [r0, -r0]
     178:	0000074e 	andeq	r0, r0, lr, asr #14
     17c:	44040001 	strmi	r0, [r4], #-1
     180:	02000004 	andeq	r0, r0, #4
     184:	00009f37 	andeq	r9, r0, r7, lsr pc
     188:	07040200 	streq	r0, [r4, -r0, lsl #4]
     18c:	00000526 	andeq	r0, r0, r6, lsr #10
     190:	a9030408 	stmdbge	r3, {r3, sl}
     194:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     198:	00045c09 	andeq	r5, r4, r9, lsl #24
     19c:	5eaa0300 	cdppl	3, 10, cr0, cr10, cr0, {0}
     1a0:	00000000 	andeq	r0, r0, r0
     1a4:	00047f09 	andeq	r7, r4, r9, lsl #30
     1a8:	5eab0300 	cdppl	3, 10, cr0, cr11, cr0, {0}
     1ac:	01000000 	mrseq	r0, (UNDEF: 0)
     1b0:	00035009 	andeq	r5, r3, r9
     1b4:	5eac0300 	cdppl	3, 10, cr0, cr12, cr0, {0}
     1b8:	02000000 	andeq	r0, r0, #0
     1bc:	00000009 	andeq	r0, r0, r9
     1c0:	b4ad0300 	strtlt	r0, [sp], #768	; 0x300
     1c4:	03000000 	movweq	r0, #0
     1c8:	04a10400 	strteq	r0, [r1], #1024	; 0x400
     1cc:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
     1d0:	000000c6 	andeq	r0, r0, r6, asr #1
     1d4:	0110040a 	tsteq	r0, sl, lsl #8
     1d8:	0c0b0000 	stceq	0, cr0, [fp], {-0}
     1dc:	0000036b 	andeq	r0, r0, fp, ror #6
     1e0:	36160501 	ldrcc	r0, [r6], -r1, lsl #10
     1e4:	07000001 	streq	r0, [r0, -r1]
     1e8:	000000fe 	strdeq	r0, [r0], -lr
     1ec:	02aa0700 	adceq	r0, sl, #0, 14
     1f0:	07010000 	streq	r0, [r1, -r0]
     1f4:	00000815 	andeq	r0, r0, r5, lsl r8
     1f8:	04340702 	ldrteq	r0, [r4], #-1794	; 0x702
     1fc:	00030000 	andeq	r0, r3, r0
     200:	00008c0d 	andeq	r8, r0, sp, lsl #24
     204:	24040800 	strcs	r0, [r4], #-2048	; 0x800
     208:	0000015b 	andeq	r0, r0, fp, asr r1
     20c:	00013d09 	andeq	r3, r1, r9, lsl #26
     210:	5b260400 	blpl	981218 <__Stack_Size+0x980e18>
     214:	00000001 	andeq	r0, r0, r1
     218:	0005a409 	andeq	sl, r5, r9, lsl #8
     21c:	4c270400 	cfstrsmi	mvf0, [r7], #-0
     220:	04000000 	streq	r0, [r0], #-0
     224:	5e040a00 	vmlapl.f32	s0, s8, s0
     228:	04000000 	streq	r0, [r0], #-0
     22c:	000002d6 	ldrdeq	r0, [r0], -r6
     230:	01362904 	teqeq	r6, r4, lsl #18
     234:	d5040000 	strle	r0, [r4, #-0]
     238:	04000002 	streq	r0, [r0], #-2
     23c:	00017729 	andeq	r7, r1, r9, lsr #14
     240:	36040a00 	strcc	r0, [r4], -r0, lsl #20
     244:	0c000001 	stceq	0, cr0, [r0], {1}
     248:	00000746 	andeq	r0, r0, r6, asr #14
     24c:	a22d0401 	eorge	r0, sp, #16777216	; 0x1000000
     250:	07000001 	streq	r0, [r0, -r1]
     254:	000008e9 	andeq	r0, r0, r9, ror #17
     258:	03fb0700 	mvnseq	r0, #0, 14
     25c:	07010000 	streq	r0, [r1, -r0]
     260:	00000785 	andeq	r0, r0, r5, lsl #15
     264:	02220702 	eoreq	r0, r2, #524288	; 0x80000
     268:	00030000 	andeq	r0, r3, r0
     26c:	00074704 	andeq	r4, r7, r4, lsl #14
     270:	7d340400 	cfldrsvc	mvf0, [r4, #-0]
     274:	0d000001 	stceq	0, cr0, [r0, #-4]
     278:	0000090e 	andeq	r0, r0, lr, lsl #18
     27c:	ea38040c 	b	e012b4 <__Stack_Size+0xe00eb4>
     280:	09000001 	stmdbeq	r0, {r0}
     284:	00000290 	muleq	r0, r0, r2
     288:	004c5004 	subeq	r5, ip, r4
     28c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     290:	00000319 	andeq	r0, r0, r9, lsl r3
     294:	004c5104 	subeq	r5, ip, r4, lsl #2
     298:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     29c:	000015a4 	andeq	r1, r0, r4, lsr #11
     2a0:	004c5204 	subeq	r5, ip, r4, lsl #4
     2a4:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     2a8:	000000e3 	andeq	r0, r0, r3, ror #1
     2ac:	01f95304 	mvnseq	r5, r4, lsl #6
     2b0:	00080000 	andeq	r0, r8, r0
     2b4:	00015b0e 	andeq	r5, r1, lr, lsl #22
     2b8:	0001f900 	andeq	pc, r1, r0, lsl #18
     2bc:	004c0f00 	subeq	r0, ip, r0, lsl #30
     2c0:	0a000000 	beq	2c8 <_Minimum_Stack_Size+0x1c8>
     2c4:	0001ea04 	andeq	lr, r1, r4, lsl #20
     2c8:	090f0400 	stmdbeq	pc, {sl}	; <UNPREDICTABLE>
     2cc:	54040000 	strpl	r0, [r4], #-0
     2d0:	000001ad 	andeq	r0, r0, sp, lsr #3
     2d4:	0007f00d 	andeq	pc, r7, sp
     2d8:	58040200 	stmdapl	r4, {r9}
     2dc:	0000022f 	andeq	r0, r0, pc, lsr #4
     2e0:	00092d09 	andeq	r2, r9, r9, lsl #26
     2e4:	5e5a0400 	cdppl	4, 5, cr0, cr10, cr0, {0}
     2e8:	00000000 	andeq	r0, r0, r0
     2ec:	0003c109 	andeq	ip, r3, r9, lsl #2
     2f0:	5e5b0400 	cdppl	4, 5, cr0, cr11, cr0, {0}
     2f4:	01000000 	mrseq	r0, (UNDEF: 0)
     2f8:	07f10400 	ldrbeq	r0, [r1, r0, lsl #8]!
     2fc:	5d040000 	stcpl	0, cr0, [r4, #-0]
     300:	0000020a 	andeq	r0, r0, sl, lsl #4
     304:	00574210 	subseq	r4, r7, r0, lsl r2
     308:	5e620402 	cdppl	4, 6, cr0, cr2, cr2, {0}
     30c:	11000002 	tstne	r0, r2
     310:	00306262 	eorseq	r6, r0, r2, ror #4
     314:	005e6504 	subseq	r6, lr, r4, lsl #10
     318:	11000000 	mrsne	r0, (UNDEF: 0)
     31c:	00316262 	eorseq	r6, r1, r2, ror #4
     320:	005e6604 	subseq	r6, lr, r4, lsl #12
     324:	00010000 	andeq	r0, r1, r0
     328:	5f040212 	svcpl	0x00040212
     32c:	0000027a 	andeq	r0, r0, sl, ror r2
     330:	04007713 	streq	r7, [r0], #-1811	; 0x713
     334:	00004c61 	andeq	r4, r0, r1, ror #24
     338:	77621300 	strbvc	r1, [r2, -r0, lsl #6]!
     33c:	3a680400 	bcc	1a01344 <__Stack_Size+0x1a00f44>
     340:	00000002 	andeq	r0, r0, r2
     344:	00041004 	andeq	r1, r4, r4
     348:	5e690400 	cdppl	4, 6, cr0, cr9, cr0, {0}
     34c:	0d000002 	stceq	0, cr0, [r0, #-8]
     350:	0000003c 	andeq	r0, r0, ip, lsr r0
     354:	166b041c 			; <UNDEFINED> instruction: 0x166b041c
     358:	09000003 	stmdbeq	r0, {r0, r1}
     35c:	00000561 	andeq	r0, r0, r1, ror #10
     360:	005e6d04 	subseq	r6, lr, r4, lsl #26
     364:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     368:	00000216 	andeq	r0, r0, r6, lsl r2
     36c:	005e6e04 	subseq	r6, lr, r4, lsl #28
     370:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     374:	00000429 	andeq	r0, r0, r9, lsr #8
     378:	027a6f04 	rsbseq	r6, sl, #4, 30
     37c:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     380:	00000148 	andeq	r0, r0, r8, asr #2
     384:	027a7004 	rsbseq	r7, sl, #4
     388:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     38c:	00000830 	andeq	r0, r0, r0, lsr r8
     390:	027a7104 	rsbseq	r7, sl, #4, 2
     394:	09060000 	stmdbeq	r6, {}	; <UNPREDICTABLE>
     398:	0000093c 	andeq	r0, r0, ip, lsr r9
     39c:	005e7304 	subseq	r7, lr, r4, lsl #6
     3a0:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
     3a4:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
     3a8:	005e7404 	subseq	r7, lr, r4, lsl #8
     3ac:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
     3b0:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
     3b4:	005e7504 	subseq	r7, lr, r4, lsl #10
     3b8:	090a0000 	stmdbeq	sl, {}	; <UNPREDICTABLE>
     3bc:	00000885 	andeq	r0, r0, r5, lsl #17
     3c0:	005e7604 	subseq	r7, lr, r4, lsl #12
     3c4:	090b0000 	stmdbeq	fp, {}	; <UNPREDICTABLE>
     3c8:	0000062d 	andeq	r0, r0, sp, lsr #12
     3cc:	005e7704 	subseq	r7, lr, r4, lsl #14
     3d0:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
     3d4:	00000724 	andeq	r0, r0, r4, lsr #14
     3d8:	01ff7a04 	mvnseq	r7, r4, lsl #20
     3dc:	00100000 	andseq	r0, r0, r0
     3e0:	00003d04 	andeq	r3, r0, r4, lsl #26
     3e4:	857b0400 	ldrbhi	r0, [fp, #-1024]!	; 0x400
     3e8:	0d000002 	stceq	0, cr0, [r0, #-8]
     3ec:	00000753 	andeq	r0, r0, r3, asr r7
     3f0:	ca7d0434 	bgt	1f414c8 <__Stack_Size+0x1f410c8>
     3f4:	09000003 	stmdbeq	r0, {r0, r1}
     3f8:	0000054e 	andeq	r0, r0, lr, asr #10
     3fc:	010a7f04 	tsteq	sl, r4, lsl #30
     400:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     404:	000003d8 	ldrdeq	r0, [r0], -r8
     408:	010a8004 	tsteq	sl, r4
     40c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     410:	000007bd 			; <UNDEFINED> instruction: 0x000007bd
     414:	010a8304 	tsteq	sl, r4, lsl #6
     418:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
     41c:	000007cf 	andeq	r0, r0, pc, asr #15
     420:	010a8404 	tsteq	sl, r4, lsl #8
     424:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
     428:	0000052f 	andeq	r0, r0, pc, lsr #10
     42c:	03d99604 	bicseq	r9, r9, #4, 12	; 0x400000
     430:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
     434:	00000708 	andeq	r0, r0, r8, lsl #14
     438:	03d9a104 	bicseq	sl, r9, #4, 2
     43c:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
     440:	000004f9 	strdeq	r0, [r0], -r9
     444:	03f3ab04 	mvnseq	sl, #4, 22	; 0x1000
     448:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
     44c:	00000134 	andeq	r0, r0, r4, lsr r1
     450:	01f9ad04 	mvnseq	sl, r4, lsl #26
     454:	091c0000 	ldmdbeq	ip, {}	; <UNPREDICTABLE>
     458:	00000202 	andeq	r0, r0, r2, lsl #4
     45c:	01f9ae04 	mvnseq	sl, r4, lsl #28
     460:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
     464:	0000083f 	andeq	r0, r0, pc, lsr r8
     468:	01f9af04 	mvnseq	sl, r4, lsl #30
     46c:	09240000 	stmdbeq	r4!, {}	; <UNPREDICTABLE>
     470:	00000615 	andeq	r0, r0, r5, lsl r6
     474:	01f9b004 	mvnseq	fp, r4
     478:	09280000 	stmdbeq	r8!, {}	; <UNPREDICTABLE>
     47c:	0000058c 	andeq	r0, r0, ip, lsl #11
     480:	015bb204 	cmpeq	fp, r4, lsl #4
     484:	092c0000 	stmdbeq	ip!, {}	; <UNPREDICTABLE>
     488:	000015a1 	andeq	r1, r0, r1, lsr #11
     48c:	005eb304 	subseq	fp, lr, r4, lsl #6
     490:	00300000 	eorseq	r0, r0, r0
     494:	0001a20e 	andeq	sl, r1, lr, lsl #4
     498:	0003d900 	andeq	sp, r3, r0, lsl #18
     49c:	005e0f00 	subseq	r0, lr, r0, lsl #30
     4a0:	0a000000 	beq	4a8 <__Stack_Size+0xa8>
     4a4:	0003ca04 	andeq	ip, r3, r4, lsl #20
     4a8:	01a20e00 			; <UNDEFINED> instruction: 0x01a20e00
     4ac:	03f30000 	mvnseq	r0, #0
     4b0:	5e0f0000 	cdppl	0, 0, cr0, cr15, cr0, {0}
     4b4:	0f000000 	svceq	0x00000000
     4b8:	0000005e 	andeq	r0, r0, lr, asr r0
     4bc:	df040a00 	svcle	0x00040a00
     4c0:	04000003 	streq	r0, [r0], #-3
     4c4:	00000754 	andeq	r0, r0, r4, asr r7
     4c8:	0321b504 	teqeq	r1, #4, 10	; 0x1000000
     4cc:	610d0000 	mrsvs	r0, (UNDEF: 13)
     4d0:	24000006 	strcs	r0, [r0], #-6
     4d4:	047db704 	ldrbteq	fp, [sp], #-1796	; 0x704
     4d8:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
     4dc:	04000006 	streq	r0, [r0], #-6
     4e0:	00010ab9 			; <UNDEFINED> instruction: 0x00010ab9
     4e4:	ca090000 	bgt	2404ec <__Stack_Size+0x2400ec>
     4e8:	04000005 	streq	r0, [r0], #-5
     4ec:	00010aba 			; <UNDEFINED> instruction: 0x00010aba
     4f0:	e6090400 	str	r0, [r9], -r0, lsl #8
     4f4:	04000005 	streq	r0, [r0], #-5
     4f8:	00010abb 			; <UNDEFINED> instruction: 0x00010abb
     4fc:	ec090800 	stc	8, cr0, [r9], {-0}
     500:	04000000 	streq	r0, [r0], #-0
     504:	00010abc 			; <UNDEFINED> instruction: 0x00010abc
     508:	9a090c00 	bls	243510 <__Stack_Size+0x243110>
     50c:	04000006 	streq	r0, [r0], #-6
     510:	00010abd 			; <UNDEFINED> instruction: 0x00010abd
     514:	17091000 	strne	r1, [r9, -r0]
     518:	04000004 	streq	r0, [r0], #-4
     51c:	00010abe 			; <UNDEFINED> instruction: 0x00010abe
     520:	6c091400 	cfstrsvs	mvf1, [r9], {-0}
     524:	04000000 	streq	r0, [r0], #-0
     528:	00010abf 			; <UNDEFINED> instruction: 0x00010abf
     52c:	b4091800 	strlt	r1, [r9], #-2048	; 0x800
     530:	04000005 	streq	r0, [r0], #-5
     534:	00010ac0 	andeq	r0, r1, r0, asr #21
     538:	1c091c00 	stcne	12, cr1, [r9], {-0}
     53c:	04000000 	streq	r0, [r0], #-0
     540:	00010ac1 	andeq	r0, r1, r1, asr #21
     544:	04002000 	streq	r2, [r0], #-0
     548:	00000662 	andeq	r0, r0, r2, ror #12
     54c:	0404c304 	streq	ip, [r4], #-772	; 0x304
     550:	db0c0000 	blle	300558 <__Stack_Size+0x300158>
     554:	01000008 	tsteq	r0, r8
     558:	04c53d06 	strbeq	r3, [r5], #3334	; 0xd06
     55c:	36070000 	strcc	r0, [r7], -r0
     560:	00000002 	andeq	r0, r0, r2
     564:	0008cb07 	andeq	ip, r8, r7, lsl #22
     568:	e4070100 	str	r0, [r7], #-256	; 0x100
     56c:	02000006 	andeq	r0, r0, #6
     570:	00006007 	andeq	r6, r0, r7
     574:	c2070300 	andgt	r0, r7, #0, 6
     578:	04000000 	streq	r0, [r0], #-0
     57c:	00060807 	andeq	r0, r6, r7, lsl #16
     580:	05070500 	streq	r0, [r7, #-1280]	; 0x500
     584:	06000004 	streq	r0, [r0], -r4
     588:	00059807 	andeq	r9, r5, r7, lsl #16
     58c:	04000700 	streq	r0, [r0], #-1792	; 0x700
     590:	000008dc 	ldrdeq	r0, [r0], -ip
     594:	04884606 	streq	r4, [r8], #1542	; 0x606
     598:	530c0000 	movwpl	r0, #49152	; 0xc000
     59c:	01000005 	tsteq	r0, r5
     5a0:	05014806 	streq	r4, [r1, #-2054]	; 0x806
     5a4:	f5070000 			; <UNDEFINED> instruction: 0xf5070000
     5a8:	00000008 	andeq	r0, r0, r8
     5ac:	00033807 	andeq	r3, r3, r7, lsl #16
     5b0:	0f070100 	svceq	0x00070100
     5b4:	02000001 	andeq	r0, r0, #1
     5b8:	0000b807 	andeq	fp, r0, r7, lsl #16
     5bc:	c1070300 	mrsgt	r0, SP_und
     5c0:	04000008 	streq	r0, [r0], #-8
     5c4:	00086e07 	andeq	r6, r8, r7, lsl #28
     5c8:	08000500 	stmdaeq	r0, {r8, sl}
     5cc:	229c0102 	addscs	r0, ip, #-2147483648	; 0x80000000
     5d0:	09000005 	stmdbeq	r0, {r0, r2}
     5d4:	0000004f 	andeq	r0, r0, pc, asr #32
     5d8:	05229d01 	streq	r9, [r2, #-3329]!	; 0xd01
     5dc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     5e0:	000000a5 	andeq	r0, r0, r5, lsr #1
     5e4:	05279e01 	streq	r9, [r7, #-3585]!	; 0xe01
     5e8:	00010000 	andeq	r0, r1, r0
     5ec:	0004c505 	andeq	ip, r4, r5, lsl #10
     5f0:	005e0500 	subseq	r0, lr, r0, lsl #10
     5f4:	41140000 	tstmi	r4, r0
     5f8:	01000003 	tsteq	r0, r3
     5fc:	01a20164 			; <UNDEFINED> instruction: 0x01a20164
     600:	4a010000 	bmi	40608 <__Stack_Size+0x40208>
     604:	15000005 	strne	r0, [r0, #-5]
     608:	0000080d 	andeq	r0, r0, sp, lsl #16
     60c:	5e016401 	cdppl	4, 0, cr6, cr1, cr1, {0}
     610:	00000000 	andeq	r0, r0, r0
     614:	0004c816 	andeq	ip, r4, r6, lsl r8
     618:	01a60100 			; <UNDEFINED> instruction: 0x01a60100
     61c:	00096217 	andeq	r6, r9, r7, lsl r2
     620:	3ca20100 	stfccs	f0, [r2]
     624:	02080001 	andeq	r0, r8, #1
     628:	01000000 	mrseq	r0, (UNDEF: 0)
     62c:	03a5189c 			; <UNDEFINED> instruction: 0x03a5189c
     630:	37010000 	strcc	r0, [r1, -r0]
     634:	00013e01 	andeq	r3, r1, r1, lsl #28
     638:	00000208 	andeq	r0, r0, r8, lsl #4
     63c:	189c0100 	ldmne	ip, {r8}
     640:	0000030c 	andeq	r0, r0, ip, lsl #6
     644:	40013a01 	andmi	r3, r1, r1, lsl #20
     648:	02080001 	andeq	r0, r8, #1
     64c:	01000000 	mrseq	r0, (UNDEF: 0)
     650:	06f1199c 	usateq	r1, #17, ip, lsl #19
     654:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     658:	0001a201 	andeq	sl, r1, r1, lsl #4
     65c:	00014200 	andeq	r4, r1, r0, lsl #4
     660:	00000a08 	andeq	r0, r0, r8, lsl #20
     664:	c09c0100 	addsgt	r0, ip, r0, lsl #2
     668:	1a000005 	bne	684 <__Stack_Size+0x284>
     66c:	00000475 	andeq	r0, r0, r5, ror r4
     670:	5e016e01 	cdppl	14, 0, cr6, cr1, cr1, {0}
     674:	00000000 	andeq	r0, r0, r0
     678:	1b000000 	blne	680 <__Stack_Size+0x280>
     67c:	000007a5 	andeq	r0, r0, r5, lsr #15
     680:	5e016e01 	cdppl	14, 0, cr6, cr1, cr1, {0}
     684:	01000000 	mrseq	r0, (UNDEF: 0)
     688:	5c180051 	ldcpl	0, cr0, [r8], {81}	; 0x51
     68c:	01000002 	tsteq	r0, r2
     690:	014c0195 			; <UNDEFINED> instruction: 0x014c0195
     694:	00020800 	andeq	r0, r2, r0, lsl #16
     698:	9c010000 	stcls	0, cr0, [r1], {-0}
     69c:	00076018 	andeq	r6, r7, r8, lsl r0
     6a0:	01990100 	orrseq	r0, r9, r0, lsl #2
     6a4:	08000150 	stmdaeq	r0, {r4, r6, r8}
     6a8:	00000018 	andeq	r0, r0, r8, lsl r0
     6ac:	97189c01 	ldrls	r9, [r8, -r1, lsl #24]
     6b0:	01000008 	tsteq	r0, r8
     6b4:	0168019f 			; <UNDEFINED> instruction: 0x0168019f
     6b8:	00020800 	andeq	r0, r2, r0, lsl #16
     6bc:	9c010000 	stcls	0, cr0, [r1], {-0}
     6c0:	00073618 	andeq	r3, r7, r8, lsl r6
     6c4:	01a30100 			; <UNDEFINED> instruction: 0x01a30100
     6c8:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
     6cc:	00000002 	andeq	r0, r0, r2
     6d0:	01189c01 	tsteq	r8, r1, lsl #24
     6d4:	01000009 	tsteq	r0, r9
     6d8:	016c01a7 	smultbeq	ip, r7, r1
     6dc:	00020800 	andeq	r0, r2, r0, lsl #16
     6e0:	9c010000 	stcls	0, cr0, [r1], {-0}
     6e4:	00091d18 	andeq	r1, r9, r8, lsl sp
     6e8:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
     6ec:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
     6f0:	00000002 	andeq	r0, r0, r2
     6f4:	e3189c01 	tst	r8, #256	; 0x100
     6f8:	01000004 	tsteq	r0, r4
     6fc:	017001af 	cmneq	r0, pc, lsr #3
     700:	00020800 	andeq	r0, r2, r0, lsl #16
     704:	9c010000 	stcls	0, cr0, [r1], {-0}
     708:	0000cf18 	andeq	ip, r0, r8, lsl pc
     70c:	01b30100 			; <UNDEFINED> instruction: 0x01b30100
     710:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
     714:	00000002 	andeq	r0, r0, r2
     718:	e5189c01 	ldr	r9, [r8, #-3073]	; 0xc01
     71c:	01000002 	tsteq	r0, r2
     720:	017401b7 	ldrheq	r0, [r4, #-23]!	; 0xffffffe9
     724:	000c0800 	andeq	r0, ip, r0, lsl #16
     728:	9c010000 	stcls	0, cr0, [r1], {-0}
     72c:	0003d51c 	andeq	sp, r3, ip, lsl r5
     730:	011e0100 	tsteq	lr, r0, lsl #2
     734:	08000180 	stmdaeq	r0, {r7, r8}
     738:	000000a8 	andeq	r0, r0, r8, lsr #1
     73c:	06eb9c01 	strbteq	r9, [fp], r1, lsl #24
     740:	b01d0000 	andslt	r0, sp, r0
     744:	12080001 	andne	r0, r8, #1
     748:	96000000 	strls	r0, [r0], -r0
     74c:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
     750:	0000046c 	andeq	r0, r0, ip, ror #8
     754:	4c012801 	stcmi	8, cr2, [r1], {1}
     758:	21000000 	mrscs	r0, (UNDEF: 0)
     75c:	00000000 	andeq	r0, r0, r0
     760:	0001861f 	andeq	r8, r1, pc, lsl r6
     764:	000c3008 	andeq	r3, ip, r8
     768:	01e62000 	mvneq	r2, r0
     76c:	0c370800 	ldceq	8, cr0, [r7], #-0
     770:	06b30000 	ldrteq	r0, [r3], r0
     774:	01210000 	teqeq	r1, r0
     778:	00740250 	rsbseq	r0, r4, r0, asr r2
     77c:	01f42000 	mvnseq	r2, r0
     780:	0c490800 	mcrreq	8, 0, r0, r9, cr0
     784:	06c70000 	strbeq	r0, [r7], r0
     788:	01210000 	teqeq	r1, r0
     78c:	00740250 	rsbseq	r0, r4, r0, asr r2
     790:	01fa2000 	mvnseq	r2, r0
     794:	0c600800 	stcleq	8, cr0, [r0], #-0
     798:	06db0000 	ldrbeq	r0, [fp], r0
     79c:	01210000 	teqeq	r1, r0
     7a0:	00740250 	rsbseq	r0, r4, r0, asr r2
     7a4:	020a2200 	andeq	r2, sl, #0, 4
     7a8:	0c720800 	ldcleq	8, cr0, [r2], #-0
     7ac:	01210000 	teqeq	r1, r0
     7b0:	00300150 	eorseq	r0, r0, r0, asr r1
     7b4:	06461900 	strbeq	r1, [r6], -r0, lsl #18
     7b8:	3d010000 	stccc	0, cr0, [r1, #-0]
     7bc:	0001a201 	andeq	sl, r1, r1, lsl #4
     7c0:	00022800 	andeq	r2, r2, r0, lsl #16
     7c4:	00006008 	andeq	r6, r0, r8
     7c8:	3b9c0100 	blcc	fe700bd0 <BootRAM+0xd671371>
     7cc:	1a000007 	bne	7f0 <__Stack_Size+0x3f0>
     7d0:	0000080d 	andeq	r0, r0, sp, lsl #16
     7d4:	5e013d01 	cdppl	13, 0, cr3, cr1, cr1, {0}
     7d8:	70000000 	andvc	r0, r0, r0
     7dc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     7e0:	00000949 	andeq	r0, r0, r9, asr #18
     7e4:	f9013e01 			; <UNDEFINED> instruction: 0xf9013e01
     7e8:	91000001 	tstls	r0, r1
     7ec:	1f000000 	svcne	0x00000000
     7f0:	08000240 	stmdaeq	r0, {r6, r9}
     7f4:	00000c83 	andeq	r0, r0, r3, lsl #25
     7f8:	00026c23 	andeq	r6, r2, r3, lsr #24
     7fc:	50012108 	andpl	r2, r1, r8, lsl #2
     800:	00007402 	andeq	r7, r0, r2, lsl #8
     804:	01311900 	teqeq	r1, r0, lsl #18
     808:	77010000 	strvc	r0, [r1, -r0]
     80c:	00015b01 	andeq	r5, r1, r1, lsl #22
     810:	00028800 	andeq	r8, r2, r0, lsl #16
     814:	00000c08 	andeq	r0, r0, r8, lsl #24
     818:	6f9c0100 	svcvs	0x009c0100
     81c:	24000007 	strcs	r0, [r0], #-7
     820:	006e656c 	rsbeq	r6, lr, ip, ror #10
     824:	4c017701 	stcmi	7, cr7, [r1], {1}
     828:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     82c:	25000000 	strcs	r0, [r0, #-0]
     830:	0800028e 	stmdaeq	r0, {r1, r2, r3, r7, r9}
     834:	00000c8e 	andeq	r0, r0, lr, lsl #25
     838:	01ff1900 	mvnseq	r1, r0, lsl #18
     83c:	7b010000 	blvc	40844 <__Stack_Size+0x40444>
     840:	00015b01 	andeq	r5, r1, r1, lsl #22
     844:	00029400 	andeq	r9, r2, r0, lsl #8
     848:	00000c08 	andeq	r0, r0, r8, lsl #24
     84c:	a39c0100 	orrsge	r0, ip, #0, 2
     850:	24000007 	strcs	r0, [r0], #-7
     854:	006e656c 	rsbeq	r6, lr, ip, ror #10
     858:	4c017b01 	stcmi	11, cr7, [r1], {1}
     85c:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
     860:	25000000 	strcs	r0, [r0, #-0]
     864:	0800029a 	stmdaeq	r0, {r1, r3, r4, r7, r9}
     868:	00000c8e 	andeq	r0, r0, lr, lsl #25
     86c:	083c1900 	ldmdaeq	ip!, {r8, fp, ip}
     870:	7f010000 	svcvc	0x00010000
     874:	00015b01 	andeq	r5, r1, r1, lsl #22
     878:	0002a000 	andeq	sl, r2, r0
     87c:	00002008 	andeq	r2, r0, r8
     880:	e39c0100 	orrs	r0, ip, #0, 2
     884:	24000007 	strcs	r0, [r0], #-7
     888:	006e656c 	rsbeq	r6, lr, ip, ror #10
     88c:	4c017f01 	stcmi	15, cr7, [r1], {1}
     890:	0a000000 	beq	898 <__Stack_Size+0x498>
     894:	26000001 	strcs	r0, [r0], -r1
     898:	00000013 	andeq	r0, r0, r3, lsl r0
     89c:	5e018001 	cdppl	0, 0, cr8, cr1, cr1, {0}
     8a0:	25000000 	strcs	r0, [r0, #-0]
     8a4:	080002b4 	stmdaeq	r0, {r2, r4, r5, r7, r9}
     8a8:	00000c8e 	andeq	r0, r0, lr, lsl #25
     8ac:	06121900 	ldreq	r1, [r2], -r0, lsl #18
     8b0:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
     8b4:	00015b01 	andeq	r5, r1, r1, lsl #22
     8b8:	0002c000 	andeq	ip, r2, r0
     8bc:	00000c08 	andeq	r0, r0, r8, lsl #24
     8c0:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
     8c4:	24000008 	strcs	r0, [r0], #-8
     8c8:	006e656c 	rsbeq	r6, lr, ip, ror #10
     8cc:	4c018801 	stcmi	8, cr8, [r1], {1}
     8d0:	44000000 	strmi	r0, [r0], #-0
     8d4:	25000001 	strcs	r0, [r0, #-1]
     8d8:	080002c6 	stmdaeq	r0, {r1, r2, r6, r7, r9}
     8dc:	00000c8e 	andeq	r0, r0, lr, lsl #25
     8e0:	052c2700 	streq	r2, [ip, #-1792]!	; 0x700
     8e4:	02cc0000 	sbceq	r0, ip, #0
     8e8:	00280800 	eoreq	r0, r8, r0, lsl #16
     8ec:	9c010000 	stcls	0, cr0, [r1], {-0}
     8f0:	00000850 	andeq	r0, r0, r0, asr r8
     8f4:	00053d28 	andeq	r3, r5, r8, lsr #26
     8f8:	00016500 	andeq	r6, r1, r0, lsl #10
     8fc:	02dc2900 	sbcseq	r2, ip, #0, 18
     900:	000e0800 	andeq	r0, lr, r0, lsl #16
     904:	3d280000 	stccc	0, cr0, [r8, #-0]
     908:	9f000005 	svcls	0x00000005
     90c:	1f000001 	svcne	0x00000001
     910:	080002e0 	stmdaeq	r0, {r5, r6, r7, r9}
     914:	00000c83 	andeq	r0, r0, r3, lsl #25
     918:	532a0000 	teqpl	sl, #0
     91c:	01000002 	tsteq	r0, r2
     920:	0002f428 	andeq	pc, r2, r8, lsr #8
     924:	00007c08 	andeq	r7, r0, r8, lsl #24
     928:	e19c0100 	orrs	r0, ip, r0, lsl #2
     92c:	2b000008 	blcs	954 <__Stack_Size+0x554>
     930:	00000694 	muleq	r0, r4, r6
     934:	08e13d01 	stmiaeq	r1!, {r0, r8, sl, fp, ip, sp}^
     938:	91020000 	mrsls	r0, (UNDEF: 2)
     93c:	054a2c6c 	strbeq	r2, [sl, #-3180]	; 0xc6c
     940:	03520000 	cmpeq	r2, #0
     944:	00040800 	andeq	r0, r4, r0, lsl #16
     948:	4f010000 	svcmi	0x00010000
     94c:	00000890 	muleq	r0, r0, r8
     950:	0003561f 	andeq	r5, r3, pc, lsl r6
     954:	000ca808 	andeq	sl, ip, r8, lsl #16
     958:	00200000 	eoreq	r0, r0, r0
     95c:	af080003 	svcge	0x00080003
     960:	a300000c 	movwge	r0, #12
     964:	21000008 	tstcs	r0, r8
     968:	3c015001 	stccc	0, cr5, [r1], {1}
     96c:	03122000 	tsteq	r2, #0
     970:	0cc40800 	stcleq	8, cr0, [r4], {0}
     974:	08c40000 	stmiaeq	r4, {}^	; <UNPREDICTABLE>
     978:	01210000 	teqeq	r1, r0
     97c:	21300152 	teqcs	r0, r2, asr r1
     980:	3c015101 	stfccs	f5, [r1], {1}
     984:	05500121 	ldrbeq	r0, [r0, #-289]	; 0x121
     988:	0108000c 	tsteq	r8, ip
     98c:	2c200040 	stccs	0, cr0, [r0], #-256	; 0xffffff00
     990:	af080003 	svcge	0x00080003
     994:	d700000c 	strle	r0, [r0, -ip]
     998:	21000008 	tstcs	r0, r8
     99c:	3c015001 	stccc	0, cr5, [r1], {1}
     9a0:	03381f00 	teqeq	r8, #0, 30
     9a4:	0cdf0800 	ldcleq	8, cr0, [pc], {0}
     9a8:	05000000 	streq	r0, [r0, #-0]
     9ac:	000008e6 	andeq	r0, r0, r6, ror #17
     9b0:	98070402 	stmdals	r7, {r1, sl}
     9b4:	27000007 	strcs	r0, [r0, -r7]
     9b8:	0000054a 	andeq	r0, r0, sl, asr #10
     9bc:	00000000 	andeq	r0, r0, r0
     9c0:	00000004 	andeq	r0, r0, r4
     9c4:	090a9c01 	stmdbeq	sl, {r0, sl, fp, ip, pc}
     9c8:	00250000 	eoreq	r0, r5, r0
     9cc:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
     9d0:	0000000c 	andeq	r0, r0, ip
     9d4:	00009a2a 	andeq	r9, r0, sl, lsr #20
     9d8:	70ac0100 	adcvc	r0, ip, r0, lsl #2
     9dc:	1c080003 	stcne	0, cr0, [r8], {3}
     9e0:	01000000 	mrseq	r0, (UNDEF: 0)
     9e4:	00092f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
     9e8:	02be2d00 	adcseq	r2, lr, #0, 26
     9ec:	ad010000 	stcge	0, cr0, [r1, #-0]
     9f0:	0000004c 	andeq	r0, r0, ip, asr #32
     9f4:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
     9f8:	07e22a00 	strbeq	r2, [r2, r0, lsl #20]!
     9fc:	b6010000 	strlt	r0, [r1], -r0
     a00:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
     a04:	00000018 	andeq	r0, r0, r8, lsl r0
     a08:	09579c01 	ldmdbeq	r7, {r0, sl, fp, ip, pc}^
     a0c:	be2b0000 	cdplt	0, 2, cr0, cr11, cr0, {0}
     a10:	01000002 	tsteq	r0, r2
     a14:	00004cb7 			; <UNDEFINED> instruction: 0x00004cb7
     a18:	00710600 	rsbseq	r0, r1, r0, lsl #12
     a1c:	9f1afb09 	svcls	0x001afb09
     a20:	00ae2a00 	adceq	r2, lr, r0, lsl #20
     a24:	c4010000 	strgt	r0, [r1], #-0
     a28:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
     a2c:	00000084 	andeq	r0, r0, r4, lsl #1
     a30:	099d9c01 	ldmibeq	sp, {r0, sl, fp, ip, pc}
     a34:	9c2e0000 	stcls	0, cr0, [lr], #-0
     a38:	01000002 	tsteq	r0, r2
     a3c:	0004c5c4 	andeq	ip, r4, r4, asr #11
     a40:	0001cc00 	andeq	ip, r1, r0, lsl #24
     a44:	02be2d00 	adcseq	r2, lr, #0, 26
     a48:	c5010000 	strgt	r0, [r1, #-0]
     a4c:	0000004c 	andeq	r0, r0, ip, asr #32
     a50:	0000021f 	andeq	r0, r0, pc, lsl r2
     a54:	0003c21f 	andeq	ip, r3, pc, lsl r2
     a58:	00092f08 	andeq	r2, r9, r8, lsl #30
     a5c:	03c81f00 	biceq	r1, r8, #0, 30
     a60:	092f0800 	stmdbeq	pc!, {fp}	; <UNPREDICTABLE>
     a64:	2f000000 	svccs	0x00000000
     a68:	00000572 	andeq	r0, r0, r2, ror r5
     a6c:	01a2f401 			; <UNDEFINED> instruction: 0x01a2f401
     a70:	04280000 	strteq	r0, [r8], #-0
     a74:	00280800 	eoreq	r0, r8, r0, lsl #16
     a78:	9c010000 	stcls	0, cr0, [r1], {-0}
     a7c:	000009c3 	andeq	r0, r0, r3, asr #19
     a80:	00046d30 	andeq	r6, r4, r0, lsr sp
     a84:	4cf50100 	ldfmie	f0, [r5]
     a88:	01000000 	mrseq	r0, (UNDEF: 0)
     a8c:	08793100 	ldmdaeq	r9!, {r8, ip, sp}^
     a90:	03010000 	movweq	r0, #4096	; 0x1000
     a94:	0001a201 	andeq	sl, r1, r1, lsl #4
     a98:	00045000 	andeq	r5, r4, r0
     a9c:	00001c08 	andeq	r1, r0, r8, lsl #24
     aa0:	2a9c0100 	bcs	fe700ea8 <BootRAM+0xd671649>
     aa4:	000007f8 	strdeq	r0, [r0], -r8
     aa8:	046c5601 	strbteq	r5, [ip], #-1537	; 0x601
     aac:	00040800 	andeq	r0, r4, r0, lsl #16
     ab0:	9c010000 	stcls	0, cr0, [r1], {-0}
     ab4:	000009f8 	strdeq	r0, [r0], -r8
     ab8:	00047025 	andeq	r7, r4, r5, lsr #32
     abc:	0009c308 	andeq	ip, r9, r8, lsl #6
     ac0:	561c0000 	ldrpl	r0, [ip], -r0
     ac4:	01000000 	mrseq	r0, (UNDEF: 0)
     ac8:	047001bd 	ldrbteq	r0, [r0], #-445	; 0x1bd
     acc:	00240800 	eoreq	r0, r4, r0, lsl #16
     ad0:	9c010000 	stcls	0, cr0, [r1], {-0}
     ad4:	00000a2e 	andeq	r0, r0, lr, lsr #20
     ad8:	0002f932 	andeq	pc, r2, r2, lsr r9	; <UNPREDICTABLE>
     adc:	01be0100 			; <UNDEFINED> instruction: 0x01be0100
     ae0:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     ae4:	33749102 	cmncc	r4, #-2147483648	; 0x80000000
     ae8:	0800048e 	stmdaeq	r0, {r1, r2, r3, r7, sl}
     aec:	00000ceb 	andeq	r0, r0, fp, ror #25
     af0:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     af4:	0000047d 	andeq	r0, r0, sp, ror r4
     af8:	0008281c 	andeq	r2, r8, ip, lsl r8
     afc:	01100100 	tsteq	r0, r0, lsl #2
     b00:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
     b04:	00000040 	andeq	r0, r0, r0, asr #32
     b08:	0a609c01 	beq	1827b14 <__Stack_Size+0x1827714>
     b0c:	9a1f0000 	bls	7c0b14 <__Stack_Size+0x7c0714>
     b10:	03080004 	movweq	r0, #32772	; 0x8004
     b14:	1f00000d 	svcne	0x0000000d
     b18:	080004a6 	stmdaeq	r0, {r1, r2, r5, r7, sl}
     b1c:	0000099d 	muleq	r0, sp, r9
     b20:	0004ba1f 	andeq	fp, r4, pc, lsl sl
     b24:	0009f808 	andeq	pc, r9, r8, lsl #16
     b28:	de1c0000 	cdple	0, 1, cr0, cr12, cr0, {0}
     b2c:	01000003 	tsteq	r0, r3
     b30:	04d401c8 	ldrbeq	r0, [r4], #456	; 0x1c8
     b34:	00220800 	eoreq	r0, r2, r0, lsl #16
     b38:	9c010000 	stcls	0, cr0, [r1], {-0}
     b3c:	00000a96 	muleq	r0, r6, sl
     b40:	0002f932 	andeq	pc, r2, r2, lsr r9	; <UNPREDICTABLE>
     b44:	01c90100 	biceq	r0, r9, r0, lsl #2
     b48:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     b4c:	33749102 	cmncc	r4, #-2147483648	; 0x80000000
     b50:	080004f0 	stmdaeq	r0, {r4, r5, r6, r7, sl}
     b54:	00000ceb 	andeq	r0, r0, fp, ror #25
     b58:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     b5c:	0000047d 	andeq	r0, r0, sp, ror r4
     b60:	00067934 	andeq	r7, r6, r4, lsr r9
     b64:	01d10100 	bicseq	r0, r1, r0, lsl #2
     b68:	080004f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl}
     b6c:	000000b4 	strheq	r0, [r0], -r4
     b70:	0ae59c01 	beq	ff967b7c <BootRAM+0xe8d831d>
     b74:	40200000 	eormi	r0, r0, r0
     b78:	57080005 	strpl	r0, [r8, -r5]
     b7c:	bf000009 	svclt	0x00000009
     b80:	2100000a 	tstcs	r0, sl
     b84:	30015001 	andcc	r5, r1, r1
     b88:	054e1f00 	strbeq	r1, [lr, #-3840]	; 0xf00
     b8c:	090a0800 	stmdbeq	sl, {fp}
     b90:	82200000 	eorhi	r0, r0, #0
     b94:	57080005 	strpl	r0, [r8, -r5]
     b98:	db000009 	blle	bc4 <__Stack_Size+0x7c4>
     b9c:	2100000a 	tstcs	r0, sl
     ba0:	37015001 	strcc	r5, [r1, -r1]
     ba4:	05942500 	ldreq	r2, [r4, #1280]	; 0x500
     ba8:	0d0a0800 	stceq	8, cr0, [sl, #-0]
     bac:	35000000 	strcc	r0, [r0, #-0]
     bb0:	00000230 	andeq	r0, r0, r0, lsr r2
     bb4:	007f6401 	rsbseq	r6, pc, r1, lsl #8
     bb8:	03050000 	movweq	r0, #20480	; 0x5000
     bbc:	200002d4 	ldrdcs	r0, [r0], -r4
     bc0:	0005f835 	andeq	pc, r5, r5, lsr r8	; <UNPREDICTABLE>
     bc4:	f96c0100 			; <UNDEFINED> instruction: 0xf96c0100
     bc8:	05000003 	streq	r0, [r0, #-3]
     bcc:	00000003 	andeq	r0, r0, r3
     bd0:	13ec3520 	mvnne	r3, #32, 10	; 0x8000000
     bd4:	7c010000 	stcvc	0, cr0, [r1], {-0}
     bd8:	0000047d 	andeq	r0, r0, sp, ror r4
     bdc:	006c0305 	rsbeq	r0, ip, r5, lsl #6
     be0:	46352000 	ldrtmi	r2, [r5], -r0
     be4:	01000002 	tsteq	r0, r2
     be8:	00022f67 	andeq	r2, r2, r7, ror #30
     bec:	90030500 	andls	r0, r3, r0, lsl #10
     bf0:	36200000 	strtcc	r0, [r0], -r0
     bf4:	0000027c 	andeq	r0, r0, ip, ror r2
     bf8:	0b342207 	bleq	d0941c <__Stack_Size+0xd0901c>
     bfc:	040a0000 	streq	r0, [sl], #-0
     c00:	00000316 	andeq	r0, r0, r6, lsl r3
     c04:	00054036 	andeq	r4, r5, r6, lsr r0
     c08:	45250700 	strmi	r0, [r5, #-1792]!	; 0x700
     c0c:	0a00000b 	beq	c40 <__Stack_Size+0x840>
     c10:	0003f904 	andeq	pc, r3, r4, lsl #18
     c14:	04d33600 	ldrbeq	r3, [r3], #1536	; 0x600
     c18:	2d070000 	stccs	0, cr0, [r7, #-0]
     c1c:	0000004c 	andeq	r0, r0, ip, asr #32
     c20:	00099a36 	andeq	r9, r9, r6, lsr sl
     c24:	61230800 	teqvs	r3, r0, lsl #16
     c28:	36000001 	strcc	r0, [r0], -r1
     c2c:	000008aa 	andeq	r0, r0, sl, lsr #17
     c30:	01612408 	cmneq	r1, r8, lsl #8
     c34:	61370000 	teqvs	r7, r0
     c38:	7c000001 	stcvc	0, cr0, [r0], {1}
     c3c:	3800000b 	stmdacc	r0, {r0, r1, r3}
     c40:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
     c44:	1d360006 	ldcne	0, cr0, [r6, #-24]!	; 0xffffffe8
     c48:	08000001 	stmdaeq	r0, {r0}
     c4c:	000b6c25 	andeq	r6, fp, r5, lsr #24
     c50:	06b63600 	ldrteq	r3, [r6], r0, lsl #12
     c54:	26080000 	strcs	r0, [r8], -r0
     c58:	00000161 	andeq	r0, r0, r1, ror #2
     c5c:	00044935 	andeq	r4, r4, r5, lsr r9
     c60:	a32c0600 	teqge	ip, #0, 12
     c64:	0500000b 	streq	r0, [r0, #-11]
     c68:	0002d003 	andeq	sp, r2, r3
     c6c:	05043920 	streq	r3, [r4, #-2336]	; 0x920
     c70:	00746e69 	rsbseq	r6, r4, r9, ror #28
     c74:	00005e37 	andeq	r5, r0, r7, lsr lr
     c78:	000bb500 	andeq	fp, fp, r0, lsl #10
     c7c:	36003a00 	strcc	r3, [r0], -r0, lsl #20
     c80:	000008a7 	andeq	r0, r0, r7, lsr #17
     c84:	0baa2501 	bleq	fea8a090 <BootRAM+0xd9fa831>
     c88:	b3360000 	teqlt	r6, #0
     c8c:	01000006 	tsteq	r0, r6
     c90:	000baa26 	andeq	sl, fp, r6, lsr #20
     c94:	00493500 	subeq	r3, r9, r0, lsl #10
     c98:	61010000 	mrsvs	r0, (UNDEF: 1)
     c9c:	0000006f 	andeq	r0, r0, pc, rrx
     ca0:	03180305 	tsteq	r8, #335544320	; 0x14000000
     ca4:	70352000 	eorsvc	r2, r5, r0
     ca8:	01000002 	tsteq	r0, r2
     cac:	00008f65 	andeq	r8, r0, r5, ror #30
     cb0:	14030500 	strne	r0, [r3], #-1280	; 0x500
     cb4:	37200003 	strcc	r0, [r0, -r3]!
     cb8:	0000010a 	andeq	r0, r0, sl, lsl #2
     cbc:	00000bfd 	strdeq	r0, [r0], -sp
     cc0:	0000bf38 	andeq	fp, r0, r8, lsr pc
     cc4:	35000600 	strcc	r0, [r0, #-1536]	; 0x600
     cc8:	00000032 	andeq	r0, r0, r2, lsr r0
     ccc:	0bed8801 	bleq	ffb62cd8 <BootRAM+0xead3479>
     cd0:	03050000 	movweq	r0, #20480	; 0x5000
     cd4:	20000034 	andcs	r0, r0, r4, lsr r0
     cd8:	00080235 	andeq	r0, r8, r5, lsr r2
     cdc:	ed920100 	ldfs	f0, [r2]
     ce0:	0500000b 	streq	r0, [r0, #-11]
     ce4:	00005003 	andeq	r5, r0, r3
     ce8:	072e3520 	streq	r3, [lr, -r0, lsr #10]!
     cec:	9f010000 	svcls	0x00010000
     cf0:	00000501 	andeq	r0, r0, r1, lsl #10
     cf4:	02d60305 	sbcseq	r0, r6, #335544320	; 0x14000000
     cf8:	153b2000 	ldrne	r2, [fp, #-0]!
     cfc:	09000005 	stmdbeq	r0, {r0, r2}
     d00:	07743c6e 	ldrbeq	r3, [r4, -lr, ror #24]!
     d04:	460a0000 	strmi	r0, [sl], -r0
     d08:	000c4902 	andeq	r4, ip, r2, lsl #18
     d0c:	005e0f00 	subseq	r0, lr, r0, lsl #30
     d10:	3c000000 	stccc	0, cr0, [r0], {-0}
     d14:	000007b0 			; <UNDEFINED> instruction: 0x000007b0
     d18:	6002570a 	andvs	r5, r2, sl, lsl #14
     d1c:	0f00000c 	svceq	0x0000000c
     d20:	0000005e 	andeq	r0, r0, lr, asr r0
     d24:	00004c0f 	andeq	r4, r0, pc, lsl #24
     d28:	553c0000 	ldrpl	r0, [ip, #-0]!
     d2c:	0a000009 	beq	d58 <__Stack_Size+0x958>
     d30:	0c720240 	lfmeq	f0, 2, [r2], #-256	; 0xffffff00
     d34:	5e0f0000 	cdppl	0, 0, cr0, cr15, cr0, {0}
     d38:	00000000 	andeq	r0, r0, r0
     d3c:	0000213d 	andeq	r2, r0, sp, lsr r1
     d40:	83e90400 	mvnhi	r0, #0, 8
     d44:	0f00000c 	svceq	0x0000000c
     d48:	0000005e 	andeq	r0, r0, lr, asr r0
     d4c:	03253e00 	teqeq	r5, #0, 28
     d50:	6d090000 	stcvs	0, cr0, [r9, #-0]
     d54:	000000b4 	strheq	r0, [r0], -r4
     d58:	0008533f 	andeq	r5, r8, pc, lsr r3
     d5c:	5be50400 	blpl	ff941d64 <BootRAM+0xe8b2505>
     d60:	a8000001 	stmdage	r0, {r0}
     d64:	0f00000c 	svceq	0x0000000c
     d68:	0000004c 	andeq	r0, r0, ip, asr #32
     d6c:	00016c0f 	andeq	r6, r1, pc, lsl #24
     d70:	4a3b0000 	bmi	ec0d78 <__Stack_Size+0xec0978>
     d74:	07000005 	streq	r0, [r0, -r5]
     d78:	02893f19 	addeq	r3, r9, #25, 30	; 0x64
     d7c:	f3030000 	vhadd.u8	d0, d3, d0
     d80:	000008e6 	andeq	r0, r0, r6, ror #17
     d84:	00000cc4 	andeq	r0, r0, r4, asr #25
     d88:	000ba30f 	andeq	sl, fp, pc, lsl #6
     d8c:	7d3d0000 	ldcvc	0, cr0, [sp, #-0]
     d90:	03000005 	movweq	r0, #5
     d94:	000cdff2 	strdeq	sp, [ip], -r2
     d98:	003a0f00 	eorseq	r0, sl, r0, lsl #30
     d9c:	5e0f0000 	cdppl	0, 0, cr0, cr15, cr0, {0}
     da0:	0f000000 	svceq	0x00000000
     da4:	0000005e 	andeq	r0, r0, lr, asr r0
     da8:	02c44000 	sbceq	r4, r4, #0
     dac:	0a030000 	beq	c0db4 <__Stack_Size+0xc09b4>
     db0:	000ba301 	andeq	sl, fp, r1, lsl #6
     db4:	071b3c00 	ldreq	r3, [fp, -r0, lsl #24]
     db8:	06030000 	streq	r0, [r3], -r0
     dbc:	000cfd01 	andeq	pc, ip, r1, lsl #26
     dc0:	0cfd0f00 	ldcleq	15, cr0, [sp]
     dc4:	0a000000 	beq	dcc <__Stack_Size+0x9cc>
     dc8:	0000ff04 	andeq	pc, r0, r4, lsl #30
     dcc:	00843b00 	addeq	r3, r4, r0, lsl #22
     dd0:	6a090000 	bvs	240dd8 <__Stack_Size+0x2409d8>
     dd4:	00039e3b 	andeq	r9, r3, fp, lsr lr
     dd8:	001a0b00 	andseq	r0, sl, r0, lsl #22
     ddc:	0000024d 	andeq	r0, r0, sp, asr #4
     de0:	03f10004 	mvnseq	r0, #4
     de4:	01040000 	mrseq	r0, (UNDEF: 4)
     de8:	00000158 	andeq	r0, r0, r8, asr r1
     dec:	000a1e01 	andeq	r1, sl, r1, lsl #28
     df0:	00037b00 	andeq	r7, r3, r0, lsl #22
     df4:	0004a400 	andeq	sl, r4, r0, lsl #8
     df8:	05040200 	streq	r0, [r4, #-512]	; 0x200
     dfc:	000001f6 	strdeq	r0, [r0], -r6
     e00:	a9050202 	stmdbge	r5, {r1, r9}
     e04:	02000006 	andeq	r0, r0, #6
     e08:	06550601 	ldrbeq	r0, [r5], -r1, lsl #12
     e0c:	04020000 	streq	r0, [r2], #-0
     e10:	00079307 	andeq	r9, r7, r7, lsl #6
     e14:	31750300 	cmncc	r5, r0, lsl #6
     e18:	28010036 	stmdacs	r1, {r1, r2, r4, r5}
     e1c:	00000044 	andeq	r0, r0, r4, asr #32
     e20:	e8070202 	stmda	r7, {r1, r9}
     e24:	03000003 	movweq	r0, #3
     e28:	01003875 	tsteq	r0, r5, ror r8
     e2c:	00005529 	andeq	r5, r0, r9, lsr #10
     e30:	08010200 	stmdaeq	r1, {r9}
     e34:	00000653 	andeq	r0, r0, r3, asr r6
     e38:	26070402 	strcs	r0, [r7], -r2, lsl #8
     e3c:	04000005 	streq	r0, [r0], #-5
     e40:	0000008c 	andeq	r0, r0, ip, lsl #1
     e44:	88240208 	stmdahi	r4!, {r3, r9}
     e48:	05000000 	streq	r0, [r0, #-0]
     e4c:	0000013d 	andeq	r0, r0, sp, lsr r1
     e50:	00882602 	addeq	r2, r8, r2, lsl #12
     e54:	05000000 	streq	r0, [r0, #-0]
     e58:	000005a4 	andeq	r0, r0, r4, lsr #11
     e5c:	00392702 	eorseq	r2, r9, r2, lsl #14
     e60:	00040000 	andeq	r0, r4, r0
     e64:	004b0406 	subeq	r0, fp, r6, lsl #8
     e68:	d6070000 	strle	r0, [r7], -r0
     e6c:	02000002 	andeq	r0, r0, #2
     e70:	00006329 	andeq	r6, r0, r9, lsr #6
     e74:	04490800 	strbeq	r0, [r9], #-2048	; 0x800
     e78:	2c030000 	stccs	0, cr0, [r3], {-0}
     e7c:	000000aa 	andeq	r0, r0, sl, lsr #1
     e80:	02d00305 	sbcseq	r0, r0, #335544320	; 0x14000000
     e84:	04092000 	streq	r2, [r9], #-0
     e88:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     e8c:	099a0800 	ldmibeq	sl, {fp}
     e90:	3c040000 	stccc	0, cr0, [r4], {-0}
     e94:	0000008e 	andeq	r0, r0, lr, lsl #1
     e98:	014c0305 	cmpeq	ip, r5, lsl #6
     e9c:	aa082000 	bge	208ea4 <__Stack_Size+0x208aa4>
     ea0:	04000008 	streq	r0, [r0], #-8
     ea4:	00008e96 	muleq	r0, r6, lr
     ea8:	c0030500 	andgt	r0, r3, r0, lsl #10
     eac:	0a200002 	beq	800ebc <__Stack_Size+0x800abc>
     eb0:	0000008e 	andeq	r0, r0, lr, lsl #1
     eb4:	000000e3 	andeq	r0, r0, r3, ror #1
     eb8:	00005c0b 	andeq	r5, r0, fp, lsl #24
     ebc:	08000600 	stmdaeq	r0, {r9, sl}
     ec0:	0000011d 	andeq	r0, r0, sp, lsl r1
     ec4:	00d3e004 	sbcseq	lr, r3, r4
     ec8:	03050000 	movweq	r0, #20480	; 0x5000
     ecc:	20000094 	mulcs	r0, r4, r0
     ed0:	0006b608 	andeq	fp, r6, r8, lsl #12
     ed4:	8e4e0400 	cdphi	4, 4, cr0, cr14, cr0, {0}
     ed8:	05000000 	streq	r0, [r0, #-0]
     edc:	0000e003 	andeq	lr, r0, r3
     ee0:	004b0a20 	subeq	r0, fp, r0, lsr #20
     ee4:	01150000 	tsteq	r5, r0
     ee8:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
     eec:	11000000 	mrsne	r0, (UNDEF: 0)
     ef0:	09970800 	ldmibeq	r7, {fp}
     ef4:	25040000 	strcs	r0, [r4, #-0]
     ef8:	00000105 	andeq	r0, r0, r5, lsl #2
     efc:	00cc0305 	sbceq	r0, ip, r5, lsl #6
     f00:	4b0a2000 	blmi	288f08 <__Stack_Size+0x288b08>
     f04:	36000000 	strcc	r0, [r0], -r0
     f08:	0b000001 	bleq	f14 <__Stack_Size+0xb14>
     f0c:	0000005c 	andeq	r0, r0, ip, asr r0
     f10:	b3080008 	movwlt	r0, #32776	; 0x8008
     f14:	04000006 	streq	r0, [r0], #-6
     f18:	00012641 	andeq	r2, r1, r1, asr #12
     f1c:	29030500 	stmdbcs	r3, {r8, sl}
     f20:	0a200001 	beq	800f2c <__Stack_Size+0x800b2c>
     f24:	0000004b 	andeq	r0, r0, fp, asr #32
     f28:	00000157 	andeq	r0, r0, r7, asr r1
     f2c:	00005c0b 	andeq	r5, r0, fp, lsl #24
     f30:	08002c00 	stmdaeq	r0, {sl, fp, sp}
     f34:	000008a7 	andeq	r0, r0, r7, lsr #17
     f38:	01475404 	cmpeq	r7, r4, lsl #8
     f3c:	03050000 	movweq	r0, #20480	; 0x5000
     f40:	200000ec 	andcs	r0, r0, ip, ror #1
     f44:	00004b0a 	andeq	r4, r0, sl, lsl #22
     f48:	00017800 	andeq	r7, r1, r0, lsl #16
     f4c:	005c0b00 	subseq	r0, ip, r0, lsl #22
     f50:	00030000 	andeq	r0, r3, r0
     f54:	000a0b08 	andeq	r0, sl, r8, lsl #22
     f58:	689d0400 	ldmvs	sp, {sl}
     f5c:	05000001 	streq	r0, [r0, #-1]
     f60:	0000e803 	andeq	lr, r0, r3, lsl #16
     f64:	004b0a20 	subeq	r0, fp, r0, lsr #20
     f68:	01990000 	orrseq	r0, r9, r0
     f6c:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
     f70:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     f74:	096e0800 	stmdbeq	lr!, {fp}^
     f78:	a4040000 	strge	r0, [r4], #-0
     f7c:	00000189 	andeq	r0, r0, r9, lsl #3
     f80:	01320305 	teqeq	r2, r5, lsl #6
     f84:	4b0a2000 	blmi	288f8c <__Stack_Size+0x288b8c>
     f88:	ba000000 	blt	f90 <__Stack_Size+0xb90>
     f8c:	0b000001 	bleq	f98 <__Stack_Size+0xb98>
     f90:	0000005c 	andeq	r0, r0, ip, asr r0
     f94:	f7080013 			; <UNDEFINED> instruction: 0xf7080013
     f98:	04000009 	streq	r0, [r0], #-9
     f9c:	0001aaaa 	andeq	sl, r1, sl, lsr #21
     fa0:	54030500 	strpl	r0, [r3], #-1280	; 0x500
     fa4:	0a200001 	beq	800fb0 <__Stack_Size+0x800bb0>
     fa8:	0000004b 	andeq	r0, r0, fp, asr #32
     fac:	000001db 	ldrdeq	r0, [r0], -fp
     fb0:	00005c0b 	andeq	r5, r0, fp, lsl #24
     fb4:	08000f00 	stmdaeq	r0, {r8, r9, sl, fp}
     fb8:	000009b1 			; <UNDEFINED> instruction: 0x000009b1
     fbc:	01cbb004 	biceq	fp, fp, r4
     fc0:	03050000 	movweq	r0, #20480	; 0x5000
     fc4:	20000119 	andcs	r0, r0, r9, lsl r1
     fc8:	00004b0a 	andeq	r4, r0, sl, lsl #22
     fcc:	0001fc00 	andeq	pc, r1, r0, lsl #24
     fd0:	005c0b00 	subseq	r0, ip, r0, lsl #22
     fd4:	007f0000 	rsbseq	r0, pc, r0
     fd8:	0009c408 	andeq	ip, r9, r8, lsl #8
     fdc:	ecca0400 	cfstrd	mvd0, [sl], {0}
     fe0:	05000001 	streq	r0, [r0, #-1]
     fe4:	00016803 	andeq	r6, r1, r3, lsl #16
     fe8:	004b0a20 	subeq	r0, fp, r0, lsr #20
     fec:	021d0000 	andseq	r0, sp, #0
     ff0:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
     ff4:	6b000000 	blvs	ffc <__Stack_Size+0xbfc>
     ff8:	09d50800 	ldmibeq	r5, {fp}^
     ffc:	d1040000 	mrsle	r0, (UNDEF: 4)
    1000:	0000020d 	andeq	r0, r0, sp, lsl #4
    1004:	01e80305 	mvneq	r0, r5, lsl #6
    1008:	e6082000 	str	r2, [r8], -r0
    100c:	04000009 	streq	r0, [r0], #-9
    1010:	00020dd8 	ldrdeq	r0, [r2], -r8
    1014:	54030500 	strpl	r0, [r3], #-1280	; 0x500
    1018:	08200002 	stmdaeq	r0!, {r1}
    101c:	00000981 	andeq	r0, r0, r1, lsl #19
    1020:	004bde04 	subeq	sp, fp, r4, lsl #28
    1024:	03050000 	movweq	r0, #20480	; 0x5000
    1028:	00000000 	andeq	r0, r0, r0
    102c:	00025100 	andeq	r5, r2, r0, lsl #2
    1030:	7b000400 	blvc	2038 <__Stack_Size+0x1c38>
    1034:	04000004 	streq	r0, [r0], #-4
    1038:	00015801 	andeq	r5, r1, r1, lsl #16
    103c:	0ad20100 	beq	ff481444 <BootRAM+0xe3f1be5>
    1040:	037b0000 	cmneq	fp, #0
    1044:	01280000 	teqeq	r8, r0
    1048:	00000000 	andeq	r0, r0, r0
    104c:	05160000 	ldreq	r0, [r6, #-0]
    1050:	04020000 	streq	r0, [r2], #-0
    1054:	0001f605 	andeq	pc, r1, r5, lsl #12
    1058:	05020200 	streq	r0, [r2, #-512]	; 0x200
    105c:	000006a9 	andeq	r0, r0, r9, lsr #13
    1060:	55060102 	strpl	r0, [r6, #-258]	; 0x102
    1064:	03000006 	movweq	r0, #6
    1068:	00323375 	eorseq	r3, r2, r5, ror r3
    106c:	00452705 	subeq	r2, r5, r5, lsl #14
    1070:	04020000 	streq	r0, [r2], #-0
    1074:	00079307 	andeq	r9, r7, r7, lsl #6
    1078:	07020200 	streq	r0, [r2, -r0, lsl #4]
    107c:	000003e8 	andeq	r0, r0, r8, ror #7
    1080:	53080102 	movwpl	r0, #33026	; 0x8102
    1084:	04000006 	streq	r0, [r0], #-6
    1088:	6f370501 	svcvs	0x00370501
    108c:	05000000 	streq	r0, [r0, #-0]
    1090:	000005e0 	andeq	r0, r0, r0, ror #11
    1094:	074e0500 	strbeq	r0, [lr, -r0, lsl #10]
    1098:	00010000 	andeq	r0, r1, r0
    109c:	00044406 	andeq	r4, r4, r6, lsl #8
    10a0:	5a370500 	bpl	dc24a8 <__Stack_Size+0xdc20a8>
    10a4:	02000000 	andeq	r0, r0, #0
    10a8:	05260704 	streq	r0, [r6, #-1796]!	; 0x704
    10ac:	c0070000 	andgt	r0, r7, r0
    10b0:	0100000a 	tsteq	r0, sl
    10b4:	0001ac26 	andeq	sl, r1, r6, lsr #24
    10b8:	0005ac00 	andeq	sl, r5, r0, lsl #24
    10bc:	00007808 	andeq	r7, r0, r8, lsl #16
    10c0:	ac9c0100 	ldfges	f0, [ip], {0}
    10c4:	08000001 	stmdaeq	r0, {r0}
    10c8:	00000ac5 	andeq	r0, r0, r5, asr #21
    10cc:	006f2801 	rsbeq	r2, pc, r1, lsl #16
    10d0:	02460000 	subeq	r0, r6, #0
    10d4:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
    10d8:	0100000a 	tsteq	r0, sl
    10dc:	00006f29 	andeq	r6, r0, r9, lsr #30
    10e0:	00025a00 	andeq	r5, r2, r0, lsl #20
    10e4:	05ce0900 	strbeq	r0, [lr, #2304]	; 0x900
    10e8:	001c0800 	andseq	r0, ip, r0, lsl #16
    10ec:	010a0000 	mrseq	r0, (UNDEF: 10)
    10f0:	9c0a0000 	stcls	0, cr0, [sl], {-0}
    10f4:	0100000a 	tsteq	r0, sl
    10f8:	0001ac51 	andeq	sl, r1, r1, asr ip
    10fc:	0000d600 	andeq	sp, r0, r0, lsl #12
    1100:	0c000b00 	stceq	11, cr0, [r0], {-0}
    1104:	080005d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl}
    1108:	000001c4 	andeq	r0, r0, r4, asr #3
    110c:	000000ed 	andeq	r0, r0, sp, ror #1
    1110:	0550010d 	ldrbeq	r0, [r0, #-269]	; 0x10d
    1114:	0050000c 	subseq	r0, r0, ip
    1118:	da0e0008 	ble	381140 <__Stack_Size+0x380d40>
    111c:	d9080005 	stmdble	r8, {r0, r2}
    1120:	0f000001 	svceq	0x00000001
    1124:	080005e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl}
    1128:	000001c4 	andeq	r0, r0, r4, asr #3
    112c:	0550010d 	ldrbeq	r0, [r0, #-269]	; 0x10d
    1130:	0020000c 	eoreq	r0, r0, ip
    1134:	09000008 	stmdbeq	r0, {r3}
    1138:	080005ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, sl}
    113c:	0000000e 	andeq	r0, r0, lr
    1140:	00000135 	andeq	r0, r0, r5, lsr r1
    1144:	000ae910 	andeq	lr, sl, r0, lsl r9
    1148:	ac5d0100 	ldfgee	f0, [sp], {-0}
    114c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1150:	080005ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sl}
    1154:	000001ea 	andeq	r0, r0, sl, ror #3
    1158:	0005f60e 	andeq	pc, r5, lr, lsl #12
    115c:	0001fb08 	andeq	pc, r1, r8, lsl #22
    1160:	b20e0000 	andlt	r0, lr, #0
    1164:	08080005 	stmdaeq	r8, {r0, r2}
    1168:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    116c:	080005b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl}
    1170:	0000020f 	andeq	r0, r0, pc, lsl #4
    1174:	0005ba0e 	andeq	fp, r5, lr, lsl #20
    1178:	00021608 	andeq	r1, r2, r8, lsl #12
    117c:	05be0e00 	ldreq	r0, [lr, #3584]!	; 0xe00
    1180:	021d0800 	andseq	r0, sp, #0, 16
    1184:	c20e0000 	andgt	r0, lr, #0
    1188:	24080005 	strcs	r0, [r8], #-5
    118c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1190:	080005c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sl}
    1194:	0000022b 	andeq	r0, r0, fp, lsr #4
    1198:	0005fe0c 	andeq	pc, r5, ip, lsl #28
    119c:	0001c408 	andeq	ip, r1, r8, lsl #8
    11a0:	00018200 	andeq	r8, r1, r0, lsl #4
    11a4:	50010d00 	andpl	r0, r1, r0, lsl #26
    11a8:	20000c05 	andcs	r0, r0, r5, lsl #24
    11ac:	0c000800 	stceq	8, cr0, [r0], {-0}
    11b0:	0800060a 	stmdaeq	r0, {r1, r3, r9, sl}
    11b4:	000001c4 	andeq	r0, r0, r4, asr #3
    11b8:	00000199 	muleq	r0, r9, r1
    11bc:	0550010d 	ldrbeq	r0, [r0, #-269]	; 0x10d
    11c0:	0050000c 	subseq	r0, r0, ip
    11c4:	120e0008 	andne	r0, lr, #8
    11c8:	3c080006 	stccc	0, cr0, [r8], {6}
    11cc:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    11d0:	08000618 	stmdaeq	r0, {r3, r4, r9, sl}
    11d4:	0000024d 	andeq	r0, r0, sp, asr #4
    11d8:	05041100 	streq	r1, [r4, #-256]	; 0x100
    11dc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    11e0:	00044912 	andeq	r4, r4, r2, lsl r9
    11e4:	ac2c0400 	cfstrsge	mvf0, [ip], #-0
    11e8:	05000001 	streq	r0, [r0, #-1]
    11ec:	0002d003 	andeq	sp, r2, r3
    11f0:	0a821320 	beq	fe085e78 <BootRAM+0xcff6619>
    11f4:	fd030000 	stc2	0, cr0, [r3, #-0]
    11f8:	0000006f 	andeq	r0, r0, pc, rrx
    11fc:	000001d9 	ldrdeq	r0, [r0], -r9
    1200:	00003a14 	andeq	r3, r0, r4, lsl sl
    1204:	9c0a0000 	stcls	0, cr0, [sl], {-0}
    1208:	0100000a 	tsteq	r0, sl
    120c:	0001ac51 	andeq	sl, r1, r1, asr ip
    1210:	0001ea00 	andeq	lr, r1, r0, lsl #20
    1214:	0a000b00 	beq	3e1c <__Stack_Size+0x3a1c>
    1218:	00000af5 	strdeq	r0, [r0], -r5
    121c:	006f7c02 	rsbeq	r7, pc, r2, lsl #24
    1220:	01fb0000 	mvnseq	r0, r0
    1224:	000b0000 	andeq	r0, fp, r0
    1228:	000a2f15 	andeq	r2, sl, r5, lsl pc
    122c:	087d0200 	ldmdaeq	sp!, {r9}^
    1230:	0b000002 	bleq	1240 <__Stack_Size+0xe40>
    1234:	0a901600 	beq	fe406a3c <BootRAM+0xd3771dd>
    1238:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    123c:	000ab716 	andeq	fp, sl, r6, lsl r7
    1240:	16fa0300 	ldrbtne	r0, [sl], r0, lsl #6
    1244:	00000a4a 	andeq	r0, r0, sl, asr #20
    1248:	5316fb03 	tstpl	r6, #3072	; 0xc00
    124c:	04000002 	streq	r0, [r0], #-2
    1250:	0aac1651 	beq	feb06b9c <BootRAM+0xda7733d>
    1254:	fc030000 	stc2	0, cr0, [r3], {-0}
    1258:	000a5c0a 	andeq	r5, sl, sl, lsl #24
    125c:	acff0300 	ldclge	3, cr0, [pc]	; 1264 <__Stack_Size+0xe64>
    1260:	3c000001 	stccc	0, cr0, [r0], {1}
    1264:	0b000002 	bleq	1274 <__Stack_Size+0xe74>
    1268:	0a3f1700 	beq	fc6e70 <__Stack_Size+0xfc6a70>
    126c:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    1270:	0000024d 	andeq	r0, r0, sp, asr #4
    1274:	00003a14 	andeq	r3, r0, r4, lsl sl
    1278:	d9160000 	ldmdble	r6, {}	; <UNPREDICTABLE>
    127c:	0300000a 	movweq	r0, #10
    1280:	0ac700f8 	beq	ff1c1668 <BootRAM+0xe131e09>
    1284:	00040000 	andeq	r0, r4, r0
    1288:	000005bf 			; <UNDEFINED> instruction: 0x000005bf
    128c:	01580104 	cmpeq	r8, r4, lsl #2
    1290:	0b010000 	bleq	41298 <__Stack_Size+0x40e98>
    1294:	7b00000d 	blvc	12d0 <__Stack_Size+0xed0>
    1298:	50000003 	andpl	r0, r0, r3
    129c:	00000001 	andeq	r0, r0, r1
    12a0:	ad000000 	stcge	0, cr0, [r0, #-0]
    12a4:	02000005 	andeq	r0, r0, #5
    12a8:	01f60504 	mvnseq	r0, r4, lsl #10
    12ac:	02020000 	andeq	r0, r2, #0
    12b0:	0006a905 	andeq	sl, r6, r5, lsl #18
    12b4:	06010200 	streq	r0, [r1], -r0, lsl #4
    12b8:	00000655 	andeq	r0, r0, r5, asr r6
    12bc:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    12c0:	45270200 	strmi	r0, [r7, #-512]!	; 0x200
    12c4:	02000000 	andeq	r0, r0, #0
    12c8:	07930704 	ldreq	r0, [r3, r4, lsl #14]
    12cc:	75030000 	strvc	r0, [r3, #-0]
    12d0:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    12d4:	00005728 	andeq	r5, r0, r8, lsr #14
    12d8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    12dc:	000003e8 	andeq	r0, r0, r8, ror #7
    12e0:	00387503 	eorseq	r7, r8, r3, lsl #10
    12e4:	00682902 	rsbeq	r2, r8, r2, lsl #18
    12e8:	01020000 	mrseq	r0, (UNDEF: 2)
    12ec:	00065308 	andeq	r5, r6, r8, lsl #6
    12f0:	04570400 	ldrbeq	r0, [r7], #-1024	; 0x400
    12f4:	2f020000 	svccs	0x00020000
    12f8:	0000007a 	andeq	r0, r0, sl, ror r0
    12fc:	00004505 	andeq	r4, r0, r5, lsl #10
    1300:	01530400 	cmpeq	r3, r0, lsl #8
    1304:	30020000 	andcc	r0, r2, r0
    1308:	0000008a 	andeq	r0, r0, sl, lsl #1
    130c:	00005705 	andeq	r5, r0, r5, lsl #14
    1310:	0db80400 	cfldrseq	mvf0, [r8]
    1314:	33020000 	movwcc	r0, #8192	; 0x2000
    1318:	0000009a 	muleq	r0, sl, r0
    131c:	00007a06 	andeq	r7, r0, r6, lsl #20
    1320:	02010700 	andeq	r0, r1, #0, 14
    1324:	0000b437 	andeq	fp, r0, r7, lsr r4
    1328:	05e00800 	strbeq	r0, [r0, #2048]!	; 0x800
    132c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1330:	0000074e 	andeq	r0, r0, lr, asr #14
    1334:	44040001 	strmi	r0, [r4], #-1
    1338:	02000004 	andeq	r0, r0, #4
    133c:	00009f37 	andeq	r9, r0, r7, lsr pc
    1340:	03280900 	teqeq	r8, #0, 18
    1344:	00013f8d 	andeq	r3, r1, sp, lsl #31
    1348:	52430a00 	subpl	r0, r3, #0, 20
    134c:	6f8e0300 	svcvs	0x008e0300
    1350:	00000000 	andeq	r0, r0, r0
    1354:	000db30b 	andeq	fp, sp, fp, lsl #6
    1358:	6f8f0300 	svcvs	0x008f0300
    135c:	04000000 	streq	r0, [r0], #-0
    1360:	5249430a 	subpl	r4, r9, #671088640	; 0x28000000
    1364:	6f900300 	svcvs	0x00900300
    1368:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    136c:	000b840b 	andeq	r8, fp, fp, lsl #8
    1370:	6f910300 	svcvs	0x00910300
    1374:	0c000000 	stceq	0, cr0, [r0], {-0}
    1378:	000c500b 	andeq	r5, ip, fp
    137c:	6f920300 	svcvs	0x00920300
    1380:	10000000 	andne	r0, r0, r0
    1384:	000c0c0b 	andeq	r0, ip, fp, lsl #24
    1388:	6f930300 	svcvs	0x00930300
    138c:	14000000 	strne	r0, [r0], #-0
    1390:	000cda0b 	andeq	sp, ip, fp, lsl #20
    1394:	6f940300 	svcvs	0x00940300
    1398:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    139c:	000d230b 	andeq	r2, sp, fp, lsl #6
    13a0:	6f950300 	svcvs	0x00950300
    13a4:	1c000000 	stcne	0, cr0, [r0], {-0}
    13a8:	000d920b 	andeq	r9, sp, fp, lsl #4
    13ac:	6f960300 	svcvs	0x00960300
    13b0:	20000000 	andcs	r0, r0, r0
    13b4:	5253430a 	subspl	r4, r3, #671088640	; 0x28000000
    13b8:	6f970300 	svcvs	0x00970300
    13bc:	24000000 	strcs	r0, [r0], #-0
    13c0:	0be10400 	bleq	ff8423c8 <BootRAM+0xe7b2b69>
    13c4:	98030000 	stmdals	r3, {}	; <UNPREDICTABLE>
    13c8:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    13cc:	03033c0c 	movweq	r3, #15372	; 0x3c0c
    13d0:	0001df9b 	muleq	r1, fp, pc	; <UNPREDICTABLE>
    13d4:	0cc10b00 	vstmiaeq	r1, {d16-d15}
    13d8:	9c030000 	stcls	0, cr0, [r3], {-0}
    13dc:	000001f6 	strdeq	r0, [r0], -r6
    13e0:	0c700b00 	ldcleq	11, cr0, [r0], #-0
    13e4:	9d030000 	stcls	0, cr0, [r3, #-0]
    13e8:	000001fb 	strdeq	r0, [r0], -fp
    13ec:	0c4b0b08 	mcrreq	11, 0, r0, fp, cr8
    13f0:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
    13f4:	0000020b 	andeq	r0, r0, fp, lsl #4
    13f8:	0daa0b80 	stceq	11, cr0, [sl, #512]!	; 0x200
    13fc:	9f030000 	svcls	0x00030000
    1400:	000001fb 	strdeq	r0, [r0], -fp
    1404:	0b300d88 	bleq	c04a2c <__Stack_Size+0xc0462c>
    1408:	a0030000 	andge	r0, r3, r0
    140c:	00000210 	andeq	r0, r0, r0, lsl r2
    1410:	7f0d0100 	svcvc	0x000d0100
    1414:	0300000c 	movweq	r0, #12
    1418:	0001fba1 	andeq	pc, r1, r1, lsr #23
    141c:	0d010800 	stceq	8, cr0, [r1, #-0]
    1420:	00000b14 	andeq	r0, r0, r4, lsl fp
    1424:	0215a203 	andseq	sl, r5, #805306368	; 0x30000000
    1428:	01800000 	orreq	r0, r0, r0
    142c:	000c890d 	andeq	r8, ip, sp, lsl #18
    1430:	fba30300 	blx	fe8c203a <BootRAM+0xd8327db>
    1434:	88000001 	stmdahi	r0, {r0}
    1438:	0c410d01 	mcrreq	13, 0, r0, r1, cr1
    143c:	a4030000 	strge	r0, [r3], #-0
    1440:	0000021a 	andeq	r0, r0, sl, lsl r2
    1444:	930d0200 	movwls	r0, #53760	; 0xd200
    1448:	0300000c 	movweq	r0, #12
    144c:	00021fa5 	andeq	r1, r2, r5, lsr #31
    1450:	0e020800 	cdpeq	8, 0, cr0, cr2, cr0, {0}
    1454:	00525049 	subseq	r5, r2, r9, asr #32
    1458:	023fa603 	eorseq	sl, pc, #3145728	; 0x300000
    145c:	03000000 	movweq	r0, #0
    1460:	006f0f00 	rsbeq	r0, pc, r0, lsl #30
    1464:	01ef0000 	mvneq	r0, r0
    1468:	ef100000 	svc	0x00100000
    146c:	01000001 	tsteq	r0, r1
    1470:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1474:	00000526 	andeq	r0, r0, r6, lsr #10
    1478:	0001df05 	andeq	sp, r1, r5, lsl #30
    147c:	003a0f00 	eorseq	r0, sl, r0, lsl #30
    1480:	020b0000 	andeq	r0, fp, #0
    1484:	ef100000 	svc	0x00100000
    1488:	1d000001 	stcne	0, cr0, [r0, #-4]
    148c:	01df0500 	bicseq	r0, pc, r0, lsl #10
    1490:	df050000 	svcle	0x00050000
    1494:	05000001 	streq	r0, [r0, #-1]
    1498:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    149c:	0001df05 	andeq	sp, r1, r5, lsl #30
    14a0:	003a0f00 	eorseq	r0, sl, r0, lsl #30
    14a4:	022f0000 	eoreq	r0, pc, #0
    14a8:	ef100000 	svc	0x00100000
    14ac:	3d000001 	stccc	0, cr0, [r0, #-4]
    14b0:	006f0f00 	rsbeq	r0, pc, r0, lsl #30
    14b4:	023f0000 	eorseq	r0, pc, #0
    14b8:	ef100000 	svc	0x00100000
    14bc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    14c0:	022f0500 	eoreq	r0, pc, #0, 10
    14c4:	16040000 	strne	r0, [r4], -r0
    14c8:	0300000d 	movweq	r0, #13
    14cc:	00014aa7 	andeq	r4, r1, r7, lsr #21
    14d0:	03040900 	movweq	r0, #18688	; 0x4900
    14d4:	000288a9 	andeq	r8, r2, r9, lsr #17
    14d8:	045c0b00 	ldrbeq	r0, [ip], #-2816	; 0xb00
    14dc:	aa030000 	bge	c14e4 <__Stack_Size+0xc10e4>
    14e0:	0000005e 	andeq	r0, r0, lr, asr r0
    14e4:	047f0b00 	ldrbteq	r0, [pc], #-2816	; 14ec <__Stack_Size+0x10ec>
    14e8:	ab030000 	blge	c14f0 <__Stack_Size+0xc10f0>
    14ec:	0000005e 	andeq	r0, r0, lr, asr r0
    14f0:	03500b01 	cmpeq	r0, #1024	; 0x400
    14f4:	ac030000 	stcge	0, cr0, [r3], {-0}
    14f8:	0000005e 	andeq	r0, r0, lr, asr r0
    14fc:	00000b02 	andeq	r0, r0, r2, lsl #22
    1500:	ad030000 	stcge	0, cr0, [r3, #-0]
    1504:	000000b4 	strheq	r0, [r0], -r4
    1508:	a1040003 	tstge	r4, r3
    150c:	03000004 	movweq	r0, #4
    1510:	00024fae 	andeq	r4, r2, lr, lsr #31
    1514:	03400900 	movteq	r0, #2304	; 0x900
    1518:	000344b0 			; <UNDEFINED> instruction: 0x000344b0
    151c:	0c650b00 	stcleq	11, cr0, [r5], #-0
    1520:	b1030000 	mrslt	r0, (UNDEF: 3)
    1524:	0000008f 	andeq	r0, r0, pc, lsl #1
    1528:	0bff0b00 	bleq	fffc4130 <BootRAM+0xef348d1>
    152c:	b2030000 	andlt	r0, r3, #0
    1530:	0000006f 	andeq	r0, r0, pc, rrx
    1534:	0bd30b04 	bleq	ff4c414c <BootRAM+0xe4348ed>
    1538:	b3030000 	movwlt	r0, #12288	; 0x3000
    153c:	0000006f 	andeq	r0, r0, pc, rrx
    1540:	0c130b08 	ldceq	11, cr0, [r3], {8}
    1544:	b4030000 	strlt	r0, [r3], #-0
    1548:	0000006f 	andeq	r0, r0, pc, rrx
    154c:	43530a0c 	cmpmi	r3, #12, 20	; 0xc000
    1550:	b5030052 	strlt	r0, [r3, #-82]	; 0x52
    1554:	0000006f 	andeq	r0, r0, pc, rrx
    1558:	43430a10 	movtmi	r0, #14864	; 0x3a10
    155c:	b6030052 			; <UNDEFINED> instruction: 0xb6030052
    1560:	0000006f 	andeq	r0, r0, pc, rrx
    1564:	0d440b14 	vstreq	d16, [r4, #-80]	; 0xffffffb0
    1568:	b7030000 	strlt	r0, [r3, -r0]
    156c:	00000354 	andeq	r0, r0, r4, asr r3
    1570:	0cbb0b18 	vldmiaeq	fp!, {d0-d11}
    1574:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
    1578:	0000006f 	andeq	r0, r0, pc, rrx
    157c:	0c3c0b24 	ldceq	11, cr0, [ip], #-144	; 0xffffff70
    1580:	b9030000 	stmdblt	r3, {}	; <UNPREDICTABLE>
    1584:	0000006f 	andeq	r0, r0, pc, rrx
    1588:	0dca0b28 	vstreq	d16, [sl, #160]	; 0xa0
    158c:	ba030000 	blt	c1594 <__Stack_Size+0xc1194>
    1590:	0000006f 	andeq	r0, r0, pc, rrx
    1594:	0c7a0b2c 	ldcleq	11, cr0, [sl], #-176	; 0xffffff50
    1598:	bb030000 	bllt	c15a0 <__Stack_Size+0xc11a0>
    159c:	0000006f 	andeq	r0, r0, pc, rrx
    15a0:	0c190b30 	ldceq	11, cr0, [r9], {48}	; 0x30
    15a4:	bc030000 	stclt	0, cr0, [r3], {-0}
    15a8:	0000006f 	andeq	r0, r0, pc, rrx
    15ac:	0bac0b34 	bleq	feb04284 <BootRAM+0xda74a25>
    15b0:	bd030000 	stclt	0, cr0, [r3, #-0]
    15b4:	0000006f 	andeq	r0, r0, pc, rrx
    15b8:	0cfc0b38 	vldmiaeq	ip!, {d16-<overflow reg d43>}
    15bc:	be030000 	cdplt	0, 0, cr0, cr3, cr0, {0}
    15c0:	0000006f 	andeq	r0, r0, pc, rrx
    15c4:	6f0f003c 	svcvs	0x000f003c
    15c8:	54000000 	strpl	r0, [r0], #-0
    15cc:	10000003 	andne	r0, r0, r3
    15d0:	000001ef 	andeq	r0, r0, pc, ror #3
    15d4:	44050002 	strmi	r0, [r5], #-2
    15d8:	04000003 	streq	r0, [r0], #-3
    15dc:	00000dbe 			; <UNDEFINED> instruction: 0x00000dbe
    15e0:	0293bf03 	addseq	fp, r3, #3, 30
    15e4:	30110000 	andscc	r0, r1, r0
    15e8:	0800000c 	stmdaeq	r0, {r2, r3}
    15ec:	0388c303 	orreq	ip, r8, #201326592	; 0xc000000
    15f0:	430a0000 	movwmi	r0, #40960	; 0xa000
    15f4:	c4030052 	strgt	r0, [r3], #-82	; 0x52
    15f8:	0000006f 	andeq	r0, r0, pc, rrx
    15fc:	53430a00 	movtpl	r0, #14848	; 0x3a00
    1600:	c5030052 	strgt	r0, [r3, #-82]	; 0x52
    1604:	0000006f 	andeq	r0, r0, pc, rrx
    1608:	59110004 	ldmdbpl	r1, {r2}
    160c:	3800000c 	stmdacc	r0, {r2, r3}
    1610:	04b4d003 	ldrteq	sp, [r4], #3
    1614:	ea0b0000 	b	2c161c <__Stack_Size+0x2c121c>
    1618:	0300000c 	movweq	r0, #12
    161c:	0004b4d1 	ldrdeq	fp, [r4], -r1
    1620:	440a0000 	strmi	r0, [sl], #-0
    1624:	03003152 	movweq	r3, #338	; 0x152
    1628:	00007fd2 	ldrdeq	r7, [r0], -r2
    162c:	7f0b0400 	svcvc	0x000b0400
    1630:	0300000c 	movweq	r0, #12
    1634:	0004b9d3 	ldrdeq	fp, [r4], -r3
    1638:	440a0600 	strmi	r0, [sl], #-1536	; 0x600
    163c:	03003252 	movweq	r3, #594	; 0x252
    1640:	00007fd4 	ldrdeq	r7, [r0], -r4
    1644:	890b0800 	stmdbhi	fp, {fp}
    1648:	0300000c 	movweq	r0, #12
    164c:	0004b9d5 	ldrdeq	fp, [r4], -r5
    1650:	440a0a00 	strmi	r0, [sl], #-2560	; 0xa00
    1654:	03003352 	movweq	r3, #850	; 0x352
    1658:	00007fd6 	ldrdeq	r7, [r0], -r6
    165c:	930b0c00 	movwls	r0, #48128	; 0xbc00
    1660:	0300000c 	movweq	r0, #12
    1664:	0004b9d7 	ldrdeq	fp, [r4], -r7
    1668:	440a0e00 	strmi	r0, [sl], #-3584	; 0xe00
    166c:	03003452 	movweq	r3, #1106	; 0x452
    1670:	00007fd8 	ldrdeq	r7, [r0], -r8
    1674:	9d0b1000 	stcls	0, cr1, [fp, #-0]
    1678:	0300000c 	movweq	r0, #12
    167c:	0004b9d9 	ldrdeq	fp, [r4], -r9
    1680:	440a1200 	strmi	r1, [sl], #-512	; 0x200
    1684:	03003552 	movweq	r3, #1362	; 0x552
    1688:	00007fda 	ldrdeq	r7, [r0], -sl
    168c:	a70b1400 	strge	r1, [fp, -r0, lsl #8]
    1690:	0300000c 	movweq	r0, #12
    1694:	0004b9db 	ldrdeq	fp, [r4], -fp	; <UNPREDICTABLE>
    1698:	440a1600 	strmi	r1, [sl], #-1536	; 0x600
    169c:	03003652 	movweq	r3, #1618	; 0x652
    16a0:	00007fdc 	ldrdeq	r7, [r0], -ip
    16a4:	b10b1800 	tstlt	fp, r0, lsl #16
    16a8:	0300000c 	movweq	r0, #12
    16ac:	0004b9dd 	ldrdeq	fp, [r4], -sp
    16b0:	440a1a00 	strmi	r1, [sl], #-2560	; 0xa00
    16b4:	03003752 	movweq	r3, #1874	; 0x752
    16b8:	00007fde 	ldrdeq	r7, [r0], -lr
    16bc:	6e0b1c00 	cdpvs	12, 0, cr1, cr11, cr0, {0}
    16c0:	0300000d 	movweq	r0, #13
    16c4:	0004b9df 	ldrdeq	fp, [r4], -pc	; <UNPREDICTABLE>
    16c8:	440a1e00 	strmi	r1, [sl], #-3584	; 0xe00
    16cc:	03003852 	movweq	r3, #2130	; 0x852
    16d0:	00007fe0 	andeq	r7, r0, r0, ror #31
    16d4:	010b2000 	mrseq	r2, (UNDEF: 11)
    16d8:	0300000d 	movweq	r0, #13
    16dc:	0004b9e1 	andeq	fp, r4, r1, ror #19
    16e0:	440a2200 	strmi	r2, [sl], #-512	; 0x200
    16e4:	03003952 	movweq	r3, #2386	; 0x952
    16e8:	00007fe2 	andeq	r7, r0, r2, ror #31
    16ec:	610b2400 	tstvs	fp, r0, lsl #8
    16f0:	0300000b 	movweq	r0, #11
    16f4:	0004b9e3 	andeq	fp, r4, r3, ror #19
    16f8:	d50b2600 	strle	r2, [fp, #-1536]	; 0x600
    16fc:	0300000c 	movweq	r0, #12
    1700:	00007fe4 	andeq	r7, r0, r4, ror #31
    1704:	6c0b2800 	stcvs	8, cr2, [fp], {-0}
    1708:	0300000b 	movweq	r0, #11
    170c:	0004b9e5 	andeq	fp, r4, r5, ror #19
    1710:	490b2a00 	stmdbmi	fp, {r9, fp, sp}
    1714:	0300000d 	movweq	r0, #13
    1718:	00006fe6 	andeq	r6, r0, r6, ror #31
    171c:	430a2c00 	movwmi	r2, #44032	; 0xac00
    1720:	e7030052 	smlsd	r3, r2, r0, r0
    1724:	0000006f 	andeq	r0, r0, pc, rrx
    1728:	53430a30 	movtpl	r0, #14896	; 0x3a30
    172c:	e8030052 	stmda	r3, {r1, r4, r6}
    1730:	0000006f 	andeq	r0, r0, pc, rrx
    1734:	3a060034 	bcc	18180c <__Stack_Size+0x18140c>
    1738:	06000000 	streq	r0, [r0], -r0
    173c:	0000004c 	andeq	r0, r0, ip, asr #32
    1740:	be041312 	mcrlt	3, 0, r1, cr4, cr2, {0}
    1744:	14000004 	strne	r0, [r0], #-4
    1748:	00000c26 	andeq	r0, r0, r6, lsr #24
    174c:	01017e01 	tsteq	r1, r1, lsl #28
    1750:	00057d15 	andeq	r7, r5, r5, lsl sp
    1754:	242d0100 	strtcs	r0, [sp], #-256	; 0x100
    1758:	16080006 	strne	r0, [r8], -r6
    175c:	01000000 	mrseq	r0, (UNDEF: 0)
    1760:	00050f9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    1764:	0d4f1600 	stcleq	6, cr1, [pc, #-0]	; 176c <__Stack_Size+0x136c>
    1768:	2d010000 	stccs	0, cr0, [r1, #-0]
    176c:	0000003a 	andeq	r0, r0, sl, lsr r0
    1770:	70175001 	andsvc	r5, r7, r1
    1774:	01006e69 	tsteq	r0, r9, ror #28
    1778:	00005e2d 	andeq	r5, r0, sp, lsr #28
    177c:	00028600 	andeq	r8, r2, r0, lsl #12
    1780:	61761700 	cmnvs	r6, r0, lsl #14
    1784:	2d01006c 	stccs	0, cr0, [r1, #-432]	; 0xfffffe50
    1788:	0000005e 	andeq	r0, r0, lr, asr r0
    178c:	000002a7 	andeq	r0, r0, r7, lsr #5
    1790:	0b351800 	bleq	d47798 <__Stack_Size+0xd47398>
    1794:	32010000 	andcc	r0, r1, #0
    1798:	000000b4 	strheq	r0, [r0], -r4
    179c:	00000000 	andeq	r0, r0, r0
    17a0:	00000012 	andeq	r0, r0, r2, lsl r0
    17a4:	05479c01 	strbeq	r9, [r7, #-3073]	; 0xc01
    17a8:	4f190000 	svcmi	0x00190000
    17ac:	0100000d 	tsteq	r0, sp
    17b0:	00003a32 	andeq	r3, r0, r2, lsr sl
    17b4:	0002dd00 	andeq	sp, r2, r0, lsl #26
    17b8:	69701700 	ldmdbvs	r0!, {r8, r9, sl, ip}^
    17bc:	3201006e 	andcc	r0, r1, #110	; 0x6e
    17c0:	0000005e 	andeq	r0, r0, lr, asr r0
    17c4:	000002fe 	strdeq	r0, [r0], -lr
    17c8:	0a9c1a00 	beq	fe707fd0 <BootRAM+0xd678771>
    17cc:	3b010000 	blcc	417d4 <__Stack_Size+0x413d4>
    17d0:	000000b4 	strheq	r0, [r0], -r4
    17d4:	0800063a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl}
    17d8:	00000004 	andeq	r0, r0, r4
    17dc:	056d9c01 	strbeq	r9, [sp, #-3073]!	; 0xc01
    17e0:	7e1b0000 	cdpvc	0, 1, cr0, cr11, cr0, {0}
    17e4:	0100000b 	tsteq	r0, fp
    17e8:	0000b43d 	andeq	fp, r0, sp, lsr r4
    17ec:	15000000 	strne	r0, [r0, #-0]
    17f0:	00000b52 	andeq	r0, r0, r2, asr fp
    17f4:	00004c01 	andeq	r4, r0, r1, lsl #24
    17f8:	00500000 	subseq	r0, r0, r0
    17fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1800:	00000636 	andeq	r0, r0, r6, lsr r6
    1804:	000d4f19 	andeq	r4, sp, r9, lsl pc
    1808:	3a4c0100 	bcc	1301c10 <__Stack_Size+0x1301810>
    180c:	1f000000 	svcne	0x00000000
    1810:	17000003 	strne	r0, [r0, -r3]
    1814:	006e6970 	rsbeq	r6, lr, r0, ror r9
    1818:	005e4c01 	subseq	r4, lr, r1, lsl #24
    181c:	033d0000 	teqeq	sp, #0
    1820:	ef190000 	svc	0x00190000
    1824:	0100000a 	tsteq	r0, sl
    1828:	00005e4c 	andeq	r5, r0, ip, asr #28
    182c:	00035e00 	andeq	r5, r3, r0, lsl #28
    1830:	0b4d1900 	bleq	1347c38 <__Stack_Size+0x1347838>
    1834:	4c010000 	stcmi	0, cr0, [r1], {-0}
    1838:	0000003a 	andeq	r0, r0, sl, lsr r0
    183c:	000003a6 	andeq	r0, r0, r6, lsr #7
    1840:	000aa416 	andeq	sl, sl, r6, lsl r4
    1844:	5e4c0100 	dvfple	f0, f4, f0
    1848:	02000000 	andeq	r0, r0, #0
    184c:	631c0091 	tstvs	ip, #145	; 0x91
    1850:	3a500100 	bcc	1401c58 <__Stack_Size+0x1401858>
    1854:	c4000000 	strgt	r0, [r0], #-0
    1858:	1d000003 	stcne	0, cr0, [r0, #-12]
    185c:	00000000 	andeq	r0, r0, r0
    1860:	000004ce 	andeq	r0, r0, lr, asr #9
    1864:	000005f9 	strdeq	r0, [r0], -r9
    1868:	0252011e 	subseq	r0, r2, #-2147483641	; 0x80000007
    186c:	011e0077 	tsteq	lr, r7, ror r0
    1870:	00790251 	rsbseq	r0, r9, r1, asr r2
    1874:	0250011e 	subseq	r0, r0, #-2147483641	; 0x80000007
    1878:	1d000078 	stcne	0, cr0, [r0, #-480]	; 0xfffffe20
    187c:	00000000 	andeq	r0, r0, r0
    1880:	000004ce 	andeq	r0, r0, lr, asr #9
    1884:	00000619 	andeq	r0, r0, r9, lsl r6
    1888:	0252011e 	subseq	r0, r2, #-2147483641	; 0x80000007
    188c:	011e007a 	tsteq	lr, sl, ror r0
    1890:	00790251 	rsbseq	r0, r9, r1, asr r2
    1894:	0250011e 	subseq	r0, r0, #-2147483641	; 0x80000007
    1898:	1f000078 	svcne	0x00000078
    189c:	00000000 	andeq	r0, r0, r0
    18a0:	000004ce 	andeq	r0, r0, lr, asr #9
    18a4:	0252011e 	subseq	r0, r2, #-2147483641	; 0x80000007
    18a8:	011e0077 	tsteq	lr, r7, ror r0
    18ac:	00790251 	rsbseq	r0, r9, r1, asr r2
    18b0:	0250011e 	subseq	r0, r0, #-2147483641	; 0x80000007
    18b4:	00000078 	andeq	r0, r0, r8, ror r0
    18b8:	000a9020 	andeq	r9, sl, r0, lsr #32
    18bc:	40620100 	rsbmi	r0, r2, r0, lsl #2
    18c0:	48080006 	stmdami	r8, {r1, r2}
    18c4:	01000000 	mrseq	r0, (UNDEF: 0)
    18c8:	0ab7159c 	beq	fedc6f40 <BootRAM+0xdd376e1>
    18cc:	6c010000 	stcvs	0, cr0, [r1], {-0}
    18d0:	08000688 	stmdaeq	r0, {r3, r7, r9, sl}
    18d4:	00000060 	andeq	r0, r0, r0, rrx
    18d8:	06699c01 	strbteq	r9, [r9], -r1, lsl #24
    18dc:	c61b0000 	ldrgt	r0, [fp], -r0
    18e0:	0100000c 	tsteq	r0, ip
    18e4:	0006696d 	andeq	r6, r6, sp, ror #18
    18e8:	02000000 	andeq	r0, r0, #0
    18ec:	07980704 	ldreq	r0, [r8, r4, lsl #14]
    18f0:	4a200000 	bmi	8018f8 <__Stack_Size+0x8014f8>
    18f4:	0100000a 	tsteq	r0, sl
    18f8:	0006e897 	muleq	r6, r7, r8
    18fc:	00000208 	andeq	r0, r0, r8, lsl #4
    1900:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    1904:	00000aac 	andeq	r0, r0, ip, lsr #21
    1908:	06eca401 	strbteq	sl, [ip], r1, lsl #8
    190c:	001c0800 	andseq	r0, ip, r0, lsl #16
    1910:	9c010000 	stcls	0, cr0, [r1], {-0}
    1914:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    1918:	0006f421 	andeq	pc, r6, r1, lsr #8
    191c:	00000808 	andeq	r0, r0, r8, lsl #16
    1920:	0b292200 	bleq	a4a128 <__Stack_Size+0xa49d28>
    1924:	a7010000 	strge	r0, [r1, -r0]
    1928:	0000003a 	andeq	r0, r0, sl, lsr r0
    192c:	000003ed 	andeq	r0, r0, sp, ror #7
    1930:	82180000 	andshi	r0, r8, #0
    1934:	0100000a 	tsteq	r0, sl
    1938:	0000b4b0 			; <UNDEFINED> instruction: 0x0000b4b0
    193c:	00070800 	andeq	r0, r7, r0, lsl #16
    1940:	00001408 	andeq	r1, r0, r8, lsl #8
    1944:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    1948:	19000006 	stmdbne	r0, {r1, r2}
    194c:	00000d66 	andeq	r0, r0, r6, ror #26
    1950:	003ab001 	eorseq	fp, sl, r1
    1954:	04000000 	streq	r0, [r0], #-0
    1958:	731c0000 	tstvc	ip, #0
    195c:	b1010070 	tstlt	r1, r0, ror r0
    1960:	0000003a 	andeq	r0, r0, sl, lsr r0
    1964:	00000421 	andeq	r0, r0, r1, lsr #8
    1968:	0b062300 	bleq	18a570 <__Stack_Size+0x18a170>
    196c:	ba010000 	blt	41974 <__Stack_Size+0x41574>
    1970:	0800071c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl}
    1974:	00000018 	andeq	r0, r0, r8, lsl r0
    1978:	07359c01 	ldreq	r9, [r5, -r1, lsl #24]!
    197c:	66190000 	ldrvs	r0, [r9], -r0
    1980:	0100000d 	tsteq	r0, sp
    1984:	00003aba 			; <UNDEFINED> instruction: 0x00003aba
    1988:	00043400 	andeq	r3, r4, r0, lsl #8
    198c:	0d5e0400 	cfldrdeq	mvd0, [lr, #-0]
    1990:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    1994:	000004bf 			; <UNDEFINED> instruction: 0x000004bf
    1998:	000bd822 	andeq	sp, fp, r2, lsr #16
    199c:	3abf0100 	bcc	fefc1da4 <BootRAM+0xdf32545>
    19a0:	55000000 	strpl	r0, [r0, #-0]
    19a4:	22000004 	andcs	r0, r0, #4
    19a8:	00000cf4 	strdeq	r0, [r0], -r4
    19ac:	070bc101 	streq	ip, [fp, -r1, lsl #2]
    19b0:	04550000 	ldrbeq	r0, [r5], #-0
    19b4:	15000000 	strne	r0, [r0, #-0]
    19b8:	00000d87 	andeq	r0, r0, r7, lsl #27
    19bc:	0734de01 	ldreq	sp, [r4, -r1, lsl #28]!
    19c0:	002c0800 	eoreq	r0, ip, r0, lsl #16
    19c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    19c8:	00000758 	andeq	r0, r0, r8, asr r7
    19cc:	000bcd16 	andeq	ip, fp, r6, lsl sp
    19d0:	4cde0100 	ldfmie	f0, [lr], {0}
    19d4:	01000000 	mrseq	r0, (UNDEF: 0)
    19d8:	5c1a0050 	ldcpl	0, cr0, [sl], {80}	; 0x50
    19dc:	0100000a 	tsteq	r0, sl
    19e0:	000790f0 	strdeq	r9, [r7], -r0
    19e4:	00076000 	andeq	r6, r7, r0
    19e8:	00004808 	andeq	r4, r0, r8, lsl #16
    19ec:	909c0100 	addsls	r0, ip, r0, lsl #2
    19f0:	22000007 	andcs	r0, r0, #7
    19f4:	00000ce2 	andeq	r0, r0, r2, ror #25
    19f8:	00b4f201 	adcseq	pc, r4, r1, lsl #4
    19fc:	04680000 	strbteq	r0, [r8], #-0
    1a00:	941f0000 	ldrls	r0, [pc], #-0	; 1a08 <__Stack_Size+0x1608>
    1a04:	35080007 	strcc	r0, [r8, #-7]
    1a08:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    1a0c:	30015001 	andcc	r5, r1, r1
    1a10:	04240000 	strteq	r0, [r4], #-0
    1a14:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    1a18:	071b2500 	ldreq	r2, [fp, -r0, lsl #10]
    1a1c:	0f010000 	svceq	0x00010000
    1a20:	0007a801 	andeq	sl, r7, r1, lsl #16
    1a24:	00006c08 	andeq	r6, r0, r8, lsl #24
    1a28:	2e9c0100 	fmlcse	f0, f4, f0
    1a2c:	26000008 	strcs	r0, [r0], -r8
    1a30:	00000bef 	andeq	r0, r0, pc, ror #23
    1a34:	2e010f01 	cdpcs	15, 0, cr0, cr1, cr1, {0}
    1a38:	01000008 	tsteq	r0, r8
    1a3c:	0d972750 	ldceq	7, cr2, [r7, #320]	; 0x140
    1a40:	10010000 	andne	r0, r1, r0
    1a44:	00003a01 	andeq	r3, r0, r1, lsl #20
    1a48:	00048700 	andeq	r8, r4, r0, lsl #14
    1a4c:	0b772700 	bleq	1dcb654 <__Stack_Size+0x1dcb254>
    1a50:	11010000 	mrsne	r0, (UNDEF: 1)
    1a54:	00003a01 	andeq	r3, r0, r1, lsl #20
    1a58:	0004f300 	andeq	pc, r4, r0, lsl #6
    1a5c:	0c042700 	stceq	7, cr2, [r4], {-0}
    1a60:	12010000 	andne	r0, r1, #0
    1a64:	00003a01 	andeq	r3, r0, r1, lsl #20
    1a68:	00052800 	andeq	r2, r5, r0, lsl #16
    1a6c:	0b8d2700 	bleq	fe34b674 <BootRAM+0xd2bbe15>
    1a70:	13010000 	movwne	r0, #4096	; 0x1000
    1a74:	00003a01 	andeq	r3, r0, r1, lsl #20
    1a78:	00056000 	andeq	r6, r5, r0
    1a7c:	0b222700 	bleq	88b684 <__Stack_Size+0x88b284>
    1a80:	14010000 	strne	r0, [r1], #-0
    1a84:	00003a01 	andeq	r3, r0, r1, lsl #20
    1a88:	00059d00 	andeq	r9, r5, r0, lsl #26
    1a8c:	0c6b2800 	stcleq	8, cr2, [fp], #-0
    1a90:	16010000 	strne	r0, [r1], -r0
    1a94:	00083401 	andeq	r3, r8, r1, lsl #8
    1a98:	83da8000 	bicshi	r8, sl, #0
    1a9c:	b1287e80 	smlawblt	r8, r0, lr, r7
    1aa0:	0100000b 	tsteq	r0, fp
    1aa4:	083a0117 	ldmdaeq	sl!, {r0, r1, r2, r4, r8}
    1aa8:	c2800000 	addgt	r0, r0, #0
    1aac:	007e8083 	rsbseq	r8, lr, r3, lsl #1
    1ab0:	02880413 	addeq	r0, r8, #318767104	; 0x13000000
    1ab4:	04130000 	ldreq	r0, [r3], #-0
    1ab8:	00000359 	andeq	r0, r0, r9, asr r3
    1abc:	02440413 	subeq	r0, r4, #318767104	; 0x13000000
    1ac0:	b7250000 	strlt	r0, [r5, -r0]!
    1ac4:	0100000b 	tsteq	r0, fp
    1ac8:	08140132 	ldmdaeq	r4, {r1, r4, r5, r8}
    1acc:	00240800 	eoreq	r0, r4, r0, lsl #16
    1ad0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ad4:	00000868 	andeq	r0, r0, r8, ror #16
    1ad8:	000bb128 	andeq	fp, fp, r8, lsr #2
    1adc:	01330100 	teqeq	r3, r0, lsl #2
    1ae0:	0000083a 	andeq	r0, r0, sl, lsr r8
    1ae4:	8083c280 	addhi	ip, r3, r0, lsl #5
    1ae8:	3f15007e 	svccc	0x0015007e
    1aec:	0100000a 	tsteq	r0, sl
    1af0:	000838cb 	andeq	r3, r8, fp, asr #17
    1af4:	00002808 	andeq	r2, r0, r8, lsl #16
    1af8:	d19c0100 	orrsle	r0, ip, r0, lsl #2
    1afc:	19000008 	stmdbne	r0, {r3}
    1b00:	00000d66 	andeq	r0, r0, r6, ror #26
    1b04:	003acb01 	eorseq	ip, sl, r1, lsl #22
    1b08:	05cb0000 	strbeq	r0, [fp]
    1b0c:	c5290000 	strgt	r0, [r9, #-0]!
    1b10:	3a000004 	bcc	1b28 <__Stack_Size+0x1728>
    1b14:	38080008 	stmdacc	r8, {r3}
    1b18:	01000001 	tsteq	r0, r1
    1b1c:	08462ad0 	stmdaeq	r6, {r4, r6, r7, r9, fp, sp}^
    1b20:	0abc0800 	beq	fef03b28 <BootRAM+0xde742c9>
    1b24:	4a2a0000 	bmi	a81b2c <__Stack_Size+0xa8172c>
    1b28:	40080008 	andmi	r0, r8, r8
    1b2c:	2a000008 	bcs	1b54 <__Stack_Size+0x1754>
    1b30:	0800084e 	stmdaeq	r0, {r1, r2, r3, r6, fp}
    1b34:	00000ac3 	andeq	r0, r0, r3, asr #21
    1b38:	0008522a 	andeq	r5, r8, sl, lsr #4
    1b3c:	00063608 	andeq	r3, r6, r8, lsl #12
    1b40:	085c2b00 	ldmdaeq	ip, {r8, r9, fp, sp}^
    1b44:	06e70800 	strbteq	r0, [r7], r0, lsl #16
    1b48:	011e0000 	tsteq	lr, r0
    1b4c:	01f30350 	mvnseq	r0, r0, asr r3
    1b50:	25000050 	strcs	r0, [r0, #-80]	; 0x50
    1b54:	00000ad9 	ldrdeq	r0, [r0], -r9
    1b58:	60013c01 	andvs	r3, r1, r1, lsl #24
    1b5c:	14080008 	strne	r0, [r8], #-8
    1b60:	01000000 	mrseq	r0, (UNDEF: 0)
    1b64:	0008f99c 	muleq	r8, ip, r9
    1b68:	0c6b2800 	stcleq	8, cr2, [fp], #-0
    1b6c:	3d010000 	stccc	0, cr0, [r1, #-0]
    1b70:	00083401 	andeq	r3, r8, r1, lsl #8
    1b74:	83da8000 	bicshi	r8, sl, #0
    1b78:	2c007e80 	stccs	14, cr7, [r0], {128}	; 0x80
    1b7c:	00000d78 	andeq	r0, r0, r8, ror sp
    1b80:	b4014801 	strlt	r4, [r1], #-2049	; 0x801
    1b84:	74000000 	strvc	r0, [r0], #-0
    1b88:	34080008 	strcc	r0, [r8], #-8
    1b8c:	01000000 	mrseq	r0, (UNDEF: 0)
    1b90:	0009349c 	muleq	r9, ip, r4
    1b94:	0b192d00 	bleq	64cf9c <__Stack_Size+0x64cb9c>
    1b98:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    1b9c:	00003a01 	andeq	r3, r0, r1, lsl #20
    1ba0:	00060200 	andeq	r0, r6, r0, lsl #4
    1ba4:	0b292700 	bleq	a4b7ac <__Stack_Size+0xa4b3ac>
    1ba8:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    1bac:	00003a01 	andeq	r3, r0, r1, lsl #20
    1bb0:	00062300 	andeq	r2, r6, r0, lsl #6
    1bb4:	3d2c0000 	stccc	0, cr0, [ip, #-0]
    1bb8:	0100000b 	tsteq	r0, fp
    1bbc:	00b40159 	adcseq	r0, r4, r9, asr r1
    1bc0:	00000000 	andeq	r0, r0, r0
    1bc4:	00300000 	eorseq	r0, r0, r0
    1bc8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bcc:	00000976 	andeq	r0, r0, r6, ror r9
    1bd0:	000b192d 	andeq	r1, fp, sp, lsr #18
    1bd4:	01590100 	cmpeq	r9, r0, lsl #2
    1bd8:	0000003a 	andeq	r0, r0, sl, lsr r0
    1bdc:	00000643 	andeq	r0, r0, r3, asr #12
    1be0:	01006e2e 	tsteq	r0, lr, lsr #28
    1be4:	004c0159 	subeq	r0, ip, r9, asr r1
    1be8:	066f0000 	strbteq	r0, [pc], -r0
    1bec:	002a0000 	eoreq	r0, sl, r0
    1bf0:	f9000000 			; <UNDEFINED> instruction: 0xf9000000
    1bf4:	00000008 	andeq	r0, r0, r8
    1bf8:	000d2b2c 	andeq	r2, sp, ip, lsr #22
    1bfc:	01630100 	cmneq	r3, r0, lsl #2
    1c00:	000000b4 	strheq	r0, [r0], -r4
    1c04:	080008a8 	stmdaeq	r0, {r3, r5, r7, fp}
    1c08:	0000004c 	andeq	r0, r0, ip, asr #32
    1c0c:	09ed9c01 	stmibeq	sp!, {r0, sl, fp, ip, pc}^
    1c10:	5c2d0000 	stcpl	0, cr0, [sp], #-0
    1c14:	0100000b 	tsteq	r0, fp
    1c18:	003a0163 	eorseq	r0, sl, r3, ror #2
    1c1c:	06b30000 	ldrteq	r0, [r3], r0
    1c20:	46260000 	strtmi	r0, [r6], -r0
    1c24:	0100000c 	tsteq	r0, ip
    1c28:	003a0163 	eorseq	r0, sl, r3, ror #2
    1c2c:	51010000 	mrspl	r0, (UNDEF: 1)
    1c30:	000d5427 	andeq	r5, sp, r7, lsr #8
    1c34:	01640100 	cmneq	r4, r0, lsl #2
    1c38:	000009ed 	andeq	r0, r0, sp, ror #19
    1c3c:	000006b3 			; <UNDEFINED> instruction: 0x000006b3
    1c40:	000c1f2f 	andeq	r1, ip, pc, lsr #30
    1c44:	01650100 	cmneq	r5, r0, lsl #2
    1c48:	0000006f 	andeq	r0, r0, pc, rrx
    1c4c:	2f689102 	svccs	0x00689102
    1c50:	00000da3 	andeq	r0, r0, r3, lsr #27
    1c54:	6f016601 	svcvs	0x00016601
    1c58:	02000000 	andeq	r0, r0, #0
    1c5c:	29276c91 	stmdbcs	r7!, {r0, r4, r7, sl, fp, sp, lr}
    1c60:	0100000b 	tsteq	r0, fp
    1c64:	003a0168 	eorseq	r0, sl, r8, ror #2
    1c68:	06d40000 	ldrbeq	r0, [r4], r0
    1c6c:	13000000 	movwne	r0, #0
    1c70:	00007f04 	andeq	r7, r0, r4, lsl #30
    1c74:	04c53000 	strbeq	r3, [r5], #0
    1c78:	08f40000 	ldmeq	r4!, {}^	; <UNPREDICTABLE>
    1c7c:	000c0800 	andeq	r0, ip, r0, lsl #16
    1c80:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c84:	000b9431 	andeq	r9, fp, r1, lsr r4
    1c88:	01850100 	orreq	r0, r5, r0, lsl #2
    1c8c:	08000900 	stmdaeq	r0, {r8, fp}
    1c90:	00000018 	andeq	r0, r0, r8, lsl r0
    1c94:	892c9c01 	stmdbhi	ip!, {r0, sl, fp, ip, pc}
    1c98:	01000002 	tsteq	r0, r2
    1c9c:	0669018d 	strbteq	r0, [r9], -sp, lsl #3
    1ca0:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
    1ca4:	00120800 	andseq	r0, r2, r0, lsl #16
    1ca8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1cac:	00000a4f 	andeq	r0, r0, pc, asr #20
    1cb0:	6e69702e 	cdpvs	0, 6, cr7, cr9, cr14, {1}
    1cb4:	018d0100 	orreq	r0, sp, r0, lsl #2
    1cb8:	00000790 	muleq	r0, r0, r7
    1cbc:	000006f2 	strdeq	r0, [r0], -r2
    1cc0:	000c0727 	andeq	r0, ip, r7, lsr #14
    1cc4:	018f0100 	orreq	r0, pc, r0, lsl #2
    1cc8:	00000669 	andeq	r0, r0, r9, ror #12
    1ccc:	00000710 	andeq	r0, r0, r0, lsl r7
    1cd0:	0ba02c00 	bleq	fe80ccd8 <BootRAM+0xd77d479>
    1cd4:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    1cd8:	00079001 	andeq	r9, r7, r1
    1cdc:	00092c00 	andeq	r2, r9, r0, lsl #24
    1ce0:	00001008 	andeq	r1, r0, r8
    1ce4:	7a9c0100 	bvc	fe7020ec <BootRAM+0xd67288d>
    1ce8:	3200000a 	andcc	r0, r0, #10
    1cec:	00000d3a 	andeq	r0, r0, sl, lsr sp
    1cf0:	7a019b01 	bvc	688fc <__Stack_Size+0x684fc>
    1cf4:	e000000a 	and	r0, r0, sl
    1cf8:	001ffff7 			; <UNDEFINED> instruction: 0x001ffff7
    1cfc:	00570413 	subseq	r0, r7, r3, lsl r4
    1d00:	c42c0000 	strtgt	r0, [ip], #-0
    1d04:	01000002 	tsteq	r0, r2
    1d08:	0790019f 			; <UNDEFINED> instruction: 0x0790019f
    1d0c:	093c0000 	ldmdbeq	ip!, {}	; <UNPREDICTABLE>
    1d10:	00180800 	andseq	r0, r8, r0, lsl #16
    1d14:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d18:	00000aab 	andeq	r0, r0, fp, lsr #21
    1d1c:	000d3a32 	andeq	r3, sp, r2, lsr sl
    1d20:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
    1d24:	00000a7a 	andeq	r0, r0, sl, ror sl
    1d28:	1ffff7e0 	svcne	0x00fff7e0
    1d2c:	04493300 	strbeq	r3, [r9], #-768	; 0x300
    1d30:	2c040000 	stccs	0, cr0, [r4], {-0}
    1d34:	00000790 	muleq	r0, r0, r7
    1d38:	02d00305 	sbcseq	r0, r0, #335544320	; 0x14000000
    1d3c:	de342000 	cdple	0, 3, cr2, cr4, cr0, {0}
    1d40:	04000003 	streq	r0, [r0], #-3
    1d44:	07f83480 	ldrbeq	r3, [r8, r0, lsl #9]!
    1d48:	52040000 	andpl	r0, r4, #0
    1d4c:	00068100 	andeq	r8, r6, r0, lsl #2
    1d50:	d9000400 	stmdble	r0, {sl}
    1d54:	04000008 	streq	r0, [r0], #-8
    1d58:	00015801 	andeq	r5, r1, r1, lsl #16
    1d5c:	0de20100 	stfeqe	f0, [r2]
    1d60:	037b0000 	cmneq	fp, #0
    1d64:	02180000 	andseq	r0, r8, #0
    1d68:	00000000 	andeq	r0, r0, r0
    1d6c:	088b0000 	stmeq	fp, {}	; <UNPREDICTABLE>
    1d70:	04020000 	streq	r0, [r2], #-0
    1d74:	0001f605 	andeq	pc, r1, r5, lsl #12
    1d78:	05020200 	streq	r0, [r2, #-512]	; 0x200
    1d7c:	000006a9 	andeq	r0, r0, r9, lsr #13
    1d80:	55060102 	strpl	r0, [r6, #-258]	; 0x102
    1d84:	03000006 	movweq	r0, #6
    1d88:	00323375 	eorseq	r3, r2, r5, ror r3
    1d8c:	00452702 	subeq	r2, r5, r2, lsl #14
    1d90:	04020000 	streq	r0, [r2], #-0
    1d94:	00079307 	andeq	r9, r7, r7, lsl #6
    1d98:	31750300 	cmncc	r5, r0, lsl #6
    1d9c:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    1da0:	00000057 	andeq	r0, r0, r7, asr r0
    1da4:	e8070202 	stmda	r7, {r1, r9}
    1da8:	03000003 	movweq	r0, #3
    1dac:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    1db0:	00006829 	andeq	r6, r0, r9, lsr #16
    1db4:	08010200 	stmdaeq	r1, {r9}
    1db8:	00000653 	andeq	r0, r0, r3, asr r6
    1dbc:	37020104 	strcc	r0, [r2, -r4, lsl #2]
    1dc0:	00000084 	andeq	r0, r0, r4, lsl #1
    1dc4:	0005e005 	andeq	lr, r5, r5
    1dc8:	4e050000 	cdpmi	0, 0, cr0, cr5, cr0, {0}
    1dcc:	01000007 	tsteq	r0, r7
    1dd0:	04440600 	strbeq	r0, [r4], #-1536	; 0x600
    1dd4:	37020000 	strcc	r0, [r2, -r0]
    1dd8:	0000006f 	andeq	r0, r0, pc, rrx
    1ddc:	005e0407 	subseq	r0, lr, r7, lsl #8
    1de0:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    1de4:	0c000009 	stceq	0, cr0, [r0], {9}
    1de8:	00d23803 	sbcseq	r3, r2, r3, lsl #16
    1dec:	90090000 	andls	r0, r9, r0
    1df0:	03000002 	movweq	r0, #2
    1df4:	00004c50 	andeq	r4, r0, r0, asr ip
    1df8:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    1dfc:	03000003 	movweq	r0, #3
    1e00:	00004c51 	andeq	r4, r0, r1, asr ip
    1e04:	a4090200 	strge	r0, [r9], #-512	; 0x200
    1e08:	03000015 	movweq	r0, #21
    1e0c:	00004c52 	andeq	r4, r0, r2, asr ip
    1e10:	e3090400 	movw	r0, #37888	; 0x9400
    1e14:	03000000 	movweq	r0, #0
    1e18:	0000e153 	andeq	lr, r0, r3, asr r1
    1e1c:	0a000800 	beq	3e24 <__Stack_Size+0x3a24>
    1e20:	0000008f 	andeq	r0, r0, pc, lsl #1
    1e24:	000000e1 	andeq	r0, r0, r1, ror #1
    1e28:	00004c0b 	andeq	r4, r0, fp, lsl #24
    1e2c:	04070000 	streq	r0, [r7], #-0
    1e30:	000000d2 	ldrdeq	r0, [r0], -r2
    1e34:	00090f06 	andeq	r0, r9, r6, lsl #30
    1e38:	95540300 	ldrbls	r0, [r4, #-768]	; 0x300
    1e3c:	0c000000 	stceq	0, cr0, [r0], {-0}
    1e40:	02005742 	andeq	r5, r0, #17301504	; 0x1080000
    1e44:	01166203 	tsteq	r6, r3, lsl #4
    1e48:	620d0000 	andvs	r0, sp, #0
    1e4c:	03003062 	movweq	r3, #98	; 0x62
    1e50:	00005e65 	andeq	r5, r0, r5, ror #28
    1e54:	620d0000 	andvs	r0, sp, #0
    1e58:	03003162 	movweq	r3, #354	; 0x162
    1e5c:	00005e66 	andeq	r5, r0, r6, ror #28
    1e60:	0e000100 	adfeqs	f0, f0, f0
    1e64:	325f0302 	subscc	r0, pc, #134217728	; 0x8000000
    1e68:	0f000001 	svceq	0x00000001
    1e6c:	61030077 	tstvs	r3, r7, ror r0
    1e70:	0000004c 	andeq	r0, r0, ip, asr #32
    1e74:	0077620f 	rsbseq	r6, r7, pc, lsl #4
    1e78:	00f26803 	rscseq	r6, r2, r3, lsl #16
    1e7c:	06000000 	streq	r0, [r0], -r0
    1e80:	00000410 	andeq	r0, r0, r0, lsl r4
    1e84:	01166903 	tsteq	r6, r3, lsl #18
    1e88:	3c080000 	stccc	0, cr0, [r8], {-0}
    1e8c:	1c000000 	stcne	0, cr0, [r0], {-0}
    1e90:	01ce6b03 	biceq	r6, lr, r3, lsl #22
    1e94:	61090000 	mrsvs	r0, (UNDEF: 9)
    1e98:	03000005 	movweq	r0, #5
    1e9c:	00005e6d 	andeq	r5, r0, sp, ror #28
    1ea0:	16090000 	strne	r0, [r9], -r0
    1ea4:	03000002 	movweq	r0, #2
    1ea8:	00005e6e 	andeq	r5, r0, lr, ror #28
    1eac:	29090100 	stmdbcs	r9, {r8}
    1eb0:	03000004 	movweq	r0, #4
    1eb4:	0001326f 	andeq	r3, r1, pc, ror #4
    1eb8:	48090200 	stmdami	r9, {r9}
    1ebc:	03000001 	movweq	r0, #1
    1ec0:	00013270 	andeq	r3, r1, r0, ror r2
    1ec4:	30090400 	andcc	r0, r9, r0, lsl #8
    1ec8:	03000008 	movweq	r0, #8
    1ecc:	00013271 	andeq	r3, r1, r1, ror r2
    1ed0:	3c090600 	stccc	6, cr0, [r9], {-0}
    1ed4:	03000009 	movweq	r0, #9
    1ed8:	00005e73 	andeq	r5, r0, r3, ror lr
    1edc:	b1090800 	tstlt	r9, r0, lsl #16
    1ee0:	03000003 	movweq	r0, #3
    1ee4:	00005e74 	andeq	r5, r0, r4, ror lr
    1ee8:	b2090900 	andlt	r0, r9, #0, 18
    1eec:	03000004 	movweq	r0, #4
    1ef0:	00005e75 	andeq	r5, r0, r5, ror lr
    1ef4:	85090a00 	strhi	r0, [r9, #-2560]	; 0xa00
    1ef8:	03000008 	movweq	r0, #8
    1efc:	00005e76 	andeq	r5, r0, r6, ror lr
    1f00:	2d090b00 	vstrcs	d0, [r9, #-0]
    1f04:	03000006 	movweq	r0, #6
    1f08:	00005e77 	andeq	r5, r0, r7, ror lr
    1f0c:	24090c00 	strcs	r0, [r9], #-3072	; 0xc00
    1f10:	03000007 	movweq	r0, #7
    1f14:	0000e77a 	andeq	lr, r0, sl, ror r7
    1f18:	06001000 	streq	r1, [r0], -r0
    1f1c:	0000003d 	andeq	r0, r0, sp, lsr r0
    1f20:	013d7b03 	teqeq	sp, r3, lsl #22
    1f24:	04020000 	streq	r0, [r2], #-0
    1f28:	00052607 	andeq	r2, r5, r7, lsl #12
    1f2c:	04010400 	streq	r0, [r1], #-1024	; 0x400
    1f30:	00020123 	andeq	r0, r2, r3, lsr #2
    1f34:	0e4d0500 	cdpeq	5, 4, cr0, cr13, cr0, {0}
    1f38:	05000000 	streq	r0, [r0, #-0]
    1f3c:	00000f68 	andeq	r0, r0, r8, ror #30
    1f40:	0dee0501 	cfstr64eq	mvdx0, [lr, #4]!
    1f44:	05020000 	streq	r0, [r2, #-0]
    1f48:	00000ed9 	ldrdeq	r0, [r0], -r9
    1f4c:	fd060003 	stc2	0, cr0, [r6, #-12]
    1f50:	0400000e 	streq	r0, [r0], #-14
    1f54:	0001e023 	andeq	lr, r1, r3, lsr #32
    1f58:	0e090800 	cdpeq	8, 0, cr0, cr9, cr0, {0}
    1f5c:	04060000 	streq	r0, [r6], #-0
    1f60:	00026129 	andeq	r6, r2, r9, lsr #2
    1f64:	0f960900 	svceq	0x00960900
    1f68:	2a040000 	bcs	101f70 <__Stack_Size+0x101b70>
    1f6c:	0000005e 	andeq	r0, r0, lr, asr r0
    1f70:	0e200900 	cdpeq	9, 2, cr0, cr0, cr0, {0}
    1f74:	2b040000 	blcs	101f7c <__Stack_Size+0x101b7c>
    1f78:	0000005e 	andeq	r0, r0, lr, asr r0
    1f7c:	0e2f0901 	cdpeq	9, 2, cr0, cr15, cr1, {0}
    1f80:	2c040000 	stccs	0, cr0, [r4], {-0}
    1f84:	0000005e 	andeq	r0, r0, lr, asr r0
    1f88:	0e3e0902 	cdpeq	9, 3, cr0, cr14, cr2, {0}
    1f8c:	2d040000 	stccs	0, cr0, [r4, #-0]
    1f90:	0000005e 	andeq	r0, r0, lr, asr r0
    1f94:	0f4f0903 	svceq	0x004f0903
    1f98:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    1f9c:	0000005e 	andeq	r0, r0, lr, asr r0
    1fa0:	0dcf0904 	stcleq	9, cr0, [pc, #16]	; 1fb8 <__Stack_Size+0x1bb8>
    1fa4:	2f040000 	svccs	0x00040000
    1fa8:	0000005e 	andeq	r0, r0, lr, asr r0
    1fac:	0a060005 	beq	181fc8 <__Stack_Size+0x181bc8>
    1fb0:	0400000e 	streq	r0, [r0], #-14
    1fb4:	00020c30 	andeq	r0, r2, r0, lsr ip
    1fb8:	0de81000 	stcleq	0, cr1, [r8]
    1fbc:	04010000 	streq	r0, [r1], #-0
    1fc0:	00029132 	andeq	r9, r2, r2, lsr r1
    1fc4:	0f770500 	svceq	0x00770500
    1fc8:	05000000 	streq	r0, [r0, #-0]
    1fcc:	00000faa 	andeq	r0, r0, sl, lsr #31
    1fd0:	4e451101 	dvfmis	f1, f5, f1
    1fd4:	05020044 	streq	r0, [r2, #-68]	; 0x44
    1fd8:	00000067 	andeq	r0, r0, r7, rrx
    1fdc:	e9060003 	stmdb	r6, {r0, r1}
    1fe0:	0400000d 	streq	r0, [r0], #-13
    1fe4:	00026c37 	andeq	r6, r2, r7, lsr ip
    1fe8:	00841200 	addeq	r1, r4, r0, lsl #4
    1fec:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    1ff0:	08000954 	stmdaeq	r0, {r2, r4, r6, r8, fp}
    1ff4:	0000005c 	andeq	r0, r0, ip, asr r0
    1ff8:	15139c01 	ldrne	r9, [r3, #-3073]	; 0xc01
    1ffc:	01000005 	tsteq	r0, r5
    2000:	09b0015b 	ldmibeq	r0!, {r0, r1, r3, r4, r6, r8}
    2004:	00440800 	subeq	r0, r4, r0, lsl #16
    2008:	9c010000 	stcls	0, cr0, [r1], {-0}
    200c:	000002ef 	andeq	r0, r0, pc, ror #5
    2010:	000f5d14 	andeq	r5, pc, r4, lsl sp	; <UNPREDICTABLE>
    2014:	015c0100 	cmpeq	ip, r0, lsl #2
    2018:	0000005e 	andeq	r0, r0, lr, asr r0
    201c:	00000742 	andeq	r0, r0, r2, asr #14
    2020:	0009cc15 	andeq	ip, r9, r5, lsl ip
    2024:	00060908 	andeq	r0, r6, r8, lsl #18
    2028:	09d41600 	ldmibeq	r4, {r9, sl, ip}^
    202c:	06110800 	ldreq	r0, [r1], -r0, lsl #16
    2030:	e8160000 	ldmda	r6, {}	; <UNPREDICTABLE>
    2034:	18080009 	stmdane	r8, {r0, r3}
    2038:	00000006 	andeq	r0, r0, r6
    203c:	000ec617 	andeq	ip, lr, r7, lsl r6
    2040:	01730100 	cmneq	r3, r0, lsl #2
    2044:	00000000 	andeq	r0, r0, r0
    2048:	00000002 	andeq	r0, r0, r2
    204c:	ab189c01 	blge	629058 <__Stack_Size+0x628c58>
    2050:	0100000e 	tsteq	r0, lr
    2054:	008f0176 	addeq	r0, pc, r6, ror r1	; <UNPREDICTABLE>
    2058:	09f40000 	ldmibeq	r4!, {}^	; <UNPREDICTABLE>
    205c:	00180800 	andseq	r0, r8, r0, lsl #16
    2060:	9c010000 	stcls	0, cr0, [r1], {-0}
    2064:	0000032c 	andeq	r0, r0, ip, lsr #6
    2068:	000f5619 	andeq	r5, pc, r9, lsl r6	; <UNPREDICTABLE>
    206c:	01760100 	cmneq	r6, r0, lsl #2
    2070:	0000004c 	andeq	r0, r0, ip, asr #32
    2074:	0000076b 	andeq	r0, r0, fp, ror #14
    2078:	0e8e1800 	cdpeq	8, 8, cr1, cr14, cr0, {0}
    207c:	7f010000 	svcvc	0x00010000
    2080:	00008f01 	andeq	r8, r0, r1, lsl #30
    2084:	000a0c00 	andeq	r0, sl, r0, lsl #24
    2088:	00001808 	andeq	r1, r0, r8, lsl #16
    208c:	579c0100 	ldrpl	r0, [ip, r0, lsl #2]
    2090:	19000003 	stmdbne	r0, {r0, r1}
    2094:	00000f56 	andeq	r0, r0, r6, asr pc
    2098:	4c017f01 	stcmi	15, cr7, [r1], {1}
    209c:	8c000000 	stchi	0, cr0, [r0], {-0}
    20a0:	00000007 	andeq	r0, r0, r7
    20a4:	000eb818 	andeq	fp, lr, r8, lsl r8
    20a8:	01890100 	orreq	r0, r9, r0, lsl #2
    20ac:	0000008f 	andeq	r0, r0, pc, lsl #1
    20b0:	08000a24 	stmdaeq	r0, {r2, r5, r9, fp}
    20b4:	00000028 	andeq	r0, r0, r8, lsr #32
    20b8:	03829c01 	orreq	r9, r2, #256	; 0x100
    20bc:	56190000 	ldrpl	r0, [r9], -r0
    20c0:	0100000f 	tsteq	r0, pc
    20c4:	004c0189 	subeq	r0, ip, r9, lsl #3
    20c8:	07ad0000 	streq	r0, [sp, r0]!
    20cc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    20d0:	00000e5d 	andeq	r0, r0, sp, asr lr
    20d4:	8f019301 	svchi	0x00019301
    20d8:	4c000000 	stcmi	0, cr0, [r0], {-0}
    20dc:	3408000a 	strcc	r0, [r8], #-10
    20e0:	01000000 	mrseq	r0, (UNDEF: 0)
    20e4:	0003ad9c 	muleq	r3, ip, sp
    20e8:	0f561900 	svceq	0x00561900
    20ec:	93010000 	movwls	r0, #4096	; 0x1000
    20f0:	00004c01 	andeq	r4, r0, r1, lsl #24
    20f4:	0007ce00 	andeq	ip, r7, r0, lsl #28
    20f8:	7a130000 	bvc	4c2100 <__Stack_Size+0x4c1d00>
    20fc:	0100000e 	tsteq	r0, lr
    2100:	0a80019c 	beq	fe002778 <BootRAM+0xcf72f19>
    2104:	005c0800 	subseq	r0, ip, r0, lsl #16
    2108:	9c010000 	stcls	0, cr0, [r1], {-0}
    210c:	00000405 	andeq	r0, r0, r5, lsl #8
    2110:	0100691a 	tsteq	r0, sl, lsl r9
    2114:	0405019d 	streq	r0, [r5], #-413	; 0x19d
    2118:	07ef0000 	strbeq	r0, [pc, r0]!
    211c:	811b0000 	tsthi	fp, r0
    2120:	0100000f 	tsteq	r0, pc
    2124:	040c019e 	streq	r0, [ip], #-414	; 0x19e
    2128:	a01c0000 	andsge	r0, ip, r0
    212c:	1f08000a 	svcne	0x0008000a
    2130:	f1000006 	cps	#6
    2134:	1d000003 	stcne	0, cr0, [r0, #-12]
    2138:	74025001 	strvc	r5, [r2], #-1
    213c:	b61e0000 	ldrlt	r0, [lr], -r0
    2140:	3508000a 	strcc	r0, [r8, #-10]
    2144:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    2148:	74055001 	strvc	r5, [r5], #-1
    214c:	22007500 	andcs	r7, r0, #0, 10
    2150:	041f0000 	ldreq	r0, [pc], #-0	; 2158 <__Stack_Size+0x1d58>
    2154:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    2158:	3a040700 	bcc	103d60 <__Stack_Size+0x103960>
    215c:	20000000 	andcs	r0, r0, r0
    2160:	00000325 	andeq	r0, r0, r5, lsr #6
    2164:	00844b01 	addeq	r4, r4, r1, lsl #22
    2168:	0adc0000 	beq	ff702170 <BootRAM+0xe672911>
    216c:	023c0800 	eorseq	r0, ip, #0, 16
    2170:	9c010000 	stcls	0, cr0, [r1], {-0}
    2174:	000004a6 	andeq	r0, r0, r6, lsr #9
    2178:	000f5d21 	andeq	r5, pc, r1, lsr #26
    217c:	5e520100 	rdfpls	f0, f2, f0
    2180:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2184:	15000008 	strne	r0, [r0, #-8]
    2188:	08000b2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, fp}
    218c:	00000650 	andeq	r0, r0, r0, asr r6
    2190:	000b2e15 	andeq	r2, fp, r5, lsl lr
    2194:	00065708 	andeq	r5, r6, r8, lsl #14
    2198:	0b3e1500 	bleq	f875a0 <__Stack_Size+0xf871a0>
    219c:	06500800 	ldrbeq	r0, [r0], -r0, lsl #16
    21a0:	42150000 	andsmi	r0, r5, #0
    21a4:	5708000b 	strpl	r0, [r8, -fp]
    21a8:	1c000006 	stcne	0, cr0, [r0], {6}
    21ac:	08000b48 	stmdaeq	r0, {r3, r6, r8, r9, fp}
    21b0:	0000061f 	andeq	r0, r0, pc, lsl r6
    21b4:	00000475 	andeq	r0, r0, r5, ror r4
    21b8:	0550011d 	ldrbeq	r0, [r0, #-285]	; 0x11d
    21bc:	0020000c 	eoreq	r0, r0, ip
    21c0:	501c0008 	andspl	r0, ip, r8
    21c4:	5f08000b 	svcpl	0x0008000b
    21c8:	8a000006 	bhi	21e8 <__Stack_Size+0x1de8>
    21cc:	1d000004 	stcne	0, cr0, [r0, #-16]
    21d0:	0a035001 	beq	d61dc <__Stack_Size+0xd5ddc>
    21d4:	1500424d 	strne	r4, [r0, #-589]	; 0x24d
    21d8:	08000b90 	stmdaeq	r0, {r4, r7, r8, r9, fp}
    21dc:	00000670 	andeq	r0, r0, r0, ror r6
    21e0:	000bc015 	andeq	ip, fp, r5, lsl r0
    21e4:	0003ad08 	andeq	sl, r3, r8, lsl #26
    21e8:	0bfc1500 	bleq	fff075f0 <BootRAM+0xee77d91>
    21ec:	067c0800 	ldrbteq	r0, [ip], -r0, lsl #16
    21f0:	22000000 	andcs	r0, r0, #0
    21f4:	00000fb1 			; <UNDEFINED> instruction: 0x00000fb1
    21f8:	5e01c401 	cdppl	4, 0, cr12, cr1, cr1, {0}
    21fc:	00000000 	andeq	r0, r0, r0
    2200:	0c000000 	stceq	0, cr0, [r0], {-0}
    2204:	01000000 	mrseq	r0, (UNDEF: 0)
    2208:	0f9e139c 	svceq	0x009e139c
    220c:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    2210:	00000001 	andeq	r0, r0, r1
    2214:	00000c00 	andeq	r0, r0, r0, lsl #24
    2218:	e19c0100 	orrs	r0, ip, r0, lsl #2
    221c:	23000004 	movwcs	r0, #4
    2220:	00000ef4 	strdeq	r0, [r0], -r4
    2224:	5e01c801 	cdppl	8, 0, cr12, cr1, cr1, {0}
    2228:	01000000 	mrseq	r0, (UNDEF: 0)
    222c:	f5240050 			; <UNDEFINED> instruction: 0xf5240050
    2230:	0100000a 	tsteq	r0, sl
    2234:	008401cc 	addeq	r0, r4, ip, asr #3
    2238:	0d180000 	ldceq	0, cr0, [r8, #-0]
    223c:	000c0800 	andeq	r0, ip, r0, lsl #16
    2240:	9c010000 	stcls	0, cr0, [r1], {-0}
    2244:	000a2f25 	andeq	r2, sl, r5, lsr #30
    2248:	01d00100 	bicseq	r0, r0, r0, lsl #2
    224c:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
    2250:	00000004 	andeq	r0, r0, r4
    2254:	14269c01 	strtne	r9, [r6], #-3073	; 0xc01
    2258:	0100000e 	tsteq	r0, lr
    225c:	00051a26 	andeq	r1, r5, r6, lsr #20
    2260:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
    2264:	27200002 	strcs	r0, [r0, -r2]!
    2268:	0000003a 	andeq	r0, r0, sl, lsr r0
    226c:	000f8b26 	andeq	r8, pc, r6, lsr #22
    2270:	1a270100 	bne	9c2678 <__Stack_Size+0x9c2278>
    2274:	05000005 	streq	r0, [r0, #-5]
    2278:	0002c803 	andeq	ip, r2, r3, lsl #16
    227c:	0f0e2620 	svceq	0x000e2620
    2280:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    2284:	00000541 	andeq	r0, r0, r1, asr #10
    2288:	0b250305 	bleq	942ea4 <__Stack_Size+0x942aa4>
    228c:	61272000 	teqvs	r7, r0
    2290:	28000002 	stmdacs	r0, {r1}
    2294:	0000005e 	andeq	r0, r0, lr, asr r0
    2298:	00000557 	andeq	r0, r0, r7, asr r5
    229c:	0001d929 	andeq	sp, r1, r9, lsr #18
    22a0:	0007ff00 	andeq	pc, r7, r0, lsl #30
    22a4:	000dd726 	andeq	sp, sp, r6, lsr #14
    22a8:	682e0100 	stmdavs	lr!, {r8}
    22ac:	05000005 	streq	r0, [r0, #-5]
    22b0:	00031c03 	andeq	r1, r3, r3, lsl #24
    22b4:	05462720 	strbeq	r2, [r6, #-1824]	; 0x720
    22b8:	37260000 	strcc	r0, [r6, -r0]!
    22bc:	0100000f 	tsteq	r0, pc
    22c0:	00051a30 	andeq	r1, r5, r0, lsr sl
    22c4:	20030500 	andcs	r0, r3, r0, lsl #10
    22c8:	2620000b 	strtcs	r0, [r0], -fp
    22cc:	00000f2a 	andeq	r0, r0, sl, lsr #30
    22d0:	058f3101 	streq	r3, [pc, #257]	; 23d9 <__Stack_Size+0x1fd9>
    22d4:	03050000 	movweq	r0, #20480	; 0x5000
    22d8:	20000b1e 	andcs	r0, r0, lr, lsl fp
    22dc:	00004c27 	andeq	r4, r0, r7, lsr #24
    22e0:	0f1b2600 	svceq	0x001b2600
    22e4:	32010000 	andcc	r0, r1, #0
    22e8:	0000058f 	andeq	r0, r0, pc, lsl #11
    22ec:	0b1c0305 	bleq	702f08 <__Stack_Size+0x702b08>
    22f0:	7c2a2000 	stcvc	0, cr2, [sl], #-0
    22f4:	05000002 	streq	r0, [r0, #-2]
    22f8:	0005b022 	andeq	fp, r5, r2, lsr #32
    22fc:	ce040700 	cdpgt	7, 0, cr0, cr4, cr0, {0}
    2300:	2b000001 	blcs	230c <__Stack_Size+0x1f0c>
    2304:	00000449 	andeq	r0, r0, r9, asr #8
    2308:	04052c06 	streq	r2, [r5], #-3078	; 0xc06
    230c:	03050000 	movweq	r0, #20480	; 0x5000
    2310:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    2314:	000f472b 	andeq	r4, pc, fp, lsr #14
    2318:	d82a0100 	stmdale	sl!, {r8}
    231c:	05000005 	streq	r0, [r0, #-5]
    2320:	000b2b03 	andeq	r2, fp, r3, lsl #22
    2324:	00842720 	addeq	r2, r4, r0, lsr #14
    2328:	6b2b0000 	blvs	ac2330 <__Stack_Size+0xac1f30>
    232c:	0100000e 	tsteq	r0, lr
    2330:	0005ee29 	andeq	lr, r5, r9, lsr #28
    2334:	24030500 	strcs	r0, [r3], #-1280	; 0x500
    2338:	2720000b 	strcs	r0, [r0, -fp]!
    233c:	00000201 	andeq	r0, r0, r1, lsl #4
    2340:	000e9c2b 	andeq	r9, lr, fp, lsr #24
    2344:	04350100 	ldrteq	r0, [r5], #-256	; 0x100
    2348:	05000006 	streq	r0, [r0, #-6]
    234c:	0002d803 	andeq	sp, r2, r3, lsl #16
    2350:	02912720 	addseq	r2, r1, #32, 14	; 0x800000
    2354:	b72c0000 	strlt	r0, [ip, -r0]!
    2358:	0700000b 	streq	r0, [r0, -fp]
    235c:	562d0107 	strtpl	r0, [sp], -r7, lsl #2
    2360:	06000000 	streq	r0, [r0], -r0
    2364:	0ad92d81 	beq	ff64d970 <BootRAM+0xe5be111>
    2368:	f8070000 			; <UNDEFINED> instruction: 0xf8070000
    236c:	000d782e 	andeq	r7, sp, lr, lsr #16
    2370:	01020700 	tsteq	r2, r0, lsl #14
    2374:	00000084 	andeq	r0, r0, r4, lsl #1
    2378:	00000635 	andeq	r0, r0, r5, lsr r6
    237c:	00003a0b 	andeq	r3, r0, fp, lsl #20
    2380:	2b2e0000 	blcs	b82388 <__Stack_Size+0xb81f88>
    2384:	0700000d 	streq	r0, [r0, -sp]
    2388:	00840101 	addeq	r0, r4, r1, lsl #2
    238c:	06500000 	ldrbeq	r0, [r0], -r0
    2390:	3a0b0000 	bcc	2c2398 <__Stack_Size+0x2c1f98>
    2394:	0b000000 	bleq	239c <__Stack_Size+0x1f9c>
    2398:	0000003a 	andeq	r0, r0, sl, lsr r0
    239c:	0aac2d00 	beq	feb0d7a4 <BootRAM+0xda7df45>
    23a0:	fc070000 	stc2	0, cr0, [r7], {-0}
    23a4:	000b942c 	andeq	r9, fp, ip, lsr #8
    23a8:	01050700 	tsteq	r5, r0, lsl #14
    23ac:	000d872f 	andeq	r8, sp, pc, lsr #14
    23b0:	70ee0700 	rscvc	r0, lr, r0, lsl #14
    23b4:	0b000006 	bleq	23d4 <__Stack_Size+0x1fd4>
    23b8:	0000004c 	andeq	r0, r0, ip, asr #32
    23bc:	0ba03000 	bleq	fe80e3c4 <BootRAM+0xd77eb65>
    23c0:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    23c4:	00040501 	andeq	r0, r4, r1, lsl #10
    23c8:	0c262c00 	stceq	12, cr2, [r6], #-0
    23cc:	04070000 	streq	r0, [r7], #-0
    23d0:	0c880001 	stceq	0, cr0, [r8], {1}
    23d4:	00040000 	andeq	r0, r4, r0
    23d8:	00000bc2 	andeq	r0, r0, r2, asr #23
    23dc:	01580104 	cmpeq	r8, r4, lsl #2
    23e0:	32010000 	andcc	r0, r1, #0
    23e4:	7b000011 	blvc	2430 <__Stack_Size+0x2030>
    23e8:	38000003 	stmdacc	r0, {r0, r1}
    23ec:	00000003 	andeq	r0, r0, r3
    23f0:	bd000000 	stclt	0, cr0, [r0, #-0]
    23f4:	0200000a 	andeq	r0, r0, #10
    23f8:	01f60504 	mvnseq	r0, r4, lsl #10
    23fc:	02020000 	andeq	r0, r2, #0
    2400:	0006a905 	andeq	sl, r6, r5, lsl #18
    2404:	06010200 	streq	r0, [r1], -r0, lsl #4
    2408:	00000655 	andeq	r0, r0, r5, asr r6
    240c:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    2410:	45240200 	strmi	r0, [r4, #-512]!	; 0x200
    2414:	02000000 	andeq	r0, r0, #0
    2418:	07930704 	ldreq	r0, [r3, r4, lsl #14]
    241c:	75030000 	strvc	r0, [r3, #-0]
    2420:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    2424:	00005725 	andeq	r5, r0, r5, lsr #14
    2428:	07020200 	streq	r0, [r2, -r0, lsl #4]
    242c:	000003e8 	andeq	r0, r0, r8, ror #7
    2430:	00387503 	eorseq	r7, r8, r3, lsl #10
    2434:	00682602 	rsbeq	r2, r8, r2, lsl #12
    2438:	01020000 	mrseq	r0, (UNDEF: 2)
    243c:	00065308 	andeq	r5, r6, r8, lsl #6
    2440:	10450400 	subne	r0, r5, r0, lsl #8
    2444:	03010000 	movweq	r0, #4096	; 0x1000
    2448:	00008e16 	andeq	r8, r0, r6, lsl lr
    244c:	11450500 	cmpne	r5, r0, lsl #10
    2450:	05000000 	streq	r0, [r0, #-0]
    2454:	00001010 	andeq	r1, r0, r0, lsl r0
    2458:	10ec0501 	rscne	r0, ip, r1, lsl #10
    245c:	00020000 	andeq	r0, r2, r0
    2460:	00104606 	andseq	r4, r0, r6, lsl #12
    2464:	6f1c0300 	svcvs	0x001c0300
    2468:	07000000 	streq	r0, [r0, -r0]
    246c:	00001221 	andeq	r1, r0, r1, lsr #4
    2470:	004c9b01 	subeq	r9, ip, r1, lsl #22
    2474:	b5010000 	strlt	r0, [r1, #-0]
    2478:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    247c:	00001337 	andeq	r1, r0, r7, lsr r3
    2480:	005e9b01 	subseq	r9, lr, r1, lsl #22
    2484:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2488:	00001278 	andeq	r1, r0, r8, ror r2
    248c:	00002201 	andeq	r2, r0, r1, lsl #4
    2490:	000c0000 	andeq	r0, ip, r0
    2494:	9c010000 	stcls	0, cr0, [r1], {-0}
    2498:	000000d8 	ldrdeq	r0, [r0], -r8
    249c:	0012170a 	andseq	r1, r2, sl, lsl #14
    24a0:	4c220100 	stfmis	f0, [r2], #-0
    24a4:	01000000 	mrseq	r0, (UNDEF: 0)
    24a8:	7f0b0050 	svcvc	0x000b0050
    24ac:	01000010 	tsteq	r0, r0, lsl r0
    24b0:	00004c2e 	andeq	r4, r0, lr, lsr #24
    24b4:	00000000 	andeq	r0, r0, r0
    24b8:	00000c00 	andeq	r0, r0, r0, lsl #24
    24bc:	099c0100 	ldmibeq	ip, {r8}
    24c0:	00001058 	andeq	r1, r0, r8, asr r0
    24c4:	00003a01 	andeq	r3, r0, r1, lsl #20
    24c8:	000c0000 	andeq	r0, ip, r0
    24cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    24d0:	00000110 	andeq	r0, r0, r0, lsl r1
    24d4:	0012170a 	andseq	r1, r2, sl, lsl #14
    24d8:	4c3a0100 	ldfmis	f0, [sl], #-0
    24dc:	01000000 	mrseq	r0, (UNDEF: 0)
    24e0:	0f0b0050 	svceq	0x000b0050
    24e4:	01000012 	tsteq	r0, r2, lsl r0
    24e8:	00004c46 	andeq	r4, r0, r6, asr #24
    24ec:	00000000 	andeq	r0, r0, r0
    24f0:	00000c00 	andeq	r0, r0, r0, lsl #24
    24f4:	0b9c0100 	bleq	fe7028fc <BootRAM+0xd67309d>
    24f8:	000012e3 	andeq	r1, r0, r3, ror #5
    24fc:	004c5201 	subeq	r5, ip, r1, lsl #4
    2500:	00000000 	andeq	r0, r0, r0
    2504:	000c0000 	andeq	r0, ip, r0
    2508:	9c010000 	stcls	0, cr0, [r1], {-0}
    250c:	00124509 	andseq	r4, r2, r9, lsl #10
    2510:	005e0100 	subseq	r0, lr, r0, lsl #2
    2514:	0c000000 	stceq	0, cr0, [r0], {-0}
    2518:	01000000 	mrseq	r0, (UNDEF: 0)
    251c:	00015d9c 	muleq	r1, ip, sp
    2520:	12170a00 	andsne	r0, r7, #0, 20
    2524:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    2528:	0000004c 	andeq	r0, r0, ip, asr #32
    252c:	0b005001 	bleq	16538 <__Stack_Size+0x16138>
    2530:	00001098 	muleq	r0, r8, r0
    2534:	004c6a01 	subeq	r6, ip, r1, lsl #20
    2538:	00000000 	andeq	r0, r0, r0
    253c:	000c0000 	andeq	r0, ip, r0
    2540:	9c010000 	stcls	0, cr0, [r1], {-0}
    2544:	00128009 	andseq	r8, r2, r9
    2548:	00760100 	rsbseq	r0, r6, r0, lsl #2
    254c:	10000000 	andne	r0, r0, r0
    2550:	01000000 	mrseq	r0, (UNDEF: 0)
    2554:	0001959c 	muleq	r1, ip, r5
    2558:	12170a00 	andsne	r0, r7, #0, 20
    255c:	76010000 	strvc	r0, [r1], -r0
    2560:	0000004c 	andeq	r0, r0, ip, asr #32
    2564:	0b005001 	bleq	16570 <__Stack_Size+0x16170>
    2568:	00001205 	andeq	r1, r0, r5, lsl #4
    256c:	004c8201 	subeq	r8, ip, r1, lsl #4
    2570:	00000000 	andeq	r0, r0, r0
    2574:	000c0000 	andeq	r0, ip, r0
    2578:	9c010000 	stcls	0, cr0, [r1], {-0}
    257c:	00133e09 	andseq	r3, r3, r9, lsl #28
    2580:	008f0100 	addeq	r0, pc, r0, lsl #2
    2584:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2588:	01000000 	mrseq	r0, (UNDEF: 0)
    258c:	0001dc9c 	muleq	r1, ip, ip
    2590:	13370c00 	teqne	r7, #0, 24
    2594:	8f010000 	svchi	0x00010000
    2598:	0000005e 	andeq	r0, r0, lr, asr r0
    259c:	00000884 	andeq	r0, r0, r4, lsl #17
    25a0:	0012170a 	andseq	r1, r2, sl, lsl #14
    25a4:	4c8f0100 	stfmis	f0, [pc], {0}
    25a8:	01000000 	mrseq	r0, (UNDEF: 0)
    25ac:	990d0051 	stmdbls	sp, {r0, r4, r6}
    25b0:	00000000 	andeq	r0, r0, r0
    25b4:	10000000 	andne	r0, r0, r0
    25b8:	01000000 	mrseq	r0, (UNDEF: 0)
    25bc:	0001f99c 	muleq	r1, ip, r9
    25c0:	00a90e00 	adceq	r0, r9, r0, lsl #28
    25c4:	08a50000 	stmiaeq	r5!, {}	; <UNPREDICTABLE>
    25c8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    25cc:	000010e2 	andeq	r1, r0, r2, ror #1
    25d0:	0000a801 	andeq	sl, r0, r1, lsl #16
    25d4:	001c0000 	andseq	r0, ip, r0
    25d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    25dc:	0000022d 	andeq	r0, r0, sp, lsr #4
    25e0:	0013370c 	andseq	r3, r3, ip, lsl #14
    25e4:	5ea80100 	fdvple	f0, f0, f0
    25e8:	c6000000 	strgt	r0, [r0], -r0
    25ec:	0c000008 	stceq	0, cr0, [r0], {8}
    25f0:	0000112c 	andeq	r1, r0, ip, lsr #2
    25f4:	004ca801 	subeq	sl, ip, r1, lsl #16
    25f8:	08e70000 	stmiaeq	r7!, {}^	; <UNPREDICTABLE>
    25fc:	0f000000 	svceq	0x00000000
    2600:	000011b5 			; <UNDEFINED> instruction: 0x000011b5
    2604:	004cb401 	subeq	fp, ip, r1, lsl #8
    2608:	00000000 	andeq	r0, r0, r0
    260c:	00120000 	andseq	r0, r2, r0
    2610:	9c010000 	stcls	0, cr0, [r1], {-0}
    2614:	00000256 	andeq	r0, r0, r6, asr r2
    2618:	0013370c 	andseq	r3, r3, ip, lsl #14
    261c:	5eb40100 	frdpls	f0, f4, f0
    2620:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2624:	00000009 	andeq	r0, r0, r9
    2628:	00132909 	andseq	r2, r3, r9, lsl #18
    262c:	28c10100 	stmiacs	r1, {r8}^
    2630:	2a08000d 	bcs	20266c <__Stack_Size+0x20226c>
    2634:	01000000 	mrseq	r0, (UNDEF: 0)
    2638:	00029f9c 	muleq	r2, ip, pc	; <UNPREDICTABLE>
    263c:	13370c00 	teqne	r7, #0, 24
    2640:	c1010000 	mrsgt	r0, (UNDEF: 1)
    2644:	0000005e 	andeq	r0, r0, lr, asr r0
    2648:	00000929 	andeq	r0, r0, r9, lsr #18
    264c:	000ef60a 	andeq	pc, lr, sl, lsl #12
    2650:	4cc10100 	stfmie	f0, [r1], {0}
    2654:	01000000 	mrseq	r0, (UNDEF: 0)
    2658:	0d281051 	stceq	0, cr1, [r8, #-324]!	; 0xfffffebc
    265c:	002a0800 	eoreq	r0, sl, r0, lsl #16
    2660:	6c110000 	ldcvs	0, cr0, [r1], {-0}
    2664:	01000004 	tsteq	r0, r4
    2668:	00004cc3 	andeq	r4, r0, r3, asr #25
    266c:	00530100 	subseq	r0, r3, r0, lsl #2
    2670:	10b50900 	adcsne	r0, r5, r0, lsl #18
    2674:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    2678:	00000000 	andeq	r0, r0, r0
    267c:	0000002a 	andeq	r0, r0, sl, lsr #32
    2680:	02e89c01 	rsceq	r9, r8, #256	; 0x100
    2684:	370c0000 	strcc	r0, [ip, -r0]
    2688:	01000013 	tsteq	r0, r3, lsl r0
    268c:	00005ece 	andeq	r5, r0, lr, asr #29
    2690:	00094a00 	andeq	r4, r9, r0, lsl #20
    2694:	0ef60a00 	vmoveq.f32	s1, #96	; 0x60
    2698:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    269c:	0000004c 	andeq	r0, r0, ip, asr #32
    26a0:	00105101 	andseq	r5, r0, r1, lsl #2
    26a4:	2a000000 	bcs	26ac <__Stack_Size+0x22ac>
    26a8:	11000000 	mrsne	r0, (UNDEF: 0)
    26ac:	0000046c 	andeq	r0, r0, ip, ror #8
    26b0:	004cd001 	subeq	sp, ip, r1
    26b4:	53010000 	movwpl	r0, #4096	; 0x1000
    26b8:	fb090000 	blx	2426c2 <__Stack_Size+0x2422c2>
    26bc:	0100000f 	tsteq	r0, pc
    26c0:	000000db 	ldrdeq	r0, [r0], -fp
    26c4:	00002400 	andeq	r2, r0, r0, lsl #8
    26c8:	3e9c0100 	fmlcce	f0, f4, f0
    26cc:	0c000003 	stceq	0, cr0, [r0], {3}
    26d0:	00001337 	andeq	r1, r0, r7, lsr r3
    26d4:	005edb01 	subseq	sp, lr, r1, lsl #22
    26d8:	096b0000 	stmdbeq	fp!, {}^	; <UNPREDICTABLE>
    26dc:	270a0000 	strcs	r0, [sl, -r0]
    26e0:	01000011 	tsteq	r0, r1, lsl r0
    26e4:	00005edb 	ldrdeq	r5, [r0], -fp
    26e8:	12510100 	subsne	r0, r1, #0, 2
    26ec:	000012fb 	strdeq	r1, [r0], -fp
    26f0:	004cdd01 	subeq	sp, ip, r1, lsl #26
    26f4:	99130000 	ldmdbls	r3, {}	; <UNPREDICTABLE>
    26f8:	00000000 	andeq	r0, r0, r0
    26fc:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    2700:	01000002 	tsteq	r0, r2
    2704:	00a90ede 	ldrdeq	r0, [r9], lr	; <UNPREDICTABLE>
    2708:	096b0000 	stmdbeq	fp!, {}^	; <UNPREDICTABLE>
    270c:	00000000 	andeq	r0, r0, r0
    2710:	0011190f 	andseq	r1, r1, pc, lsl #18
    2714:	4cf00100 	ldfmie	f0, [r0]
    2718:	00000000 	andeq	r0, r0, r0
    271c:	12000000 	andne	r0, r0, #0
    2720:	01000000 	mrseq	r0, (UNDEF: 0)
    2724:	0003679c 	muleq	r3, ip, r7
    2728:	13370c00 	teqne	r7, #0, 24
    272c:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    2730:	0000005e 	andeq	r0, r0, lr, asr r0
    2734:	0000098c 	andeq	r0, r0, ip, lsl #19
    2738:	101c0f00 	andsne	r0, ip, r0, lsl #30
    273c:	fc010000 	stc2	0, cr0, [r1], {-0}
    2740:	0000004c 	andeq	r0, r0, ip, asr #32
    2744:	00000000 	andeq	r0, r0, r0
    2748:	00000012 	andeq	r0, r0, r2, lsl r0
    274c:	03909c01 	orrseq	r9, r0, #256	; 0x100
    2750:	370c0000 	strcc	r0, [ip, -r0]
    2754:	01000013 	tsteq	r0, r3, lsl r0
    2758:	00005efc 	strdeq	r5, [r0], -ip
    275c:	0009ad00 	andeq	sl, r9, r0, lsl #26
    2760:	ee140000 	cdp	0, 1, cr0, cr4, cr0, {0}
    2764:	0100000f 	tsteq	r0, pc
    2768:	00000108 	andeq	r0, r0, r8, lsl #2
    276c:	001e0000 	andseq	r0, lr, r0
    2770:	9c010000 	stcls	0, cr0, [r1], {-0}
    2774:	000003d1 	ldrdeq	r0, [r0], -r1
    2778:	00133715 	andseq	r3, r3, r5, lsl r7
    277c:	01080100 	mrseq	r0, (UNDEF: 24)
    2780:	0000005e 	andeq	r0, r0, lr, asr r0
    2784:	000009ce 	andeq	r0, r0, lr, asr #19
    2788:	00000010 	andeq	r0, r0, r0, lsl r0
    278c:	00001e00 	andeq	r1, r0, r0, lsl #28
    2790:	046c1600 	strbteq	r1, [ip], #-1536	; 0x600
    2794:	0a010000 	beq	4279c <__Stack_Size+0x4239c>
    2798:	00004c01 	andeq	r4, r0, r1, lsl #24
    279c:	0009ef00 	andeq	lr, r9, r0, lsl #30
    27a0:	14000000 	strne	r0, [r0], #-0
    27a4:	00000955 	andeq	r0, r0, r5, asr r9
    27a8:	52011401 	andpl	r1, r1, #16777216	; 0x1000000
    27ac:	1e08000d 	cdpne	0, 0, cr0, cr8, cr13, {0}
    27b0:	01000000 	mrseq	r0, (UNDEF: 0)
    27b4:	0004129c 	muleq	r4, ip, r2
    27b8:	13371500 	teqne	r7, #0, 10
    27bc:	14010000 	strne	r0, [r1], #-0
    27c0:	00005e01 	andeq	r5, r0, r1, lsl #28
    27c4:	000a1a00 	andeq	r1, sl, r0, lsl #20
    27c8:	0d521000 	ldcleq	0, cr1, [r2, #-0]
    27cc:	001e0800 	andseq	r0, lr, r0, lsl #16
    27d0:	6c160000 	ldcvs	0, cr0, [r6], {-0}
    27d4:	01000004 	tsteq	r0, r4
    27d8:	004c0116 	subeq	r0, ip, r6, lsl r1
    27dc:	0a3b0000 	beq	ec27e4 <__Stack_Size+0xec23e4>
    27e0:	00000000 	andeq	r0, r0, r0
    27e4:	0011e014 	andseq	lr, r1, r4, lsl r0
    27e8:	01200100 	teqeq	r0, r0, lsl #2
    27ec:	00000000 	andeq	r0, r0, r0
    27f0:	0000001e 	andeq	r0, r0, lr, lsl r0
    27f4:	04399c01 	ldrteq	r9, [r9], #-3073	; 0xc01
    27f8:	37150000 	ldrcc	r0, [r5, -r0]
    27fc:	01000013 	tsteq	r0, r3, lsl r0
    2800:	005e0120 	subseq	r0, lr, r0, lsr #2
    2804:	0a690000 	beq	1a4280c <__Stack_Size+0x1a4240c>
    2808:	14000000 	strne	r0, [r0], #-0
    280c:	000011f8 	strdeq	r1, [r0], -r8
    2810:	00012c01 	andeq	r2, r1, r1, lsl #24
    2814:	1c000000 	stcne	0, cr0, [r0], {-0}
    2818:	01000000 	mrseq	r0, (UNDEF: 0)
    281c:	0004609c 	muleq	r4, ip, r0
    2820:	13371500 	teqne	r7, #0, 10
    2824:	2c010000 	stccs	0, cr0, [r1], {-0}
    2828:	00005e01 	andeq	r5, r0, r1, lsl #28
    282c:	000a8a00 	andeq	r8, sl, r0, lsl #20
    2830:	74140000 	ldrvc	r0, [r4], #-0
    2834:	01000007 	tsteq	r0, r7
    2838:	0d700137 	ldfeqe	f0, [r0, #-220]!	; 0xffffff24
    283c:	001c0800 	andseq	r0, ip, r0, lsl #16
    2840:	9c010000 	stcls	0, cr0, [r1], {-0}
    2844:	00000487 	andeq	r0, r0, r7, lsl #9
    2848:	00133715 	andseq	r3, r3, r5, lsl r7
    284c:	01370100 	teqeq	r7, r0, lsl #2
    2850:	0000005e 	andeq	r0, r0, lr, asr r0
    2854:	00000aab 	andeq	r0, r0, fp, lsr #21
    2858:	12d41400 	sbcsne	r1, r4, #0, 8
    285c:	42010000 	andmi	r0, r1, #0
    2860:	00000001 	andeq	r0, r0, r1
    2864:	00001e00 	andeq	r1, r0, r0, lsl #28
    2868:	ae9c0100 	fmlgee	f0, f4, f0
    286c:	15000004 	strne	r0, [r0, #-4]
    2870:	00001337 	andeq	r1, r0, r7, lsr r3
    2874:	5e014201 	cdppl	2, 0, cr4, cr1, cr1, {0}
    2878:	cc000000 	stcgt	0, cr0, [r0], {-0}
    287c:	0000000a 	andeq	r0, r0, sl
    2880:	00116f14 	andseq	r6, r1, r4, lsl pc
    2884:	014d0100 	mrseq	r0, (UNDEF: 93)
    2888:	00000000 	andeq	r0, r0, r0
    288c:	0000001e 	andeq	r0, r0, lr, lsl r0
    2890:	04d59c01 	ldrbeq	r9, [r5], #3073	; 0xc01
    2894:	37150000 	ldrcc	r0, [r5, -r0]
    2898:	01000013 	tsteq	r0, r3, lsl r0
    289c:	005e014d 	subseq	r0, lr, sp, asr #2
    28a0:	0aed0000 	beq	ffb428a8 <BootRAM+0xeab3049>
    28a4:	14000000 	strne	r0, [r0], #-0
    28a8:	00001192 	muleq	r0, r2, r1
    28ac:	00015801 	andeq	r5, r1, r1, lsl #16
    28b0:	1c000000 	stcne	0, cr0, [r0], {-0}
    28b4:	01000000 	mrseq	r0, (UNDEF: 0)
    28b8:	0004fc9c 	muleq	r4, ip, ip
    28bc:	13371500 	teqne	r7, #0, 10
    28c0:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    28c4:	00005e01 	andeq	r5, r0, r1, lsl #28
    28c8:	000b0e00 	andeq	r0, fp, r0, lsl #28
    28cc:	cc170000 	ldcgt	0, cr0, [r7], {-0}
    28d0:	0100000f 	tsteq	r0, pc
    28d4:	004c0163 	subeq	r0, ip, r3, ror #2
    28d8:	00000000 	andeq	r0, r0, r0
    28dc:	001a0000 	andseq	r0, sl, r0
    28e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    28e4:	00000527 	andeq	r0, r0, r7, lsr #10
    28e8:	00133715 	andseq	r3, r3, r5, lsl r7
    28ec:	01630100 	cmneq	r3, r0, lsl #2
    28f0:	0000005e 	andeq	r0, r0, lr, asr r0
    28f4:	00000b2f 	andeq	r0, r0, pc, lsr #22
    28f8:	10871700 	addne	r1, r7, r0, lsl #14
    28fc:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    2900:	00004c01 	andeq	r4, r0, r1, lsl #24
    2904:	00000000 	andeq	r0, r0, r0
    2908:	00001a00 	andeq	r1, r0, r0, lsl #20
    290c:	529c0100 	addspl	r0, ip, #0, 2
    2910:	15000005 	strne	r0, [r0, #-5]
    2914:	00001337 	andeq	r1, r0, r7, lsr r3
    2918:	5e016e01 	cdppl	14, 0, cr6, cr1, cr1, {0}
    291c:	50000000 	andpl	r0, r0, r0
    2920:	0000000b 	andeq	r0, r0, fp
    2924:	0011bf14 	andseq	fp, r1, r4, lsl pc
    2928:	01790100 	cmneq	r9, r0, lsl #2
    292c:	00000000 	andeq	r0, r0, r0
    2930:	00000018 	andeq	r0, r0, r8, lsl r0
    2934:	05799c01 	ldrbeq	r9, [r9, #-3073]!	; 0xc01
    2938:	37150000 	ldrcc	r0, [r5, -r0]
    293c:	01000013 	tsteq	r0, r3, lsl r0
    2940:	005e0179 	subseq	r0, lr, r9, ror r1
    2944:	0b710000 	bleq	1c4294c <__Stack_Size+0x1c4254c>
    2948:	14000000 	strne	r0, [r0], #-0
    294c:	00001297 	muleq	r0, r7, r2
    2950:	00018401 	andeq	r8, r1, r1, lsl #8
    2954:	1c000000 	stcne	0, cr0, [r0], {-0}
    2958:	01000000 	mrseq	r0, (UNDEF: 0)
    295c:	0005a09c 	muleq	r5, ip, r0
    2960:	13371500 	teqne	r7, #0, 10
    2964:	84010000 	strhi	r0, [r1], #-0
    2968:	00005e01 	andeq	r5, r0, r1, lsl #28
    296c:	000b9200 	andeq	r9, fp, r0, lsl #4
    2970:	c3140000 	tstgt	r4, #0
    2974:	01000010 	tsteq	r0, r0, lsl r0
    2978:	0000018f 	andeq	r0, r0, pc, lsl #3
    297c:	00200000 	eoreq	r0, r0, r0
    2980:	9c010000 	stcls	0, cr0, [r1], {-0}
    2984:	000005c7 	andeq	r0, r0, r7, asr #11
    2988:	00133715 	andseq	r3, r3, r5, lsl r7
    298c:	018f0100 	orreq	r0, pc, r0, lsl #2
    2990:	0000005e 	andeq	r0, r0, lr, asr r0
    2994:	00000bb3 			; <UNDEFINED> instruction: 0x00000bb3
    2998:	102a1400 	eorne	r1, sl, r0, lsl #8
    299c:	9a010000 	bls	429a4 <__Stack_Size+0x425a4>
    29a0:	00000001 	andeq	r0, r0, r1
    29a4:	00002000 	andeq	r2, r0, r0
    29a8:	ee9c0100 	fmle	f0, f4, f0
    29ac:	15000005 	strne	r0, [r0, #-5]
    29b0:	00001337 	andeq	r1, r0, r7, lsr r3
    29b4:	5e019a01 	vmlapl.f32	s18, s2, s2
    29b8:	d4000000 	strle	r0, [r0], #-0
    29bc:	0000000b 	andeq	r0, r0, fp
    29c0:	00107214 	andseq	r7, r0, r4, lsl r2
    29c4:	01a50100 			; <UNDEFINED> instruction: 0x01a50100
    29c8:	08000d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp}
    29cc:	00000020 	andeq	r0, r0, r0, lsr #32
    29d0:	06159c01 	ldreq	r9, [r5], -r1, lsl #24
    29d4:	37150000 	ldrcc	r0, [r5, -r0]
    29d8:	01000013 	tsteq	r0, r3, lsl r0
    29dc:	005e01a5 	subseq	r0, lr, r5, lsr #3
    29e0:	0bf50000 	bleq	ffd429e8 <BootRAM+0xecb3189>
    29e4:	14000000 	strne	r0, [r0], #-0
    29e8:	0000131c 	andeq	r1, r0, ip, lsl r3
    29ec:	ac01b001 	stcge	0, cr11, [r1], {1}
    29f0:	2008000d 	andcs	r0, r8, sp
    29f4:	01000000 	mrseq	r0, (UNDEF: 0)
    29f8:	00063c9c 	muleq	r6, ip, ip
    29fc:	13371500 	teqne	r7, #0, 10
    2a00:	b0010000 	andlt	r0, r1, r0
    2a04:	00005e01 	andeq	r5, r0, r1, lsl #28
    2a08:	000c1600 	andeq	r1, ip, r0, lsl #12
    2a0c:	a8140000 	ldmdage	r4, {}	; <UNPREDICTABLE>
    2a10:	01000010 	tsteq	r0, r0, lsl r0
    2a14:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    2a18:	001e0000 	andseq	r0, lr, r0
    2a1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a20:	00000673 	andeq	r0, r0, r3, ror r6
    2a24:	00133715 	andseq	r3, r3, r5, lsl r7
    2a28:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
    2a2c:	0000005e 	andeq	r0, r0, lr, asr r0
    2a30:	00000c37 	andeq	r0, r0, r7, lsr ip
    2a34:	00105215 	andseq	r5, r0, r5, lsl r2
    2a38:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
    2a3c:	0000005e 	andeq	r0, r0, lr, asr r0
    2a40:	00000c58 	andeq	r0, r0, r8, asr ip
    2a44:	10381700 	eorsne	r1, r8, r0, lsl #14
    2a48:	c7010000 	strgt	r0, [r1, -r0]
    2a4c:	00005e01 	andeq	r5, r0, r1, lsl #28
    2a50:	00000000 	andeq	r0, r0, r0
    2a54:	00001200 	andeq	r1, r0, r0, lsl #4
    2a58:	9e9c0100 	fmllse	f0, f4, f0
    2a5c:	15000006 	strne	r0, [r0, #-6]
    2a60:	00001337 	andeq	r1, r0, r7, lsr r3
    2a64:	5e01c701 	cdppl	7, 0, cr12, cr1, cr1, {0}
    2a68:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    2a6c:	0000000c 	andeq	r0, r0, ip
    2a70:	00118614 	andseq	r8, r1, r4, lsl r6
    2a74:	01d30100 	bicseq	r0, r3, r0, lsl #2
    2a78:	00000000 	andeq	r0, r0, r0
    2a7c:	00000020 	andeq	r0, r0, r0, lsr #32
    2a80:	06d59c01 	ldrbeq	r9, [r5], r1, lsl #24
    2a84:	37150000 	ldrcc	r0, [r5, -r0]
    2a88:	01000013 	tsteq	r0, r3, lsl r0
    2a8c:	005e01d3 	ldrsbeq	r0, [lr], #-19	; 0xffffffed
    2a90:	0c9a0000 	ldceq	0, cr0, [sl], {0}
    2a94:	2d150000 	ldccs	0, cr0, [r5, #-0]
    2a98:	01000012 	tsteq	r0, r2, lsl r0
    2a9c:	004c01d3 	ldrdeq	r0, [ip], #-19	; 0xffffffed
    2aa0:	0cbb0000 	ldceq	0, cr0, [fp]
    2aa4:	14000000 	strne	r0, [r0], #-0
    2aa8:	0000134a 	andeq	r1, r0, sl, asr #6
    2aac:	0001df01 	andeq	sp, r1, r1, lsl #30
    2ab0:	20000000 	andcs	r0, r0, r0
    2ab4:	01000000 	mrseq	r0, (UNDEF: 0)
    2ab8:	00070c9c 	muleq	r7, ip, ip
    2abc:	13371500 	teqne	r7, #0, 10
    2ac0:	df010000 	svcle	0x00010000
    2ac4:	00005e01 	andeq	r5, r0, r1, lsl #28
    2ac8:	000cdc00 	andeq	sp, ip, r0, lsl #24
    2acc:	122d1500 	eorne	r1, sp, #0, 10
    2ad0:	df010000 	svcle	0x00010000
    2ad4:	00004c01 	andeq	r4, r0, r1, lsl #24
    2ad8:	000cfd00 	andeq	pc, ip, r0, lsl #26
    2adc:	10170000 	andsne	r0, r7, r0
    2ae0:	01000013 	tsteq	r0, r3, lsl r0
    2ae4:	004c01ea 	subeq	r0, ip, sl, ror #3
    2ae8:	0dcc0000 	stcleq	0, cr0, [ip]
    2aec:	001c0800 	andseq	r0, ip, r0, lsl #16
    2af0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2af4:	00000737 	andeq	r0, r0, r7, lsr r7
    2af8:	00133715 	andseq	r3, r3, r5, lsl r7
    2afc:	01ea0100 	mvneq	r0, r0, lsl #2
    2b00:	0000005e 	andeq	r0, r0, lr, asr r0
    2b04:	00000d1e 	andeq	r0, r0, lr, lsl sp
    2b08:	10fc1700 	rscsne	r1, ip, r0, lsl #14
    2b0c:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    2b10:	00004c01 	andeq	r4, r0, r1, lsl #24
    2b14:	000de800 	andeq	lr, sp, r0, lsl #16
    2b18:	00001c08 	andeq	r1, r0, r8, lsl #24
    2b1c:	629c0100 	addsvs	r0, ip, #0, 2
    2b20:	15000007 	strne	r0, [r0, #-7]
    2b24:	00001337 	andeq	r1, r0, r7, lsr r3
    2b28:	5e01f501 	cfsh32pl	mvfx15, mvfx1, #1
    2b2c:	3f000000 	svccc	0x00000000
    2b30:	0000000d 	andeq	r0, r0, sp
    2b34:	0011eb14 	andseq	lr, r1, r4, lsl fp
    2b38:	02010100 	andeq	r0, r1, #0, 2
    2b3c:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
    2b40:	0000001c 	andeq	r0, r0, ip, lsl r0
    2b44:	07979c01 	ldreq	r9, [r7, r1, lsl #24]
    2b48:	37150000 	ldrcc	r0, [r5, -r0]
    2b4c:	01000013 	tsteq	r0, r3, lsl r0
    2b50:	005e0201 	subseq	r0, lr, r1, lsl #4
    2b54:	0d600000 	stcleq	0, cr0, [r0, #-0]
    2b58:	a1180000 	tstge	r8, r0
    2b5c:	01000010 	tsteq	r0, r0, lsl r0
    2b60:	004c0201 	subeq	r0, ip, r1, lsl #4
    2b64:	51010000 	mrspl	r0, (UNDEF: 1)
    2b68:	12551400 	subsne	r1, r5, #0, 8
    2b6c:	0d010000 	stceq	0, cr0, [r1, #-0]
    2b70:	00000002 	andeq	r0, r0, r2
    2b74:	00002600 	andeq	r2, r0, r0, lsl #12
    2b78:	e69c0100 	ldr	r0, [ip], r0, lsl #2
    2b7c:	18000007 	stmdane	r0, {r0, r1, r2}
    2b80:	0000124e 	andeq	r1, r0, lr, asr #4
    2b84:	e6020d01 	str	r0, [r2], -r1, lsl #26
    2b88:	01000007 	tsteq	r0, r7
    2b8c:	10a11550 	adcne	r1, r1, r0, asr r5
    2b90:	0d010000 	stceq	0, cr0, [r1, #-0]
    2b94:	00004c02 	andeq	r4, r0, r2, lsl #24
    2b98:	000d8100 	andeq	r8, sp, r0, lsl #2
    2b9c:	00001000 	andeq	r1, r0, r0
    2ba0:	00260000 	eoreq	r0, r6, r0
    2ba4:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
    2ba8:	01000010 	tsteq	r0, r0, lsl r0
    2bac:	004c020f 	subeq	r0, ip, pc, lsl #4
    2bb0:	0dbb0000 	ldceq	0, cr0, [fp]
    2bb4:	00000000 	andeq	r0, r0, r0
    2bb8:	003a0419 	eorseq	r0, sl, r9, lsl r4
    2bbc:	b0140000 	andslt	r0, r4, r0
    2bc0:	01000007 	tsteq	r0, r7
    2bc4:	0e200219 	mcreq	2, 1, r0, cr0, cr9, {0}
    2bc8:	00400800 	subeq	r0, r0, r0, lsl #16
    2bcc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2bd0:	00000851 	andeq	r0, r0, r1, asr r8
    2bd4:	00133715 	andseq	r3, r3, r5, lsl r7
    2bd8:	02190100 	andseq	r0, r9, #0, 2
    2bdc:	0000005e 	andeq	r0, r0, lr, asr r0
    2be0:	00000de4 	andeq	r0, r0, r4, ror #27
    2be4:	0010a115 	andseq	sl, r0, r5, lsl r1
    2be8:	02190100 	andseq	r0, r9, #0, 2
    2bec:	0000004c 	andeq	r0, r0, ip, asr #32
    2bf0:	00000e05 	andeq	r0, r0, r5, lsl #28
    2bf4:	000e2010 	andeq	r2, lr, r0, lsl r0
    2bf8:	00004008 	andeq	r4, r0, r8
    2bfc:	124e1a00 	subne	r1, lr, #0, 20
    2c00:	1b010000 	blne	42c08 <__Stack_Size+0x42808>
    2c04:	0007e602 	andeq	lr, r7, r2, lsl #12
    2c08:	1b520100 	blne	1483010 <__Stack_Size+0x1482c10>
    2c0c:	000002a0 	andeq	r0, r0, r0, lsr #5
    2c10:	00106916 	andseq	r6, r0, r6, lsl r9
    2c14:	021b0100 	andseq	r0, fp, #0, 2
    2c18:	0000004c 	andeq	r0, r0, ip, asr #32
    2c1c:	00000e26 	andeq	r0, r0, r6, lsr #28
    2c20:	17000000 	strne	r0, [r0, -r0]
    2c24:	0000128a 	andeq	r1, r0, sl, lsl #5
    2c28:	4c022401 	cfstrsmi	mvf2, [r2], {1}
    2c2c:	00000000 	andeq	r0, r0, r0
    2c30:	20000000 	andcs	r0, r0, r0
    2c34:	01000000 	mrseq	r0, (UNDEF: 0)
    2c38:	00087c9c 	muleq	r8, ip, ip
    2c3c:	13371500 	teqne	r7, #0, 10
    2c40:	24010000 	strcs	r0, [r1], #-0
    2c44:	00005e02 	andeq	r5, r0, r2, lsl #28
    2c48:	000e5e00 	andeq	r5, lr, r0, lsl #28
    2c4c:	65170000 	ldrvs	r0, [r7, #-0]
    2c50:	01000012 	tsteq	r0, r2, lsl r0
    2c54:	004c022f 	subeq	r0, ip, pc, lsr #4
    2c58:	00000000 	andeq	r0, r0, r0
    2c5c:	00200000 	eoreq	r0, r0, r0
    2c60:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c64:	000008a7 	andeq	r0, r0, r7, lsr #17
    2c68:	00133715 	andseq	r3, r3, r5, lsl r7
    2c6c:	022f0100 	eoreq	r0, pc, #0, 2
    2c70:	0000005e 	andeq	r0, r0, lr, asr r0
    2c74:	00000e7f 	andeq	r0, r0, pc, ror lr
    2c78:	10d11400 	sbcsne	r1, r1, r0, lsl #8
    2c7c:	3c010000 	stccc	0, cr0, [r1], {-0}
    2c80:	00000002 	andeq	r0, r0, r2
    2c84:	00003800 	andeq	r3, r0, r0, lsl #16
    2c88:	ee9c0100 	fmle	f0, f4, f0
    2c8c:	15000008 	strne	r0, [r0, #-8]
    2c90:	00001337 	andeq	r1, r0, r7, lsr r3
    2c94:	5e023c01 	cdppl	12, 0, cr3, cr2, cr1, {0}
    2c98:	a0000000 	andge	r0, r0, r0
    2c9c:	1500000e 	strne	r0, [r0, #-14]
    2ca0:	000012ca 	andeq	r1, r0, sl, asr #5
    2ca4:	4c023c01 	stcmi	12, cr3, [r2], {1}
    2ca8:	c1000000 	mrsgt	r0, (UNDEF: 0)
    2cac:	1500000e 	strne	r0, [r0, #-14]
    2cb0:	00001160 	andeq	r1, r0, r0, ror #2
    2cb4:	4c023c01 	stcmi	12, cr3, [r2], {1}
    2cb8:	e2000000 	and	r0, r0, #0
    2cbc:	0000000e 	andeq	r0, r0, lr
    2cc0:	00110814 	andseq	r0, r1, r4, lsl r8
    2cc4:	02480100 	subeq	r0, r8, #0, 2
    2cc8:	00000000 	andeq	r0, r0, r0
    2ccc:	00000020 	andeq	r0, r0, r0, lsr #32
    2cd0:	09259c01 	stmdbeq	r5!, {r0, sl, fp, ip, pc}
    2cd4:	37150000 	ldrcc	r0, [r5, -r0]
    2cd8:	01000013 	tsteq	r0, r3, lsl r0
    2cdc:	005e0248 	subseq	r0, lr, r8, asr #4
    2ce0:	0f030000 	svceq	0x00030000
    2ce4:	ca150000 	bgt	542cec <__Stack_Size+0x5428ec>
    2ce8:	01000012 	tsteq	r0, r2, lsl r0
    2cec:	004c0248 	subeq	r0, ip, r8, asr #4
    2cf0:	0f240000 	svceq	0x00240000
    2cf4:	14000000 	strne	r0, [r0], #-0
    2cf8:	00000fdd 	ldrdeq	r0, [r0], -sp
    2cfc:	00025401 	andeq	r5, r2, r1, lsl #8
    2d00:	20000000 	andcs	r0, r0, r0
    2d04:	01000000 	mrseq	r0, (UNDEF: 0)
    2d08:	00095c9c 	muleq	r9, ip, ip
    2d0c:	13371500 	teqne	r7, #0, 10
    2d10:	54010000 	strpl	r0, [r1], #-0
    2d14:	00005e02 	andeq	r5, r0, r2, lsl #28
    2d18:	000f4500 	andeq	r4, pc, r0, lsl #10
    2d1c:	11601500 	cmnne	r0, r0, lsl #10
    2d20:	54010000 	strpl	r0, [r1], #-0
    2d24:	00004c02 	andeq	r4, r0, r2, lsl #24
    2d28:	000f6600 	andeq	r6, pc, r0, lsl #12
    2d2c:	ea170000 	b	5c2d34 <__Stack_Size+0x5c2934>
    2d30:	01000012 	tsteq	r0, r2, lsl r0
    2d34:	004c025f 	subeq	r0, ip, pc, asr r2
    2d38:	00000000 	andeq	r0, r0, r0
    2d3c:	001c0000 	andseq	r0, ip, r0
    2d40:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d44:	00000987 	andeq	r0, r0, r7, lsl #19
    2d48:	00133715 	andseq	r3, r3, r5, lsl r7
    2d4c:	025f0100 	subseq	r0, pc, #0, 2
    2d50:	0000005e 	andeq	r0, r0, lr, asr r0
    2d54:	00000f87 	andeq	r0, r0, r7, lsl #31
    2d58:	11a41700 			; <UNDEFINED> instruction: 0x11a41700
    2d5c:	6a010000 	bvs	42d64 <__Stack_Size+0x42964>
    2d60:	00004c02 	andeq	r4, r0, r2, lsl #24
    2d64:	00000000 	andeq	r0, r0, r0
    2d68:	00001c00 	andeq	r1, r0, r0, lsl #24
    2d6c:	b29c0100 	addslt	r0, ip, #0, 2
    2d70:	15000009 	strne	r0, [r0, #-9]
    2d74:	00001337 	andeq	r1, r0, r7, lsr r3
    2d78:	5e026a01 	vmlapl.f32	s12, s4, s2
    2d7c:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    2d80:	0000000f 	andeq	r0, r0, pc
    2d84:	0011ce14 	andseq	ip, r1, r4, lsl lr
    2d88:	02760100 	rsbseq	r0, r6, #0, 2
    2d8c:	00000000 	andeq	r0, r0, r0
    2d90:	000000a8 	andeq	r0, r0, r8, lsr #1
    2d94:	0a599c01 	beq	1669da0 <__Stack_Size+0x16699a0>
    2d98:	37150000 	ldrcc	r0, [r5, -r0]
    2d9c:	01000013 	tsteq	r0, r3, lsl r0
    2da0:	005e0276 	subseq	r0, lr, r6, ror r2
    2da4:	0fc90000 	svceq	0x00c90000
    2da8:	27150000 	ldrcs	r0, [r5, -r0]
    2dac:	01000011 	tsteq	r0, r1, lsl r0
    2db0:	005e0276 	subseq	r0, lr, r6, ror r2
    2db4:	100e0000 	andne	r0, lr, r0
    2db8:	a1150000 	tstge	r5, r0
    2dbc:	01000010 	tsteq	r0, r0, lsl r0
    2dc0:	004c0276 	subeq	r0, ip, r6, ror r2
    2dc4:	10530000 	subsne	r0, r3, r0
    2dc8:	001c0000 	andseq	r0, ip, r0
    2dcc:	3a000000 	bcc	2dd4 <__Stack_Size+0x29d4>
    2dd0:	2c000000 	stccs	0, cr0, [r0], {-0}
    2dd4:	1600000a 	strne	r0, [r0], -sl
    2dd8:	0000124e 	andeq	r1, r0, lr, asr #4
    2ddc:	e6027801 	str	r7, [r2], -r1, lsl #16
    2de0:	7f000007 	svcvc	0x00000007
    2de4:	1b000010 	blne	2e2c <__Stack_Size+0x2a2c>
    2de8:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    2dec:	00106916 	andseq	r6, r0, r6, lsl r9
    2df0:	02780100 	rsbseq	r0, r8, #0, 2
    2df4:	0000004c 	andeq	r0, r0, ip, asr #32
    2df8:	0000109d 	muleq	r0, sp, r0
    2dfc:	d01b0000 	andsle	r0, fp, r0
    2e00:	16000002 	strne	r0, [r0], -r2
    2e04:	0000124e 	andeq	r1, r0, lr, asr #4
    2e08:	e6027801 	str	r7, [r2], -r1, lsl #16
    2e0c:	d5000007 	strle	r0, [r0, #-7]
    2e10:	1b000010 	blne	2e58 <__Stack_Size+0x2a58>
    2e14:	000002e8 	andeq	r0, r0, r8, ror #5
    2e18:	00106916 	andseq	r6, r0, r6, lsl r9
    2e1c:	02780100 	rsbseq	r0, r8, #0, 2
    2e20:	0000004c 	andeq	r0, r0, ip, asr #32
    2e24:	000010f3 	strdeq	r1, [r0], -r3
    2e28:	14000000 	strne	r0, [r0], #-0
    2e2c:	000012b8 			; <UNDEFINED> instruction: 0x000012b8
    2e30:	00028201 	andeq	r8, r2, r1, lsl #4
    2e34:	5c000000 	stcpl	0, cr0, [r0], {-0}
    2e38:	01000000 	mrseq	r0, (UNDEF: 0)
    2e3c:	000ad09c 	muleq	sl, ip, r0
    2e40:	13371500 	teqne	r7, #0, 10
    2e44:	82010000 	andhi	r0, r1, #0
    2e48:	00005e02 	andeq	r5, r0, r2, lsl #28
    2e4c:	00112b00 	andseq	r2, r1, r0, lsl #22
    2e50:	11271500 	teqne	r7, r0, lsl #10
    2e54:	82010000 	andhi	r0, r1, #0
    2e58:	00005e02 	andeq	r5, r0, r2, lsl #28
    2e5c:	00116500 	andseq	r6, r1, r0, lsl #10
    2e60:	10a11500 	adcne	r1, r1, r0, lsl #10
    2e64:	82010000 	andhi	r0, r1, #0
    2e68:	00004c02 	andeq	r4, r0, r2, lsl #24
    2e6c:	00119100 	andseq	r9, r1, r0, lsl #2
    2e70:	00001000 	andeq	r1, r0, r0
    2e74:	00380000 	eorseq	r0, r8, r0
    2e78:	4e160000 	cdpmi	0, 1, cr0, cr6, cr0, {0}
    2e7c:	01000012 	tsteq	r0, r2, lsl r0
    2e80:	07e60284 	strbeq	r0, [r6, r4, lsl #5]!
    2e84:	11bd0000 			; <UNDEFINED> instruction: 0x11bd0000
    2e88:	081b0000 	ldmdaeq	fp, {}	; <UNPREDICTABLE>
    2e8c:	16000003 	strne	r0, [r0], -r3
    2e90:	00001069 	andeq	r1, r0, r9, rrx
    2e94:	4c028401 	cfstrsmi	mvf8, [r2], {1}
    2e98:	d0000000 	andle	r0, r0, r0
    2e9c:	00000011 	andeq	r0, r0, r1, lsl r0
    2ea0:	56140000 	ldrpl	r0, [r4], -r0
    2ea4:	01000013 	tsteq	r0, r3, lsl r0
    2ea8:	0000028e 	andeq	r0, r0, lr, lsl #5
    2eac:	005c0000 	subseq	r0, ip, r0
    2eb0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2eb4:	00000b47 	andeq	r0, r0, r7, asr #22
    2eb8:	00133715 	andseq	r3, r3, r5, lsl r7
    2ebc:	028e0100 	addeq	r0, lr, #0, 2
    2ec0:	0000005e 	andeq	r0, r0, lr, asr r0
    2ec4:	00001208 	andeq	r1, r0, r8, lsl #4
    2ec8:	00112715 	andseq	r2, r1, r5, lsl r7
    2ecc:	028e0100 	addeq	r0, lr, #0, 2
    2ed0:	0000005e 	andeq	r0, r0, lr, asr r0
    2ed4:	00001242 	andeq	r1, r0, r2, asr #4
    2ed8:	0010a115 	andseq	sl, r0, r5, lsl r1
    2edc:	028e0100 	addeq	r0, lr, #0, 2
    2ee0:	0000004c 	andeq	r0, r0, ip, asr #32
    2ee4:	0000126e 	andeq	r1, r0, lr, ror #4
    2ee8:	00000010 	andeq	r0, r0, r0, lsl r0
    2eec:	00003800 	andeq	r3, r0, r0, lsl #16
    2ef0:	124e1600 	subne	r1, lr, #0, 12
    2ef4:	90010000 	andls	r0, r1, r0
    2ef8:	0007e602 	andeq	lr, r7, r2, lsl #12
    2efc:	00129a00 	andseq	r9, r2, r0, lsl #20
    2f00:	03201b00 	teqeq	r0, #0, 22
    2f04:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
    2f08:	01000010 	tsteq	r0, r0, lsl r0
    2f0c:	004c0290 	umaaleq	r0, ip, r0, r2
    2f10:	12ad0000 	adcne	r0, sp, #0
    2f14:	00000000 	andeq	r0, r0, r0
    2f18:	12331700 	eorsne	r1, r3, #0, 14
    2f1c:	9a010000 	bls	42f24 <__Stack_Size+0x42b24>
    2f20:	00004c02 	andeq	r4, r0, r2, lsl #24
    2f24:	00000000 	andeq	r0, r0, r0
    2f28:	00002000 	andeq	r2, r0, r0
    2f2c:	729c0100 	addsvc	r0, ip, #0, 2
    2f30:	1500000b 	strne	r0, [r0, #-11]
    2f34:	00001337 	andeq	r1, r0, r7, lsr r3
    2f38:	5e029a01 	vmlapl.f32	s18, s4, s2
    2f3c:	e5000000 	str	r0, [r0, #-0]
    2f40:	00000012 	andeq	r0, r0, r2, lsl r0
    2f44:	0012a617 	andseq	sl, r2, r7, lsl r6
    2f48:	02a60100 	adceq	r0, r6, #0, 2
    2f4c:	0000004c 	andeq	r0, r0, ip, asr #32
    2f50:	00000000 	andeq	r0, r0, r0
    2f54:	00000020 	andeq	r0, r0, r0, lsr #32
    2f58:	0b9d9c01 	bleq	fe769f64 <BootRAM+0xd6da705>
    2f5c:	37150000 	ldrcc	r0, [r5, -r0]
    2f60:	01000013 	tsteq	r0, r3, lsl r0
    2f64:	005e02a6 	subseq	r0, lr, r6, lsr #5
    2f68:	13060000 	movwne	r0, #24576	; 0x6000
    2f6c:	17000000 	strne	r0, [r0, -r0]
    2f70:	00001151 	andeq	r1, r0, r1, asr r1
    2f74:	8e02b201 	cdphi	2, 0, cr11, cr2, cr1, {0}
    2f78:	00000000 	andeq	r0, r0, r0
    2f7c:	44000000 	strmi	r0, [r0], #-0
    2f80:	01000000 	mrseq	r0, (UNDEF: 0)
    2f84:	000bc89c 	muleq	fp, ip, r8
    2f88:	13371500 	teqne	r7, #0, 10
    2f8c:	b2010000 	andlt	r0, r1, #0
    2f90:	00005e02 	andeq	r5, r0, r2, lsl #28
    2f94:	00132700 	andseq	r2, r3, r0, lsl #14
    2f98:	bd140000 	ldclt	0, cr0, [r4, #-0]
    2f9c:	0100000f 	tsteq	r0, pc
    2fa0:	000002c3 	andeq	r0, r0, r3, asr #5
    2fa4:	003a0000 	eorseq	r0, sl, r0
    2fa8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2fac:	00000bfd 	strdeq	r0, [r0], -sp
    2fb0:	00133715 	andseq	r3, r3, r5, lsl r7
    2fb4:	02c30100 	sbceq	r0, r3, #0, 2
    2fb8:	0000005e 	andeq	r0, r0, lr, asr r0
    2fbc:	00001348 	andeq	r1, r0, r8, asr #6
    2fc0:	00112718 	andseq	r2, r1, r8, lsl r7
    2fc4:	02c30100 	sbceq	r0, r3, #0, 2
    2fc8:	0000005e 	andeq	r0, r0, lr, asr r0
    2fcc:	17005101 	strne	r5, [r0, -r1, lsl #2]
    2fd0:	0000117f 	andeq	r1, r0, pc, ror r1
    2fd4:	4c02d601 	stcmi	6, cr13, [r2], {1}
    2fd8:	00000000 	andeq	r0, r0, r0
    2fdc:	06000000 	streq	r0, [r0], -r0
    2fe0:	01000000 	mrseq	r0, (UNDEF: 0)
    2fe4:	000c449c 	muleq	ip, ip, r4
    2fe8:	68621d00 	stmdavs	r2!, {r8, sl, fp, ip}^
    2fec:	02d60100 	sbcseq	r0, r6, #0, 2
    2ff0:	0000005e 	andeq	r0, r0, lr, asr r0
    2ff4:	00001382 	andeq	r1, r0, r2, lsl #7
    2ff8:	006c621e 	rsbeq	r6, ip, lr, lsl r2
    2ffc:	5e02d601 	cfmadd32pl	mvax0, mvfx13, mvfx2, mvfx1
    3000:	01000000 	mrseq	r0, (UNDEF: 0)
    3004:	10f71651 	rscsne	r1, r7, r1, asr r6
    3008:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    300c:	00004c02 	andeq	r4, r0, r2, lsl #24
    3010:	0013a300 	andseq	sl, r3, r0, lsl #6
    3014:	601f0000 	andsvs	r0, pc, r0
    3018:	01000010 	tsteq	r0, r0, lsl r0
    301c:	004c02e3 	subeq	r0, ip, r3, ror #5
    3020:	00000000 	andeq	r0, r0, r0
    3024:	000a0000 	andeq	r0, sl, r0
    3028:	9c010000 	stcls	0, cr0, [r1], {-0}
    302c:	00116a15 	andseq	r6, r1, r5, lsl sl
    3030:	02e30100 	rsceq	r0, r3, #0, 2
    3034:	0000004c 	andeq	r0, r0, ip, asr #32
    3038:	000013dc 	ldrdeq	r1, [r0], -ip
    303c:	00127216 	andseq	r7, r2, r6, lsl r2
    3040:	02e50100 	rsceq	r0, r5, #0, 2
    3044:	0000005e 	andeq	r0, r0, lr, asr r0
    3048:	000013fd 	strdeq	r1, [r0], -sp
    304c:	0010f716 	andseq	pc, r0, r6, lsl r7	; <UNPREDICTABLE>
    3050:	02e60100 	rsceq	r0, r6, #0, 2
    3054:	0000004c 	andeq	r0, r0, ip, asr #32
    3058:	00001410 	andeq	r1, r0, r0, lsl r4
    305c:	01d80000 	bicseq	r0, r8, r0
    3060:	00040000 	andeq	r0, r4, r0
    3064:	00000db7 			; <UNDEFINED> instruction: 0x00000db7
    3068:	01580104 	cmpeq	r8, r4, lsl #2
    306c:	9b010000 	blls	43074 <__Stack_Size+0x42c74>
    3070:	7b000013 	blvc	30c4 <__Stack_Size+0x2cc4>
    3074:	18000003 	stmdane	r0, {r0, r1}
    3078:	00000005 	andeq	r0, r0, r5
    307c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    3080:	0200000f 	andeq	r0, r0, #15
    3084:	01f60504 	mvnseq	r0, r4, lsl #10
    3088:	02020000 	andeq	r0, r2, #0
    308c:	0006a905 	andeq	sl, r6, r5, lsl #18
    3090:	06010200 	streq	r0, [r1], -r0, lsl #4
    3094:	00000655 	andeq	r0, r0, r5, asr r6
    3098:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    309c:	45240200 	strmi	r0, [r4, #-512]!	; 0x200
    30a0:	02000000 	andeq	r0, r0, #0
    30a4:	07930704 	ldreq	r0, [r3, r4, lsl #14]
    30a8:	75030000 	strvc	r0, [r3, #-0]
    30ac:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    30b0:	00005725 	andeq	r5, r0, r5, lsr #14
    30b4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    30b8:	000003e8 	andeq	r0, r0, r8, ror #7
    30bc:	00387503 	eorseq	r7, r8, r3, lsl #10
    30c0:	00682602 	rsbeq	r2, r8, r2, lsl #12
    30c4:	01020000 	mrseq	r0, (UNDEF: 2)
    30c8:	00065308 	andeq	r5, r6, r8, lsl #6
    30cc:	04050400 	streq	r0, [r5], #-1024	; 0x400
    30d0:	0000006f 	andeq	r0, r0, pc, rrx
    30d4:	00039e06 	andeq	r9, r3, r6, lsl #28
    30d8:	60290100 	eorvs	r0, r9, r0, lsl #2
    30dc:	5408000e 	strpl	r0, [r8], #-14
    30e0:	01000001 	tsteq	r0, r1
    30e4:	00012a9c 	muleq	r1, ip, sl
    30e8:	13940700 	orrsne	r0, r4, #0, 14
    30ec:	2b010000 	blcs	430f4 <__Stack_Size+0x42cf4>
    30f0:	0000003a 	andeq	r0, r0, sl, lsr r0
    30f4:	0000142f 	andeq	r1, r0, pc, lsr #8
    30f8:	000e9c08 	andeq	r9, lr, r8, lsl #24
    30fc:	00001208 	andeq	r1, r0, r8, lsl #4
    3100:	0000b700 	andeq	fp, r0, r0, lsl #14
    3104:	046c0700 	strbteq	r0, [ip], #-1792	; 0x700
    3108:	3c010000 	stccc	0, cr0, [r1], {-0}
    310c:	0000004c 	andeq	r0, r0, ip, asr #32
    3110:	0000149f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    3114:	0eae0800 	cdpeq	8, 10, cr0, cr14, cr0, {0}
    3118:	00120800 	andseq	r0, r2, r0, lsl #16
    311c:	00d40000 	sbcseq	r0, r4, r0
    3120:	6c070000 	stcvs	0, cr0, [r7], {-0}
    3124:	01000004 	tsteq	r0, r4
    3128:	00004c3d 	andeq	r4, r0, sp, lsr ip
    312c:	0014e300 	andseq	lr, r4, r0, lsl #6
    3130:	02080000 	andeq	r0, r8, #0
    3134:	2208000f 	andcs	r0, r8, #15
    3138:	f1000000 	cps	#0
    313c:	07000000 	streq	r0, [r0, -r0]
    3140:	0000046c 	andeq	r0, r0, ip, ror #8
    3144:	004c7201 	subeq	r7, ip, r1, lsl #4
    3148:	155d0000 	ldrbne	r0, [sp, #-0]
    314c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3150:	08000f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp}
    3154:	00000020 	andeq	r0, r0, r0, lsr #32
    3158:	0000010e 	andeq	r0, r0, lr, lsl #2
    315c:	00046c07 	andeq	r6, r4, r7, lsl #24
    3160:	4c730100 	ldfmie	f0, [r3], #-0
    3164:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    3168:	00000015 	andeq	r0, r0, r5, lsl r0
    316c:	000eda09 	andeq	sp, lr, r9, lsl #20
    3170:	0001ba08 	andeq	fp, r1, r8, lsl #20
    3174:	0eee0900 	cdpeq	9, 14, cr0, cr14, cr0, {0}
    3178:	01c50800 	biceq	r0, r5, r0, lsl #16
    317c:	02090000 	andeq	r0, r9, #0
    3180:	d008000f 	andle	r0, r8, pc
    3184:	00000001 	andeq	r0, r0, r1
    3188:	00136806 	andseq	r6, r3, r6, lsl #16
    318c:	009e0100 	addseq	r0, lr, r0, lsl #2
    3190:	70000000 	andvc	r0, r0, r0
    3194:	01000000 	mrseq	r0, (UNDEF: 0)
    3198:	00014f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
    319c:	13940700 	orrsne	r0, r4, #0, 14
    31a0:	a0010000 	andge	r0, r1, r0
    31a4:	0000003a 	andeq	r0, r0, sl, lsr r0
    31a8:	00001591 	muleq	r0, r1, r5
    31ac:	02300a00 	eorseq	r0, r0, #0, 20
    31b0:	2a030000 	bcs	c31b8 <__Stack_Size+0xc2db8>
    31b4:	00015b02 	andeq	r5, r1, r2, lsl #22
    31b8:	004c0b00 	subeq	r0, ip, r0, lsl #22
    31bc:	7e0c0000 	cdpvc	0, 0, cr0, cr12, cr0, {0}
    31c0:	01000013 	tsteq	r0, r3, lsl r0
    31c4:	00004c17 	andeq	r4, r0, r7, lsl ip
    31c8:	da030500 	ble	c45d0 <__Stack_Size+0xc41d0>
    31cc:	0c200002 	stceq	0, cr0, [r0], #-8
    31d0:	00001389 	andeq	r1, r0, r9, lsl #7
    31d4:	004c1801 	subeq	r1, ip, r1, lsl #16
    31d8:	03050000 	movweq	r0, #20480	; 0x5000
    31dc:	200002dc 	ldrdcs	r0, [r0], -ip
    31e0:	0013c60d 	andseq	ip, r3, sp, lsl #12
    31e4:	5e1d0400 	cfmulspl	mvf0, mvf13, mvf0
    31e8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    31ec:	00000070 	andeq	r0, r0, r0, ror r0
    31f0:	0000019d 	muleq	r0, sp, r1
    31f4:	00019d0f 	andeq	r9, r1, pc, lsl #26
    31f8:	02000600 	andeq	r0, r0, #0, 12
    31fc:	05260704 	streq	r0, [r6, #-1796]!	; 0x704
    3200:	320d0000 	andcc	r0, sp, #0
    3204:	01000000 	mrseq	r0, (UNDEF: 0)
    3208:	00018d1b 	andeq	r8, r1, fp, lsl sp
    320c:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    3210:	1c010000 	stcne	0, cr0, [r1], {-0}
    3214:	0000018d 	andeq	r0, r0, sp, lsl #3
    3218:	0013ad10 	andseq	sl, r3, r0, lsl sp
    321c:	5edc0500 	cdppl	5, 13, cr0, cr12, cr0, {0}
    3220:	10000000 	andne	r0, r0, r0
    3224:	0000136f 	andeq	r1, r0, pc, ror #6
    3228:	005ed905 	subseq	sp, lr, r5, lsl #18
    322c:	b9100000 	ldmdblt	r0, {}	; <UNPREDICTABLE>
    3230:	05000013 	streq	r0, [r0, #-19]
    3234:	00005edb 	ldrdeq	r5, [r0], -fp
    3238:	03f90000 	mvnseq	r0, #0
    323c:	00040000 	andeq	r0, r4, r0
    3240:	00000e91 	muleq	r0, r1, lr
    3244:	01580104 	cmpeq	r8, r4, lsl #2
    3248:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    324c:	7b000013 	blvc	32a0 <__Stack_Size+0x2ea0>
    3250:	30000003 	andcc	r0, r0, r3
    3254:	00000005 	andeq	r0, r0, r5
    3258:	40000000 	andmi	r0, r0, r0
    325c:	02000010 	andeq	r0, r0, #16
    3260:	01f60504 	mvnseq	r0, r4, lsl #10
    3264:	02020000 	andeq	r0, r2, #0
    3268:	0006a905 	andeq	sl, r6, r5, lsl #18
    326c:	06010200 	streq	r0, [r1], -r0, lsl #4
    3270:	00000655 	andeq	r0, r0, r5, asr r6
    3274:	93070402 	movwls	r0, #29698	; 0x7402
    3278:	03000007 	movweq	r0, #7
    327c:	00363175 	eorseq	r3, r6, r5, ror r1
    3280:	004c2502 	subeq	r2, ip, r2, lsl #10
    3284:	02020000 	andeq	r0, r2, #0
    3288:	0003e807 	andeq	lr, r3, r7, lsl #16
    328c:	38750300 	ldmdacc	r5!, {r8, r9}^
    3290:	5d260200 	sfmpl	f0, 4, [r6, #-0]
    3294:	02000000 	andeq	r0, r0, #0
    3298:	06530801 	ldrbeq	r0, [r3], -r1, lsl #16
    329c:	04040000 	streq	r0, [r4], #-0
    32a0:	00000053 	andeq	r0, r0, r3, asr r0
    32a4:	00074605 	andeq	r4, r7, r5, lsl #12
    32a8:	2d030100 	stfcss	f0, [r3, #-0]
    32ac:	0000008f 	andeq	r0, r0, pc, lsl #1
    32b0:	0008e906 	andeq	lr, r8, r6, lsl #18
    32b4:	fb060000 	blx	1832be <__Stack_Size+0x182ebe>
    32b8:	01000003 	tsteq	r0, r3
    32bc:	00078506 	andeq	r8, r7, r6, lsl #10
    32c0:	22060200 	andcs	r0, r6, #0, 4
    32c4:	03000002 	movweq	r0, #2
    32c8:	07470700 	strbeq	r0, [r7, -r0, lsl #14]
    32cc:	34030000 	strcc	r0, [r3], #-0
    32d0:	0000006a 	andeq	r0, r0, sl, rrx
    32d4:	00090e08 	andeq	r0, r9, r8, lsl #28
    32d8:	38030c00 	stmdacc	r3, {sl, fp}
    32dc:	000000d7 	ldrdeq	r0, [r0], -r7
    32e0:	00029009 	andeq	r9, r2, r9
    32e4:	41500300 	cmpmi	r0, r0, lsl #6
    32e8:	00000000 	andeq	r0, r0, r0
    32ec:	00031909 	andeq	r1, r3, r9, lsl #18
    32f0:	41510300 	cmpmi	r1, r0, lsl #6
    32f4:	02000000 	andeq	r0, r0, #0
    32f8:	0015a409 	andseq	sl, r5, r9, lsl #8
    32fc:	41520300 	cmpmi	r2, r0, lsl #6
    3300:	04000000 	streq	r0, [r0], #-0
    3304:	0000e309 	andeq	lr, r0, r9, lsl #6
    3308:	e6530300 	ldrb	r0, [r3], -r0, lsl #6
    330c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3310:	00640a00 	rsbeq	r0, r4, r0, lsl #20
    3314:	00e60000 	rsceq	r0, r6, r0
    3318:	410b0000 	mrsmi	r0, (UNDEF: 11)
    331c:	00000000 	andeq	r0, r0, r0
    3320:	00d70404 	sbcseq	r0, r7, r4, lsl #8
    3324:	0f070000 	svceq	0x00070000
    3328:	03000009 	movweq	r0, #9
    332c:	00009a54 	andeq	r9, r0, r4, asr sl
    3330:	57420c00 	strbpl	r0, [r2, -r0, lsl #24]
    3334:	62030200 	andvs	r0, r3, #0, 4
    3338:	0000011b 	andeq	r0, r0, fp, lsl r1
    333c:	3062620d 	rsbcc	r6, r2, sp, lsl #4
    3340:	53650300 	cmnpl	r5, #0, 6
    3344:	00000000 	andeq	r0, r0, r0
    3348:	3162620d 	cmncc	r2, sp, lsl #4
    334c:	53660300 	cmnpl	r6, #0, 6
    3350:	01000000 	mrseq	r0, (UNDEF: 0)
    3354:	03020e00 	movweq	r0, #11776	; 0x2e00
    3358:	0001375f 	andeq	r3, r1, pc, asr r7
    335c:	00770f00 	rsbseq	r0, r7, r0, lsl #30
    3360:	00416103 	subeq	r6, r1, r3, lsl #2
    3364:	620f0000 	andvs	r0, pc, #0
    3368:	68030077 	stmdavs	r3, {r0, r1, r2, r4, r5, r6}
    336c:	000000f7 	strdeq	r0, [r0], -r7
    3370:	04100700 	ldreq	r0, [r0], #-1792	; 0x700
    3374:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
    3378:	0000011b 	andeq	r0, r0, fp, lsl r1
    337c:	00003c08 	andeq	r3, r0, r8, lsl #24
    3380:	6b031c00 	blvs	ca388 <__Stack_Size+0xc9f88>
    3384:	000001d3 	ldrdeq	r0, [r0], -r3
    3388:	00056109 	andeq	r6, r5, r9, lsl #2
    338c:	536d0300 	cmnpl	sp, #0, 6
    3390:	00000000 	andeq	r0, r0, r0
    3394:	00021609 	andeq	r1, r2, r9, lsl #12
    3398:	536e0300 	cmnpl	lr, #0, 6
    339c:	01000000 	mrseq	r0, (UNDEF: 0)
    33a0:	00042909 	andeq	r2, r4, r9, lsl #18
    33a4:	376f0300 	strbcc	r0, [pc, -r0, lsl #6]!
    33a8:	02000001 	andeq	r0, r0, #1
    33ac:	00014809 	andeq	r4, r1, r9, lsl #16
    33b0:	37700300 	ldrbcc	r0, [r0, -r0, lsl #6]!
    33b4:	04000001 	streq	r0, [r0], #-1
    33b8:	00083009 	andeq	r3, r8, r9
    33bc:	37710300 	ldrbcc	r0, [r1, -r0, lsl #6]!
    33c0:	06000001 	streq	r0, [r0], -r1
    33c4:	00093c09 	andeq	r3, r9, r9, lsl #24
    33c8:	53730300 	cmnpl	r3, #0, 6
    33cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    33d0:	0003b109 	andeq	fp, r3, r9, lsl #2
    33d4:	53740300 	cmnpl	r4, #0, 6
    33d8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    33dc:	0004b209 	andeq	fp, r4, r9, lsl #4
    33e0:	53750300 	cmnpl	r5, #0, 6
    33e4:	0a000000 	beq	33ec <__Stack_Size+0x2fec>
    33e8:	00088509 	andeq	r8, r8, r9, lsl #10
    33ec:	53760300 	cmnpl	r6, #0, 6
    33f0:	0b000000 	bleq	33f8 <__Stack_Size+0x2ff8>
    33f4:	00062d09 	andeq	r2, r6, r9, lsl #26
    33f8:	53770300 	cmnpl	r7, #0, 6
    33fc:	0c000000 	stceq	0, cr0, [r0], {-0}
    3400:	00072409 	andeq	r2, r7, r9, lsl #8
    3404:	ec7a0300 	ldcl	3, cr0, [sl], #-0
    3408:	10000000 	andne	r0, r0, r0
    340c:	003d0700 	eorseq	r0, sp, r0, lsl #14
    3410:	7b030000 	blvc	c3418 <__Stack_Size+0xc3018>
    3414:	00000142 	andeq	r0, r0, r2, asr #2
    3418:	00075308 	andeq	r5, r7, r8, lsl #6
    341c:	7d033400 	cfstrsvc	mvf3, [r3, #-0]
    3420:	00000287 	andeq	r0, r0, r7, lsl #5
    3424:	00054e09 	andeq	r4, r5, r9, lsl #28
    3428:	887f0300 	ldmdahi	pc!, {r8, r9}^	; <UNPREDICTABLE>
    342c:	00000002 	andeq	r0, r0, r2
    3430:	0003d809 	andeq	sp, r3, r9, lsl #16
    3434:	88800300 	stmhi	r0, {r8, r9}
    3438:	04000002 	streq	r0, [r0], #-2
    343c:	0007bd09 	andeq	fp, r7, r9, lsl #26
    3440:	88830300 	stmhi	r3, {r8, r9}
    3444:	08000002 	stmdaeq	r0, {r1}
    3448:	0007cf09 	andeq	ip, r7, r9, lsl #30
    344c:	88840300 	stmhi	r4, {r8, r9}
    3450:	0c000002 	stceq	0, cr0, [r0], {2}
    3454:	00052f09 	andeq	r2, r5, r9, lsl #30
    3458:	9d960300 	ldcls	3, cr0, [r6]
    345c:	10000002 	andne	r0, r0, r2
    3460:	00070809 	andeq	r0, r7, r9, lsl #16
    3464:	9da10300 	stcls	3, cr0, [r1]
    3468:	14000002 	strne	r0, [r0], #-2
    346c:	0004f909 	andeq	pc, r4, r9, lsl #18
    3470:	b7ab0300 	strlt	r0, [fp, r0, lsl #6]!
    3474:	18000002 	stmdane	r0, {r1}
    3478:	00013409 	andeq	r3, r1, r9, lsl #8
    347c:	e6ad0300 	strt	r0, [sp], r0, lsl #6
    3480:	1c000000 	stcne	0, cr0, [r0], {-0}
    3484:	00020209 	andeq	r0, r2, r9, lsl #4
    3488:	e6ae0300 	strt	r0, [lr], r0, lsl #6
    348c:	20000000 	andcs	r0, r0, r0
    3490:	00083f09 	andeq	r3, r8, r9, lsl #30
    3494:	e6af0300 	strt	r0, [pc], r0, lsl #6
    3498:	24000000 	strcs	r0, [r0], #-0
    349c:	00061509 	andeq	r1, r6, r9, lsl #10
    34a0:	e6b00300 	ldrt	r0, [r0], r0, lsl #6
    34a4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    34a8:	00058c09 	andeq	r8, r5, r9, lsl #24
    34ac:	64b20300 	ldrtvs	r0, [r2], #768	; 0x300
    34b0:	2c000000 	stccs	0, cr0, [r0], {-0}
    34b4:	0015a109 	andseq	sl, r5, r9, lsl #2
    34b8:	53b30300 			; <UNDEFINED> instruction: 0x53b30300
    34bc:	30000000 	andcc	r0, r0, r0
    34c0:	04041000 	streq	r1, [r4], #-0
    34c4:	00000287 	andeq	r0, r0, r7, lsl #5
    34c8:	00008f0a 	andeq	r8, r0, sl, lsl #30
    34cc:	00029d00 	andeq	r9, r2, r0, lsl #26
    34d0:	00530b00 	subseq	r0, r3, r0, lsl #22
    34d4:	04000000 	streq	r0, [r0], #-0
    34d8:	00028e04 	andeq	r8, r2, r4, lsl #28
    34dc:	008f0a00 	addeq	r0, pc, r0, lsl #20
    34e0:	02b70000 	adcseq	r0, r7, #0
    34e4:	530b0000 	movwpl	r0, #45056	; 0xb000
    34e8:	0b000000 	bleq	34f0 <__Stack_Size+0x30f0>
    34ec:	00000053 	andeq	r0, r0, r3, asr r0
    34f0:	a3040400 	movwge	r0, #17408	; 0x4400
    34f4:	07000002 	streq	r0, [r0, -r2]
    34f8:	00000754 	andeq	r0, r0, r4, asr r7
    34fc:	01deb503 	bicseq	fp, lr, r3, lsl #10
    3500:	61080000 	mrsvs	r0, (UNDEF: 8)
    3504:	24000006 	strcs	r0, [r0], #-6
    3508:	0341b703 	movteq	fp, #5891	; 0x1703
    350c:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    3510:	03000006 	movweq	r0, #6
    3514:	000288b9 			; <UNDEFINED> instruction: 0x000288b9
    3518:	ca090000 	bgt	243520 <__Stack_Size+0x243120>
    351c:	03000005 	movweq	r0, #5
    3520:	000288ba 			; <UNDEFINED> instruction: 0x000288ba
    3524:	e6090400 	str	r0, [r9], -r0, lsl #8
    3528:	03000005 	movweq	r0, #5
    352c:	000288bb 			; <UNDEFINED> instruction: 0x000288bb
    3530:	ec090800 	stc	8, cr0, [r9], {-0}
    3534:	03000000 	movweq	r0, #0
    3538:	000288bc 			; <UNDEFINED> instruction: 0x000288bc
    353c:	9a090c00 	bls	246544 <__Stack_Size+0x246144>
    3540:	03000006 	movweq	r0, #6
    3544:	000288bd 			; <UNDEFINED> instruction: 0x000288bd
    3548:	17091000 	strne	r1, [r9, -r0]
    354c:	03000004 	movweq	r0, #4
    3550:	000288be 			; <UNDEFINED> instruction: 0x000288be
    3554:	6c091400 	cfstrsvs	mvf1, [r9], {-0}
    3558:	03000000 	movweq	r0, #0
    355c:	000288bf 			; <UNDEFINED> instruction: 0x000288bf
    3560:	b4091800 	strlt	r1, [r9], #-2048	; 0x800
    3564:	03000005 	movweq	r0, #5
    3568:	000288c0 	andeq	r8, r2, r0, asr #17
    356c:	1c091c00 	stcne	12, cr1, [r9], {-0}
    3570:	03000000 	movweq	r0, #0
    3574:	000288c1 	andeq	r8, r2, r1, asr #17
    3578:	07002000 	streq	r2, [r0, -r0]
    357c:	00000662 	andeq	r0, r0, r2, ror #12
    3580:	02c8c303 	sbceq	ip, r8, #201326592	; 0xc000000
    3584:	4a110000 	bmi	44358c <__Stack_Size+0x44318c>
    3588:	01000005 	tsteq	r0, r5
    358c:	000fb435 	andeq	fp, pc, r5, lsr r4	; <UNPREDICTABLE>
    3590:	00003808 	andeq	r3, r0, r8, lsl #16
    3594:	129c0100 	addsne	r0, ip, #0, 2
    3598:	000005f8 	strdeq	r0, [r0], -r8
    359c:	02bdec03 	adcseq	lr, sp, #768	; 0x300
    35a0:	ec120000 	ldc	0, cr0, [r2], {-0}
    35a4:	03000013 	movweq	r0, #19
    35a8:	000341ed 	andeq	r4, r3, sp, ror #3
    35ac:	14031300 	strne	r1, [r3], #-768	; 0x300
    35b0:	27010000 	strcs	r0, [r1, -r0]
    35b4:	000001d3 	ldrdeq	r0, [r0], -r3
    35b8:	02ec0305 	rsceq	r0, ip, #335544320	; 0x14000000
    35bc:	c6132000 	ldrgt	r2, [r3], -r0
    35c0:	01000013 	tsteq	r0, r3, lsl r0
    35c4:	00005318 	andeq	r5, r0, r8, lsl r3
    35c8:	e8030500 	stmda	r3, {r8, sl}
    35cc:	13200002 	teqne	r0, #2
    35d0:	0000027c 	andeq	r0, r0, ip, ror r2
    35d4:	03a61d01 			; <UNDEFINED> instruction: 0x03a61d01
    35d8:	03050000 	movweq	r0, #20480	; 0x5000
    35dc:	2000030c 	andcs	r0, r0, ip, lsl #6
    35e0:	01d30404 	bicseq	r0, r3, r4, lsl #8
    35e4:	40130000 	andsmi	r0, r3, r0
    35e8:	01000005 	tsteq	r0, r5
    35ec:	0003bd20 	andeq	fp, r3, r0, lsr #26
    35f0:	e4030500 	str	r0, [r3], #-1280	; 0x500
    35f4:	04200002 	strteq	r0, [r0], #-2
    35f8:	0002bd04 	andeq	fp, r2, r4, lsl #26
    35fc:	13eb1300 	mvnne	r1, #0, 6
    3600:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    3604:	000003d4 	ldrdeq	r0, [r0], -r4
    3608:	03080305 	movweq	r0, #33541	; 0x8305
    360c:	04042000 	streq	r2, [r4], #-0
    3610:	00000341 	andeq	r0, r0, r1, asr #6
    3614:	0013ce13 	andseq	ip, r3, r3, lsl lr
    3618:	41250100 	teqmi	r5, r0, lsl #2
    361c:	05000000 	streq	r0, [r0, #-0]
    3620:	0002e003 	andeq	lr, r2, r3
    3624:	04d31320 	ldrbeq	r1, [r3], #800	; 0x320
    3628:	26010000 	strcs	r0, [r1], -r0
    362c:	00000041 	andeq	r0, r0, r1, asr #32
    3630:	03100305 	tsteq	r0, #335544320	; 0x14000000
    3634:	e0002000 	and	r2, r0, r0
    3638:	0400000d 	streq	r0, [r0], #-13
    363c:	000f9400 	andeq	r9, pc, r0, lsl #8
    3640:	58010400 	stmdapl	r1, {sl}
    3644:	01000001 	tsteq	r0, r1
    3648:	0000140f 	andeq	r1, r0, pc, lsl #8
    364c:	0000037b 	andeq	r0, r0, fp, ror r3
    3650:	00000578 	andeq	r0, r0, r8, ror r5
    3654:	00000000 	andeq	r0, r0, r0
    3658:	000010a7 	andeq	r1, r0, r7, lsr #1
    365c:	f6050402 			; <UNDEFINED> instruction: 0xf6050402
    3660:	02000001 	andeq	r0, r0, #1
    3664:	06a90502 	strteq	r0, [r9], r2, lsl #10
    3668:	01020000 	mrseq	r0, (UNDEF: 2)
    366c:	00065506 	andeq	r5, r6, r6, lsl #10
    3670:	33750300 	cmncc	r5, #0, 6
    3674:	24020032 	strcs	r0, [r2], #-50	; 0x32
    3678:	00000045 	andeq	r0, r0, r5, asr #32
    367c:	93070402 	movwls	r0, #29698	; 0x7402
    3680:	03000007 	movweq	r0, #7
    3684:	00363175 	eorseq	r3, r6, r5, ror r1
    3688:	00572502 	subseq	r2, r7, r2, lsl #10
    368c:	02020000 	andeq	r0, r2, #0
    3690:	0003e807 	andeq	lr, r3, r7, lsl #16
    3694:	38750300 	ldmdacc	r5!, {r8, r9}^
    3698:	68260200 	stmdavs	r6!, {r9}
    369c:	02000000 	andeq	r0, r0, #0
    36a0:	06530801 	ldrbeq	r0, [r3], -r1, lsl #16
    36a4:	57040000 	strpl	r0, [r4, -r0]
    36a8:	02000004 	andeq	r0, r0, #4
    36ac:	00007a2c 	andeq	r7, r0, ip, lsr #20
    36b0:	00450500 	subeq	r0, r5, r0, lsl #10
    36b4:	01060000 	mrseq	r0, (UNDEF: 6)
    36b8:	00943602 	addseq	r3, r4, r2, lsl #12
    36bc:	e0070000 	and	r0, r7, r0
    36c0:	00000005 	andeq	r0, r0, r5
    36c4:	00074e07 	andeq	r4, r7, r7, lsl #28
    36c8:	04000100 	streq	r0, [r0], #-256	; 0x100
    36cc:	00000444 	andeq	r0, r0, r4, asr #8
    36d0:	007f3902 	rsbseq	r3, pc, r2, lsl #18
    36d4:	6b080000 	blvs	2036dc <__Stack_Size+0x2032dc>
    36d8:	01000003 	tsteq	r0, r3
    36dc:	00c41603 	sbceq	r1, r4, r3, lsl #12
    36e0:	fe070000 	cdp2	0, 0, cr0, cr7, cr0, {0}
    36e4:	00000000 	andeq	r0, r0, r0
    36e8:	0002aa07 	andeq	sl, r2, r7, lsl #20
    36ec:	15070100 	strne	r0, [r7, #-256]	; 0x100
    36f0:	02000008 	andeq	r0, r0, #8
    36f4:	00043407 	andeq	r3, r4, r7, lsl #8
    36f8:	08000300 	stmdaeq	r0, {r8, r9}
    36fc:	00000666 	andeq	r0, r0, r6, ror #12
    3700:	251f0301 	ldrcs	r0, [pc, #-769]	; 3407 <__Stack_Size+0x3007>
    3704:	07000001 	streq	r0, [r0, -r1]
    3708:	00001581 	andeq	r1, r0, r1, lsl #11
    370c:	17b00700 	ldrne	r0, [r0, r0, lsl #14]!
    3710:	07010000 	streq	r0, [r1, -r0]
    3714:	00000cea 	andeq	r0, r0, sl, ror #25
    3718:	158c0702 	strne	r0, [ip, #1794]	; 0x702
    371c:	07030000 	streq	r0, [r3, -r0]
    3720:	00000c7f 	andeq	r0, r0, pc, ror ip
    3724:	173f0704 	ldrne	r0, [pc, -r4, lsl #14]!
    3728:	07050000 	streq	r0, [r5, -r0]
    372c:	0000176f 	andeq	r1, r0, pc, ror #14
    3730:	15f60706 	ldrbne	r0, [r6, #1798]!	; 0x706
    3734:	07070000 	streq	r0, [r7, -r0]
    3738:	00001655 	andeq	r1, r0, r5, asr r6
    373c:	16a60708 	strtne	r0, [r6], r8, lsl #14
    3740:	07090000 	streq	r0, [r9, -r0]
    3744:	00001557 	andeq	r1, r0, r7, asr r5
    3748:	1605070a 	strne	r0, [r5], -sl, lsl #14
    374c:	070b0000 	streq	r0, [fp, -r0]
    3750:	000016c8 	andeq	r1, r0, r8, asr #13
    3754:	15d4070c 	ldrbne	r0, [r4, #1804]	; 0x70c
    3758:	000c0000 	andeq	r0, ip, r0
    375c:	00167608 	andseq	r7, r6, r8, lsl #12
    3760:	32030100 	andcc	r0, r3, #0, 2
    3764:	00000150 	andeq	r0, r0, r0, asr r1
    3768:	0014c107 	andseq	ip, r4, r7, lsl #2
    376c:	20070100 	andcs	r0, r7, r0, lsl #2
    3770:	02000017 	andeq	r0, r0, #23
    3774:	0014d307 	andseq	sp, r4, r7, lsl #6
    3778:	d7070300 	strle	r0, [r7, -r0, lsl #6]
    377c:	04000016 	streq	r0, [r0], #-22
    3780:	00170c07 	andseq	r0, r7, r7, lsl #24
    3784:	08000500 	stmdaeq	r0, {r8, sl}
    3788:	00001613 	andeq	r1, r0, r3, lsl r6
    378c:	693c0301 	ldmdbvs	ip!, {r0, r8, r9}
    3790:	07000001 	streq	r0, [r0, -r1]
    3794:	00001422 	andeq	r1, r0, r2, lsr #8
    3798:	14800700 	strne	r0, [r0], #1792	; 0x700
    379c:	00010000 	andeq	r0, r1, r0
    37a0:	00166708 	andseq	r6, r6, r8, lsl #14
    37a4:	16040100 	strne	r0, [r4], -r0, lsl #2
    37a8:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    37ac:	00178b07 	andseq	r8, r7, r7, lsl #22
    37b0:	87070000 	strhi	r0, [r7, -r0]
    37b4:	01000016 	tsteq	r0, r6, lsl r0
    37b8:	00150b07 	andseq	r0, r5, r7, lsl #22
    37bc:	c3070200 	movwgt	r0, #29184	; 0x7200
    37c0:	03000017 	movweq	r0, #23
    37c4:	00150607 	andseq	r0, r5, r7, lsl #12
    37c8:	be070400 	cfcpyslt	mvf0, mvf7
    37cc:	05000017 	streq	r0, [r0, #-23]
    37d0:	0017a107 	andseq	sl, r7, r7, lsl #2
    37d4:	b8070600 	stmdalt	r7, {r9, sl}
    37d8:	07000016 	smladeq	r0, r6, r0, r0
    37dc:	00149507 	andseq	r9, r4, r7, lsl #10
    37e0:	47070800 	strmi	r0, [r7, -r0, lsl #16]
    37e4:	09000015 	stmdbeq	r0, {r0, r2, r4}
    37e8:	008c0900 	addeq	r0, ip, r0, lsl #18
    37ec:	04080000 	streq	r0, [r8], #-0
    37f0:	0001d724 	andeq	sp, r1, r4, lsr #14
    37f4:	013d0a00 	teqeq	sp, r0, lsl #20
    37f8:	26040000 	strcs	r0, [r4], -r0
    37fc:	000001d7 	ldrdeq	r0, [r0], -r7
    3800:	05a40a00 	streq	r0, [r4, #2560]!	; 0xa00
    3804:	27040000 	strcs	r0, [r4, -r0]
    3808:	0000004c 	andeq	r0, r0, ip, asr #32
    380c:	040b0004 	streq	r0, [fp], #-4
    3810:	0000005e 	andeq	r0, r0, lr, asr r0
    3814:	0002d604 	andeq	sp, r2, r4, lsl #12
    3818:	b2290400 	eorlt	r0, r9, #0, 8
    381c:	08000001 	stmdaeq	r0, {r0}
    3820:	00000746 	andeq	r0, r0, r6, asr #14
    3824:	0d2d0401 	cfstrseq	mvf0, [sp, #-4]!
    3828:	07000002 	streq	r0, [r0, -r2]
    382c:	000008e9 	andeq	r0, r0, r9, ror #17
    3830:	03fb0700 	mvnseq	r0, #0, 14
    3834:	07010000 	streq	r0, [r1, -r0]
    3838:	00000785 	andeq	r0, r0, r5, lsl #15
    383c:	02220702 	eoreq	r0, r2, #524288	; 0x80000
    3840:	00030000 	andeq	r0, r3, r0
    3844:	00074704 	andeq	r4, r7, r4, lsl #14
    3848:	e8340400 	ldmda	r4!, {sl}
    384c:	09000001 	stmdbeq	r0, {r0}
    3850:	0000090e 	andeq	r0, r0, lr, lsl #18
    3854:	5538040c 	ldrpl	r0, [r8, #-1036]!	; 0x40c
    3858:	0a000002 	beq	3868 <__Stack_Size+0x3468>
    385c:	00000290 	muleq	r0, r0, r2
    3860:	004c5004 	subeq	r5, ip, r4
    3864:	0a000000 	beq	386c <__Stack_Size+0x346c>
    3868:	00000319 	andeq	r0, r0, r9, lsl r3
    386c:	004c5104 	subeq	r5, ip, r4, lsl #2
    3870:	0a020000 	beq	83878 <__Stack_Size+0x83478>
    3874:	000015a4 	andeq	r1, r0, r4, lsr #11
    3878:	004c5204 	subeq	r5, ip, r4, lsl #4
    387c:	0a040000 	beq	103884 <__Stack_Size+0x103484>
    3880:	000000e3 	andeq	r0, r0, r3, ror #1
    3884:	02645304 	rsbeq	r5, r4, #4, 6	; 0x10000000
    3888:	00080000 	andeq	r0, r8, r0
    388c:	0001d70c 	andeq	sp, r1, ip, lsl #14
    3890:	00026400 	andeq	r6, r2, r0, lsl #8
    3894:	004c0d00 	subeq	r0, ip, r0, lsl #26
    3898:	0b000000 	bleq	38a0 <__Stack_Size+0x34a0>
    389c:	00025504 	andeq	r5, r2, r4, lsl #10
    38a0:	090f0400 	stmdbeq	pc, {sl}	; <UNPREDICTABLE>
    38a4:	54040000 	strpl	r0, [r4], #-0
    38a8:	00000218 	andeq	r0, r0, r8, lsl r2
    38ac:	0007f009 	andeq	pc, r7, r9
    38b0:	58040200 	stmdapl	r4, {r9}
    38b4:	0000029a 	muleq	r0, sl, r2
    38b8:	00092d0a 	andeq	r2, r9, sl, lsl #26
    38bc:	5e5a0400 	cdppl	4, 5, cr0, cr10, cr0, {0}
    38c0:	00000000 	andeq	r0, r0, r0
    38c4:	0003c10a 	andeq	ip, r3, sl, lsl #2
    38c8:	5e5b0400 	cdppl	4, 5, cr0, cr11, cr0, {0}
    38cc:	01000000 	mrseq	r0, (UNDEF: 0)
    38d0:	07f10400 	ldrbeq	r0, [r1, r0, lsl #8]!
    38d4:	5d040000 	stcpl	0, cr0, [r4, #-0]
    38d8:	00000275 	andeq	r0, r0, r5, ror r2
    38dc:	0057420e 	subseq	r4, r7, lr, lsl #4
    38e0:	c9620402 	stmdbgt	r2!, {r1, sl}^
    38e4:	0f000002 	svceq	0x00000002
    38e8:	00306262 	eorseq	r6, r0, r2, ror #4
    38ec:	005e6504 	subseq	r6, lr, r4, lsl #10
    38f0:	0f000000 	svceq	0x00000000
    38f4:	00316262 	eorseq	r6, r1, r2, ror #4
    38f8:	005e6604 	subseq	r6, lr, r4, lsl #12
    38fc:	00010000 	andeq	r0, r1, r0
    3900:	5f040210 	svcpl	0x00040210
    3904:	000002e5 	andeq	r0, r0, r5, ror #5
    3908:	04007711 	streq	r7, [r0], #-1809	; 0x711
    390c:	00004c61 	andeq	r4, r0, r1, ror #24
    3910:	77621100 	strbvc	r1, [r2, -r0, lsl #2]!
    3914:	a5680400 	strbge	r0, [r8, #-1024]!	; 0x400
    3918:	00000002 	andeq	r0, r0, r2
    391c:	00041004 	andeq	r1, r4, r4
    3920:	c9690400 	stmdbgt	r9!, {sl}^
    3924:	09000002 	stmdbeq	r0, {r1}
    3928:	0000003c 	andeq	r0, r0, ip, lsr r0
    392c:	816b041c 	cmnhi	fp, ip, lsl r4
    3930:	0a000003 	beq	3944 <__Stack_Size+0x3544>
    3934:	00000561 	andeq	r0, r0, r1, ror #10
    3938:	005e6d04 	subseq	r6, lr, r4, lsl #26
    393c:	0a000000 	beq	3944 <__Stack_Size+0x3544>
    3940:	00000216 	andeq	r0, r0, r6, lsl r2
    3944:	005e6e04 	subseq	r6, lr, r4, lsl #28
    3948:	0a010000 	beq	43950 <__Stack_Size+0x43550>
    394c:	00000429 	andeq	r0, r0, r9, lsr #8
    3950:	02e56f04 	rsceq	r6, r5, #4, 30
    3954:	0a020000 	beq	8395c <__Stack_Size+0x8355c>
    3958:	00000148 	andeq	r0, r0, r8, asr #2
    395c:	02e57004 	rsceq	r7, r5, #4
    3960:	0a040000 	beq	103968 <__Stack_Size+0x103568>
    3964:	00000830 	andeq	r0, r0, r0, lsr r8
    3968:	02e57104 	rsceq	r7, r5, #4, 2
    396c:	0a060000 	beq	183974 <__Stack_Size+0x183574>
    3970:	0000093c 	andeq	r0, r0, ip, lsr r9
    3974:	005e7304 	subseq	r7, lr, r4, lsl #6
    3978:	0a080000 	beq	203980 <__Stack_Size+0x203580>
    397c:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
    3980:	005e7404 	subseq	r7, lr, r4, lsl #8
    3984:	0a090000 	beq	24398c <__Stack_Size+0x24358c>
    3988:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
    398c:	005e7504 	subseq	r7, lr, r4, lsl #10
    3990:	0a0a0000 	beq	283998 <__Stack_Size+0x283598>
    3994:	00000885 	andeq	r0, r0, r5, lsl #17
    3998:	005e7604 	subseq	r7, lr, r4, lsl #12
    399c:	0a0b0000 	beq	2c39a4 <__Stack_Size+0x2c35a4>
    39a0:	0000062d 	andeq	r0, r0, sp, lsr #12
    39a4:	005e7704 	subseq	r7, lr, r4, lsl #14
    39a8:	0a0c0000 	beq	3039b0 <__Stack_Size+0x3035b0>
    39ac:	00000724 	andeq	r0, r0, r4, lsr #14
    39b0:	026a7a04 	rsbeq	r7, sl, #4, 20	; 0x4000
    39b4:	00100000 	andseq	r0, r0, r0
    39b8:	00003d04 	andeq	r3, r0, r4, lsl #26
    39bc:	f07b0400 			; <UNDEFINED> instruction: 0xf07b0400
    39c0:	09000002 	stmdbeq	r0, {r1}
    39c4:	00000753 	andeq	r0, r0, r3, asr r7
    39c8:	357d0434 	ldrbcc	r0, [sp, #-1076]!	; 0x434
    39cc:	0a000004 	beq	39e4 <__Stack_Size+0x35e4>
    39d0:	0000054e 	andeq	r0, r0, lr, asr #10
    39d4:	04367f04 	ldrteq	r7, [r6], #-3844	; 0xf04
    39d8:	0a000000 	beq	39e0 <__Stack_Size+0x35e0>
    39dc:	000003d8 	ldrdeq	r0, [r0], -r8
    39e0:	04368004 	ldrteq	r8, [r6], #-4
    39e4:	0a040000 	beq	1039ec <__Stack_Size+0x1035ec>
    39e8:	000007bd 			; <UNDEFINED> instruction: 0x000007bd
    39ec:	04368304 	ldrteq	r8, [r6], #-772	; 0x304
    39f0:	0a080000 	beq	2039f8 <__Stack_Size+0x2035f8>
    39f4:	000007cf 	andeq	r0, r0, pc, asr #15
    39f8:	04368404 	ldrteq	r8, [r6], #-1028	; 0x404
    39fc:	0a0c0000 	beq	303a04 <__Stack_Size+0x303604>
    3a00:	0000052f 	andeq	r0, r0, pc, lsr #10
    3a04:	044b9604 	strbeq	r9, [fp], #-1540	; 0x604
    3a08:	0a100000 	beq	403a10 <__Stack_Size+0x403610>
    3a0c:	00000708 	andeq	r0, r0, r8, lsl #14
    3a10:	044ba104 	strbeq	sl, [fp], #-260	; 0x104
    3a14:	0a140000 	beq	503a1c <__Stack_Size+0x50361c>
    3a18:	000004f9 	strdeq	r0, [r0], -r9
    3a1c:	0465ab04 	strbteq	sl, [r5], #-2820	; 0xb04
    3a20:	0a180000 	beq	603a28 <__Stack_Size+0x603628>
    3a24:	00000134 	andeq	r0, r0, r4, lsr r1
    3a28:	0264ad04 	rsbeq	sl, r4, #4, 26	; 0x100
    3a2c:	0a1c0000 	beq	703a34 <__Stack_Size+0x703634>
    3a30:	00000202 	andeq	r0, r0, r2, lsl #4
    3a34:	0264ae04 	rsbeq	sl, r4, #4, 28	; 0x40
    3a38:	0a200000 	beq	803a40 <__Stack_Size+0x803640>
    3a3c:	0000083f 	andeq	r0, r0, pc, lsr r8
    3a40:	0264af04 	rsbeq	sl, r4, #4, 30
    3a44:	0a240000 	beq	903a4c <__Stack_Size+0x90364c>
    3a48:	00000615 	andeq	r0, r0, r5, lsl r6
    3a4c:	0264b004 	rsbeq	fp, r4, #4
    3a50:	0a280000 	beq	a03a58 <__Stack_Size+0xa03658>
    3a54:	0000058c 	andeq	r0, r0, ip, lsl #11
    3a58:	01d7b204 	bicseq	fp, r7, r4, lsl #4
    3a5c:	0a2c0000 	beq	b03a64 <__Stack_Size+0xb03664>
    3a60:	000015a1 	andeq	r1, r0, r1, lsr #11
    3a64:	005eb304 	subseq	fp, lr, r4, lsl #6
    3a68:	00300000 	eorseq	r0, r0, r0
    3a6c:	35040b12 	strcc	r0, [r4, #-2834]	; 0xb12
    3a70:	0c000004 	stceq	0, cr0, [r0], {4}
    3a74:	0000020d 	andeq	r0, r0, sp, lsl #4
    3a78:	0000044b 	andeq	r0, r0, fp, asr #8
    3a7c:	00005e0d 	andeq	r5, r0, sp, lsl #28
    3a80:	040b0000 	streq	r0, [fp], #-0
    3a84:	0000043c 	andeq	r0, r0, ip, lsr r4
    3a88:	00020d0c 	andeq	r0, r2, ip, lsl #26
    3a8c:	00046500 	andeq	r6, r4, r0, lsl #10
    3a90:	005e0d00 	subseq	r0, lr, r0, lsl #26
    3a94:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    3a98:	00000000 	andeq	r0, r0, r0
    3a9c:	0451040b 	ldrbeq	r0, [r1], #-1035	; 0x40b
    3aa0:	54040000 	strpl	r0, [r4], #-0
    3aa4:	04000007 	streq	r0, [r0], #-7
    3aa8:	00038cb5 			; <UNDEFINED> instruction: 0x00038cb5
    3aac:	06610900 	strbteq	r0, [r1], -r0, lsl #18
    3ab0:	04240000 	strteq	r0, [r4], #-0
    3ab4:	0004efb7 			; <UNDEFINED> instruction: 0x0004efb7
    3ab8:	06ce0a00 	strbeq	r0, [lr], r0, lsl #20
    3abc:	b9040000 	stmdblt	r4, {}	; <UNPREDICTABLE>
    3ac0:	00000436 	andeq	r0, r0, r6, lsr r4
    3ac4:	05ca0a00 	strbeq	r0, [sl, #2560]	; 0xa00
    3ac8:	ba040000 	blt	103ad0 <__Stack_Size+0x1036d0>
    3acc:	00000436 	andeq	r0, r0, r6, lsr r4
    3ad0:	05e60a04 	strbeq	r0, [r6, #2564]!	; 0xa04
    3ad4:	bb040000 	bllt	103adc <__Stack_Size+0x1036dc>
    3ad8:	00000436 	andeq	r0, r0, r6, lsr r4
    3adc:	00ec0a08 	rsceq	r0, ip, r8, lsl #20
    3ae0:	bc040000 	stclt	0, cr0, [r4], {-0}
    3ae4:	00000436 	andeq	r0, r0, r6, lsr r4
    3ae8:	069a0a0c 	ldreq	r0, [sl], ip, lsl #20
    3aec:	bd040000 	stclt	0, cr0, [r4, #-0]
    3af0:	00000436 	andeq	r0, r0, r6, lsr r4
    3af4:	04170a10 	ldreq	r0, [r7], #-2576	; 0xa10
    3af8:	be040000 	cdplt	0, 0, cr0, cr4, cr0, {0}
    3afc:	00000436 	andeq	r0, r0, r6, lsr r4
    3b00:	006c0a14 	rsbeq	r0, ip, r4, lsl sl
    3b04:	bf040000 	svclt	0x00040000
    3b08:	00000436 	andeq	r0, r0, r6, lsr r4
    3b0c:	05b40a18 	ldreq	r0, [r4, #2584]!	; 0xa18
    3b10:	c0040000 	andgt	r0, r4, r0
    3b14:	00000436 	andeq	r0, r0, r6, lsr r4
    3b18:	001c0a1c 	andseq	r0, ip, ip, lsl sl
    3b1c:	c1040000 	mrsgt	r0, (UNDEF: 4)
    3b20:	00000436 	andeq	r0, r0, r6, lsr r4
    3b24:	62040020 	andvs	r0, r4, #32
    3b28:	04000006 	streq	r0, [r0], #-6
    3b2c:	000476c3 	andeq	r7, r4, r3, asr #13
    3b30:	16251300 	strtne	r1, [r5], -r0, lsl #6
    3b34:	35010000 	strcc	r0, [r1, #-0]
    3b38:	000001d7 	ldrdeq	r0, [r0], -r7
    3b3c:	08000fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp}
    3b40:	00000024 	andeq	r0, r0, r4, lsr #32
    3b44:	05239c01 	streq	r9, [r3, #-3073]!	; 0xc01
    3b48:	ff140000 			; <UNDEFINED> instruction: 0xff140000
    3b4c:	01000014 	tsteq	r0, r4, lsl r0
    3b50:	00004c35 	andeq	r4, r0, r5, lsr ip
    3b54:	0015d300 	andseq	sp, r5, r0, lsl #6
    3b58:	e0130000 	ands	r0, r3, r0
    3b5c:	01000015 	tsteq	r0, r5, lsl r0
    3b60:	0001d763 	andeq	sp, r1, r3, ror #14
    3b64:	00101000 	andseq	r1, r0, r0
    3b68:	00002408 	andeq	r2, r0, r8, lsl #8
    3b6c:	4c9c0100 	ldfmis	f0, [ip], {0}
    3b70:	14000005 	strne	r0, [r0], #-5
    3b74:	000014ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    3b78:	004c6301 	subeq	r6, ip, r1, lsl #6
    3b7c:	15f40000 	ldrbne	r0, [r4, #0]!
    3b80:	13000000 	movwne	r0, #0
    3b84:	000016f9 	strdeq	r1, [r0], -r9
    3b88:	01d79b01 	bicseq	r9, r7, r1, lsl #22
    3b8c:	10340000 	eorsne	r0, r4, r0
    3b90:	00900800 	addseq	r0, r0, r0, lsl #16
    3b94:	9c010000 	stcls	0, cr0, [r1], {-0}
    3b98:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    3b9c:	0014ff14 	andseq	pc, r4, r4, lsl pc	; <UNPREDICTABLE>
    3ba0:	4c9b0100 	ldfmis	f0, [fp], {0}
    3ba4:	15000000 	strne	r0, [r0, #-0]
    3ba8:	15000016 	strne	r0, [r0, #-22]
    3bac:	08001054 	stmdaeq	r0, {r2, r4, r6, ip}
    3bb0:	0000001c 	andeq	r0, r0, ip, lsl r0
    3bb4:	00000591 	muleq	r0, r1, r5
    3bb8:	0003b916 	andeq	fp, r3, r6, lsl r9
    3bbc:	5ea90100 	fdvple	f0, f1, f0
    3bc0:	36000000 	strcc	r0, [r0], -r0
    3bc4:	00000016 	andeq	r0, r0, r6, lsl r0
    3bc8:	00107817 	andseq	r7, r0, r7, lsl r8
    3bcc:	00003008 	andeq	r3, r0, r8
    3bd0:	174b1600 	strbne	r1, [fp, -r0, lsl #12]
    3bd4:	c3010000 	movwgt	r0, #4096	; 0x1000
    3bd8:	0000005e 	andeq	r0, r0, lr, asr r0
    3bdc:	0000164a 	andeq	r1, r0, sl, asr #12
    3be0:	00176718 	andseq	r6, r7, r8, lsl r7
    3be4:	5ec40100 	polpls	f0, f4, f0
    3be8:	00000000 	andeq	r0, r0, r0
    3bec:	14741900 	ldrbtne	r1, [r4], #-2304	; 0x900
    3bf0:	e0010000 	and	r0, r1, r0
    3bf4:	0010c401 	andseq	ip, r0, r1, lsl #8
    3bf8:	0000a808 	andeq	sl, r0, r8, lsl #16
    3bfc:	7b9c0100 	blvc	fe704004 <BootRAM+0xd6747a5>
    3c00:	1a000006 	bne	3c20 <__Stack_Size+0x3820>
    3c04:	00001737 	andeq	r1, r0, r7, lsr r7
    3c08:	7b01e201 	blvc	7c414 <__Stack_Size+0x7c014>
    3c0c:	7b000006 	blvc	3c2c <__Stack_Size+0x382c>
    3c10:	1a000016 	bne	3c70 <__Stack_Size+0x3870>
    3c14:	000016ec 	andeq	r1, r0, ip, ror #13
    3c18:	3a01e301 	bcc	7c824 <__Stack_Size+0x7c424>
    3c1c:	90000000 	andls	r0, r0, r0
    3c20:	1a000016 	bne	3c80 <__Stack_Size+0x3880>
    3c24:	0000093c 	andeq	r0, r0, ip, lsr r9
    3c28:	3a01e401 	bcc	7cc34 <__Stack_Size+0x7c834>
    3c2c:	d4000000 	strle	r0, [r0], #-0
    3c30:	1a000016 	bne	3c90 <__Stack_Size+0x3890>
    3c34:	00001446 	andeq	r1, r0, r6, asr #8
    3c38:	d701e601 	strle	lr, [r1, -r1, lsl #12]
    3c3c:	1f000001 	svcne	0x00000001
    3c40:	1a000017 	bne	3ca4 <__Stack_Size+0x38a4>
    3c44:	000014ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    3c48:	3a01e701 	bcc	7d854 <__Stack_Size+0x7d454>
    3c4c:	3d000000 	stccc	0, cr0, [r0, #-0]
    3c50:	1b000017 	blne	3cb4 <__Stack_Size+0x38b4>
    3c54:	00001535 	andeq	r1, r0, r5, lsr r5
    3c58:	48021001 	stmdami	r2, {r0, ip}
    3c5c:	1c080011 	stcne	0, cr0, [r8], {17}
    3c60:	08001116 	stmdaeq	r0, {r1, r2, r4, r8, ip}
    3c64:	00000638 	andeq	r0, r0, r8, lsr r6
    3c68:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    3c6c:	1e000075 	mcrne	0, 0, r0, cr0, cr5, {3}
    3c70:	0800111e 	stmdaeq	r0, {r1, r2, r3, r4, r8, ip}
    3c74:	00000d1c 	andeq	r0, r0, ip, lsl sp
    3c78:	0000064b 	andeq	r0, r0, fp, asr #12
    3c7c:	0150011d 	cmpeq	r0, sp, lsl r1
    3c80:	281e0030 	ldmdacs	lr, {r4, r5}
    3c84:	32080011 	andcc	r0, r8, #17
    3c88:	6500000d 	strvs	r0, [r0, #-13]
    3c8c:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    3c90:	75025201 	strvc	r5, [r2, #-513]	; 0x201
    3c94:	50011d00 	andpl	r1, r1, r0, lsl #26
    3c98:	00007902 	andeq	r7, r0, r2, lsl #18
    3c9c:	0011301f 	andseq	r3, r1, pc, lsl r0
    3ca0:	000d4d08 	andeq	r4, sp, r8, lsl #26
    3ca4:	51011d00 	tstpl	r1, r0, lsl #26
    3ca8:	1d007502 	cfstr32ne	mvfx7, [r0, #-8]
    3cac:	30015001 	andcc	r5, r1, r1
    3cb0:	040b0000 	streq	r0, [fp], #-0
    3cb4:	0000026a 	andeq	r0, r0, sl, ror #4
    3cb8:	00145a20 	andseq	r5, r4, r0, lsr #20
    3cbc:	0d4a0100 	stfeqe	f0, [sl, #-0]
    3cc0:	6c000002 	stcvs	0, cr0, [r0], {2}
    3cc4:	38080011 	stmdacc	r8, {r0, r4}
    3cc8:	01000000 	mrseq	r0, (UNDEF: 0)
    3ccc:	151f139c 	ldrne	r1, [pc, #-924]	; 3938 <__Stack_Size+0x3538>
    3cd0:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    3cd4:	0000020d 	andeq	r0, r0, sp, lsl #4
    3cd8:	080011a4 	stmdaeq	r0, {r2, r5, r7, r8, ip}
    3cdc:	00000048 	andeq	r0, r0, r8, asr #32
    3ce0:	06be9c01 	ldrteq	r9, [lr], r1, lsl #24
    3ce4:	52210000 	eorpl	r0, r1, #0
    3ce8:	7a010065 	bvc	43e84 <__Stack_Size+0x43a84>
    3cec:	0000020d 	andeq	r0, r0, sp, lsl #4
    3cf0:	0000177b 	andeq	r1, r0, fp, ror r7
    3cf4:	163f1300 	ldrtne	r1, [pc], -r0, lsl #6
    3cf8:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    3cfc:	0000020d 	andeq	r0, r0, sp, lsl #4
    3d00:	080011ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip}
    3d04:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3d08:	07969c01 	ldreq	r9, [r6, r1, lsl #24]
    3d0c:	9d160000 	ldcls	0, cr0, [r6, #-0]
    3d10:	01000014 	tsteq	r0, r4, lsl r0
    3d14:	00003aeb 	andeq	r3, r0, fp, ror #21
    3d18:	00179900 	andseq	r9, r7, r0, lsl #18
    3d1c:	0e0d1600 	cfmadd32eq	mvax0, mvfx1, mvfx13, mvfx0
    3d20:	ec010000 	stc	0, cr0, [r1], {-0}
    3d24:	0000003a 	andeq	r0, r0, sl, lsr r0
    3d28:	000017d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    3d2c:	00120817 	andseq	r0, r2, r7, lsl r8
    3d30:	00009e08 	andeq	r9, r0, r8, lsl #28
    3d34:	15af1800 	strne	r1, [pc, #2048]!	; 453c <__Stack_Size+0x413c>
    3d38:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    3d3c:	00000796 	muleq	r0, r6, r7
    3d40:	00174b16 	andseq	r4, r7, r6, lsl fp
    3d44:	3af70100 	bcc	ffdc414c <BootRAM+0xed348ed>
    3d48:	fa000000 	blx	3d50 <__Stack_Size+0x3950>
    3d4c:	16000017 			; <UNDEFINED> instruction: 0x16000017
    3d50:	00001767 	andeq	r1, r0, r7, ror #14
    3d54:	003af801 	eorseq	pc, sl, r1, lsl #16
    3d58:	18230000 	stmdane	r3!, {}	; <UNPREDICTABLE>
    3d5c:	72210000 	eorvc	r0, r1, #0
    3d60:	01005045 	tsteq	r0, r5, asr #32
    3d64:	00003af9 	strdeq	r3, [r0], -r9
    3d68:	0017fa00 	andseq	pc, r7, r0, lsl #20
    3d6c:	12881500 	addne	r1, r8, #0, 10
    3d70:	00120800 	andseq	r0, r2, r0, lsl #16
    3d74:	07540000 	ldrbeq	r0, [r4, -r0]
    3d78:	6c1a0000 	ldcvs	0, cr0, [sl], {-0}
    3d7c:	01000004 	tsteq	r0, r4
    3d80:	004c012f 	subeq	r0, ip, pc, lsr #2
    3d84:	183b0000 	ldmdane	fp!, {}	; <UNPREDICTABLE>
    3d88:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    3d8c:	08001262 	stmdaeq	r0, {r1, r5, r6, r9, ip}
    3d90:	00000d64 	andeq	r0, r0, r4, ror #26
    3d94:	00000768 	andeq	r0, r0, r8, ror #14
    3d98:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    3d9c:	1e000074 	mcrne	0, 0, r0, cr0, cr4, {3}
    3da0:	0800126a 	stmdaeq	r0, {r1, r3, r5, r6, r9, ip}
    3da4:	00000d76 	andeq	r0, r0, r6, ror sp
    3da8:	00000782 	andeq	r0, r0, r2, lsl #15
    3dac:	0251011d 	subseq	r0, r1, #1073741831	; 0x40000007
    3db0:	011d3008 	tsteq	sp, r8
    3db4:	00740250 	rsbseq	r0, r4, r0, asr r2
    3db8:	12822200 	addne	r2, r2, #0, 4
    3dbc:	0d8d0800 	stceq	8, cr0, [sp]
    3dc0:	88220000 	stmdahi	r2!, {}	; <UNPREDICTABLE>
    3dc4:	a4080012 	strge	r0, [r8], #-18
    3dc8:	0000000d 	andeq	r0, r0, sp
    3dcc:	9a040b00 	bls	1069d4 <__Stack_Size+0x1065d4>
    3dd0:	23000002 	movwcs	r0, #2
    3dd4:	00001565 	andeq	r1, r0, r5, ror #10
    3dd8:	0d014201 	sfmeq	f4, 4, [r1, #-4]
    3ddc:	bc000002 	stclt	0, cr0, [r0], {2}
    3de0:	84080012 	strhi	r0, [r8], #-18
    3de4:	01000000 	mrseq	r0, (UNDEF: 0)
    3de8:	00082b9c 	muleq	r8, ip, fp
    3dec:	17671a00 	strbne	r1, [r7, -r0, lsl #20]!
    3df0:	44010000 	strmi	r0, [r1], #-0
    3df4:	00003a01 	andeq	r3, r0, r1, lsl #20
    3df8:	00186900 	andseq	r6, r8, r0, lsl #18
    3dfc:	174b1a00 	strbne	r1, [fp, -r0, lsl #20]
    3e00:	45010000 	strmi	r0, [r1, #-0]
    3e04:	00003a01 	andeq	r3, r0, r1, lsl #20
    3e08:	00189100 	andseq	r9, r8, r0, lsl #2
    3e0c:	45722400 	ldrbmi	r2, [r2, #-1024]!	; 0x400
    3e10:	46010050 			; <UNDEFINED> instruction: 0x46010050
    3e14:	00003a01 	andeq	r3, r0, r1, lsl #20
    3e18:	00189100 	andseq	r9, r8, r0, lsl #2
    3e1c:	0e0d1a00 	vmlaeq.f32	s2, s26, s0
    3e20:	47010000 	strmi	r0, [r1, -r0]
    3e24:	00003a01 	andeq	r3, r0, r1, lsl #20
    3e28:	0018c600 	andseq	ip, r8, r0, lsl #12
    3e2c:	05402500 	strbeq	r2, [r0, #-1280]	; 0x500
    3e30:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
    3e34:	6c1a0000 	ldcvs	0, cr0, [sl], {-0}
    3e38:	01000004 	tsteq	r0, r4
    3e3c:	004c0163 	subeq	r0, ip, r3, ror #2
    3e40:	18e40000 	stmiane	r4!, {}^	; <UNPREDICTABLE>
    3e44:	17000000 	strne	r0, [r0, -r0]
    3e48:	08001314 	stmdaeq	r0, {r2, r4, r8, r9, ip}
    3e4c:	00000010 	andeq	r0, r0, r0, lsl r0
    3e50:	00046c1a 	andeq	r6, r4, sl, lsl ip
    3e54:	01690100 	cmneq	r9, r0, lsl #2
    3e58:	0000004c 	andeq	r0, r0, ip, asr #32
    3e5c:	0000190c 	andeq	r1, r0, ip, lsl #18
    3e60:	b4260000 	strtlt	r0, [r6], #-0
    3e64:	01000015 	tsteq	r0, r5, lsl r0
    3e68:	020d0178 	andeq	r0, sp, #120, 2
    3e6c:	13400000 	movtne	r0, #0
    3e70:	00240800 	eoreq	r0, r4, r0, lsl #16
    3e74:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e78:	00085327 	andeq	r5, r8, r7, lsr #6
    3e7c:	01920100 	orrseq	r0, r2, r0, lsl #2
    3e80:	000001d7 	ldrdeq	r0, [r0], -r7
    3e84:	08001364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip}
    3e88:	0000001c 	andeq	r0, r0, ip, lsl r0
    3e8c:	088c9c01 	stmeq	ip, {r0, sl, fp, ip, pc}
    3e90:	ff280000 			; <UNDEFINED> instruction: 0xff280000
    3e94:	01000014 	tsteq	r0, r4, lsl r0
    3e98:	004c0192 	umaaleq	r0, ip, r2, r1
    3e9c:	19250000 	stmdbne	r5!, {}	; <UNPREDICTABLE>
    3ea0:	ce280000 	cdpgt	0, 2, cr0, cr8, cr0, {0}
    3ea4:	01000015 	tsteq	r0, r5, lsl r0
    3ea8:	088c0192 	stmeq	ip, {r1, r4, r7, r8}
    3eac:	19460000 	stmdbne	r6, {}^	; <UNPREDICTABLE>
    3eb0:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    3eb4:	01000003 	tsteq	r0, r3
    3eb8:	003a0194 	mlaseq	sl, r4, r1, r0
    3ebc:	19720000 	ldmdbne	r2!, {}^	; <UNPREDICTABLE>
    3ec0:	0b000000 	bleq	3ec8 <__Stack_Size+0x3ac8>
    3ec4:	0001dd04 	andeq	sp, r1, r4, lsl #26
    3ec8:	14382700 	ldrtne	r2, [r8], #-1792	; 0x700
    3ecc:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    3ed0:	00005e03 	andeq	r5, r0, r3, lsl #28
    3ed4:	00138000 	andseq	r8, r3, r0
    3ed8:	00004008 	andeq	r4, r0, r8
    3edc:	bc9c0100 	ldflts	f0, [ip], {0}
    3ee0:	1f000008 	svcne	0x00000008
    3ee4:	0800138e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, ip}
    3ee8:	00000d8d 	andeq	r0, r0, sp, lsl #27
    3eec:	0150011d 	cmpeq	r0, sp, lsl r1
    3ef0:	29000030 	stmdbcs	r0, {r4, r5}
    3ef4:	000014ab 	andeq	r1, r0, fp, lsr #9
    3ef8:	01021b01 	tsteq	r2, r1, lsl #22
    3efc:	000008f6 	strdeq	r0, [r0], -r6
    3f00:	0014312a 	andseq	r3, r4, sl, lsr #2
    3f04:	021d0100 	andseq	r0, sp, #0, 2
    3f08:	0000020d 	andeq	r0, r0, sp, lsl #4
    3f0c:	00154d2a 	andseq	r4, r5, sl, lsr #26
    3f10:	021e0100 	andseq	r0, lr, #0, 2
    3f14:	0000003a 	andeq	r0, r0, sl, lsr r0
    3f18:	00093c2a 	andeq	r3, r9, sl, lsr #24
    3f1c:	021f0100 	andseq	r0, pc, #0, 2
    3f20:	0000003a 	andeq	r0, r0, sl, lsr r0
    3f24:	0014a62b 	andseq	sl, r4, fp, lsr #12
    3f28:	028b0100 	addeq	r0, fp, #0, 2
    3f2c:	14ad2900 	strtne	r2, [sp], #2304	; 0x900
    3f30:	97010000 	strls	r0, [r1, -r0]
    3f34:	09780102 	ldmdbeq	r8!, {r1, r8}^
    3f38:	492a0000 	stmdbmi	sl!, {}	; <UNPREDICTABLE>
    3f3c:	01000009 	tsteq	r0, r9
    3f40:	02640299 	rsbeq	r0, r4, #-1879048183	; 0x90000009
    3f44:	312a0000 	teqcc	sl, r0
    3f48:	01000014 	tsteq	r0, r4, lsl r0
    3f4c:	020d029a 	andeq	r0, sp, #-1610612727	; 0xa0000009
    3f50:	962a0000 	strtls	r0, [sl], -r0
    3f54:	01000017 	tsteq	r0, r7, lsl r0
    3f58:	003a029b 	mlaseq	sl, fp, r2, r0
    3f5c:	4b2a0000 	blmi	a83f64 <__Stack_Size+0xa83b64>
    3f60:	01000017 	tsteq	r0, r7, lsl r0
    3f64:	003a029d 	mlaseq	sl, sp, r2, r0
    3f68:	512a0000 	teqpl	sl, r0
    3f6c:	01000014 	tsteq	r0, r4, lsl r0
    3f70:	003a029d 	mlaseq	sl, sp, r2, r0
    3f74:	1d2a0000 	stcne	0, cr0, [sl, #-0]
    3f78:	01000003 	tsteq	r0, r3
    3f7c:	003a029e 	mlaseq	sl, lr, r2, r0
    3f80:	0d2a0000 	stceq	0, cr0, [sl, #-0]
    3f84:	0100000e 	tsteq	r0, lr
    3f88:	003a029e 	mlaseq	sl, lr, r2, r0
    3f8c:	692c0000 	stmdbvs	ip!, {}	; <UNPREDICTABLE>
    3f90:	2a000009 	bcs	3fbc <__Stack_Size+0x3bbc>
    3f94:	000014b9 			; <UNDEFINED> instruction: 0x000014b9
    3f98:	5e02a901 	cdppl	9, 0, cr10, cr2, cr1, {0}
    3f9c:	00000000 	andeq	r0, r0, r0
    3fa0:	02942a2d 	addseq	r2, r4, #184320	; 0x2d000
    3fa4:	25010000 	strcs	r0, [r1, #-0]
    3fa8:	00006f03 	andeq	r6, r0, r3, lsl #30
    3fac:	23000000 	movwcs	r0, #0
    3fb0:	0000136f 	andeq	r1, r0, pc, ror #6
    3fb4:	5e034c01 	cdppl	12, 0, cr4, cr3, cr1, {0}
    3fb8:	c0000000 	andgt	r0, r0, r0
    3fbc:	dc080013 	stcle	0, cr0, [r8], {19}
    3fc0:	01000002 	tsteq	r0, r2
    3fc4:	000ae69c 	muleq	sl, ip, r6
    3fc8:	01042e00 	tsteq	r4, r0, lsl #28
    3fcc:	09b0034f 	ldmibeq	r0!, {r0, r1, r2, r3, r6, r8, r9}
    3fd0:	622f0000 	eorvs	r0, pc, #0
    3fd4:	03510100 	cmpeq	r1, #0, 2
    3fd8:	000001d7 	ldrdeq	r0, [r0], -r7
    3fdc:	0100772f 	tsteq	r0, pc, lsr #14
    3fe0:	0ae60352 	beq	ff984d30 <BootRAM+0xe8f54d1>
    3fe4:	1a000000 	bne	3fec <__Stack_Size+0x3bec>
    3fe8:	00001732 	andeq	r1, r0, r2, lsr r7
    3fec:	92035301 	andls	r5, r3, #67108864	; 0x4000000
    3ff0:	a3000009 	movwge	r0, #9
    3ff4:	30000019 	andcc	r0, r0, r9, lsl r0
    3ff8:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    3ffc:	08001406 	stmdaeq	r0, {r1, r2, sl, ip}
    4000:	000000c4 	andeq	r0, r0, r4, asr #1
    4004:	40036701 	andmi	r6, r3, r1, lsl #14
    4008:	1700000a 	strne	r0, [r0, -sl]
    400c:	08001406 	stmdaeq	r0, {r1, r2, sl, ip}
    4010:	000000c4 	andeq	r0, r0, r4, asr #1
    4014:	0008c931 	andeq	ip, r8, r1, lsr r9
    4018:	0019c600 	andseq	ip, r9, r0, lsl #12
    401c:	08d53100 	ldmeq	r5, {r8, ip, sp}^
    4020:	1a6f0000 	bne	1bc4028 <__Stack_Size+0x1bc3c28>
    4024:	e1310000 	teq	r1, r0
    4028:	82000008 	andhi	r0, r0, #8
    402c:	3200001a 	andcc	r0, r0, #26
    4030:	000008ed 	andeq	r0, r0, sp, ror #17
    4034:	080014c4 	stmdaeq	r0, {r2, r6, r7, sl, ip}
    4038:	00141622 	andseq	r1, r4, r2, lsr #12
    403c:	00068108 	andeq	r8, r6, r8, lsl #2
    4040:	14501c00 	ldrbne	r1, [r0], #-3072	; 0xc00
    4044:	0a1a0800 	beq	68604c <__Stack_Size+0x685c4c>
    4048:	011d0000 	tsteq	sp, r0
    404c:	00740250 	rsbseq	r0, r4, r0, asr r2
    4050:	14662200 	strbtne	r2, [r6], #-512	; 0x200
    4054:	082b0800 	stmdaeq	fp!, {fp}
    4058:	82220000 	eorhi	r0, r2, #0
    405c:	be080014 	mcrlt	0, 0, r0, cr8, cr4, {0}
    4060:	22000006 	andcs	r0, r0, #6
    4064:	08001490 	stmdaeq	r0, {r4, r7, sl, ip}
    4068:	00000696 	muleq	r0, r6, r6
    406c:	0014a222 	andseq	sl, r4, r2, lsr #4
    4070:	00079c08 	andeq	r9, r7, r8, lsl #24
    4074:	33000000 	movwcc	r0, #0
    4078:	000008f6 	strdeq	r0, [r0], -r6
    407c:	080014ca 	stmdaeq	r0, {r1, r3, r6, r7, sl, ip}
    4080:	00000560 	andeq	r0, r0, r0, ror #10
    4084:	dc036c01 	stcle	12, cr6, [r3], {1}
    4088:	3400000a 	strcc	r0, [r0], #-10
    408c:	00000560 	andeq	r0, r0, r0, ror #10
    4090:	00090331 	andeq	r0, r9, r1, lsr r3
    4094:	001aa100 	andseq	sl, sl, r0, lsl #2
    4098:	090f3100 	stmdbeq	pc, {r8, ip, sp}	; <UNPREDICTABLE>
    409c:	1b380000 	blne	e040a4 <__Stack_Size+0xe03ca4>
    40a0:	1b310000 	blne	c440a8 <__Stack_Size+0xc43ca8>
    40a4:	78000009 	stmdavc	r0, {r0, r3}
    40a8:	3100001b 	tstcc	r0, fp, lsl r0
    40ac:	00000927 	andeq	r0, r0, r7, lsr #18
    40b0:	00001ba1 	andeq	r1, r0, r1, lsr #23
    40b4:	00093331 	andeq	r3, r9, r1, lsr r3
    40b8:	001bb400 	andseq	fp, fp, r0, lsl #8
    40bc:	093f3100 	ldmdbeq	pc!, {r8, ip, sp}	; <UNPREDICTABLE>
    40c0:	1bcf0000 	blne	ff3c40c8 <BootRAM+0xe334869>
    40c4:	4b310000 	blmi	c440cc <__Stack_Size+0xc43ccc>
    40c8:	ef000009 	svc	0x00000009
    40cc:	1500001b 	strne	r0, [r0, #-27]
    40d0:	080014d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, ip}
    40d4:	0000002c 	andeq	r0, r0, ip, lsr #32
    40d8:	00000aaf 	andeq	r0, r0, pc, lsr #21
    40dc:	00095c31 	andeq	r5, r9, r1, lsr ip
    40e0:	001c0200 	andseq	r0, ip, r0, lsl #4
    40e4:	08150000 	ldmdaeq	r5, {}	; <UNPREDICTABLE>
    40e8:	60080016 	andvs	r0, r8, r6, lsl r0
    40ec:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    40f0:	3500000a 	strcc	r0, [r0, #-10]
    40f4:	0000096a 	andeq	r0, r0, sl, ror #18
    40f8:	226c9102 	rsbcs	r9, ip, #-2147483648	; 0x80000000
    40fc:	08001666 	stmdaeq	r0, {r1, r2, r5, r6, r9, sl, ip}
    4100:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    4104:	15ca3600 	strbne	r3, [sl, #1536]	; 0x600
    4108:	011d0800 	tsteq	sp, r0, lsl #16
    410c:	00740250 	rsbseq	r0, r4, r0, asr r2
    4110:	22000000 	andcs	r0, r0, #0
    4114:	08001678 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl, ip}
    4118:	00000892 	muleq	r0, r2, r8
    411c:	4c040b00 	stcmi	11, cr0, [r4], {-0}
    4120:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    4124:	0000177e 	andeq	r1, r0, lr, ror r7
    4128:	0101a701 	tsteq	r1, r1, lsl #14
    412c:	00000b2c 	andeq	r0, r0, ip, lsr #22
    4130:	0017372a 	andseq	r3, r7, sl, lsr #14
    4134:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
    4138:	0000067b 	andeq	r0, r0, fp, ror r6
    413c:	0014f92a 	andseq	pc, r4, sl, lsr #18
    4140:	01aa0100 			; <UNDEFINED> instruction: 0x01aa0100
    4144:	0000003a 	andeq	r0, r0, sl, lsr r0
    4148:	144a2a2d 	strbne	r2, [sl], #-2605	; 0xa2d
    414c:	b0010000 	andlt	r0, r1, r0
    4150:	0001d701 	andeq	sp, r1, r1, lsl #14
    4154:	14ff2a00 	ldrbtne	r2, [pc], #2560	; 415c <__Stack_Size+0x3d5c>
    4158:	b1010000 	mrslt	r0, (UNDEF: 1)
    415c:	00003a01 	andeq	r3, r0, r1, lsl #20
    4160:	23000000 	movwcs	r0, #0
    4164:	000013b9 			; <UNDEFINED> instruction: 0x000013b9
    4168:	5e03a001 	cdppl	0, 0, cr10, cr3, cr1, {0}
    416c:	9c000000 	stcls	0, cr0, [r0], {-0}
    4170:	c8080016 	stmdagt	r8, {r1, r2, r4}
    4174:	01000000 	mrseq	r0, (UNDEF: 0)
    4178:	000bfe9c 	muleq	fp, ip, lr
    417c:	093c1a00 	ldmdbeq	ip!, {r9, fp, ip}
    4180:	a2010000 	andge	r0, r1, #0
    4184:	00003a03 	andeq	r3, r0, r3, lsl #20
    4188:	001c2c00 	andseq	r2, ip, r0, lsl #24
    418c:	0aec3000 	beq	ffb10194 <BootRAM+0xea80935>
    4190:	16ac0000 	strtne	r0, [ip], r0
    4194:	007e0800 	rsbseq	r0, lr, r0, lsl #16
    4198:	a6010000 	strge	r0, [r1], -r0
    419c:	000bf403 	andeq	pc, fp, r3, lsl #8
    41a0:	16ac1700 	strtne	r1, [ip], r0, lsl #14
    41a4:	007e0800 	rsbseq	r0, lr, r0, lsl #16
    41a8:	f9310000 			; <UNDEFINED> instruction: 0xf9310000
    41ac:	7900000a 	stmdbvc	r0, {r1, r3}
    41b0:	3100001c 	tstcc	r0, ip, lsl r0
    41b4:	00000b05 	andeq	r0, r0, r5, lsl #22
    41b8:	00001c8e 	andeq	r1, r0, lr, lsl #25
    41bc:	0016b415 	andseq	fp, r6, r5, lsl r4
    41c0:	00002a08 	andeq	r2, r0, r8, lsl #20
    41c4:	000bde00 	andeq	sp, fp, r0, lsl #28
    41c8:	0b123100 	bleq	4905d0 <__Stack_Size+0x4901d0>
    41cc:	1ca10000 	stcne	0, cr0, [r1]
    41d0:	1e310000 	cdpne	0, 3, cr0, cr1, cr0, {0}
    41d4:	bf00000b 	svclt	0x0000000b
    41d8:	1c00001c 	stcne	0, cr0, [r0], {28}
    41dc:	080016c0 	stmdaeq	r0, {r6, r7, r9, sl, ip}
    41e0:	00000bb4 			; <UNDEFINED> instruction: 0x00000bb4
    41e4:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    41e8:	1e000076 	mcrne	0, 0, r0, cr0, cr6, {3}
    41ec:	080016d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, ip}
    41f0:	00000db6 			; <UNDEFINED> instruction: 0x00000db6
    41f4:	00000bc7 	andeq	r0, r0, r7, asr #23
    41f8:	0150011d 	cmpeq	r0, sp, lsl r1
    41fc:	de1f0030 	mrcle	0, 0, r0, cr15, cr0, {1}
    4200:	cc080016 	stcgt	0, cr0, [r8], {22}
    4204:	1d00000d 	stcne	0, cr0, [r0, #-52]	; 0xffffffcc
    4208:	76025201 	strvc	r5, [r2], -r1, lsl #4
    420c:	50011d00 	andpl	r1, r1, r0, lsl #26
    4210:	00007702 	andeq	r7, r0, r2, lsl #14
    4214:	16f21f00 	ldrbtne	r1, [r2], r0, lsl #30
    4218:	0d4d0800 	stcleq	8, cr0, [sp, #-0]
    421c:	011d0000 	tsteq	sp, r0
    4220:	1d300151 	ldfnes	f0, [r0, #-324]!	; 0xfffffebc
    4224:	30015001 	andcc	r5, r1, r1
    4228:	37000000 	strcc	r0, [r0, -r0]
    422c:	0800174a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, ip}
    4230:	00000892 	muleq	r0, r2, r8
    4234:	00213800 	eoreq	r3, r1, r0, lsl #16
    4238:	dd010000 	stcle	0, cr0, [r1, #-0]
    423c:	00176403 	andseq	r6, r7, r3, lsl #8
    4240:	00003808 	andeq	r3, r0, r8, lsl #16
    4244:	439c0100 	orrsmi	r0, ip, #0, 2
    4248:	3900000c 	stmdbcc	r0, {r2, r3}
    424c:	006c6156 	rsbeq	r6, ip, r6, asr r1
    4250:	5e03dd01 	cdppl	13, 0, cr13, cr3, cr1, {0}
    4254:	f2000000 	vhadd.s8	d0, d0, d0
    4258:	2400001c 	strcs	r0, [r0], #-28
    425c:	df010069 	svcle	0x00010069
    4260:	00003a03 	andeq	r3, r0, r3, lsl #20
    4264:	001d1300 	andseq	r1, sp, r0, lsl #6
    4268:	456e2400 	strbmi	r2, [lr, #-1024]!	; 0x400
    426c:	e0010050 	and	r0, r1, r0, asr r0
    4270:	00003a03 	andeq	r3, r0, r3, lsl #20
    4274:	001d3200 	andseq	r3, sp, r0, lsl #4
    4278:	ad230000 	stcge	0, cr0, [r3, #-0]
    427c:	01000013 	tsteq	r0, r3, lsl r0
    4280:	005e0378 	subseq	r0, lr, r8, ror r3
    4284:	179c0000 	ldrne	r0, [ip, r0]
    4288:	005c0800 	subseq	r0, ip, r0, lsl #16
    428c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4290:	00000c89 	andeq	r0, r0, r9, lsl #25
    4294:	00093c1a 	andeq	r3, r9, sl, lsl ip
    4298:	037a0100 	cmneq	sl, #0, 2
    429c:	0000003a 	andeq	r0, r0, sl, lsr r0
    42a0:	00001d45 	andeq	r1, r0, r5, asr #26
    42a4:	0017b022 	andseq	fp, r7, r2, lsr #32
    42a8:	0005b608 	andeq	fp, r5, r8, lsl #12
    42ac:	17cc2200 	strbne	r2, [ip, r0, lsl #4]
    42b0:	0bfe0800 	bleq	fff862b8 <BootRAM+0xeef6a59>
    42b4:	ea370000 	b	dc42bc <__Stack_Size+0xdc3ebc>
    42b8:	92080017 	andls	r0, r8, #23
    42bc:	00000008 	andeq	r0, r0, r8
    42c0:	0015133a 	andseq	r1, r5, sl, lsr r3
    42c4:	03f10100 	mvnseq	r0, #0, 2
    42c8:	00000000 	andeq	r0, r0, r0
    42cc:	00000002 	andeq	r0, r0, r2
    42d0:	f83b9c01 			; <UNDEFINED> instruction: 0xf83b9c01
    42d4:	04000005 	streq	r0, [r0], #-5
    42d8:	00046bec 	andeq	r6, r4, ip, ror #23
    42dc:	02463b00 	subeq	r3, r6, #0, 22
    42e0:	ee040000 	cdp	0, 0, cr0, cr4, cr0, {0}
    42e4:	0000029a 	muleq	r0, sl, r2
    42e8:	00137e3b 	andseq	r7, r3, fp, lsr lr
    42ec:	4cf20400 	cfldrdmi	mvd0, [r2]
    42f0:	3b000000 	blcc	42f8 <__Stack_Size+0x3ef8>
    42f4:	00001389 	andeq	r1, r0, r9, lsl #7
    42f8:	004cf304 	subeq	pc, ip, r4, lsl #6
    42fc:	7c3b0000 	ldcvc	0, cr0, [fp], #-0
    4300:	05000002 	streq	r0, [r0, #-2]
    4304:	000cd222 	andeq	sp, ip, r2, lsr #4
    4308:	81040b00 	tsthi	r4, r0, lsl #22
    430c:	3b000003 	blcc	4320 <__Stack_Size+0x3f20>
    4310:	00000540 	andeq	r0, r0, r0, asr #10
    4314:	0ce32505 	cfstr64eq	mvdx2, [r3], #20
    4318:	040b0000 	streq	r0, [fp], #-0
    431c:	0000046b 	andeq	r0, r0, fp, ror #8
    4320:	0013eb3b 	andseq	lr, r3, fp, lsr fp
    4324:	f42a0500 	vld3.8	{d0,d2,d4}, [sl], r0
    4328:	0b00000c 	bleq	4360 <__Stack_Size+0x3f60>
    432c:	0004ef04 	andeq	lr, r4, r4, lsl #30
    4330:	175c3c00 	ldrbne	r3, [ip, -r0, lsl #24]
    4334:	24010000 	strcs	r0, [r1], #-0
    4338:	000002e5 	andeq	r0, r0, r5, ror #5
    433c:	03120305 	tsteq	r2, #335544320	; 0x14000000
    4340:	983c2000 	ldmdals	ip!, {sp}
    4344:	01000015 	tsteq	r0, r5, lsl r0
    4348:	00009425 	andeq	r9, r0, r5, lsr #8
    434c:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
    4350:	3d20000b 	stccc	0, cr0, [r0, #-44]!	; 0xffffffd4
    4354:	00001310 	andeq	r1, r0, r0, lsl r3
    4358:	4c025307 	stcmi	3, cr5, [r2], {7}
    435c:	32000000 	andcc	r0, r0, #0
    4360:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    4364:	0000005e 	andeq	r0, r0, lr, asr r0
    4368:	14e53e00 	strbtne	r3, [r5], #3584	; 0xe00
    436c:	19060000 	stmdbne	r6, {}	; <UNPREDICTABLE>
    4370:	00000d4d 	andeq	r0, r0, sp, asr #26
    4374:	0001d70d 	andeq	sp, r1, sp, lsl #14
    4378:	004c0d00 	subeq	r0, ip, r0, lsl #26
    437c:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    4380:	00000000 	andeq	r0, r0, r0
    4384:	0011eb3f 	andseq	lr, r1, pc, lsr fp
    4388:	02560700 	subseq	r0, r6, #0, 14
    438c:	00000d64 	andeq	r0, r0, r4, ror #26
    4390:	00005e0d 	andeq	r5, r0, sp, lsl #28
    4394:	004c0d00 	subeq	r0, ip, r0, lsl #26
    4398:	3f000000 	svccc	0x00000000
    439c:	0000131c 	andeq	r1, r0, ip, lsl r3
    43a0:	76024e07 	strvc	r4, [r2], -r7, lsl #28
    43a4:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    43a8:	0000005e 	andeq	r0, r0, lr, asr r0
    43ac:	13293f00 	teqne	r9, #0, 30
    43b0:	3a070000 	bcc	1c43b8 <__Stack_Size+0x1c3fb8>
    43b4:	000d8d02 	andeq	r8, sp, r2, lsl #26
    43b8:	005e0d00 	subseq	r0, lr, r0, lsl #26
    43bc:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    43c0:	00000000 	andeq	r0, r0, r0
    43c4:	0007b03f 	andeq	fp, r7, pc, lsr r0
    43c8:	02570700 	subseq	r0, r7, #0, 14
    43cc:	00000da4 	andeq	r0, r0, r4, lsr #27
    43d0:	00005e0d 	andeq	r5, r0, sp, lsl #28
    43d4:	004c0d00 	subeq	r0, ip, r0, lsl #26
    43d8:	3f000000 	svccc	0x00000000
    43dc:	00001072 	andeq	r1, r0, r2, ror r0
    43e0:	b6024d07 	strlt	r4, [r2], -r7, lsl #26
    43e4:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    43e8:	0000005e 	andeq	r0, r0, lr, asr r0
    43ec:	10fc3d00 	rscsne	r3, ip, r0, lsl #26
    43f0:	54070000 	strpl	r0, [r7], #-0
    43f4:	00004c02 	andeq	r4, r0, r2, lsl #24
    43f8:	000dcc00 	andeq	ip, sp, r0, lsl #24
    43fc:	005e0d00 	subseq	r0, lr, r0, lsl #26
    4400:	40000000 	andmi	r0, r0, r0
    4404:	00001692 	muleq	r0, r2, r6
    4408:	d70d1a06 	strle	r1, [sp, -r6, lsl #20]
    440c:	0d000001 	stceq	0, cr0, [r0, #-4]
    4410:	0000004c 	andeq	r0, r0, ip, asr #32
    4414:	00004c0d 	andeq	r4, r0, sp, lsl #24
    4418:	70000000 	andvc	r0, r0, r0
    441c:	04000001 	streq	r0, [r0], #-1
    4420:	00133500 	andseq	r3, r3, r0, lsl #10
    4424:	58010400 	stmdapl	r1, {sl}
    4428:	01000001 	tsteq	r0, r1
    442c:	000017cc 	andeq	r1, r0, ip, asr #15
    4430:	0000037b 	andeq	r0, r0, fp, ror r3
    4434:	00000600 	andeq	r0, r0, r0, lsl #12
    4438:	00000000 	andeq	r0, r0, r0
    443c:	000013fb 	strdeq	r1, [r0], -fp
    4440:	f6050402 			; <UNDEFINED> instruction: 0xf6050402
    4444:	02000001 	andeq	r0, r0, #1
    4448:	06a90502 	strteq	r0, [r9], r2, lsl #10
    444c:	01020000 	mrseq	r0, (UNDEF: 2)
    4450:	00065506 	andeq	r5, r6, r6, lsl #10
    4454:	33750300 	cmncc	r5, #0, 6
    4458:	24020032 	strcs	r0, [r2], #-50	; 0x32
    445c:	00000045 	andeq	r0, r0, r5, asr #32
    4460:	93070402 	movwls	r0, #29698	; 0x7402
    4464:	03000007 	movweq	r0, #7
    4468:	00363175 	eorseq	r3, r6, r5, ror r1
    446c:	00572502 	subseq	r2, r7, r2, lsl #10
    4470:	02020000 	andeq	r0, r2, #0
    4474:	0003e807 	andeq	lr, r3, r7, lsl #16
    4478:	38750300 	ldmdacc	r5!, {r8, r9}^
    447c:	68260200 	stmdavs	r6!, {r9}
    4480:	02000000 	andeq	r0, r0, #0
    4484:	06530801 	ldrbeq	r0, [r3], -r1, lsl #16
    4488:	04040000 	streq	r0, [r4], #-0
    448c:	0000005e 	andeq	r0, r0, lr, asr r0
    4490:	0014e505 	andseq	lr, r4, r5, lsl #10
    4494:	f8230100 			; <UNDEFINED> instruction: 0xf8230100
    4498:	30080017 	andcc	r0, r8, r7, lsl r0
    449c:	01000000 	mrseq	r0, (UNDEF: 0)
    44a0:	0000fd9c 	muleq	r0, ip, sp
    44a4:	17e60600 	strbne	r0, [r6, r0, lsl #12]!
    44a8:	23010000 	movwcs	r0, #4096	; 0x1000
    44ac:	0000006f 	andeq	r0, r0, pc, rrx
    44b0:	00001d8b 	andeq	r1, r0, fp, lsl #27
    44b4:	0017fb06 	andseq	pc, r7, r6, lsl #22
    44b8:	4c230100 	stfmis	f0, [r3], #-0
    44bc:	d0000000 	andle	r0, r0, r0
    44c0:	0600001d 			; <UNDEFINED> instruction: 0x0600001d
    44c4:	000017de 	ldrdeq	r1, [r0], -lr
    44c8:	004c2301 	subeq	r2, ip, r1, lsl #6
    44cc:	1df10000 	ldclne	0, cr0, [r1]
    44d0:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    44d4:	3a250100 	bcc	9448dc <__Stack_Size+0x9444dc>
    44d8:	01000000 	mrseq	r0, (UNDEF: 0)
    44dc:	00690852 	rsbeq	r0, r9, r2, asr r8
    44e0:	003a2601 	eorseq	r2, sl, r1, lsl #12
    44e4:	1e120000 	cdpne	0, 1, cr0, cr2, cr0, {0}
    44e8:	ef090000 	svc	0x00090000
    44ec:	01000017 	tsteq	r0, r7, lsl r0
    44f0:	00003a26 	andeq	r3, r0, r6, lsr #20
    44f4:	001e7100 	andseq	r7, lr, r0, lsl #2
    44f8:	17f50900 	ldrbne	r0, [r5, r0, lsl #18]!
    44fc:	26010000 	strcs	r0, [r1], -r0
    4500:	0000003a 	andeq	r0, r0, sl, lsr r0
    4504:	00001ea8 	andeq	r1, r0, r8, lsr #29
    4508:	00180709 	andseq	r0, r8, r9, lsl #14
    450c:	fd270100 	stc2	1, cr0, [r7, #-0]
    4510:	cc000000 	stcgt	0, cr0, [r0], {-0}
    4514:	0000001e 	andeq	r0, r0, lr, lsl r0
    4518:	004c0404 	subeq	r0, ip, r4, lsl #8
    451c:	92050000 	andls	r0, r5, #0
    4520:	01000016 	tsteq	r0, r6, lsl r0
    4524:	0018283c 	andseq	r2, r8, ip, lsr r8
    4528:	00002408 	andeq	r2, r0, r8, lsl #8
    452c:	6d9c0100 	ldfvss	f0, [ip]
    4530:	06000001 	streq	r0, [r0], -r1
    4534:	000017e6 	andeq	r1, r0, r6, ror #15
    4538:	006f3c01 	rsbeq	r3, pc, r1, lsl #24
    453c:	1f070000 	svcne	0x00070000
    4540:	fb060000 	blx	18454a <__Stack_Size+0x18414a>
    4544:	01000017 	tsteq	r0, r7, lsl r0
    4548:	00004c3c 	andeq	r4, r0, ip, lsr ip
    454c:	001f4200 	andseq	r4, pc, r0, lsl #4
    4550:	17de0600 	ldrbne	r0, [lr, r0, lsl #12]
    4554:	3c010000 	stccc	0, cr0, [r1], {-0}
    4558:	0000004c 	andeq	r0, r0, ip, asr #32
    455c:	00001f63 	andeq	r1, r0, r3, ror #30
    4560:	01006e07 	tsteq	r0, r7, lsl #28
    4564:	00003a3e 	andeq	r3, r0, lr, lsr sl
    4568:	08520100 	ldmdaeq	r2, {r8}^
    456c:	3f010069 	svccc	0x00010069
    4570:	0000003a 	andeq	r0, r0, sl, lsr r0
    4574:	00001f84 	andeq	r1, r0, r4, lsl #31
    4578:	00180709 	andseq	r0, r8, r9, lsl #14
    457c:	6d400100 	stfvse	f0, [r0, #-0]
    4580:	e3000001 	movw	r0, #1
    4584:	0000001f 	andeq	r0, r0, pc, lsl r0
    4588:	003a0404 	eorseq	r0, sl, r4, lsl #8
    458c:	Address 0x000000000000458c is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	03065506 	movweq	r5, #25862	; 0x6506
       8:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
       c:	00051308 	andeq	r1, r5, r8, lsl #6
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	11010000 	mrsne	r0, (UNDEF: 1)
      14:	11061000 	mrsne	r1, (UNDEF: 6)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	03011201 	movweq	r1, #4609	; 0x1201
      1c:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	00051308 	andeq	r1, r5, r8, lsl #6
      24:	11010000 	mrsne	r0, (UNDEF: 1)
      28:	130e2501 	movwne	r2, #58625	; 0xe501
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	1b0e030b 	blne	380c60 <__Stack_Size+0x380860>
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	1117550e 	tstne	r7, lr, lsl #10
      34:	00171001 	andseq	r1, r7, r1
      38:	00240200 	eoreq	r0, r4, r0, lsl #4

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	0b3e0b0b 	bleq	f82c70 <__Stack_Size+0xf82870>

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	00000e03 	andeq	r0, r0, r3, lsl #28
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	03001603 	movweq	r1, #1539	; 0x603
      48:	3b0b3a08 	blcc	2ce870 <__Stack_Size+0x2ce470>
      4c:	0013490b 	andseq	r4, r3, fp, lsl #18

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	00160400 	andseq	r0, r6, r0, lsl #8
      54:	0b3a0e03 	bleq	e83868 <__Stack_Size+0xe83468>
      58:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      5c:	35050000 	strcc	r0, [r5, #-0]
      60:	00134900 	andseq	r4, r3, r0, lsl #18
      64:	01040600 	tsteq	r4, r0, lsl #12
      68:	0b3a0b0b 	bleq	e82c9c <__Stack_Size+0xe8289c>
      6c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      70:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
      74:	1c0e0300 	stcne	3, cr0, [lr], {-0}
      78:	0800000d 	stmdaeq	r0, {r0, r2, r3}
      7c:	0b0b0113 	bleq	2c04d0 <__Stack_Size+0x2c00d0>
      80:	0b3b0b3a 	bleq	ec2d70 <__Stack_Size+0xec2970>
      84:	00001301 	andeq	r1, r0, r1, lsl #6
      88:	03000d09 	movweq	r0, #3337	; 0xd09
      8c:	3b0b3a0e 	blcc	2ce8cc <__Stack_Size+0x2ce4cc>
      90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      94:	0a00000b 	beq	c8 <_Minimum_Stack_Size-0x38>
      98:	0b0b000f 	bleq	2c00dc <__Stack_Size+0x2bfcdc>
      9c:	00001349 	andeq	r1, r0, r9, asr #6
      a0:	2700150b 	strcs	r1, [r0, -fp, lsl #10]
      a4:	0c000019 	stceq	0, cr0, [r0], {25}
      a8:	0e030104 	adfeqs	f0, f3, f4
      ac:	0b3a0b0b 	bleq	e82ce0 <__Stack_Size+0xe828e0>
      b0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      b4:	130d0000 	movwne	r0, #53248	; 0xd000
      b8:	0b0e0301 	bleq	380cc4 <__Stack_Size+0x3808c4>
      bc:	3b0b3a0b 	blcc	2ce8f0 <__Stack_Size+0x2ce4f0>
      c0:	0013010b 	andseq	r0, r3, fp, lsl #2
      c4:	01150e00 	tsteq	r5, r0, lsl #28
      c8:	13491927 	movtne	r1, #39207	; 0x9927
      cc:	00001301 	andeq	r1, r0, r1, lsl #6
      d0:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
      d4:	10000013 	andne	r0, r0, r3, lsl r0
      d8:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
      dc:	0b3a0b0b 	bleq	e82d10 <__Stack_Size+0xe82910>
      e0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      e4:	0d110000 	ldceq	0, cr0, [r1, #-0]
      e8:	3a080300 	bcc	200cf0 <__Stack_Size+0x2008f0>
      ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      f0:	000b3813 	andeq	r3, fp, r3, lsl r8
      f4:	01171200 	tsteq	r7, r0, lsl #4
      f8:	0b3a0b0b 	bleq	e82d2c <__Stack_Size+0xe8292c>
      fc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     100:	0d130000 	ldceq	0, cr0, [r3, #-0]
     104:	3a080300 	bcc	200d0c <__Stack_Size+0x20090c>
     108:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     10c:	14000013 	strne	r0, [r0], #-19
     110:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     114:	0b3a0e03 	bleq	e83928 <__Stack_Size+0xe83528>
     118:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     11c:	0b201349 	bleq	804e48 <__Stack_Size+0x804a48>
     120:	00001301 	andeq	r1, r0, r1, lsl #6
     124:	03000515 	movweq	r0, #1301	; 0x515
     128:	3b0b3a0e 	blcc	2ce968 <__Stack_Size+0x2ce568>
     12c:	00134905 	andseq	r4, r3, r5, lsl #18
     130:	002e1600 	eoreq	r1, lr, r0, lsl #12
     134:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     138:	0b3b0b3a 	bleq	ec2e28 <__Stack_Size+0xec2a28>
     13c:	0b201927 	bleq	8065e0 <__Stack_Size+0x8061e0>
     140:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
     144:	03193f00 	tsteq	r9, #0, 30
     148:	3b0b3a0e 	blcc	2ce988 <__Stack_Size+0x2ce588>
     14c:	1119270b 	tstne	r9, fp, lsl #14
     150:	40061201 	andmi	r1, r6, r1, lsl #4
     154:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     158:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     15c:	03193f00 	tsteq	r9, #0, 30
     160:	3b0b3a0e 	blcc	2ce9a0 <__Stack_Size+0x2ce5a0>
     164:	11192705 	tstne	r9, r5, lsl #14
     168:	40061201 	andmi	r1, r6, r1, lsl #4
     16c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     170:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     174:	03193f01 	tsteq	r9, #1, 30
     178:	3b0b3a0e 	blcc	2ce9b8 <__Stack_Size+0x2ce5b8>
     17c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     180:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     184:	97184006 	ldrls	r4, [r8, -r6]
     188:	13011942 	movwne	r1, #6466	; 0x1942
     18c:	051a0000 	ldreq	r0, [sl, #-0]
     190:	3a0e0300 	bcc	380d98 <__Stack_Size+0x380998>
     194:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     198:	00170213 	andseq	r0, r7, r3, lsl r2
     19c:	00051b00 	andeq	r1, r5, r0, lsl #22
     1a0:	0b3a0e03 	bleq	e839b4 <__Stack_Size+0xe835b4>
     1a4:	1349053b 	movtne	r0, #38203	; 0x953b
     1a8:	00001802 	andeq	r1, r0, r2, lsl #16
     1ac:	3f012e1c 	svccc	0x00012e1c
     1b0:	3a0e0319 	bcc	380e1c <__Stack_Size+0x380a1c>
     1b4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     1b8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     1bc:	97184006 	ldrls	r4, [r8, -r6]
     1c0:	13011942 	movwne	r1, #6466	; 0x1942
     1c4:	0b1d0000 	bleq	7401cc <__Stack_Size+0x73fdcc>
     1c8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     1cc:	00130106 	andseq	r0, r3, r6, lsl #2
     1d0:	00341e00 	eorseq	r1, r4, r0, lsl #28
     1d4:	0b3a0e03 	bleq	e839e8 <__Stack_Size+0xe835e8>
     1d8:	1349053b 	movtne	r0, #38203	; 0x953b
     1dc:	00001702 	andeq	r1, r0, r2, lsl #14
     1e0:	0182891f 	orreq	r8, r2, pc, lsl r9
     1e4:	31011100 	mrscc	r1, (UNDEF: 17)
     1e8:	20000013 	andcs	r0, r0, r3, lsl r0
     1ec:	01018289 	smlabbeq	r1, r9, r2, r8
     1f0:	13310111 	teqne	r1, #1073741828	; 0x40000004
     1f4:	00001301 	andeq	r1, r0, r1, lsl #6
     1f8:	01828a21 	orreq	r8, r2, r1, lsr #20
     1fc:	91180200 	tstls	r8, r0, lsl #4
     200:	00001842 	andeq	r1, r0, r2, asr #16
     204:	01828922 	orreq	r8, r2, r2, lsr #18
     208:	95011101 	strls	r1, [r1, #-257]	; 0x101
     20c:	13311942 	teqne	r1, #1081344	; 0x108000
     210:	89230000 	stmdbhi	r3!, {}	; <UNPREDICTABLE>
     214:	11010182 	smlabbne	r1, r2, r1, r0
     218:	24000001 	strcs	r0, [r0], #-1
     21c:	08030005 	stmdaeq	r3, {r0, r2}
     220:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     224:	17021349 	strne	r1, [r2, -r9, asr #6]
     228:	89250000 	stmdbhi	r5!, {}	; <UNPREDICTABLE>
     22c:	11000182 	smlabbne	r0, r2, r1, r0
     230:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     234:	00001331 	andeq	r1, r0, r1, lsr r3
     238:	03003426 	movweq	r3, #1062	; 0x426
     23c:	3b0b3a0e 	blcc	2cea7c <__Stack_Size+0x2ce67c>
     240:	00134905 	andseq	r4, r3, r5, lsl #18
     244:	012e2700 	teqeq	lr, r0, lsl #14
     248:	01111331 	tsteq	r1, r1, lsr r3
     24c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     250:	01194297 			; <UNDEFINED> instruction: 0x01194297
     254:	28000013 	stmdacs	r0, {r0, r1, r4}
     258:	13310005 	teqne	r1, #5
     25c:	00001702 	andeq	r1, r0, r2, lsl #14
     260:	11010b29 	tstne	r1, r9, lsr #22
     264:	00061201 	andeq	r1, r6, r1, lsl #4
     268:	012e2a00 	teqeq	lr, r0, lsl #20
     26c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     270:	0b3b0b3a 	bleq	ec2f60 <__Stack_Size+0xec2b60>
     274:	01111927 	tsteq	r1, r7, lsr #18
     278:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     27c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     280:	2b000013 	blcs	2d4 <_Minimum_Stack_Size+0x1d4>
     284:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     288:	0b3b0b3a 	bleq	ec2f78 <__Stack_Size+0xec2b78>
     28c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     290:	1d2c0000 	stcne	0, cr0, [ip, #-0]
     294:	11133101 	tstne	r3, r1, lsl #2
     298:	58061201 	stmdapl	r6, {r0, r9, ip}
     29c:	010b590b 	tsteq	fp, fp, lsl #18
     2a0:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     2a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     2a8:	0b3b0b3a 	bleq	ec2f98 <__Stack_Size+0xec2b98>
     2ac:	17021349 	strne	r1, [r2, -r9, asr #6]
     2b0:	052e0000 	streq	r0, [lr, #-0]!
     2b4:	3a0e0300 	bcc	380ebc <__Stack_Size+0x380abc>
     2b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2bc:	00170213 	andseq	r0, r7, r3, lsl r2
     2c0:	012e2f00 	teqeq	lr, r0, lsl #30
     2c4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     2c8:	0b3b0b3a 	bleq	ec2fb8 <__Stack_Size+0xec2bb8>
     2cc:	13491927 	movtne	r1, #39207	; 0x9927
     2d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     2d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     2d8:	00130119 	andseq	r0, r3, r9, lsl r1
     2dc:	00343000 	eorseq	r3, r4, r0
     2e0:	0b3a0e03 	bleq	e83af4 <__Stack_Size+0xe836f4>
     2e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2e8:	00000b1c 	andeq	r0, r0, ip, lsl fp
     2ec:	3f002e31 	svccc	0x00002e31
     2f0:	3a0e0319 	bcc	380f5c <__Stack_Size+0x380b5c>
     2f4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     2f8:	11134919 	tstne	r3, r9, lsl r9
     2fc:	40061201 	andmi	r1, r6, r1, lsl #4
     300:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     304:	34320000 	ldrtcc	r0, [r2], #-0
     308:	3a0e0300 	bcc	380f10 <__Stack_Size+0x380b10>
     30c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     310:	00180213 	andseq	r0, r8, r3, lsl r2
     314:	82893300 	addhi	r3, r9, #0, 6
     318:	01110101 	tsteq	r1, r1, lsl #2
     31c:	00001331 	andeq	r1, r0, r1, lsr r3
     320:	3f012e34 	svccc	0x00012e34
     324:	3a0e0319 	bcc	380f90 <__Stack_Size+0x380b90>
     328:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     32c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     330:	96184006 	ldrls	r4, [r8], -r6
     334:	13011942 	movwne	r1, #6466	; 0x1942
     338:	34350000 	ldrtcc	r0, [r5], #-0
     33c:	3a0e0300 	bcc	380f44 <__Stack_Size+0x380b44>
     340:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     344:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     348:	36000018 			; <UNDEFINED> instruction: 0x36000018
     34c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     350:	0b3b0b3a 	bleq	ec3040 <__Stack_Size+0xec2c40>
     354:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     358:	0000193c 	andeq	r1, r0, ip, lsr r9
     35c:	49010137 	stmdbmi	r1, {r0, r1, r2, r4, r5, r8}
     360:	00130113 	andseq	r0, r3, r3, lsl r1
     364:	00213800 	eoreq	r3, r1, r0, lsl #16
     368:	0b2f1349 	bleq	bc5094 <__Stack_Size+0xbc4c94>
     36c:	24390000 	ldrtcs	r0, [r9], #-0
     370:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     374:	0008030b 	andeq	r0, r8, fp, lsl #6
     378:	00213a00 	eoreq	r3, r1, r0, lsl #20
     37c:	2e3b0000 	cdpcs	0, 3, cr0, cr11, cr0, {0}
     380:	03193f00 	tsteq	r9, #0, 30
     384:	3b0b3a0e 	blcc	2cebc4 <__Stack_Size+0x2ce7c4>
     388:	3c19270b 	ldccc	7, cr2, [r9], {11}
     38c:	3c000019 	stccc	0, cr0, [r0], {25}
     390:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     394:	0b3a0e03 	bleq	e83ba8 <__Stack_Size+0xe837a8>
     398:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     39c:	1301193c 	movwne	r1, #6460	; 0x193c
     3a0:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
     3a4:	03193f01 	tsteq	r9, #1, 30
     3a8:	3b0b3a0e 	blcc	2cebe8 <__Stack_Size+0x2ce7e8>
     3ac:	3c19270b 	ldccc	7, cr2, [r9], {11}
     3b0:	00130119 	andseq	r0, r3, r9, lsl r1
     3b4:	002e3e00 	eoreq	r3, lr, r0, lsl #28
     3b8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     3bc:	0b3b0b3a 	bleq	ec30ac <__Stack_Size+0xec2cac>
     3c0:	13491927 	movtne	r1, #39207	; 0x9927
     3c4:	0000193c 	andeq	r1, r0, ip, lsr r9
     3c8:	3f012e3f 	svccc	0x00012e3f
     3cc:	3a0e0319 	bcc	381038 <__Stack_Size+0x380c38>
     3d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     3d4:	3c134919 	ldccc	9, cr4, [r3], {25}
     3d8:	00130119 	andseq	r0, r3, r9, lsl r1
     3dc:	002e4000 	eoreq	r4, lr, r0
     3e0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     3e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     3e8:	13491927 	movtne	r1, #39207	; 0x9927
     3ec:	0000193c 	andeq	r1, r0, ip, lsr r9
     3f0:	01110100 	tsteq	r1, r0, lsl #2
     3f4:	0b130e25 	bleq	4c3c90 <__Stack_Size+0x4c3890>
     3f8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     3fc:	00001710 	andeq	r1, r0, r0, lsl r7
     400:	0b002402 	bleq	9410 <__Stack_Size+0x9010>
     404:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     408:	0300000e 	movweq	r0, #14
     40c:	08030016 	stmdaeq	r3, {r1, r2, r4}
     410:	0b3b0b3a 	bleq	ec3100 <__Stack_Size+0xec2d00>
     414:	00001349 	andeq	r1, r0, r9, asr #6
     418:	03011304 	movweq	r1, #4868	; 0x1304
     41c:	3a0b0b0e 	bcc	2c305c <__Stack_Size+0x2c2c5c>
     420:	010b3b0b 	tsteq	fp, fp, lsl #22
     424:	05000013 	streq	r0, [r0, #-19]
     428:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     42c:	0b3b0b3a 	bleq	ec311c <__Stack_Size+0xec2d1c>
     430:	0b381349 	bleq	e0515c <__Stack_Size+0xe04d5c>
     434:	0f060000 	svceq	0x00060000
     438:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     43c:	07000013 	smladeq	r0, r3, r0, r0
     440:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     444:	0b3b0b3a 	bleq	ec3134 <__Stack_Size+0xec2d34>
     448:	00001349 	andeq	r1, r0, r9, asr #6
     44c:	03003408 	movweq	r3, #1032	; 0x408
     450:	3b0b3a0e 	blcc	2cec90 <__Stack_Size+0x2ce890>
     454:	3f13490b 	svccc	0x0013490b
     458:	00180219 	andseq	r0, r8, r9, lsl r2
     45c:	00240900 	eoreq	r0, r4, r0, lsl #18
     460:	0b3e0b0b 	bleq	f83094 <__Stack_Size+0xf82c94>
     464:	00000803 	andeq	r0, r0, r3, lsl #16
     468:	4901010a 	stmdbmi	r1, {r1, r3, r8}
     46c:	00130113 	andseq	r0, r3, r3, lsl r1
     470:	00210b00 	eoreq	r0, r1, r0, lsl #22
     474:	0b2f1349 	bleq	bc51a0 <__Stack_Size+0xbc4da0>
     478:	01000000 	mrseq	r0, (UNDEF: 0)
     47c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     480:	0e030b13 	vmoveq.32	d3[0], r0
     484:	17550e1b 	smmlane	r5, fp, lr, r0
     488:	17100111 			; <UNDEFINED> instruction: 0x17100111
     48c:	24020000 	strcs	r0, [r2], #-0
     490:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     494:	000e030b 	andeq	r0, lr, fp, lsl #6
     498:	00160300 	andseq	r0, r6, r0, lsl #6
     49c:	0b3a0803 	bleq	e824b0 <__Stack_Size+0xe820b0>
     4a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4a4:	04040000 	streq	r0, [r4], #-0
     4a8:	3a0b0b01 	bcc	2c30b4 <__Stack_Size+0x2c2cb4>
     4ac:	010b3b0b 	tsteq	fp, fp, lsl #22
     4b0:	05000013 	streq	r0, [r0, #-19]
     4b4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     4b8:	00000d1c 	andeq	r0, r0, ip, lsl sp
     4bc:	03001606 	movweq	r1, #1542	; 0x606
     4c0:	3b0b3a0e 	blcc	2ced00 <__Stack_Size+0x2ce900>
     4c4:	0013490b 	andseq	r4, r3, fp, lsl #18
     4c8:	012e0700 	teqeq	lr, r0, lsl #14
     4cc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     4d0:	0b3b0b3a 	bleq	ec31c0 <__Stack_Size+0xec2dc0>
     4d4:	01111349 	tsteq	r1, r9, asr #6
     4d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     4dc:	01194297 			; <UNDEFINED> instruction: 0x01194297
     4e0:	08000013 	stmdaeq	r0, {r0, r1, r4}
     4e4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     4e8:	0b3b0b3a 	bleq	ec31d8 <__Stack_Size+0xec2dd8>
     4ec:	17021349 	strne	r1, [r2, -r9, asr #6]
     4f0:	0b090000 	bleq	2404f8 <__Stack_Size+0x2400f8>
     4f4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     4f8:	00130106 	andseq	r0, r3, r6, lsl #2
     4fc:	012e0a00 	teqeq	lr, r0, lsl #20
     500:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     504:	0b3b0b3a 	bleq	ec31f4 <__Stack_Size+0xec2df4>
     508:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     50c:	00001301 	andeq	r1, r0, r1, lsl #6
     510:	0000180b 	andeq	r1, r0, fp, lsl #16
     514:	82890c00 	addhi	r0, r9, #0, 24
     518:	01110101 	tsteq	r1, r1, lsl #2
     51c:	13011331 	movwne	r1, #4913	; 0x1331
     520:	8a0d0000 	bhi	340528 <__Stack_Size+0x340128>
     524:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     528:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     52c:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
     530:	11000182 	smlabbne	r0, r2, r1, r0
     534:	00133101 	andseq	r3, r3, r1, lsl #2
     538:	82890f00 	addhi	r0, r9, #0, 30
     53c:	01110101 	tsteq	r1, r1, lsl #2
     540:	00001331 	andeq	r1, r0, r1, lsr r3
     544:	03003410 	movweq	r3, #1040	; 0x410
     548:	3b0b3a0e 	blcc	2ced88 <__Stack_Size+0x2ce988>
     54c:	0013490b 	andseq	r4, r3, fp, lsl #18
     550:	00241100 	eoreq	r1, r4, r0, lsl #2
     554:	0b3e0b0b 	bleq	f83188 <__Stack_Size+0xf82d88>
     558:	00000803 	andeq	r0, r0, r3, lsl #16
     55c:	03003412 	movweq	r3, #1042	; 0x412
     560:	3b0b3a0e 	blcc	2ceda0 <__Stack_Size+0x2ce9a0>
     564:	3f13490b 	svccc	0x0013490b
     568:	00180219 	andseq	r0, r8, r9, lsl r2
     56c:	012e1300 	teqeq	lr, r0, lsl #6
     570:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     574:	0b3b0b3a 	bleq	ec3264 <__Stack_Size+0xec2e64>
     578:	13491927 	movtne	r1, #39207	; 0x9927
     57c:	1301193c 	movwne	r1, #6460	; 0x193c
     580:	05140000 	ldreq	r0, [r4, #-0]
     584:	00134900 	andseq	r4, r3, r0, lsl #18
     588:	012e1500 	teqeq	lr, r0, lsl #10
     58c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     590:	0b3b0b3a 	bleq	ec3280 <__Stack_Size+0xec2e80>
     594:	1301193c 	movwne	r1, #6460	; 0x193c
     598:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
     59c:	03193f00 	tsteq	r9, #0, 30
     5a0:	3b0b3a0e 	blcc	2cede0 <__Stack_Size+0x2ce9e0>
     5a4:	3c19270b 	ldccc	7, cr2, [r9], {11}
     5a8:	17000019 	smladne	r0, r9, r0, r0
     5ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     5b0:	0b3a0e03 	bleq	e83dc4 <__Stack_Size+0xe839c4>
     5b4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     5b8:	1301193c 	movwne	r1, #6460	; 0x193c
     5bc:	01000000 	mrseq	r0, (UNDEF: 0)
     5c0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     5c4:	0e030b13 	vmoveq.32	d3[0], r0
     5c8:	17550e1b 	smmlane	r5, fp, lr, r0
     5cc:	17100111 			; <UNDEFINED> instruction: 0x17100111
     5d0:	24020000 	strcs	r0, [r2], #-0
     5d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     5d8:	000e030b 	andeq	r0, lr, fp, lsl #6
     5dc:	00160300 	andseq	r0, r6, r0, lsl #6
     5e0:	0b3a0803 	bleq	e825f4 <__Stack_Size+0xe821f4>
     5e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     5e8:	16040000 	strne	r0, [r4], -r0
     5ec:	3a0e0300 	bcc	3811f4 <__Stack_Size+0x380df4>
     5f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5f4:	05000013 	streq	r0, [r0, #-19]
     5f8:	13490035 	movtne	r0, #36917	; 0x9035
     5fc:	26060000 	strcs	r0, [r6], -r0
     600:	00134900 	andseq	r4, r3, r0, lsl #18
     604:	01040700 	tsteq	r4, r0, lsl #14
     608:	0b3a0b0b 	bleq	e8323c <__Stack_Size+0xe82e3c>
     60c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     610:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
     614:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     618:	0900000d 	stmdbeq	r0, {r0, r2, r3}
     61c:	0b0b0113 	bleq	2c0a70 <__Stack_Size+0x2c0670>
     620:	0b3b0b3a 	bleq	ec3310 <__Stack_Size+0xec2f10>
     624:	00001301 	andeq	r1, r0, r1, lsl #6
     628:	03000d0a 	movweq	r0, #3338	; 0xd0a
     62c:	3b0b3a08 	blcc	2cee54 <__Stack_Size+0x2cea54>
     630:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     634:	0b00000b 	bleq	668 <__Stack_Size+0x268>
     638:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     63c:	0b3b0b3a 	bleq	ec332c <__Stack_Size+0xec2f2c>
     640:	0b381349 	bleq	e0536c <__Stack_Size+0xe04f6c>
     644:	130c0000 	movwne	r0, #49152	; 0xc000
     648:	3a050b01 	bcc	143254 <__Stack_Size+0x142e54>
     64c:	010b3b0b 	tsteq	fp, fp, lsl #22
     650:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     654:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     658:	0b3b0b3a 	bleq	ec3348 <__Stack_Size+0xec2f48>
     65c:	05381349 	ldreq	r1, [r8, #-841]!	; 0x349
     660:	0d0e0000 	stceq	0, cr0, [lr, #-0]
     664:	3a080300 	bcc	20126c <__Stack_Size+0x200e6c>
     668:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     66c:	00053813 	andeq	r3, r5, r3, lsl r8
     670:	01010f00 	tsteq	r1, r0, lsl #30
     674:	13011349 	movwne	r1, #4937	; 0x1349
     678:	21100000 	tstcs	r0, r0
     67c:	2f134900 	svccs	0x00134900
     680:	1100000b 	tstne	r0, fp
     684:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     688:	0b3a0b0b 	bleq	e832bc <__Stack_Size+0xe82ebc>
     68c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     690:	15120000 	ldrne	r0, [r2, #-0]
     694:	00192700 	andseq	r2, r9, r0, lsl #14
     698:	000f1300 	andeq	r1, pc, r0, lsl #6
     69c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     6a0:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     6a4:	03193f00 	tsteq	r9, #0, 30
     6a8:	3b0b3a0e 	blcc	2ceee8 <__Stack_Size+0x2ceae8>
     6ac:	20192705 	andscs	r2, r9, r5, lsl #14
     6b0:	1500000b 	strne	r0, [r0, #-11]
     6b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     6b8:	0b3a0e03 	bleq	e83ecc <__Stack_Size+0xe83acc>
     6bc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     6c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     6c4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     6c8:	00130119 	andseq	r0, r3, r9, lsl r1
     6cc:	00051600 	andeq	r1, r5, r0, lsl #12
     6d0:	0b3a0e03 	bleq	e83ee4 <__Stack_Size+0xe83ae4>
     6d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     6d8:	00001802 	andeq	r1, r0, r2, lsl #16
     6dc:	03000517 	movweq	r0, #1303	; 0x517
     6e0:	3b0b3a08 	blcc	2cef08 <__Stack_Size+0x2ceb08>
     6e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     6e8:	18000017 	stmdane	r0, {r0, r1, r2, r4}
     6ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     6f0:	0b3a0e03 	bleq	e83f04 <__Stack_Size+0xe83b04>
     6f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     6f8:	01111349 	tsteq	r1, r9, asr #6
     6fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     700:	01194297 			; <UNDEFINED> instruction: 0x01194297
     704:	19000013 	stmdbne	r0, {r0, r1, r4}
     708:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     70c:	0b3b0b3a 	bleq	ec33fc <__Stack_Size+0xec2ffc>
     710:	17021349 	strne	r1, [r2, -r9, asr #6]
     714:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
     718:	03193f01 	tsteq	r9, #1, 30
     71c:	3b0b3a0e 	blcc	2cef5c <__Stack_Size+0x2ceb5c>
     720:	1113490b 	tstne	r3, fp, lsl #18
     724:	40061201 	andmi	r1, r6, r1, lsl #4
     728:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     72c:	00001301 	andeq	r1, r0, r1, lsl #6
     730:	0300341b 	movweq	r3, #1051	; 0x41b
     734:	3b0b3a0e 	blcc	2cef74 <__Stack_Size+0x2ceb74>
     738:	1c13490b 	ldcne	9, cr4, [r3], {11}
     73c:	1c00000b 	stcne	0, cr0, [r0], {11}
     740:	08030034 	stmdaeq	r3, {r2, r4, r5}
     744:	0b3b0b3a 	bleq	ec3434 <__Stack_Size+0xec3034>
     748:	17021349 	strne	r1, [r2, -r9, asr #6]
     74c:	891d0000 	ldmdbhi	sp, {}	; <UNPREDICTABLE>
     750:	11010182 	smlabbne	r1, r2, r1, r0
     754:	01133101 	tsteq	r3, r1, lsl #2
     758:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     75c:	0001828a 	andeq	r8, r1, sl, lsl #5
     760:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     764:	1f000018 	svcne	0x00000018
     768:	01018289 	smlabbeq	r1, r9, r2, r8
     76c:	13310111 	teqne	r1, #1073741828	; 0x40000004
     770:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     774:	03193f00 	tsteq	r9, #0, 30
     778:	3b0b3a0e 	blcc	2cefb8 <__Stack_Size+0x2cebb8>
     77c:	1119270b 	tstne	r9, fp, lsl #14
     780:	40061201 	andmi	r1, r6, r1, lsl #4
     784:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     788:	0b210000 	bleq	840790 <__Stack_Size+0x840390>
     78c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     790:	22000006 	andcs	r0, r0, #6
     794:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     798:	0b3b0b3a 	bleq	ec3488 <__Stack_Size+0xec3088>
     79c:	17021349 	strne	r1, [r2, -r9, asr #6]
     7a0:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
     7a4:	03193f01 	tsteq	r9, #1, 30
     7a8:	3b0b3a0e 	blcc	2cefe8 <__Stack_Size+0x2cebe8>
     7ac:	1119270b 	tstne	r9, fp, lsl #14
     7b0:	40061201 	andmi	r1, r6, r1, lsl #4
     7b4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     7b8:	00001301 	andeq	r1, r0, r1, lsl #6
     7bc:	0b002424 	bleq	9854 <__Stack_Size+0x9454>
     7c0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     7c4:	25000008 	strcs	r0, [r0, #-8]
     7c8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     7cc:	0b3a0e03 	bleq	e83fe0 <__Stack_Size+0xe83be0>
     7d0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     7d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7d8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     7dc:	00130119 	andseq	r0, r3, r9, lsl r1
     7e0:	00052600 	andeq	r2, r5, r0, lsl #12
     7e4:	0b3a0e03 	bleq	e83ff8 <__Stack_Size+0xe83bf8>
     7e8:	1349053b 	movtne	r0, #38203	; 0x953b
     7ec:	00001802 	andeq	r1, r0, r2, lsl #16
     7f0:	03003427 	movweq	r3, #1063	; 0x427
     7f4:	3b0b3a0e 	blcc	2cf034 <__Stack_Size+0x2cec34>
     7f8:	02134905 	andseq	r4, r3, #81920	; 0x14000
     7fc:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
     800:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     804:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     808:	0d1c1349 	ldceq	3, cr1, [ip, #-292]	; 0xfffffedc
     80c:	1d290000 	stcne	0, cr0, [r9, #-0]
     810:	52133100 	andspl	r3, r3, #0, 2
     814:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     818:	000b590b 	andeq	r5, fp, fp, lsl #18
     81c:	82892a00 	addhi	r2, r9, #0, 20
     820:	01110001 	tsteq	r1, r1
     824:	00001331 	andeq	r1, r0, r1, lsr r3
     828:	0182892b 	orreq	r8, r2, fp, lsr #18
     82c:	95011101 	strls	r1, [r1, #-257]	; 0x101
     830:	13311942 	teqne	r1, #1081344	; 0x108000
     834:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
     838:	03193f01 	tsteq	r9, #1, 30
     83c:	3b0b3a0e 	blcc	2cf07c <__Stack_Size+0x2cec7c>
     840:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     844:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     848:	97184006 	ldrls	r4, [r8, -r6]
     84c:	13011942 	movwne	r1, #6466	; 0x1942
     850:	052d0000 	streq	r0, [sp, #-0]!
     854:	3a0e0300 	bcc	38145c <__Stack_Size+0x38105c>
     858:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     85c:	00170213 	andseq	r0, r7, r3, lsl r2
     860:	00052e00 	andeq	r2, r5, r0, lsl #28
     864:	0b3a0803 	bleq	e82878 <__Stack_Size+0xe82478>
     868:	1349053b 	movtne	r0, #38203	; 0x953b
     86c:	00001702 	andeq	r1, r0, r2, lsl #14
     870:	0300342f 	movweq	r3, #1071	; 0x42f
     874:	3b0b3a0e 	blcc	2cf0b4 <__Stack_Size+0x2cecb4>
     878:	02134905 	andseq	r4, r3, #81920	; 0x14000
     87c:	30000018 	andcc	r0, r0, r8, lsl r0
     880:	1331002e 	teqne	r1, #46	; 0x2e
     884:	06120111 			; <UNDEFINED> instruction: 0x06120111
     888:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     88c:	31000019 	tstcc	r0, r9, lsl r0
     890:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     894:	0b3a0e03 	bleq	e840a8 <__Stack_Size+0xe83ca8>
     898:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     89c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     8a0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     8a4:	32000019 	andcc	r0, r0, #25
     8a8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     8ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     8b0:	061c1349 	ldreq	r1, [ip], -r9, asr #6
     8b4:	34330000 	ldrtcc	r0, [r3], #-0
     8b8:	3a0e0300 	bcc	3814c0 <__Stack_Size+0x3810c0>
     8bc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8c0:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     8c4:	34000018 	strcc	r0, [r0], #-24
     8c8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     8cc:	0b3a0e03 	bleq	e840e0 <__Stack_Size+0xe83ce0>
     8d0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     8d4:	0000193c 	andeq	r1, r0, ip, lsr r9
     8d8:	01110100 	tsteq	r1, r0, lsl #2
     8dc:	0b130e25 	bleq	4c4178 <__Stack_Size+0x4c3d78>
     8e0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     8e4:	01111755 	tsteq	r1, r5, asr r7
     8e8:	00001710 	andeq	r1, r0, r0, lsl r7
     8ec:	0b002402 	bleq	98fc <__Stack_Size+0x94fc>
     8f0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     8f4:	0300000e 	movweq	r0, #14
     8f8:	08030016 	stmdaeq	r3, {r1, r2, r4}
     8fc:	0b3b0b3a 	bleq	ec35ec <__Stack_Size+0xec31ec>
     900:	00001349 	andeq	r1, r0, r9, asr #6
     904:	0b010404 	bleq	4191c <__Stack_Size+0x4151c>
     908:	3b0b3a0b 	blcc	2cf13c <__Stack_Size+0x2ced3c>
     90c:	0013010b 	andseq	r0, r3, fp, lsl #2
     910:	00280500 	eoreq	r0, r8, r0, lsl #10
     914:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     918:	16060000 	strne	r0, [r6], -r0
     91c:	3a0e0300 	bcc	381524 <__Stack_Size+0x381124>
     920:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     924:	07000013 	smladeq	r0, r3, r0, r0
     928:	0b0b000f 	bleq	2c096c <__Stack_Size+0x2c056c>
     92c:	00001349 	andeq	r1, r0, r9, asr #6
     930:	03011308 	movweq	r1, #4872	; 0x1308
     934:	3a0b0b0e 	bcc	2c3574 <__Stack_Size+0x2c3174>
     938:	010b3b0b 	tsteq	fp, fp, lsl #22
     93c:	09000013 	stmdbeq	r0, {r0, r1, r4}
     940:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     944:	0b3b0b3a 	bleq	ec3634 <__Stack_Size+0xec3234>
     948:	0b381349 	bleq	e05674 <__Stack_Size+0xe05274>
     94c:	150a0000 	strne	r0, [sl, #-0]
     950:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     954:	00130113 	andseq	r0, r3, r3, lsl r1
     958:	00050b00 	andeq	r0, r5, r0, lsl #22
     95c:	00001349 	andeq	r1, r0, r9, asr #6
     960:	0301130c 	movweq	r1, #4876	; 0x130c
     964:	3a0b0b08 	bcc	2c358c <__Stack_Size+0x2c318c>
     968:	010b3b0b 	tsteq	fp, fp, lsl #22
     96c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     970:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     974:	0b3b0b3a 	bleq	ec3664 <__Stack_Size+0xec3264>
     978:	0b381349 	bleq	e056a4 <__Stack_Size+0xe052a4>
     97c:	170e0000 	strne	r0, [lr, -r0]
     980:	3a0b0b01 	bcc	2c358c <__Stack_Size+0x2c318c>
     984:	010b3b0b 	tsteq	fp, fp, lsl #22
     988:	0f000013 	svceq	0x00000013
     98c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     990:	0b3b0b3a 	bleq	ec3680 <__Stack_Size+0xec3280>
     994:	00001349 	andeq	r1, r0, r9, asr #6
     998:	03010410 	movweq	r0, #5136	; 0x1410
     99c:	3a0b0b0e 	bcc	2c35dc <__Stack_Size+0x2c31dc>
     9a0:	010b3b0b 	tsteq	fp, fp, lsl #22
     9a4:	11000013 	tstne	r0, r3, lsl r0
     9a8:	08030028 	stmdaeq	r3, {r3, r5}
     9ac:	00000d1c 	andeq	r0, r0, ip, lsl sp
     9b0:	3f002e12 	svccc	0x00002e12
     9b4:	3a0e0319 	bcc	381620 <__Stack_Size+0x381220>
     9b8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     9bc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     9c0:	97184006 	ldrls	r4, [r8, -r6]
     9c4:	00001942 	andeq	r1, r0, r2, asr #18
     9c8:	3f012e13 	svccc	0x00012e13
     9cc:	3a0e0319 	bcc	381638 <__Stack_Size+0x381238>
     9d0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     9d4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     9d8:	97184006 	ldrls	r4, [r8, -r6]
     9dc:	13011942 	movwne	r1, #6466	; 0x1942
     9e0:	34140000 	ldrcc	r0, [r4], #-0
     9e4:	3a0e0300 	bcc	3815ec <__Stack_Size+0x3811ec>
     9e8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9ec:	00170213 	andseq	r0, r7, r3, lsl r2
     9f0:	82891500 	addhi	r1, r9, #0, 10
     9f4:	01110001 	tsteq	r1, r1
     9f8:	00001331 	andeq	r1, r0, r1, lsr r3
     9fc:	01828916 	orreq	r8, r2, r6, lsl r9
     a00:	95011100 	strls	r1, [r1, #-256]	; 0x100
     a04:	13311942 	teqne	r1, #1081344	; 0x108000
     a08:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
     a0c:	03193f00 	tsteq	r9, #0, 30
     a10:	3b0b3a0e 	blcc	2cf250 <__Stack_Size+0x2cee50>
     a14:	11192705 	tstne	r9, r5, lsl #14
     a18:	40061201 	andmi	r1, r6, r1, lsl #4
     a1c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     a20:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     a24:	03193f01 	tsteq	r9, #1, 30
     a28:	3b0b3a0e 	blcc	2cf268 <__Stack_Size+0x2cee68>
     a2c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     a30:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     a34:	97184006 	ldrls	r4, [r8, -r6]
     a38:	13011942 	movwne	r1, #6466	; 0x1942
     a3c:	05190000 	ldreq	r0, [r9, #-0]
     a40:	3a0e0300 	bcc	381648 <__Stack_Size+0x381248>
     a44:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a48:	00170213 	andseq	r0, r7, r3, lsl r2
     a4c:	00341a00 	eorseq	r1, r4, r0, lsl #20
     a50:	0b3a0803 	bleq	e82a64 <__Stack_Size+0xe82664>
     a54:	1349053b 	movtne	r0, #38203	; 0x953b
     a58:	00001702 	andeq	r1, r0, r2, lsl #14
     a5c:	0300341b 	movweq	r3, #1051	; 0x41b
     a60:	3b0b3a0e 	blcc	2cf2a0 <__Stack_Size+0x2ceea0>
     a64:	00134905 	andseq	r4, r3, r5, lsl #18
     a68:	82891c00 	addhi	r1, r9, #0, 24
     a6c:	01110101 	tsteq	r1, r1, lsl #2
     a70:	13011331 	movwne	r1, #4913	; 0x1331
     a74:	8a1d0000 	bhi	740a7c <__Stack_Size+0x74067c>
     a78:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     a7c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     a80:	891e0000 	ldmdbhi	lr, {}	; <UNPREDICTABLE>
     a84:	11010182 	smlabbne	r1, r2, r1, r0
     a88:	00133101 	andseq	r3, r3, r1, lsl #2
     a8c:	00241f00 	eoreq	r1, r4, r0, lsl #30
     a90:	0b3e0b0b 	bleq	f836c4 <__Stack_Size+0xf832c4>
     a94:	00000803 	andeq	r0, r0, r3, lsl #16
     a98:	3f012e20 	svccc	0x00012e20
     a9c:	3a0e0319 	bcc	381708 <__Stack_Size+0x381308>
     aa0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     aa4:	11134919 	tstne	r3, r9, lsl r9
     aa8:	40061201 	andmi	r1, r6, r1, lsl #4
     aac:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     ab0:	00001301 	andeq	r1, r0, r1, lsl #6
     ab4:	03003421 	movweq	r3, #1057	; 0x421
     ab8:	3b0b3a0e 	blcc	2cf2f8 <__Stack_Size+0x2ceef8>
     abc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ac0:	22000017 	andcs	r0, r0, #23
     ac4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     ac8:	0b3a0e03 	bleq	e842dc <__Stack_Size+0xe83edc>
     acc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     ad0:	01111349 	tsteq	r1, r9, asr #6
     ad4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     ad8:	00194297 	mulseq	r9, r7, r2
     adc:	00052300 	andeq	r2, r5, r0, lsl #6
     ae0:	0b3a0e03 	bleq	e842f4 <__Stack_Size+0xe83ef4>
     ae4:	1349053b 	movtne	r0, #38203	; 0x953b
     ae8:	00001802 	andeq	r1, r0, r2, lsl #16
     aec:	3f002e24 	svccc	0x00002e24
     af0:	3a0e0319 	bcc	38175c <__Stack_Size+0x38135c>
     af4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     af8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     afc:	97184006 	ldrls	r4, [r8, -r6]
     b00:	00001942 	andeq	r1, r0, r2, asr #18
     b04:	3f002e25 	svccc	0x00002e25
     b08:	3a0e0319 	bcc	381774 <__Stack_Size+0x381374>
     b0c:	11053b0b 	tstne	r5, fp, lsl #22
     b10:	40061201 	andmi	r1, r6, r1, lsl #4
     b14:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b18:	34260000 	strtcc	r0, [r6], #-0
     b1c:	3a0e0300 	bcc	381724 <__Stack_Size+0x381324>
     b20:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b24:	00180213 	andseq	r0, r8, r3, lsl r2
     b28:	00352700 	eorseq	r2, r5, r0, lsl #14
     b2c:	00001349 	andeq	r1, r0, r9, asr #6
     b30:	49010128 	stmdbmi	r1, {r3, r5, r8}
     b34:	00130113 	andseq	r0, r3, r3, lsl r1
     b38:	00212900 	eoreq	r2, r1, r0, lsl #18
     b3c:	052f1349 	streq	r1, [pc, #-841]!	; 7fb <__Stack_Size+0x3fb>
     b40:	342a0000 	strtcc	r0, [sl], #-0
     b44:	3a0e0300 	bcc	38174c <__Stack_Size+0x38134c>
     b48:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b4c:	3c193f13 	ldccc	15, cr3, [r9], {19}
     b50:	2b000019 	blcs	bbc <__Stack_Size+0x7bc>
     b54:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b58:	0b3b0b3a 	bleq	ec3848 <__Stack_Size+0xec3448>
     b5c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     b60:	00001802 	andeq	r1, r0, r2, lsl #16
     b64:	3f002e2c 	svccc	0x00002e2c
     b68:	3a0e0319 	bcc	3817d4 <__Stack_Size+0x3813d4>
     b6c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     b70:	00193c19 	andseq	r3, r9, r9, lsl ip
     b74:	002e2d00 	eoreq	r2, lr, r0, lsl #26
     b78:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     b7c:	0b3b0b3a 	bleq	ec386c <__Stack_Size+0xec346c>
     b80:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     b84:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
     b88:	03193f01 	tsteq	r9, #1, 30
     b8c:	3b0b3a0e 	blcc	2cf3cc <__Stack_Size+0x2cefcc>
     b90:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     b94:	01193c13 	tsteq	r9, r3, lsl ip
     b98:	2f000013 	svccs	0x00000013
     b9c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     ba0:	0b3a0e03 	bleq	e843b4 <__Stack_Size+0xe83fb4>
     ba4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     ba8:	1301193c 	movwne	r1, #6460	; 0x193c
     bac:	2e300000 	cdpcs	0, 3, cr0, cr0, cr0, {0}
     bb0:	03193f00 	tsteq	r9, #0, 30
     bb4:	3b0b3a0e 	blcc	2cf3f4 <__Stack_Size+0x2ceff4>
     bb8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     bbc:	00193c13 	andseq	r3, r9, r3, lsl ip
     bc0:	11010000 	mrsne	r0, (UNDEF: 1)
     bc4:	130e2501 	movwne	r2, #58625	; 0xe501
     bc8:	1b0e030b 	blne	3817fc <__Stack_Size+0x3813fc>
     bcc:	1117550e 	tstne	r7, lr, lsl #10
     bd0:	00171001 	andseq	r1, r7, r1
     bd4:	00240200 	eoreq	r0, r4, r0, lsl #4
     bd8:	0b3e0b0b 	bleq	f8380c <__Stack_Size+0xf8340c>
     bdc:	00000e03 	andeq	r0, r0, r3, lsl #28
     be0:	03001603 	movweq	r1, #1539	; 0x603
     be4:	3b0b3a08 	blcc	2cf40c <__Stack_Size+0x2cf00c>
     be8:	0013490b 	andseq	r4, r3, fp, lsl #18
     bec:	01040400 	tsteq	r4, r0, lsl #8
     bf0:	0b0b0e03 	bleq	2c4404 <__Stack_Size+0x2c4004>
     bf4:	0b3b0b3a 	bleq	ec38e4 <__Stack_Size+0xec34e4>
     bf8:	00001301 	andeq	r1, r0, r1, lsl #6
     bfc:	03002805 	movweq	r2, #2053	; 0x805
     c00:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     c04:	00160600 	andseq	r0, r6, r0, lsl #12
     c08:	0b3a0e03 	bleq	e8441c <__Stack_Size+0xe8401c>
     c0c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c10:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
     c14:	03193f01 	tsteq	r9, #1, 30
     c18:	3b0b3a0e 	blcc	2cf458 <__Stack_Size+0x2cf058>
     c1c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     c20:	010b2013 	tsteq	fp, r3, lsl r0
     c24:	08000013 	stmdaeq	r0, {r0, r1, r4}
     c28:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     c2c:	0b3b0b3a 	bleq	ec391c <__Stack_Size+0xec351c>
     c30:	00001349 	andeq	r1, r0, r9, asr #6
     c34:	3f012e09 	svccc	0x00012e09
     c38:	3a0e0319 	bcc	3818a4 <__Stack_Size+0x3814a4>
     c3c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     c40:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     c44:	97184006 	ldrls	r4, [r8, -r6]
     c48:	13011942 	movwne	r1, #6466	; 0x1942
     c4c:	050a0000 	streq	r0, [sl, #-0]
     c50:	3a0e0300 	bcc	381858 <__Stack_Size+0x381458>
     c54:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c58:	00180213 	andseq	r0, r8, r3, lsl r2
     c5c:	002e0b00 	eoreq	r0, lr, r0, lsl #22
     c60:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     c64:	0b3b0b3a 	bleq	ec3954 <__Stack_Size+0xec3554>
     c68:	13491927 	movtne	r1, #39207	; 0x9927
     c6c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c70:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     c74:	0c000019 	stceq	0, cr0, [r0], {25}
     c78:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     c7c:	0b3b0b3a 	bleq	ec396c <__Stack_Size+0xec356c>
     c80:	17021349 	strne	r1, [r2, -r9, asr #6]
     c84:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
     c88:	11133101 	tstne	r3, r1, lsl #2
     c8c:	40061201 	andmi	r1, r6, r1, lsl #4
     c90:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     c94:	00001301 	andeq	r1, r0, r1, lsl #6
     c98:	3100050e 	tstcc	r0, lr, lsl #10
     c9c:	00170213 	andseq	r0, r7, r3, lsl r2
     ca0:	012e0f00 	teqeq	lr, r0, lsl #30
     ca4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ca8:	0b3b0b3a 	bleq	ec3998 <__Stack_Size+0xec3598>
     cac:	13491927 	movtne	r1, #39207	; 0x9927
     cb0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     cb4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     cb8:	00130119 	andseq	r0, r3, r9, lsl r1
     cbc:	010b1000 	mrseq	r1, (UNDEF: 11)
     cc0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     cc4:	34110000 	ldrcc	r0, [r1], #-0
     cc8:	3a0e0300 	bcc	3818d0 <__Stack_Size+0x3814d0>
     ccc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cd0:	00180213 	andseq	r0, r8, r3, lsl r2
     cd4:	00341200 	eorseq	r1, r4, r0, lsl #4
     cd8:	0b3a0e03 	bleq	e844ec <__Stack_Size+0xe840ec>
     cdc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ce0:	1d130000 	ldcne	0, cr0, [r3, #-0]
     ce4:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     ce8:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     cec:	000b590b 	andeq	r5, fp, fp, lsl #18
     cf0:	012e1400 	teqeq	lr, r0, lsl #8
     cf4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     cf8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     cfc:	01111927 	tsteq	r1, r7, lsr #18
     d00:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d04:	01194297 			; <UNDEFINED> instruction: 0x01194297
     d08:	15000013 	strne	r0, [r0, #-19]
     d0c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     d10:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     d14:	17021349 	strne	r1, [r2, -r9, asr #6]
     d18:	34160000 	ldrcc	r0, [r6], #-0
     d1c:	3a0e0300 	bcc	381924 <__Stack_Size+0x381524>
     d20:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d24:	00170213 	andseq	r0, r7, r3, lsl r2
     d28:	012e1700 	teqeq	lr, r0, lsl #14
     d2c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     d30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     d34:	13491927 	movtne	r1, #39207	; 0x9927
     d38:	06120111 			; <UNDEFINED> instruction: 0x06120111
     d3c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     d40:	00130119 	andseq	r0, r3, r9, lsl r1
     d44:	00051800 	andeq	r1, r5, r0, lsl #16
     d48:	0b3a0e03 	bleq	e8455c <__Stack_Size+0xe8415c>
     d4c:	1349053b 	movtne	r0, #38203	; 0x953b
     d50:	00001802 	andeq	r1, r0, r2, lsl #16
     d54:	0b000f19 	bleq	49c0 <__Stack_Size+0x45c0>
     d58:	0013490b 	andseq	r4, r3, fp, lsl #18
     d5c:	00341a00 	eorseq	r1, r4, r0, lsl #20
     d60:	0b3a0e03 	bleq	e84574 <__Stack_Size+0xe84174>
     d64:	1349053b 	movtne	r0, #38203	; 0x953b
     d68:	00001802 	andeq	r1, r0, r2, lsl #16
     d6c:	55010b1b 	strpl	r0, [r1, #-2843]	; 0xb1b
     d70:	1c000017 	stcne	0, cr0, [r0], {23}
     d74:	0111010b 	tsteq	r1, fp, lsl #2
     d78:	13010612 	movwne	r0, #5650	; 0x1612
     d7c:	051d0000 	ldreq	r0, [sp, #-0]
     d80:	3a080300 	bcc	201988 <__Stack_Size+0x201588>
     d84:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d88:	00170213 	andseq	r0, r7, r3, lsl r2
     d8c:	00051e00 	andeq	r1, r5, r0, lsl #28
     d90:	0b3a0803 	bleq	e82da4 <__Stack_Size+0xe829a4>
     d94:	1349053b 	movtne	r0, #38203	; 0x953b
     d98:	00001802 	andeq	r1, r0, r2, lsl #16
     d9c:	3f012e1f 	svccc	0x00012e1f
     da0:	3a0e0319 	bcc	381a0c <__Stack_Size+0x38160c>
     da4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     da8:	11134919 	tstne	r3, r9, lsl r9
     dac:	40061201 	andmi	r1, r6, r1, lsl #4
     db0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     db4:	01000000 	mrseq	r0, (UNDEF: 0)
     db8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     dbc:	0e030b13 	vmoveq.32	d3[0], r0
     dc0:	17550e1b 	smmlane	r5, fp, lr, r0
     dc4:	17100111 			; <UNDEFINED> instruction: 0x17100111
     dc8:	24020000 	strcs	r0, [r2], #-0
     dcc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     dd0:	000e030b 	andeq	r0, lr, fp, lsl #6
     dd4:	00160300 	andseq	r0, r6, r0, lsl #6
     dd8:	0b3a0803 	bleq	e82dec <__Stack_Size+0xe829ec>
     ddc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     de0:	15040000 	strne	r0, [r4, #-0]
     de4:	00192700 	andseq	r2, r9, r0, lsl #14
     de8:	000f0500 	andeq	r0, pc, r0, lsl #10
     dec:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     df0:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     df4:	03193f01 	tsteq	r9, #1, 30
     df8:	3b0b3a0e 	blcc	2cf638 <__Stack_Size+0x2cf238>
     dfc:	1119270b 	tstne	r9, fp, lsl #14
     e00:	40061201 	andmi	r1, r6, r1, lsl #4
     e04:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     e08:	00001301 	andeq	r1, r0, r1, lsl #6
     e0c:	03003407 	movweq	r3, #1031	; 0x407
     e10:	3b0b3a0e 	blcc	2cf650 <__Stack_Size+0x2cf250>
     e14:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e18:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
     e1c:	0111010b 	tsteq	r1, fp, lsl #2
     e20:	13010612 	movwne	r0, #5650	; 0x1612
     e24:	89090000 	stmdbhi	r9, {}	; <UNPREDICTABLE>
     e28:	11000182 	smlabbne	r0, r2, r1, r0
     e2c:	00133101 	andseq	r3, r3, r1, lsl #2
     e30:	00340a00 	eorseq	r0, r4, r0, lsl #20
     e34:	0b3a0e03 	bleq	e84648 <__Stack_Size+0xe84248>
     e38:	1349053b 	movtne	r0, #38203	; 0x953b
     e3c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     e40:	350b0000 	strcc	r0, [fp, #-0]
     e44:	00134900 	andseq	r4, r3, r0, lsl #18
     e48:	00340c00 	eorseq	r0, r4, r0, lsl #24
     e4c:	0b3a0e03 	bleq	e84660 <__Stack_Size+0xe84260>
     e50:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e54:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     e58:	340d0000 	strcc	r0, [sp], #-0
     e5c:	3a0e0300 	bcc	381a64 <__Stack_Size+0x381664>
     e60:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e64:	3c193f13 	ldccc	15, cr3, [r9], {19}
     e68:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     e6c:	13490101 	movtne	r0, #37121	; 0x9101
     e70:	00001301 	andeq	r1, r0, r1, lsl #6
     e74:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
     e78:	000b2f13 	andeq	r2, fp, r3, lsl pc
     e7c:	002e1000 	eoreq	r1, lr, r0
     e80:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e84:	0b3b0b3a 	bleq	ec3b74 <__Stack_Size+0xec3774>
     e88:	13491927 	movtne	r1, #39207	; 0x9927
     e8c:	0000193c 	andeq	r1, r0, ip, lsr r9
     e90:	01110100 	tsteq	r1, r0, lsl #2
     e94:	0b130e25 	bleq	4c4730 <__Stack_Size+0x4c4330>
     e98:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     e9c:	01111755 	tsteq	r1, r5, asr r7
     ea0:	00001710 	andeq	r1, r0, r0, lsl r7
     ea4:	0b002402 	bleq	9eb4 <__Stack_Size+0x9ab4>
     ea8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     eac:	0300000e 	movweq	r0, #14
     eb0:	08030016 	stmdaeq	r3, {r1, r2, r4}
     eb4:	0b3b0b3a 	bleq	ec3ba4 <__Stack_Size+0xec37a4>
     eb8:	00001349 	andeq	r1, r0, r9, asr #6
     ebc:	0b000f04 	bleq	4ad4 <__Stack_Size+0x46d4>
     ec0:	0013490b 	andseq	r4, r3, fp, lsl #18
     ec4:	01040500 	tsteq	r4, r0, lsl #10
     ec8:	0b0b0e03 	bleq	2c46dc <__Stack_Size+0x2c42dc>
     ecc:	0b3b0b3a 	bleq	ec3bbc <__Stack_Size+0xec37bc>
     ed0:	00001301 	andeq	r1, r0, r1, lsl #6
     ed4:	03002806 	movweq	r2, #2054	; 0x806
     ed8:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     edc:	00160700 	andseq	r0, r6, r0, lsl #14
     ee0:	0b3a0e03 	bleq	e846f4 <__Stack_Size+0xe842f4>
     ee4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ee8:	13080000 	movwne	r0, #32768	; 0x8000
     eec:	0b0e0301 	bleq	381af8 <__Stack_Size+0x3816f8>
     ef0:	3b0b3a0b 	blcc	2cf724 <__Stack_Size+0x2cf324>
     ef4:	0013010b 	andseq	r0, r3, fp, lsl #2
     ef8:	000d0900 	andeq	r0, sp, r0, lsl #18
     efc:	0b3a0e03 	bleq	e84710 <__Stack_Size+0xe84310>
     f00:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f04:	00000b38 	andeq	r0, r0, r8, lsr fp
     f08:	2701150a 	strcs	r1, [r1, -sl, lsl #10]
     f0c:	01134919 	tsteq	r3, r9, lsl r9
     f10:	0b000013 	bleq	f64 <__Stack_Size+0xb64>
     f14:	13490005 	movtne	r0, #36869	; 0x9005
     f18:	130c0000 	movwne	r0, #49152	; 0xc000
     f1c:	0b080301 	bleq	201b28 <__Stack_Size+0x201728>
     f20:	3b0b3a0b 	blcc	2cf754 <__Stack_Size+0x2cf354>
     f24:	0013010b 	andseq	r0, r3, fp, lsl #2
     f28:	000d0d00 	andeq	r0, sp, r0, lsl #26
     f2c:	0b3a0803 	bleq	e82f40 <__Stack_Size+0xe82b40>
     f30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f34:	00000b38 	andeq	r0, r0, r8, lsr fp
     f38:	0b01170e 	bleq	46b78 <__Stack_Size+0x46778>
     f3c:	3b0b3a0b 	blcc	2cf770 <__Stack_Size+0x2cf370>
     f40:	0013010b 	andseq	r0, r3, fp, lsl #2
     f44:	000d0f00 	andeq	r0, sp, r0, lsl #30
     f48:	0b3a0803 	bleq	e82f5c <__Stack_Size+0xe82b5c>
     f4c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f50:	15100000 	ldrne	r0, [r0, #-0]
     f54:	00192700 	andseq	r2, r9, r0, lsl #14
     f58:	002e1100 	eoreq	r1, lr, r0, lsl #2
     f5c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     f60:	0b3b0b3a 	bleq	ec3c50 <__Stack_Size+0xec3850>
     f64:	01111927 	tsteq	r1, r7, lsr #18
     f68:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f6c:	00194296 	mulseq	r9, r6, r2
     f70:	00341200 	eorseq	r1, r4, r0, lsl #4
     f74:	0b3a0e03 	bleq	e84788 <__Stack_Size+0xe84388>
     f78:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f7c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     f80:	34130000 	ldrcc	r0, [r3], #-0
     f84:	3a0e0300 	bcc	381b8c <__Stack_Size+0x38178c>
     f88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f8c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     f90:	00000018 	andeq	r0, r0, r8, lsl r0
     f94:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     f98:	030b130e 	movweq	r1, #45838	; 0xb30e
     f9c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     fa0:	10011117 	andne	r1, r1, r7, lsl r1
     fa4:	02000017 	andeq	r0, r0, #23
     fa8:	0b0b0024 	bleq	2c1040 <__Stack_Size+0x2c0c40>
     fac:	0e030b3e 	vmoveq.16	d3[0], r0
     fb0:	16030000 	strne	r0, [r3], -r0
     fb4:	3a080300 	bcc	201bbc <__Stack_Size+0x2017bc>
     fb8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fbc:	04000013 	streq	r0, [r0], #-19
     fc0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     fc4:	0b3b0b3a 	bleq	ec3cb4 <__Stack_Size+0xec38b4>
     fc8:	00001349 	andeq	r1, r0, r9, asr #6
     fcc:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     fd0:	06000013 			; <UNDEFINED> instruction: 0x06000013
     fd4:	0b0b0104 	bleq	2c13ec <__Stack_Size+0x2c0fec>
     fd8:	0b3b0b3a 	bleq	ec3cc8 <__Stack_Size+0xec38c8>
     fdc:	00001301 	andeq	r1, r0, r1, lsl #6
     fe0:	03002807 	movweq	r2, #2055	; 0x807
     fe4:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     fe8:	01040800 	tsteq	r4, r0, lsl #16
     fec:	0b0b0e03 	bleq	2c4800 <__Stack_Size+0x2c4400>
     ff0:	0b3b0b3a 	bleq	ec3ce0 <__Stack_Size+0xec38e0>
     ff4:	00001301 	andeq	r1, r0, r1, lsl #6
     ff8:	03011309 	movweq	r1, #4873	; 0x1309
     ffc:	3a0b0b0e 	bcc	2c3c3c <__Stack_Size+0x2c383c>
    1000:	010b3b0b 	tsteq	fp, fp, lsl #22
    1004:	0a000013 	beq	1058 <__Stack_Size+0xc58>
    1008:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    100c:	0b3b0b3a 	bleq	ec3cfc <__Stack_Size+0xec38fc>
    1010:	0b381349 	bleq	e05d3c <__Stack_Size+0xe0593c>
    1014:	0f0b0000 	svceq	0x000b0000
    1018:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    101c:	0c000013 	stceq	0, cr0, [r0], {19}
    1020:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    1024:	13011349 	movwne	r1, #4937	; 0x1349
    1028:	050d0000 	streq	r0, [sp, #-0]
    102c:	00134900 	andseq	r4, r3, r0, lsl #18
    1030:	01130e00 	tsteq	r3, r0, lsl #28
    1034:	0b0b0803 	bleq	2c3048 <__Stack_Size+0x2c2c48>
    1038:	0b3b0b3a 	bleq	ec3d28 <__Stack_Size+0xec3928>
    103c:	00001301 	andeq	r1, r0, r1, lsl #6
    1040:	03000d0f 	movweq	r0, #3343	; 0xd0f
    1044:	3b0b3a08 	blcc	2cf86c <__Stack_Size+0x2cf46c>
    1048:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    104c:	1000000b 	andne	r0, r0, fp
    1050:	0b0b0117 	bleq	2c14b4 <__Stack_Size+0x2c10b4>
    1054:	0b3b0b3a 	bleq	ec3d44 <__Stack_Size+0xec3944>
    1058:	00001301 	andeq	r1, r0, r1, lsl #6
    105c:	03000d11 	movweq	r0, #3345	; 0xd11
    1060:	3b0b3a08 	blcc	2cf888 <__Stack_Size+0x2cf488>
    1064:	0013490b 	andseq	r4, r3, fp, lsl #18
    1068:	00151200 	andseq	r1, r5, r0, lsl #4
    106c:	00001927 	andeq	r1, r0, r7, lsr #18
    1070:	3f012e13 	svccc	0x00012e13
    1074:	3a0e0319 	bcc	381ce0 <__Stack_Size+0x3818e0>
    1078:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    107c:	11134919 	tstne	r3, r9, lsl r9
    1080:	40061201 	andmi	r1, r6, r1, lsl #4
    1084:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1088:	00001301 	andeq	r1, r0, r1, lsl #6
    108c:	03000514 	movweq	r0, #1300	; 0x514
    1090:	3b0b3a0e 	blcc	2cf8d0 <__Stack_Size+0x2cf4d0>
    1094:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1098:	15000017 	strne	r0, [r0, #-23]
    109c:	0111010b 	tsteq	r1, fp, lsl #2
    10a0:	13010612 	movwne	r0, #5650	; 0x1612
    10a4:	34160000 	ldrcc	r0, [r6], #-0
    10a8:	3a0e0300 	bcc	381cb0 <__Stack_Size+0x3818b0>
    10ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10b0:	00170213 	andseq	r0, r7, r3, lsl r2
    10b4:	010b1700 	tsteq	fp, r0, lsl #14
    10b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    10bc:	34180000 	ldrcc	r0, [r8], #-0
    10c0:	3a0e0300 	bcc	381cc8 <__Stack_Size+0x3818c8>
    10c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10c8:	19000013 	stmdbne	r0, {r0, r1, r4}
    10cc:	0e03012e 	adfeqsp	f0, f3, #0.5
    10d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    10d4:	01111927 	tsteq	r1, r7, lsr #18
    10d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    10dc:	01194297 			; <UNDEFINED> instruction: 0x01194297
    10e0:	1a000013 	bne	1134 <__Stack_Size+0xd34>
    10e4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    10e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    10ec:	17021349 	strne	r1, [r2, -r9, asr #6]
    10f0:	0a1b0000 	beq	6c10f8 <__Stack_Size+0x6c0cf8>
    10f4:	3a0e0300 	bcc	381cfc <__Stack_Size+0x3818fc>
    10f8:	11053b0b 	tstne	r5, fp, lsl #22
    10fc:	1c000001 	stcne	0, cr0, [r0], {1}
    1100:	01018289 	smlabbeq	r1, r9, r2, r8
    1104:	13010111 	movwne	r0, #4369	; 0x1111
    1108:	8a1d0000 	bhi	741110 <__Stack_Size+0x740d10>
    110c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    1110:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    1114:	891e0000 	ldmdbhi	lr, {}	; <UNPREDICTABLE>
    1118:	11010182 	smlabbne	r1, r2, r1, r0
    111c:	01133101 	tsteq	r3, r1, lsl #2
    1120:	1f000013 	svcne	0x00000013
    1124:	01018289 	smlabbeq	r1, r9, r2, r8
    1128:	13310111 	teqne	r1, #1073741828	; 0x40000004
    112c:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    1130:	03193f00 	tsteq	r9, #0, 30
    1134:	3b0b3a0e 	blcc	2cf974 <__Stack_Size+0x2cf574>
    1138:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    113c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1140:	96184006 	ldrls	r4, [r8], -r6
    1144:	00001942 	andeq	r1, r0, r2, asr #18
    1148:	03003421 	movweq	r3, #1057	; 0x421
    114c:	3b0b3a08 	blcc	2cf974 <__Stack_Size+0x2cf574>
    1150:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1154:	22000017 	andcs	r0, r0, #23
    1158:	00018289 	andeq	r8, r1, r9, lsl #5
    115c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1160:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    1164:	03193f01 	tsteq	r9, #1, 30
    1168:	3b0b3a0e 	blcc	2cf9a8 <__Stack_Size+0x2cf5a8>
    116c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1170:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1174:	96184006 	ldrls	r4, [r8], -r6
    1178:	13011942 	movwne	r1, #6466	; 0x1942
    117c:	34240000 	strtcc	r0, [r4], #-0
    1180:	3a080300 	bcc	201d88 <__Stack_Size+0x201988>
    1184:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1188:	00170213 	andseq	r0, r7, r3, lsl r2
    118c:	010b2500 	tsteq	fp, r0, lsl #10
    1190:	13011755 	movwne	r1, #5973	; 0x1755
    1194:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
    1198:	03193f00 	tsteq	r9, #0, 30
    119c:	3b0b3a0e 	blcc	2cf9dc <__Stack_Size+0x2cf5dc>
    11a0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    11a4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    11a8:	96184006 	ldrls	r4, [r8], -r6
    11ac:	00001942 	andeq	r1, r0, r2, asr #18
    11b0:	3f012e27 	svccc	0x00012e27
    11b4:	3a0e0319 	bcc	381e20 <__Stack_Size+0x381a20>
    11b8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    11bc:	11134919 	tstne	r3, r9, lsl r9
    11c0:	40061201 	andmi	r1, r6, r1, lsl #4
    11c4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    11c8:	00001301 	andeq	r1, r0, r1, lsl #6
    11cc:	03000528 	movweq	r0, #1320	; 0x528
    11d0:	3b0b3a0e 	blcc	2cfa10 <__Stack_Size+0x2cf610>
    11d4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    11d8:	29000017 	stmdbcs	r0, {r0, r1, r2, r4}
    11dc:	0e03012e 	adfeqsp	f0, f3, #0.5
    11e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    11e4:	0b201927 	bleq	807688 <__Stack_Size+0x807288>
    11e8:	00001301 	andeq	r1, r0, r1, lsl #6
    11ec:	0300342a 	movweq	r3, #1066	; 0x42a
    11f0:	3b0b3a0e 	blcc	2cfa30 <__Stack_Size+0x2cf630>
    11f4:	00134905 	andseq	r4, r3, r5, lsl #18
    11f8:	000a2b00 	andeq	r2, sl, r0, lsl #22
    11fc:	0b3a0e03 	bleq	e84a10 <__Stack_Size+0xe84610>
    1200:	0000053b 	andeq	r0, r0, fp, lsr r5
    1204:	01010b2c 	tsteq	r1, ip, lsr #22
    1208:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
    120c:	0000010b 	andeq	r0, r0, fp, lsl #2
    1210:	0b01172e 	bleq	46ed0 <__Stack_Size+0x46ad0>
    1214:	3b0b3a0b 	blcc	2cfa48 <__Stack_Size+0x2cf648>
    1218:	00130105 	andseq	r0, r3, r5, lsl #2
    121c:	000d2f00 	andeq	r2, sp, r0, lsl #30
    1220:	0b3a0803 	bleq	e83234 <__Stack_Size+0xe82e34>
    1224:	1349053b 	movtne	r0, #38203	; 0x953b
    1228:	1d300000 	ldcne	0, cr0, [r0, #-0]
    122c:	11133101 	tstne	r3, r1, lsl #2
    1230:	58061201 	stmdapl	r6, {r0, r9, ip}
    1234:	0105590b 	tsteq	r5, fp, lsl #18
    1238:	31000013 	tstcc	r0, r3, lsl r0
    123c:	13310034 	teqne	r1, #52	; 0x34
    1240:	00001702 	andeq	r1, r0, r2, lsl #14
    1244:	31000a32 	tstcc	r0, r2, lsr sl
    1248:	00011113 	andeq	r1, r1, r3, lsl r1
    124c:	011d3300 	tsteq	sp, r0, lsl #6
    1250:	01521331 	cmpeq	r2, r1, lsr r3
    1254:	0b581755 	bleq	1606fb0 <__Stack_Size+0x1606bb0>
    1258:	13010559 	movwne	r0, #5465	; 0x1559
    125c:	0b340000 	bleq	d01264 <__Stack_Size+0xd00e64>
    1260:	00175501 	andseq	r5, r7, r1, lsl #10
    1264:	00343500 	eorseq	r3, r4, r0, lsl #10
    1268:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    126c:	89360000 	ldmdbhi	r6!, {}	; <UNPREDICTABLE>
    1270:	11010182 	smlabbne	r1, r2, r1, r0
    1274:	37000001 	strcc	r0, [r0, -r1]
    1278:	00018289 	andeq	r8, r1, r9, lsl #5
    127c:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    1280:	00133119 	andseq	r3, r3, r9, lsl r1
    1284:	012e3800 	teqeq	lr, r0, lsl #16
    1288:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    128c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1290:	01111927 	tsteq	r1, r7, lsr #18
    1294:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1298:	01194297 			; <UNDEFINED> instruction: 0x01194297
    129c:	39000013 	stmdbcc	r0, {r0, r1, r4}
    12a0:	08030005 	stmdaeq	r3, {r0, r2}
    12a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    12a8:	17021349 	strne	r1, [r2, -r9, asr #6]
    12ac:	2e3a0000 	cdpcs	0, 3, cr0, cr10, cr0, {0}
    12b0:	03193f00 	tsteq	r9, #0, 30
    12b4:	3b0b3a0e 	blcc	2cfaf4 <__Stack_Size+0x2cf6f4>
    12b8:	11192705 	tstne	r9, r5, lsl #14
    12bc:	40061201 	andmi	r1, r6, r1, lsl #4
    12c0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    12c4:	343b0000 	ldrtcc	r0, [fp], #-0
    12c8:	3a0e0300 	bcc	381ed0 <__Stack_Size+0x381ad0>
    12cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12d0:	3c193f13 	ldccc	15, cr3, [r9], {19}
    12d4:	3c000019 	stccc	0, cr0, [r0], {25}
    12d8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    12dc:	0b3b0b3a 	bleq	ec3fcc <__Stack_Size+0xec3bcc>
    12e0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    12e4:	00001802 	andeq	r1, r0, r2, lsl #16
    12e8:	3f012e3d 	svccc	0x00012e3d
    12ec:	3a0e0319 	bcc	381f58 <__Stack_Size+0x381b58>
    12f0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    12f4:	3c134919 	ldccc	9, cr4, [r3], {25}
    12f8:	00130119 	andseq	r0, r3, r9, lsl r1
    12fc:	012e3e00 	teqeq	lr, r0, lsl #28
    1300:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1304:	0b3b0b3a 	bleq	ec3ff4 <__Stack_Size+0xec3bf4>
    1308:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    130c:	00001301 	andeq	r1, r0, r1, lsl #6
    1310:	3f012e3f 	svccc	0x00012e3f
    1314:	3a0e0319 	bcc	381f80 <__Stack_Size+0x381b80>
    1318:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    131c:	01193c19 	tsteq	r9, r9, lsl ip
    1320:	40000013 	andmi	r0, r0, r3, lsl r0
    1324:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1328:	0b3a0e03 	bleq	e84b3c <__Stack_Size+0xe8473c>
    132c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1330:	0000193c 	andeq	r1, r0, ip, lsr r9
    1334:	01110100 	tsteq	r1, r0, lsl #2
    1338:	0b130e25 	bleq	4c4bd4 <__Stack_Size+0x4c47d4>
    133c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1340:	01111755 	tsteq	r1, r5, asr r7
    1344:	00001710 	andeq	r1, r0, r0, lsl r7
    1348:	0b002402 	bleq	a358 <__Stack_Size+0x9f58>
    134c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1350:	0300000e 	movweq	r0, #14
    1354:	08030016 	stmdaeq	r3, {r1, r2, r4}
    1358:	0b3b0b3a 	bleq	ec4048 <__Stack_Size+0xec3c48>
    135c:	00001349 	andeq	r1, r0, r9, asr #6
    1360:	0b000f04 	bleq	4f78 <__Stack_Size+0x4b78>
    1364:	0013490b 	andseq	r4, r3, fp, lsl #18
    1368:	012e0500 	teqeq	lr, r0, lsl #10
    136c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1370:	0b3b0b3a 	bleq	ec4060 <__Stack_Size+0xec3c60>
    1374:	01111927 	tsteq	r1, r7, lsr #18
    1378:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    137c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1380:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1384:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1388:	0b3b0b3a 	bleq	ec4078 <__Stack_Size+0xec3c78>
    138c:	17021349 	strne	r1, [r2, -r9, asr #6]
    1390:	34070000 	strcc	r0, [r7], #-0
    1394:	3a080300 	bcc	201f9c <__Stack_Size+0x201b9c>
    1398:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    139c:	00180213 	andseq	r0, r8, r3, lsl r2
    13a0:	00340800 	eorseq	r0, r4, r0, lsl #16
    13a4:	0b3a0803 	bleq	e833b8 <__Stack_Size+0xe82fb8>
    13a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    13ac:	00001702 	andeq	r1, r0, r2, lsl #14
    13b0:	03003409 	movweq	r3, #1033	; 0x409
    13b4:	3b0b3a0e 	blcc	2cfbf4 <__Stack_Size+0x2cf7f4>
    13b8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    13bc:	00000017 	andeq	r0, r0, r7, lsl r0

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000071 	andeq	r0, r0, r1, ror r0
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00310002 	eorseq	r0, r1, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	73010000 	movwvc	r0, #4096	; 0x1000
      1c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
      24:	5f630000 	svcpl	0x00630000
      28:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	6174735f 	cmnvs	r4, pc, asr r3
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	70757472 	rsbsvc	r7, r5, r2, ror r4
      34:	0100732e 	tsteq	r0, lr, lsr #6
      38:	00000000 	andeq	r0, r0, r0

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	00f00205 	rscseq	r0, r0, r5, lsl #4

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	c1030800 	tstgt	r3, r0, lsl #16
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	31210100 	teqcc	r1, r0, lsl #2
      48:	23212121 	teqcs	r1, #1073741832	; 0x40000008
      4c:	21212121 	teqcs	r1, r1, lsr #2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	2131212f 	teqcs	r1, pc, lsr #2
      54:	30212131 	eorcc	r2, r1, r1, lsr r1
      58:	2068032f 	rsbcs	r0, r8, pc, lsr #6
      5c:	36322f34 	shasxcc	r2, r2, r4
      60:	01000202 	tsteq	r0, r2, lsl #4
      64:	02050001 	andeq	r0, r5, #1
      68:	08000138 	stmdaeq	r0, {r3, r4, r5, r8}
      6c:	0100eb03 	tsteq	r0, r3, lsl #22
      70:	01000202 	tsteq	r0, r2, lsl #4
      74:	0000a201 	andeq	sl, r0, r1, lsl #4
      78:	33000200 	movwcc	r0, #512	; 0x200
      7c:	02000000 	andeq	r0, r0, #0
      80:	0d0efb01 	vstreq	d15, [lr, #-4]
      84:	01010100 	mrseq	r0, (UNDEF: 17)
      88:	00000001 	andeq	r0, r0, r1
      8c:	01000001 	tsteq	r0, r1
      90:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
      94:	5f32336d 	svcpl	0x0032336d
      98:	0062696c 	rsbeq	r6, r2, ip, ror #18
      9c:	726f6300 	rsbvc	r6, pc, #0, 6
      a0:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
      a4:	616d5f33 	cmnvs	sp, r3, lsr pc
      a8:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
      ac:	00010053 	andeq	r0, r1, r3, asr r0
      b0:	05000000 	streq	r0, [r0, #-0]
      b4:	00000002 	andeq	r0, r0, r2
      b8:	01370300 	teqeq	r7, r0, lsl #6
      bc:	200b0321 	andcs	r0, fp, r1, lsr #6
      c0:	200b0321 	andcs	r0, fp, r1, lsr #6
      c4:	200b0321 	andcs	r0, fp, r1, lsr #6
      c8:	200b032f 	andcs	r0, fp, pc, lsr #6
      cc:	200b032f 	andcs	r0, fp, pc, lsr #6
      d0:	200b032f 	andcs	r0, fp, pc, lsr #6
      d4:	200b0321 	andcs	r0, fp, r1, lsr #6
      d8:	200b032f 	andcs	r0, fp, pc, lsr #6
      dc:	0a032f2f 	beq	cbda0 <__Stack_Size+0xcb9a0>
      e0:	0b032f20 	bleq	cbd68 <__Stack_Size+0xcb968>
      e4:	0b032f20 	bleq	cbd6c <__Stack_Size+0xcb96c>
      e8:	0b032f20 	bleq	cbd70 <__Stack_Size+0xcb970>
      ec:	0b032f20 	bleq	cbd74 <__Stack_Size+0xcb974>
      f0:	0b032120 	bleq	c8578 <__Stack_Size+0xc8178>
      f4:	0b032120 	bleq	c857c <__Stack_Size+0xc817c>
      f8:	0b032f20 	bleq	cbd80 <__Stack_Size+0xcb980>
      fc:	0b032120 	bleq	c8584 <__Stack_Size+0xc8184>
     100:	0b032120 	bleq	c8588 <__Stack_Size+0xc8188>
     104:	0b032f20 	bleq	cbd8c <__Stack_Size+0xcb98c>
     108:	0b032f20 	bleq	cbd90 <__Stack_Size+0xcb990>
     10c:	0a032f20 	beq	cbd94 <__Stack_Size+0xcb994>
     110:	0b032120 	bleq	c8598 <__Stack_Size+0xc8198>
     114:	01022120 	tsteq	r2, r0, lsr #2
     118:	85010100 	strhi	r0, [r1, #-256]	; 0x100
     11c:	02000003 	andeq	r0, r0, #3
     120:	0000be00 	andeq	fp, r0, r0, lsl #28
     124:	fb010200 	blx	4092e <__Stack_Size+0x4052e>
     128:	01000d0e 	tsteq	r0, lr, lsl #26
     12c:	00010101 	andeq	r0, r1, r1, lsl #2
     130:	00010000 	andeq	r0, r1, r0
     134:	2f2e0100 	svccs	0x002e0100
     138:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     13c:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     140:	2f2e0062 	svccs	0x002e0062
     144:	5f627375 	svcpl	0x00627375
     148:	0062696c 	rsbeq	r6, r2, ip, ror #18
     14c:	62737500 	rsbsvs	r7, r3, #0, 10
     150:	0000632e 	andeq	r6, r0, lr, lsr #6
     154:	74730000 	ldrbtvc	r0, [r3], #-0
     158:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     15c:	5f783031 	svcpl	0x00783031
     160:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     164:	0100682e 	tsteq	r0, lr, lsr #16
     168:	61680000 	cmnvs	r8, r0
     16c:	61776472 	cmnvs	r7, r2, ror r4
     170:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     174:	00000000 	andeq	r0, r0, r0
     178:	5f627375 	svcpl	0x00627375
     17c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     180:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     184:	73750000 	cmnvc	r5, #0
     188:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     18c:	00682e66 	rsbeq	r2, r8, r6, ror #28
     190:	75000002 	strvc	r0, [r0, #-2]
     194:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
     198:	00000000 	andeq	r0, r0, r0
     19c:	5f627375 	svcpl	0x00627375
     1a0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     1a4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1a8:	73750000 	cmnvc	r5, #0
     1ac:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     1b0:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     1b4:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     1b8:	0000682e 	andeq	r6, r0, lr, lsr #16
     1bc:	66640000 	strbtvs	r0, [r4], -r0
     1c0:	00682e75 	rsbeq	r2, r8, r5, ror lr
     1c4:	75000000 	strvc	r0, [r0, #-0]
     1c8:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
     1cc:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
     1d0:	00020068 	andeq	r0, r2, r8, rrx
     1d4:	62737500 	rsbsvs	r7, r3, #0, 10
     1d8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     1dc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1e0:	00000000 	andeq	r0, r0, r0
     1e4:	013c0205 	teqeq	ip, r5, lsl #4
     1e8:	a1030800 	tstge	r3, r0, lsl #16
     1ec:	01020101 	tsteq	r2, r1, lsl #2
     1f0:	00010100 	andeq	r0, r1, r0, lsl #2
     1f4:	013e0205 	teqeq	lr, r5, lsl #4
     1f8:	b6030800 	strlt	r0, [r3], -r0, lsl #16
     1fc:	01020102 	tsteq	r2, r2, lsl #2
     200:	00010100 	andeq	r0, r1, r0, lsl #2
     204:	01400205 	cmpeq	r0, r5, lsl #4
     208:	b9030800 	stmdblt	r3, {fp}
     20c:	01020102 	tsteq	r2, r2, lsl #2
     210:	00010100 	andeq	r0, r1, r0, lsl #2
     214:	01420205 	cmpeq	r2, r5, lsl #4
     218:	ed030800 	stc	8, cr0, [r3, #-0]
     21c:	24150102 	ldrcs	r0, [r5], #-258	; 0x102
     220:	01000402 	tsteq	r0, r2, lsl #8
     224:	02050001 	andeq	r0, r5, #1
     228:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
     22c:	01039403 	tsteq	r3, r3, lsl #8
     230:	01000102 	tsteq	r0, r2, lsl #2
     234:	02050001 	andeq	r0, r5, #1
     238:	08000150 	stmdaeq	r0, {r4, r6, r8}
     23c:	01039803 	tsteq	r3, r3, lsl #16
     240:	08024b13 	stmdaeq	r2, {r0, r1, r4, r8, r9, fp, lr}
     244:	00010100 	andeq	r0, r1, r0, lsl #2
     248:	01680205 	cmneq	r8, r5, lsl #4
     24c:	9e030800 	cdpls	8, 0, cr0, cr3, cr0, {0}
     250:	01020103 	tsteq	r2, r3, lsl #2
     254:	00010100 	andeq	r0, r1, r0, lsl #2
     258:	016a0205 	cmneq	sl, r5, lsl #4
     25c:	a2030800 	andge	r0, r3, #0, 16
     260:	01020103 	tsteq	r2, r3, lsl #2
     264:	00010100 	andeq	r0, r1, r0, lsl #2
     268:	016c0205 	cmneq	ip, r5, lsl #4
     26c:	a6030800 	strge	r0, [r3], -r0, lsl #16
     270:	01020103 	tsteq	r2, r3, lsl #2
     274:	00010100 	andeq	r0, r1, r0, lsl #2
     278:	016e0205 	cmneq	lr, r5, lsl #4
     27c:	aa030800 	bge	c2284 <__Stack_Size+0xc1e84>
     280:	01020103 	tsteq	r2, r3, lsl #2
     284:	00010100 	andeq	r0, r1, r0, lsl #2
     288:	01700205 	cmneq	r0, r5, lsl #4
     28c:	ae030800 	cdpge	8, 0, cr0, cr3, cr0, {0}
     290:	01020103 	tsteq	r2, r3, lsl #2
     294:	00010100 	andeq	r0, r1, r0, lsl #2
     298:	01720205 	cmneq	r2, r5, lsl #4
     29c:	b2030800 	andlt	r0, r3, #0, 16
     2a0:	01020103 	tsteq	r2, r3, lsl #2
     2a4:	00010100 	andeq	r0, r1, r0, lsl #2
     2a8:	01740205 	cmneq	r4, r5, lsl #4
     2ac:	b6030800 	strlt	r0, [r3], -r0, lsl #16
     2b0:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     2b4:	01010006 	tsteq	r1, r6
     2b8:	80020500 	andhi	r0, r2, r0, lsl #10
     2bc:	03080001 	movweq	r0, #32769	; 0x8001
     2c0:	2101029d 			; <UNDEFINED> instruction: 0x2101029d
     2c4:	2f1f2130 	svccs	0x001f2130
     2c8:	0b03211f 	bleq	c874c <__Stack_Size+0xc834c>
     2cc:	20750320 	rsbscs	r0, r5, r0, lsr #6
     2d0:	231d2322 	tstcs	sp, #-2013265920	; 0x88000000
     2d4:	92759291 	rsbsls	r9, r5, #268435465	; 0x10000009
     2d8:	2f3e7630 	svccs	0x003e7630
     2dc:	08212c21 	stmdaeq	r1!, {r0, r5, sl, fp, sp}
     2e0:	00010100 	andeq	r0, r1, r0, lsl #2
     2e4:	02280205 	eoreq	r0, r8, #1342177280	; 0x50000000
     2e8:	bc030800 	stclt	8, cr0, [r3], {-0}
     2ec:	1b250102 	blne	9406fc <__Stack_Size+0x9402fc>
     2f0:	8a3e7525 	bhi	f9d78c <__Stack_Size+0xf9d38c>
     2f4:	03212221 	teqeq	r1, #268435458	; 0x10000002
     2f8:	03312076 	teqeq	r1, #118	; 0x76
     2fc:	21212010 	teqcs	r1, r0, lsl r0
     300:	2221211e 	eorcs	r2, r1, #-2147483641	; 0x80000007
     304:	0b022131 	bleq	887d0 <__Stack_Size+0x883d0>
     308:	00010100 	andeq	r0, r1, r0, lsl #2
     30c:	02880205 	addeq	r0, r8, #1342177280	; 0x50000000
     310:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
     314:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     318:	01010006 	tsteq	r1, r6
     31c:	94020500 	strls	r0, [r2], #-1280	; 0x500
     320:	03080002 	movweq	r0, #32770	; 0x8002
     324:	130102fa 	movwne	r0, #4858	; 0x12fa
     328:	01000602 	tsteq	r0, r2, lsl #12
     32c:	02050001 	andeq	r0, r5, #1
     330:	080002a0 	stmdaeq	r0, {r5, r7, r9}
     334:	0102fe03 	tsteq	r2, r3, lsl #28
     338:	5a313d13 	bpl	c4f78c <__Stack_Size+0xc4f38c>
     33c:	01000602 	tsteq	r0, r2, lsl #12
     340:	02050001 	andeq	r0, r5, #1
     344:	080002c0 	stmdaeq	r0, {r6, r7, r9}
     348:	01038703 	tsteq	r3, r3, lsl #14
     34c:	00060213 	andeq	r0, r6, r3, lsl r2
     350:	05000101 	streq	r0, [r0, #-257]	; 0x101
     354:	0002cc02 	andeq	ip, r2, r2, lsl #24
     358:	02e30308 	rsceq	r0, r3, #8, 6	; 0x20000000
     35c:	3d762101 	ldfcce	f2, [r6, #-4]!
     360:	0402214d 	streq	r2, [r2], #-333	; 0x14d
     364:	00010100 	andeq	r0, r1, r0, lsl #2
     368:	02f40205 	rscseq	r0, r4, #1342177280	; 0x50000000
     36c:	27030800 	strcs	r0, [r3, -r0, lsl #16]
     370:	20110301 	andscs	r0, r1, r1, lsl #6
     374:	02005b92 	andeq	r5, r0, #149504	; 0x24800
     378:	20060204 	andcs	r0, r6, r4, lsl #4
     37c:	3d888606 	stccc	6, cr8, [r8, #24]
     380:	2d21211f 	stfcss	f2, [r1, #-124]!	; 0xffffff84
     384:	032f302f 	teqeq	pc, #47	; 0x2f
     388:	032000dc 	teqeq	r0, #220	; 0xdc
     38c:	022e7fa8 	eoreq	r7, lr, #168, 30	; 0x2a0
     390:	0101000d 	tsteq	r1, sp
     394:	00020500 	andeq	r0, r2, r0, lsl #10
     398:	03000000 	movweq	r0, #0
     39c:	150101a5 	strne	r0, [r1, #-421]	; 0x1a5
     3a0:	01000202 	tsteq	r0, r2, lsl #4
     3a4:	02050001 	andeq	r0, r5, #1
     3a8:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
     3ac:	0101ab03 	tsteq	r1, r3, lsl #22
     3b0:	023f3e14 	eorseq	r3, pc, #20, 28	; 0x140
     3b4:	01010008 	tsteq	r1, r8
     3b8:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
     3bc:	03080003 	movweq	r0, #32771	; 0x8003
     3c0:	170101b5 			; <UNDEFINED> instruction: 0x170101b5
     3c4:	32222c22 	eorcc	r2, r2, #8704	; 0x2200
     3c8:	01000602 	tsteq	r0, r2, lsl #12
     3cc:	02050001 	andeq	r0, r5, #1
     3d0:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
     3d4:	0101c303 	tsteq	r1, r3, lsl #6
     3d8:	84302131 	ldrthi	r2, [r0], #-305	; 0x131
     3dc:	2f312f40 	svccs	0x00312f40
     3e0:	312f4b31 	teqcc	pc, r1, lsr fp	; <UNPREDICTABLE>
     3e4:	2f2f3d3e 	svccs	0x002f3d3e
     3e8:	222f4b22 	eorcs	r4, pc, #34816	; 0x8800
     3ec:	502f222c 	eorpl	r2, pc, ip, lsr #4
     3f0:	01000702 	tsteq	r0, r2, lsl #14
     3f4:	02050001 	andeq	r0, r5, #1
     3f8:	08000428 	stmdaeq	r0, {r3, r5, sl}
     3fc:	0101f303 	tsteq	r1, r3, lsl #6
     400:	221f4016 	andscs	r4, pc, #22
     404:	3d21211e 	stfccs	f2, [r1, #-120]!	; 0xffffff88
     408:	00080223 	andeq	r0, r8, r3, lsr #4
     40c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     410:	00045002 	andeq	r5, r4, r2
     414:	02820308 	addeq	r0, r2, #8, 6	; 0x20000000
     418:	3d3d1301 	ldccc	3, cr1, [sp, #-4]!
     41c:	00060236 	andeq	r0, r6, r6, lsr r2
     420:	05000101 	streq	r0, [r0, #-257]	; 0x101
     424:	00046c02 	andeq	r6, r4, r2, lsl #24
     428:	00d50308 	sbcseq	r0, r5, r8, lsl #6
     42c:	02021401 	andeq	r1, r2, #16777216	; 0x1000000
     430:	00010100 	andeq	r0, r1, r0, lsl #2
     434:	04700205 	ldrbteq	r0, [r0], #-517	; 0x205
     438:	bc030800 	stclt	8, cr0, [r3], {-0}
     43c:	3d240103 	stfccs	f0, [r4, #-12]!
     440:	3d1f303d 	ldccc	0, cr3, [pc, #-244]	; 354 <_Minimum_Stack_Size+0x254>
     444:	0003022f 	andeq	r0, r3, pc, lsr #4
     448:	05000101 	streq	r0, [r0, #-257]	; 0x101
     44c:	00049402 	andeq	r9, r4, r2, lsl #8
     450:	028f0308 	addeq	r0, pc, #8, 6	; 0x20000000
     454:	4b302101 	blmi	c08860 <__Stack_Size+0xc08460>
     458:	211f2130 	tstcs	pc, r0, lsr r1	; <UNPREDICTABLE>
     45c:	022f303d 	eoreq	r3, pc, #61	; 0x3d
     460:	0101000d 	tsteq	r1, sp
     464:	d4020500 	strle	r0, [r2], #-1280	; 0x500
     468:	03080004 	movweq	r0, #32772	; 0x8004
     46c:	220103c7 	andcs	r0, r1, #469762051	; 0x1c000003
     470:	2f3d1d40 	svccs	0x003d1d40
     474:	03022f2f 	movweq	r2, #12079	; 0x2f2f
     478:	00010100 	andeq	r0, r1, r0, lsl #2
     47c:	04f80205 	ldrbteq	r0, [r8], #517	; 0x205
     480:	d0030800 	andle	r0, r3, r0, lsl #16
     484:	40210103 	eormi	r0, r1, r3, lsl #2
     488:	3d59321c 	lfmcc	f3, 2, [r9, #-112]	; 0xffffff90
     48c:	4b3c0d03 	blmi	f038a0 <__Stack_Size+0xf034a0>
     490:	423d4b50 	eorsmi	r4, sp, #80, 22	; 0x14000
     494:	5942345c 	stmdbpl	r2, {r2, r3, r4, r6, sl, ip, sp}^
     498:	3e4b5e3d 	mcrcc	14, 2, r5, cr11, cr13, {1}
     49c:	022a5f42 	eoreq	r5, sl, #264	; 0x108
     4a0:	0101000e 	tsteq	r1, lr
     4a4:	0000006e 	andeq	r0, r0, lr, rrx
     4a8:	00680002 	rsbeq	r0, r8, r2
     4ac:	01020000 	mrseq	r0, (UNDEF: 2)
     4b0:	000d0efb 	strdeq	r0, [sp], -fp
     4b4:	01010101 	tsteq	r1, r1, lsl #2
     4b8:	01000000 	mrseq	r0, (UNDEF: 0)
     4bc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     4c0:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     4c4:	6c5f3233 	lfmvs	f3, 2, [pc], {51}	; 0x33
     4c8:	2e006269 	cdpcs	2, 0, cr6, cr0, cr9, {3}
     4cc:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
     4d0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     4d4:	74730000 	ldrbtvc	r0, [r3], #-0
     4d8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     4dc:	5f783031 	svcpl	0x00783031
     4e0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     4e4:	0100682e 	tsteq	r0, lr, lsr #16
     4e8:	73750000 	cmnvc	r5, #0
     4ec:	6f635f62 	svcvs	0x00635f62
     4f0:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     4f4:	00000200 	andeq	r0, r0, r0, lsl #4
     4f8:	2e627375 	mcrcs	3, 3, r7, cr2, cr5, {3}
     4fc:	00000068 	andeq	r0, r0, r8, rrx
     500:	62737500 	rsbsvs	r7, r3, #0, 10
     504:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
     508:	70697263 	rsbvc	r7, r9, r3, ror #4
     50c:	2e726f74 	mrccs	15, 3, r6, cr2, cr4, {3}
     510:	00000063 	andeq	r0, r0, r3, rrx
     514:	00930000 	addseq	r0, r3, r0
     518:	00020000 	andeq	r0, r2, r0
     51c:	0000005d 	andeq	r0, r0, sp, asr r0
     520:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     524:	0101000d 	tsteq	r1, sp
     528:	00000101 	andeq	r0, r0, r1, lsl #2
     52c:	00000100 	andeq	r0, r0, r0, lsl #2
     530:	732f2e01 	teqvc	pc, #1, 28
     534:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     538:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     53c:	616d0000 	cmnvs	sp, r0
     540:	632e6e69 	teqvs	lr, #1680	; 0x690
     544:	00000000 	andeq	r0, r0, r0
     548:	2e756664 	cdpcs	6, 7, cr6, cr5, cr4, {3}
     54c:	00000068 	andeq	r0, r0, r8, rrx
     550:	72616800 	rsbvc	r6, r1, #0, 16
     554:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
     558:	00682e65 	rsbeq	r2, r8, r5, ror #28
     55c:	75000000 	strvc	r0, [r0, #-0]
     560:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
     564:	00000000 	andeq	r0, r0, r0
     568:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     56c:	30316632 	eorscc	r6, r1, r2, lsr r6
     570:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     574:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     578:	00000100 	andeq	r0, r0, r0, lsl #2
     57c:	02050000 	andeq	r0, r5, #0
     580:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
     584:	24012603 	strcs	r2, [r1], #-1539	; 0x603
     588:	2f2f2f2f 	svccs	0x002f2f2f
     58c:	661c0330 			; <UNDEFINED> instruction: 0x661c0330
     590:	0402004e 	streq	r0, [r2], #-78	; 0x4e
     594:	02004601 	andeq	r4, r0, #1048576	; 0x100000
     598:	17030104 	strne	r0, [r3, -r4, lsl #2]
     59c:	0a034c66 	beq	d373c <__Stack_Size+0xd333c>
     5a0:	4c324c3c 	ldcmi	12, cr4, [r2], #-240	; 0xffffff10
     5a4:	334a0903 	movtcc	r0, #43267	; 0xa903
     5a8:	01000602 	tsteq	r0, r2, lsl #12
     5ac:	0002da01 	andeq	sp, r2, r1, lsl #20
     5b0:	58000200 	stmdapl	r0, {r9}
     5b4:	02000000 	andeq	r0, r0, #0
     5b8:	0d0efb01 	vstreq	d15, [lr, #-4]
     5bc:	01010100 	mrseq	r0, (UNDEF: 17)
     5c0:	00000001 	andeq	r0, r0, r1
     5c4:	01000001 	tsteq	r0, r1
     5c8:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
     5cc:	5f32336d 	svcpl	0x0032336d
     5d0:	0062696c 	rsbeq	r6, r2, ip, ror #18
     5d4:	72616800 	rsbvc	r6, r1, #0, 16
     5d8:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
     5dc:	00632e65 	rsbeq	r2, r3, r5, ror #28
     5e0:	73000000 	movwvc	r0, #0
     5e4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     5e8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     5ec:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     5f0:	00682e65 	rsbeq	r2, r8, r5, ror #28
     5f4:	68000001 	stmdavs	r0, {r0}
     5f8:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
     5fc:	2e657261 	cdpcs	2, 6, cr7, cr5, cr1, {3}
     600:	00000068 	andeq	r0, r0, r8, rrx
     604:	62737500 	rsbsvs	r7, r3, #0, 10
     608:	0000682e 	andeq	r6, r0, lr, lsr #16
     60c:	00000000 	andeq	r0, r0, r0
     610:	06240205 	strteq	r0, [r4], -r5, lsl #4
     614:	2c030800 	stccs	8, cr0, [r3], {-0}
     618:	4b3b1401 	blmi	ec5624 <__Stack_Size+0xec5224>
     61c:	01000402 	tsteq	r0, r2, lsl #8
     620:	02050001 	andeq	r0, r5, #1
     624:	00000000 	andeq	r0, r0, r0
     628:	14013103 	strne	r3, [r1], #-259	; 0x103
     62c:	0004025d 	andeq	r0, r4, sp, asr r2
     630:	05000101 	streq	r0, [r0, #-257]	; 0x101
     634:	00063a02 	andeq	r3, r6, r2, lsl #20
     638:	013a0308 	teqeq	sl, r8, lsl #6
     63c:	02010f03 	andeq	r0, r1, #3, 30
     640:	01010002 	tsteq	r1, r2
     644:	00020500 	andeq	r0, r2, r0, lsl #10
     648:	03000000 	movweq	r0, #0
     64c:	2e0100cc 	cdpcs	0, 0, cr0, cr1, cr12, {6}
     650:	003d493d 	eorseq	r4, sp, sp, lsr r9
     654:	31010402 	tstcc	r1, r2, lsl #8
     658:	02002006 	andeq	r2, r0, #6
     65c:	22060104 	andcs	r0, r6, #4, 2
     660:	02040200 	andeq	r0, r4, #0, 4
     664:	04020022 	streq	r0, [r2], #-34	; 0x22
     668:	5a331e02 	bpl	cc7e78 <__Stack_Size+0xcc7a78>
     66c:	01040200 	mrseq	r0, R12_usr
     670:	02002006 	andeq	r2, r0, #6
     674:	22060204 	andcs	r0, r6, #4, 4	; 0x40000000
     678:	02040200 	andeq	r0, r4, #0, 4
     67c:	0a02321e 	beq	8cefc <__Stack_Size+0x8cafc>
     680:	00010100 	andeq	r0, r1, r0, lsl #2
     684:	06400205 	strbeq	r0, [r0], -r5, lsl #4
     688:	e1030800 	tst	r3, r0, lsl #16
     68c:	21130100 	tstcs	r3, r0, lsl #2
     690:	674b4b1f 	smlaldvs	r4, fp, pc, fp	; <UNPREDICTABLE>
     694:	0c024c4b 	stceq	12, cr4, [r2], {75}	; 0x4b
     698:	00010100 	andeq	r0, r1, r0, lsl #2
     69c:	06880205 	streq	r0, [r8], r5, lsl #4
     6a0:	eb030800 	bl	c26a8 <__Stack_Size+0xc22a8>
     6a4:	00150100 	andseq	r0, r5, r0, lsl #2
     6a8:	59010402 	stmdbpl	r1, {r1, sl}
     6ac:	0085424d 	addeq	r4, r5, sp, asr #4
     6b0:	51010402 	tstpl	r1, r2, lsl #8
     6b4:	004a0c03 	subeq	r0, sl, r3, lsl #24
     6b8:	4b010402 	blmi	416c8 <__Stack_Size+0x412c8>
     6bc:	09024b3e 	stmdbeq	r2, {r1, r2, r3, r4, r5, r8, r9, fp, lr}
     6c0:	00010100 	andeq	r0, r1, r0, lsl #2
     6c4:	06e80205 	strbteq	r0, [r8], r5, lsl #4
     6c8:	96030800 	strls	r0, [r3], -r0, lsl #16
     6cc:	01020101 	tsteq	r2, r1, lsl #2
     6d0:	00010100 	andeq	r0, r1, r0, lsl #2
     6d4:	06ec0205 	strbteq	r0, [ip], r5, lsl #4
     6d8:	a3030800 	movwge	r0, #14336	; 0x3800
     6dc:	4b140101 	blmi	500ae8 <__Stack_Size+0x5006e8>
     6e0:	02002f21 	andeq	r2, r0, #33, 30	; 0x84
     6e4:	3d240104 	stfccs	f0, [r4, #-16]!
     6e8:	01000302 	tsteq	r0, r2, lsl #6
     6ec:	02050001 	andeq	r0, r5, #1
     6f0:	08000708 	stmdaeq	r0, {r3, r8, r9, sl}
     6f4:	0101af03 	tsteq	r1, r3, lsl #30
     6f8:	02332213 	eorseq	r2, r3, #805306369	; 0x30000001
     6fc:	01010007 	tsteq	r1, r7
     700:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
     704:	03080007 	movweq	r0, #32775	; 0x8007
     708:	030101b9 	movweq	r0, #4537	; 0x11b9
     70c:	77030109 	strvc	r0, [r3, -r9, lsl #2]
     710:	22242520 	eorcs	r2, r4, #32, 10	; 0x8000000
     714:	0005023e 	andeq	r0, r5, lr, lsr r2
     718:	05000101 	streq	r0, [r0, #-257]	; 0x101
     71c:	00073402 	andeq	r3, r7, r2, lsl #8
     720:	01de0308 	bicseq	r0, lr, r8, lsl #6
     724:	6a5c1401 	bvs	1705730 <__Stack_Size+0x1705330>
     728:	00090231 	andeq	r0, r9, r1, lsr r2
     72c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     730:	00076002 	andeq	r6, r7, r2
     734:	01f00308 	mvnseq	r0, r8, lsl #6
     738:	2c222401 	cfstrscs	mvf2, [r2], #-4
     73c:	31368b5a 	teqcc	r6, sl, asr fp
     740:	02503e26 	subseq	r3, r0, #608	; 0x260
     744:	01010006 	tsteq	r1, r6
     748:	a8020500 	stmdage	r2, {r8, sl}
     74c:	03080007 	movweq	r0, #32775	; 0x8007
     750:	0301028e 	movweq	r0, #4750	; 0x128e
     754:	7403010c 	strvc	r0, [r3], #-268	; 0x10c
     758:	200c0320 	andcs	r0, ip, r0, lsr #6
     75c:	313d1c24 	teqcc	sp, r4, lsr #24
     760:	1d23312c 	stfnes	f3, [r3, #-176]!	; 0xffffff50
     764:	1d243b31 	fstmdbxne	r4!, {d3-d26}	;@ Deprecated
     768:	2f307323 	svccs	0x00307323
     76c:	21312221 	teqcs	r1, r1, lsr #4
     770:	0249211f 	subeq	r2, r9, #-1073741817	; 0xc0000007
     774:	01010009 	tsteq	r1, r9
     778:	14020500 	strne	r0, [r2], #-1280	; 0x500
     77c:	03080008 	movweq	r0, #32776	; 0x8008
     780:	140102b1 	strne	r0, [r1], #-689	; 0x2b1
     784:	302f2f59 	eorcc	r2, pc, r9, asr pc	; <UNPREDICTABLE>
     788:	01000702 	tsteq	r0, r2, lsl #14
     78c:	02050001 	andeq	r0, r5, #1
     790:	08000838 	stmdaeq	r0, {r3, r4, r5, fp}
     794:	0101ca03 	tsteq	r1, r3, lsl #20
     798:	2001b703 	andcs	fp, r1, r3, lsl #14
     79c:	2e7ec903 	cdpcs	9, 7, cr12, cr14, cr3, {0}
     7a0:	2001b703 	andcs	fp, r1, r3, lsl #14
     7a4:	207ecf03 	rsbscs	ip, lr, r3, lsl #30
     7a8:	3032312f 	eorscc	r3, r2, pc, lsr #2
     7ac:	04022d21 	streq	r2, [r2], #-3361	; 0xd21
     7b0:	00010100 	andeq	r0, r1, r0, lsl #2
     7b4:	08600205 	stmdaeq	r0!, {r0, r2, r9}^
     7b8:	bb030800 	bllt	c27c0 <__Stack_Size+0xc23c0>
     7bc:	00160102 	andseq	r0, r6, r2, lsl #2
     7c0:	40010402 	andmi	r0, r1, r2, lsl #8
     7c4:	01000702 	tsteq	r0, r2, lsl #14
     7c8:	02050001 	andeq	r0, r5, #1
     7cc:	08000874 	stmdaeq	r0, {r2, r4, r5, r6, fp}
     7d0:	0102c703 	tsteq	r2, r3, lsl #14
     7d4:	22211f13 	eorcs	r1, r1, #19, 30	; 0x4c
     7d8:	01040200 	mrseq	r0, R12_usr
     7dc:	00216730 	eoreq	r6, r1, r0, lsr r7
     7e0:	2f010402 	svccs	0x00010402
     7e4:	0702234f 	streq	r2, [r2, -pc, asr #6]
     7e8:	00010100 	andeq	r0, r1, r0, lsl #2
     7ec:	00000205 	andeq	r0, r0, r5, lsl #4
     7f0:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
     7f4:	002e0102 	eoreq	r0, lr, r2, lsl #2
     7f8:	2f010402 	svccs	0x00010402
     7fc:	0221b14b 	eoreq	fp, r1, #-1073741806	; 0xc0000012
     800:	01010004 	tsteq	r1, r4
     804:	a8020500 	stmdage	r2, {r8, sl}
     808:	03080008 	movweq	r0, #32776	; 0x8008
     80c:	220102e2 	andcs	r0, r1, #536870926	; 0x2000000e
     810:	1f21302f 	svcne	0x0021302f
     814:	04020021 	streq	r0, [r2], #-33	; 0x21
     818:	004b2401 	subeq	r2, fp, r1, lsl #8
     81c:	3d010402 	cfstrscc	mvf0, [r1, #-8]
     820:	0402003d 	streq	r0, [r2], #-61	; 0x3d
     824:	2f3e3d01 	svccs	0x003e3d01
     828:	09022523 	stmdbeq	r2, {r0, r1, r5, r8, sl, sp}
     82c:	00010100 	andeq	r0, r1, r0, lsl #2
     830:	08f40205 	ldmeq	r4!, {r0, r2, r9}^
     834:	fd030800 	stc2	8, cr0, [r3, #-0]
     838:	02160102 	andseq	r0, r6, #-2147483648	; 0x80000000
     83c:	01010006 	tsteq	r1, r6
     840:	00020500 	andeq	r0, r2, r0, lsl #10
     844:	03080009 	movweq	r0, #32777	; 0x8009
     848:	14010384 	strne	r0, [r1], #-900	; 0x384
     84c:	0009023d 	andeq	r0, r9, sp, lsr r2
     850:	05000101 	streq	r0, [r0, #-257]	; 0x101
     854:	00091802 	andeq	r1, r9, r2, lsl #16
     858:	038d0308 	orreq	r0, sp, #8, 6	; 0x20000000
     85c:	30221401 	eorcc	r1, r2, r1, lsl #8
     860:	0002024c 	andeq	r0, r2, ip, asr #4
     864:	05000101 	streq	r0, [r0, #-257]	; 0x101
     868:	00092c02 	andeq	r2, r9, r2, lsl #24
     86c:	03990308 	orrseq	r0, r9, #8, 6	; 0x20000000
     870:	024b1401 	subeq	r1, fp, #16777216	; 0x1000000
     874:	01010004 	tsteq	r1, r4
     878:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
     87c:	03080009 	movweq	r0, #32777	; 0x8009
     880:	1501039f 	strne	r0, [r1, #-927]	; 0x39f
     884:	09022630 	stmdbeq	r2, {r4, r5, r9, sl, sp}
     888:	2e010100 	adfcss	f0, f1, f0
     88c:	02000002 	andeq	r0, r0, #2
     890:	00008200 	andeq	r8, r0, r0, lsl #4
     894:	fb010200 	blx	4109e <__Stack_Size+0x40c9e>
     898:	01000d0e 	tsteq	r0, lr, lsl #26
     89c:	00010101 	andeq	r0, r1, r1, lsl #2
     8a0:	00010000 	andeq	r0, r1, r0
     8a4:	2f2e0100 	svccs	0x002e0100
     8a8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     8ac:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     8b0:	2f2e0062 	svccs	0x002e0062
     8b4:	5f627375 	svcpl	0x00627375
     8b8:	0062696c 	rsbeq	r6, r2, ip, ror #18
     8bc:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     8c0:	0000632e 	andeq	r6, r0, lr, lsr #6
     8c4:	74730000 	ldrbtvc	r0, [r3], #-0
     8c8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     8cc:	5f783031 	svcpl	0x00783031
     8d0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     8d4:	0100682e 	tsteq	r0, lr, lsr #16
     8d8:	73750000 	cmnvc	r5, #0
     8dc:	6f635f62 	svcvs	0x00635f62
     8e0:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     8e4:	00000200 	andeq	r0, r0, r0, lsl #4
     8e8:	2e756664 	cdpcs	6, 7, cr6, cr5, cr4, {3}
     8ec:	00000068 	andeq	r0, r0, r8, rrx
     8f0:	62737500 	rsbsvs	r7, r3, #0, 10
     8f4:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
     8f8:	00682e74 	rsbeq	r2, r8, r4, ror lr
     8fc:	75000002 	strvc	r0, [r0, #-2]
     900:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
     904:	00000000 	andeq	r0, r0, r0
     908:	64726168 	ldrbtvs	r6, [r2], #-360	; 0x168
     90c:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     910:	0000682e 	andeq	r6, r0, lr, lsr #16
     914:	00000000 	andeq	r0, r0, r0
     918:	09540205 	ldmdbeq	r4, {r0, r2, r9}^
     91c:	37030800 	strcc	r0, [r3, -r0, lsl #16]
     920:	1c321301 	ldcne	3, cr1, [r2], #-4
     924:	21212121 	teqcs	r1, r1, lsr #2
     928:	1e222121 	sufnesp	f2, f2, f1
     92c:	4b2f2f21 	blmi	bcc5b8 <__Stack_Size+0xbcc1b8>
     930:	2f211f21 	svccs	0x00211f21
     934:	01001502 	tsteq	r0, r2, lsl #10
     938:	02050001 	andeq	r0, r5, #1
     93c:	080009b0 	stmdaeq	r0, {r4, r5, r7, r8, fp}
     940:	0102da03 	tsteq	r2, r3, lsl #20
     944:	211f2121 	tstcs	pc, r1, lsr #2
     948:	221e231f 	andscs	r2, lr, #2080374784	; 0x7c000000
     94c:	03222f21 	teqeq	r2, #33, 30	; 0x84
     950:	73032e0e 	movwvc	r2, #15886	; 0x3e0e
     954:	2f42302e 	svccs	0x0042302e
     958:	08022c24 	stmdaeq	r2, {r2, r5, sl, fp, sp}
     95c:	00010100 	andeq	r0, r1, r0, lsl #2
     960:	00000205 	andeq	r0, r0, r5, lsl #4
     964:	f2030000 	vhadd.s8	d0, d3, d0
     968:	01020102 	tsteq	r2, r2, lsl #2
     96c:	00010100 	andeq	r0, r1, r0, lsl #2
     970:	09f40205 	ldmibeq	r4!, {r0, r2, r9}^
     974:	f5030800 			; <UNDEFINED> instruction: 0xf5030800
     978:	21130102 	tstcs	r3, r2, lsl #2
     97c:	0222224b 	eoreq	r2, r2, #-1342177276	; 0xb0000004
     980:	01010005 	tsteq	r1, r5
     984:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
     988:	0308000a 	movweq	r0, #32778	; 0x800a
     98c:	130102fe 	movwne	r0, #4862	; 0x12fe
     990:	22224b21 	eorcs	r4, r2, #33792	; 0x8400
     994:	01000502 	tsteq	r0, r2, lsl #10
     998:	02050001 	andeq	r0, r5, #1
     99c:	08000a24 	stmdaeq	r0, {r2, r5, r9, fp}
     9a0:	01038803 	tsteq	r3, r3, lsl #16
     9a4:	4b211f22 	blmi	848634 <__Stack_Size+0x848234>
     9a8:	023e222f 	eorseq	r2, lr, #-268435454	; 0xf0000002
     9ac:	01010007 	tsteq	r1, r7
     9b0:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
     9b4:	0308000a 	movweq	r0, #32778	; 0x800a
     9b8:	21010392 			; <UNDEFINED> instruction: 0x21010392
     9bc:	84226721 	strthi	r6, [r2], #-1825	; 0x721
     9c0:	01000902 	tsteq	r0, r2, lsl #18
     9c4:	02050001 	andeq	r0, r5, #1
     9c8:	08000a80 	stmdaeq	r0, {r7, r9, fp}
     9cc:	01039b03 	tsteq	r3, r3, lsl #22
     9d0:	3e201303 	cdpcc	3, 2, cr1, cr0, cr3, {0}
     9d4:	315c221e 	cmpcc	ip, lr, lsl r2
     9d8:	0402003e 	streq	r0, [r2], #-62	; 0x3e
     9dc:	00200601 	eoreq	r0, r0, r1, lsl #12
     9e0:	06020402 	streq	r0, [r2], -r2, lsl #8
     9e4:	04020059 	streq	r0, [r2], #-89	; 0x59
     9e8:	5a335702 	bpl	cd65f8 <__Stack_Size+0xcd61f8>
     9ec:	01000c02 	tsteq	r0, r2, lsl #24
     9f0:	02050001 	andeq	r0, r5, #1
     9f4:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
     9f8:	0100ca03 	tsteq	r0, r3, lsl #20
     9fc:	321c2431 	andscc	r2, ip, #822083584	; 0x31000000
     a00:	1e231f21 	cdpne	15, 2, cr1, cr3, cr1, {1}
     a04:	5a222222 	bpl	889294 <__Stack_Size+0x888e94>
     a08:	221e224b 	andscs	r2, lr, #-1342177276	; 0xb0000004
     a0c:	17033d1f 	smladne	r3, pc, sp, r3	; <UNPREDICTABLE>
     a10:	2f3e2f3c 	svccs	0x003e2f3c
     a14:	3d3c7003 	ldccc	0, cr7, [ip, #-12]!
     a18:	03302f31 	teqeq	r0, #49, 30	; 0xc4
     a1c:	234c3c0a 	movtcs	r3, #52234	; 0xcc0a
     a20:	3d312f36 	ldccc	15, cr2, [r1, #-216]!	; 0xffffff28
     a24:	0c03674c 	stceq	7, cr6, [r3], {76}	; 0x4c
     a28:	2f242a58 	svccs	0x00242a58
     a2c:	312f254b 	teqcc	pc, fp, asr #10
     a30:	31353031 	teqcc	r5, r1, lsr r0
     a34:	2f581d03 	svccs	0x00581d03
     a38:	4c30353f 	cfldr32mi	mvfx3, [r0], #-252	; 0xffffff04
     a3c:	4121211f 	teqmi	r1, pc, lsl r1
     a40:	312f5930 	teqcc	pc, r0, lsr r9	; <UNPREDICTABLE>
     a44:	30303e31 	eorscc	r3, r0, r1, lsr lr
     a48:	2f593143 	svccs	0x00593143
     a4c:	3535432f 	ldrcc	r4, [r5, #-815]!	; 0x32f
     a50:	3d305931 	ldccc	9, cr5, [r0, #-196]!	; 0xffffff3c
     a54:	211f3d1f 	tstcs	pc, pc, lsl sp	; <UNPREDICTABLE>
     a58:	4b764fc9 	blmi	1d94984 <__Stack_Size+0x1d94584>
     a5c:	2f302f41 	svccs	0x00302f41
     a60:	352f302f 	strcc	r3, [pc, #-47]!	; a39 <__Stack_Size+0x639>
     a64:	302f5a31 	eorcc	r5, pc, r1, lsr sl	; <UNPREDICTABLE>
     a68:	2f362f30 	svccs	0x00362f30
     a6c:	1f022531 	svcne	0x00022531
     a70:	00010100 	andeq	r0, r1, r0, lsl #2
     a74:	00000205 	andeq	r0, r0, r5, lsl #4
     a78:	c3030000 	movwgt	r0, #12288	; 0x3000
     a7c:	2f130103 	svccs	0x00130103
     a80:	01000402 	tsteq	r0, r2, lsl #8
     a84:	02050001 	andeq	r0, r5, #1
     a88:	00000000 	andeq	r0, r0, r0
     a8c:	0103c703 	tsteq	r3, r3, lsl #14
     a90:	00060213 	andeq	r0, r6, r3, lsl r2
     a94:	05000101 	streq	r0, [r0, #-257]	; 0x101
     a98:	000d1802 	andeq	r1, sp, r2, lsl #16
     a9c:	03cb0308 	biceq	r0, fp, #8, 6	; 0x20000000
     aa0:	022f1301 	eoreq	r1, pc, #67108864	; 0x4000000
     aa4:	01010004 	tsteq	r1, r4
     aa8:	24020500 	strcs	r0, [r2], #-1280	; 0x500
     aac:	0308000d 	movweq	r0, #32781	; 0x800d
     ab0:	000103cf 	andeq	r0, r1, pc, asr #7
     ab4:	15010402 	strne	r0, [r1, #-1026]	; 0x402
     ab8:	01000202 	tsteq	r0, r2, lsl #4
     abc:	0004c701 	andeq	ip, r4, r1, lsl #14
     ac0:	45000200 	strmi	r0, [r0, #-512]	; 0x200
     ac4:	02000000 	andeq	r0, r0, #0
     ac8:	0d0efb01 	vstreq	d15, [lr, #-4]
     acc:	01010100 	mrseq	r0, (UNDEF: 17)
     ad0:	00000001 	andeq	r0, r0, r1
     ad4:	01000001 	tsteq	r0, r1
     ad8:	5f627375 	svcpl	0x00627375
     adc:	0062696c 	rsbeq	r6, r2, ip, ror #18
     ae0:	62737500 	rsbsvs	r7, r3, #0, 10
     ae4:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
     ae8:	00632e73 	rsbeq	r2, r3, r3, ror lr
     aec:	75000001 	strvc	r0, [r0, #-1]
     af0:	745f6273 	ldrbvc	r6, [pc], #-627	; af8 <__Stack_Size+0x6f8>
     af4:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     af8:	00010068 	andeq	r0, r1, r8, rrx
     afc:	62737500 	rsbsvs	r7, r3, #0, 10
     b00:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
     b04:	00682e73 	rsbeq	r2, r8, r3, ror lr
     b08:	00000001 	andeq	r0, r0, r1
     b0c:	00020500 	andeq	r0, r2, r0, lsl #10
     b10:	03000000 	movweq	r0, #0
     b14:	02130122 	andseq	r0, r3, #-2147483640	; 0x80000008
     b18:	01010006 	tsteq	r1, r6
     b1c:	00020500 	andeq	r0, r2, r0, lsl #10
     b20:	03000000 	movweq	r0, #0
     b24:	2f13012e 	svccs	0x0013012e
     b28:	01000402 	tsteq	r0, r2, lsl #8
     b2c:	02050001 	andeq	r0, r5, #1
     b30:	00000000 	andeq	r0, r0, r0
     b34:	13013a03 	movwne	r3, #6659	; 0x1a03
     b38:	01000602 	tsteq	r0, r2, lsl #12
     b3c:	02050001 	andeq	r0, r5, #1
     b40:	00000000 	andeq	r0, r0, r0
     b44:	0100c603 	tsteq	r0, r3, lsl #12
     b48:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
     b4c:	00010100 	andeq	r0, r1, r0, lsl #2
     b50:	00000205 	andeq	r0, r0, r5, lsl #4
     b54:	d2030000 	andle	r0, r3, #0
     b58:	2f130100 	svccs	0x00130100
     b5c:	01000402 	tsteq	r0, r2, lsl #8
     b60:	02050001 	andeq	r0, r5, #1
     b64:	00000000 	andeq	r0, r0, r0
     b68:	0100de03 	tsteq	r0, r3, lsl #28
     b6c:	00060213 	andeq	r0, r6, r3, lsl r2
     b70:	05000101 	streq	r0, [r0, #-257]	; 0x101
     b74:	00000002 	andeq	r0, r0, r2
     b78:	00ea0300 	rsceq	r0, sl, r0, lsl #6
     b7c:	022f1301 	eoreq	r1, pc, #67108864	; 0x4000000
     b80:	01010004 	tsteq	r1, r4
     b84:	00020500 	andeq	r0, r2, r0, lsl #10
     b88:	03000000 	movweq	r0, #0
     b8c:	130100f6 	movwne	r0, #4342	; 0x10f6
     b90:	01000802 	tsteq	r0, r2, lsl #16
     b94:	02050001 	andeq	r0, r5, #1
     b98:	00000000 	andeq	r0, r0, r0
     b9c:	01018203 	tsteq	r1, r3, lsl #4
     ba0:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
     ba4:	00010100 	andeq	r0, r1, r0, lsl #2
     ba8:	00000205 	andeq	r0, r0, r5, lsl #4
     bac:	8f030000 	svchi	0x00030000
     bb0:	02130101 	andseq	r0, r3, #1073741824	; 0x40000000
     bb4:	01010007 	tsteq	r1, r7
     bb8:	00020500 	andeq	r0, r2, r0, lsl #10
     bbc:	03000000 	movweq	r0, #0
     bc0:	1301019b 	movwne	r0, #4507	; 0x119b
     bc4:	00020267 	andeq	r0, r2, r7, ror #4
     bc8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     bcc:	00000002 	andeq	r0, r0, r2
     bd0:	01a80300 			; <UNDEFINED> instruction: 0x01a80300
     bd4:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
     bd8:	00010100 	andeq	r0, r1, r0, lsl #2
     bdc:	00000205 	andeq	r0, r0, r5, lsl #4
     be0:	b4030000 	strlt	r0, [r3], #-0
     be4:	67130101 	ldrvs	r0, [r3, -r1, lsl #2]
     be8:	01000302 	tsteq	r0, r2, lsl #6
     bec:	02050001 	andeq	r0, r5, #1
     bf0:	08000d28 	stmdaeq	r0, {r3, r5, r8, sl, fp}
     bf4:	0101c103 	tsteq	r1, r3, lsl #2
     bf8:	00150213 	andseq	r0, r5, r3, lsl r2
     bfc:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c00:	00000002 	andeq	r0, r0, r2
     c04:	01ce0300 	biceq	r0, lr, r0, lsl #6
     c08:	15021301 	strne	r1, [r2, #-769]	; 0x301
     c0c:	00010100 	andeq	r0, r1, r0, lsl #2
     c10:	00000205 	andeq	r0, r0, r5, lsl #4
     c14:	db030000 	blle	c0c1c <__Stack_Size+0xc081c>
     c18:	41030101 	tstmi	r3, r1, lsl #2
     c1c:	00c20301 	sbceq	r0, r2, r1, lsl #6
     c20:	7fbe0358 	svcvc	0x00be0358
     c24:	00c20320 	sbceq	r0, r2, r0, lsr #6
     c28:	303e2220 	eorscc	r2, lr, r0, lsr #4
     c2c:	01000502 	tsteq	r0, r2, lsl #10
     c30:	02050001 	andeq	r0, r5, #1
     c34:	00000000 	andeq	r0, r0, r0
     c38:	0101f003 	tsteq	r1, r3
     c3c:	03026713 	movweq	r6, #10003	; 0x2713
     c40:	00010100 	andeq	r0, r1, r0, lsl #2
     c44:	00000205 	andeq	r0, r0, r5, lsl #4
     c48:	fc030000 	stc2	0, cr0, [r3], {-0}
     c4c:	67130101 	ldrvs	r0, [r3, -r1, lsl #2]
     c50:	01000302 	tsteq	r0, r2, lsl #6
     c54:	02050001 	andeq	r0, r5, #1
     c58:	00000000 	andeq	r0, r0, r0
     c5c:	01028803 	tsteq	r2, r3, lsl #16
     c60:	000f0213 	andeq	r0, pc, r3, lsl r2	; <UNPREDICTABLE>
     c64:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c68:	000d5202 	andeq	r5, sp, r2, lsl #4
     c6c:	02940308 	addseq	r0, r4, #8, 6	; 0x20000000
     c70:	0f021301 	svceq	0x00021301
     c74:	00010100 	andeq	r0, r1, r0, lsl #2
     c78:	00000205 	andeq	r0, r0, r5, lsl #4
     c7c:	a0030000 	andge	r0, r3, r0
     c80:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     c84:	0101000f 	tsteq	r1, pc
     c88:	00020500 	andeq	r0, r2, r0, lsl #10
     c8c:	03000000 	movweq	r0, #0
     c90:	130102ac 	movwne	r0, #4780	; 0x12ac
     c94:	01000e02 	tsteq	r0, r2, lsl #28
     c98:	02050001 	andeq	r0, r5, #1
     c9c:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
     ca0:	0102b703 	tsteq	r2, r3, lsl #14
     ca4:	000e0213 	andeq	r0, lr, r3, lsl r2
     ca8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     cac:	00000002 	andeq	r0, r0, r2
     cb0:	02c20300 	sbceq	r0, r2, #0, 6
     cb4:	0f021301 	svceq	0x00021301
     cb8:	00010100 	andeq	r0, r1, r0, lsl #2
     cbc:	00000205 	andeq	r0, r0, r5, lsl #4
     cc0:	cd030000 	stcgt	0, cr0, [r3, #-0]
     cc4:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     cc8:	0101000f 	tsteq	r1, pc
     ccc:	00020500 	andeq	r0, r2, r0, lsl #10
     cd0:	03000000 	movweq	r0, #0
     cd4:	130102d8 	movwne	r0, #4824	; 0x12d8
     cd8:	01000e02 	tsteq	r0, r2, lsl #28
     cdc:	02050001 	andeq	r0, r5, #1
     ce0:	00000000 	andeq	r0, r0, r0
     ce4:	0102e303 	tsteq	r2, r3, lsl #6
     ce8:	05028313 	streq	r8, [r2, #-787]	; 0x313
     cec:	00010100 	andeq	r0, r1, r0, lsl #2
     cf0:	00000205 	andeq	r0, r0, r5, lsl #4
     cf4:	ee030000 	cdp	0, 0, cr0, cr3, cr0, {0}
     cf8:	83130102 	tsthi	r3, #-2147483648	; 0x80000000
     cfc:	01000502 	tsteq	r0, r2, lsl #10
     d00:	02050001 	andeq	r0, r5, #1
     d04:	00000000 	andeq	r0, r0, r0
     d08:	0102f903 	tsteq	r2, r3, lsl #18
     d0c:	000c0213 	andeq	r0, ip, r3, lsl r2
     d10:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d14:	00000002 	andeq	r0, r0, r2
     d18:	03840300 	orreq	r0, r4, #0, 6
     d1c:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
     d20:	00010100 	andeq	r0, r1, r0, lsl #2
     d24:	00000205 	andeq	r0, r0, r5, lsl #4
     d28:	8f030000 	svchi	0x00030000
     d2c:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     d30:	01010010 	tsteq	r1, r0, lsl r0
     d34:	00020500 	andeq	r0, r2, r0, lsl #10
     d38:	03000000 	movweq	r0, #0
     d3c:	1301039a 	movwne	r0, #5018	; 0x139a
     d40:	01001002 	tsteq	r0, r2
     d44:	02050001 	andeq	r0, r5, #1
     d48:	08000d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp}
     d4c:	0103a503 	tsteq	r3, r3, lsl #10
     d50:	04020013 	streq	r0, [r2], #-19
     d54:	02820601 	addeq	r0, r2, #1048576	; 0x100000
     d58:	01010008 	tsteq	r1, r8
     d5c:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
     d60:	0308000d 	movweq	r0, #32781	; 0x800d
     d64:	130103b0 	movwne	r0, #5040	; 0x13b0
     d68:	01040200 	mrseq	r0, R12_usr
     d6c:	08028206 	stmdaeq	r2, {r1, r2, r9, pc}
     d70:	00010100 	andeq	r0, r1, r0, lsl #2
     d74:	00000205 	andeq	r0, r0, r5, lsl #4
     d78:	bc030000 	stclt	0, cr0, [r3], {-0}
     d7c:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     d80:	0101000f 	tsteq	r1, pc
     d84:	00020500 	andeq	r0, r2, r0, lsl #10
     d88:	03000000 	movweq	r0, #0
     d8c:	130103c7 	movwne	r0, #5063	; 0x13c7
     d90:	00030267 	andeq	r0, r3, r7, ror #4
     d94:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d98:	00000002 	andeq	r0, r0, r2
     d9c:	03d30300 	bicseq	r0, r3, #0, 6
     da0:	10021301 	andne	r1, r2, r1, lsl #6
     da4:	00010100 	andeq	r0, r1, r0, lsl #2
     da8:	00000205 	andeq	r0, r0, r5, lsl #4
     dac:	df030000 	svcle	0x00030000
     db0:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     db4:	01010010 	tsteq	r1, r0, lsl r0
     db8:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
     dbc:	0308000d 	movweq	r0, #32781	; 0x800d
     dc0:	130103ea 	movwne	r0, #5098	; 0x13ea
     dc4:	0004029f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
     dc8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     dcc:	000de802 	andeq	lr, sp, r2, lsl #16
     dd0:	03f50308 	mvnseq	r0, #8, 6	; 0x20000000
     dd4:	02831301 	addeq	r1, r3, #67108864	; 0x4000000
     dd8:	01010006 	tsteq	r1, r6
     ddc:	04020500 	streq	r0, [r2], #-1280	; 0x500
     de0:	0308000e 	movweq	r0, #32782	; 0x800e
     de4:	13010481 	movwne	r0, #5249	; 0x1481
     de8:	01000e02 	tsteq	r0, r2, lsl #28
     dec:	02050001 	andeq	r0, r5, #1
     df0:	00000000 	andeq	r0, r0, r0
     df4:	01048d03 	tsteq	r4, r3, lsl #26
     df8:	04020013 	streq	r0, [r2], #-19
     dfc:	002e0601 	eoreq	r0, lr, r1, lsl #12
     e00:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
     e04:	01000702 	tsteq	r0, r2, lsl #14
     e08:	02050001 	andeq	r0, r5, #1
     e0c:	08000e20 	stmdaeq	r0, {r5, r9, sl, fp}
     e10:	01049903 	tsteq	r4, r3, lsl #18
     e14:	04020013 	streq	r0, [r2], #-19
     e18:	00ac0601 	adceq	r0, ip, r1, lsl #12
     e1c:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
     e20:	01000b02 	tsteq	r0, r2, lsl #22
     e24:	02050001 	andeq	r0, r5, #1
     e28:	00000000 	andeq	r0, r0, r0
     e2c:	0104a403 	tsteq	r4, r3, lsl #8
     e30:	07029113 	smladeq	r2, r3, r1, r9
     e34:	00010100 	andeq	r0, r1, r0, lsl #2
     e38:	00000205 	andeq	r0, r0, r5, lsl #4
     e3c:	af030000 	svcge	0x00030000
     e40:	91130104 	tstls	r3, r4, lsl #2
     e44:	01000702 	tsteq	r0, r2, lsl #14
     e48:	02050001 	andeq	r0, r5, #1
     e4c:	00000000 	andeq	r0, r0, r0
     e50:	0104bc03 	tsteq	r4, r3, lsl #24
     e54:	001b0221 	andseq	r0, fp, r1, lsr #4
     e58:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e5c:	00000002 	andeq	r0, r0, r2
     e60:	04c80300 	strbeq	r0, [r8], #768	; 0x300
     e64:	10021301 	andne	r1, r2, r1, lsl #6
     e68:	00010100 	andeq	r0, r1, r0, lsl #2
     e6c:	00000205 	andeq	r0, r0, r5, lsl #4
     e70:	d4030000 	strle	r0, [r3], #-0
     e74:	02130104 	andseq	r0, r3, #4, 2
     e78:	01010010 	tsteq	r1, r0, lsl r0
     e7c:	00020500 	andeq	r0, r2, r0, lsl #10
     e80:	03000000 	movweq	r0, #0
     e84:	130104df 	movwne	r0, #5343	; 0x14df
     e88:	0004029f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
     e8c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e90:	00000002 	andeq	r0, r0, r2
     e94:	04ea0300 	strbteq	r0, [sl], #768	; 0x300
     e98:	02831301 	addeq	r1, r3, #67108864	; 0x4000000
     e9c:	01010006 	tsteq	r1, r6
     ea0:	00020500 	andeq	r0, r2, r0, lsl #10
     ea4:	03000000 	movweq	r0, #0
     ea8:	130104f6 	movwne	r0, #5366	; 0x14f6
     eac:	0200211f 	andeq	r2, r0, #-1073741817	; 0xc0000007
     eb0:	20060104 	andcs	r0, r6, r4, lsl #2
     eb4:	02040200 	andeq	r0, r4, #0, 4
     eb8:	02005808 	andeq	r5, r0, #8, 16	; 0x80000
     ebc:	00f20104 	rscseq	r0, r2, r4, lsl #2
     ec0:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
     ec4:	01040200 	mrseq	r0, R12_usr
     ec8:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     ecc:	02120802 	andseq	r0, r2, #131072	; 0x20000
     ed0:	0101000e 	tsteq	r1, lr
     ed4:	00020500 	andeq	r0, r2, r0, lsl #10
     ed8:	03000000 	movweq	r0, #0
     edc:	13010582 	movwne	r0, #5506	; 0x1582
     ee0:	01040200 	mrseq	r0, R12_usr
     ee4:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
     ee8:	4a080204 	bmi	201700 <__Stack_Size+0x201300>
     eec:	01040200 	mrseq	r0, R12_usr
     ef0:	000e0290 	muleq	lr, r0, r2
     ef4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ef8:	00000002 	andeq	r0, r0, r2
     efc:	058e0300 	streq	r0, [lr, #768]	; 0x300
     f00:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
     f04:	2e060104 	adfcss	f0, f6, f4
     f08:	02040200 	andeq	r0, r4, #0, 4
     f0c:	02004a08 	andeq	r4, r0, #8, 20	; 0x8000
     f10:	02900104 	addseq	r0, r0, #4, 2
     f14:	0101000e 	tsteq	r1, lr
     f18:	00020500 	andeq	r0, r2, r0, lsl #10
     f1c:	03000000 	movweq	r0, #0
     f20:	1301059a 	movwne	r0, #5530	; 0x159a
     f24:	00070291 	muleq	r7, r1, r2
     f28:	05000101 	streq	r0, [r0, #-257]	; 0x101
     f2c:	00000002 	andeq	r0, r0, r2
     f30:	05a60300 	streq	r0, [r6, #768]!	; 0x300
     f34:	02911301 	addseq	r1, r1, #67108864	; 0x4000000
     f38:	01010007 	tsteq	r1, r7
     f3c:	00020500 	andeq	r0, r2, r0, lsl #10
     f40:	03000000 	movweq	r0, #0
     f44:	130105b2 	movwne	r0, #5554	; 0x15b2
     f48:	25489fbc 	strbcs	r9, [r8, #-4028]	; 0xfbc
     f4c:	01000702 	tsteq	r0, r2, lsl #14
     f50:	02050001 	andeq	r0, r5, #1
     f54:	00000000 	andeq	r0, r0, r0
     f58:	0105c303 	tsteq	r5, r3, lsl #6
     f5c:	30bc3013 	adcscc	r3, ip, r3, lsl r0
     f60:	01000d02 	tsteq	r0, r2, lsl #26
     f64:	02050001 	andeq	r0, r5, #1
     f68:	00000000 	andeq	r0, r0, r0
     f6c:	0105d603 	tsteq	r5, r3, lsl #12
     f70:	00030216 	andeq	r0, r3, r6, lsl r2
     f74:	05000101 	streq	r0, [r0, #-257]	; 0x101
     f78:	00000002 	andeq	r0, r0, r2
     f7c:	05e30300 	strbeq	r0, [r3, #768]!	; 0x300
     f80:	02301601 	eorseq	r1, r0, #1048576	; 0x100000
     f84:	01010003 	tsteq	r1, r3
     f88:	000000b4 	strheq	r0, [r0], -r4
     f8c:	00600002 	rsbeq	r0, r0, r2
     f90:	01020000 	mrseq	r0, (UNDEF: 2)
     f94:	000d0efb 	strdeq	r0, [sp], -fp
     f98:	01010101 	tsteq	r1, r1, lsl #2
     f9c:	01000000 	mrseq	r0, (UNDEF: 0)
     fa0:	75010000 	strvc	r0, [r1, #-0]
     fa4:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
     fa8:	00006269 	andeq	r6, r0, r9, ror #4
     fac:	5f627375 	svcpl	0x00627375
     fb0:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     fb4:	00010063 	andeq	r0, r1, r3, rrx
     fb8:	62737500 	rsbsvs	r7, r3, #0, 10
     fbc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     fc0:	00682e65 	rsbeq	r2, r8, r5, ror #28
     fc4:	75000001 	strvc	r0, [r0, #-1]
     fc8:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
     fcc:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
     fd0:	00010068 	andeq	r0, r1, r8, rrx
     fd4:	62737500 	rsbsvs	r7, r3, #0, 10
     fd8:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
     fdc:	00682e74 	rsbeq	r2, r8, r4, ror lr
     fe0:	75000001 	strvc	r0, [r0, #-1]
     fe4:	635f6273 	cmpvs	pc, #805306375	; 0x30000007
     fe8:	2e65726f 	cdpcs	2, 6, cr7, cr5, cr15, {3}
     fec:	00010068 	andeq	r0, r1, r8, rrx
     ff0:	05000000 	streq	r0, [r0, #-0]
     ff4:	000e6002 	andeq	r6, lr, r2
     ff8:	01290308 	teqeq	r9, r8, lsl #6
     ffc:	593e8423 	ldmdbpl	lr!, {r0, r1, r5, sl, pc}
    1000:	3d1f3d36 	ldccc	13, cr3, [pc, #-216]	; f30 <__Stack_Size+0xb30>
    1004:	0395914b 	orrseq	r9, r5, #-1073741806	; 0xc0000012
    1008:	30213c17 	eorcc	r3, r1, r7, lsl ip
    100c:	59304259 	ldmdbpl	r0!, {r0, r3, r4, r6, r9, lr}
    1010:	30593043 	subscc	r3, r9, r3, asr #32
    1014:	03f31308 	mvnseq	r1, #8, 6	; 0x20000000
    1018:	31672009 	cmncc	r7, r9
    101c:	933f5c5b 	teqls	pc, #23296	; 0x5b00
    1020:	1602311d 			; <UNDEFINED> instruction: 0x1602311d
    1024:	00010100 	andeq	r0, r1, r0, lsl #2
    1028:	00000205 	andeq	r0, r0, r5, lsl #4
    102c:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
    1030:	76230101 	strtvc	r0, [r3], -r1, lsl #2
    1034:	31675a3e 	cmncc	r7, lr, lsr sl
    1038:	5b313f5b 	blpl	c50dac <__Stack_Size+0xc509ac>
    103c:	01010008 	tsteq	r1, r8
    1040:	00000063 	andeq	r0, r0, r3, rrx
    1044:	00450002 	subeq	r0, r5, r2
    1048:	01020000 	mrseq	r0, (UNDEF: 2)
    104c:	000d0efb 	strdeq	r0, [sp], -fp
    1050:	01010101 	tsteq	r1, r1, lsl #2
    1054:	01000000 	mrseq	r0, (UNDEF: 0)
    1058:	75010000 	strvc	r0, [r1, #-0]
    105c:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    1060:	00006269 	andeq	r6, r0, r9, ror #4
    1064:	5f627375 	svcpl	0x00627375
    1068:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    106c:	0100632e 	tsteq	r0, lr, lsr #6
    1070:	73750000 	cmnvc	r5, #0
    1074:	79745f62 	ldmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1078:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    107c:	00000100 	andeq	r0, r0, r0, lsl #2
    1080:	5f627375 	svcpl	0x00627375
    1084:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    1088:	0100682e 	tsteq	r0, lr, lsr #16
    108c:	00000000 	andeq	r0, r0, r0
    1090:	0fb40205 	svceq	0x00b40205
    1094:	35030800 	strcc	r0, [r3, #-2048]	; 0x800
    1098:	1d312101 	ldfnes	f2, [r1, #-4]!
    109c:	233d2f21 	teqcs	sp, #33, 30	; 0x84
    10a0:	0f02231d 	svceq	0x0002231d
    10a4:	50010100 	andpl	r0, r1, r0, lsl #2
    10a8:	02000003 	andeq	r0, r0, #3
    10ac:	00007b00 	andeq	r7, r0, r0, lsl #22
    10b0:	fb010200 	blx	418ba <__Stack_Size+0x414ba>
    10b4:	01000d0e 	tsteq	r0, lr, lsl #26
    10b8:	00010101 	andeq	r0, r1, r1, lsl #2
    10bc:	00010000 	andeq	r0, r1, r0
    10c0:	73750100 	cmnvc	r5, #0, 2
    10c4:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    10c8:	75000062 	strvc	r0, [r0, #-98]	; 0x62
    10cc:	635f6273 	cmpvs	pc, #805306375	; 0x30000007
    10d0:	2e65726f 	cdpcs	2, 6, cr7, cr5, cr15, {3}
    10d4:	00010063 	andeq	r0, r1, r3, rrx
    10d8:	62737500 	rsbsvs	r7, r3, #0, 10
    10dc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    10e0:	00682e65 	rsbeq	r2, r8, r5, ror #28
    10e4:	75000001 	strvc	r0, [r0, #-1]
    10e8:	645f6273 	ldrbvs	r6, [pc], #-627	; 10f0 <__Stack_Size+0xcf0>
    10ec:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    10f0:	00000100 	andeq	r0, r0, r0, lsl #2
    10f4:	5f627375 	svcpl	0x00627375
    10f8:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    10fc:	0100682e 	tsteq	r0, lr, lsr #16
    1100:	73750000 	cmnvc	r5, #0
    1104:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
    1108:	682e7469 	stmdavs	lr!, {r0, r3, r5, r6, sl, ip, sp, lr}
    110c:	00000100 	andeq	r0, r0, r0, lsl #2
    1110:	5f627375 	svcpl	0x00627375
    1114:	2e6d656d 	cdpcs	5, 6, cr6, cr13, cr13, {3}
    1118:	00010068 	andeq	r0, r1, r8, rrx
    111c:	62737500 	rsbsvs	r7, r3, #0, 10
    1120:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    1124:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1128:	00000001 	andeq	r0, r0, r1
    112c:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    1130:	0308000f 	movweq	r0, #32783	; 0x800f
    1134:	222f0135 	eorcs	r0, pc, #1073741837	; 0x4000000d
    1138:	2f4b223e 	svccs	0x004b223e
    113c:	01000502 	tsteq	r0, r2, lsl #10
    1140:	02050001 	andeq	r0, r5, #1
    1144:	08001010 	stmdaeq	r0, {r4, ip}
    1148:	0100e303 	tsteq	r0, r3, lsl #6
    114c:	223e222f 	eorscs	r2, lr, #-268435454	; 0xf0000002
    1150:	05022f4b 	streq	r2, [r2, #-3915]	; 0xf4b
    1154:	00010100 	andeq	r0, r1, r0, lsl #2
    1158:	10340205 	eorsne	r0, r4, r5, lsl #4
    115c:	9b030800 	blls	c3164 <__Stack_Size+0xc2d64>
    1160:	222f0101 	eorcs	r0, pc, #1073741824	; 0x40000000
    1164:	1d23233d 	stcne	3, cr2, [r3, #-244]!	; 0xffffff0c
    1168:	22235b31 	eorcs	r5, r3, #50176	; 0xc400
    116c:	404e3040 	submi	r3, lr, r0, asr #32
    1170:	40223133 	eormi	r3, r2, r3, lsr r1
    1174:	231d3147 	tstcs	sp, #-1073741807	; 0xc0000011
    1178:	0b03424c 	bleq	d1ab0 <__Stack_Size+0xd16b0>
    117c:	60034b58 	andvs	r4, r3, r8, asr fp
    1180:	2021032e 	eorcs	r0, r1, lr, lsr #6
    1184:	01000702 	tsteq	r0, r2, lsl #14
    1188:	02050001 	andeq	r0, r5, #1
    118c:	080010c4 	stmdaeq	r0, {r2, r6, r7, ip}
    1190:	0103e003 	tsteq	r3, r3
    1194:	2f2f1f13 	svccs	0x002f1f13
    1198:	02003321 	andeq	r3, r0, #-2080374784	; 0x84000000
    119c:	20060104 	andcs	r0, r6, r4, lsl #2
    11a0:	924d3006 	subls	r3, sp, #6
    11a4:	21352d34 	teqcs	r5, r4, lsr sp
    11a8:	4c847651 	stcmi	6, cr7, [r4], {81}	; 0x51
    11ac:	2f2f2a24 	svccs	0x002f2a24
    11b0:	23231d30 	teqcs	r3, #48, 26	; 0xc00
    11b4:	01001202 	tsteq	r0, r2, lsl #4
    11b8:	02050001 	andeq	r0, r5, #1
    11bc:	0800116c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip}
    11c0:	0100ca03 	tsteq	r0, r3, lsl #20
    11c4:	591f2122 	ldmdbpl	pc, {r1, r5, r8, sp}	; <UNPREDICTABLE>
    11c8:	4b21302f 	blmi	84d28c <__Stack_Size+0x84ce8c>
    11cc:	08022232 	stmdaeq	r2, {r1, r4, r5, r9, sp}
    11d0:	00010100 	andeq	r0, r1, r0, lsl #2
    11d4:	11a40205 			; <UNDEFINED> instruction: 0x11a40205
    11d8:	f8030800 			; <UNDEFINED> instruction: 0xf8030800
    11dc:	84240100 	strthi	r0, [r4], #-256	; 0x100
    11e0:	0402003e 	streq	r0, [r2], #-62	; 0x3e
    11e4:	06200601 	strteq	r0, [r0], -r1, lsl #12
    11e8:	224b342f 	subcs	r3, fp, #788529152	; 0x2f000000
    11ec:	252f2f1e 	strcs	r2, [pc, #-3870]!	; 2d6 <_Minimum_Stack_Size+0x1d6>
    11f0:	00070221 	andeq	r0, r7, r1, lsr #4
    11f4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    11f8:	0011ec02 	andseq	lr, r1, r2, lsl #24
    11fc:	01e90308 	mvneq	r0, r8, lsl #6
    1200:	3e402101 	dvfccs	f2, f0, f1
    1204:	3d35224b 	lfmcc	f2, 4, [r5, #-300]!	; 0xfffffed4
    1208:	200f0342 	andcs	r0, pc, r2, asr #6
    120c:	43207203 	teqmi	r0, #805306368	; 0x30000000
    1210:	2075035f 	rsbscs	r0, r5, pc, asr r3
    1214:	00314032 	eorseq	r4, r1, r2, lsr r0
    1218:	06010402 	streq	r0, [r1], -r2, lsl #8
    121c:	032f062e 	teqeq	pc, #48234496	; 0x2e00000
    1220:	23472e09 	movtcs	r2, #32265	; 0x7e09
    1224:	4b4c231d 	blmi	1309ea0 <__Stack_Size+0x1309aa0>
    1228:	6b235a5e 	blvs	8d7ba8 <__Stack_Size+0x8d77a8>
    122c:	314b942f 	cmpcc	fp, pc, lsr #8
    1230:	000a0221 	andeq	r0, sl, r1, lsr #4
    1234:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1238:	0012bc02 	andseq	fp, r2, r2, lsl #24
    123c:	02c20308 	sbceq	r0, r2, #8, 6	; 0x20000000
    1240:	0f032601 	svceq	0x00032601
    1244:	20710320 	rsbscs	r0, r1, r0, lsr #6
    1248:	03200f03 	teqeq	r0, #3, 30
    124c:	43212071 	teqmi	r1, #113	; 0x71
    1250:	31403254 	cmpcc	r0, r4, asr r2
    1254:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    1258:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    125c:	2e090321 	cdpcs	3, 0, cr0, cr9, cr1, {1}
    1260:	231d3147 	tstcs	sp, #-1073741807	; 0xc0000011
    1264:	034b8588 	movteq	r8, #46472	; 0xb588
    1268:	12032e6f 	andne	r2, r3, #1776	; 0x6f0
    126c:	00070220 	andeq	r0, r7, r0, lsr #4
    1270:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1274:	00134002 	andseq	r4, r3, r2
    1278:	02f80308 	rscseq	r0, r8, #8, 6	; 0x20000000
    127c:	4c672101 	stfmie	f2, [r7], #-4
    1280:	01000702 	tsteq	r0, r2, lsl #14
    1284:	02050001 	andeq	r0, r5, #1
    1288:	08001364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip}
    128c:	01039203 	tsteq	r3, r3, lsl #4
    1290:	3d223d15 	stccc	13, cr3, [r2, #-84]!	; 0xffffffac
    1294:	04022f23 	streq	r2, [r2], #-3875	; 0xf23
    1298:	00010100 	andeq	r0, r1, r0, lsl #2
    129c:	13800205 	orrne	r0, r0, #1342177280	; 0x50000000
    12a0:	c9030800 	stmdbgt	r3, {fp}
    12a4:	68210107 	stmdavs	r1!, {r0, r1, r2, r8}
    12a8:	02404b5a 	subeq	r4, r0, #92160	; 0x16800
    12ac:	0101000d 	tsteq	r1, sp
    12b0:	c0020500 	andgt	r0, r2, r0, lsl #10
    12b4:	03080013 	movweq	r0, #32787	; 0x8013
    12b8:	280106cc 	stmdacs	r1, {r2, r3, r6, r7, r9, sl}
    12bc:	563e2c3e 			; <UNDEFINED> instruction: 0x563e2c3e
    12c0:	30302f5c 	eorscc	r2, r0, ip, asr pc
    12c4:	032f3130 	teqeq	pc, #48, 2
    12c8:	4e4a7dbd 	mcrmi	13, 2, r7, cr10, cr13, {5}
    12cc:	4f304030 	svcmi	0x00304030
    12d0:	033d3d29 	teqeq	sp, #2624	; 0xa40
    12d4:	03304a0c 	teqeq	r0, #12, 20	; 0xc000
    12d8:	03593c3c 	cmpeq	r9, #60, 24	; 0x3c00
    12dc:	3e3d3c44 	cdpcc	12, 3, cr3, cr13, cr4, {2}
    12e0:	3d3d3044 	ldccc	0, cr3, [sp, #-272]!	; 0xfffffef0
    12e4:	3c0b033e 	stccc	3, cr0, [fp], {62}	; 0x3e
    12e8:	31413031 	cmpcc	r1, r1, lsr r0
    12ec:	09033033 	stmdbeq	r3, {r0, r1, r4, r5, ip, sp}
    12f0:	2e0a032e 	cdpcs	3, 0, cr0, cr10, cr14, {1}
    12f4:	75039c36 	strvc	r9, [r3, #-3126]	; 0xc36
    12f8:	2010032e 	andscs	r0, r0, lr, lsr #6
    12fc:	303c1903 	eorscc	r1, ip, r3, lsl #18
    1300:	3e302f3e 	mrccc	15, 1, r2, cr0, cr14, {1}
    1304:	3d303e30 	ldccc	14, cr3, [r0, #-192]!	; 0xffffff40
    1308:	695a4230 	ldmdbvs	sl, {r4, r5, r9, lr}^
    130c:	75305e4b 	ldrvc	r5, [r0, #-3659]!	; 0xe4b
    1310:	0e03306d 	cdpeq	0, 0, cr3, cr3, cr13, {3}
    1314:	20720320 	rsbscs	r0, r2, r0, lsr #6
    1318:	75035f43 	strvc	r5, [r3, #-3907]	; 0xf43
    131c:	31403220 	cmpcc	r0, r0, lsr #4
    1320:	3c090359 	stccc	3, cr0, [r9], {89}	; 0x59
    1324:	59305030 	ldmdbpl	r0!, {r4, r5, ip, lr}
    1328:	2289674b 	addcs	r6, r9, #19660800	; 0x12c0000
    132c:	322f233d 	eorcc	r2, pc, #-201326592	; 0xf4000000
    1330:	69413067 	stmdbvs	r1, {r0, r1, r2, r5, r6, ip, sp}^
    1334:	4d413f31 	stclmi	15, cr3, [r1, #-196]	; 0xffffff3c
    1338:	23084c31 	movwcs	r4, #35889	; 0x8c31
    133c:	5a305a30 	bpl	c17c04 <__Stack_Size+0xc17804>
    1340:	2f404b40 	svccs	0x00404b40
    1344:	2f4a2f03 	svccs	0x004a2f03
    1348:	2e7ed603 	cdpcs	6, 7, cr13, cr14, cr3, {0}
    134c:	032e2c03 	teqeq	lr, #768	; 0x300
    1350:	0c022e0b 	stceq	14, cr2, [r2], {11}
    1354:	00010100 	andeq	r0, r1, r0, lsl #2
    1358:	169c0205 	ldrne	r0, [ip], r5, lsl #4
    135c:	a0030800 	andge	r0, r3, r0, lsl #16
    1360:	3e210107 	sufccs	f0, f1, f7
    1364:	01040200 	mrseq	r0, R12_usr
    1368:	03062e06 	movweq	r2, #28166	; 0x6e06
    136c:	1e2e7c8a 	cdpne	12, 2, cr7, cr14, cr10, {4}
    1370:	59263322 	stmdbpl	r6!, {r1, r5, r8, r9, ip, sp}
    1374:	222f211f 	eorcs	r2, pc, #-1073741817	; 0xc0000007
    1378:	3077301e 	rsbscc	r3, r7, lr, lsl r0
    137c:	1f2f1f21 	svcne	0x002f1f21
    1380:	4c3f2f21 	ldcmi	15, cr2, [pc], #-132	; 1304 <__Stack_Size+0xf04>
    1384:	3d4e2240 	sfmcc	f2, 2, [lr, #-256]	; 0xffffff00
    1388:	9e03d303 	cdpls	3, 0, cr13, cr3, cr3, {0}
    138c:	0351303f 	cmpeq	r1, #63	; 0x3f
    1390:	2d312009 	ldccs	0, cr2, [r1, #-36]!	; 0xffffffdc
    1394:	01000f02 	tsteq	r0, r2, lsl #30
    1398:	02050001 	andeq	r0, r5, #1
    139c:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
    13a0:	0107dd03 	tsteq	r7, r3, lsl #26
    13a4:	02003122 	andeq	r3, r0, #-2147483640	; 0x80000008
    13a8:	20060104 	andcs	r0, r6, r4, lsl #2
    13ac:	02040200 	andeq	r0, r4, #0, 4
    13b0:	02007606 	andeq	r7, r0, #6291456	; 0x600000
    13b4:	32640204 	rsbcc	r0, r4, #4, 4	; 0x40000000
    13b8:	01000902 	tsteq	r0, r2, lsl #18
    13bc:	02050001 	andeq	r0, r5, #1
    13c0:	0800179c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip}
    13c4:	0106f803 	tsteq	r6, r3, lsl #16
    13c8:	02003e21 	andeq	r3, r0, #528	; 0x210
    13cc:	2e060104 	adfcss	f0, f6, f4
    13d0:	3f303006 	svccc	0x00303006
    13d4:	04020030 	streq	r0, [r2], #-48	; 0x30
    13d8:	02003d01 	andeq	r3, r0, #1, 26	; 0x40
    13dc:	311f0104 	tstcc	pc, r4, lsl #2
    13e0:	23504c3d 	cmpcs	r0, #15616	; 0x3d00
    13e4:	09022d31 	stmdbeq	r2, {r0, r4, r5, r8, sl, fp, sp}
    13e8:	00010100 	andeq	r0, r1, r0, lsl #2
    13ec:	00000205 	andeq	r0, r0, r5, lsl #4
    13f0:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    13f4:	01020107 	tsteq	r2, r7, lsl #2
    13f8:	8f010100 	svchi	0x00010100
    13fc:	02000000 	andeq	r0, r0, #0
    1400:	00003600 	andeq	r3, r0, r0, lsl #12
    1404:	fb010200 	blx	41c0e <__Stack_Size+0x4180e>
    1408:	01000d0e 	tsteq	r0, lr, lsl #26
    140c:	00010101 	andeq	r0, r1, r1, lsl #2
    1410:	00010000 	andeq	r0, r1, r0
    1414:	73750100 	cmnvc	r5, #0, 2
    1418:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    141c:	75000062 	strvc	r0, [r0, #-98]	; 0x62
    1420:	6d5f6273 	lfmvs	f6, 2, [pc, #-460]	; 125c <__Stack_Size+0xe5c>
    1424:	632e6d65 	teqvs	lr, #6464	; 0x1940
    1428:	00000100 	andeq	r0, r0, r0, lsl #2
    142c:	5f627375 	svcpl	0x00627375
    1430:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    1434:	0100682e 	tsteq	r0, lr, lsr #16
    1438:	00000000 	andeq	r0, r0, r0
    143c:	17f80205 	ldrbne	r0, [r8, r5, lsl #4]!
    1440:	23030800 	movwcs	r0, #14336	; 0x3800
    1444:	232b2401 	teqcs	fp, #16777216	; 0x1000000
    1448:	0021232b 	eoreq	r2, r1, fp, lsr #6
    144c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1450:	04020020 	streq	r0, [r2], #-32
    1454:	004e0602 	subeq	r0, lr, r2, lsl #12
    1458:	2c020402 	cfstrscs	mvf0, [r2], {2}
    145c:	02040200 	andeq	r0, r4, #0, 4
    1460:	04020030 	streq	r0, [r2], #-48	; 0x30
    1464:	024e2f02 	subeq	r2, lr, #2, 30
    1468:	01010001 	tsteq	r1, r1
    146c:	28020500 	stmdacs	r2, {r8, sl}
    1470:	03080018 	movweq	r0, #32792	; 0x8018
    1474:	2b24013c 	blcs	90196c <__Stack_Size+0x90156c>
    1478:	21232b23 	teqcs	r3, r3, lsr #22
    147c:	01040200 	mrseq	r0, R12_usr
    1480:	02002006 	andeq	r2, r0, #6
    1484:	30060204 	andcc	r0, r6, r4, lsl #4
    1488:	00010269 	andeq	r0, r1, r9, ror #4
    148c:	Address 0x000000000000148c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	0800013c 	stmdaeq	r0, {r2, r3, r4, r5, r8}
  1c:	00000002 	andeq	r0, r0, r2
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	0000000c 	andeq	r0, r0, ip
  24:	00000000 	andeq	r0, r0, r0
  28:	0800013e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8}
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	00000002 	andeq	r0, r0, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	0000000c 	andeq	r0, r0, ip
  34:	00000000 	andeq	r0, r0, r0
  38:	08000140 	stmdaeq	r0, {r6, r8}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	00000002 	andeq	r0, r0, r2

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	0000000c 	andeq	r0, r0, ip
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	00000000 	andeq	r0, r0, r0
  48:	08000142 	stmdaeq	r0, {r1, r6, r8}
  4c:	0000000a 	andeq	r0, r0, sl

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	0000000c 	andeq	r0, r0, ip
  54:	00000000 	andeq	r0, r0, r0
  58:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
  5c:	00000002 	andeq	r0, r0, r2
  60:	0000000c 	andeq	r0, r0, ip
  64:	00000000 	andeq	r0, r0, r0
  68:	08000150 	stmdaeq	r0, {r4, r6, r8}
  6c:	00000018 	andeq	r0, r0, r8, lsl r0
  70:	0000000c 	andeq	r0, r0, ip
  74:	00000000 	andeq	r0, r0, r0
  78:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}
  7c:	00000002 	andeq	r0, r0, r2
  80:	0000000c 	andeq	r0, r0, ip
  84:	00000000 	andeq	r0, r0, r0
  88:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
  8c:	00000002 	andeq	r0, r0, r2
  90:	0000000c 	andeq	r0, r0, ip
  94:	00000000 	andeq	r0, r0, r0
  98:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  9c:	00000002 	andeq	r0, r0, r2
  a0:	0000000c 	andeq	r0, r0, ip
  a4:	00000000 	andeq	r0, r0, r0
  a8:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
  ac:	00000002 	andeq	r0, r0, r2
  b0:	0000000c 	andeq	r0, r0, ip
  b4:	00000000 	andeq	r0, r0, r0
  b8:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
  bc:	00000002 	andeq	r0, r0, r2
  c0:	0000000c 	andeq	r0, r0, ip
  c4:	00000000 	andeq	r0, r0, r0
  c8:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
  cc:	00000002 	andeq	r0, r0, r2
  d0:	0000000c 	andeq	r0, r0, ip
  d4:	00000000 	andeq	r0, r0, r0
  d8:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	00000018 	andeq	r0, r0, r8, lsl r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	08000180 	stmdaeq	r0, {r7, r8}
  ec:	000000a8 	andeq	r0, r0, r8, lsr #1
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
  f8:	00000001 	andeq	r0, r0, r1
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	00000000 	andeq	r0, r0, r0
 104:	08000228 	stmdaeq	r0, {r3, r5, r9}
 108:	00000060 	andeq	r0, r0, r0, rrx
 10c:	40100e41 	andsmi	r0, r0, r1, asr #28
 110:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 114:	02854003 	addeq	r4, r5, #3
 118:	00018e40 	andeq	r8, r1, r0, asr #28
 11c:	0000000c 	andeq	r0, r0, ip
 120:	00000000 	andeq	r0, r0, r0
 124:	08000288 	stmdaeq	r0, {r3, r7, r9}
 128:	0000000c 	andeq	r0, r0, ip
 12c:	0000000c 	andeq	r0, r0, ip
 130:	00000000 	andeq	r0, r0, r0
 134:	08000294 	stmdaeq	r0, {r2, r4, r7, r9}
 138:	0000000c 	andeq	r0, r0, ip
 13c:	0000000c 	andeq	r0, r0, ip
 140:	00000000 	andeq	r0, r0, r0
 144:	080002a0 	stmdaeq	r0, {r5, r7, r9}
 148:	00000020 	andeq	r0, r0, r0, lsr #32
 14c:	0000000c 	andeq	r0, r0, ip
 150:	00000000 	andeq	r0, r0, r0
 154:	080002c0 	stmdaeq	r0, {r6, r7, r9}
 158:	0000000c 	andeq	r0, r0, ip
 15c:	00000018 	andeq	r0, r0, r8, lsl r0
 160:	00000000 	andeq	r0, r0, r0
 164:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
 168:	00000028 	andeq	r0, r0, r8, lsr #32
 16c:	40080e41 	andmi	r0, r8, r1, asr #28
 170:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 174:	00000001 	andeq	r0, r0, r1
 178:	00000024 	andeq	r0, r0, r4, lsr #32
 17c:	00000000 	andeq	r0, r0, r0
 180:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
 184:	0000007c 	andeq	r0, r0, ip, ror r0
 188:	40180e41 	andsmi	r0, r8, r1, asr #28
 18c:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 190:	04824005 	streq	r4, [r2], #5
 194:	40038440 	andmi	r8, r3, r0, asr #8
 198:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
 19c:	00000001 	andeq	r0, r0, r1
 1a0:	0000000c 	andeq	r0, r0, ip
	...
 1ac:	00000004 	andeq	r0, r0, r4
 1b0:	0000000c 	andeq	r0, r0, ip
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	0000000c 	andeq	r0, r0, ip
 1c4:	00000000 	andeq	r0, r0, r0
 1c8:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
 1cc:	00000018 	andeq	r0, r0, r8, lsl r0
 1d0:	00000018 	andeq	r0, r0, r8, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
 1dc:	00000084 	andeq	r0, r0, r4, lsl #1
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 1e8:	00000001 	andeq	r0, r0, r1
 1ec:	0000000c 	andeq	r0, r0, ip
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	08000428 	stmdaeq	r0, {r3, r5, sl}
 1f8:	00000028 	andeq	r0, r0, r8, lsr #32
 1fc:	0000000c 	andeq	r0, r0, ip
 200:	00000000 	andeq	r0, r0, r0
 204:	08000450 	stmdaeq	r0, {r4, r6, sl}
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	0000000c 	andeq	r0, r0, ip
 210:	00000000 	andeq	r0, r0, r0
 214:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
 218:	00000004 	andeq	r0, r0, r4
 21c:	0000001c 	andeq	r0, r0, ip, lsl r0
 220:	00000000 	andeq	r0, r0, r0
 224:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
 228:	00000024 	andeq	r0, r0, r4, lsr #32
 22c:	40100e41 	andsmi	r0, r0, r1, asr #28
 230:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
 234:	02824003 	addeq	r4, r2, #3
 238:	00018e40 	andeq	r8, r1, r0, asr #28
 23c:	00000018 	andeq	r0, r0, r8, lsl r0
 240:	00000000 	andeq	r0, r0, r0
 244:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
 248:	00000040 	andeq	r0, r0, r0, asr #32
 24c:	40080e41 	andmi	r0, r8, r1, asr #28
 250:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 254:	00000001 	andeq	r0, r0, r1
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000000 	andeq	r0, r0, r0
 260:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
 264:	00000022 	andeq	r0, r0, r2, lsr #32
 268:	40100e41 	andsmi	r0, r0, r1, asr #28
 26c:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
 270:	02824003 	addeq	r4, r2, #3
 274:	00018e40 	andeq	r8, r1, r0, asr #28
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	080004f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl}
 284:	000000b4 	strheq	r0, [r0], -r4
 288:	40100e41 	andsmi	r0, r0, r1, asr #28
 28c:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
 290:	02864003 	addeq	r4, r6, #3
 294:	00018e40 	andeq	r8, r1, r0, asr #28
 298:	0000000c 	andeq	r0, r0, ip
 29c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a8:	00000018 	andeq	r0, r0, r8, lsl r0
 2ac:	00000298 	muleq	r0, r8, r2
 2b0:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
 2b4:	00000078 	andeq	r0, r0, r8, ror r0
 2b8:	40080e41 	andmi	r0, r8, r1, asr #28
 2bc:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 2c0:	00000001 	andeq	r0, r0, r1
 2c4:	0000000c 	andeq	r0, r0, ip
 2c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2cc:	7c020001 	stcvc	0, cr0, [r2], {1}
 2d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2d4:	0000000c 	andeq	r0, r0, ip
 2d8:	000002c4 	andeq	r0, r0, r4, asr #5
 2dc:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 2e0:	00000016 	andeq	r0, r0, r6, lsl r0
 2e4:	0000000c 	andeq	r0, r0, ip
 2e8:	000002c4 	andeq	r0, r0, r4, asr #5
 2ec:	00000000 	andeq	r0, r0, r0
 2f0:	00000012 	andeq	r0, r0, r2, lsl r0
 2f4:	0000000c 	andeq	r0, r0, ip
 2f8:	000002c4 	andeq	r0, r0, r4, asr #5
 2fc:	0800063a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl}
 300:	00000004 	andeq	r0, r0, r4
 304:	00000028 	andeq	r0, r0, r8, lsr #32
 308:	000002c4 	andeq	r0, r0, r4, asr #5
 30c:	00000000 	andeq	r0, r0, r0
 310:	00000050 	andeq	r0, r0, r0, asr r0
 314:	40200e42 	eormi	r0, r0, r2, asr #28
 318:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
 31c:	06864007 	streq	r4, [r6], r7
 320:	40058740 	andmi	r8, r5, r0, asr #14
 324:	89400488 	stmdbhi	r0, {r3, r7, sl}^
 328:	028a4003 	addeq	r4, sl, #3
 32c:	00018e40 	andeq	r8, r1, r0, asr #28
 330:	0000000c 	andeq	r0, r0, ip
 334:	000002c4 	andeq	r0, r0, r4, asr #5
 338:	08000640 	stmdaeq	r0, {r6, r9, sl}
 33c:	00000048 	andeq	r0, r0, r8, asr #32
 340:	0000000c 	andeq	r0, r0, ip
 344:	000002c4 	andeq	r0, r0, r4, asr #5
 348:	08000688 	stmdaeq	r0, {r3, r7, r9, sl}
 34c:	00000060 	andeq	r0, r0, r0, rrx
 350:	0000000c 	andeq	r0, r0, ip
 354:	000002c4 	andeq	r0, r0, r4, asr #5
 358:	080006e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl}
 35c:	00000002 	andeq	r0, r0, r2
 360:	0000000c 	andeq	r0, r0, ip
 364:	000002c4 	andeq	r0, r0, r4, asr #5
 368:	080006ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl}
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	0000000c 	andeq	r0, r0, ip
 374:	000002c4 	andeq	r0, r0, r4, asr #5
 378:	08000708 	stmdaeq	r0, {r3, r8, r9, sl}
 37c:	00000014 	andeq	r0, r0, r4, lsl r0
 380:	00000018 	andeq	r0, r0, r8, lsl r0
 384:	000002c4 	andeq	r0, r0, r4, asr #5
 388:	0800071c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl}
 38c:	00000018 	andeq	r0, r0, r8, lsl r0
 390:	40080e42 	andmi	r0, r8, r2, asr #28
 394:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 398:	00000001 	andeq	r0, r0, r1
 39c:	0000000c 	andeq	r0, r0, ip
 3a0:	000002c4 	andeq	r0, r0, r4, asr #5
 3a4:	08000734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl}
 3a8:	0000002c 	andeq	r0, r0, ip, lsr #32
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	000002c4 	andeq	r0, r0, r4, asr #5
 3b4:	08000760 	stmdaeq	r0, {r5, r6, r8, r9, sl}
 3b8:	00000048 	andeq	r0, r0, r8, asr #32
 3bc:	40100e41 	andsmi	r0, r0, r1, asr #28
 3c0:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 3c4:	02854003 	addeq	r4, r5, #3
 3c8:	00018e40 	andeq	r8, r1, r0, asr #28
 3cc:	00000018 	andeq	r0, r0, r8, lsl r0
 3d0:	000002c4 	andeq	r0, r0, r4, asr #5
 3d4:	080007a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl}
 3d8:	0000006c 	andeq	r0, r0, ip, rrx
 3dc:	400c0e42 	andmi	r0, ip, r2, asr #28
 3e0:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
 3e4:	018e4002 	orreq	r4, lr, r2
 3e8:	0000000c 	andeq	r0, r0, ip
 3ec:	000002c4 	andeq	r0, r0, r4, asr #5
 3f0:	08000814 	stmdaeq	r0, {r2, r4, fp}
 3f4:	00000024 	andeq	r0, r0, r4, lsr #32
 3f8:	00000018 	andeq	r0, r0, r8, lsl r0
 3fc:	000002c4 	andeq	r0, r0, r4, asr #5
 400:	08000838 	stmdaeq	r0, {r3, r4, r5, fp}
 404:	00000028 	andeq	r0, r0, r8, lsr #32
 408:	40080e41 	andmi	r0, r8, r1, asr #28
 40c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 410:	00000001 	andeq	r0, r0, r1
 414:	0000000c 	andeq	r0, r0, ip
 418:	000002c4 	andeq	r0, r0, r4, asr #5
 41c:	08000860 	stmdaeq	r0, {r5, r6, fp}
 420:	00000014 	andeq	r0, r0, r4, lsl r0
 424:	00000018 	andeq	r0, r0, r8, lsl r0
 428:	000002c4 	andeq	r0, r0, r4, asr #5
 42c:	08000874 	stmdaeq	r0, {r2, r4, r5, r6, fp}
 430:	00000034 	andeq	r0, r0, r4, lsr r0
 434:	40080e42 	andmi	r0, r8, r2, asr #28
 438:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 43c:	00000001 	andeq	r0, r0, r1
 440:	0000001c 	andeq	r0, r0, ip, lsl r0
 444:	000002c4 	andeq	r0, r0, r4, asr #5
 448:	00000000 	andeq	r0, r0, r0
 44c:	00000030 	andeq	r0, r0, r0, lsr r0
 450:	40100e42 	andsmi	r0, r0, r2, asr #28
 454:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 458:	02854003 	addeq	r4, r5, #3
 45c:	00018e40 	andeq	r8, r1, r0, asr #28
 460:	00000024 	andeq	r0, r0, r4, lsr #32
 464:	000002c4 	andeq	r0, r0, r4, asr #5
 468:	080008a8 	stmdaeq	r0, {r3, r5, r7, fp}
 46c:	0000004c 	andeq	r0, r0, ip, asr #32
 470:	40180e41 	andsmi	r0, r8, r1, asr #28
 474:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 478:	04824005 	streq	r4, [r2], #5
 47c:	40038440 	andmi	r8, r3, r0, asr #8
 480:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
 484:	00000001 	andeq	r0, r0, r1
 488:	0000000c 	andeq	r0, r0, ip
 48c:	000002c4 	andeq	r0, r0, r4, asr #5
 490:	080008f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp}
 494:	0000000c 	andeq	r0, r0, ip
 498:	0000000c 	andeq	r0, r0, ip
 49c:	000002c4 	andeq	r0, r0, r4, asr #5
 4a0:	08000900 	stmdaeq	r0, {r8, fp}
 4a4:	00000018 	andeq	r0, r0, r8, lsl r0
 4a8:	0000000c 	andeq	r0, r0, ip
 4ac:	000002c4 	andeq	r0, r0, r4, asr #5
 4b0:	08000918 	stmdaeq	r0, {r3, r4, r8, fp}
 4b4:	00000012 	andeq	r0, r0, r2, lsl r0
 4b8:	0000000c 	andeq	r0, r0, ip
 4bc:	000002c4 	andeq	r0, r0, r4, asr #5
 4c0:	0800092c 	stmdaeq	r0, {r2, r3, r5, r8, fp}
 4c4:	00000010 	andeq	r0, r0, r0, lsl r0
 4c8:	0000000c 	andeq	r0, r0, ip
 4cc:	000002c4 	andeq	r0, r0, r4, asr #5
 4d0:	0800093c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp}
 4d4:	00000018 	andeq	r0, r0, r8, lsl r0
 4d8:	0000000c 	andeq	r0, r0, ip
 4dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4e0:	7c020001 	stcvc	0, cr0, [r2], {1}
 4e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4e8:	0000000c 	andeq	r0, r0, ip
 4ec:	000004d8 	ldrdeq	r0, [r0], -r8
 4f0:	08000954 	stmdaeq	r0, {r2, r4, r6, r8, fp}
 4f4:	0000005c 	andeq	r0, r0, ip, asr r0
 4f8:	00000018 	andeq	r0, r0, r8, lsl r0
 4fc:	000004d8 	ldrdeq	r0, [r0], -r8
 500:	080009b0 	stmdaeq	r0, {r4, r5, r7, r8, fp}
 504:	00000044 	andeq	r0, r0, r4, asr #32
 508:	40080e41 	andmi	r0, r8, r1, asr #28
 50c:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 510:	00000001 	andeq	r0, r0, r1
 514:	0000000c 	andeq	r0, r0, ip
 518:	000004d8 	ldrdeq	r0, [r0], -r8
 51c:	00000000 	andeq	r0, r0, r0
 520:	00000002 	andeq	r0, r0, r2
 524:	0000000c 	andeq	r0, r0, ip
 528:	000004d8 	ldrdeq	r0, [r0], -r8
 52c:	080009f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp}
 530:	00000018 	andeq	r0, r0, r8, lsl r0
 534:	0000000c 	andeq	r0, r0, ip
 538:	000004d8 	ldrdeq	r0, [r0], -r8
 53c:	08000a0c 	stmdaeq	r0, {r2, r3, r9, fp}
 540:	00000018 	andeq	r0, r0, r8, lsl r0
 544:	0000000c 	andeq	r0, r0, ip
 548:	000004d8 	ldrdeq	r0, [r0], -r8
 54c:	08000a24 	stmdaeq	r0, {r2, r5, r9, fp}
 550:	00000028 	andeq	r0, r0, r8, lsr #32
 554:	0000000c 	andeq	r0, r0, ip
 558:	000004d8 	ldrdeq	r0, [r0], -r8
 55c:	08000a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp}
 560:	00000034 	andeq	r0, r0, r4, lsr r0
 564:	0000001c 	andeq	r0, r0, ip, lsl r0
 568:	000004d8 	ldrdeq	r0, [r0], -r8
 56c:	08000a80 	stmdaeq	r0, {r7, r9, fp}
 570:	0000005c 	andeq	r0, r0, ip, asr r0
 574:	40100e41 	andsmi	r0, r0, r1, asr #28
 578:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
 57c:	02864003 	addeq	r4, r6, #3
 580:	00018e40 	andeq	r8, r1, r0, asr #28
 584:	00000024 	andeq	r0, r0, r4, lsr #32
 588:	000004d8 	ldrdeq	r0, [r0], -r8
 58c:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
 590:	0000023c 	andeq	r0, r0, ip, lsr r2
 594:	40180e42 	andsmi	r0, r8, r2, asr #28
 598:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
 59c:	04864005 	streq	r4, [r6], #5
 5a0:	40038740 	andmi	r8, r3, r0, asr #14
 5a4:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
 5a8:	00000001 	andeq	r0, r0, r1
 5ac:	0000000c 	andeq	r0, r0, ip
 5b0:	000004d8 	ldrdeq	r0, [r0], -r8
 5b4:	00000000 	andeq	r0, r0, r0
 5b8:	0000000c 	andeq	r0, r0, ip
 5bc:	0000000c 	andeq	r0, r0, ip
 5c0:	000004d8 	ldrdeq	r0, [r0], -r8
 5c4:	00000000 	andeq	r0, r0, r0
 5c8:	0000000c 	andeq	r0, r0, ip
 5cc:	0000000c 	andeq	r0, r0, ip
 5d0:	000004d8 	ldrdeq	r0, [r0], -r8
 5d4:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
 5d8:	0000000c 	andeq	r0, r0, ip
 5dc:	0000000c 	andeq	r0, r0, ip
 5e0:	000004d8 	ldrdeq	r0, [r0], -r8
 5e4:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
 5e8:	00000004 	andeq	r0, r0, r4
 5ec:	0000000c 	andeq	r0, r0, ip
 5f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 5f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5fc:	0000000c 	andeq	r0, r0, ip
 600:	000005ec 	andeq	r0, r0, ip, ror #11
 604:	00000000 	andeq	r0, r0, r0
 608:	0000000c 	andeq	r0, r0, ip
 60c:	0000000c 	andeq	r0, r0, ip
 610:	000005ec 	andeq	r0, r0, ip, ror #11
 614:	00000000 	andeq	r0, r0, r0
 618:	0000000c 	andeq	r0, r0, ip
 61c:	0000000c 	andeq	r0, r0, ip
 620:	000005ec 	andeq	r0, r0, ip, ror #11
 624:	00000000 	andeq	r0, r0, r0
 628:	0000000c 	andeq	r0, r0, ip
 62c:	0000000c 	andeq	r0, r0, ip
 630:	000005ec 	andeq	r0, r0, ip, ror #11
 634:	00000000 	andeq	r0, r0, r0
 638:	0000000c 	andeq	r0, r0, ip
 63c:	0000000c 	andeq	r0, r0, ip
 640:	000005ec 	andeq	r0, r0, ip, ror #11
 644:	00000000 	andeq	r0, r0, r0
 648:	0000000c 	andeq	r0, r0, ip
 64c:	0000000c 	andeq	r0, r0, ip
 650:	000005ec 	andeq	r0, r0, ip, ror #11
 654:	00000000 	andeq	r0, r0, r0
 658:	0000000c 	andeq	r0, r0, ip
 65c:	0000000c 	andeq	r0, r0, ip
 660:	000005ec 	andeq	r0, r0, ip, ror #11
 664:	00000000 	andeq	r0, r0, r0
 668:	0000000c 	andeq	r0, r0, ip
 66c:	0000000c 	andeq	r0, r0, ip
 670:	000005ec 	andeq	r0, r0, ip, ror #11
 674:	00000000 	andeq	r0, r0, r0
 678:	00000010 	andeq	r0, r0, r0, lsl r0
 67c:	0000000c 	andeq	r0, r0, ip
 680:	000005ec 	andeq	r0, r0, ip, ror #11
 684:	00000000 	andeq	r0, r0, r0
 688:	0000000c 	andeq	r0, r0, ip
 68c:	0000000c 	andeq	r0, r0, ip
 690:	000005ec 	andeq	r0, r0, ip, ror #11
 694:	00000000 	andeq	r0, r0, r0
 698:	0000000e 	andeq	r0, r0, lr
 69c:	0000000c 	andeq	r0, r0, ip
 6a0:	000005ec 	andeq	r0, r0, ip, ror #11
 6a4:	00000000 	andeq	r0, r0, r0
 6a8:	00000010 	andeq	r0, r0, r0, lsl r0
 6ac:	0000000c 	andeq	r0, r0, ip
 6b0:	000005ec 	andeq	r0, r0, ip, ror #11
 6b4:	00000000 	andeq	r0, r0, r0
 6b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6bc:	0000000c 	andeq	r0, r0, ip
 6c0:	000005ec 	andeq	r0, r0, ip, ror #11
 6c4:	00000000 	andeq	r0, r0, r0
 6c8:	00000012 	andeq	r0, r0, r2, lsl r0
 6cc:	0000000c 	andeq	r0, r0, ip
 6d0:	000005ec 	andeq	r0, r0, ip, ror #11
 6d4:	08000d28 	stmdaeq	r0, {r3, r5, r8, sl, fp}
 6d8:	0000002a 	andeq	r0, r0, sl, lsr #32
 6dc:	0000000c 	andeq	r0, r0, ip
 6e0:	000005ec 	andeq	r0, r0, ip, ror #11
 6e4:	00000000 	andeq	r0, r0, r0
 6e8:	0000002a 	andeq	r0, r0, sl, lsr #32
 6ec:	0000000c 	andeq	r0, r0, ip
 6f0:	000005ec 	andeq	r0, r0, ip, ror #11
 6f4:	00000000 	andeq	r0, r0, r0
 6f8:	00000024 	andeq	r0, r0, r4, lsr #32
 6fc:	0000000c 	andeq	r0, r0, ip
 700:	000005ec 	andeq	r0, r0, ip, ror #11
 704:	00000000 	andeq	r0, r0, r0
 708:	00000012 	andeq	r0, r0, r2, lsl r0
 70c:	0000000c 	andeq	r0, r0, ip
 710:	000005ec 	andeq	r0, r0, ip, ror #11
 714:	00000000 	andeq	r0, r0, r0
 718:	00000012 	andeq	r0, r0, r2, lsl r0
 71c:	0000000c 	andeq	r0, r0, ip
 720:	000005ec 	andeq	r0, r0, ip, ror #11
 724:	00000000 	andeq	r0, r0, r0
 728:	0000001e 	andeq	r0, r0, lr, lsl r0
 72c:	0000000c 	andeq	r0, r0, ip
 730:	000005ec 	andeq	r0, r0, ip, ror #11
 734:	08000d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp}
 738:	0000001e 	andeq	r0, r0, lr, lsl r0
 73c:	0000000c 	andeq	r0, r0, ip
 740:	000005ec 	andeq	r0, r0, ip, ror #11
 744:	00000000 	andeq	r0, r0, r0
 748:	0000001e 	andeq	r0, r0, lr, lsl r0
 74c:	0000000c 	andeq	r0, r0, ip
 750:	000005ec 	andeq	r0, r0, ip, ror #11
 754:	00000000 	andeq	r0, r0, r0
 758:	0000001c 	andeq	r0, r0, ip, lsl r0
 75c:	0000000c 	andeq	r0, r0, ip
 760:	000005ec 	andeq	r0, r0, ip, ror #11
 764:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
 768:	0000001c 	andeq	r0, r0, ip, lsl r0
 76c:	0000000c 	andeq	r0, r0, ip
 770:	000005ec 	andeq	r0, r0, ip, ror #11
 774:	00000000 	andeq	r0, r0, r0
 778:	0000001e 	andeq	r0, r0, lr, lsl r0
 77c:	0000000c 	andeq	r0, r0, ip
 780:	000005ec 	andeq	r0, r0, ip, ror #11
 784:	00000000 	andeq	r0, r0, r0
 788:	0000001e 	andeq	r0, r0, lr, lsl r0
 78c:	0000000c 	andeq	r0, r0, ip
 790:	000005ec 	andeq	r0, r0, ip, ror #11
 794:	00000000 	andeq	r0, r0, r0
 798:	0000001c 	andeq	r0, r0, ip, lsl r0
 79c:	0000000c 	andeq	r0, r0, ip
 7a0:	000005ec 	andeq	r0, r0, ip, ror #11
 7a4:	00000000 	andeq	r0, r0, r0
 7a8:	0000001a 	andeq	r0, r0, sl, lsl r0
 7ac:	0000000c 	andeq	r0, r0, ip
 7b0:	000005ec 	andeq	r0, r0, ip, ror #11
 7b4:	00000000 	andeq	r0, r0, r0
 7b8:	0000001a 	andeq	r0, r0, sl, lsl r0
 7bc:	0000000c 	andeq	r0, r0, ip
 7c0:	000005ec 	andeq	r0, r0, ip, ror #11
 7c4:	00000000 	andeq	r0, r0, r0
 7c8:	00000018 	andeq	r0, r0, r8, lsl r0
 7cc:	0000000c 	andeq	r0, r0, ip
 7d0:	000005ec 	andeq	r0, r0, ip, ror #11
 7d4:	00000000 	andeq	r0, r0, r0
 7d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7dc:	0000000c 	andeq	r0, r0, ip
 7e0:	000005ec 	andeq	r0, r0, ip, ror #11
 7e4:	00000000 	andeq	r0, r0, r0
 7e8:	00000020 	andeq	r0, r0, r0, lsr #32
 7ec:	0000000c 	andeq	r0, r0, ip
 7f0:	000005ec 	andeq	r0, r0, ip, ror #11
 7f4:	00000000 	andeq	r0, r0, r0
 7f8:	00000020 	andeq	r0, r0, r0, lsr #32
 7fc:	0000000c 	andeq	r0, r0, ip
 800:	000005ec 	andeq	r0, r0, ip, ror #11
 804:	08000d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp}
 808:	00000020 	andeq	r0, r0, r0, lsr #32
 80c:	0000000c 	andeq	r0, r0, ip
 810:	000005ec 	andeq	r0, r0, ip, ror #11
 814:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 818:	00000020 	andeq	r0, r0, r0, lsr #32
 81c:	0000000c 	andeq	r0, r0, ip
 820:	000005ec 	andeq	r0, r0, ip, ror #11
 824:	00000000 	andeq	r0, r0, r0
 828:	0000001e 	andeq	r0, r0, lr, lsl r0
 82c:	0000000c 	andeq	r0, r0, ip
 830:	000005ec 	andeq	r0, r0, ip, ror #11
 834:	00000000 	andeq	r0, r0, r0
 838:	00000012 	andeq	r0, r0, r2, lsl r0
 83c:	0000000c 	andeq	r0, r0, ip
 840:	000005ec 	andeq	r0, r0, ip, ror #11
 844:	00000000 	andeq	r0, r0, r0
 848:	00000020 	andeq	r0, r0, r0, lsr #32
 84c:	0000000c 	andeq	r0, r0, ip
 850:	000005ec 	andeq	r0, r0, ip, ror #11
 854:	00000000 	andeq	r0, r0, r0
 858:	00000020 	andeq	r0, r0, r0, lsr #32
 85c:	0000000c 	andeq	r0, r0, ip
 860:	000005ec 	andeq	r0, r0, ip, ror #11
 864:	08000dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp}
 868:	0000001c 	andeq	r0, r0, ip, lsl r0
 86c:	0000000c 	andeq	r0, r0, ip
 870:	000005ec 	andeq	r0, r0, ip, ror #11
 874:	08000de8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, fp}
 878:	0000001c 	andeq	r0, r0, ip, lsl r0
 87c:	0000000c 	andeq	r0, r0, ip
 880:	000005ec 	andeq	r0, r0, ip, ror #11
 884:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
 888:	0000001c 	andeq	r0, r0, ip, lsl r0
 88c:	0000000c 	andeq	r0, r0, ip
 890:	000005ec 	andeq	r0, r0, ip, ror #11
 894:	00000000 	andeq	r0, r0, r0
 898:	00000026 	andeq	r0, r0, r6, lsr #32
 89c:	0000000c 	andeq	r0, r0, ip
 8a0:	000005ec 	andeq	r0, r0, ip, ror #11
 8a4:	08000e20 	stmdaeq	r0, {r5, r9, sl, fp}
 8a8:	00000040 	andeq	r0, r0, r0, asr #32
 8ac:	0000000c 	andeq	r0, r0, ip
 8b0:	000005ec 	andeq	r0, r0, ip, ror #11
 8b4:	00000000 	andeq	r0, r0, r0
 8b8:	00000020 	andeq	r0, r0, r0, lsr #32
 8bc:	0000000c 	andeq	r0, r0, ip
 8c0:	000005ec 	andeq	r0, r0, ip, ror #11
 8c4:	00000000 	andeq	r0, r0, r0
 8c8:	00000020 	andeq	r0, r0, r0, lsr #32
 8cc:	00000018 	andeq	r0, r0, r8, lsl r0
 8d0:	000005ec 	andeq	r0, r0, ip, ror #11
 8d4:	00000000 	andeq	r0, r0, r0
 8d8:	00000038 	andeq	r0, r0, r8, lsr r0
 8dc:	40080e41 	andmi	r0, r8, r1, asr #28
 8e0:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 8e4:	00000001 	andeq	r0, r0, r1
 8e8:	0000000c 	andeq	r0, r0, ip
 8ec:	000005ec 	andeq	r0, r0, ip, ror #11
 8f0:	00000000 	andeq	r0, r0, r0
 8f4:	00000020 	andeq	r0, r0, r0, lsr #32
 8f8:	0000000c 	andeq	r0, r0, ip
 8fc:	000005ec 	andeq	r0, r0, ip, ror #11
 900:	00000000 	andeq	r0, r0, r0
 904:	00000020 	andeq	r0, r0, r0, lsr #32
 908:	0000000c 	andeq	r0, r0, ip
 90c:	000005ec 	andeq	r0, r0, ip, ror #11
 910:	00000000 	andeq	r0, r0, r0
 914:	0000001c 	andeq	r0, r0, ip, lsl r0
 918:	0000000c 	andeq	r0, r0, ip
 91c:	000005ec 	andeq	r0, r0, ip, ror #11
 920:	00000000 	andeq	r0, r0, r0
 924:	0000001c 	andeq	r0, r0, ip, lsl r0
 928:	00000018 	andeq	r0, r0, r8, lsl r0
 92c:	000005ec 	andeq	r0, r0, ip, ror #11
 930:	00000000 	andeq	r0, r0, r0
 934:	000000a8 	andeq	r0, r0, r8, lsr #1
 938:	40080e42 	andmi	r0, r8, r2, asr #28
 93c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 940:	00000001 	andeq	r0, r0, r1
 944:	0000000c 	andeq	r0, r0, ip
 948:	000005ec 	andeq	r0, r0, ip, ror #11
 94c:	00000000 	andeq	r0, r0, r0
 950:	0000005c 	andeq	r0, r0, ip, asr r0
 954:	0000000c 	andeq	r0, r0, ip
 958:	000005ec 	andeq	r0, r0, ip, ror #11
 95c:	00000000 	andeq	r0, r0, r0
 960:	0000005c 	andeq	r0, r0, ip, asr r0
 964:	0000000c 	andeq	r0, r0, ip
 968:	000005ec 	andeq	r0, r0, ip, ror #11
 96c:	00000000 	andeq	r0, r0, r0
 970:	00000020 	andeq	r0, r0, r0, lsr #32
 974:	0000000c 	andeq	r0, r0, ip
 978:	000005ec 	andeq	r0, r0, ip, ror #11
 97c:	00000000 	andeq	r0, r0, r0
 980:	00000020 	andeq	r0, r0, r0, lsr #32
 984:	0000000c 	andeq	r0, r0, ip
 988:	000005ec 	andeq	r0, r0, ip, ror #11
 98c:	00000000 	andeq	r0, r0, r0
 990:	00000044 	andeq	r0, r0, r4, asr #32
 994:	0000000c 	andeq	r0, r0, ip
 998:	000005ec 	andeq	r0, r0, ip, ror #11
 99c:	00000000 	andeq	r0, r0, r0
 9a0:	0000003a 	andeq	r0, r0, sl, lsr r0
 9a4:	0000000c 	andeq	r0, r0, ip
 9a8:	000005ec 	andeq	r0, r0, ip, ror #11
 9ac:	00000000 	andeq	r0, r0, r0
 9b0:	00000006 	andeq	r0, r0, r6
 9b4:	0000000c 	andeq	r0, r0, ip
 9b8:	000005ec 	andeq	r0, r0, ip, ror #11
 9bc:	00000000 	andeq	r0, r0, r0
 9c0:	0000000a 	andeq	r0, r0, sl
 9c4:	0000000c 	andeq	r0, r0, ip
 9c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 9cc:	7c020001 	stcvc	0, cr0, [r2], {1}
 9d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 9d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 9d8:	000009c4 	andeq	r0, r0, r4, asr #19
 9dc:	08000e60 	stmdaeq	r0, {r5, r6, r9, sl, fp}
 9e0:	00000154 	andeq	r0, r0, r4, asr r1
 9e4:	40100e41 	andsmi	r0, r0, r1, asr #28
 9e8:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
 9ec:	02864003 	addeq	r4, r6, #3
 9f0:	00018e40 	andeq	r8, r1, r0, asr #28
 9f4:	00000018 	andeq	r0, r0, r8, lsl r0
 9f8:	000009c4 	andeq	r0, r0, r4, asr #19
 9fc:	00000000 	andeq	r0, r0, r0
 a00:	00000070 	andeq	r0, r0, r0, ror r0
 a04:	40080e41 	andmi	r0, r8, r1, asr #28
 a08:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 a0c:	00000001 	andeq	r0, r0, r1
 a10:	0000000c 	andeq	r0, r0, ip
 a14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a18:	7c020001 	stcvc	0, cr0, [r2], {1}
 a1c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a20:	00000018 	andeq	r0, r0, r8, lsl r0
 a24:	00000a10 	andeq	r0, r0, r0, lsl sl
 a28:	08000fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp}
 a2c:	00000038 	andeq	r0, r0, r8, lsr r0
 a30:	40080e41 	andmi	r0, r8, r1, asr #28
 a34:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 a38:	00000001 	andeq	r0, r0, r1
 a3c:	0000000c 	andeq	r0, r0, ip
 a40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a44:	7c020001 	stcvc	0, cr0, [r2], {1}
 a48:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a4c:	00000018 	andeq	r0, r0, r8, lsl r0
 a50:	00000a3c 	andeq	r0, r0, ip, lsr sl
 a54:	08000fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp}
 a58:	00000024 	andeq	r0, r0, r4, lsr #32
 a5c:	40080e41 	andmi	r0, r8, r1, asr #28
 a60:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 a64:	00000001 	andeq	r0, r0, r1
 a68:	00000018 	andeq	r0, r0, r8, lsl r0
 a6c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 a70:	08001010 	stmdaeq	r0, {r4, ip}
 a74:	00000024 	andeq	r0, r0, r4, lsr #32
 a78:	40080e41 	andmi	r0, r8, r1, asr #28
 a7c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 a80:	00000001 	andeq	r0, r0, r1
 a84:	00000018 	andeq	r0, r0, r8, lsl r0
 a88:	00000a3c 	andeq	r0, r0, ip, lsr sl
 a8c:	08001034 	stmdaeq	r0, {r2, r4, r5, ip}
 a90:	00000090 	muleq	r0, r0, r0
 a94:	40080e41 	andmi	r0, r8, r1, asr #28
 a98:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 a9c:	00000001 	andeq	r0, r0, r1
 aa0:	00000028 	andeq	r0, r0, r8, lsr #32
 aa4:	00000a3c 	andeq	r0, r0, ip, lsr sl
 aa8:	080010c4 	stmdaeq	r0, {r2, r6, r7, ip}
 aac:	000000a8 	andeq	r0, r0, r8, lsr #1
 ab0:	40200e43 	eormi	r0, r0, r3, asr #28
 ab4:	84400883 	strbhi	r0, [r0], #-2179	; 0x883
 ab8:	06854007 	streq	r4, [r5], r7
 abc:	40058640 	andmi	r8, r5, r0, asr #12
 ac0:	88400487 	stmdahi	r0, {r0, r1, r2, r7, sl}^
 ac4:	02894003 	addeq	r4, r9, #3
 ac8:	00018e40 	andeq	r8, r1, r0, asr #28
 acc:	00000018 	andeq	r0, r0, r8, lsl r0
 ad0:	00000a3c 	andeq	r0, r0, ip, lsr sl
 ad4:	0800116c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip}
 ad8:	00000038 	andeq	r0, r0, r8, lsr r0
 adc:	40080e41 	andmi	r0, r8, r1, asr #28
 ae0:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 ae4:	00000001 	andeq	r0, r0, r1
 ae8:	0000001c 	andeq	r0, r0, ip, lsl r0
 aec:	00000a3c 	andeq	r0, r0, ip, lsr sl
 af0:	080011a4 	stmdaeq	r0, {r2, r5, r7, r8, ip}
 af4:	00000048 	andeq	r0, r0, r8, asr #32
 af8:	40100e41 	andsmi	r0, r0, r1, asr #28
 afc:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 b00:	02854003 	addeq	r4, r5, #3
 b04:	00018e40 	andeq	r8, r1, r0, asr #28
 b08:	0000001c 	andeq	r0, r0, ip, lsl r0
 b0c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b10:	080011ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip}
 b14:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 b18:	40100e41 	andsmi	r0, r0, r1, asr #28
 b1c:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 b20:	02854003 	addeq	r4, r5, #3
 b24:	00018e40 	andeq	r8, r1, r0, asr #28
 b28:	0000001c 	andeq	r0, r0, ip, lsl r0
 b2c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b30:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
 b34:	00000084 	andeq	r0, r0, r4, lsl #1
 b38:	40100e41 	andsmi	r0, r0, r1, asr #28
 b3c:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 b40:	02854003 	addeq	r4, r5, #3
 b44:	00018e40 	andeq	r8, r1, r0, asr #28
 b48:	00000018 	andeq	r0, r0, r8, lsl r0
 b4c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b50:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
 b54:	00000024 	andeq	r0, r0, r4, lsr #32
 b58:	40080e41 	andmi	r0, r8, r1, asr #28
 b5c:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 b60:	00000001 	andeq	r0, r0, r1
 b64:	0000000c 	andeq	r0, r0, ip
 b68:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b6c:	08001364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip}
 b70:	0000001c 	andeq	r0, r0, ip, lsl r0
 b74:	00000018 	andeq	r0, r0, r8, lsl r0
 b78:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b7c:	08001380 	stmdaeq	r0, {r7, r8, r9, ip}
 b80:	00000040 	andeq	r0, r0, r0, asr #32
 b84:	40080e41 	andmi	r0, r8, r1, asr #28
 b88:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 b8c:	00000001 	andeq	r0, r0, r1
 b90:	00000024 	andeq	r0, r0, r4, lsr #32
 b94:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b98:	080013c0 	stmdaeq	r0, {r6, r7, r8, r9, ip}
 b9c:	000002dc 	ldrdeq	r0, [r0], -ip
 ba0:	40180e41 	andsmi	r0, r8, r1, asr #28
 ba4:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 ba8:	04844005 	streq	r4, [r4], #5
 bac:	40038540 	andmi	r8, r3, r0, asr #10
 bb0:	8e400286 	cdphi	2, 4, cr0, cr0, cr6, {4}
 bb4:	00000001 	andeq	r0, r0, r1
 bb8:	00000024 	andeq	r0, r0, r4, lsr #32
 bbc:	00000a3c 	andeq	r0, r0, ip, lsr sl
 bc0:	0800169c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip}
 bc4:	000000c8 	andeq	r0, r0, r8, asr #1
 bc8:	40180e41 	andsmi	r0, r8, r1, asr #28
 bcc:	84400683 	strbhi	r0, [r0], #-1667	; 0x683
 bd0:	04854005 	streq	r4, [r5], #5
 bd4:	40038640 	andmi	r8, r3, r0, asr #12
 bd8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bdc:	00000001 	andeq	r0, r0, r1
 be0:	00000018 	andeq	r0, r0, r8, lsl r0
 be4:	00000a3c 	andeq	r0, r0, ip, lsr sl
 be8:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
 bec:	00000038 	andeq	r0, r0, r8, lsr r0
 bf0:	400c0e41 	andmi	r0, ip, r1, asr #28
 bf4:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
 bf8:	018e4002 	orreq	r4, lr, r2
 bfc:	00000018 	andeq	r0, r0, r8, lsl r0
 c00:	00000a3c 	andeq	r0, r0, ip, lsr sl
 c04:	0800179c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip}
 c08:	0000005c 	andeq	r0, r0, ip, asr r0
 c0c:	40080e41 	andmi	r0, r8, r1, asr #28
 c10:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 c14:	00000001 	andeq	r0, r0, r1
 c18:	0000000c 	andeq	r0, r0, ip
 c1c:	00000a3c 	andeq	r0, r0, ip, lsr sl
 c20:	00000000 	andeq	r0, r0, r0
 c24:	00000002 	andeq	r0, r0, r2
 c28:	0000000c 	andeq	r0, r0, ip
 c2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 c30:	7c020001 	stcvc	0, cr0, [r2], {1}
 c34:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 c38:	00000018 	andeq	r0, r0, r8, lsl r0
 c3c:	00000c28 	andeq	r0, r0, r8, lsr #24
 c40:	080017f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, ip}
 c44:	00000030 	andeq	r0, r0, r0, lsr r0
 c48:	400c0e41 	andmi	r0, ip, r1, asr #28
 c4c:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
 c50:	018e4002 	orreq	r4, lr, r2
 c54:	00000018 	andeq	r0, r0, r8, lsl r0
 c58:	00000c28 	andeq	r0, r0, r8, lsr #24
 c5c:	08001828 	stmdaeq	r0, {r3, r5, fp, ip}
 c60:	00000024 	andeq	r0, r0, r4, lsr #32
 c64:	40080e41 	andmi	r0, r8, r1, asr #28
 c68:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 c6c:	00000001 	andeq	r0, r0, r1

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4349564e 	movtmi	r5, #38478	; 0x964e
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	5152495f 	cmppl	r2, pc, asr r9
       8:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
       c:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	7300646d 	movwvc	r6, #1133	; 0x46d
      14:	6e497274 	mcrvs	2, 2, r7, cr9, cr4, {3}
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	00786564 	rsbseq	r6, r8, r4, ror #10
      1c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
      24:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
      28:	64416563 	strbvs	r6, [r1], #-1379	; 0x563
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	45700073 	ldrbmi	r0, [r0, #-115]!	; 0x73
      34:	746e4970 	strbtvc	r4, [lr], #-2416	; 0x970
      38:	004e495f 	subeq	r4, lr, pc, asr r9

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	5645445f 			; <UNDEFINED> instruction: 0x5645445f

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	5f454349 	svcpl	0x00454349
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	4f464e49 	svcmi	0x00464e49
      48:	65446200 	strbvs	r6, [r4, #-512]	; 0x200
      4c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
      54:	73750065 	cmnvc	r5, #101	; 0x65
      58:	626e4562 	rsbvs	r4, lr, #411041792	; 0x18800000
      5c:	00525349 	subseq	r5, r2, r9, asr #6
      60:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
      64:	575f454d 	ldrbpl	r4, [pc, -sp, asr #10]
      68:	00544941 	subseq	r4, r4, r1, asr #18
      6c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
      70:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
      74:	50646e45 	rsbpl	r6, r4, r5, asr #28
      78:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
      7c:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
      80:	00657275 	rsbeq	r7, r5, r5, ror r2
      84:	49756664 	ldmdbmi	r5!, {r2, r5, r6, r9, sl, sp, lr}^
      88:	0074696e 	rsbseq	r6, r4, lr, ror #18
      8c:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xe4f
      90:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
      94:	6f747069 	svcvs	0x00747069
      98:	73750072 	cmnvc	r5, #114	; 0x72
      9c:	73755362 	cmnvc	r5, #-2013265919	; 0x88000001
      a0:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
      a4:	53456200 	movtpl	r6, #20992	; 0x5200
      a8:	6e63464f 	cdpvs	6, 6, cr4, cr3, cr15, {2}
      ac:	73750074 	cmnvc	r5, #116	; 0x74
      b0:	73655262 	cmnvc	r5, #536870918	; 0x20000006
      b4:	00656d75 	rsbeq	r6, r5, r5, ror sp
      b8:	50535553 	subspl	r5, r3, r3, asr r5
      bc:	45444e45 	strbmi	r4, [r4, #-3653]	; 0xe45
      c0:	45520044 	ldrbmi	r0, [r2, #-68]	; 0x44
      c4:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
      c8:	4154535f 	cmpmi	r4, pc, asr r3
      cc:	75005452 	strvc	r5, [r0, #-1106]	; 0x452
      d0:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
      d4:	76654474 			; <UNDEFINED> instruction: 0x76654474
      d8:	46656369 	strbtmi	r6, [r5], -r9, ror #6
      dc:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0x165
      e0:	43006572 	movwmi	r6, #1394	; 0x572
      e4:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0x6f
      e8:	00617461 	rsbeq	r7, r1, r1, ror #8
      ec:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
      f0:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
      f4:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
      f8:	63616672 	cmnvs	r1, #119537664	; 0x7200000
      fc:	45440065 	strbmi	r0, [r4, #-101]	; 0x65
     100:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
     104:	4345525f 	movtmi	r5, #21087	; 0x525f
     108:	45495049 	strbmi	r5, [r9, #-73]	; 0x49
     10c:	5000544e 	andpl	r5, r0, lr, asr #8
     110:	5245574f 	subpl	r5, r5, #20709376	; 0x13c0000
     114:	75004445 	strvc	r4, [r0, #-1093]	; 0x445
     118:	632e6273 	teqvs	lr, #805306375	; 0x30000007
     11c:	62737500 	rsbsvs	r7, r3, #0, 10
     120:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     124:	6544676e 	strbvs	r6, [r4, #-1902]	; 0x76e
     128:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     12c:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     130:	62737500 	rsbsvs	r7, r3, #0, 10
     134:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0x547
     138:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     13c:	73654465 	cmnvc	r5, #1694498816	; 0x65000000
     140:	70697263 	rsbvc	r7, r9, r3, ror #4
     144:	00726f74 	rsbseq	r6, r2, r4, ror pc
     148:	77425355 	smlsldvc	r5, r2, r5, r3
     14c:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xe49
     150:	76007378 			; <UNDEFINED> instruction: 0x76007378
     154:	00363175 	eorseq	r3, r6, r5, ror r1
     158:	20554e47 	subscs	r4, r5, r7, asr #28
     15c:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
     160:	20332e38 	eorscs	r2, r3, r8, lsr lr
     164:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
     168:	38323230 	ldmdacc	r2!, {r4, r5, r9, ip, sp}
     16c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0x820
     170:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
     174:	5b202965 	blpl	80a710 <__Stack_Size+0x80a310>
     178:	2f4d5241 	svccs	0x004d5241
     17c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     180:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     184:	385f342d 	ldmdacc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     188:	6172622d 	cmnvs	r2, sp, lsr #4
     18c:	2068636e 	rsbcs	r6, r8, lr, ror #6
     190:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     194:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
     198:	38303220 	ldmdacc	r0!, {r5, r9, ip, sp}
     19c:	5d323233 	lfmpl	f3, 4, [r2, #-204]!	; 0xffffff34
     1a0:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
     1a4:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     1a8:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
     1ac:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
     1b0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0x26f
     1b4:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
     1b8:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
     1bc:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     1c0:	746e692d 	strbtvc	r6, [lr], #-2349	; 0x92d
     1c4:	6f777265 	svcvs	0x00777265
     1c8:	2d206b72 	vstmdbcs	r0!, {d6-<overflow reg d62>}
     1cc:	4f2d2067 	svcmi	0x002d2067
     1d0:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     1d4:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     1d8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1dc:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     1e0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1e4:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     1e8:	61746164 	cmnvs	r4, r4, ror #2
     1ec:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     1f0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1f4:	6f6c0073 	svcvs	0x006c0073
     1f8:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     1fc:	7500746e 	strvc	r7, [r0, #-1134]	; 0x46e
     200:	65476273 	strbvs	r6, [r7, #-627]	; 0x273
     204:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     208:	44676966 	strbtmi	r6, [r7], #-2406	; 0x966
     20c:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     210:	6f747069 	svcvs	0x00747069
     214:	53550072 	cmppl	r5, #114	; 0x72
     218:	65526242 	ldrbvs	r6, [r2, #-578]	; 0x242
     21c:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     220:	53550074 	cmppl	r5, #116	; 0x74
     224:	4f4e5f42 	svcmi	0x004e5f42
     228:	45525f54 	ldrbmi	r5, [r2, #-3924]	; 0xf54
     22c:	00594441 	subseq	r4, r9, r1, asr #8
     230:	74734977 	ldrbtvc	r4, [r3], #-2423	; 0x977
     234:	45520072 	ldrbmi	r0, [r2, #-114]	; 0x72
     238:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
     23c:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0x55f
     240:	414e5245 	cmpmi	lr, r5, asr #4
     244:	6544004c 	strbvs	r0, [r4, #-76]	; 0x4c
     248:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     24c:	6261545f 	rsbvs	r5, r1, #1593835520	; 0x5f000000
     250:	7300656c 	movwvc	r6, #1388	; 0x56c
     254:	70757465 	rsbsvc	r7, r5, r5, ror #8
     258:	00425355 	subeq	r5, r2, r5, asr r3
     25c:	47627375 			; <UNDEFINED> instruction: 0x47627375
     260:	6f437465 	svcvs	0x00437465
     264:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     268:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     26c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     270:	746e4962 	strbtvc	r4, [lr], #-2402	; 0x962
     274:	6b636150 	blvs	18d87bc <__Stack_Size+0x18d83bc>
     278:	00464f53 	subeq	r4, r6, r3, asr pc
     27c:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
     280:	616d726f 	cmnvs	sp, pc, ror #4
     284:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     288:	4d726300 	ldclmi	3, cr6, [r2, #-0]
     28c:	006b7361 	rsbeq	r7, fp, r1, ror #6
     290:	5f627355 	svcpl	0x00627355
     294:	6e654c77 	mcrvs	12, 3, r4, cr5, cr7, {3}
     298:	00687467 	rsbeq	r7, r8, r7, ror #8
     29c:	73655265 	cmnvc	r5, #1342177286	; 0x50000006
     2a0:	53656d75 	cmnpl	r5, #7488	; 0x1d40
     2a4:	61567465 	cmpvs	r6, r5, ror #8
     2a8:	4e49006c 	cdpmi	0, 4, cr0, cr9, cr12, {3}
     2ac:	46524554 			; <UNDEFINED> instruction: 0x46524554
     2b0:	5f454341 	svcpl	0x00454341
     2b4:	49434552 	stmdbmi	r3, {r1, r4, r6, r8, sl, lr}^
     2b8:	4e454950 	mcrmi	9, 2, r4, cr5, cr0, {2}
     2bc:	43770054 	cmnmi	r7, #84	; 0x54
     2c0:	0052544e 	subseq	r5, r2, lr, asr #8
     2c4:	46746567 	ldrbtmi	r6, [r4], -r7, ror #10
     2c8:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     2cc:	65676150 	strbvs	r6, [r7, #-336]!	; 0x150
     2d0:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
     2d4:	4e4f5000 	cdpmi	0, 4, cr5, cr15, cr0, {0}
     2d8:	45445f45 	strbmi	r5, [r4, #-3909]	; 0xf45
     2dc:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
     2e0:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
     2e4:	62737500 	rsbsvs	r7, r3, #0, 10
     2e8:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
     2ec:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     2f0:	64644165 	strbtvs	r4, [r4], #-357	; 0x165
     2f4:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     2f8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     2fc:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     300:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     304:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     308:	00657275 	rsbeq	r7, r5, r5, ror r2
     30c:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     310:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     314:	74754f73 	ldrbtvc	r4, [r5], #-3955	; 0xf73
     318:	62735500 	rsbsvs	r5, r3, #0, 10
     31c:	664f775f 			; <UNDEFINED> instruction: 0x664f775f
     320:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
     324:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     328:	61647055 	qdsubvs	r7, r5, r4
     32c:	79426574 	stmdbvc	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
     330:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0x552
     334:	00747365 	rsbseq	r7, r4, r5, ror #6
     338:	41545441 	cmpmi	r4, r1, asr #8
     33c:	44454843 	strbmi	r4, [r5], #-2115	; 0x843
     340:	62737500 	rsbsvs	r7, r3, #0, 10
     344:	61446f4e 	cmpvs	r4, lr, asr #30
     348:	65536174 	ldrbvs	r6, [r3, #-372]	; 0x174
     34c:	00707574 	rsbseq	r7, r0, r4, ror r5
     350:	4349564e 	movtmi	r5, #38478	; 0x964e
     354:	5152495f 	cmppl	r2, pc, asr r9
     358:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     35c:	536c656e 	cmnpl	ip, #461373440	; 0x1b800000
     360:	72506275 	subsvc	r6, r0, #1342177287	; 0x50000007
     364:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     368:	5f007974 	svcpl	0x00007974
     36c:	49434552 	stmdbmi	r3, {r1, r4, r6, r8, sl, lr}^
     370:	4e454950 	mcrmi	9, 2, r4, cr5, cr0, {2}
     374:	59545f54 	ldmdbpl	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     378:	2f004550 	svccs	0x00004550
     37c:	6964656d 	stmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
     380:	66732f61 	ldrbtvs	r2, [r3], -r1, ror #30
     384:	7469475f 	strbtvc	r4, [r9], #-1887	; 0x75f
     388:	2f627548 	svccs	0x00627548
     38c:	7274614d 	rsbsvc	r6, r4, #1073741843	; 0x40000013
     390:	622f7869 	eorvs	r7, pc, #6881280	; 0x690000
     394:	6c746f6f 	ldclvs	15, cr6, [r4], #-444	; 0xfffffe44
     398:	6564616f 	strbvs	r6, [r4, #-367]!	; 0x16f
     39c:	54430072 	strbpl	r0, [r3], #-114	; 0x72
     3a0:	504c5f52 	subpl	r5, ip, r2, asr pc
     3a4:	62737500 	rsbsvs	r7, r3, #0, 10
     3a8:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     3ac:	6e497375 	mcrvs	3, 2, r7, cr9, cr5, {3}
     3b0:	72754300 	rsbsvc	r4, r5, #0, 6
     3b4:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
     3b8:	6165465f 	cmnvs	r5, pc, asr r6
     3bc:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     3c0:	746f5400 	strbtvc	r5, [pc], #-1024	; 3c8 <_Minimum_Stack_Size+0x2c8>
     3c4:	435f6c61 	cmpmi	pc, #24832	; 0x6100
     3c8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     3cc:	61727567 	cmnvs	r2, r7, ror #10
     3d0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     3d4:	62737500 	rsbsvs	r7, r3, #0, 10
     3d8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     3dc:	73750074 	cmnvc	r5, #116	; 0x74
     3e0:	62734462 	rsbsvs	r4, r3, #1644167168	; 0x62000000
     3e4:	00525349 	subseq	r5, r2, r9, asr #6
     3e8:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     3ec:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
     3f0:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     3f4:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     3f8:	5500746e 	strpl	r7, [r0, #-1134]	; 0x46e
     3fc:	455f4253 	ldrbmi	r4, [pc, #-595]	; 1b1 <_Minimum_Stack_Size+0xb1>
     400:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
     404:	53455200 	movtpl	r5, #20992	; 0x5200
     408:	5f454d55 	svcpl	0x00454d55
     40c:	0046464f 	subeq	r4, r6, pc, asr #12
     410:	5f363175 	svcpl	0x00363175
     414:	55003875 	strpl	r3, [r0, #-2165]	; 0x875
     418:	5f726573 	svcpl	0x00726573
     41c:	61656c43 	cmnvs	r5, r3, asr #24
     420:	61654672 	smcvs	21602	; 0x5462
     424:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     428:	42535500 	subsmi	r5, r3, #0, 10
     42c:	6c615677 	stclvs	6, cr5, [r1], #-476	; 0xfffffe24
     430:	00736575 	rsbseq	r6, r3, r5, ror r5
     434:	4548544f 	strbmi	r5, [r8, #-1103]	; 0x44f
     438:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xf52
     43c:	49504943 	ldmdbmi	r0, {r0, r1, r6, r8, fp, lr}^
     440:	00544e45 	subseq	r4, r4, r5, asr #28
     444:	6c6f6f62 	stclvs	15, cr6, [pc], #-392	; 2c4 <_Minimum_Stack_Size+0x1c4>
     448:	72547700 	subsvc	r7, r4, #0, 14
     44c:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
     450:	69537265 	ldmdbvs	r3, {r0, r2, r5, r6, r9, ip, sp, lr}^
     454:	7600657a 			; <UNDEFINED> instruction: 0x7600657a
     458:	00323375 	eorseq	r3, r2, r5, ror r3
     45c:	4349564e 	movtmi	r5, #38478	; 0x964e
     460:	5152495f 	cmppl	r2, pc, asr r9
     464:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     468:	006c656e 	rsbeq	r6, ip, lr, ror #10
     46c:	6552775f 	ldrbvs	r7, [r2, #-1887]	; 0x75f
     470:	6c615667 	stclvs	6, cr5, [r1], #-412	; 0xfffffe64
     474:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
     478:	61667265 	cmnvs	r6, r5, ror #4
     47c:	4e006563 	cfsh32mi	mvfx6, mvfx0, #51
     480:	5f434956 	svcpl	0x00434956
     484:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
     488:	6e6e6168 	powvsez	f6, f6, #0.0
     48c:	72506c65 	subsvc	r6, r0, #25856	; 0x6500
     490:	706d6565 	rsbvc	r6, sp, r5, ror #10
     494:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     498:	6f697250 	svcvs	0x00697250
     49c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     4a0:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     4a4:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     4a8:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     4ac:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     4b0:	75430066 	strbvc	r0, [r3, #-102]	; 0x66
     4b4:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     4b8:	6f435f74 	svcvs	0x00435f74
     4bc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     4c0:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     4c4:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     4c8:	41627375 	smcmi	10037	; 0x2735
     4cc:	6e497070 	mcrvs	0, 2, r7, cr9, cr0, {3}
     4d0:	77007469 	strvc	r7, [r0, -r9, ror #8]
     4d4:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
     4d8:	70757272 	rsbsvc	r7, r5, r2, ror r2
     4dc:	614d5f74 	hvcvs	54772	; 0xd5f4
     4e0:	75006b73 	strvc	r6, [r0, #-2931]	; 0xb73
     4e4:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
     4e8:	646e4574 	strbtvs	r4, [lr], #-1396	; 0x574
     4ec:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     4f0:	61654674 	smcvs	21604	; 0x5464
     4f4:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     4f8:	616c4300 	cmnvs	ip, r0, lsl #6
     4fc:	475f7373 			; <UNDEFINED> instruction: 0x475f7373
     500:	495f7465 	ldmdbmi	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     504:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     508:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     50c:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     510:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     514:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     518:	61647055 	qdsubvs	r7, r5, r4
     51c:	79426574 	stmdbvc	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
     520:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     524:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
     528:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
     52c:	43006570 	movwmi	r6, #1392	; 0x570
     530:	7373616c 	cmnvc	r3, #108, 2
     534:	7461445f 	strbtvc	r4, [r1], #-1119	; 0x45f
     538:	65535f61 	ldrbvs	r5, [r3, #-3937]	; 0xf61
     53c:	00707574 	rsbseq	r7, r0, r4, ror r5
     540:	6f725070 	svcvs	0x00725070
     544:	74726570 	ldrbtvc	r6, [r2], #-1392	; 0x570
     548:	53550079 	cmppl	r5, #121	; 0x79
     54c:	6e495f42 	cdpvs	15, 4, cr5, cr9, cr2, {2}
     550:	5f007469 	svcpl	0x00007469
     554:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
     558:	535f4543 	cmppl	pc, #281018368	; 0x10c00000
     55c:	45544154 	ldrbmi	r4, [r4, #-340]	; 0x154
     560:	42535500 	subsmi	r5, r3, #0, 10
     564:	65526d62 	ldrbvs	r6, [r2, #-3426]	; 0xd62
     568:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     56c:	70795474 	rsbsvc	r5, r9, r4, ror r4
     570:	73750065 	cmnvc	r5, #101	; 0x65
     574:	776f5062 	strbvc	r5, [pc, -r2, rrx]!
     578:	6e4f7265 	cdpvs	2, 4, cr7, cr15, cr5, {3}
     57c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
     580:	72775f6f 	rsbsvc	r5, r7, #444	; 0x1bc
     584:	5f657469 	svcpl	0x00657469
     588:	00746962 	rsbseq	r6, r4, r2, ror #18
     58c:	50457852 	subpl	r7, r5, r2, asr r8
     590:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     594:	00726566 	rsbseq	r6, r2, r6, ror #10
     598:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     59c:	455f454d 	ldrbmi	r4, [pc, #-1357]	; 57 <_Minimum_Stack_Size-0xa9>
     5a0:	00464f53 	subeq	r4, r6, r3, asr pc
     5a4:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     5a8:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     5ac:	535f726f 	cmppl	pc, #-268435450	; 0xf0000006
     5b0:	00657a69 	rsbeq	r7, r5, r9, ror #20
     5b4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     5b8:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     5bc:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     5c0:	65466563 	strbvs	r6, [r6, #-1379]	; 0x563
     5c4:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
     5c8:	73550065 	cmpvc	r5, #101	; 0x65
     5cc:	535f7265 	cmppl	pc, #1342177286	; 0x50000006
     5d0:	6f437465 	svcvs	0x00437465
     5d4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     5d8:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     5dc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     5e0:	534c4146 	movtpl	r4, #49478	; 0xc146
     5e4:	73550045 	cmpvc	r5, #69	; 0x45
     5e8:	475f7265 	ldrbmi	r7, [pc, -r5, ror #4]
     5ec:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
     5f0:	66726574 			; <UNDEFINED> instruction: 0x66726574
     5f4:	00656361 	rsbeq	r6, r5, r1, ror #6
     5f8:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     5fc:	505f6563 	subspl	r6, pc, r3, ror #10
     600:	65706f72 	ldrbvs	r6, [r0, #-3954]!	; 0xf72
     604:	00797472 	rsbseq	r7, r9, r2, ror r4
     608:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     60c:	4f5f454d 	svcmi	0x005f454d
     610:	7375004e 	cmnvc	r5, #78	; 0x4e
     614:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
     618:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
     61c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     620:	65446c61 	strbvs	r6, [r4, #-3169]	; 0xc61
     624:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     628:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     62c:	72754300 	rsbsvc	r4, r5, #0, 6
     630:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
     634:	746c415f 	strbtvc	r4, [ip], #-351	; 0x15f
     638:	616e7265 	cmnvs	lr, r5, ror #4
     63c:	65536574 	ldrbvs	r6, [r3, #-1396]	; 0x574
     640:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
     644:	73750067 	cmnvc	r5, #103	; 0x67
     648:	74614462 	strbtvc	r4, [r1], #-1122	; 0x462
     64c:	74655361 	strbtvc	r5, [r5], #-865	; 0x361
     650:	75007075 	strvc	r7, [r0, #-117]	; 0x75
     654:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     658:	2064656e 	rsbcs	r6, r4, lr, ror #10
     65c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     660:	53555f00 	cmppl	r5, #0, 30
     664:	535f5245 	cmppl	pc, #1342177284	; 0x50000004
     668:	444e4154 	strbmi	r4, [lr], #-340	; 0x154
     66c:	5f445241 	svcpl	0x00445241
     670:	55514552 	ldrbpl	r4, [r1, #-1362]	; 0x552
     674:	53545345 	cmppl	r4, #335544321	; 0x14000001
     678:	42535500 	subsmi	r5, r3, #0, 10
     67c:	5f504c5f 	svcpl	0x00504c5f
     680:	314e4143 	cmpcc	lr, r3, asr #2
     684:	3058525f 	subscc	r5, r8, pc, asr r2
     688:	5152495f 	cmppl	r2, pc, asr r9
     68c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     690:	0072656c 	rsbseq	r6, r2, ip, ror #10
     694:	616c6564 	cmnvs	ip, r4, ror #10
     698:	73550079 	cmpvc	r5, #121	; 0x79
     69c:	475f7265 	ldrbmi	r7, [pc, -r5, ror #4]
     6a0:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465
     6a4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     6a8:	6f687300 	svcvs	0x00687300
     6ac:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
     6b0:	7500746e 	strvc	r7, [r0, #-1134]	; 0x46e
     6b4:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     6b8:	6e754662 	cdpvs	6, 7, cr4, cr5, cr2, {3}
     6bc:	6f697463 	svcvs	0x00697463
     6c0:	446c616e 	strbtmi	r6, [ip], #-366	; 0x16e
     6c4:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     6c8:	6f747069 	svcvs	0x00747069
     6cc:	73550072 	cmpvc	r5, #114	; 0x72
     6d0:	475f7265 	ldrbmi	r7, [pc, -r5, ror #4]
     6d4:	6f437465 	svcvs	0x00437465
     6d8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     6dc:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     6e0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     6e4:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     6e8:	4c5f454d 	cfldr64mi	mvdx4, [pc], {77}	; 0x4d
     6ec:	52455441 	subpl	r5, r5, #1090519040	; 0x41000000
     6f0:	62737500 	rsbsvs	r7, r3, #0, 10
     6f4:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
     6f8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     6fc:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     700:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0x553
     704:	00676e69 	rsbeq	r6, r7, r9, ror #28
     708:	73616c43 	cmnvc	r1, #17152	; 0x4300
     70c:	6f4e5f73 	svcvs	0x004e5f73
     710:	61746144 	cmnvs	r4, r4, asr #2
     714:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     718:	6e007075 	mcrvs	0, 0, r7, cr0, cr5, {3}
     71c:	49636976 	stmdbmi	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     720:	0074696e 	rsbseq	r6, r4, lr, ror #18
     724:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
     728:	666e495f 			; <UNDEFINED> instruction: 0x666e495f
     72c:	6552006f 	ldrbvs	r0, [r2, #-111]	; 0x6f
     730:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0x573
     734:	73750053 	cmnvc	r5, #83	; 0x53
     738:	74655362 	strbtvc	r5, [r5], #-866	; 0x362
     73c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
     740:	63616672 	cmnvs	r1, #119537664	; 0x7200000
     744:	525f0065 	subspl	r0, pc, #101	; 0x65
     748:	4c555345 	mrrcmi	3, 4, r5, r5, cr5	; <UNPREDICTABLE>
     74c:	52540054 	subspl	r0, r4, #84	; 0x54
     750:	5f004555 	svcpl	0x00004555
     754:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
     758:	505f4543 	subspl	r4, pc, r3, asr #10
     75c:	00504f52 	subseq	r4, r0, r2, asr pc
     760:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     764:	6f437465 	svcvs	0x00437465
     768:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     76c:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     770:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     774:	61656c43 	cmnvs	r5, r3, asr #24
     778:	74535f72 	ldrbvc	r5, [r3], #-3954	; 0xf72
     77c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     780:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xf5f
     784:	42535500 	subsmi	r5, r3, #0, 10
     788:	534e555f 	movtpl	r5, #58719	; 0xe55f
     78c:	4f505055 	svcmi	0x00505055
     790:	6c005452 	cfstrsvs	mvf5, [r0], {82}	; 0x52
     794:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     798:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     79c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
     7a0:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
     7a4:	746c6100 	strbtvc	r6, [ip], #-256	; 0x100
     7a8:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0x553
     7ac:	00676e69 	rsbeq	r6, r7, r9, ror #28
     7b0:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
     7b4:	43785250 	cmnmi	r8, #80, 4
     7b8:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
     7bc:	6f725000 	svcvs	0x00725000
     7c0:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
     7c4:	6174535f 	cmnvs	r4, pc, asr r3
     7c8:	5f737574 	svcpl	0x00737574
     7cc:	50004e49 	andpl	r4, r0, r9, asr #28
     7d0:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
     7d4:	535f7373 	cmppl	pc, #-872415231	; 0xcc000001
     7d8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     7dc:	554f5f73 	strbpl	r5, [pc, #-3955]	; fffff871 <BootRAM+0xef70012>
     7e0:	73750054 	cmnvc	r5, #84	; 0x54
     7e4:	73655262 	cmnvc	r5, #536870918	; 0x20000006
     7e8:	49656d75 	stmdbmi	r5!, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
     7ec:	0074696e 	rsbseq	r6, r4, lr, ror #18
     7f0:	5645445f 			; <UNDEFINED> instruction: 0x5645445f
     7f4:	00454349 	subeq	r4, r5, r9, asr #6
     7f8:	44627375 	strbtmi	r7, [r2], #-885	; 0x375
     7fc:	75426273 	strbvc	r6, [r2, #-627]	; 0x273
     800:	45700073 	ldrbmi	r0, [r0, #-115]!	; 0x73
     804:	746e4970 	strbtvc	r4, [lr], #-2416	; 0x970
     808:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xf5f
     80c:	71657200 	cmnvc	r5, r0, lsl #4
     810:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
     814:	444e4500 	strbmi	r4, [lr], #-1280	; 0x500
     818:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
     81c:	45525f54 	ldrbmi	r5, [r2, #-3924]	; 0xf54
     820:	49504943 	ldmdbmi	r0, {r0, r1, r6, r8, fp, lr}^
     824:	00544e45 	subseq	r4, r4, r5, asr #28
     828:	49627375 	stmdbmi	r2!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
     82c:	0074696e 	rsbseq	r6, r4, lr, ror #18
     830:	77425355 	smlsldvc	r5, r2, r5, r3
     834:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     838:	00736874 	rsbseq	r6, r3, r4, ror r8
     83c:	47627375 			; <UNDEFINED> instruction: 0x47627375
     840:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465
     844:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     848:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     84c:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     850:	5300726f 	movwpl	r7, #623	; 0x26f
     854:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
     858:	5f647261 	svcpl	0x00647261
     85c:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0x547
     860:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     864:	6f747069 	svcvs	0x00747069
     868:	74614472 	strbtvc	r4, [r1], #-1138	; 0x472
     86c:	4f430061 	svcmi	0x00430061
     870:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
     874:	44455255 	strbmi	r5, [r5], #-597	; 0x255
     878:	62737500 	rsbsvs	r7, r3, #0, 10
     87c:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xf50
     880:	66664f72 	uqsub16vs	r4, r6, r2
     884:	72754300 	rsbsvc	r4, r5, #0, 6
     888:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
     88c:	746e495f 	strbtvc	r4, [lr], #-2399	; 0x95f
     890:	61667265 	cmnvs	r6, r5, ror #4
     894:	75006563 	strvc	r6, [r0, #-1379]	; 0x563
     898:	65476273 	strbvs	r6, [r7, #-627]	; 0x273
     89c:	746e4974 	strbtvc	r4, [lr], #-2420	; 0x974
     8a0:	61667265 	cmnvs	r6, r5, ror #4
     8a4:	75006563 	strvc	r6, [r0, #-1379]	; 0x563
     8a8:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     8ac:	6e6f4362 	cdpvs	3, 6, cr4, cr15, cr2, {3}
     8b0:	44676966 	strbtmi	r6, [r7], #-2406	; 0x966
     8b4:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     8b8:	6f747069 	svcvs	0x00747069
     8bc:	55464472 	strbpl	r4, [r6, #-1138]	; 0x472
     8c0:	44444100 	strbmi	r4, [r4], #-256	; 0x100
     8c4:	53534552 	cmppl	r3, #343932928	; 0x14800000
     8c8:	52004445 	andpl	r4, r0, #1157627904	; 0x45000000
     8cc:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
     8d0:	4e495f45 	cdpmi	15, 4, cr5, cr9, cr5, {2}
     8d4:	4e524554 	mrcmi	5, 2, r4, cr2, cr4, {2}
     8d8:	5f004c41 	svcpl	0x00004c41
     8dc:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     8e0:	535f454d 	cmppl	pc, #322961408	; 0x13400000
     8e4:	45544154 	ldrbmi	r4, [r4, #-340]	; 0x154
     8e8:	42535500 	subsmi	r5, r3, #0, 10
     8ec:	4355535f 	cmpmi	r5, #2080374785	; 0x7c000001
     8f0:	53534543 	cmppl	r3, #281018368	; 0x10c00000
     8f4:	434e5500 	movtmi	r5, #58624	; 0xe500
     8f8:	454e4e4f 	strbmi	r4, [lr, #-3663]	; 0xe4f
     8fc:	44455443 	strbmi	r5, [r5], #-1091	; 0x443
     900:	62737500 	rsbsvs	r7, r3, #0, 10
     904:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     908:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     90c:	455f0073 	ldrbmi	r0, [pc, #-115]	; 8a1 <__Stack_Size+0x4a1>
     910:	4f50444e 	svcmi	0x0050444e
     914:	5f544e49 	svcpl	0x00544e49
     918:	4f464e49 	svcmi	0x00464e49
     91c:	62737500 	rsbsvs	r7, r3, #0, 10
     920:	61656c43 	cmnvs	r5, r3, asr #24
     924:	61654672 	smcvs	21602	; 0x5462
     928:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     92c:	746f5400 	strbtvc	r5, [pc], #-1024	; 934 <__Stack_Size+0x534>
     930:	455f6c61 	ldrbmi	r6, [pc, #-3169]	; fffffcd7 <BootRAM+0xef70478>
     934:	6f70646e 	svcvs	0x0070646e
     938:	00746e69 	rsbseq	r6, r4, r9, ror #28
     93c:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xf43
     940:	536c6f72 	cmnpl	ip, #456	; 0x1c8
     944:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     948:	706f4300 	rsbvc	r4, pc, r0, lsl #6
     94c:	756f5279 	strbvc	r5, [pc, #-633]!	; 6db <__Stack_Size+0x2db>
     950:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     954:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
     958:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
     95c:	696c6156 	stmdbvs	ip!, {r1, r2, r4, r6, r8, sp, lr}^
     960:	6f6e0064 	svcvs	0x006e0064
     964:	6e696874 	mcrvs	8, 3, r6, cr9, cr4, {3}
     968:	6f725067 	svcvs	0x00725067
     96c:	38750063 	ldmdacc	r5!, {r0, r1, r5, r6}^
     970:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     974:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     978:	6556676e 	ldrbvs	r6, [r6, #-1902]	; 0x76e
     97c:	726f646e 	rsbvc	r6, pc, #1845493760	; 0x6e000000
     980:	5f387500 	svcpl	0x00387500
     984:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     988:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     98c:	746e4967 	strbtvc	r4, [lr], #-2407	; 0x967
     990:	61667265 	cmnvs	r6, r5, ror #4
     994:	75006563 	strvc	r6, [r0, #-1379]	; 0x563
     998:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     99c:	76654462 	strbtvc	r4, [r5], -r2, ror #8
     9a0:	44656369 	strbtmi	r6, [r5], #-873	; 0x369
     9a4:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     9a8:	6f747069 	svcvs	0x00747069
     9ac:	55464472 	strbpl	r4, [r6, #-1138]	; 0x472
     9b0:	5f387500 	svcpl	0x00387500
     9b4:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     9b8:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     9bc:	72655367 	rsbvc	r5, r5, #-1677721599	; 0x9c000001
     9c0:	006c6169 	rsbeq	r6, ip, r9, ror #2
     9c4:	755f3875 	ldrbvc	r3, [pc, #-2165]	; 157 <_Minimum_Stack_Size+0x57>
     9c8:	74536273 	ldrbvc	r6, [r3], #-627	; 0x273
     9cc:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     9d0:	30746c41 	rsbscc	r6, r4, r1, asr #24
     9d4:	5f387500 	svcpl	0x00387500
     9d8:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     9dc:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     9e0:	746c4167 	strbtvc	r4, [ip], #-359	; 0x167
     9e4:	38750031 	ldmdacc	r5!, {r0, r4, r5}^
     9e8:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     9ec:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     9f0:	6c41676e 	mcrrvs	7, 6, r6, r1, cr14
     9f4:	75003274 	strvc	r3, [r0, #-628]	; 0x274
     9f8:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     9fc:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a00:	50676e69 	rsbpl	r6, r7, r9, ror #28
     a04:	75646f72 	strbvc	r6, [r4, #-3954]!	; 0xf72
     a08:	75007463 	strvc	r7, [r0, #-1123]	; 0x463
     a0c:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     a10:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a14:	4c676e69 	stclmi	14, cr6, [r7], #-420	; 0xfffffe5c
     a18:	49676e61 	stmdbmi	r7!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     a1c:	73750064 	cmnvc	r5, #100	; 0x64
     a20:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     a24:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     a28:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     a2c:	6400632e 	strvs	r6, [r0], #-814	; 0x32e
     a30:	69467566 	stmdbvs	r6, {r1, r2, r5, r6, r8, sl, ip, sp, lr}^
     a34:	6873696e 	ldmdavs	r3!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     a38:	6f6c7055 	svcvs	0x006c7055
     a3c:	6a006461 	bvs	19bc8 <__Stack_Size+0x197c8>
     a40:	54706d75 	ldrbtpl	r6, [r0], #-3445	; 0xd75
     a44:	6573556f 	ldrbvs	r5, [r3, #-1391]!	; 0x56f
     a48:	65730072 	ldrbvs	r0, [r3, #-114]!	; 0x72
     a4c:	4c707574 	cfldr64mi	mvdx7, [r0], #-464	; 0xfffffe30
     a50:	6e414445 	cdpvs	4, 4, cr4, cr1, cr5, {2}
     a54:	74754264 	ldrbtvc	r4, [r5], #-612	; 0x264
     a58:	006e6f74 	rsbeq	r6, lr, r4, ror pc
     a5c:	63656863 	cmnvs	r5, #6488064	; 0x630000
     a60:	646e416b 	strbtvs	r4, [lr], #-363	; 0x16b
     a64:	61656c43 	cmnvs	r5, r3, asr #24
     a68:	6f6f4272 	svcvs	0x006f4272
     a6c:	616f6c74 	smcvs	63172	; 0xf6c4
     a70:	46726564 	ldrbtmi	r6, [r2], -r4, ror #10
     a74:	0067616c 	rsbeq	r6, r7, ip, ror #2
     a78:	746e6f64 	strbtvc	r6, [lr], #-3940	; 0xf64
     a7c:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     a80:	68630074 	stmdavs	r3!, {r2, r4, r5, r6}^
     a84:	556b6365 	strbpl	r6, [fp, #-869]!	; 0x365
     a88:	43726573 	cmnmi	r2, #482344960	; 0x1cc00000
     a8c:	0065646f 	rsbeq	r6, r5, pc, ror #8
     a90:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
     a94:	65526d65 	ldrbvs	r6, [r2, #-3429]	; 0xd65
     a98:	00746573 	rsbseq	r6, r4, r3, ror r5
     a9c:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
     aa0:	74747542 	ldrbtvc	r7, [r4], #-1346	; 0x542
     aa4:	74536e6f 	ldrbvc	r6, [r3], #-3695	; 0xe6f
     aa8:	00657461 	rsbeq	r7, r5, r1, ror #8
     aac:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0x573
     ab0:	414c4670 	hvcmi	50272	; 0xc460
     ab4:	73004853 	movwvc	r4, #2131	; 0x853
     ab8:	70757465 	rsbsvc	r7, r5, r5, ror #8
     abc:	004b4c43 	subeq	r4, fp, r3, asr #24
     ac0:	6e69616d 	powvsez	f6, f1, #5.0
     ac4:	5f6f6e00 	svcpl	0x006f6e00
     ac8:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     acc:	6d756a5f 	vldmdbvs	r5!, {s13-s107}
     ad0:	616d0070 	smcvs	53248	; 0xd000
     ad4:	632e6e69 	teqvs	lr, #1680	; 0x690
     ad8:	73797300 	cmnvc	r9, #0, 6
     adc:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     ae0:	52647261 	rsbpl	r7, r4, #268435462	; 0x10000006
     ae4:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     ae8:	6c656400 	cfstrdvs	mvd6, [r5], #-0
     aec:	635f7961 	cmpvs	pc, #1589248	; 0x184000
     af0:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
     af4:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     af8:	6f6c7055 	svcvs	0x006c7055
     afc:	74536461 	ldrbvc	r6, [r3], #-1121	; 0x461
     b00:	65747261 	ldrbvs	r7, [r4, #-609]!	; 0x261
     b04:	65730064 	ldrbvs	r0, [r3, #-100]!	; 0x64
     b08:	70734d74 	rsbsvc	r4, r3, r4, ror sp
     b0c:	4a646e41 	bmi	191c418 <__Stack_Size+0x191c018>
     b10:	00706d75 	rsbseq	r6, r0, r5, ror sp
     b14:	52504349 	subspl	r4, r0, #603979777	; 0x24000001
     b18:	67617000 	strbvs	r7, [r1, -r0]!
     b1c:	64644165 	strbtvs	r4, [r4], #-357	; 0x165
     b20:	6d740072 	ldclvs	0, cr0, [r4, #-456]!	; 0xfffffe38
     b24:	62757370 	rsbsvs	r7, r5, #112, 6	; 0xc0000001
     b28:	6d777200 	lfmvs	f7, 2, [r7, #-0]
     b2c:	006c6156 	rsbeq	r6, ip, r6, asr r1
     b30:	52505349 	subspl	r5, r0, #603979777	; 0x24000001
     b34:	61657200 	cmnvs	r5, r0, lsl #4
     b38:	6e695064 	cdpvs	0, 6, cr5, cr9, cr4, {3}
     b3c:	616c6600 	cmnvs	ip, r0, lsl #12
     b40:	72456873 	subvc	r6, r5, #7536640	; 0x730000
     b44:	50657361 	rsbpl	r7, r5, r1, ror #6
     b48:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     b4c:	74617200 	strbtvc	r7, [r1], #-512	; 0x200
     b50:	74730065 	ldrbtvc	r0, [r3], #-101	; 0x65
     b54:	65626f72 	strbvs	r6, [r2, #-3954]!	; 0xf72
     b58:	006e6950 	rsbeq	r6, lr, r0, asr r9
     b5c:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
     b60:	53455200 	movtpl	r5, #20992	; 0x5200
     b64:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     b68:	00303144 	eorseq	r3, r0, r4, asr #2
     b6c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     b70:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     b74:	74003131 	strvc	r3, [r0], #-305	; 0x131
     b78:	6572706d 	ldrbvs	r7, [r2, #-109]!	; 0x6d
     b7c:	74730067 	ldrbtvc	r0, [r3], #-103	; 0x67
     b80:	00657461 	rsbeq	r7, r5, r1, ror #8
     b84:	32425041 	subcc	r5, r2, #65	; 0x41
     b88:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     b8c:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     b90:	00657270 	rsbeq	r7, r5, r0, ror r2
     b94:	73616c66 	cmnvc	r1, #26112	; 0x6600
     b98:	6c6e5568 	cfstr64vs	mvdx5, [lr], #-416	; 0xfffffe60
     b9c:	006b636f 	rsbeq	r6, fp, pc, ror #6
     ba0:	46746567 	ldrbtmi	r6, [r4], -r7, ror #10
     ba4:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     ba8:	00646e45 	rsbeq	r6, r4, r5, asr #28
     bac:	52414642 	subpl	r4, r1, #69206016	; 0x4200000
     bb0:	564e7200 	strbpl	r7, [lr], -r0, lsl #4
     bb4:	6e004349 	cdpvs	3, 0, cr4, cr0, cr9, {2}
     bb8:	44636976 	strbtmi	r6, [r3], #-2422	; 0x976
     bbc:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
     bc0:	6e49656c 	cdpvs	5, 4, cr6, cr9, cr12, {3}
     bc4:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
     bc8:	73747075 	cmnvc	r4, #117	; 0x75
     bcc:	6c617600 	stclvs	6, cr7, [r1], #-0
     bd0:	56006575 			; <UNDEFINED> instruction: 0x56006575
     bd4:	00524f54 	subseq	r4, r2, r4, asr pc
     bd8:	706d756a 	rsbvc	r7, sp, sl, ror #10
     bdc:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
     be0:	43435200 	movtmi	r5, #12800	; 0x3200
     be4:	6765525f 			; <UNDEFINED> instruction: 0x6765525f
     be8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     bec:	4e007463 	cdpmi	4, 0, cr7, cr0, cr3, {3}
     bf0:	5f434956 	svcpl	0x00434956
     bf4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     bf8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     bfc:	49007463 	stmdbmi	r0, {r0, r1, r5, r6, sl, ip, sp, lr}
     c00:	00525343 	subseq	r5, r2, r3, asr #6
     c04:	6d706d74 	ldclvs	13, cr6, [r0, #-464]!	; 0xfffffe30
     c08:	006b7361 	rsbeq	r7, fp, r1, ror #6
     c0c:	45424841 	strbmi	r4, [r2, #-2113]	; 0x841
     c10:	4100524e 	tstmi	r0, lr, asr #4
     c14:	52435249 	subpl	r5, r3, #-1879048188	; 0x90000004
     c18:	464d4d00 	strbmi	r4, [sp], -r0, lsl #26
     c1c:	6c005241 	sfmvs	f5, 4, [r0], {65}	; 0x41
     c20:	726f5768 	rsbvc	r5, pc, #104, 14	; 0x1a00000
     c24:	6c660064 	stclvs	0, cr0, [r6], #-400	; 0xfffffe70
     c28:	4c687361 	stclmi	3, cr7, [r8], #-388	; 0xfffffe7c
     c2c:	006b636f 	rsbeq	r6, fp, pc, ror #6
     c30:	5f727770 	svcpl	0x00727770
     c34:	5f676572 	svcpl	0x00676572
     c38:	0070616d 	rsbseq	r6, r0, sp, ror #2
     c3c:	52534643 	subspl	r4, r3, #70254592	; 0x4300000
     c40:	42414900 	submi	r4, r1, #0, 18
     c44:	6f770052 	svcvs	0x00770052
     c48:	49006472 	stmdbmi	r0, {r1, r4, r5, r6, sl, sp, lr}
     c4c:	00524543 	subseq	r4, r2, r3, asr #10
     c50:	31425041 	cmpcc	r2, r1, asr #32
     c54:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     c58:	706b6200 	rsbvc	r6, fp, r0, lsl #4
     c5c:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
     c60:	70616d5f 	rsbvc	r6, r1, pc, asr sp
     c64:	55504300 	ldrbpl	r4, [r0, #-768]	; 0x300
     c68:	72004449 	andvc	r4, r0, #1224736768	; 0x49000000
     c6c:	00424353 	subeq	r4, r2, r3, asr r3
     c70:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     c74:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     c78:	46440030 			; <UNDEFINED> instruction: 0x46440030
     c7c:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
     c80:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     c84:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
     c88:	53455200 	movtpl	r5, #20992	; 0x5200
     c8c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     c90:	52003344 	andpl	r3, r0, #68, 6	; 0x10000001
     c94:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     c98:	34444556 	strbcc	r4, [r4], #-1366	; 0x556
     c9c:	53455200 	movtpl	r5, #20992	; 0x5200
     ca0:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     ca4:	52003544 	andpl	r3, r0, #68, 10	; 0x11000000
     ca8:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     cac:	36444556 			; <UNDEFINED> instruction: 0x36444556
     cb0:	53455200 	movtpl	r5, #20992	; 0x5200
     cb4:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     cb8:	53003744 	movwpl	r3, #1860	; 0x744
     cbc:	52534348 	subspl	r4, r3, #72, 6	; 0x20000001
     cc0:	45534900 	ldrbmi	r4, [r3, #-2304]	; 0x900
     cc4:	74530052 	ldrbvc	r0, [r3], #-82	; 0x52
     cc8:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0x261
     ccc:	756f4370 	strbvc	r4, [pc, #-880]!	; 964 <__Stack_Size+0x564>
     cd0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     cd4:	31524400 	cmpcc	r2, r0, lsl #8
     cd8:	50410030 	subpl	r0, r1, r0, lsr r0
     cdc:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
     ce0:	6c660052 	stclvs	0, cr0, [r6], #-328	; 0xfffffeb8
     ce4:	65536761 	ldrbvs	r6, [r3, #-1889]	; 0x761
     ce8:	45520074 	ldrbmi	r0, [r2, #-116]	; 0x74
     cec:	56524553 			; <UNDEFINED> instruction: 0x56524553
     cf0:	00314445 	eorseq	r4, r1, r5, asr #8
     cf4:	4d727375 	ldclmi	3, cr7, [r2, #-468]!	; 0xfffffe2c
     cf8:	006e6961 	rsbeq	r6, lr, r1, ror #18
     cfc:	52534641 	subspl	r4, r3, #68157440	; 0x4100000
     d00:	53455200 	movtpl	r5, #20992	; 0x5200
     d04:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     d08:	68003944 	stmdavs	r0, {r2, r6, r8, fp, ip, sp}
     d0c:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
     d10:	2e657261 	cdpcs	2, 6, cr7, cr5, cr1, {3}
     d14:	564e0063 	strbpl	r0, [lr], -r3, rrx
     d18:	545f4349 	ldrbpl	r4, [pc], #-841	; d20 <__Stack_Size+0x920>
     d1c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     d20:	41006665 	tstmi	r0, r5, ror #12
     d24:	45314250 	ldrmi	r4, [r1, #-592]!	; 0x250
     d28:	6600524e 	strvs	r5, [r0], -lr, asr #4
     d2c:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     d30:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
     d34:	726f5765 	rsbvc	r5, pc, #26476544	; 0x1940000
     d38:	6c660064 	stclvs	0, cr0, [r6], #-400	; 0xfffffe70
     d3c:	53687361 	cmnpl	r8, #-2080374783	; 0x84000001
     d40:	00657a69 	rsbeq	r7, r5, r9, ror #20
     d44:	52504853 	subspl	r4, r0, #5439488	; 0x530000
     d48:	43545200 	cmpmi	r4, #0, 4
     d4c:	62005243 	andvs	r5, r0, #805306372	; 0x30000004
     d50:	006b6e61 	rsbeq	r6, fp, r1, ror #28
     d54:	73616c66 	cmnvc	r1, #26112	; 0x6600
     d58:	64644168 	strbtvs	r4, [r4], #-360	; 0x168
     d5c:	75660072 	strbvc	r0, [r6, #-114]!	; 0x72
     d60:	7450636e 	ldrbvc	r6, [r0], #-878	; 0x36e
     d64:	73750072 	cmnvc	r5, #114	; 0x72
     d68:	64644172 	strbtvs	r4, [r4], #-370	; 0x172
     d6c:	45520072 	ldrbmi	r0, [r2, #-114]	; 0x72
     d70:	56524553 			; <UNDEFINED> instruction: 0x56524553
     d74:	00384445 	eorseq	r4, r8, r5, asr #8
     d78:	73616c66 	cmnvc	r1, #26112	; 0x6600
     d7c:	61724568 	cmnvs	r2, r8, ror #10
     d80:	61506573 	cmpvs	r0, r3, ror r5
     d84:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
     d88:	3031706b 	eorscc	r7, r1, fp, rrx
     d8c:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
     d90:	44420065 	strbmi	r0, [r2], #-101	; 0x65
     d94:	74005243 	strvc	r5, [r0], #-579	; 0x243
     d98:	7270706d 	rsbsvc	r7, r0, #109	; 0x6d
     d9c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     da0:	68007974 	stmdavs	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
     da4:	726f5768 	rsbvc	r5, pc, #104, 14	; 0x1a00000
     da8:	53520064 	cmppl	r2, #100	; 0x64
     dac:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     db0:	43003144 	movwmi	r3, #324	; 0x144
     db4:	00524746 	subseq	r4, r2, r6, asr #14
     db8:	33637576 	cmncc	r3, #494927872	; 0x1d800000
     dbc:	43530032 	cmpmi	r3, #50	; 0x32
     dc0:	79545f42 	ldmdbvc	r4, {r1, r6, r8, r9, sl, fp, ip, lr}^
     dc4:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     dc8:	46480066 	strbmi	r0, [r8], -r6, rrx
     dcc:	69005253 	stmdbvs	r0, {r0, r1, r4, r6, r9, ip, lr}
     dd0:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     dd4:	7200676e 	andvc	r6, r0, #28835840	; 0x1b80000
     dd8:	42766365 	rsbsmi	r6, r6, #-1811939327	; 0x94000001
     ddc:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
     de0:	66640072 			; <UNDEFINED> instruction: 0x66640072
     de4:	00632e75 	rsbeq	r2, r3, r5, ror lr
     de8:	4f4c505f 	svcmi	0x004c505f
     dec:	46440054 			; <UNDEFINED> instruction: 0x46440054
     df0:	50555f55 	subspl	r5, r5, r5, asr pc
     df4:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
     df8:	414c465f 	cmpmi	ip, pc, asr r6
     dfc:	305f4853 	subscc	r4, pc, r3, asr r8	; <UNPREDICTABLE>
     e00:	30303858 	eorscc	r3, r0, r8, asr r8
     e04:	30303035 	eorscc	r3, r0, r5, lsr r0
     e08:	46445f00 	strbmi	r5, [r4], -r0, lsl #30
     e0c:	61745355 	cmnvs	r4, r5, asr r3
     e10:	00737574 	rsbseq	r7, r3, r4, ror r5
     e14:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     e18:	41707041 	cmnmi	r0, r1, asr #32
     e1c:	00726464 	rsbseq	r6, r2, r4, ror #8
     e20:	6f507762 	svcvs	0x00507762
     e24:	69546c6c 	ldmdbvs	r4, {r2, r3, r5, r6, sl, fp, sp, lr}^
     e28:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8c3 <__Stack_Size+0x4c3>
     e2c:	62003074 	andvs	r3, r0, #116	; 0x74
     e30:	6c6f5077 	stclvs	0, cr5, [pc], #-476	; c5c <__Stack_Size+0x85c>
     e34:	6d69546c 	cfstrdvs	mvd5, [r9, #-432]!	; 0xfffffe50
     e38:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
     e3c:	77620031 			; <UNDEFINED> instruction: 0x77620031
     e40:	6c6c6f50 	stclvs	15, cr6, [ip], #-320	; 0xfffffec0
     e44:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
     e48:	3274756f 	rsbscc	r7, r4, #465567744	; 0x1bc00000
     e4c:	55464400 	strbpl	r4, [r6, #-1024]	; 0x400
     e50:	4c50555f 	cfldr64mi	mvdx5, [r0], {95}	; 0x5f
     e54:	5f44414f 	svcpl	0x0044414f
     e58:	454e4f4e 	strbmi	r4, [lr, #-3918]	; 0xf4e
     e5c:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     e60:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
     e64:	4f4c5055 	svcmi	0x004c5055
     e68:	75004441 	strvc	r4, [r0, #-1089]	; 0x441
     e6c:	55726573 	ldrbpl	r6, [r2, #-1395]!	; 0x573
     e70:	616f6c70 	smcvs	63168	; 0xf6c0
     e74:	70795464 	rsbsvc	r5, r9, r4, ror #8
     e78:	66640065 	strbtvs	r0, [r4], -r5, rrx
     e7c:	706f4375 	rsbvc	r4, pc, r5, ror r3	; <UNPREDICTABLE>
     e80:	66754279 			; <UNDEFINED> instruction: 0x66754279
     e84:	54726566 	ldrbtpl	r6, [r2], #-1382	; 0x566
     e88:	6578456f 	ldrbvs	r4, [r8, #-1391]!	; 0x56f
     e8c:	66640063 	strbtvs	r0, [r4], -r3, rrx
     e90:	706f4375 	rsbvc	r4, pc, r5, ror r3	; <UNPREDICTABLE>
     e94:	61745379 	cmnvs	r4, r9, ror r3
     e98:	00737574 	rsbseq	r7, r3, r4, ror r5
     e9c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
     ea0:	706f635f 	rsbvc	r6, pc, pc, asr r3	; <UNPREDICTABLE>
     ea4:	6f6c5f79 	svcvs	0x006c5f79
     ea8:	64006b63 	strvs	r6, [r0], #-2915	; 0xb63
     eac:	6f437566 	svcvs	0x00437566
     eb0:	74537970 	ldrbvc	r7, [r3], #-2416	; 0x970
     eb4:	00657461 	rsbeq	r7, r5, r1, ror #8
     eb8:	43756664 	cmnmi	r5, #100, 12	; 0x6400000
     ebc:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0x6f
     ec0:	414f4c4e 	cmpmi	pc, lr, asr #24
     ec4:	66640044 	strbtvs	r0, [r4], -r4, asr #32
     ec8:	64705575 	ldrbtvs	r5, [r0], #-1397	; 0x575
     ecc:	42657461 	rsbmi	r7, r5, #1627389952	; 0x61000000
     ed0:	6d695479 	cfstrdvs	mvd5, [r9, #-484]!	; 0xfffffe1c
     ed4:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
     ed8:	55464400 	strbpl	r4, [r6, #-1024]	; 0x400
     edc:	4c50555f 	cfldr64mi	mvdx5, [r0], {95}	; 0x5f
     ee0:	5f44414f 	svcpl	0x0044414f
     ee4:	53414c46 	movtpl	r4, #7238	; 0x1c46
     ee8:	58305f48 	ldmdapl	r0!, {r3, r6, r8, r9, sl, fp, ip, lr}
     eec:	32303038 	eorscc	r3, r0, #56	; 0x38
     ef0:	00303030 	eorseq	r3, r0, r0, lsr r0
     ef4:	5377656e 	cmnpl	r7, #461373440	; 0x1b800000
     ef8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     efc:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     f00:	6f6c7055 	svcvs	0x006c7055
     f04:	79546461 	ldmdbvc	r4, {r0, r5, r6, sl, sp, lr}^
     f08:	5f736570 	svcpl	0x00736570
     f0c:	66640074 			; <UNDEFINED> instruction: 0x66640074
     f10:	70704175 	rsbsvc	r4, r0, r5, ror r1
     f14:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     f18:	75007375 	strvc	r7, [r0, #-885]	; 0x375
     f1c:	616f6c70 	smcvs	63168	; 0xf6c0
     f20:	6f6c4264 	svcvs	0x006c4264
     f24:	654c6b63 	strbvs	r6, [ip, #-2915]	; 0xb63
     f28:	6874006e 	ldmdavs	r4!, {r1, r2, r3, r5, r6}^
     f2c:	6c427369 	mcrrvs	3, 6, r7, r2, cr9
     f30:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
     f34:	75006e65 	strvc	r6, [r0, #-3685]	; 0xe65
     f38:	46726573 			; <UNDEFINED> instruction: 0x46726573
     f3c:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
     f40:	4c657261 	sfmmi	f7, 2, [r5], #-388	; 0xfffffe7c
     f44:	64006e65 	strvs	r6, [r0], #-3685	; 0xe65
     f48:	75427566 	strbvc	r7, [r2, #-1382]	; 0x566
     f4c:	62007973 	andvs	r7, r0, #1884160	; 0x1cc000
     f50:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     f54:	656c0065 	strbvs	r0, [ip, #-101]!	; 0x65
     f58:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     f5c:	61747300 	cmnvs	r4, r0, lsl #6
     f60:	74537472 	ldrbvc	r7, [r3], #-1138	; 0x472
     f64:	00657461 	rsbeq	r7, r5, r1, ror #8
     f68:	5f554644 	svcpl	0x00554644
     f6c:	4f4c5055 	svcmi	0x004c5055
     f70:	525f4441 	subspl	r4, pc, #1090519040	; 0x41000000
     f74:	42004d41 	andmi	r4, r0, #4160	; 0x1040
     f78:	4e494745 	cdpmi	7, 4, cr4, cr9, cr5, {2}
     f7c:	474e494e 	strbmi	r4, [lr, -lr, asr #18]
     f80:	65737500 	ldrbvs	r7, [r3, #-1280]!	; 0x500
     f84:	61705372 	cmnvs	r0, r2, ror r3
     f88:	75006563 	strvc	r6, [r0, #-1379]	; 0x563
     f8c:	41726573 	cmnmi	r2, r3, ror r5
     f90:	6e457070 	mcrvs	0, 2, r7, cr5, cr0, {3}
     f94:	53620064 	cmnpl	r2, #100	; 0x64
     f98:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     f9c:	66640073 			; <UNDEFINED> instruction: 0x66640073
     fa0:	74655375 	strbtvc	r5, [r5], #-885	; 0x375
     fa4:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     fa8:	494d0065 	stmdbmi	sp, {r0, r2, r5, r6}^
     fac:	454c4444 	strbmi	r4, [ip, #-1092]	; 0x444
     fb0:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     fb4:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     fb8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     fbc:	65724600 	ldrbvs	r4, [r2, #-1536]!	; 0x600
     fc0:	65735565 	ldrbvs	r5, [r3, #-1381]!	; 0x565
     fc4:	66754272 			; <UNDEFINED> instruction: 0x66754272
     fc8:	00726566 	rsbseq	r6, r2, r6, ror #10
     fcc:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0x547
     fd0:	61745378 	cmnvs	r4, r8, ror r3
     fd4:	74536c6c 	ldrbvc	r6, [r3], #-3180	; 0xc6c
     fd8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     fdc:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
     fe0:	62445045 	subvs	r5, r4, #69	; 0x45
     fe4:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
     fe8:	64644131 	strbtvs	r4, [r4], #-305	; 0x131
     fec:	65530072 	ldrbvs	r0, [r3, #-114]	; 0x72
     ff0:	54504574 	ldrbpl	r4, [r0], #-1396	; 0x574
     ff4:	6c615678 	stclvs	6, cr5, [r1], #-480	; 0xfffffe20
     ff8:	53006469 	movwpl	r6, #1129	; 0x469
     ffc:	6f447465 	svcvs	0x00447465
    1000:	656c4275 	strbvs	r4, [ip, #-629]!	; 0x275
    1004:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1008:	74535045 	ldrbvc	r5, [r3], #-69	; 0x45
    100c:	006c6c61 	rsbeq	r6, ip, r1, ror #24
    1010:	445f5045 	ldrbmi	r5, [pc], #-69	; 1018 <__Stack_Size+0xc18>
    1014:	5f465542 	svcpl	0x00465542
    1018:	0054554f 	subseq	r5, r4, pc, asr #10
    101c:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1020:	53785250 	cmnpl	r8, #80, 4
    1024:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1028:	6f540073 	svcvs	0x00540073
    102c:	656c6767 	strbvs	r6, [ip, #-1895]!	; 0x767
    1030:	474f5444 	strbmi	r5, [pc, -r4, asr #8]
    1034:	0058545f 	subseq	r5, r8, pc, asr r4
    1038:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    103c:	64644150 	strbtvs	r4, [r4], #-336	; 0x150
    1040:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1044:	50455f00 	subpl	r5, r5, r0, lsl #30
    1048:	5542445f 	strbpl	r4, [r2, #-1119]	; 0x45f
    104c:	49445f46 	stmdbmi	r4, {r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    1050:	41620052 	qdsubmi	r0, r2, r2
    1054:	00726464 	rsbseq	r6, r2, r4, ror #8
    1058:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    105c:	00525453 	subseq	r5, r2, r3, asr r4
    1060:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0x942
    1064:	70617753 	rsbvc	r7, r1, r3, asr r7
    1068:	424e7700 	submi	r7, lr, #0, 14
    106c:	6b636f6c 	blvs	18dce24 <__Stack_Size+0x18dca24>
    1070:	6c430073 	mcrrvs	0, 7, r0, r3, cr3
    1074:	44726165 	ldrbtmi	r6, [r2], #-357	; 0x165
    1078:	5f474f54 	svcpl	0x00474f54
    107c:	47005852 	smlsdmi	r0, r2, r8, r5
    1080:	4e437465 	cdpmi	4, 4, cr7, cr3, cr5, {3}
    1084:	47005254 	smlsdmi	r0, r4, r2, r5
    1088:	78527465 	ldmdavc	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
    108c:	6c617453 	cfstrdvs	mvd7, [r1], #-332	; 0xfffffeb4
    1090:	6174536c 	cmnvs	r4, ip, ror #6
    1094:	00737574 	rsbseq	r7, r3, r4, ror r5
    1098:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0x547
    109c:	52444441 	subpl	r4, r4, #1090519040	; 0x41000000
    10a0:	6f437700 	svcvs	0x00437700
    10a4:	00746e75 	rsbseq	r6, r4, r5, ror lr
    10a8:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    10ac:	64644150 	strbtvs	r4, [r4], #-336	; 0x150
    10b0:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    10b4:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    10b8:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
    10bc:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    10c0:	54007375 	strpl	r7, [r0], #-885	; 0x375
    10c4:	6c67676f 	stclvs	7, cr6, [r7], #-444	; 0xfffffe44
    10c8:	4f544465 	svcmi	0x00544465
    10cc:	58525f47 	ldmdapl	r2, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    10d0:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    10d4:	62445045 	subvs	r5, r4, #69	; 0x45
    10d8:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    10dc:	64644166 	strbtvs	r4, [r4], #-358	; 0x166
    10e0:	65530072 	ldrbvs	r0, [r3, #-114]	; 0x72
    10e4:	54504574 	ldrbpl	r4, [r0], #-1396	; 0x574
    10e8:	00657079 	rsbeq	r7, r5, r9, ror r0
    10ec:	445f5045 	ldrbmi	r5, [pc], #-69	; 10f4 <__Stack_Size+0xcf4>
    10f0:	5f465542 	svcpl	0x00465542
    10f4:	77004e49 	strvc	r4, [r0, -r9, asr #28]
    10f8:	00746552 	rsbseq	r6, r4, r2, asr r5
    10fc:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1100:	41785250 	cmnmi	r8, r0, asr r2
    1104:	00726464 	rsbseq	r6, r2, r4, ror #8
    1108:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    110c:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    1110:	30667542 	rsbcc	r7, r6, r2, asr #10
    1114:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1118:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    111c:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    1120:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1124:	62007375 	andvs	r7, r0, #-738197503	; 0xd4000001
    1128:	00726944 	rsbseq	r6, r2, r4, asr #18
    112c:	70795477 	rsbsvc	r5, r9, r7, ror r4
    1130:	73750065 	cmnvc	r5, #101	; 0x65
    1134:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1138:	73752f62 	cmnvc	r5, #392	; 0x188
    113c:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xf62
    1140:	632e7367 	teqvs	lr, #-1677721599	; 0x9c000001
    1144:	5f504500 	svcpl	0x00504500
    1148:	46554244 	ldrbmi	r4, [r5], -r4, asr #4
    114c:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
    1150:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1154:	62445045 	subvs	r5, r4, #69	; 0x45
    1158:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    115c:	00726944 	rsbseq	r6, r2, r4, asr #18
    1160:	66754277 			; <UNDEFINED> instruction: 0x66754277
    1164:	64644131 	strbtvs	r4, [r4], #-305	; 0x131
    1168:	53770072 	cmnpl	r7, #114	; 0x72
    116c:	53005777 	movwpl	r5, #1911	; 0x777
    1170:	50457465 	subpl	r7, r5, r5, ror #8
    1174:	62756f44 	rsbsvs	r6, r5, #68, 30	; 0x110
    1178:	7542656c 	strbvc	r6, [r2, #-1388]	; 0x56c
    117c:	54006666 	strpl	r6, [r0], #-1638	; 0x666
    1180:	726f576f 	rsbvc	r5, pc, #29097984	; 0x1bc0000
    1184:	65530064 	ldrbvs	r0, [r3, #-100]	; 0x64
    1188:	54504574 	ldrbpl	r4, [r0], #-1396	; 0x574
    118c:	64644178 	strbtvs	r4, [r4], #-376	; 0x178
    1190:	6c430072 	mcrrvs	0, 7, r0, r3, cr2
    1194:	45726165 	ldrbmi	r6, [r2, #-357]!	; 0x165
    1198:	756f4450 	strbvc	r4, [pc, #-1104]!	; d50 <__Stack_Size+0x950>
    119c:	42656c62 	rsbmi	r6, r5, #25088	; 0x6200
    11a0:	00666675 	rsbeq	r6, r6, r5, ror r6
    11a4:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    11a8:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    11ac:	31667542 	cmncc	r6, r2, asr #10
    11b0:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    11b4:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    11b8:	79545045 	ldmdbvc	r4, {r0, r2, r6, ip, lr}^
    11bc:	43006570 	movwmi	r6, #1392	; 0x570
    11c0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    11c4:	435f5045 	cmpmi	pc, #69	; 0x45
    11c8:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    11cc:	65530058 	ldrbvs	r0, [r3, #-88]	; 0x58
    11d0:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    11d4:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    11d8:	6f436666 	svcvs	0x00436666
    11dc:	00746e75 	rsbseq	r6, r4, r5, ror lr
    11e0:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    11e4:	494b5f50 	stmdbmi	fp, {r4, r6, r8, r9, sl, fp, ip, lr}^
    11e8:	5300444e 	movwpl	r4, #1102	; 0x44e
    11ec:	50457465 	subpl	r7, r5, r5, ror #8
    11f0:	6f437854 	svcvs	0x00437854
    11f4:	00746e75 	rsbseq	r6, r4, r5, ror lr
    11f8:	61656c43 	cmnvs	r5, r3, asr #24
    11fc:	5f504572 	svcpl	0x00504572
    1200:	444e494b 	strbmi	r4, [lr], #-2379	; 0x94b
    1204:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1208:	42415442 	submi	r5, r1, #1107296256	; 0x42000000
    120c:	4700454c 	strmi	r4, [r0, -ip, asr #10]
    1210:	53497465 	movtpl	r7, #37989	; 0x9465
    1214:	77005254 	smlsdvc	r0, r4, r2, r5
    1218:	56676552 			; <UNDEFINED> instruction: 0x56676552
    121c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    1220:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1224:	50444e45 	subpl	r4, r4, r5, asr #28
    1228:	544e494f 	strbpl	r4, [lr], #-2383	; 0x94f
    122c:	64417700 	strbvs	r7, [r1], #-1792	; 0x700
    1230:	47007264 	strmi	r7, [r0, -r4, ror #4]
    1234:	50457465 	subpl	r7, r5, r5, ror #8
    1238:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    123c:	43306675 	teqmi	r0, #122683392	; 0x7500000
    1240:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1244:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1248:	44444144 	strbmi	r4, [r4], #-324	; 0x144
    124c:	64700052 	ldrbtvs	r0, [r0], #-82	; 0x52
    1250:	67655277 			; <UNDEFINED> instruction: 0x67655277
    1254:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1258:	6f435045 	svcvs	0x00435045
    125c:	52746e75 	rsbspl	r6, r4, #1872	; 0x750
    1260:	67655278 			; <UNDEFINED> instruction: 0x67655278
    1264:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1268:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
    126c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1270:	54620074 	strbtpl	r0, [r2], #-116	; 0x74
    1274:	00706d65 	rsbseq	r6, r0, r5, ror #26
    1278:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    127c:	0052544e 	subseq	r5, r2, lr, asr #8
    1280:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
    1284:	4c424154 	stfmie	f4, [r2], {84}	; 0x54
    1288:	65470045 	strbvs	r0, [r7, #-69]	; 0x45
    128c:	54504574 	ldrbpl	r4, [r0], #-1396	; 0x574
    1290:	756f4378 	strbvc	r4, [pc, #-888]!	; f20 <__Stack_Size+0xb20>
    1294:	4300746e 	movwmi	r7, #1134	; 0x46e
    1298:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    129c:	435f5045 	cmpmi	pc, #69	; 0x45
    12a0:	545f5254 	ldrbpl	r5, [pc], #-596	; 12a8 <__Stack_Size+0xea8>
    12a4:	65470058 	strbvs	r0, [r7, #-88]	; 0x58
    12a8:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    12ac:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    12b0:	6f433166 	svcvs	0x00433166
    12b4:	00746e75 	rsbseq	r6, r4, r5, ror lr
    12b8:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    12bc:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    12c0:	30667542 	rsbcc	r7, r6, r2, asr #10
    12c4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    12c8:	42770074 	rsbsmi	r0, r7, #116	; 0x74
    12cc:	41306675 	teqmi	r0, r5, ror r6
    12d0:	00726464 	rsbseq	r6, r2, r4, ror #8
    12d4:	5f746553 	svcpl	0x00746553
    12d8:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    12dc:	4f5f7375 	svcmi	0x005f7375
    12e0:	47007475 	smlsdxmi	r0, r5, r4, r7
    12e4:	4e467465 	cdpmi	4, 4, cr7, cr6, cr5, {3}
    12e8:	65470052 	strbvs	r0, [r7, #-82]	; 0x52
    12ec:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    12f0:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    12f4:	64413066 	strbvs	r3, [r1], #-102	; 0x66
    12f8:	45007264 	strmi	r7, [r0, #-612]	; 0x264
    12fc:	6f70646e 	svcvs	0x0070646e
    1300:	5f746e69 	svcpl	0x00746e69
    1304:	474f5444 	strbmi	r5, [pc, -r4, asr #8]
    1308:	6174535f 	cmnvs	r4, pc, asr r3
    130c:	00737574 	rsbseq	r7, r3, r4, ror r5
    1310:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1314:	41785450 	cmnmi	r8, r0, asr r4
    1318:	00726464 	rsbseq	r6, r2, r4, ror #8
    131c:	61656c43 	cmnvs	r5, r3, asr #24
    1320:	4f544472 	svcmi	0x00544472
    1324:	58545f47 	ldmdapl	r4, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    1328:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    132c:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    1330:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1334:	62007375 	andvs	r7, r0, #-738197503	; 0xd4000001
    1338:	754e7045 	strbvc	r7, [lr, #-69]	; 0x45
    133c:	6553006d 	ldrbvs	r0, [r3, #-109]	; 0x6d
    1340:	444e4574 	strbmi	r4, [lr], #-1396	; 0x574
    1344:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
    1348:	65530054 	ldrbvs	r0, [r3, #-84]	; 0x54
    134c:	52504574 	subspl	r4, r0, #116, 10	; 0x1d000000
    1350:	64644178 	strbtvs	r4, [r4], #-376	; 0x178
    1354:	65530072 	ldrbvs	r0, [r3, #-114]	; 0x72
    1358:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    135c:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    1360:	6f433166 	svcvs	0x00433166
    1364:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1368:	5f525443 	svcpl	0x00525443
    136c:	53005048 	movwpl	r5, #72	; 0x48
    1370:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1374:	72505f30 	subsvc	r5, r0, #48, 30	; 0xc0
    1378:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    137c:	61530073 	cmpvs	r3, r3, ror r0
    1380:	53526576 	cmppl	r2, #494927872	; 0x1d800000
    1384:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    1388:	76615300 	strbtvc	r5, [r1], -r0, lsl #6
    138c:	74535465 	ldrbvc	r5, [r3], #-1125	; 0x465
    1390:	00657461 	rsbeq	r7, r5, r1, ror #8
    1394:	56504577 			; <UNDEFINED> instruction: 0x56504577
    1398:	75006c61 	strvc	r6, [r0, #-3169]	; 0xc61
    139c:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    13a0:	752f6269 	strvc	r6, [pc, #-617]!	; 113f <__Stack_Size+0xd3f>
    13a4:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    13a8:	632e746e 	teqvs	lr, #1845493760	; 0x6e000000
    13ac:	306e4900 	rsbcc	r4, lr, r0, lsl #18
    13b0:	6f72505f 	svcvs	0x0072505f
    13b4:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    13b8:	74754f00 	ldrbtvc	r4, [r5], #-3840	; 0xf00
    13bc:	72505f30 	subsvc	r5, r0, #48, 30	; 0xc0
    13c0:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    13c4:	50450073 	subpl	r0, r5, r3, ror r0
    13c8:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xe69
    13cc:	61530078 	cmpvs	r3, r8, ror r0
    13d0:	74536576 	ldrbvc	r6, [r3], #-1398	; 0x576
    13d4:	00657461 	rsbeq	r7, r5, r1, ror #8
    13d8:	5f627375 	svcpl	0x00627375
    13dc:	2f62696c 	svccs	0x0062696c
    13e0:	5f627375 	svcpl	0x00627375
    13e4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    13e8:	7000632e 	andvc	r6, r0, lr, lsr #6
    13ec:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    13f0:	6174535f 	cmnvs	r4, pc, asr r3
    13f4:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    13f8:	65525f64 	ldrbvs	r5, [r2, #-3940]	; 0xf64
    13fc:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    1400:	44007374 	strmi	r7, [r0], #-884	; 0x374
    1404:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    1408:	6e495f65 	cdpvs	15, 4, cr5, cr9, cr5, {3}
    140c:	75006f66 	strvc	r6, [r0, #-3942]	; 0xf66
    1410:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    1414:	752f6269 	strvc	r6, [pc, #-617]!	; 11b3 <__Stack_Size+0xdb3>
    1418:	635f6273 	cmpvs	pc, #805306375	; 0x30000007
    141c:	2e65726f 	cdpcs	2, 6, cr7, cr5, cr15, {3}
    1420:	4e450063 	cdpmi	0, 4, cr0, cr5, cr3, {3}
    1424:	494f5044 	stmdbmi	pc, {r2, r6, ip, lr}^	; <UNPREDICTABLE>
    1428:	535f544e 	cmppl	pc, #1308622848	; 0x4e000000
    142c:	4c4c4154 	stfmie	f4, [ip], {84}	; 0x54
    1430:	73655200 	cmnvc	r5, #0, 4
    1434:	00746c75 	rsbseq	r6, r4, r5, ror ip
    1438:	74736f50 	ldrbtvc	r6, [r3], #-3920	; 0xf50
    143c:	72505f30 	subsvc	r5, r0, #48, 30	; 0xc0
    1440:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    1444:	61440073 	hvcvs	16387	; 0x4003
    1448:	75426174 	strbvc	r6, [r2, #-372]	; 0x174
    144c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1450:	73655200 	cmnvc	r5, #0, 4
    1454:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0x265
    1458:	74530064 	ldrbvc	r0, [r3], #-100	; 0x64
    145c:	61646e61 	cmnvs	r4, r1, ror #28
    1460:	535f6472 	cmppl	pc, #1912602624	; 0x72000000
    1464:	6f437465 	svcvs	0x00437465
    1468:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    146c:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
    1470:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1474:	61746144 	cmnvs	r4, r4, asr #2
    1478:	67617453 			; <UNDEFINED> instruction: 0x67617453
    147c:	006e4965 	rsbeq	r4, lr, r5, ror #18
    1480:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
    1484:	525f4543 	subspl	r4, pc, #281018368	; 0x10c00000
    1488:	544f4d45 	strbpl	r4, [pc], #-3397	; 1490 <__Stack_Size+0x1090>
    148c:	41575f45 	cmpmi	r7, r5, asr #30
    1490:	5055454b 	subspl	r4, r5, fp, asr #10
    1494:	41545300 	cmpmi	r4, r0, lsl #6
    1498:	44454c4c 	strbmi	r4, [r5], #-3148	; 0xc4c
    149c:	70795400 	rsbsvc	r5, r9, r0, lsl #8
    14a0:	65525f65 	ldrbvs	r5, [r2, #-3941]	; 0xf65
    14a4:	78650063 	stmdavc	r5!, {r0, r1, r5, r6}^
    14a8:	4e5f7469 	cdpmi	4, 5, cr7, cr15, cr9, {3}
    14ac:	7461446f 	strbtvc	r4, [r1], #-1135	; 0x46f
    14b0:	65535f61 	ldrbvs	r5, [r3, #-3937]	; 0xf61
    14b4:	30707574 	rsbscc	r7, r0, r4, ror r5
    14b8:	61567700 	cmpvs	r6, r0, lsl #14
    14bc:	3165756c 	cmncc	r5, ip, ror #10
    14c0:	56454400 	strbpl	r4, [r5], -r0, lsl #8
    14c4:	5f454349 	svcpl	0x00454349
    14c8:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    14cc:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
    14d0:	5300524f 	movwpl	r5, #591	; 0x24f
    14d4:	4e495254 	mcrmi	2, 2, r5, cr9, cr4, {2}
    14d8:	45445f47 	strbmi	r5, [r4, #-3911]	; 0xf47
    14dc:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    14e0:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    14e4:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
    14e8:	506f5472 	rsbpl	r5, pc, r2, ror r4	; <UNPREDICTABLE>
    14ec:	7542414d 	strbvc	r4, [r2, #-333]	; 0x14d
    14f0:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    14f4:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
    14f8:	76617300 	strbtvc	r7, [r1], -r0, lsl #6
    14fc:	4c725f65 	ldclmi	15, cr5, [r2], #-404	; 0xfffffe6c
    1500:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    1504:	414c0068 	cmpmi	ip, r8, rrx
    1508:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    150c:	41445f4e 	cmpmi	r4, lr, asr #30
    1510:	4e004154 	mcrmi	1, 0, r4, cr0, cr4, {2}
    1514:	505f504f 	subspl	r5, pc, pc, asr #32
    1518:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
    151c:	53007373 	movwpl	r7, #883	; 0x373
    1520:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
    1524:	5f647261 	svcpl	0x00647261
    1528:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    152c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1530:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
    1534:	70784500 	rsbsvc	r4, r8, r0, lsl #10
    1538:	5f746365 	svcpl	0x00746365
    153c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1540:	4f5f7375 	svcmi	0x005f7375
    1544:	50007475 	andpl	r7, r0, r5, ror r4
    1548:	45535541 	ldrbmi	r5, [r3, #-1345]	; 0x541
    154c:	71655200 	cmnvc	r5, r0, lsl #4
    1550:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
    1554:	47006f4e 	strmi	r6, [r0, -lr, asr #30]
    1558:	495f5445 	ldmdbmi	pc, {r0, r2, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    155c:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    1560:	45434146 	strbmi	r4, [r3, #-326]	; 0x146
    1564:	61745300 	cmnvs	r4, r0, lsl #6
    1568:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    156c:	65535f64 	ldrbvs	r5, [r3, #-3940]	; 0xf64
    1570:	646e4574 	strbtvs	r4, [lr], #-1396	; 0x574
    1574:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
    1578:	61654674 	smcvs	21604	; 0x5464
    157c:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    1580:	54454700 	strbpl	r4, [r5], #-1792	; 0x700
    1584:	4154535f 	cmpmi	r4, pc, asr r3
    1588:	00535554 	subseq	r5, r3, r4, asr r5
    158c:	5f544553 	svcpl	0x00544553
    1590:	54414546 	strbpl	r4, [r1], #-1350	; 0x546
    1594:	00455255 	subeq	r5, r5, r5, asr r2
    1598:	61746144 	cmnvs	r4, r4, asr #2
    159c:	6c754d5f 	ldclvs	13, cr4, [r5], #-380	; 0xfffffe84
    15a0:	78614d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
    15a4:	6b636150 	blvs	18d9aec <__Stack_Size+0x18d96ec>
    15a8:	69537465 	ldmdbvs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    15ac:	7000657a 	andvc	r6, r0, sl, ror r5
    15b0:	00766544 	rsbseq	r6, r6, r4, asr #10
    15b4:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    15b8:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    15bc:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    15c0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    15c4:	65466563 	strbvs	r6, [r6, #-1379]	; 0x563
    15c8:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    15cc:	44700065 	ldrbtmi	r0, [r0], #-101	; 0x65
    15d0:	00637365 	rsbeq	r7, r3, r5, ror #6
    15d4:	434e5953 	movtmi	r5, #59731	; 0xe953
    15d8:	52465f48 	subpl	r5, r6, #72, 30	; 0x120
    15dc:	00454d41 	subeq	r4, r5, r1, asr #26
    15e0:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    15e4:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    15e8:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    15ec:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    15f0:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    15f4:	45530065 	ldrbmi	r0, [r3, #-101]	; 0x65
    15f8:	45445f54 	strbmi	r5, [r4, #-3924]	; 0xf54
    15fc:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    1600:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    1604:	54455300 	strbpl	r5, [r5], #-768	; 0x300
    1608:	544e495f 	strbpl	r4, [lr], #-2399	; 0x95f
    160c:	41465245 	cmpmi	r6, r5, asr #4
    1610:	5f004543 	svcpl	0x00004543
    1614:	54414546 	strbpl	r4, [r1], #-1350	; 0x546
    1618:	5f455255 	svcpl	0x00455255
    161c:	454c4553 	strbmi	r4, [ip, #-1363]	; 0x553
    1620:	524f5443 	subpl	r5, pc, #1124073472	; 0x43000000
    1624:	61745300 	cmnvs	r4, r0, lsl #6
    1628:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    162c:	65475f64 	strbvs	r5, [r7, #-3940]	; 0xf64
    1630:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    1634:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
    1638:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    163c:	53006e6f 	movwpl	r6, #3695	; 0xe6f
    1640:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
    1644:	5f647261 	svcpl	0x00647261
    1648:	61656c43 	cmnvs	r5, r3, asr #24
    164c:	61654672 	smcvs	21602	; 0x5462
    1650:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    1654:	54454700 	strbpl	r4, [r5], #-1792	; 0x700
    1658:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
    165c:	55474946 	strbpl	r4, [r7, #-2374]	; 0x946
    1660:	49544152 	ldmdbmi	r4, {r1, r4, r6, r8, lr}^
    1664:	5f004e4f 	svcpl	0x00004e4f
    1668:	544e4f43 	strbpl	r4, [lr], #-3907	; 0xf43
    166c:	5f4c4f52 	svcpl	0x004c4f52
    1670:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
    1674:	445f0045 	ldrbmi	r0, [pc], #-69	; 167c <__Stack_Size+0x127c>
    1678:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    167c:	4f545049 	svcmi	0x00545049
    1680:	59545f52 	ldmdbpl	r4, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    1684:	53004550 	movwpl	r4, #1360	; 0x550
    1688:	49545445 	ldmdbmi	r4, {r0, r2, r6, sl, ip, lr}^
    168c:	555f474e 	ldrbpl	r4, [pc, #-1870]	; f46 <__Stack_Size+0xb46>
    1690:	4d500050 	ldclmi	0, cr0, [r0, #-320]	; 0xfffffec0
    1694:	556f5441 	strbpl	r5, [pc, #-1089]!	; 125b <__Stack_Size+0xe5b>
    1698:	42726573 	rsbsmi	r6, r2, #482344960	; 0x1cc00000
    169c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    16a0:	706f4372 	rsbvc	r4, pc, r2, ror r3	; <UNPREDICTABLE>
    16a4:	45530079 	ldrbmi	r0, [r3, #-121]	; 0x79
    16a8:	4f435f54 	svcmi	0x00435f54
    16ac:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
    16b0:	54415255 	strbpl	r5, [r1], #-597	; 0x255
    16b4:	004e4f49 	subeq	r4, lr, r9, asr #30
    16b8:	54494157 	strbpl	r4, [r9], #-343	; 0x157
    16bc:	4154535f 	cmpmi	r4, pc, asr r3
    16c0:	5f535554 	svcpl	0x00535554
    16c4:	0054554f 	subseq	r5, r4, pc, asr #10
    16c8:	41544f54 	cmpmi	r4, r4, asr pc
    16cc:	52735f4c 	rsbspl	r5, r3, #76, 30	; 0x130
    16d0:	45555145 	ldrbmi	r5, [r5, #-325]	; 0x145
    16d4:	49005453 	stmdbmi	r0, {r0, r1, r4, r6, sl, ip, lr}
    16d8:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    16dc:	45434146 	strbmi	r4, [r3, #-326]	; 0x146
    16e0:	5345445f 	movtpl	r4, #21599	; 0x545f
    16e4:	50495243 	subpl	r5, r9, r3, asr #4
    16e8:	00524f54 	subseq	r4, r2, r4, asr pc
    16ec:	65766173 	ldrbvs	r6, [r6, #-371]!	; 0x173
    16f0:	654c775f 	strbvs	r7, [ip, #-1887]	; 0x75f
    16f4:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    16f8:	61745300 	cmnvs	r4, r0, lsl #6
    16fc:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    1700:	65475f64 	strbvs	r5, [r7, #-3940]	; 0xf64
    1704:	61745374 	cmnvs	r4, r4, ror r3
    1708:	00737574 	rsbseq	r7, r3, r4, ror r5
    170c:	50444e45 	subpl	r4, r4, r5, asr #28
    1710:	544e494f 	strbpl	r4, [lr], #-2383	; 0x94f
    1714:	5345445f 	movtpl	r4, #21599	; 0x545f
    1718:	50495243 	subpl	r5, r9, r3, asr #4
    171c:	00524f54 	subseq	r4, r2, r4, asr pc
    1720:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    1724:	445f4749 	ldrbmi	r4, [pc], #-1865	; 172c <__Stack_Size+0x132c>
    1728:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    172c:	4f545049 	svcmi	0x00545049
    1730:	42700052 	rsbsmi	r0, r0, #82	; 0x52
    1734:	70006675 	andvc	r6, r0, r5, ror r6
    1738:	6e695045 	cdpvs	0, 6, cr5, cr9, cr5, {2}
    173c:	53006f66 	movwpl	r6, #3942	; 0xf66
    1740:	415f5445 	cmpmi	pc, r5, asr #8
    1744:	45524444 	ldrbmi	r4, [r2, #-1092]	; 0x444
    1748:	52005353 	andpl	r5, r0, #1275068417	; 0x4c000001
    174c:	74616c65 	strbtvc	r6, [r1], #-3173	; 0xc65
    1750:	455f6465 	ldrbmi	r6, [pc, #-1125]	; 12f3 <__Stack_Size+0xef3>
    1754:	6f70646e 	svcvs	0x0070646e
    1758:	00746e69 	rsbseq	r6, r4, r9, ror #28
    175c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1760:	6e497375 	mcrvs	3, 2, r7, cr9, cr5, {3}
    1764:	77006f66 	strvc	r6, [r0, -r6, ror #30]
    1768:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xe49
    176c:	47003078 	smlsdxmi	r0, r8, r0, r3
    1770:	445f5445 	ldrbmi	r5, [pc], #-1093	; 1778 <__Stack_Size+0x1378>
    1774:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    1778:	4f545049 	svcmi	0x00545049
    177c:	61440052 	qdaddvs	r0, r2, r4
    1780:	74536174 	ldrbvc	r6, [r3], #-372	; 0x174
    1784:	4f656761 	svcmi	0x00656761
    1788:	57007475 	smlsdxpl	r0, r5, r4, r7
    178c:	5f544941 	svcpl	0x00544941
    1790:	55544553 	ldrbpl	r4, [r4, #-1363]	; 0x553
    1794:	65520050 	ldrbvs	r0, [r2, #-80]	; 0x50
    1798:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    179c:	6f4e5f74 	svcvs	0x004e5f74
    17a0:	49415700 	stmdbmi	r1, {r8, r9, sl, ip, lr}^
    17a4:	54535f54 	ldrbpl	r5, [r3], #-3924	; 0xf54
    17a8:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    17ac:	004e495f 	subeq	r4, lr, pc, asr r9
    17b0:	41454c43 	cmpmi	r5, r3, asr #24
    17b4:	45465f52 	strbmi	r5, [r6, #-3922]	; 0xf52
    17b8:	52555441 	subspl	r5, r5, #1090519040	; 0x41000000
    17bc:	414c0045 	cmpmi	ip, r5, asr #32
    17c0:	4f5f5453 	svcmi	0x005f5453
    17c4:	445f5455 	ldrbmi	r5, [pc], #-1109	; 17cc <__Stack_Size+0x13cc>
    17c8:	00415441 	subeq	r5, r1, r1, asr #8
    17cc:	5f627375 	svcpl	0x00627375
    17d0:	2f62696c 	svccs	0x0062696c
    17d4:	5f627375 	svcpl	0x00627375
    17d8:	2e6d656d 	cdpcs	5, 6, cr6, cr13, cr13, {3}
    17dc:	4e770063 	cdpmi	0, 7, cr0, cr7, cr3, {3}
    17e0:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0x942
    17e4:	62700073 	rsbsvs	r0, r0, #115	; 0x73
    17e8:	42727355 	rsbsmi	r7, r2, #1409286145	; 0x54000001
    17ec:	74006675 	strvc	r6, [r0], #-1653	; 0x675
    17f0:	31706d65 	cmncc	r0, r5, ror #26
    17f4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    17f8:	77003270 	smlsdxvc	r0, r0, r2, r3
    17fc:	42414d50 	submi	r4, r1, #80, 26	; 0x1400
    1800:	64416675 	strbvs	r6, [r1], #-1653	; 0x675
    1804:	70007264 	andvc	r7, r0, r4, ror #4
    1808:	61567764 	cmpvs	r6, r4, ror #14
    180c:	Address 0x000000000000180c is out of bounds.


Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	08000142 	stmdaeq	r0, {r1, r6, r8}
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	0800014a 	stmdaeq	r0, {r1, r3, r6, r8}
       8:	4a500001 	bmi	1400014 <__Stack_Size+0x13ffc14>
       c:	4c080001 	stcmi	0, cr0, [r8], {1}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	04080001 	streq	r0, [r8], #-1
      14:	5001f300 	andpl	pc, r1, r0, lsl #6
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      1c:	00000000 	andeq	r0, r0, r0
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	0001bc00 	andeq	fp, r1, r0, lsl #24
      24:	0001c008 	andeq	ip, r1, r8
      28:	71000508 	tstvc	r0, r8, lsl #10
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	9f274000 	svcls	0x00274000
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	080001c0 	stmdaeq	r0, {r6, r7, r8}
      34:	080001c4 	stmdaeq	r0, {r2, r6, r7, r8}
      38:	00710007 	rsbseq	r0, r1, r7

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	27402740 	strbcs	r2, [r0, -r0, asr #14]

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	0001c49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	0001c608 	andeq	ip, r1, r8, lsl #12
      48:	73000808 	movwvc	r0, #2056	; 0x808
      4c:	27400600 	strbcs	r0, [r0, -r0, lsl #12]

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	c69f2740 	ldrgt	r2, [pc], r0, asr #14
      54:	e5080001 	str	r0, [r8, #-1]
      58:	0b080001 	bleq	200064 <__Stack_Size+0x1ffc64>
      5c:	5c000c00 	stcpl	12, cr0, [r0], {-0}
      60:	40064000 	andmi	r4, r6, r0
      64:	9f274027 	svcls	0x00274027
	...
      70:	08000228 	stmdaeq	r0, {r3, r5, r9}
      74:	0800023f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r9}
      78:	3f500001 	svccc	0x00500001
      7c:	88080002 	stmdahi	r8, {r1}
      80:	04080002 	streq	r0, [r8], #-2
      84:	5001f300 	andpl	pc, r1, r0, lsl #6
      88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      8c:	00000000 	andeq	r0, r0, r0
      90:	00022800 	andeq	r2, r2, r0, lsl #16
      94:	00025208 	andeq	r5, r2, r8, lsl #4
      98:	30000208 	andcc	r0, r0, r8, lsl #4
      9c:	00025a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
      a0:	00026008 	andeq	r6, r2, r8
      a4:	30000208 	andcc	r0, r0, r8, lsl #4
      a8:	0002609f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
      ac:	00026b08 	andeq	r6, r2, r8, lsl #22
      b0:	53000108 	movwpl	r0, #264	; 0x108
      b4:	08000270 	stmdaeq	r0, {r4, r5, r6, r9}
      b8:	08000288 	stmdaeq	r0, {r3, r7, r9}
      bc:	9f300002 	svcls	0x00300002
	...
      c8:	08000288 	stmdaeq	r0, {r3, r7, r9}
      cc:	0800028d 	stmdaeq	r0, {r0, r2, r3, r7, r9}
      d0:	8d500001 	ldclhi	0, cr0, [r0, #-4]
      d4:	94080002 	strls	r0, [r8], #-2
      d8:	04080002 	streq	r0, [r8], #-2
      dc:	5001f300 	andpl	pc, r1, r0, lsl #6
      e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      e4:	00000000 	andeq	r0, r0, r0
      e8:	00029400 	andeq	r9, r2, r0, lsl #8
      ec:	00029908 	andeq	r9, r2, r8, lsl #18
      f0:	50000108 	andpl	r0, r0, r8, lsl #2
      f4:	08000299 	stmdaeq	r0, {r0, r3, r4, r7, r9}
      f8:	080002a0 	stmdaeq	r0, {r5, r7, r9}
      fc:	01f30004 	mvnseq	r0, r4
     100:	00009f50 	andeq	r9, r0, r0, asr pc
     104:	00000000 	andeq	r0, r0, r0
     108:	02a00000 	adceq	r0, r0, #0
     10c:	02b30800 	adcseq	r0, r3, #0, 16
     110:	00010800 	andeq	r0, r1, r0, lsl #16
     114:	0002b350 	andeq	fp, r2, r0, asr r3
     118:	0002b408 	andeq	fp, r2, r8, lsl #8
     11c:	f3000408 	vshl.u8	d0, d8, d0
     120:	b49f5001 	ldrlt	r5, [pc], #1	; 128 <_Minimum_Stack_Size+0x28>
     124:	b6080002 	strlt	r0, [r8], -r2
     128:	01080002 	tsteq	r8, r2
     12c:	02b65000 	adcseq	r5, r6, #0
     130:	02c00800 	sbceq	r0, r0, #0, 16
     134:	00040800 	andeq	r0, r4, r0, lsl #16
     138:	9f5001f3 	svcls	0x005001f3
	...
     144:	080002c0 	stmdaeq	r0, {r6, r7, r9}
     148:	080002c5 	stmdaeq	r0, {r0, r2, r6, r7, r9}
     14c:	c5500001 	ldrbgt	r0, [r0, #-1]
     150:	cc080002 	stcgt	0, cr0, [r8], {2}
     154:	04080002 	streq	r0, [r8], #-2
     158:	5001f300 	andpl	pc, r1, r0, lsl #6
     15c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     160:	00000000 	andeq	r0, r0, r0
     164:	0002cc00 	andeq	ip, r2, r0, lsl #24
     168:	0002df08 	andeq	sp, r2, r8, lsl #30
     16c:	50000108 	andpl	r0, r0, r8, lsl #2
     170:	080002df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r9}
     174:	080002ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9}
     178:	01f30004 	mvnseq	r0, r4
     17c:	02ea9f50 	rsceq	r9, sl, #80, 30	; 0x140
     180:	02ec0800 	rsceq	r0, ip, #0, 16
     184:	00010800 	andeq	r0, r1, r0, lsl #16
     188:	0002ec50 	andeq	lr, r2, r0, asr ip
     18c:	0002f408 	andeq	pc, r2, r8, lsl #8
     190:	f3000408 	vshl.u8	d0, d8, d0
     194:	009f5001 	addseq	r5, pc, r1
     198:	00000000 	andeq	r0, r0, r0
     19c:	dc000000 	stcle	0, cr0, [r0], {-0}
     1a0:	ea080002 	b	2001b0 <__Stack_Size+0x1ffdb0>
     1a4:	04080002 	streq	r0, [r8], #-2
     1a8:	5001f300 	andpl	pc, r1, r0, lsl #6
     1ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     1b0:	00000000 	andeq	r0, r0, r0
     1b4:	00037600 	andeq	r7, r3, r0, lsl #12
     1b8:	00037a08 	andeq	r7, r3, r8, lsl #20
     1bc:	72000508 	andvc	r0, r0, #8, 10	; 0x2000000
     1c0:	9f213c00 	svcls	0x00213c00
	...
     1cc:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
     1d0:	080003c1 	stmdaeq	r0, {r0, r6, r7, r8, r9}
     1d4:	c1500001 	cmpgt	r0, r1
     1d8:	c4080003 	strgt	r0, [r8], #-3
     1dc:	04080003 	streq	r0, [r8], #-3
     1e0:	5001f300 	andpl	pc, r1, r0, lsl #6
     1e4:	0003c49f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
     1e8:	0003c708 	andeq	ip, r3, r8, lsl #14
     1ec:	50000108 	andpl	r0, r0, r8, lsl #2
     1f0:	080003c7 	stmdaeq	r0, {r0, r1, r2, r6, r7, r8, r9}
     1f4:	080003cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9}
     1f8:	01f30004 	mvnseq	r0, r4
     1fc:	03cc9f50 	biceq	r9, ip, #80, 30	; 0x140
     200:	041a0800 	ldreq	r0, [sl], #-2048	; 0x800
     204:	00010800 	andeq	r0, r1, r0, lsl #16
     208:	00041a50 	andeq	r1, r4, r0, asr sl
     20c:	00042808 	andeq	r2, r4, r8, lsl #16
     210:	f3000408 	vshl.u8	d0, d8, d0
     214:	009f5001 	addseq	r5, pc, r1
     218:	00000000 	andeq	r0, r0, r0
     21c:	ea000000 	b	224 <_Minimum_Stack_Size+0x124>
     220:	ee080003 	cdp	0, 0, cr0, cr8, cr3, {0}
     224:	05080003 	streq	r0, [r8, #-3]
     228:	40007200 	andmi	r7, r0, r0, lsl #4
     22c:	040e9f21 	streq	r9, [lr], #-3873	; 0xf21
     230:	04140800 	ldreq	r0, [r4], #-2048	; 0x800
     234:	00060800 	andeq	r0, r6, r0, lsl #16
     238:	ef090071 	svc	0x00090071
     23c:	00009f1a 	andeq	r9, r0, sl, lsl pc
     240:	00000000 	andeq	r0, r0, r0
     244:	05ac0000 	streq	r0, [ip, #0]!
     248:	05f80800 	ldrbeq	r0, [r8, #2048]!	; 0x800
     24c:	00020800 	andeq	r0, r2, r0, lsl #16
     250:	00009f30 	andeq	r9, r0, r0, lsr pc
     254:	00000000 	andeq	r0, r0, r0
     258:	05ac0000 	streq	r0, [ip, #0]!
     25c:	05ce0800 	strbeq	r0, [lr, #2048]	; 0x800
     260:	00020800 	andeq	r0, r2, r0, lsl #16
     264:	05ce9f30 	strbeq	r9, [lr, #3888]	; 0xf30
     268:	05ea0800 	strbeq	r0, [sl, #2048]!	; 0x800
     26c:	00020800 	andeq	r0, r2, r0, lsl #16
     270:	05f89f31 	ldrbeq	r9, [r8, #3889]!	; 0xf31
     274:	06240800 	strteq	r0, [r4], -r0, lsl #16
     278:	00020800 	andeq	r0, r2, r0, lsl #16
     27c:	00009f31 	andeq	r9, r0, r1, lsr pc
     280:	00000000 	andeq	r0, r0, r0
     284:	06240000 	strteq	r0, [r4], -r0
     288:	062a0800 	strteq	r0, [sl], -r0, lsl #16
     28c:	00010800 	andeq	r0, r1, r0, lsl #16
     290:	00062a51 	andeq	r2, r6, r1, asr sl
     294:	00063a08 	andeq	r3, r6, r8, lsl #20
     298:	f3000408 	vshl.u8	d0, d8, d0
     29c:	009f5101 	addseq	r5, pc, r1, lsl #2
     2a0:	00000000 	andeq	r0, r0, r0
     2a4:	24000000 	strcs	r0, [r0], #-0
     2a8:	24080006 	strcs	r0, [r8], #-6
     2ac:	01080006 	tsteq	r8, r6
     2b0:	06245200 	strteq	r5, [r4], -r0, lsl #4
     2b4:	062e0800 	strteq	r0, [lr], -r0, lsl #16
     2b8:	00070800 	andeq	r0, r7, r0, lsl #16
     2bc:	24480072 	strbcs	r0, [r8], #-114	; 0x72
     2c0:	2e9f2930 	mrccs	9, 4, r2, cr15, cr0, {1}
     2c4:	3a080006 	bcc	2002e4 <__Stack_Size+0x1ffee4>
     2c8:	08080006 	stmdaeq	r8, {r1, r2}
     2cc:	5201f300 	andpl	pc, r1, #0, 6
     2d0:	29302448 	ldmdbcs	r0!, {r3, r6, sl, sp}
     2d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     2e4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     2f0:	01f30004 	mvnseq	r0, r4
     2f4:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     304:	00010000 	andeq	r0, r1, r0
     308:	00000051 	andeq	r0, r0, r1, asr r0
     30c:	00000000 	andeq	r0, r0, r0
     310:	f3000400 	vshl.u8	d0, d0, d0
     314:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     324:	01000000 	mrseq	r0, (UNDEF: 0)
     328:	00005000 	andeq	r5, r0, r0
     32c:	00000000 	andeq	r0, r0, r0
     330:	00010000 	andeq	r0, r1, r0
     334:	00000058 	andeq	r0, r0, r8, asr r0
	...
     344:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     350:	01f30004 	mvnseq	r0, r4
     354:	00009f51 	andeq	r9, r0, r1, asr pc
	...
     364:	00010000 	andeq	r0, r1, r0
     368:	00000052 	andeq	r0, r0, r2, asr r0
     36c:	00000000 	andeq	r0, r0, r0
     370:	f3000400 	vshl.u8	d0, d0, d0
     374:	009f5201 	addseq	r5, pc, r1, lsl #4
     378:	00000000 	andeq	r0, r0, r0
     37c:	03000000 	movweq	r0, #0
     380:	9f7f7400 	svcls	0x007f7400
	...
     38c:	00740003 	rsbseq	r0, r4, r3
     390:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     394:	00000000 	andeq	r0, r0, r0
     398:	74000300 	strvc	r0, [r0], #-768	; 0x300
     39c:	00009f7f 	andeq	r9, r0, pc, ror pc
	...
     3ac:	00010000 	andeq	r0, r1, r0
     3b0:	00000053 	andeq	r0, r0, r3, asr r0
     3b4:	00000000 	andeq	r0, r0, r0
     3b8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     3cc:	00550001 	subseq	r0, r5, r1
     3d0:	00000000 	andeq	r0, r0, r0
     3d4:	01000000 	mrseq	r0, (UNDEF: 0)
     3d8:	00005600 	andeq	r5, r0, r0, lsl #12
     3dc:	00000000 	andeq	r0, r0, r0
     3e0:	00010000 	andeq	r0, r1, r0
     3e4:	00000055 	andeq	r0, r0, r5, asr r0
     3e8:	00000000 	andeq	r0, r0, r0
     3ec:	0006f600 	andeq	pc, r6, r0, lsl #12
     3f0:	0006fc08 	andeq	pc, r6, r8, lsl #24
     3f4:	52000108 	andpl	r0, r0, #8, 2
	...
     400:	08000708 	stmdaeq	r0, {r3, r8, r9, sl}
     404:	0800070c 	stmdaeq	r0, {r2, r3, r8, r9, sl}
     408:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     40c:	1c080007 	stcne	0, cr0, [r8], {7}
     410:	04080007 	streq	r0, [r8], #-7
     414:	5001f300 	andpl	pc, r1, r0, lsl #6
     418:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     41c:	00000000 	andeq	r0, r0, r0
     420:	00070a00 	andeq	r0, r7, r0, lsl #20
     424:	00071208 	andeq	r1, r7, r8, lsl #4
     428:	53000108 	movwpl	r0, #264	; 0x108
	...
     434:	0800071c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl}
     438:	0800072b 	stmdaeq	r0, {r0, r1, r3, r5, r8, r9, sl}
     43c:	2b500001 	blcs	1400448 <__Stack_Size+0x1400048>
     440:	34080007 	strcc	r0, [r8], #-7
     444:	04080007 	streq	r0, [r8], #-7
     448:	5001f300 	andpl	pc, r1, r0, lsl #6
     44c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     450:	00000000 	andeq	r0, r0, r0
     454:	00072200 	andeq	r2, r7, r0, lsl #4
     458:	00072b08 	andeq	r2, r7, r8, lsl #22
     45c:	53000108 	movwpl	r0, #264	; 0x108
	...
     468:	08000760 	stmdaeq	r0, {r5, r6, r8, r9, sl}
     46c:	0800078e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, sl}
     470:	9f300002 	svcls	0x00300002
     474:	0800078e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, sl}
     478:	0800079c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl}
     47c:	00540001 	subseq	r0, r4, r1
     480:	00000000 	andeq	r0, r0, r0
     484:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
     488:	b6080007 	strlt	r0, [r8], -r7
     48c:	02080007 	andeq	r0, r8, #7
     490:	b69f3000 	ldrlt	r3, [pc], r0
     494:	be080007 	cdplt	0, 0, cr0, cr8, cr7, {0}
     498:	01080007 	tsteq	r8, r7
     49c:	07be5300 	ldreq	r5, [lr, r0, lsl #6]!
     4a0:	07ca0800 	strbeq	r0, [sl, r0, lsl #16]
     4a4:	00010800 	andeq	r0, r1, r0, lsl #16
     4a8:	0007ca52 	andeq	ip, r7, r2, asr sl
     4ac:	0007ec08 	andeq	lr, r7, r8, lsl #24
     4b0:	54000108 	strpl	r0, [r0], #-264	; 0x108
     4b4:	080007ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl}
     4b8:	080007ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl}
     4bc:	00740006 	rsbseq	r0, r4, r6
     4c0:	9f1a0072 	svcls	0x001a0072
     4c4:	080007ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl}
     4c8:	080007f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl}
     4cc:	f0520001 			; <UNDEFINED> instruction: 0xf0520001
     4d0:	f4080007 	vst4.8	{d0-d3}, [r8], r7
     4d4:	12080007 	andne	r0, r8, #7
     4d8:	70ff0800 	rscsvc	r0, pc, r0, lsl #16
     4dc:	33019400 	movwcc	r9, #5120	; 0x1400
     4e0:	1aff081a 	bne	fffc2550 <BootRAM+0xef32cf1>
     4e4:	74242433 	strtvc	r2, [r4], #-1075	; 0x433
     4e8:	009f1a00 	addseq	r1, pc, r0, lsl #20
     4ec:	00000000 	andeq	r0, r0, r0
     4f0:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
     4f4:	e8080007 	stmda	r8, {r0, r1, r2}
     4f8:	02080007 	andeq	r0, r8, #7
     4fc:	e89f3000 	ldm	pc, {ip, sp}	; <UNPREDICTABLE>
     500:	ec080007 	stc	0, cr0, [r8], {7}
     504:	01080007 	tsteq	r8, r7
     508:	07ec5500 	strbeq	r5, [ip, r0, lsl #10]!
     50c:	07f00800 	ldrbeq	r0, [r0, r0, lsl #16]!
     510:	00010800 	andeq	r0, r1, r0, lsl #16
     514:	0007f051 	andeq	pc, r7, r1, asr r0	; <UNPREDICTABLE>
     518:	0007f808 	andeq	pc, r7, r8, lsl #16
     51c:	52000108 	andpl	r0, r0, #8, 2
	...
     528:	080007a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl}
     52c:	080007e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl}
     530:	9f300002 	svcls	0x00300002
     534:	080007e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl}
     538:	080007ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl}
     53c:	ee520001 	cdp	0, 5, cr0, cr2, cr1, {0}
     540:	f4080007 	vst4.8	{d0-d3}, [r8], r7
     544:	0f080007 	svceq	0x00080007
     548:	70ff0800 	rscsvc	r0, pc, r0, lsl #16
     54c:	33019400 	movwcc	r9, #5120	; 0x1400
     550:	1aff081a 	bne	fffc25c0 <BootRAM+0xef32d61>
     554:	9f242433 	svcls	0x00242433
	...
     560:	080007a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl}
     564:	080007b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl}
     568:	9f300002 	svcls	0x00300002
     56c:	080007b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl}
     570:	080007ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sl}
     574:	73340005 	teqvc	r4, #5
     578:	ba9f1c00 	blt	fe7c7580 <BootRAM+0xd737d21>
     57c:	be080007 	cdplt	0, 0, cr0, cr8, cr7, {0}
     580:	01080007 	tsteq	r8, r7
     584:	07be5200 	ldreq	r5, [lr, r0, lsl #4]!
     588:	07c60800 	strbeq	r0, [r6, r0, lsl #16]
     58c:	00050800 	andeq	r0, r5, r0, lsl #16
     590:	1c007334 	stcne	3, cr7, [r0], {52}	; 0x34
     594:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     598:	00000000 	andeq	r0, r0, r0
     59c:	0007a800 	andeq	sl, r7, r0, lsl #16
     5a0:	0007b608 	andeq	fp, r7, r8, lsl #12
     5a4:	3f000208 	svccc	0x00000208
     5a8:	0007b69f 	muleq	r7, pc, r6	; <UNPREDICTABLE>
     5ac:	0007c208 	andeq	ip, r7, r8, lsl #4
     5b0:	3f000508 	svccc	0x00000508
     5b4:	9f250073 	svcls	0x00250073
     5b8:	080007c2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sl}
     5bc:	080007c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl}
     5c0:	00540001 	subseq	r0, r4, r1
     5c4:	00000000 	andeq	r0, r0, r0
     5c8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     5cc:	45080008 	strmi	r0, [r8, #-8]
     5d0:	01080008 	tsteq	r8, r8
     5d4:	08455000 	stmdaeq	r5, {ip, lr}^
     5d8:	08580800 	ldmdaeq	r8, {fp}^
     5dc:	00010800 	andeq	r0, r1, r0, lsl #16
     5e0:	00085854 	andeq	r5, r8, r4, asr r8
     5e4:	00085b08 	andeq	r5, r8, r8, lsl #22
     5e8:	50000108 	andpl	r0, r0, r8, lsl #2
     5ec:	0800085b 	stmdaeq	r0, {r0, r1, r3, r4, r6, fp}
     5f0:	08000860 	stmdaeq	r0, {r5, r6, fp}
     5f4:	01f30004 	mvnseq	r0, r4
     5f8:	00009f50 	andeq	r9, r0, r0, asr pc
     5fc:	00000000 	andeq	r0, r0, r0
     600:	08740000 	ldmdaeq	r4!, {}^	; <UNPREDICTABLE>
     604:	089c0800 	ldmeq	ip, {fp}
     608:	00010800 	andeq	r0, r1, r0, lsl #16
     60c:	00089c50 	andeq	r9, r8, r0, asr ip
     610:	0008a808 	andeq	sl, r8, r8, lsl #16
     614:	f3000408 	vshl.u8	d0, d8, d0
     618:	009f5001 	addseq	r5, pc, r1
     61c:	00000000 	andeq	r0, r0, r0
     620:	7a000000 	bvc	628 <__Stack_Size+0x228>
     624:	98080008 	stmdals	r8, {r3}
     628:	02080008 	andeq	r0, r8, #8
     62c:	989f3200 	ldmls	pc, {r9, ip, sp}	; <UNPREDICTABLE>
     630:	a8080008 	stmdage	r8, {r3}
     634:	02080008 	andeq	r0, r8, #8
     638:	009f3000 	addseq	r3, pc, r0
	...
     648:	01000000 	mrseq	r0, (UNDEF: 0)
     64c:	00005000 	andeq	r5, r0, r0
     650:	00000000 	andeq	r0, r0, r0
     654:	00010000 	andeq	r0, r1, r0
     658:	00000055 	andeq	r0, r0, r5, asr r0
     65c:	00000000 	andeq	r0, r0, r0
     660:	f3000400 	vshl.u8	d0, d0, d0
     664:	009f5001 	addseq	r5, pc, r1
	...
     674:	01000000 	mrseq	r0, (UNDEF: 0)
     678:	00005100 	andeq	r5, r0, r0, lsl #2
     67c:	00000000 	andeq	r0, r0, r0
     680:	00040000 	andeq	r0, r4, r0
     684:	9f5101f3 	svcls	0x005101f3
	...
     690:	00540001 	subseq	r0, r4, r1
     694:	00000000 	andeq	r0, r0, r0
     698:	03000000 	movweq	r0, #0
     69c:	9f017400 	svcls	0x00017400
	...
     6a8:	00540001 	subseq	r0, r4, r1
     6ac:	00000000 	andeq	r0, r0, r0
     6b0:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
     6b4:	e2080008 	and	r0, r8, #8
     6b8:	01080008 	tsteq	r8, r8
     6bc:	08e25000 	stmiaeq	r2!, {ip, lr}^
     6c0:	08f40800 	ldmeq	r4!, {fp}^
     6c4:	00040800 	andeq	r0, r4, r0, lsl #16
     6c8:	9f5001f3 	svcls	0x005001f3
	...
     6d4:	080008b8 	stmdaeq	r0, {r3, r4, r5, r7, fp}
     6d8:	080008de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, fp}
     6dc:	de540001 	cdple	0, 5, cr0, cr4, cr1, {0}
     6e0:	f4080008 	vst4.8	{d0-d3}, [r8], r8
     6e4:	01080008 	tsteq	r8, r8
     6e8:	00005200 	andeq	r5, r0, r0, lsl #4
     6ec:	00000000 	andeq	r0, r0, r0
     6f0:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
     6f4:	091e0800 	ldmdbeq	lr, {fp}
     6f8:	00010800 	andeq	r0, r1, r0, lsl #16
     6fc:	00091e50 	andeq	r1, r9, r0, asr lr
     700:	00092208 	andeq	r2, r9, r8, lsl #4
     704:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     710:	0800091e 	stmdaeq	r0, {r1, r2, r3, r4, r8, fp}
     714:	08000922 	stmdaeq	r0, {r1, r5, r8, fp}
     718:	703f0007 	eorsvc	r0, pc, r7
     71c:	24243200 	strtcs	r3, [r4], #-512	; 0x200
     720:	0009269f 	muleq	r9, pc, r6	; <UNPREDICTABLE>
     724:	00092808 	andeq	r2, r9, r8, lsl #16
     728:	50000108 	andpl	r0, r0, r8, lsl #2
     72c:	08000928 	stmdaeq	r0, {r3, r5, r8, fp}
     730:	0800092a 	stmdaeq	r0, {r1, r3, r5, r8, fp}
     734:	00700004 	rsbseq	r0, r0, r4
     738:	00009f20 	andeq	r9, r0, r0, lsr #30
     73c:	00000000 	andeq	r0, r0, r0
     740:	09bc0000 	ldmibeq	ip!, {}	; <UNPREDICTABLE>
     744:	09c40800 	stmibeq	r4, {fp}^
     748:	00010800 	andeq	r0, r1, r0, lsl #16
     74c:	0009d451 	andeq	sp, r9, r1, asr r4
     750:	0009dc08 	andeq	sp, r9, r8, lsl #24
     754:	51000108 	tstpl	r0, r8, lsl #2
     758:	080009e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp}
     75c:	080009f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp}
     760:	00510001 	subseq	r0, r1, r1
     764:	00000000 	andeq	r0, r0, r0
     768:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     76c:	02080009 	andeq	r0, r8, #9
     770:	0108000a 	tsteq	r8, sl
     774:	0a025000 	beq	9477c <__Stack_Size+0x9437c>
     778:	0a0c0800 	beq	302780 <__Stack_Size+0x302380>
     77c:	00040800 	andeq	r0, r4, r0, lsl #16
     780:	9f5001f3 	svcls	0x005001f3
	...
     78c:	08000a0c 	stmdaeq	r0, {r2, r3, r9, fp}
     790:	08000a1a 	stmdaeq	r0, {r1, r3, r4, r9, fp}
     794:	1a500001 	bne	14007a0 <__Stack_Size+0x14003a0>
     798:	2408000a 	strcs	r0, [r8], #-10
     79c:	0408000a 	streq	r0, [r8], #-10
     7a0:	5001f300 	andpl	pc, r1, r0, lsl #6
     7a4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     7a8:	00000000 	andeq	r0, r0, r0
     7ac:	000a2400 	andeq	r2, sl, r0, lsl #8
     7b0:	000a3c08 	andeq	r3, sl, r8, lsl #24
     7b4:	50000108 	andpl	r0, r0, r8, lsl #2
     7b8:	08000a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp}
     7bc:	08000a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp}
     7c0:	01f30004 	mvnseq	r0, r4
     7c4:	00009f50 	andeq	r9, r0, r0, asr pc
     7c8:	00000000 	andeq	r0, r0, r0
     7cc:	0a4c0000 	beq	13007d4 <__Stack_Size+0x13003d4>
     7d0:	0a680800 	beq	1a027d8 <__Stack_Size+0x1a023d8>
     7d4:	00010800 	andeq	r0, r1, r0, lsl #16
     7d8:	000a6850 	andeq	r6, sl, r0, asr r8
     7dc:	000a8008 	andeq	r8, sl, r8
     7e0:	f3000408 	vshl.u8	d0, d8, d0
     7e4:	009f5001 	addseq	r5, pc, r1
     7e8:	00000000 	andeq	r0, r0, r0
     7ec:	a0000000 	andge	r0, r0, r0
     7f0:	a208000a 	andge	r0, r8, #10
     7f4:	0208000a 	andeq	r0, r8, #10
     7f8:	a29f3000 	addsge	r3, pc, #0
     7fc:	ca08000a 	bgt	20082c <__Stack_Size+0x20042c>
     800:	0108000a 	tsteq	r8, sl
     804:	00005500 	andeq	r5, r0, r0, lsl #10
     808:	00000000 	andeq	r0, r0, r0
     80c:	0aee0000 	beq	ffb80814 <BootRAM+0xeaf0fb5>
     810:	0b1e0800 	bleq	782818 <__Stack_Size+0x782418>
     814:	00010800 	andeq	r0, r1, r0, lsl #16
     818:	000b3053 	andeq	r3, fp, r3, asr r0
     81c:	000b3d08 	andeq	r3, fp, r8, lsl #26
     820:	53000108 	movwpl	r0, #264	; 0x108
     824:	08000b52 	stmdaeq	r0, {r1, r4, r6, r8, r9, fp}
     828:	08000b54 	stmdaeq	r0, {r2, r4, r6, r8, r9, fp}
     82c:	56530001 	ldrbpl	r0, [r3], -r1
     830:	5c08000b 	stcpl	0, cr0, [r8], {11}
     834:	0108000b 	tsteq	r8, fp
     838:	0b9e5300 	bleq	fe795440 <BootRAM+0xd705be1>
     83c:	0bba0800 	bleq	fee82844 <BootRAM+0xddf2fe5>
     840:	00010800 	andeq	r0, r1, r0, lsl #16
     844:	000bc253 	andeq	ip, fp, r3, asr r2
     848:	000bd408 	andeq	sp, fp, r8, lsl #8
     84c:	53000108 	movwpl	r0, #264	; 0x108
     850:	08000bde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, fp}
     854:	08000be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp}
     858:	0c530001 	mrrceq	0, 0, r0, r3, cr1
     85c:	1c08000c 	stcne	0, cr0, [r8], {12}
     860:	0108000c 	tsteq	r8, ip
     864:	0c225300 	stceq	3, cr5, [r2], #-0
     868:	0c360800 	ldceq	8, cr0, [r6], #-0
     86c:	00010800 	andeq	r0, r1, r0, lsl #16
     870:	000cae53 	andeq	sl, ip, r3, asr lr
     874:	000cb408 	andeq	fp, ip, r8, lsl #8
     878:	53000108 	movwpl	r0, #264	; 0x108
	...
     88c:	00500001 	subseq	r0, r0, r1
     890:	00000000 	andeq	r0, r0, r0
     894:	04000000 	streq	r0, [r0], #-0
     898:	5001f300 	andpl	pc, r1, r0, lsl #6
     89c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     8ac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     8b8:	01f30004 	mvnseq	r0, r4
     8bc:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     8cc:	00010000 	andeq	r0, r1, r0
     8d0:	00000050 	andeq	r0, r0, r0, asr r0
     8d4:	00000000 	andeq	r0, r0, r0
     8d8:	f3000400 	vshl.u8	d0, d0, d0
     8dc:	009f5001 	addseq	r5, pc, r1
	...
     8ec:	01000000 	mrseq	r0, (UNDEF: 0)
     8f0:	00005100 	andeq	r5, r0, r0, lsl #2
     8f4:	00000000 	andeq	r0, r0, r0
     8f8:	00040000 	andeq	r0, r4, r0
     8fc:	9f5101f3 	svcls	0x005101f3
	...
     910:	00500001 	subseq	r0, r0, r1
     914:	00000000 	andeq	r0, r0, r0
     918:	04000000 	streq	r0, [r0], #-0
     91c:	5001f300 	andpl	pc, r1, r0, lsl #6
     920:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     924:	00000000 	andeq	r0, r0, r0
     928:	000d2800 	andeq	r2, sp, r0, lsl #16
     92c:	000d2a08 	andeq	r2, sp, r8, lsl #20
     930:	50000108 	andpl	r0, r0, r8, lsl #2
     934:	08000d2a 	stmdaeq	r0, {r1, r3, r5, r8, sl, fp}
     938:	08000d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp}
     93c:	01f30004 	mvnseq	r0, r4
     940:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     950:	00010000 	andeq	r0, r1, r0
     954:	00000050 	andeq	r0, r0, r0, asr r0
     958:	00000000 	andeq	r0, r0, r0
     95c:	f3000400 	vshl.u8	d0, d0, d0
     960:	009f5001 	addseq	r5, pc, r1
	...
     970:	01000000 	mrseq	r0, (UNDEF: 0)
     974:	00005000 	andeq	r5, r0, r0
     978:	00000000 	andeq	r0, r0, r0
     97c:	00040000 	andeq	r0, r4, r0
     980:	9f5001f3 	svcls	0x005001f3
	...
     994:	00500001 	subseq	r0, r0, r1
     998:	00000000 	andeq	r0, r0, r0
     99c:	04000000 	streq	r0, [r0], #-0
     9a0:	5001f300 	andpl	pc, r1, r0, lsl #6
     9a4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     9b4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     9c0:	01f30004 	mvnseq	r0, r4
     9c4:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     9d4:	00010000 	andeq	r0, r1, r0
     9d8:	00000050 	andeq	r0, r0, r0, asr r0
     9dc:	00000000 	andeq	r0, r0, r0
     9e0:	f3000400 	vshl.u8	d0, d0, d0
     9e4:	009f5001 	addseq	r5, pc, r1
	...
     9f4:	06000000 	streq	r0, [r0], -r0
     9f8:	08007300 	stmdaeq	r0, {r8, r9, ip, sp, lr}
     9fc:	009f2730 	addseq	r2, pc, r0, lsr r7	; <UNPREDICTABLE>
     a00:	00000000 	andeq	r0, r0, r0
     a04:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     a08:	08007300 	stmdaeq	r0, {r8, r9, ip, sp, lr}
     a0c:	30082730 	andcc	r2, r8, r0, lsr r7
     a10:	00009f27 	andeq	r9, r0, r7, lsr #30
     a14:	00000000 	andeq	r0, r0, r0
     a18:	0d520000 	ldcleq	0, cr0, [r2, #-0]
     a1c:	0d540800 	ldcleq	8, cr0, [r4, #-0]
     a20:	00010800 	andeq	r0, r1, r0, lsl #16
     a24:	000d5450 	andeq	r5, sp, r0, asr r4
     a28:	000d7008 	andeq	r7, sp, r8
     a2c:	f3000408 	vshl.u8	d0, d8, d0
     a30:	009f5001 	addseq	r5, pc, r1
     a34:	00000000 	andeq	r0, r0, r0
     a38:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     a3c:	6c08000d 	stcvs	0, cr0, [r8], {13}
     a40:	0708000d 	streq	r0, [r8, -sp]
     a44:	0a007300 	beq	1d64c <__Stack_Size+0x1d24c>
     a48:	9f273000 	svcls	0x00273000
     a4c:	08000d6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp}
     a50:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
     a54:	0073000b 	rsbseq	r0, r3, fp
     a58:	2730000a 	ldrcs	r0, [r0, -sl]!
     a5c:	2730000a 	ldrcs	r0, [r0, -sl]!
     a60:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     a70:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     a7c:	01f30004 	mvnseq	r0, r4
     a80:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     a90:	00010000 	andeq	r0, r1, r0
     a94:	00000050 	andeq	r0, r0, r0, asr r0
     a98:	00000000 	andeq	r0, r0, r0
     a9c:	f3000400 	vshl.u8	d0, d0, d0
     aa0:	009f5001 	addseq	r5, pc, r1
     aa4:	00000000 	andeq	r0, r0, r0
     aa8:	70000000 	andvc	r0, r0, r0
     aac:	7208000d 	andvc	r0, r8, #13
     ab0:	0108000d 	tsteq	r8, sp
     ab4:	0d725000 	ldcleq	0, cr5, [r2, #-0]
     ab8:	0d8c0800 	stceq	8, cr0, [ip]
     abc:	00040800 	andeq	r0, r4, r0, lsl #16
     ac0:	9f5001f3 	svcls	0x005001f3
	...
     ad4:	00500001 	subseq	r0, r0, r1
     ad8:	00000000 	andeq	r0, r0, r0
     adc:	04000000 	streq	r0, [r0], #-0
     ae0:	5001f300 	andpl	pc, r1, r0, lsl #6
     ae4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     af4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     b00:	01f30004 	mvnseq	r0, r4
     b04:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     b14:	00010000 	andeq	r0, r1, r0
     b18:	00000050 	andeq	r0, r0, r0, asr r0
     b1c:	00000000 	andeq	r0, r0, r0
     b20:	f3000400 	vshl.u8	d0, d0, d0
     b24:	009f5001 	addseq	r5, pc, r1
	...
     b34:	01000000 	mrseq	r0, (UNDEF: 0)
     b38:	00005000 	andeq	r5, r0, r0
     b3c:	00000000 	andeq	r0, r0, r0
     b40:	00040000 	andeq	r0, r4, r0
     b44:	9f5001f3 	svcls	0x005001f3
	...
     b58:	00500001 	subseq	r0, r0, r1
     b5c:	00000000 	andeq	r0, r0, r0
     b60:	04000000 	streq	r0, [r0], #-0
     b64:	5001f300 	andpl	pc, r1, r0, lsl #6
     b68:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     b78:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     b84:	01f30004 	mvnseq	r0, r4
     b88:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     b98:	00010000 	andeq	r0, r1, r0
     b9c:	00000050 	andeq	r0, r0, r0, asr r0
     ba0:	00000000 	andeq	r0, r0, r0
     ba4:	f3000400 	vshl.u8	d0, d0, d0
     ba8:	009f5001 	addseq	r5, pc, r1
	...
     bb8:	01000000 	mrseq	r0, (UNDEF: 0)
     bbc:	00005000 	andeq	r5, r0, r0
     bc0:	00000000 	andeq	r0, r0, r0
     bc4:	00040000 	andeq	r0, r4, r0
     bc8:	9f5001f3 	svcls	0x005001f3
	...
     bdc:	00500001 	subseq	r0, r0, r1
     be0:	00000000 	andeq	r0, r0, r0
     be4:	04000000 	streq	r0, [r0], #-0
     be8:	5001f300 	andpl	pc, r1, r0, lsl #6
     bec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     bf0:	00000000 	andeq	r0, r0, r0
     bf4:	000d8c00 	andeq	r8, sp, r0, lsl #24
     bf8:	000d8e08 	andeq	r8, sp, r8, lsl #28
     bfc:	50000108 	andpl	r0, r0, r8, lsl #2
     c00:	08000d8e 	stmdaeq	r0, {r1, r2, r3, r7, r8, sl, fp}
     c04:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
     c08:	01f30004 	mvnseq	r0, r4
     c0c:	00009f50 	andeq	r9, r0, r0, asr pc
     c10:	00000000 	andeq	r0, r0, r0
     c14:	0dac0000 	stceq	0, cr0, [ip]
     c18:	0dae0800 	stceq	8, cr0, [lr]
     c1c:	00010800 	andeq	r0, r1, r0, lsl #16
     c20:	000dae50 	andeq	sl, sp, r0, asr lr
     c24:	000dcc08 	andeq	ip, sp, r8, lsl #24
     c28:	f3000408 	vshl.u8	d0, d8, d0
     c2c:	009f5001 	addseq	r5, pc, r1
	...
     c3c:	01000000 	mrseq	r0, (UNDEF: 0)
     c40:	00005000 	andeq	r5, r0, r0
     c44:	00000000 	andeq	r0, r0, r0
     c48:	00040000 	andeq	r0, r4, r0
     c4c:	9f5001f3 	svcls	0x005001f3
	...
     c60:	00510001 	subseq	r0, r1, r1
     c64:	00000000 	andeq	r0, r0, r0
     c68:	04000000 	streq	r0, [r0], #-0
     c6c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     c70:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     c80:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     c8c:	01f30004 	mvnseq	r0, r4
     c90:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     ca0:	00010000 	andeq	r0, r1, r0
     ca4:	00000050 	andeq	r0, r0, r0, asr r0
     ca8:	00000000 	andeq	r0, r0, r0
     cac:	f3000400 	vshl.u8	d0, d0, d0
     cb0:	009f5001 	addseq	r5, pc, r1
	...
     cc0:	01000000 	mrseq	r0, (UNDEF: 0)
     cc4:	00005100 	andeq	r5, r0, r0, lsl #2
     cc8:	00000000 	andeq	r0, r0, r0
     ccc:	00040000 	andeq	r0, r4, r0
     cd0:	9f5101f3 	svcls	0x005101f3
	...
     ce4:	00500001 	subseq	r0, r0, r1
     ce8:	00000000 	andeq	r0, r0, r0
     cec:	04000000 	streq	r0, [r0], #-0
     cf0:	5001f300 	andpl	pc, r1, r0, lsl #6
     cf4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     d04:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     d10:	01f30004 	mvnseq	r0, r4
     d14:	00009f51 	andeq	r9, r0, r1, asr pc
     d18:	00000000 	andeq	r0, r0, r0
     d1c:	0dcc0000 	stcleq	0, cr0, [ip]
     d20:	0dd60800 	ldcleq	8, cr0, [r6]
     d24:	00010800 	andeq	r0, r1, r0, lsl #16
     d28:	000dd650 	andeq	sp, sp, r0, asr r6
     d2c:	000de808 	andeq	lr, sp, r8, lsl #16
     d30:	f3000408 	vshl.u8	d0, d8, d0
     d34:	009f5001 	addseq	r5, pc, r1
     d38:	00000000 	andeq	r0, r0, r0
     d3c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
     d40:	f208000d 	vhadd.s8	d0, d8, d13
     d44:	0108000d 	tsteq	r8, sp
     d48:	0df25000 	ldcleq	0, cr5, [r2]
     d4c:	0e040800 	cdpeq	8, 0, cr0, cr4, cr0, {0}
     d50:	00040800 	andeq	r0, r4, r0, lsl #16
     d54:	9f5001f3 	svcls	0x005001f3
	...
     d60:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
     d64:	08000e0e 	stmdaeq	r0, {r1, r2, r3, r9, sl, fp}
     d68:	0e500001 	cdpeq	0, 5, cr0, cr0, cr1, {0}
     d6c:	2008000e 	andcs	r0, r8, lr
     d70:	0408000e 	streq	r0, [r8], #-14
     d74:	5001f300 	andpl	pc, r1, r0, lsl #6
     d78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     d88:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     d94:	01f30004 	mvnseq	r0, r4
     d98:	00009f51 	andeq	r9, r0, r1, asr pc
     d9c:	00000000 	andeq	r0, r0, r0
     da0:	00010000 	andeq	r0, r1, r0
     da4:	00000051 	andeq	r0, r0, r1, asr r0
     da8:	00000000 	andeq	r0, r0, r0
     dac:	f3000400 	vshl.u8	d0, d0, d0
     db0:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     dc0:	01000000 	mrseq	r0, (UNDEF: 0)
     dc4:	00005300 	andeq	r5, r0, r0, lsl #6
     dc8:	00000000 	andeq	r0, r0, r0
     dcc:	00010000 	andeq	r0, r1, r0
     dd0:	00000053 	andeq	r0, r0, r3, asr r0
     dd4:	00000000 	andeq	r0, r0, r0
     dd8:	53000100 	movwpl	r0, #256	; 0x100
	...
     de4:	08000e20 	stmdaeq	r0, {r5, r9, sl, fp}
     de8:	08000e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp}
     dec:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     df0:	6008000e 	andvs	r0, r8, lr
     df4:	0408000e 	streq	r0, [r8], #-14
     df8:	5001f300 	andpl	pc, r1, r0, lsl #6
     dfc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     e00:	00000000 	andeq	r0, r0, r0
     e04:	000e2000 	andeq	r2, lr, r0
     e08:	000e4e08 	andeq	r4, lr, r8, lsl #28
     e0c:	51000108 	tstpl	r0, r8, lsl #2
     e10:	08000e4e 	stmdaeq	r0, {r1, r2, r3, r6, r9, sl, fp}
     e14:	08000e60 	stmdaeq	r0, {r5, r6, r9, sl, fp}
     e18:	01f30004 	mvnseq	r0, r4
     e1c:	00009f51 	andeq	r9, r0, r1, asr pc
     e20:	00000000 	andeq	r0, r0, r0
     e24:	0e380000 	cdpeq	0, 3, cr0, cr8, cr0, {0}
     e28:	0e400800 	cdpeq	8, 4, cr0, cr0, cr0, {0}
     e2c:	00010800 	andeq	r0, r1, r0, lsl #16
     e30:	000e4053 	andeq	r4, lr, r3, asr r0
     e34:	000e4208 	andeq	r4, lr, r8, lsl #4
     e38:	71000508 	tstvc	r0, r8, lsl #10
     e3c:	9f253500 	svcls	0x00253500
     e40:	08000e42 	stmdaeq	r0, {r1, r6, r9, sl, fp}
     e44:	08000e44 	stmdaeq	r0, {r2, r6, r9, sl, fp}
     e48:	4c530001 	mrrcmi	0, 0, r0, r3, cr1
     e4c:	5408000e 	strpl	r0, [r8], #-14
     e50:	0108000e 	tsteq	r8, lr
     e54:	00005300 	andeq	r5, r0, r0, lsl #6
	...
     e64:	00010000 	andeq	r0, r1, r0
     e68:	00000050 	andeq	r0, r0, r0, asr r0
     e6c:	00000000 	andeq	r0, r0, r0
     e70:	f3000400 	vshl.u8	d0, d0, d0
     e74:	009f5001 	addseq	r5, pc, r1
	...
     e84:	01000000 	mrseq	r0, (UNDEF: 0)
     e88:	00005000 	andeq	r5, r0, r0
     e8c:	00000000 	andeq	r0, r0, r0
     e90:	00040000 	andeq	r0, r4, r0
     e94:	9f5001f3 	svcls	0x005001f3
	...
     ea8:	00500001 	subseq	r0, r0, r1
     eac:	00000000 	andeq	r0, r0, r0
     eb0:	04000000 	streq	r0, [r0], #-0
     eb4:	5001f300 	andpl	pc, r1, r0, lsl #6
     eb8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     ec8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     ed4:	01f30004 	mvnseq	r0, r4
     ed8:	00009f51 	andeq	r9, r0, r1, asr pc
	...
     ee8:	00010000 	andeq	r0, r1, r0
     eec:	00000052 	andeq	r0, r0, r2, asr r0
     ef0:	00000000 	andeq	r0, r0, r0
     ef4:	f3000400 	vshl.u8	d0, d0, d0
     ef8:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
     f08:	01000000 	mrseq	r0, (UNDEF: 0)
     f0c:	00005000 	andeq	r5, r0, r0
     f10:	00000000 	andeq	r0, r0, r0
     f14:	00040000 	andeq	r0, r4, r0
     f18:	9f5001f3 	svcls	0x005001f3
	...
     f2c:	00510001 	subseq	r0, r1, r1
     f30:	00000000 	andeq	r0, r0, r0
     f34:	04000000 	streq	r0, [r0], #-0
     f38:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     f3c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     f4c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     f58:	01f30004 	mvnseq	r0, r4
     f5c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     f6c:	00010000 	andeq	r0, r1, r0
     f70:	00000051 	andeq	r0, r0, r1, asr r0
     f74:	00000000 	andeq	r0, r0, r0
     f78:	f3000400 	vshl.u8	d0, d0, d0
     f7c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     f8c:	01000000 	mrseq	r0, (UNDEF: 0)
     f90:	00005000 	andeq	r5, r0, r0
     f94:	00000000 	andeq	r0, r0, r0
     f98:	00040000 	andeq	r0, r4, r0
     f9c:	9f5001f3 	svcls	0x005001f3
	...
     fb0:	00500001 	subseq	r0, r0, r1
     fb4:	00000000 	andeq	r0, r0, r0
     fb8:	04000000 	streq	r0, [r0], #-0
     fbc:	5001f300 	andpl	pc, r1, r0, lsl #6
     fc0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     fd0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     fdc:	01f30004 	mvnseq	r0, r4
     fe0:	00009f50 	andeq	r9, r0, r0, asr pc
     fe4:	00000000 	andeq	r0, r0, r0
     fe8:	00010000 	andeq	r0, r1, r0
     fec:	00000050 	andeq	r0, r0, r0, asr r0
     ff0:	00000000 	andeq	r0, r0, r0
     ff4:	f3000400 	vshl.u8	d0, d0, d0
     ff8:	009f5001 	addseq	r5, pc, r1
     ffc:	00000000 	andeq	r0, r0, r0
    1000:	01000000 	mrseq	r0, (UNDEF: 0)
    1004:	00005000 	andeq	r5, r0, r0
	...
    1014:	00010000 	andeq	r0, r1, r0
    1018:	00000051 	andeq	r0, r0, r1, asr r0
    101c:	00000000 	andeq	r0, r0, r0
    1020:	f3000400 	vshl.u8	d0, d0, d0
    1024:	009f5101 	addseq	r5, pc, r1, lsl #2
    1028:	00000000 	andeq	r0, r0, r0
    102c:	01000000 	mrseq	r0, (UNDEF: 0)
    1030:	00005100 	andeq	r5, r0, r0, lsl #2
    1034:	00000000 	andeq	r0, r0, r0
    1038:	00040000 	andeq	r0, r4, r0
    103c:	9f5101f3 	svcls	0x005101f3
	...
    1048:	00510001 	subseq	r0, r1, r1
	...
    1058:	01000000 	mrseq	r0, (UNDEF: 0)
    105c:	00005200 	andeq	r5, r0, r0, lsl #4
    1060:	00000000 	andeq	r0, r0, r0
    1064:	00040000 	andeq	r0, r4, r0
    1068:	9f5201f3 	svcls	0x005201f3
	...
    1074:	00520001 	subseq	r0, r2, r1
	...
    1084:	01000000 	mrseq	r0, (UNDEF: 0)
    1088:	00005100 	andeq	r5, r0, r0, lsl #2
    108c:	00000000 	andeq	r0, r0, r0
    1090:	00010000 	andeq	r0, r1, r0
    1094:	00000051 	andeq	r0, r0, r1, asr r0
	...
    10a4:	53000100 	movwpl	r0, #256	; 0x100
	...
    10b0:	00720005 	rsbseq	r0, r2, r5
    10b4:	009f2535 	addseq	r2, pc, r5, lsr r5	; <UNPREDICTABLE>
    10b8:	00000000 	andeq	r0, r0, r0
    10bc:	01000000 	mrseq	r0, (UNDEF: 0)
    10c0:	00005300 	andeq	r5, r0, r0, lsl #6
    10c4:	00000000 	andeq	r0, r0, r0
    10c8:	00010000 	andeq	r0, r1, r0
    10cc:	00000053 	andeq	r0, r0, r3, asr r0
	...
    10dc:	53000100 	movwpl	r0, #256	; 0x100
	...
    10e8:	00530001 	subseq	r0, r3, r1
	...
    10f8:	01000000 	mrseq	r0, (UNDEF: 0)
    10fc:	00005100 	andeq	r5, r0, r0, lsl #2
    1100:	00000000 	andeq	r0, r0, r0
    1104:	00050000 	andeq	r0, r5, r0
    1108:	25350072 	ldrcs	r0, [r5, #-114]!	; 0x72
    110c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1110:	00000000 	andeq	r0, r0, r0
    1114:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1120:	00510001 	subseq	r0, r1, r1
	...
    1130:	01000000 	mrseq	r0, (UNDEF: 0)
    1134:	00005000 	andeq	r5, r0, r0
    1138:	00000000 	andeq	r0, r0, r0
    113c:	00040000 	andeq	r0, r4, r0
    1140:	9f5001f3 	svcls	0x005001f3
	...
    114c:	00500001 	subseq	r0, r0, r1
    1150:	00000000 	andeq	r0, r0, r0
    1154:	04000000 	streq	r0, [r0], #-0
    1158:	5001f300 	andpl	pc, r1, r0, lsl #6
    115c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    116c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1178:	01f30004 	mvnseq	r0, r4
    117c:	00009f51 	andeq	r9, r0, r1, asr pc
    1180:	00000000 	andeq	r0, r0, r0
    1184:	00010000 	andeq	r0, r1, r0
    1188:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1198:	52000100 	andpl	r0, r0, #0, 2
	...
    11a4:	01f30004 	mvnseq	r0, r4
    11a8:	00009f52 	andeq	r9, r0, r2, asr pc
    11ac:	00000000 	andeq	r0, r0, r0
    11b0:	00010000 	andeq	r0, r1, r0
    11b4:	00000052 	andeq	r0, r0, r2, asr r0
	...
    11c4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    11d8:	00530001 	subseq	r0, r3, r1
    11dc:	00000000 	andeq	r0, r0, r0
    11e0:	05000000 	streq	r0, [r0, #-0]
    11e4:	35007200 	strcc	r7, [r0, #-512]	; 0x200
    11e8:	00009f25 	andeq	r9, r0, r5, lsr #30
    11ec:	00000000 	andeq	r0, r0, r0
    11f0:	00010000 	andeq	r0, r1, r0
    11f4:	00000053 	andeq	r0, r0, r3, asr r0
    11f8:	00000000 	andeq	r0, r0, r0
    11fc:	53000100 	movwpl	r0, #256	; 0x100
	...
    1210:	00500001 	subseq	r0, r0, r1
    1214:	00000000 	andeq	r0, r0, r0
    1218:	04000000 	streq	r0, [r0], #-0
    121c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1220:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1224:	00000000 	andeq	r0, r0, r0
    1228:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1234:	01f30004 	mvnseq	r0, r4
    1238:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    1248:	00010000 	andeq	r0, r1, r0
    124c:	00000051 	andeq	r0, r0, r1, asr r0
    1250:	00000000 	andeq	r0, r0, r0
    1254:	f3000400 	vshl.u8	d0, d0, d0
    1258:	009f5101 	addseq	r5, pc, r1, lsl #2
    125c:	00000000 	andeq	r0, r0, r0
    1260:	01000000 	mrseq	r0, (UNDEF: 0)
    1264:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    1274:	00010000 	andeq	r0, r1, r0
    1278:	00000052 	andeq	r0, r0, r2, asr r0
    127c:	00000000 	andeq	r0, r0, r0
    1280:	f3000400 	vshl.u8	d0, d0, d0
    1284:	009f5201 	addseq	r5, pc, r1, lsl #4
    1288:	00000000 	andeq	r0, r0, r0
    128c:	01000000 	mrseq	r0, (UNDEF: 0)
    1290:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    12a0:	00010000 	andeq	r0, r1, r0
    12a4:	00000051 	andeq	r0, r0, r1, asr r0
	...
    12b4:	53000100 	movwpl	r0, #256	; 0x100
	...
    12c0:	00720005 	rsbseq	r0, r2, r5
    12c4:	009f2535 	addseq	r2, pc, r5, lsr r5	; <UNPREDICTABLE>
    12c8:	00000000 	andeq	r0, r0, r0
    12cc:	01000000 	mrseq	r0, (UNDEF: 0)
    12d0:	00005300 	andeq	r5, r0, r0, lsl #6
    12d4:	00000000 	andeq	r0, r0, r0
    12d8:	00010000 	andeq	r0, r1, r0
    12dc:	00000053 	andeq	r0, r0, r3, asr r0
	...
    12ec:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    12f8:	01f30004 	mvnseq	r0, r4
    12fc:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    130c:	00010000 	andeq	r0, r1, r0
    1310:	00000050 	andeq	r0, r0, r0, asr r0
    1314:	00000000 	andeq	r0, r0, r0
    1318:	f3000400 	vshl.u8	d0, d0, d0
    131c:	009f5001 	addseq	r5, pc, r1
	...
    132c:	01000000 	mrseq	r0, (UNDEF: 0)
    1330:	00005000 	andeq	r5, r0, r0
    1334:	00000000 	andeq	r0, r0, r0
    1338:	00040000 	andeq	r0, r4, r0
    133c:	9f5001f3 	svcls	0x005001f3
	...
    1350:	00500001 	subseq	r0, r0, r1
    1354:	00000000 	andeq	r0, r0, r0
    1358:	04000000 	streq	r0, [r0], #-0
    135c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1360:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1364:	00000000 	andeq	r0, r0, r0
    1368:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1374:	01f30004 	mvnseq	r0, r4
    1378:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    1388:	00010000 	andeq	r0, r1, r0
    138c:	00000050 	andeq	r0, r0, r0, asr r0
    1390:	00000000 	andeq	r0, r0, r0
    1394:	f3000400 	vshl.u8	d0, d0, d0
    1398:	009f5001 	addseq	r5, pc, r1
	...
    13a8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    13ac:	08007000 	stmdaeq	r0, {ip, sp, lr}
    13b0:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    13b4:	ff080071 			; <UNDEFINED> instruction: 0xff080071
    13b8:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    13bc:	00000000 	andeq	r0, r0, r0
    13c0:	0f000000 	svceq	0x00000000
    13c4:	5001f300 	andpl	pc, r1, r0, lsl #6
    13c8:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    13cc:	08007124 	stmdaeq	r0, {r2, r5, r8, ip, sp, lr}
    13d0:	9f211aff 	svcls	0x00211aff
	...
    13e4:	00500001 	subseq	r0, r0, r1
    13e8:	00000000 	andeq	r0, r0, r0
    13ec:	04000000 	streq	r0, [r0], #-0
    13f0:	5001f300 	andpl	pc, r1, r0, lsl #6
    13f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1404:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1418:	0070000d 	rsbseq	r0, r0, sp
    141c:	00702538 	rsbseq	r2, r0, r8, lsr r5
    1420:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    1424:	009f2124 	addseq	r2, pc, r4, lsr #2
    1428:	00000000 	andeq	r0, r0, r0
    142c:	62000000 	andvs	r0, r0, #0
    1430:	c808000e 	stmdagt	r8, {r1, r2, r3}
    1434:	0208000e 	andeq	r0, r8, #14
    1438:	c89f3000 	ldmgt	pc, {ip, sp}	; <UNPREDICTABLE>
    143c:	cc08000e 	stcgt	0, cr0, [r8], {14}
    1440:	0708000e 	streq	r0, [r8, -lr]
    1444:	0a007300 	beq	1e04c <__Stack_Size+0x1dc4c>
    1448:	9f1affff 	svcls	0x001affff
    144c:	08000edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp}
    1450:	08000ee6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, fp}
    1454:	00730007 	rsbseq	r0, r3, r7
    1458:	1affff0a 	bne	1088 <__Stack_Size+0xc88>
    145c:	000ef09f 	muleq	lr, pc, r0	; <UNPREDICTABLE>
    1460:	000efa08 	andeq	pc, lr, r8, lsl #20
    1464:	73000708 	movwvc	r0, #1800	; 0x708
    1468:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    146c:	0f469f1a 	svceq	0x00469f1a
    1470:	0f520800 	svceq	0x00520800
    1474:	00020800 	andeq	r0, r2, r0, lsl #16
    1478:	0f529f30 	svceq	0x00529f30
    147c:	0f920800 	svceq	0x00920800
    1480:	00070800 	andeq	r0, r7, r0, lsl #16
    1484:	ff0a0075 			; <UNDEFINED> instruction: 0xff0a0075
    1488:	929f1aff 	addsls	r1, pc, #1044480	; 0xff000
    148c:	b408000f 	strlt	r0, [r8], #-15
    1490:	0208000f 	andeq	r0, r8, #15
    1494:	009f3000 	addseq	r3, pc, r0
    1498:	00000000 	andeq	r0, r0, r0
    149c:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    14a0:	ac08000e 	stcge	0, cr0, [r8], {14}
    14a4:	0708000e 	streq	r0, [r8, -lr]
    14a8:	0a007200 	beq	1dcb0 <__Stack_Size+0x1d8b0>
    14ac:	9f272000 	svcls	0x00272000
    14b0:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
    14b4:	08000eb0 	stmdaeq	r0, {r4, r5, r7, r9, sl, fp}
    14b8:	0072000b 	rsbseq	r0, r2, fp
    14bc:	2720000a 	strcs	r0, [r0, -sl]!
    14c0:	2720000a 	strcs	r0, [r0, -sl]!
    14c4:	000eb09f 	muleq	lr, pc, r0	; <UNPREDICTABLE>
    14c8:	000ec008 	andeq	ip, lr, r8
    14cc:	74000c08 	strvc	r0, [r0], #-3080	; 0xc08
    14d0:	000a0600 	andeq	r0, sl, r0, lsl #12
    14d4:	000a2720 	andeq	r2, sl, r0, lsr #14
    14d8:	009f2720 	addseq	r2, pc, r0, lsr #14
    14dc:	00000000 	andeq	r0, r0, r0
    14e0:	ba000000 	blt	14e8 <__Stack_Size+0x10e8>
    14e4:	be08000e 	cdplt	0, 0, cr0, cr8, cr14, {0}
    14e8:	0608000e 	streq	r0, [r8], -lr
    14ec:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    14f0:	be9f2720 	cdplt	7, 9, cr2, cr15, cr0, {1}
    14f4:	ce08000e 	cdpgt	0, 0, cr0, cr8, cr14, {0}
    14f8:	0908000e 	stmdbeq	r8, {r1, r2, r3}
    14fc:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    1500:	20082720 	andcs	r2, r8, r0, lsr #14
    1504:	0ece9f27 	cdpeq	15, 12, cr9, cr14, cr7, {1}
    1508:	0ed60800 	cdpeq	8, 13, cr0, cr6, cr0, {0}
    150c:	000a0800 	andeq	r0, sl, r0, lsl #16
    1510:	08060074 	stmdaeq	r6, {r2, r4, r5, r6}
    1514:	20082720 	andcs	r2, r8, r0, lsr #14
    1518:	0edc9f27 	cdpeq	15, 13, cr9, cr12, cr7, {1}
    151c:	0ede0800 	cdpeq	8, 13, cr0, cr14, cr0, {0}
    1520:	00090800 	andeq	r0, r9, r0, lsl #16
    1524:	20080072 	andcs	r0, r8, r2, ror r0
    1528:	27200827 	strcs	r0, [r0, -r7, lsr #16]!
    152c:	000ede9f 	muleq	lr, pc, lr	; <UNPREDICTABLE>
    1530:	000eea08 	andeq	lr, lr, r8, lsl #20
    1534:	74000a08 	strvc	r0, [r0], #-2568	; 0xa08
    1538:	20080600 	andcs	r0, r8, r0, lsl #12
    153c:	27200827 	strcs	r0, [r0, -r7, lsr #16]!
    1540:	000ef09f 	muleq	lr, pc, r0	; <UNPREDICTABLE>
    1544:	000efe08 	andeq	pc, lr, r8, lsl #28
    1548:	74000a08 	strvc	r0, [r0], #-2568	; 0xa08
    154c:	20080600 	andcs	r0, r8, r0, lsl #12
    1550:	27200827 	strcs	r0, [r0, -r7, lsr #16]!
    1554:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1558:	00000000 	andeq	r0, r0, r0
    155c:	000f1000 	andeq	r1, pc, r0
    1560:	000f2608 	andeq	r2, pc, r8, lsl #12
    1564:	53000108 	movwpl	r0, #264	; 0x108
    1568:	08000f26 	stmdaeq	r0, {r1, r2, r5, r8, r9, sl, fp}
    156c:	08000f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp}
    1570:	00720004 	rsbseq	r0, r2, r4
    1574:	00009f06 	andeq	r9, r0, r6, lsl #30
    1578:	00000000 	andeq	r0, r0, r0
    157c:	0f320000 	svceq	0x00320000
    1580:	0f460800 	svceq	0x00460800
    1584:	00010800 	andeq	r0, r1, r0, lsl #16
    1588:	00000053 	andeq	r0, r0, r3, asr r0
	...
    1598:	30000200 	andcc	r0, r0, r0, lsl #4
    159c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    15a0:	00000000 	andeq	r0, r0, r0
    15a4:	71000700 	tstvc	r0, r0, lsl #14
    15a8:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    15ac:	00009f1a 	andeq	r9, r0, sl, lsl pc
    15b0:	00000000 	andeq	r0, r0, r0
    15b4:	00070000 	andeq	r0, r7, r0
    15b8:	ff0a0071 			; <UNDEFINED> instruction: 0xff0a0071
    15bc:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    15c0:	00000000 	andeq	r0, r0, r0
    15c4:	02000000 	andeq	r0, r0, #0
    15c8:	009f3000 	addseq	r3, pc, r0
    15cc:	00000000 	andeq	r0, r0, r0
    15d0:	ec000000 	stc	0, cr0, [r0], {-0}
    15d4:	0108000f 	tsteq	r8, pc
    15d8:	01080010 	tsteq	r8, r0, lsl r0
    15dc:	10015000 	andne	r5, r1, r0
    15e0:	10100800 	andsne	r0, r0, r0, lsl #16
    15e4:	00040800 	andeq	r0, r4, r0, lsl #16
    15e8:	9f5001f3 	svcls	0x005001f3
	...
    15f4:	08001010 	stmdaeq	r0, {r4, ip}
    15f8:	08001025 	stmdaeq	r0, {r0, r2, r5, ip}
    15fc:	25500001 	ldrbcs	r0, [r0, #-1]
    1600:	34080010 	strcc	r0, [r8], #-16
    1604:	04080010 	streq	r0, [r8], #-16
    1608:	5001f300 	andpl	pc, r1, r0, lsl #6
    160c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1610:	00000000 	andeq	r0, r0, r0
    1614:	00103400 	andseq	r3, r0, r0, lsl #8
    1618:	00104808 	andseq	r4, r0, r8, lsl #16
    161c:	50000108 	andpl	r0, r0, r8, lsl #2
    1620:	08001048 	stmdaeq	r0, {r3, r6, ip}
    1624:	080010c4 	stmdaeq	r0, {r2, r6, r7, ip}
    1628:	01f30004 	mvnseq	r0, r4
    162c:	00009f50 	andeq	r9, r0, r0, asr pc
    1630:	00000000 	andeq	r0, r0, r0
    1634:	10560000 	subsne	r0, r6, r0
    1638:	10580800 	subsne	r0, r8, r0, lsl #16
    163c:	00020800 	andeq	r0, r2, r0, lsl #16
    1640:	00000971 	andeq	r0, r0, r1, ror r9
    1644:	00000000 	andeq	r0, r0, r0
    1648:	107e0000 	rsbsne	r0, lr, r0
    164c:	10800800 	addne	r0, r0, r0, lsl #16
    1650:	00010800 	andeq	r0, r1, r0, lsl #16
    1654:	00108052 	andseq	r8, r0, r2, asr r0
    1658:	00109a08 	andseq	r9, r0, r8, lsl #20
    165c:	71000508 	tstvc	r0, r8, lsl #10
    1660:	9f1a3f00 	svcls	0x001a3f00
    1664:	0800109e 	stmdaeq	r0, {r1, r2, r3, r4, r7, ip}
    1668:	080010a8 	stmdaeq	r0, {r3, r5, r7, ip}
    166c:	00710005 	rsbseq	r0, r1, r5
    1670:	009f1a3f 	addseq	r1, pc, pc, lsr sl	; <UNPREDICTABLE>
    1674:	00000000 	andeq	r0, r0, r0
    1678:	cc000000 	stcgt	0, cr0, [r0], {-0}
    167c:	52080010 	andpl	r0, r8, #16
    1680:	03080011 	movweq	r0, #32785	; 0x8011
    1684:	9f107400 	svcls	0x00107400
	...
    1690:	080010d0 	stmdaeq	r0, {r4, r6, r7, ip}
    1694:	080010fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, ip}
    1698:	fa530001 	blx	14c16a4 <__Stack_Size+0x14c12a4>
    169c:	00080010 	andeq	r0, r8, r0, lsl r0
    16a0:	09080011 	stmdbeq	r8, {r0, r4}
    16a4:	94107400 	ldrls	r7, [r0], #-1024	; 0x400
    16a8:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    16ac:	11009f1a 	tstne	r0, sl, lsl pc
    16b0:	11140800 	tstne	r4, r0, lsl #16
    16b4:	00010800 	andeq	r0, r1, r0, lsl #16
    16b8:	00111453 	andseq	r1, r1, r3, asr r4
    16bc:	00111508 	andseq	r1, r1, r8, lsl #10
    16c0:	74000908 	strvc	r0, [r0], #-2312	; 0x908
    16c4:	0a029410 	beq	a670c <__Stack_Size+0xa630c>
    16c8:	9f1affff 	svcls	0x001affff
	...
    16d4:	080010d2 	stmdaeq	r0, {r1, r4, r6, r7, ip}
    16d8:	080010f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, ip}
    16dc:	00760006 	rsbseq	r0, r6, r6
    16e0:	9f1aff08 	svcls	0x001aff08
    16e4:	080010f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, ip}
    16e8:	080010f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip}
    16ec:	9f340002 	svcls	0x00340002
    16f0:	080010f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip}
    16f4:	08001100 	stmdaeq	r0, {r8, ip}
    16f8:	9f370002 	svcls	0x00370002
    16fc:	08001100 	stmdaeq	r0, {r8, ip}
    1700:	0800110a 	stmdaeq	r0, {r1, r3, r8, ip}
    1704:	00760006 	rsbseq	r0, r6, r6
    1708:	9f1aff08 	svcls	0x001aff08
    170c:	0800110a 	stmdaeq	r0, {r1, r3, r8, ip}
    1710:	08001152 	stmdaeq	r0, {r1, r4, r6, r8, ip}
    1714:	00560001 	subseq	r0, r6, r1
    1718:	00000000 	andeq	r0, r0, r0
    171c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1720:	1a080011 	bne	20176c <__Stack_Size+0x20136c>
    1724:	01080011 	tsteq	r8, r1, lsl r0
    1728:	111a5000 	tstne	sl, r0
    172c:	11480800 	cmpne	r8, r0, lsl #16
    1730:	00010800 	andeq	r0, r1, r0, lsl #16
    1734:	00000059 	andeq	r0, r0, r9, asr r0
    1738:	00000000 	andeq	r0, r0, r0
    173c:	00110200 	andseq	r0, r1, r0, lsl #4
    1740:	00110a08 	andseq	r0, r1, r8, lsl #20
    1744:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    1748:	0800110a 	stmdaeq	r0, {r1, r3, r8, ip}
    174c:	08001110 	stmdaeq	r0, {r4, r8, ip}
    1750:	00750016 	rsbseq	r0, r5, r6, lsl r0
    1754:	244b4012 	strbcs	r4, [fp], #-18
    1758:	16007322 	strne	r7, [r0], -r2, lsr #6
    175c:	244b4014 	strbcs	r4, [fp], #-20
    1760:	01282d22 	teqeq	r8, r2, lsr #26
    1764:	9f131600 	svcls	0x00131600
    1768:	08001110 	stmdaeq	r0, {r4, r8, ip}
    176c:	0800113e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, ip}
    1770:	00550001 	subseq	r0, r5, r1
    1774:	00000000 	andeq	r0, r0, r0
    1778:	b6000000 	strlt	r0, [r0], -r0
    177c:	cd080011 	stcgt	0, cr0, [r8, #-68]	; 0xffffffbc
    1780:	01080011 	tsteq	r8, r1, lsl r0
    1784:	11dc5000 	bicsne	r5, ip, r0
    1788:	11de0800 	bicsne	r0, lr, r0, lsl #16
    178c:	00010800 	andeq	r0, r1, r0, lsl #16
    1790:	00000050 	andeq	r0, r0, r0, asr r0
    1794:	00000000 	andeq	r0, r0, r0
    1798:	0011f400 	andseq	pc, r1, r0, lsl #8
    179c:	0011f808 	andseq	pc, r1, r8, lsl #16
    17a0:	70000608 	andvc	r0, r0, r8, lsl #12
    17a4:	1a7f0800 	bne	1fc37ac <__Stack_Size+0x1fc33ac>
    17a8:	0011f89f 	mulseq	r1, pc, r8	; <UNPREDICTABLE>
    17ac:	00121c08 	andseq	r1, r2, r8, lsl #24
    17b0:	50000108 	andpl	r0, r0, r8, lsl #2
    17b4:	0800121c 	stmdaeq	r0, {r2, r3, r4, r9, ip}
    17b8:	08001242 	stmdaeq	r0, {r1, r6, r9, ip}
    17bc:	0073000b 	rsbseq	r0, r3, fp
    17c0:	7f080194 	svcvc	0x00080194
    17c4:	1aff081a 	bne	fffc3834 <BootRAM+0xef33fd5>
    17c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    17cc:	00000000 	andeq	r0, r0, r0
    17d0:	00123400 	andseq	r3, r2, r0, lsl #8
    17d4:	00126108 	andseq	r6, r2, r8, lsl #2
    17d8:	51000108 	tstpl	r0, r8, lsl #2
    17dc:	0800126c 	stmdaeq	r0, {r2, r3, r5, r6, r9, ip}
    17e0:	0800127e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, ip}
    17e4:	84510001 	ldrbhi	r0, [r1], #-1
    17e8:	87080012 	smladhi	r8, r2, r0, r0
    17ec:	01080012 	tsteq	r8, r2, lsl r0
    17f0:	00005100 	andeq	r5, r0, r0, lsl #2
    17f4:	00000000 	andeq	r0, r0, r0
    17f8:	121c0000 	andsne	r0, ip, #0
    17fc:	125e0800 	subsne	r0, lr, #0, 16
    1800:	00010800 	andeq	r0, r1, r0, lsl #16
    1804:	00126c50 	andseq	r6, r2, r0, asr ip
    1808:	00128108 	andseq	r8, r2, r8, lsl #2
    180c:	50000108 	andpl	r0, r0, r8, lsl #2
    1810:	08001284 	stmdaeq	r0, {r2, r7, r9, ip}
    1814:	08001287 	stmdaeq	r0, {r0, r1, r2, r7, r9, ip}
    1818:	00500001 	subseq	r0, r0, r1
    181c:	00000000 	andeq	r0, r0, r0
    1820:	16000000 	strne	r0, [r0], -r0
    1824:	4e080012 	mcrmi	0, 0, r0, cr8, cr2, {0}
    1828:	06080012 			; <UNDEFINED> instruction: 0x06080012
    182c:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    1830:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    1834:	00000000 	andeq	r0, r0, r0
    1838:	94000000 	strls	r0, [r0], #-0
    183c:	98080012 	stmdals	r8, {r1, r4}
    1840:	07080012 	smladeq	r8, r2, r0, r0
    1844:	0a007300 	beq	1e44c <__Stack_Size+0x1e04c>
    1848:	9f273000 	svcls	0x00273000
    184c:	08001298 	stmdaeq	r0, {r3, r4, r7, r9, ip}
    1850:	0800129a 	stmdaeq	r0, {r1, r3, r4, r7, r9, ip}
    1854:	0073000b 	rsbseq	r0, r3, fp
    1858:	2730000a 	ldrcs	r0, [r0, -sl]!
    185c:	2730000a 	ldrcs	r0, [r0, -sl]!
    1860:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1864:	00000000 	andeq	r0, r0, r0
    1868:	0012c800 	andseq	ip, r2, r0, lsl #16
    186c:	00130208 	andseq	r0, r3, r8, lsl #4
    1870:	72000608 	andvc	r0, r0, #8, 12	; 0x800000
    1874:	1aff0800 	bne	fffc387c <BootRAM+0xef3401d>
    1878:	0013309f 	mulseq	r3, pc, r0	; <UNPREDICTABLE>
    187c:	00134008 	andseq	r4, r3, r8
    1880:	72000608 	andvc	r0, r0, #8, 12	; 0x800000
    1884:	1aff0800 	bne	fffc388c <BootRAM+0xef3402d>
    1888:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    188c:	00000000 	andeq	r0, r0, r0
    1890:	0012cc00 	andseq	ip, r2, r0, lsl #24
    1894:	0012ec08 	andseq	lr, r2, r8, lsl #24
    1898:	54000108 	strpl	r0, [r0], #-264	; 0x108
    189c:	080012ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip}
    18a0:	08001302 	stmdaeq	r0, {r1, r8, r9, ip}
    18a4:	00720007 	rsbseq	r0, r2, r7
    18a8:	1aff7f0b 	bne	fffe14dc <BootRAM+0xef51c7d>
    18ac:	0013309f 	mulseq	r3, pc, r0	; <UNPREDICTABLE>
    18b0:	00134008 	andseq	r4, r3, r8
    18b4:	72000708 	andvc	r0, r0, #8, 14	; 0x200000
    18b8:	ff7f0b00 			; <UNDEFINED> instruction: 0xff7f0b00
    18bc:	00009f1a 	andeq	r9, r0, sl, lsl pc
    18c0:	00000000 	andeq	r0, r0, r0
    18c4:	12e20000 	rscne	r0, r2, #0
    18c8:	132b0800 	teqne	fp, #0, 16
    18cc:	00010800 	andeq	r0, r1, r0, lsl #16
    18d0:	00133050 	andseq	r3, r3, r0, asr r0
    18d4:	00133208 	andseq	r3, r3, r8, lsl #4
    18d8:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    18e4:	0800130e 	stmdaeq	r0, {r1, r2, r3, r8, r9, ip}
    18e8:	08001312 	stmdaeq	r0, {r1, r4, r8, r9, ip}
    18ec:	00720005 	rsbseq	r0, r2, r5
    18f0:	129f2740 	addsne	r2, pc, #64, 14	; 0x1000000
    18f4:	14080013 	strne	r0, [r8], #-19
    18f8:	07080013 	smladeq	r8, r3, r0, r0
    18fc:	40007200 	andmi	r7, r0, r0, lsl #4
    1900:	9f274027 	svcls	0x00274027
	...
    190c:	0800131e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, ip}
    1910:	08001322 	stmdaeq	r0, {r1, r5, r8, r9, ip}
    1914:	00720007 	rsbseq	r0, r2, r7
    1918:	2710000a 	ldrcs	r0, [r0, -sl]
    191c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1920:	00000000 	andeq	r0, r0, r0
    1924:	00136400 	andseq	r6, r3, r0, lsl #8
    1928:	00137608 	andseq	r7, r3, r8, lsl #12
    192c:	50000108 	andpl	r0, r0, r8, lsl #2
    1930:	08001376 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, ip}
    1934:	08001380 	stmdaeq	r0, {r7, r8, r9, ip}
    1938:	01f30004 	mvnseq	r0, r4
    193c:	00009f50 	andeq	r9, r0, r0, asr pc
    1940:	00000000 	andeq	r0, r0, r0
    1944:	13640000 	cmnne	r4, #0
    1948:	136e0800 	cmnne	lr, #0, 16
    194c:	00010800 	andeq	r0, r1, r0, lsl #16
    1950:	00136e51 	andseq	r6, r3, r1, asr lr
    1954:	00137408 	andseq	r7, r3, r8, lsl #8
    1958:	f3000408 	vshl.u8	d0, d8, d0
    195c:	749f5101 	ldrvc	r5, [pc], #257	; 1964 <__Stack_Size+0x1564>
    1960:	80080013 	andhi	r0, r8, r3, lsl r0
    1964:	01080013 	tsteq	r8, r3, lsl r0
    1968:	00005100 	andeq	r5, r0, r0, lsl #2
    196c:	00000000 	andeq	r0, r0, r0
    1970:	136a0000 	cmnne	sl, #0
    1974:	13700800 	cmnne	r0, #0, 16
    1978:	00010800 	andeq	r0, r1, r0, lsl #16
    197c:	00137053 	andseq	r7, r3, r3, asr r0
    1980:	00137408 	andseq	r7, r3, r8, lsl #8
    1984:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    1988:	0a029412 	beq	a69d8 <__Stack_Size+0xa65d8>
    198c:	9f1affff 	svcls	0x001affff
    1990:	08001374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip}
    1994:	08001380 	stmdaeq	r0, {r7, r8, r9, ip}
    1998:	00530001 	subseq	r0, r3, r1
    199c:	00000000 	andeq	r0, r0, r0
    19a0:	d2000000 	andle	r0, r0, #0
    19a4:	dc080013 	stcle	0, cr0, [r8], {19}
    19a8:	11080013 	tstne	r8, r3, lsl r0
    19ac:	0a007200 	beq	1e1b4 <__Stack_Size+0x1ddb4>
    19b0:	311affff 			; <UNDEFINED> instruction: 0x311affff
    19b4:	c0802324 	addgt	r2, r0, r4, lsr #6
    19b8:	9f048081 	svcls	0x00048081
    19bc:	00000493 	muleq	r0, r3, r4
    19c0:	00000000 	andeq	r0, r0, r0
    19c4:	14060000 	strne	r0, [r6], #-0
    19c8:	14160800 	ldrne	r0, [r6], #-2048	; 0x800
    19cc:	00020800 	andeq	r0, r2, r0, lsl #16
    19d0:	14169f32 	ldrne	r9, [r6], #-3890	; 0xf32
    19d4:	14180800 	ldrne	r0, [r8], #-2048	; 0x800
    19d8:	00010800 	andeq	r0, r1, r0, lsl #16
    19dc:	00141850 	andseq	r1, r4, r0, asr r8
    19e0:	00142408 	andseq	r2, r4, r8, lsl #8
    19e4:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    19e8:	0014289f 	mulseq	r4, pc, r8	; <UNPREDICTABLE>
    19ec:	00144608 	andseq	r4, r4, r8, lsl #12
    19f0:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    19f4:	0014509f 	mulseq	r4, pc, r0	; <UNPREDICTABLE>
    19f8:	00145608 	andseq	r5, r4, r8, lsl #12
    19fc:	50000108 	andpl	r0, r0, r8, lsl #2
    1a00:	08001456 	stmdaeq	r0, {r1, r2, r4, r6, sl, ip}
    1a04:	08001466 	stmdaeq	r0, {r1, r2, r5, r6, sl, ip}
    1a08:	9f320002 	svcls	0x00320002
    1a0c:	08001466 	stmdaeq	r0, {r1, r2, r5, r6, sl, ip}
    1a10:	08001468 	stmdaeq	r0, {r3, r5, r6, sl, ip}
    1a14:	68500001 	ldmdavs	r0, {r0}^
    1a18:	82080014 	andhi	r0, r8, #20
    1a1c:	02080014 	andeq	r0, r8, #20
    1a20:	829f3200 	addshi	r3, pc, #0, 4
    1a24:	84080014 	strhi	r0, [r8], #-20
    1a28:	01080014 	tsteq	r8, r4, lsl r0
    1a2c:	14845000 	strne	r5, [r4], #0
    1a30:	14900800 	ldrne	r0, [r0], #2048	; 0x800
    1a34:	00020800 	andeq	r0, r2, r0, lsl #16
    1a38:	14909f32 	ldrne	r9, [r0], #3890	; 0xf32
    1a3c:	14920800 	ldrne	r0, [r2], #2048	; 0x800
    1a40:	00010800 	andeq	r0, r1, r0, lsl #16
    1a44:	00149250 	andseq	r9, r4, r0, asr r2
    1a48:	0014a208 	andseq	sl, r4, r8, lsl #4
    1a4c:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    1a50:	0014a29f 	mulseq	r4, pc, r2	; <UNPREDICTABLE>
    1a54:	0014aa08 	andseq	sl, r4, r8, lsl #20
    1a58:	50000108 	andpl	r0, r0, r8, lsl #2
    1a5c:	080014c2 	stmdaeq	r0, {r1, r6, r7, sl, ip}
    1a60:	080014c4 	stmdaeq	r0, {r2, r6, r7, sl, ip}
    1a64:	00500001 	subseq	r0, r0, r1
    1a68:	00000000 	andeq	r0, r0, r0
    1a6c:	06000000 	streq	r0, [r0], -r0
    1a70:	ca080014 	bgt	201ac8 <__Stack_Size+0x2016c8>
    1a74:	01080014 	tsteq	r8, r4, lsl r0
    1a78:	00005400 	andeq	r5, r0, r0, lsl #8
    1a7c:	00000000 	andeq	r0, r0, r0
    1a80:	14aa0000 	strtne	r0, [sl], #0
    1a84:	14c20800 	strbne	r0, [r2], #2048	; 0x800
    1a88:	00020800 	andeq	r0, r2, r0, lsl #16
    1a8c:	14c49f36 	strbne	r9, [r4], #3894	; 0xf36
    1a90:	14ca0800 	strbne	r0, [sl], #2048	; 0x800
    1a94:	00010800 	andeq	r0, r1, r0, lsl #16
    1a98:	00000053 	andeq	r0, r0, r3, asr r0
    1a9c:	00000000 	andeq	r0, r0, r0
    1aa0:	0014ca00 	andseq	ip, r4, r0, lsl #20
    1aa4:	0014e008 	andseq	lr, r4, r8
    1aa8:	30000208 	andcc	r0, r0, r8, lsl #4
    1aac:	0014e09f 	mulseq	r4, pc, r0	; <UNPREDICTABLE>
    1ab0:	0014e208 	andseq	lr, r4, r8, lsl #4
    1ab4:	53000108 	movwpl	r0, #264	; 0x108
    1ab8:	080014e2 	stmdaeq	r0, {r1, r5, r6, r7, sl, ip}
    1abc:	080014ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, ip}
    1ac0:	9f300002 	svcls	0x00300002
    1ac4:	080014ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, ip}
    1ac8:	080014ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, ip}
    1acc:	ec530001 	mrrc	0, 0, r0, r3, cr1
    1ad0:	f4080014 	vst4.8	{d0-d3}, [r8 :64], r4
    1ad4:	02080014 	andeq	r0, r8, #20
    1ad8:	f49f3000 			; <UNDEFINED> instruction: 0xf49f3000
    1adc:	f6080014 			; <UNDEFINED> instruction: 0xf6080014
    1ae0:	01080014 	tsteq	r8, r4, lsl r0
    1ae4:	14f65300 	ldrbtne	r5, [r6], #768	; 0x300
    1ae8:	14fe0800 	ldrbtne	r0, [lr], #2048	; 0x800
    1aec:	00020800 	andeq	r0, r2, r0, lsl #16
    1af0:	14fe9f30 	ldrbtne	r9, [lr], #3888	; 0xf30
    1af4:	15000800 	strne	r0, [r0, #-2048]	; 0x800
    1af8:	00010800 	andeq	r0, r1, r0, lsl #16
    1afc:	00150053 	andseq	r0, r5, r3, asr r0
    1b00:	0015bc08 	andseq	fp, r5, r8, lsl #24
    1b04:	30000208 	andcc	r0, r0, r8, lsl #4
    1b08:	0015bc9f 	mulseq	r5, pc, ip	; <UNPREDICTABLE>
    1b0c:	0015c908 	andseq	ip, r5, r8, lsl #18
    1b10:	53000108 	movwpl	r0, #264	; 0x108
    1b14:	0800167c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip}
    1b18:	08001686 	stmdaeq	r0, {r1, r2, r7, r9, sl, ip}
    1b1c:	9f300002 	svcls	0x00300002
    1b20:	08001686 	stmdaeq	r0, {r1, r2, r7, r9, sl, ip}
    1b24:	0800169c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip}
    1b28:	11030006 	tstne	r3, r6
    1b2c:	9f080010 	svcls	0x00080010
	...
    1b38:	080015ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sl, ip}
    1b3c:	080015ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, ip}
    1b40:	9f300002 	svcls	0x00300002
    1b44:	080015da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, ip}
    1b48:	080015f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip}
    1b4c:	f4500001 			; <UNDEFINED> instruction: 0xf4500001
    1b50:	fc080015 	stc2	0, cr0, [r8], {21}
    1b54:	01080015 	tsteq	r8, r5, lsl r0
    1b58:	16005000 	strne	r5, [r0], -r0
    1b5c:	160e0800 	strne	r0, [lr], -r0, lsl #16
    1b60:	00010800 	andeq	r0, r1, r0, lsl #16
    1b64:	00166850 	andseq	r6, r6, r0, asr r8
    1b68:	00167408 	andseq	r7, r6, r8, lsl #8
    1b6c:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    1b78:	080014ca 	stmdaeq	r0, {r1, r3, r6, r7, sl, ip}
    1b7c:	080015c2 	stmdaeq	r0, {r1, r6, r7, r8, sl, ip}
    1b80:	ce540001 	cdpgt	0, 5, cr0, cr4, cr1, {0}
    1b84:	e4080015 	str	r0, [r8], #-21
    1b88:	01080015 	tsteq	r8, r5, lsl r0
    1b8c:	167c5400 	ldrbtne	r5, [ip], -r0, lsl #8
    1b90:	169c0800 	ldrne	r0, [ip], r0, lsl #16
    1b94:	00010800 	andeq	r0, r1, r0, lsl #16
    1b98:	00000054 	andeq	r0, r0, r4, asr r0
    1b9c:	00000000 	andeq	r0, r0, r0
    1ba0:	00155200 	andseq	r5, r5, r0, lsl #4
    1ba4:	00157e08 	andseq	r7, r5, r8, lsl #28
    1ba8:	51000108 	tstpl	r0, r8, lsl #2
	...
    1bb4:	08001552 	stmdaeq	r0, {r1, r4, r6, r8, sl, ip}
    1bb8:	0800157e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, ip}
    1bbc:	00730009 	rsbseq	r0, r3, r9
    1bc0:	081a7008 	ldmdaeq	sl, {r3, ip, sp, lr}
    1bc4:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    1bc8:	00000000 	andeq	r0, r0, r0
    1bcc:	ca000000 	bgt	1bd4 <__Stack_Size+0x17d4>
    1bd0:	74080014 	strvc	r0, [r8], #-20
    1bd4:	02080016 	andeq	r0, r8, #22
    1bd8:	7c9f3000 	ldcvc	0, cr3, [pc], {0}
    1bdc:	9c080016 	stcls	0, cr0, [r8], {22}
    1be0:	02080016 	andeq	r0, r8, #22
    1be4:	009f3000 	addseq	r3, pc, r0
    1be8:	00000000 	andeq	r0, r0, r0
    1bec:	6a000000 	bvs	1bf4 <__Stack_Size+0x17f4>
    1bf0:	7e080015 	mcrvc	0, 0, r0, cr8, cr5, {0}
    1bf4:	01080015 	tsteq	r8, r5, lsl r0
    1bf8:	00005200 	andeq	r5, r0, r0, lsl #4
    1bfc:	00000000 	andeq	r0, r0, r0
    1c00:	14d60000 	ldrbne	r0, [r6], #0
    1c04:	14d80800 	ldrbne	r0, [r8], #2048	; 0x800
    1c08:	00020800 	andeq	r0, r2, r0, lsl #16
    1c0c:	14d80373 	ldrbne	r0, [r8], #883	; 0x373
    1c10:	15000800 	strne	r0, [r0, #-2048]	; 0x800
    1c14:	00010800 	andeq	r0, r1, r0, lsl #16
    1c18:	0015bc52 	andseq	fp, r5, r2, asr ip
    1c1c:	0015be08 	andseq	fp, r5, r8, lsl #28
    1c20:	52000108 	andpl	r0, r0, #8, 2
	...
    1c2c:	080016a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, ip}
    1c30:	080016ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sl, ip}
    1c34:	ae530001 	cdpge	0, 5, cr0, cr3, cr1, {0}
    1c38:	bf080016 	svclt	0x00080016
    1c3c:	08080016 	stmdaeq	r8, {r1, r2, r4}
    1c40:	94087400 	strls	r7, [r8], #-1024	; 0x400
    1c44:	1aff0801 	bne	fffc3c50 <BootRAM+0xef343f1>
    1c48:	00172e9f 	mulseq	r7, pc, lr	; <UNPREDICTABLE>
    1c4c:	00173608 	andseq	r3, r7, r8, lsl #12
    1c50:	53000108 	movwpl	r0, #264	; 0x108
    1c54:	08001736 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, sl, ip}
    1c58:	0800173b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r8, r9, sl, ip}
    1c5c:	08740008 	ldmdaeq	r4!, {r3}^
    1c60:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    1c64:	173e9f1a 			; <UNDEFINED> instruction: 0x173e9f1a
    1c68:	17460800 	strbne	r0, [r6, -r0, lsl #16]
    1c6c:	00010800 	andeq	r0, r1, r0, lsl #16
    1c70:	00000053 	andeq	r0, r0, r3, asr r0
    1c74:	00000000 	andeq	r0, r0, r0
    1c78:	0016ac00 	andseq	sl, r6, r0, lsl #24
    1c7c:	00173008 	andseq	r3, r7, r8
    1c80:	74000308 	strvc	r0, [r0], #-776	; 0x308
    1c84:	00009f10 	andeq	r9, r0, r0, lsl pc
    1c88:	00000000 	andeq	r0, r0, r0
    1c8c:	16b00000 	ldrtne	r0, [r0], r0
    1c90:	16bf0800 	ldrtne	r0, [pc], r0, lsl #16
    1c94:	00010800 	andeq	r0, r1, r0, lsl #16
    1c98:	00000052 	andeq	r0, r0, r2, asr r0
    1c9c:	00000000 	andeq	r0, r0, r0
    1ca0:	0016c400 	andseq	ip, r6, r0, lsl #8
    1ca4:	0016cc08 	andseq	ip, r6, r8, lsl #24
    1ca8:	50000108 	andpl	r0, r0, r8, lsl #2
    1cac:	080016cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip}
    1cb0:	080016de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, ip}
    1cb4:	00570001 	subseq	r0, r7, r1
    1cb8:	00000000 	andeq	r0, r0, r0
    1cbc:	b6000000 	strlt	r0, [r0], -r0
    1cc0:	bc080016 	stclt	0, cr0, [r8], {22}
    1cc4:	16080016 			; <UNDEFINED> instruction: 0x16080016
    1cc8:	12007600 	andne	r7, r0, #0, 12
    1ccc:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    1cd0:	14160072 	ldrne	r0, [r6], #-114	; 0x72
    1cd4:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    1cd8:	0001282d 	andeq	r2, r1, sp, lsr #16
    1cdc:	bc9f1316 	ldclt	3, cr1, [pc], {22}
    1ce0:	de080016 	mcrle	0, 0, r0, cr8, cr6, {0}
    1ce4:	01080016 	tsteq	r8, r6, lsl r0
    1ce8:	00005600 	andeq	r5, r0, r0, lsl #12
    1cec:	00000000 	andeq	r0, r0, r0
    1cf0:	17640000 	strbne	r0, [r4, -r0]!
    1cf4:	17900800 	ldrne	r0, [r0, r0, lsl #16]
    1cf8:	00010800 	andeq	r0, r1, r0, lsl #16
    1cfc:	00179050 	andseq	r9, r7, r0, asr r0
    1d00:	00179c08 	andseq	r9, r7, r8, lsl #24
    1d04:	f3000408 	vshl.u8	d0, d8, d0
    1d08:	009f5001 	addseq	r5, pc, r1
    1d0c:	00000000 	andeq	r0, r0, r0
    1d10:	6a000000 	bvs	1d18 <__Stack_Size+0x1918>
    1d14:	6c080017 	stcvs	0, cr0, [r8], {23}
    1d18:	02080017 	andeq	r0, r8, #23
    1d1c:	6c9f3000 	ldcvs	0, cr3, [pc], {0}
    1d20:	8c080017 	stchi	0, cr0, [r8], {23}
    1d24:	01080017 	tsteq	r8, r7, lsl r0
    1d28:	00005300 	andeq	r5, r0, r0, lsl #6
    1d2c:	00000000 	andeq	r0, r0, r0
    1d30:	176a0000 	strbne	r0, [sl, -r0]!
    1d34:	17940800 	ldrne	r0, [r4, r0, lsl #16]
    1d38:	00010800 	andeq	r0, r1, r0, lsl #16
    1d3c:	00000054 	andeq	r0, r0, r4, asr r0
    1d40:	00000000 	andeq	r0, r0, r0
    1d44:	0017a400 	andseq	sl, r7, r0, lsl #8
    1d48:	0017af08 	andseq	sl, r7, r8, lsl #30
    1d4c:	52000108 	andpl	r0, r0, #8, 2
    1d50:	080017b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, ip}
    1d54:	080017b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl, ip}
    1d58:	b6530001 	ldrblt	r0, [r3], -r1
    1d5c:	bc080017 	stclt	0, cr0, [r8], {23}
    1d60:	01080017 	tsteq	r8, r7, lsl r0
    1d64:	17bc5200 	ldrne	r5, [ip, r0, lsl #4]!
    1d68:	17cb0800 	strbne	r0, [fp, r0, lsl #16]
    1d6c:	00080800 	andeq	r0, r8, r0, lsl #16
    1d70:	01940873 	orrseq	r0, r4, r3, ror r8
    1d74:	9f1aff08 	svcls	0x001aff08
    1d78:	080017de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, ip}
    1d7c:	080017e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, r9, sl, ip}
    1d80:	00530001 	subseq	r0, r3, r1
    1d84:	00000000 	andeq	r0, r0, r0
    1d88:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    1d8c:	10080017 	andne	r0, r8, r7, lsl r0
    1d90:	01080018 	tsteq	r8, r8, lsl r0
    1d94:	18105000 	ldmdane	r0, {ip, lr}
    1d98:	18120800 	ldmdane	r2, {fp}
    1d9c:	00030800 	andeq	r0, r3, r0, lsl #16
    1da0:	129f7e70 	addsne	r7, pc, #112, 28	; 0x700
    1da4:	22080018 	andcs	r0, r8, #24
    1da8:	03080018 	movweq	r0, #32792	; 0x8018
    1dac:	9f7f7000 	svcls	0x007f7000
    1db0:	08001822 	stmdaeq	r0, {r1, r5, fp, ip}
    1db4:	08001826 	stmdaeq	r0, {r1, r2, r5, fp, ip}
    1db8:	26500001 	ldrbcs	r0, [r0], -r1
    1dbc:	28080018 	stmdacs	r8, {r3, r4}
    1dc0:	03080018 	movweq	r0, #32792	; 0x8018
    1dc4:	9f7e7000 	svcls	0x007e7000
	...
    1dd0:	080017f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, ip}
    1dd4:	080017fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, ip}
    1dd8:	fe510001 	cdp2	0, 5, cr0, cr1, cr1, {0}
    1ddc:	28080017 	stmdacs	r8, {r0, r1, r2, r4}
    1de0:	04080018 	streq	r0, [r8], #-24
    1de4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1de8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1dec:	00000000 	andeq	r0, r0, r0
    1df0:	0017f800 	andseq	pc, r7, r0, lsl #16
    1df4:	00180008 	andseq	r0, r8, r8
    1df8:	52000108 	andpl	r0, r0, #8, 2
    1dfc:	08001800 	stmdaeq	r0, {fp, ip}
    1e00:	08001828 	stmdaeq	r0, {r3, r5, fp, ip}
    1e04:	01f30004 	mvnseq	r0, r4
    1e08:	00009f52 	andeq	r9, r0, r2, asr pc
    1e0c:	00000000 	andeq	r0, r0, r0
    1e10:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    1e14:	180a0800 	stmdane	sl, {fp}
    1e18:	00010800 	andeq	r0, r1, r0, lsl #16
    1e1c:	00180a52 	andseq	r0, r8, r2, asr sl
    1e20:	00182208 	andseq	r2, r8, r8, lsl #4
    1e24:	f3000f08 	vpmax.f32	d0, d0, d8
    1e28:	ff0a5201 			; <UNDEFINED> instruction: 0xff0a5201
    1e2c:	01231aff 	strdeq	r1, [r3, -pc]!
    1e30:	00732631 	rsbseq	r2, r3, r1, lsr r6
    1e34:	18229f1c 	stmdane	r2!, {r2, r3, r4, r8, r9, sl, fp, ip, pc}
    1e38:	18240800 	stmdane	r4!, {fp}
    1e3c:	00100800 	andseq	r0, r0, r0, lsl #16
    1e40:	0a5201f3 	beq	1482614 <__Stack_Size+0x1482214>
    1e44:	231affff 	tstcs	sl, #1020	; 0x3fc
    1e48:	73263101 	teqvc	r6, #1073741824	; 0x40000000
    1e4c:	9f222000 	svcls	0x00222000
    1e50:	08001824 	stmdaeq	r0, {r2, r5, fp, ip}
    1e54:	08001828 	stmdaeq	r0, {r3, r5, fp, ip}
    1e58:	01f3000f 	mvnseq	r0, pc
    1e5c:	ffff0a52 			; <UNDEFINED> instruction: 0xffff0a52
    1e60:	3101231a 	tstcc	r1, sl, lsl r3
    1e64:	1c007326 	stcne	3, cr7, [r0], {38}	; 0x26
    1e68:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1e6c:	00000000 	andeq	r0, r0, r0
    1e70:	00181200 	andseq	r1, r8, r0, lsl #4
    1e74:	00181a08 	andseq	r1, r8, r8, lsl #20
    1e78:	70000808 	andvc	r0, r0, r8, lsl #16
    1e7c:	0801947e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sl, ip, pc}
    1e80:	1a9f1aff 	bne	fe7c8a84 <BootRAM+0xd739225>
    1e84:	1e080018 	mcrne	0, 0, r0, cr8, cr8, {0}
    1e88:	01080018 	tsteq	r8, r8, lsl r0
    1e8c:	181e5400 	ldmdane	lr, {sl, ip, lr}
    1e90:	18220800 	stmdane	r2!, {fp}
    1e94:	00080800 	andeq	r0, r8, r0, lsl #16
    1e98:	01947e70 	orrseq	r7, r4, r0, ror lr
    1e9c:	9f1aff08 	svcls	0x001aff08
	...
    1ea8:	08001812 	stmdaeq	r0, {r1, r4, fp, ip}
    1eac:	08001822 	stmdaeq	r0, {r1, r5, fp, ip}
    1eb0:	7f700012 	svcvc	0x00700012
    1eb4:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    1eb8:	7024381a 	eorvc	r3, r4, sl, lsl r8
    1ebc:	0801947e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sl, ip, pc}
    1ec0:	9f211aff 	svcls	0x00211aff
	...
    1ecc:	08001808 	stmdaeq	r0, {r3, fp, ip}
    1ed0:	0800180a 	stmdaeq	r0, {r1, r3, fp, ip}
    1ed4:	22510001 	subscs	r0, r1, #1
    1ed8:	24080018 	strcs	r0, [r8], #-24
    1edc:	0a080018 	beq	201f44 <__Stack_Size+0x201b44>
    1ee0:	32007300 	andcc	r7, r0, #0, 6
    1ee4:	22007124 	andcs	r7, r0, #36, 2
    1ee8:	249f0423 	ldrcs	r0, [pc], #1059	; 1ef0 <__Stack_Size+0x1af0>
    1eec:	26080018 			; <UNDEFINED> instruction: 0x26080018
    1ef0:	0a080018 	beq	201f58 <__Stack_Size+0x201b58>
    1ef4:	327f7300 	rsbscc	r7, pc, #0, 6
    1ef8:	22007124 	andcs	r7, r0, #36, 2
    1efc:	009f0423 	addseq	r0, pc, r3, lsr #8
    1f00:	00000000 	andeq	r0, r0, r0
    1f04:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1f08:	3a080018 	bcc	201f70 <__Stack_Size+0x201b70>
    1f0c:	01080018 	tsteq	r8, r8, lsl r0
    1f10:	18465000 	stmdane	r6, {ip, lr}^
    1f14:	18480800 	stmdane	r8, {fp}^
    1f18:	000a0800 	andeq	r0, sl, r0, lsl #16
    1f1c:	24310073 	ldrtcs	r0, [r1], #-115	; 0x73
    1f20:	23220070 	teqcs	r2, #112	; 0x70
    1f24:	18489f02 	stmdane	r8, {r1, r8, r9, sl, fp, ip, pc}^
    1f28:	184a0800 	stmdane	sl, {fp}^
    1f2c:	000a0800 	andeq	r0, sl, r0, lsl #16
    1f30:	24317f73 	ldrtcs	r7, [r1], #-3955	; 0xf73
    1f34:	23220070 	teqcs	r2, #112	; 0x70
    1f38:	00009f02 	andeq	r9, r0, r2, lsl #30
    1f3c:	00000000 	andeq	r0, r0, r0
    1f40:	18280000 	stmdane	r8!, {}	; <UNPREDICTABLE>
    1f44:	182e0800 	stmdane	lr!, {fp}
    1f48:	00010800 	andeq	r0, r1, r0, lsl #16
    1f4c:	00182e51 	andseq	r2, r8, r1, asr lr
    1f50:	00184c08 	andseq	r4, r8, r8, lsl #24
    1f54:	f3000408 	vshl.u8	d0, d8, d0
    1f58:	009f5101 	addseq	r5, pc, r1, lsl #2
    1f5c:	00000000 	andeq	r0, r0, r0
    1f60:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1f64:	30080018 	andcc	r0, r8, r8, lsl r0
    1f68:	01080018 	tsteq	r8, r8, lsl r0
    1f6c:	18305200 	ldmdane	r0!, {r9, ip, lr}
    1f70:	184c0800 	stmdane	ip, {fp}^
    1f74:	00040800 	andeq	r0, r4, r0, lsl #16
    1f78:	9f5201f3 	svcls	0x005201f3
	...
    1f84:	08001838 	stmdaeq	r0, {r3, r4, r5, fp, ip}
    1f88:	0800183a 	stmdaeq	r0, {r1, r3, r4, r5, fp, ip}
    1f8c:	3a520001 	bcc	1481f98 <__Stack_Size+0x1481b98>
    1f90:	46080018 			; <UNDEFINED> instruction: 0x46080018
    1f94:	0f080018 	svceq	0x00080018
    1f98:	5201f300 	andpl	pc, r1, #0, 6
    1f9c:	1affff0a 	bne	1bcc <__Stack_Size+0x17cc>
    1fa0:	26310123 	ldrtcs	r0, [r1], -r3, lsr #2
    1fa4:	9f1c0073 	svcls	0x001c0073
    1fa8:	08001846 	stmdaeq	r0, {r1, r2, r6, fp, ip}
    1fac:	08001848 	stmdaeq	r0, {r3, r6, fp, ip}
    1fb0:	01f30010 	mvnseq	r0, r0, lsl r0
    1fb4:	ffff0a52 			; <UNDEFINED> instruction: 0xffff0a52
    1fb8:	3101231a 	tstcc	r1, sl, lsl r3
    1fbc:	20007326 	andcs	r7, r0, r6, lsr #6
    1fc0:	18489f22 	stmdane	r8, {r1, r5, r8, r9, sl, fp, ip, pc}^
    1fc4:	184c0800 	stmdane	ip, {fp}^
    1fc8:	000f0800 	andeq	r0, pc, r0, lsl #16
    1fcc:	0a5201f3 	beq	14827a0 <__Stack_Size+0x14823a0>
    1fd0:	231affff 	tstcs	sl, #1020	; 0x3fc
    1fd4:	73263101 	teqvc	r6, #1073741824	; 0x40000000
    1fd8:	009f1c00 	addseq	r1, pc, r0, lsl #24
    1fdc:	00000000 	andeq	r0, r0, r0
    1fe0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1fe4:	3a080018 	bcc	20204c <__Stack_Size+0x201c4c>
    1fe8:	01080018 	tsteq	r8, r8, lsl r0
    1fec:	183e5100 	ldmdane	lr!, {r8, ip, lr}
    1ff0:	18480800 	stmdane	r8, {fp}^
    1ff4:	000a0800 	andeq	r0, sl, r0, lsl #16
    1ff8:	24320073 	ldrtcs	r0, [r2], #-115	; 0x73
    1ffc:	23220071 	teqcs	r2, #113	; 0x71
    2000:	18489f04 	stmdane	r8, {r2, r8, r9, sl, fp, ip, pc}^
    2004:	184a0800 	stmdane	sl, {fp}^
    2008:	000a0800 	andeq	r0, sl, r0, lsl #16
    200c:	24327f73 	ldrtcs	r7, [r2], #-3955	; 0xf73
    2010:	23220071 	teqcs	r2, #113	; 0x71
    2014:	00009f04 	andeq	r9, r0, r4, lsl #30
    2018:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	00000000 	andeq	r0, r0, r0
   8:	080000f0 	stmdaeq	r0, {r4, r5, r6, r7}
   c:	08000138 	stmdaeq	r0, {r3, r4, r5, r8}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	08000138 	stmdaeq	r0, {r3, r4, r5, r8}
  14:	0800013c 	stmdaeq	r0, {r2, r3, r4, r5, r8}
	...
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	0800013c 	stmdaeq	r0, {r2, r3, r4, r5, r8}
  24:	0800013e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8}
  28:	0800013e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8}
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	08000140 	stmdaeq	r0, {r6, r8}
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	08000140 	stmdaeq	r0, {r6, r8}
  34:	08000142 	stmdaeq	r0, {r1, r6, r8}
  38:	08000142 	stmdaeq	r0, {r1, r6, r8}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	0800014c 	stmdaeq	r0, {r2, r3, r6, r8}
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	0800014e 	stmdaeq	r0, {r1, r2, r3, r6, r8}
  48:	08000150 	stmdaeq	r0, {r4, r6, r8}
  4c:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	08000168 	stmdaeq	r0, {r3, r5, r6, r8}
  54:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
  58:	0800016a 	stmdaeq	r0, {r1, r3, r5, r6, r8}
  5c:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  60:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  64:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
  68:	0800016e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8}
  6c:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
  70:	08000170 	stmdaeq	r0, {r4, r5, r6, r8}
  74:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
  78:	08000172 	stmdaeq	r0, {r1, r4, r5, r6, r8}
  7c:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  80:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  84:	08000180 	stmdaeq	r0, {r7, r8}
  88:	08000180 	stmdaeq	r0, {r7, r8}
  8c:	08000228 	stmdaeq	r0, {r3, r5, r9}
  90:	08000228 	stmdaeq	r0, {r3, r5, r9}
  94:	08000288 	stmdaeq	r0, {r3, r7, r9}
  98:	08000288 	stmdaeq	r0, {r3, r7, r9}
  9c:	08000294 	stmdaeq	r0, {r2, r4, r7, r9}
  a0:	08000294 	stmdaeq	r0, {r2, r4, r7, r9}
  a4:	080002a0 	stmdaeq	r0, {r5, r7, r9}
  a8:	080002a0 	stmdaeq	r0, {r5, r7, r9}
  ac:	080002c0 	stmdaeq	r0, {r6, r7, r9}
  b0:	080002c0 	stmdaeq	r0, {r6, r7, r9}
  b4:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
  b8:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
  bc:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
  c0:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
  c4:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
  c8:	00000001 	andeq	r0, r0, r1
  cc:	00000001 	andeq	r0, r0, r1
  d0:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
  d4:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
  d8:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
  dc:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
  e0:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
  e4:	08000428 	stmdaeq	r0, {r3, r5, sl}
  e8:	08000428 	stmdaeq	r0, {r3, r5, sl}
  ec:	08000450 	stmdaeq	r0, {r4, r6, sl}
  f0:	08000450 	stmdaeq	r0, {r4, r6, sl}
  f4:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
  f8:	0800046c 	stmdaeq	r0, {r2, r3, r5, r6, sl}
  fc:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
 100:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
 104:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
 108:	08000494 	stmdaeq	r0, {r2, r4, r7, sl}
 10c:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
 110:	080004d4 	stmdaeq	r0, {r2, r4, r6, r7, sl}
 114:	080004f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl}
 118:	080004f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl}
 11c:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
	...
 128:	080005ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl}
 12c:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
	...
 138:	0800083a 	stmdaeq	r0, {r1, r3, r4, r5, fp}
 13c:	0800083e 	stmdaeq	r0, {r1, r2, r3, r4, r5, fp}
 140:	08000840 	stmdaeq	r0, {r6, fp}
 144:	08000842 	stmdaeq	r0, {r1, r6, fp}
	...
 150:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 154:	0800063a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl}
 158:	00000001 	andeq	r0, r0, r1
 15c:	00000001 	andeq	r0, r0, r1
 160:	0800063a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl}
 164:	0800063e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, sl}
 168:	00000001 	andeq	r0, r0, r1
 16c:	00000001 	andeq	r0, r0, r1
 170:	08000640 	stmdaeq	r0, {r6, r9, sl}
 174:	08000688 	stmdaeq	r0, {r3, r7, r9, sl}
 178:	08000688 	stmdaeq	r0, {r3, r7, r9, sl}
 17c:	080006e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl}
 180:	080006e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl}
 184:	080006ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl}
 188:	080006ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl}
 18c:	08000708 	stmdaeq	r0, {r3, r8, r9, sl}
 190:	08000708 	stmdaeq	r0, {r3, r8, r9, sl}
 194:	0800071c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl}
 198:	0800071c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl}
 19c:	08000734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl}
 1a0:	08000734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl}
 1a4:	08000760 	stmdaeq	r0, {r5, r6, r8, r9, sl}
 1a8:	08000760 	stmdaeq	r0, {r5, r6, r8, r9, sl}
 1ac:	080007a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl}
 1b0:	080007a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl}
 1b4:	08000814 	stmdaeq	r0, {r2, r4, fp}
 1b8:	08000814 	stmdaeq	r0, {r2, r4, fp}
 1bc:	08000838 	stmdaeq	r0, {r3, r4, r5, fp}
 1c0:	08000838 	stmdaeq	r0, {r3, r4, r5, fp}
 1c4:	08000860 	stmdaeq	r0, {r5, r6, fp}
 1c8:	08000860 	stmdaeq	r0, {r5, r6, fp}
 1cc:	08000874 	stmdaeq	r0, {r2, r4, r5, r6, fp}
 1d0:	08000874 	stmdaeq	r0, {r2, r4, r5, r6, fp}
 1d4:	080008a8 	stmdaeq	r0, {r3, r5, r7, fp}
 1d8:	00000001 	andeq	r0, r0, r1
 1dc:	00000001 	andeq	r0, r0, r1
 1e0:	080008a8 	stmdaeq	r0, {r3, r5, r7, fp}
 1e4:	080008f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp}
 1e8:	080008f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp}
 1ec:	08000900 	stmdaeq	r0, {r8, fp}
 1f0:	08000900 	stmdaeq	r0, {r8, fp}
 1f4:	08000918 	stmdaeq	r0, {r3, r4, r8, fp}
 1f8:	08000918 	stmdaeq	r0, {r3, r4, r8, fp}
 1fc:	0800092a 	stmdaeq	r0, {r1, r3, r5, r8, fp}
 200:	0800092c 	stmdaeq	r0, {r2, r3, r5, r8, fp}
 204:	0800093c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp}
 208:	0800093c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp}
 20c:	08000954 	stmdaeq	r0, {r2, r4, r6, r8, fp}
	...
 218:	08000954 	stmdaeq	r0, {r2, r4, r6, r8, fp}
 21c:	080009b0 	stmdaeq	r0, {r4, r5, r7, r8, fp}
 220:	080009b0 	stmdaeq	r0, {r4, r5, r7, r8, fp}
 224:	080009f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp}
 228:	00000001 	andeq	r0, r0, r1
 22c:	00000001 	andeq	r0, r0, r1
 230:	080009f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp}
 234:	08000a0c 	stmdaeq	r0, {r2, r3, r9, fp}
 238:	08000a0c 	stmdaeq	r0, {r2, r3, r9, fp}
 23c:	08000a24 	stmdaeq	r0, {r2, r5, r9, fp}
 240:	08000a24 	stmdaeq	r0, {r2, r5, r9, fp}
 244:	08000a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp}
 248:	08000a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp}
 24c:	08000a80 	stmdaeq	r0, {r7, r9, fp}
 250:	08000a80 	stmdaeq	r0, {r7, r9, fp}
 254:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
 258:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
 25c:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
 260:	00000001 	andeq	r0, r0, r1
 264:	00000001 	andeq	r0, r0, r1
 268:	00000001 	andeq	r0, r0, r1
 26c:	00000001 	andeq	r0, r0, r1
 270:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
 274:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
 278:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
 27c:	08000d28 	stmdaeq	r0, {r3, r5, r8, sl, fp}
	...
 288:	00000001 	andeq	r0, r0, r1
 28c:	00000001 	andeq	r0, r0, r1
 290:	00000001 	andeq	r0, r0, r1
 294:	00000001 	andeq	r0, r0, r1
	...
 2a0:	08000e22 	stmdaeq	r0, {r1, r5, r9, sl, fp}
 2a4:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
 2a8:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
 2ac:	08000e60 	stmdaeq	r0, {r5, r6, r9, sl, fp}
	...
 2b8:	00000001 	andeq	r0, r0, r1
 2bc:	00000001 	andeq	r0, r0, r1
 2c0:	00000001 	andeq	r0, r0, r1
 2c4:	00000001 	andeq	r0, r0, r1
	...
 2d0:	00000001 	andeq	r0, r0, r1
 2d4:	00000001 	andeq	r0, r0, r1
 2d8:	00000001 	andeq	r0, r0, r1
 2dc:	00000001 	andeq	r0, r0, r1
	...
 2e8:	00000001 	andeq	r0, r0, r1
 2ec:	00000001 	andeq	r0, r0, r1
 2f0:	00000001 	andeq	r0, r0, r1
 2f4:	00000001 	andeq	r0, r0, r1
 2f8:	00000001 	andeq	r0, r0, r1
 2fc:	00000001 	andeq	r0, r0, r1
	...
 308:	00000001 	andeq	r0, r0, r1
 30c:	00000001 	andeq	r0, r0, r1
 310:	00000001 	andeq	r0, r0, r1
 314:	00000001 	andeq	r0, r0, r1
	...
 320:	00000001 	andeq	r0, r0, r1
 324:	00000001 	andeq	r0, r0, r1
 328:	00000001 	andeq	r0, r0, r1
 32c:	00000001 	andeq	r0, r0, r1
	...
 338:	00000001 	andeq	r0, r0, r1
 33c:	00000001 	andeq	r0, r0, r1
 340:	00000001 	andeq	r0, r0, r1
 344:	00000001 	andeq	r0, r0, r1
 348:	00000001 	andeq	r0, r0, r1
 34c:	00000001 	andeq	r0, r0, r1
 350:	00000001 	andeq	r0, r0, r1
 354:	00000001 	andeq	r0, r0, r1
 358:	00000001 	andeq	r0, r0, r1
 35c:	00000001 	andeq	r0, r0, r1
 360:	00000001 	andeq	r0, r0, r1
 364:	00000001 	andeq	r0, r0, r1
 368:	00000001 	andeq	r0, r0, r1
 36c:	00000001 	andeq	r0, r0, r1
 370:	00000001 	andeq	r0, r0, r1
 374:	00000001 	andeq	r0, r0, r1
 378:	00000001 	andeq	r0, r0, r1
 37c:	00000001 	andeq	r0, r0, r1
 380:	00000001 	andeq	r0, r0, r1
 384:	00000001 	andeq	r0, r0, r1
 388:	00000001 	andeq	r0, r0, r1
 38c:	00000001 	andeq	r0, r0, r1
 390:	00000001 	andeq	r0, r0, r1
 394:	00000001 	andeq	r0, r0, r1
 398:	00000001 	andeq	r0, r0, r1
 39c:	00000001 	andeq	r0, r0, r1
 3a0:	08000d28 	stmdaeq	r0, {r3, r5, r8, sl, fp}
 3a4:	08000d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp}
 3a8:	00000001 	andeq	r0, r0, r1
 3ac:	00000001 	andeq	r0, r0, r1
 3b0:	00000001 	andeq	r0, r0, r1
 3b4:	00000001 	andeq	r0, r0, r1
 3b8:	00000001 	andeq	r0, r0, r1
 3bc:	00000001 	andeq	r0, r0, r1
 3c0:	00000001 	andeq	r0, r0, r1
 3c4:	00000001 	andeq	r0, r0, r1
 3c8:	00000001 	andeq	r0, r0, r1
 3cc:	00000001 	andeq	r0, r0, r1
 3d0:	08000d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp}
 3d4:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
 3d8:	00000001 	andeq	r0, r0, r1
 3dc:	00000001 	andeq	r0, r0, r1
 3e0:	00000001 	andeq	r0, r0, r1
 3e4:	00000001 	andeq	r0, r0, r1
 3e8:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
 3ec:	08000d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp}
 3f0:	00000001 	andeq	r0, r0, r1
 3f4:	00000001 	andeq	r0, r0, r1
 3f8:	00000001 	andeq	r0, r0, r1
 3fc:	00000001 	andeq	r0, r0, r1
 400:	00000001 	andeq	r0, r0, r1
 404:	00000001 	andeq	r0, r0, r1
 408:	00000001 	andeq	r0, r0, r1
 40c:	00000001 	andeq	r0, r0, r1
 410:	00000001 	andeq	r0, r0, r1
 414:	00000001 	andeq	r0, r0, r1
 418:	00000001 	andeq	r0, r0, r1
 41c:	00000001 	andeq	r0, r0, r1
 420:	00000001 	andeq	r0, r0, r1
 424:	00000001 	andeq	r0, r0, r1
 428:	00000001 	andeq	r0, r0, r1
 42c:	00000001 	andeq	r0, r0, r1
 430:	00000001 	andeq	r0, r0, r1
 434:	00000001 	andeq	r0, r0, r1
 438:	08000d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp}
 43c:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 440:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 444:	08000dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp}
 448:	00000001 	andeq	r0, r0, r1
 44c:	00000001 	andeq	r0, r0, r1
 450:	00000001 	andeq	r0, r0, r1
 454:	00000001 	andeq	r0, r0, r1
 458:	00000001 	andeq	r0, r0, r1
 45c:	00000001 	andeq	r0, r0, r1
 460:	00000001 	andeq	r0, r0, r1
 464:	00000001 	andeq	r0, r0, r1
 468:	08000dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp}
 46c:	08000de8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, fp}
 470:	08000de8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, fp}
 474:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
 478:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
 47c:	08000e20 	stmdaeq	r0, {r5, r9, sl, fp}
 480:	00000001 	andeq	r0, r0, r1
 484:	00000001 	andeq	r0, r0, r1
 488:	08000e20 	stmdaeq	r0, {r5, r9, sl, fp}
 48c:	08000e60 	stmdaeq	r0, {r5, r6, r9, sl, fp}
 490:	00000001 	andeq	r0, r0, r1
 494:	00000001 	andeq	r0, r0, r1
 498:	00000001 	andeq	r0, r0, r1
 49c:	00000001 	andeq	r0, r0, r1
 4a0:	00000001 	andeq	r0, r0, r1
 4a4:	00000001 	andeq	r0, r0, r1
 4a8:	00000001 	andeq	r0, r0, r1
 4ac:	00000001 	andeq	r0, r0, r1
 4b0:	00000001 	andeq	r0, r0, r1
 4b4:	00000001 	andeq	r0, r0, r1
 4b8:	00000001 	andeq	r0, r0, r1
 4bc:	00000001 	andeq	r0, r0, r1
 4c0:	00000001 	andeq	r0, r0, r1
 4c4:	00000001 	andeq	r0, r0, r1
 4c8:	00000001 	andeq	r0, r0, r1
 4cc:	00000001 	andeq	r0, r0, r1
 4d0:	00000001 	andeq	r0, r0, r1
 4d4:	00000001 	andeq	r0, r0, r1
 4d8:	00000001 	andeq	r0, r0, r1
 4dc:	00000001 	andeq	r0, r0, r1
 4e0:	00000001 	andeq	r0, r0, r1
 4e4:	00000001 	andeq	r0, r0, r1
 4e8:	00000001 	andeq	r0, r0, r1
 4ec:	00000001 	andeq	r0, r0, r1
 4f0:	00000001 	andeq	r0, r0, r1
 4f4:	00000001 	andeq	r0, r0, r1
 4f8:	00000001 	andeq	r0, r0, r1
 4fc:	00000001 	andeq	r0, r0, r1
 500:	00000001 	andeq	r0, r0, r1
 504:	00000001 	andeq	r0, r0, r1
 508:	00000001 	andeq	r0, r0, r1
 50c:	00000001 	andeq	r0, r0, r1
	...
 518:	08000e60 	stmdaeq	r0, {r5, r6, r9, sl, fp}
 51c:	08000fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp}
 520:	00000001 	andeq	r0, r0, r1
 524:	00000001 	andeq	r0, r0, r1
	...
 530:	08000fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp}
 534:	08000fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp}
	...
 540:	080012f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip}
 544:	080012fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, ip}
 548:	08001300 	stmdaeq	r0, {r8, r9, ip}
 54c:	08001302 	stmdaeq	r0, {r1, r8, r9, ip}
 550:	08001304 	stmdaeq	r0, {r2, r8, r9, ip}
 554:	08001314 	stmdaeq	r0, {r2, r4, r8, r9, ip}
	...
 560:	080014ca 	stmdaeq	r0, {r1, r3, r6, r7, sl, ip}
 564:	08001674 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, ip}
 568:	0800167c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip}
 56c:	0800169c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip}
	...
 578:	08000fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp}
 57c:	08001010 	stmdaeq	r0, {r4, ip}
 580:	08001010 	stmdaeq	r0, {r4, ip}
 584:	08001034 	stmdaeq	r0, {r2, r4, r5, ip}
 588:	08001034 	stmdaeq	r0, {r2, r4, r5, ip}
 58c:	080010c4 	stmdaeq	r0, {r2, r6, r7, ip}
 590:	080010c4 	stmdaeq	r0, {r2, r6, r7, ip}
 594:	0800116c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip}
 598:	0800116c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip}
 59c:	080011a4 	stmdaeq	r0, {r2, r5, r7, r8, ip}
 5a0:	080011a4 	stmdaeq	r0, {r2, r5, r7, r8, ip}
 5a4:	080011ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip}
 5a8:	080011ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip}
 5ac:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
 5b0:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
 5b4:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
 5b8:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
 5bc:	08001364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip}
 5c0:	08001364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip}
 5c4:	08001380 	stmdaeq	r0, {r7, r8, r9, ip}
 5c8:	08001380 	stmdaeq	r0, {r7, r8, r9, ip}
 5cc:	080013c0 	stmdaeq	r0, {r6, r7, r8, r9, ip}
 5d0:	080013c0 	stmdaeq	r0, {r6, r7, r8, r9, ip}
 5d4:	0800169c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip}
 5d8:	0800169c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip}
 5dc:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
 5e0:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
 5e4:	0800179c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip}
 5e8:	0800179c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip}
 5ec:	080017f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, ip}
 5f0:	00000001 	andeq	r0, r0, r1
 5f4:	00000001 	andeq	r0, r0, r1
	...
 600:	080017f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, ip}
 604:	08001828 	stmdaeq	r0, {r3, r5, fp, ip}
 608:	08001828 	stmdaeq	r0, {r3, r5, fp, ip}
 60c:	0800184c 	stmdaeq	r0, {r2, r3, r6, fp, ip}
	...
