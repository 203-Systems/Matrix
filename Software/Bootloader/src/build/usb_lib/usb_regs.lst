   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"usb_regs.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.SetCNTR,"ax",%progbits
  19              		.align	1
  20              		.global	SetCNTR
  21              		.thumb
  22              		.thumb_func
  24              	SetCNTR:
  25              	.LFB0:
  26              		.file 1 "usb_lib/usb_regs.c"
   1:usb_lib/usb_regs.c **** /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
   2:usb_lib/usb_regs.c **** * File Name          : usb_regs.c
   3:usb_lib/usb_regs.c **** * Author             : MCD Application Team
   4:usb_lib/usb_regs.c **** * Version            : V2.2.1
   5:usb_lib/usb_regs.c **** * Date               : 09/22/2008
   6:usb_lib/usb_regs.c **** * Description        : Interface functions to USB cell registers
   7:usb_lib/usb_regs.c **** ********************************************************************************
   8:usb_lib/usb_regs.c **** * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
   9:usb_lib/usb_regs.c **** * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
  10:usb_lib/usb_regs.c **** * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
  11:usb_lib/usb_regs.c **** * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
  12:usb_lib/usb_regs.c **** * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
  13:usb_lib/usb_regs.c **** * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  14:usb_lib/usb_regs.c **** *******************************************************************************/
  15:usb_lib/usb_regs.c **** 
  16:usb_lib/usb_regs.c **** /* Includes ------------------------------------------------------------------*/
  17:usb_lib/usb_regs.c **** #include "usb_lib.h"
  18:usb_lib/usb_regs.c **** 
  19:usb_lib/usb_regs.c **** /* Private typedef -----------------------------------------------------------*/
  20:usb_lib/usb_regs.c **** /* Private define ------------------------------------------------------------*/
  21:usb_lib/usb_regs.c **** /* Private macro -------------------------------------------------------------*/
  22:usb_lib/usb_regs.c **** /* Private variables ---------------------------------------------------------*/
  23:usb_lib/usb_regs.c **** /* Extern variables ----------------------------------------------------------*/
  24:usb_lib/usb_regs.c **** /* Private function prototypes -----------------------------------------------*/
  25:usb_lib/usb_regs.c **** /* Private functions ---------------------------------------------------------*/
  26:usb_lib/usb_regs.c **** 
  27:usb_lib/usb_regs.c **** /*******************************************************************************
  28:usb_lib/usb_regs.c **** * Function Name  : SetCNTR.
  29:usb_lib/usb_regs.c **** * Description    : Set the CNTR register value.
  30:usb_lib/usb_regs.c **** * Input          : wRegValue: new register value.
  31:usb_lib/usb_regs.c **** * Output         : None.
  32:usb_lib/usb_regs.c **** * Return         : None.
  33:usb_lib/usb_regs.c **** *******************************************************************************/
  34:usb_lib/usb_regs.c **** void SetCNTR(u16 wRegValue)
  35:usb_lib/usb_regs.c **** {
  27              		.loc 1 35 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  36:usb_lib/usb_regs.c ****   _SetCNTR(wRegValue);
  33              		.loc 1 36 0
  34 0000 014B     		ldr	r3, .L2
  35 0002 1860     		str	r0, [r3]
  36 0004 7047     		bx	lr
  37              	.L3:
  38 0006 00BF     		.align	2
  39              	.L2:
  40 0008 405C0040 		.word	1073765440
  41              		.cfi_endproc
  42              	.LFE0:
  44              		.section	.text.GetCNTR,"ax",%progbits
  45              		.align	1
  46              		.global	GetCNTR
  47              		.thumb
  48              		.thumb_func
  50              	GetCNTR:
  51              	.LFB1:
  37:usb_lib/usb_regs.c **** }
  38:usb_lib/usb_regs.c **** 
  39:usb_lib/usb_regs.c **** /*******************************************************************************
  40:usb_lib/usb_regs.c **** * Function Name  : GetCNTR.
  41:usb_lib/usb_regs.c **** * Description    : returns the CNTR register value.
  42:usb_lib/usb_regs.c **** * Input          : None.
  43:usb_lib/usb_regs.c **** * Output         : None.
  44:usb_lib/usb_regs.c **** * Return         : CNTR register Value.
  45:usb_lib/usb_regs.c **** *******************************************************************************/
  46:usb_lib/usb_regs.c **** u16 GetCNTR(void)
  47:usb_lib/usb_regs.c **** {
  52              		.loc 1 47 0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  48:usb_lib/usb_regs.c ****   return(_GetCNTR());
  57              		.loc 1 48 0
  58 0000 014B     		ldr	r3, .L5
  59 0002 1868     		ldr	r0, [r3]
  49:usb_lib/usb_regs.c **** }
  60              		.loc 1 49 0
  61 0004 80B2     		uxth	r0, r0
  62 0006 7047     		bx	lr
  63              	.L6:
  64              		.align	2
  65              	.L5:
  66 0008 405C0040 		.word	1073765440
  67              		.cfi_endproc
  68              	.LFE1:
  70              		.section	.text.SetISTR,"ax",%progbits
  71              		.align	1
  72              		.global	SetISTR
  73              		.thumb
  74              		.thumb_func
  76              	SetISTR:
  77              	.LFB2:
  50:usb_lib/usb_regs.c **** 
  51:usb_lib/usb_regs.c **** /*******************************************************************************
  52:usb_lib/usb_regs.c **** * Function Name  : SetISTR.
  53:usb_lib/usb_regs.c **** * Description    : Set the ISTR register value.
  54:usb_lib/usb_regs.c **** * Input          : wRegValue: new register value.
  55:usb_lib/usb_regs.c **** * Output         : None.
  56:usb_lib/usb_regs.c **** * Return         : None.
  57:usb_lib/usb_regs.c **** *******************************************************************************/
  58:usb_lib/usb_regs.c **** void SetISTR(u16 wRegValue)
  59:usb_lib/usb_regs.c **** {
  78              		.loc 1 59 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  83              	.LVL1:
  60:usb_lib/usb_regs.c ****   _SetISTR(wRegValue);
  84              		.loc 1 60 0
  85 0000 014B     		ldr	r3, .L8
  86 0002 1860     		str	r0, [r3]
  87 0004 7047     		bx	lr
  88              	.L9:
  89 0006 00BF     		.align	2
  90              	.L8:
  91 0008 445C0040 		.word	1073765444
  92              		.cfi_endproc
  93              	.LFE2:
  95              		.section	.text.GetISTR,"ax",%progbits
  96              		.align	1
  97              		.global	GetISTR
  98              		.thumb
  99              		.thumb_func
 101              	GetISTR:
 102              	.LFB3:
  61:usb_lib/usb_regs.c **** }
  62:usb_lib/usb_regs.c **** 
  63:usb_lib/usb_regs.c **** /*******************************************************************************
  64:usb_lib/usb_regs.c **** * Function Name  : GetISTR
  65:usb_lib/usb_regs.c **** * Description    : Returns the ISTR register value.
  66:usb_lib/usb_regs.c **** * Input          : None.
  67:usb_lib/usb_regs.c **** * Output         : None.
  68:usb_lib/usb_regs.c **** * Return         : ISTR register Value
  69:usb_lib/usb_regs.c **** *******************************************************************************/
  70:usb_lib/usb_regs.c **** u16 GetISTR(void)
  71:usb_lib/usb_regs.c **** {
 103              		.loc 1 71 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107              		@ link register save eliminated.
  72:usb_lib/usb_regs.c ****   return(_GetISTR());
 108              		.loc 1 72 0
 109 0000 014B     		ldr	r3, .L11
 110 0002 1868     		ldr	r0, [r3]
  73:usb_lib/usb_regs.c **** }
 111              		.loc 1 73 0
 112 0004 80B2     		uxth	r0, r0
 113 0006 7047     		bx	lr
 114              	.L12:
 115              		.align	2
 116              	.L11:
 117 0008 445C0040 		.word	1073765444
 118              		.cfi_endproc
 119              	.LFE3:
 121              		.section	.text.GetFNR,"ax",%progbits
 122              		.align	1
 123              		.global	GetFNR
 124              		.thumb
 125              		.thumb_func
 127              	GetFNR:
 128              	.LFB4:
  74:usb_lib/usb_regs.c **** 
  75:usb_lib/usb_regs.c **** /*******************************************************************************
  76:usb_lib/usb_regs.c **** * Function Name  : GetFNR
  77:usb_lib/usb_regs.c **** * Description    : Returns the FNR register value.
  78:usb_lib/usb_regs.c **** * Input          : None.
  79:usb_lib/usb_regs.c **** * Output         : None.
  80:usb_lib/usb_regs.c **** * Return         : FNR register Value
  81:usb_lib/usb_regs.c **** *******************************************************************************/
  82:usb_lib/usb_regs.c **** u16 GetFNR(void)
  83:usb_lib/usb_regs.c **** {
 129              		.loc 1 83 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
  84:usb_lib/usb_regs.c ****   return(_GetFNR());
 134              		.loc 1 84 0
 135 0000 014B     		ldr	r3, .L14
 136 0002 1868     		ldr	r0, [r3]
  85:usb_lib/usb_regs.c **** }
 137              		.loc 1 85 0
 138 0004 80B2     		uxth	r0, r0
 139 0006 7047     		bx	lr
 140              	.L15:
 141              		.align	2
 142              	.L14:
 143 0008 485C0040 		.word	1073765448
 144              		.cfi_endproc
 145              	.LFE4:
 147              		.section	.text.SetDADDR,"ax",%progbits
 148              		.align	1
 149              		.global	SetDADDR
 150              		.thumb
 151              		.thumb_func
 153              	SetDADDR:
 154              	.LFB5:
  86:usb_lib/usb_regs.c **** 
  87:usb_lib/usb_regs.c **** /*******************************************************************************
  88:usb_lib/usb_regs.c **** * Function Name  : SetDADDR
  89:usb_lib/usb_regs.c **** * Description    : Set the DADDR register value.
  90:usb_lib/usb_regs.c **** * Input          : wRegValue: new register value.
  91:usb_lib/usb_regs.c **** * Output         : None.
  92:usb_lib/usb_regs.c **** * Return         : None.
  93:usb_lib/usb_regs.c **** *******************************************************************************/
  94:usb_lib/usb_regs.c **** void SetDADDR(u16 wRegValue)
  95:usb_lib/usb_regs.c **** {
 155              		.loc 1 95 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 159              		@ link register save eliminated.
 160              	.LVL2:
  96:usb_lib/usb_regs.c ****   _SetDADDR(wRegValue);
 161              		.loc 1 96 0
 162 0000 014B     		ldr	r3, .L17
 163 0002 1860     		str	r0, [r3]
 164 0004 7047     		bx	lr
 165              	.L18:
 166 0006 00BF     		.align	2
 167              	.L17:
 168 0008 4C5C0040 		.word	1073765452
 169              		.cfi_endproc
 170              	.LFE5:
 172              		.section	.text.GetDADDR,"ax",%progbits
 173              		.align	1
 174              		.global	GetDADDR
 175              		.thumb
 176              		.thumb_func
 178              	GetDADDR:
 179              	.LFB6:
  97:usb_lib/usb_regs.c **** }
  98:usb_lib/usb_regs.c **** 
  99:usb_lib/usb_regs.c **** /*******************************************************************************
 100:usb_lib/usb_regs.c **** * Function Name  : GetDADDR
 101:usb_lib/usb_regs.c **** * Description    : Returns the DADDR register value.
 102:usb_lib/usb_regs.c **** * Input          : None.
 103:usb_lib/usb_regs.c **** * Output         : None.
 104:usb_lib/usb_regs.c **** * Return         : DADDR register Value
 105:usb_lib/usb_regs.c **** *******************************************************************************/
 106:usb_lib/usb_regs.c **** u16 GetDADDR(void)
 107:usb_lib/usb_regs.c **** {
 180              		.loc 1 107 0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 0
 183              		@ frame_needed = 0, uses_anonymous_args = 0
 184              		@ link register save eliminated.
 108:usb_lib/usb_regs.c ****   return(_GetDADDR());
 185              		.loc 1 108 0
 186 0000 014B     		ldr	r3, .L20
 187 0002 1868     		ldr	r0, [r3]
 109:usb_lib/usb_regs.c **** }
 188              		.loc 1 109 0
 189 0004 80B2     		uxth	r0, r0
 190 0006 7047     		bx	lr
 191              	.L21:
 192              		.align	2
 193              	.L20:
 194 0008 4C5C0040 		.word	1073765452
 195              		.cfi_endproc
 196              	.LFE6:
 198              		.section	.text.SetBTABLE,"ax",%progbits
 199              		.align	1
 200              		.global	SetBTABLE
 201              		.thumb
 202              		.thumb_func
 204              	SetBTABLE:
 205              	.LFB7:
 110:usb_lib/usb_regs.c **** 
 111:usb_lib/usb_regs.c **** /*******************************************************************************
 112:usb_lib/usb_regs.c **** * Function Name  : SetBTABLE
 113:usb_lib/usb_regs.c **** * Description    : Set the BTABLE.
 114:usb_lib/usb_regs.c **** * Input          : wRegValue: New register value.
 115:usb_lib/usb_regs.c **** * Output         : None.
 116:usb_lib/usb_regs.c **** * Return         : None.
 117:usb_lib/usb_regs.c **** *******************************************************************************/
 118:usb_lib/usb_regs.c **** void SetBTABLE(u16 wRegValue)
 119:usb_lib/usb_regs.c **** {
 206              		.loc 1 119 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210              		@ link register save eliminated.
 211              	.LVL3:
 120:usb_lib/usb_regs.c ****   _SetBTABLE(wRegValue);
 212              		.loc 1 120 0
 213 0000 4FF6F873 		movw	r3, #65528
 214 0004 014A     		ldr	r2, .L23
 215 0006 0340     		ands	r3, r3, r0
 216 0008 1360     		str	r3, [r2]
 217 000a 7047     		bx	lr
 218              	.L24:
 219              		.align	2
 220              	.L23:
 221 000c 505C0040 		.word	1073765456
 222              		.cfi_endproc
 223              	.LFE7:
 225              		.section	.text.GetBTABLE,"ax",%progbits
 226              		.align	1
 227              		.global	GetBTABLE
 228              		.thumb
 229              		.thumb_func
 231              	GetBTABLE:
 232              	.LFB8:
 121:usb_lib/usb_regs.c **** }
 122:usb_lib/usb_regs.c **** 
 123:usb_lib/usb_regs.c **** /*******************************************************************************
 124:usb_lib/usb_regs.c **** * Function Name  : GetBTABLE.
 125:usb_lib/usb_regs.c **** * Description    : Returns the BTABLE register value.
 126:usb_lib/usb_regs.c **** * Input          : None.
 127:usb_lib/usb_regs.c **** * Output         : None.
 128:usb_lib/usb_regs.c **** * Return         : BTABLE address.
 129:usb_lib/usb_regs.c **** *******************************************************************************/
 130:usb_lib/usb_regs.c **** u16 GetBTABLE(void)
 131:usb_lib/usb_regs.c **** {
 233              		.loc 1 131 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 0
 236              		@ frame_needed = 0, uses_anonymous_args = 0
 237              		@ link register save eliminated.
 132:usb_lib/usb_regs.c ****   return(_GetBTABLE());
 238              		.loc 1 132 0
 239 0000 014B     		ldr	r3, .L26
 240 0002 1868     		ldr	r0, [r3]
 133:usb_lib/usb_regs.c **** }
 241              		.loc 1 133 0
 242 0004 80B2     		uxth	r0, r0
 243 0006 7047     		bx	lr
 244              	.L27:
 245              		.align	2
 246              	.L26:
 247 0008 505C0040 		.word	1073765456
 248              		.cfi_endproc
 249              	.LFE8:
 251              		.section	.text.SetENDPOINT,"ax",%progbits
 252              		.align	1
 253              		.global	SetENDPOINT
 254              		.thumb
 255              		.thumb_func
 257              	SetENDPOINT:
 258              	.LFB9:
 134:usb_lib/usb_regs.c **** 
 135:usb_lib/usb_regs.c **** /*******************************************************************************
 136:usb_lib/usb_regs.c **** * Function Name  : SetENDPOINT
 137:usb_lib/usb_regs.c **** * Description    : Setthe Endpoint register value.
 138:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 139:usb_lib/usb_regs.c **** *                  wRegValue.
 140:usb_lib/usb_regs.c **** * Output         : None.
 141:usb_lib/usb_regs.c **** * Return         : None.
 142:usb_lib/usb_regs.c **** *******************************************************************************/
 143:usb_lib/usb_regs.c **** void SetENDPOINT(u8 bEpNum, u16 wRegValue)
 144:usb_lib/usb_regs.c **** {
 259              		.loc 1 144 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              		@ link register save eliminated.
 264              	.LVL4:
 145:usb_lib/usb_regs.c ****   _SetENDPOINT(bEpNum, wRegValue);
 265              		.loc 1 145 0
 266 0000 8000     		lsls	r0, r0, #2
 267              	.LVL5:
 268 0002 00F18040 		add	r0, r0, #1073741824
 269 0006 00F5B840 		add	r0, r0, #23552
 270 000a 0160     		str	r1, [r0]
 271 000c 7047     		bx	lr
 272              		.cfi_endproc
 273              	.LFE9:
 275              		.section	.text.GetENDPOINT,"ax",%progbits
 276              		.align	1
 277              		.global	GetENDPOINT
 278              		.thumb
 279              		.thumb_func
 281              	GetENDPOINT:
 282              	.LFB10:
 146:usb_lib/usb_regs.c **** }
 147:usb_lib/usb_regs.c **** 
 148:usb_lib/usb_regs.c **** /*******************************************************************************
 149:usb_lib/usb_regs.c **** * Function Name  : GetENDPOINT
 150:usb_lib/usb_regs.c **** * Description    : Return the Endpoint register value.
 151:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 152:usb_lib/usb_regs.c **** * Output         : None.
 153:usb_lib/usb_regs.c **** * Return         : Endpoint register value.
 154:usb_lib/usb_regs.c **** *******************************************************************************/
 155:usb_lib/usb_regs.c **** u16 GetENDPOINT(u8 bEpNum)
 156:usb_lib/usb_regs.c **** {
 283              		.loc 1 156 0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287              		@ link register save eliminated.
 288              	.LVL6:
 157:usb_lib/usb_regs.c ****   return(_GetENDPOINT(bEpNum));
 289              		.loc 1 157 0
 290 0000 8000     		lsls	r0, r0, #2
 291              	.LVL7:
 292 0002 00F18040 		add	r0, r0, #1073741824
 293 0006 00F5B840 		add	r0, r0, #23552
 294 000a 0068     		ldr	r0, [r0]
 158:usb_lib/usb_regs.c **** }
 295              		.loc 1 158 0
 296 000c 80B2     		uxth	r0, r0
 297 000e 7047     		bx	lr
 298              		.cfi_endproc
 299              	.LFE10:
 301              		.section	.text.SetEPType,"ax",%progbits
 302              		.align	1
 303              		.global	SetEPType
 304              		.thumb
 305              		.thumb_func
 307              	SetEPType:
 308              	.LFB11:
 159:usb_lib/usb_regs.c **** 
 160:usb_lib/usb_regs.c **** /*******************************************************************************
 161:usb_lib/usb_regs.c **** * Function Name  : SetEPType
 162:usb_lib/usb_regs.c **** * Description    : sets the type in the endpoint register.
 163:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 164:usb_lib/usb_regs.c **** *                  wType: type definition.
 165:usb_lib/usb_regs.c **** * Output         : None.
 166:usb_lib/usb_regs.c **** * Return         : None.
 167:usb_lib/usb_regs.c **** *******************************************************************************/
 168:usb_lib/usb_regs.c **** void SetEPType(u8 bEpNum, u16 wType)
 169:usb_lib/usb_regs.c **** {
 309              		.loc 1 169 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              		@ link register save eliminated.
 314              	.LVL8:
 170:usb_lib/usb_regs.c ****   _SetEPType(bEpNum, wType);
 315              		.loc 1 170 0
 316 0000 8000     		lsls	r0, r0, #2
 317              	.LVL9:
 318 0002 00F18040 		add	r0, r0, #1073741824
 319 0006 00F5B840 		add	r0, r0, #23552
 320 000a 0368     		ldr	r3, [r0]
 321 000c 23F4EC43 		bic	r3, r3, #30208
 322 0010 23F07003 		bic	r3, r3, #112
 323 0014 1943     		orrs	r1, r1, r3
 324              	.LVL10:
 325 0016 8BB2     		uxth	r3, r1
 326 0018 0360     		str	r3, [r0]
 327 001a 7047     		bx	lr
 328              		.cfi_endproc
 329              	.LFE11:
 331              		.section	.text.GetEPType,"ax",%progbits
 332              		.align	1
 333              		.global	GetEPType
 334              		.thumb
 335              		.thumb_func
 337              	GetEPType:
 338              	.LFB12:
 171:usb_lib/usb_regs.c **** }
 172:usb_lib/usb_regs.c **** 
 173:usb_lib/usb_regs.c **** /*******************************************************************************
 174:usb_lib/usb_regs.c **** * Function Name  : GetEPType
 175:usb_lib/usb_regs.c **** * Description    : Returns the endpoint type.
 176:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 177:usb_lib/usb_regs.c **** * Output         : None.
 178:usb_lib/usb_regs.c **** * Return         : Endpoint Type
 179:usb_lib/usb_regs.c **** *******************************************************************************/
 180:usb_lib/usb_regs.c **** u16 GetEPType(u8 bEpNum)
 181:usb_lib/usb_regs.c **** {
 339              		.loc 1 181 0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343              		@ link register save eliminated.
 344              	.LVL11:
 182:usb_lib/usb_regs.c ****   return(_GetEPType(bEpNum));
 345              		.loc 1 182 0
 346 0000 8000     		lsls	r0, r0, #2
 347              	.LVL12:
 348 0002 00F18040 		add	r0, r0, #1073741824
 349 0006 00F5B840 		add	r0, r0, #23552
 350 000a 0068     		ldr	r0, [r0]
 183:usb_lib/usb_regs.c **** }
 351              		.loc 1 183 0
 352 000c 00F4C060 		and	r0, r0, #1536
 353 0010 7047     		bx	lr
 354              		.cfi_endproc
 355              	.LFE12:
 357              		.section	.text.SetEPTxStatus,"ax",%progbits
 358              		.align	1
 359              		.global	SetEPTxStatus
 360              		.thumb
 361              		.thumb_func
 363              	SetEPTxStatus:
 364              	.LFB13:
 184:usb_lib/usb_regs.c **** 
 185:usb_lib/usb_regs.c **** /*******************************************************************************
 186:usb_lib/usb_regs.c **** * Function Name  : SetEPTxStatus
 187:usb_lib/usb_regs.c **** * Description    : Set the status of Tx endpoint.
 188:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 189:usb_lib/usb_regs.c **** *                  wState: new state.
 190:usb_lib/usb_regs.c **** * Output         : None.
 191:usb_lib/usb_regs.c **** * Return         : None.
 192:usb_lib/usb_regs.c **** *******************************************************************************/
 193:usb_lib/usb_regs.c **** void SetEPTxStatus(u8 bEpNum, u16 wState)
 194:usb_lib/usb_regs.c **** {
 365              		.loc 1 194 0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369              		@ link register save eliminated.
 370              	.LVL13:
 371              	.LBB4:
 195:usb_lib/usb_regs.c ****   _SetEPTxStatus(bEpNum, wState);
 372              		.loc 1 195 0
 373 0000 8000     		lsls	r0, r0, #2
 374              	.LVL14:
 375 0002 00F18040 		add	r0, r0, #1073741824
 376 0006 00F5B840 		add	r0, r0, #23552
 377 000a 0368     		ldr	r3, [r0]
 378 000c CA06     		lsls	r2, r1, #27
 379 000e 23F4E043 		bic	r3, r3, #28672
 380 0012 23F04003 		bic	r3, r3, #64
 381 0016 9BB2     		uxth	r3, r3
 382              	.LVL15:
 383 0018 48BF     		it	mi
 384 001a 83F01003 		eormi	r3, r3, #16
 385              	.LVL16:
 386 001e 8A06     		lsls	r2, r1, #26
 387 0020 48BF     		it	mi
 388 0022 83F02003 		eormi	r3, r3, #32
 389              	.LVL17:
 390 0026 0360     		str	r3, [r0]
 391 0028 7047     		bx	lr
 392              	.LBE4:
 393              		.cfi_endproc
 394              	.LFE13:
 396              		.section	.text.SetEPRxStatus,"ax",%progbits
 397              		.align	1
 398              		.global	SetEPRxStatus
 399              		.thumb
 400              		.thumb_func
 402              	SetEPRxStatus:
 403              	.LFB14:
 196:usb_lib/usb_regs.c **** }
 197:usb_lib/usb_regs.c **** 
 198:usb_lib/usb_regs.c **** /*******************************************************************************
 199:usb_lib/usb_regs.c **** * Function Name  : SetEPRxStatus
 200:usb_lib/usb_regs.c **** * Description    : Set the status of Rx endpoint.
 201:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 202:usb_lib/usb_regs.c **** *                  wState: new state.
 203:usb_lib/usb_regs.c **** * Output         : None.
 204:usb_lib/usb_regs.c **** * Return         : None.
 205:usb_lib/usb_regs.c **** *******************************************************************************/
 206:usb_lib/usb_regs.c **** void SetEPRxStatus(u8 bEpNum, u16 wState)
 207:usb_lib/usb_regs.c **** {
 404              		.loc 1 207 0
 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 0
 407              		@ frame_needed = 0, uses_anonymous_args = 0
 408              		@ link register save eliminated.
 409              	.LVL18:
 410              	.LBB5:
 208:usb_lib/usb_regs.c ****   _SetEPRxStatus(bEpNum, wState);
 411              		.loc 1 208 0
 412 0000 8000     		lsls	r0, r0, #2
 413              	.LVL19:
 414 0002 00F18040 		add	r0, r0, #1073741824
 415 0006 00F5B840 		add	r0, r0, #23552
 416 000a 0368     		ldr	r3, [r0]
 417 000c CA04     		lsls	r2, r1, #19
 418 000e 23F48043 		bic	r3, r3, #16384
 419 0012 23F07003 		bic	r3, r3, #112
 420 0016 9BB2     		uxth	r3, r3
 421              	.LVL20:
 422 0018 48BF     		it	mi
 423 001a 83F48053 		eormi	r3, r3, #4096
 424              	.LVL21:
 425 001e 8A04     		lsls	r2, r1, #18
 426 0020 48BF     		it	mi
 427 0022 83F40053 		eormi	r3, r3, #8192
 428              	.LVL22:
 429 0026 0360     		str	r3, [r0]
 430 0028 7047     		bx	lr
 431              	.LBE5:
 432              		.cfi_endproc
 433              	.LFE14:
 435              		.section	.text.SetDouBleBuffEPStall,"ax",%progbits
 436              		.align	1
 437              		.global	SetDouBleBuffEPStall
 438              		.thumb
 439              		.thumb_func
 441              	SetDouBleBuffEPStall:
 442              	.LFB15:
 209:usb_lib/usb_regs.c **** }
 210:usb_lib/usb_regs.c **** 
 211:usb_lib/usb_regs.c **** /*******************************************************************************
 212:usb_lib/usb_regs.c **** * Function Name  : SetDouBleBuffEPStall
 213:usb_lib/usb_regs.c **** * Description    : sets the status for Double Buffer Endpoint to STALL
 214:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 215:usb_lib/usb_regs.c **** *                  bDir: Endpoint direction.
 216:usb_lib/usb_regs.c **** * Output         : None.
 217:usb_lib/usb_regs.c **** * Return         : None.
 218:usb_lib/usb_regs.c **** *******************************************************************************/
 219:usb_lib/usb_regs.c **** void SetDouBleBuffEPStall(u8 bEpNum, u8 bDir)
 220:usb_lib/usb_regs.c **** {
 443              		.loc 1 220 0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 0
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 447              		@ link register save eliminated.
 448              	.LVL23:
 449              	.LBB6:
 450              	.LBB7:
 157:usb_lib/usb_regs.c ****   return(_GetENDPOINT(bEpNum));
 451              		.loc 1 157 0
 452 0000 8000     		lsls	r0, r0, #2
 453              	.LVL24:
 454 0002 00F18040 		add	r0, r0, #1073741824
 455 0006 00F5B840 		add	r0, r0, #23552
 456              	.LBE7:
 457              	.LBE6:
 221:usb_lib/usb_regs.c ****   u16 Endpoint_DTOG_Status;
 222:usb_lib/usb_regs.c ****   Endpoint_DTOG_Status = GetENDPOINT(bEpNum);
 223:usb_lib/usb_regs.c ****   if (bDir == EP_DBUF_OUT)
 458              		.loc 1 223 0
 459 000a 0129     		cmp	r1, #1
 460              	.LBB9:
 461              	.LBB8:
 157:usb_lib/usb_regs.c ****   return(_GetENDPOINT(bEpNum));
 462              		.loc 1 157 0
 463 000c 0268     		ldr	r2, [r0]
 464              	.LBE8:
 465              	.LBE9:
 466              		.loc 1 223 0
 467 000e 02D1     		bne	.L51
 224:usb_lib/usb_regs.c ****   { /* OUT double buffered endpoint */
 225:usb_lib/usb_regs.c ****     _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPRX_DTOG1);
 468              		.loc 1 225 0
 469 0010 4EF6FF73 		movw	r3, #61439
 470 0014 03E0     		b	.L53
 471              	.L51:
 226:usb_lib/usb_regs.c ****   }
 227:usb_lib/usb_regs.c ****   else if (bDir == EP_DBUF_IN)
 472              		.loc 1 227 0
 473 0016 0229     		cmp	r1, #2
 474 0018 03D1     		bne	.L50
 228:usb_lib/usb_regs.c ****   { /* IN double buffered endpoint */
 229:usb_lib/usb_regs.c ****     _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPTX_DTOG1);
 475              		.loc 1 229 0
 476 001a 4FF6EF73 		movw	r3, #65519
 477              	.L53:
 478 001e 1340     		ands	r3, r3, r2
 479 0020 0360     		str	r3, [r0]
 480              	.L50:
 481 0022 7047     		bx	lr
 482              		.cfi_endproc
 483              	.LFE15:
 485              		.section	.text.GetEPTxStatus,"ax",%progbits
 486              		.align	1
 487              		.global	GetEPTxStatus
 488              		.thumb
 489              		.thumb_func
 491              	GetEPTxStatus:
 492              	.LFB16:
 230:usb_lib/usb_regs.c ****   }
 231:usb_lib/usb_regs.c **** }
 232:usb_lib/usb_regs.c **** 
 233:usb_lib/usb_regs.c **** /*******************************************************************************
 234:usb_lib/usb_regs.c **** * Function Name  : GetEPTxStatus
 235:usb_lib/usb_regs.c **** * Description    : Returns the endpoint Tx status.
 236:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 237:usb_lib/usb_regs.c **** * Output         : None.
 238:usb_lib/usb_regs.c **** * Return         : Endpoint TX Status
 239:usb_lib/usb_regs.c **** *******************************************************************************/
 240:usb_lib/usb_regs.c **** u16 GetEPTxStatus(u8 bEpNum)
 241:usb_lib/usb_regs.c **** {
 493              		.loc 1 241 0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 497              		@ link register save eliminated.
 498              	.LVL25:
 242:usb_lib/usb_regs.c ****   return(_GetEPTxStatus(bEpNum));
 499              		.loc 1 242 0
 500 0000 8000     		lsls	r0, r0, #2
 501              	.LVL26:
 502 0002 00F18040 		add	r0, r0, #1073741824
 503 0006 00F5B840 		add	r0, r0, #23552
 504 000a 0068     		ldr	r0, [r0]
 243:usb_lib/usb_regs.c **** }
 505              		.loc 1 243 0
 506 000c 00F03000 		and	r0, r0, #48
 507 0010 7047     		bx	lr
 508              		.cfi_endproc
 509              	.LFE16:
 511              		.section	.text.GetEPRxStatus,"ax",%progbits
 512              		.align	1
 513              		.global	GetEPRxStatus
 514              		.thumb
 515              		.thumb_func
 517              	GetEPRxStatus:
 518              	.LFB17:
 244:usb_lib/usb_regs.c **** 
 245:usb_lib/usb_regs.c **** /*******************************************************************************
 246:usb_lib/usb_regs.c **** * Function Name  : GetEPRxStatus
 247:usb_lib/usb_regs.c **** * Description    : Returns the endpoint Rx status.
 248:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 249:usb_lib/usb_regs.c **** * Output         : None.
 250:usb_lib/usb_regs.c **** * Return         : Endpoint RX Status
 251:usb_lib/usb_regs.c **** *******************************************************************************/
 252:usb_lib/usb_regs.c **** u16 GetEPRxStatus(u8 bEpNum)
 253:usb_lib/usb_regs.c **** {
 519              		.loc 1 253 0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 0
 522              		@ frame_needed = 0, uses_anonymous_args = 0
 523              		@ link register save eliminated.
 524              	.LVL27:
 254:usb_lib/usb_regs.c ****   return(_GetEPRxStatus(bEpNum));
 525              		.loc 1 254 0
 526 0000 8000     		lsls	r0, r0, #2
 527              	.LVL28:
 528 0002 00F18040 		add	r0, r0, #1073741824
 529 0006 00F5B840 		add	r0, r0, #23552
 530 000a 0068     		ldr	r0, [r0]
 255:usb_lib/usb_regs.c **** }
 531              		.loc 1 255 0
 532 000c 00F44050 		and	r0, r0, #12288
 533 0010 7047     		bx	lr
 534              		.cfi_endproc
 535              	.LFE17:
 537              		.section	.text.SetEPTxValid,"ax",%progbits
 538              		.align	1
 539              		.global	SetEPTxValid
 540              		.thumb
 541              		.thumb_func
 543              	SetEPTxValid:
 544              	.LFB18:
 256:usb_lib/usb_regs.c **** 
 257:usb_lib/usb_regs.c **** /*******************************************************************************
 258:usb_lib/usb_regs.c **** * Function Name  : SetEPTxValid
 259:usb_lib/usb_regs.c **** * Description    : Valid the endpoint Tx Status.
 260:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 261:usb_lib/usb_regs.c **** * Output         : None.
 262:usb_lib/usb_regs.c **** * Return         : None.
 263:usb_lib/usb_regs.c **** *******************************************************************************/
 264:usb_lib/usb_regs.c **** void SetEPTxValid(u8 bEpNum)
 265:usb_lib/usb_regs.c **** {
 545              		.loc 1 265 0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 0
 548              		@ frame_needed = 0, uses_anonymous_args = 0
 549              		@ link register save eliminated.
 550              	.LVL29:
 551              	.LBB10:
 266:usb_lib/usb_regs.c ****   _SetEPTxStatus(bEpNum, EP_TX_VALID);
 552              		.loc 1 266 0
 553 0000 8000     		lsls	r0, r0, #2
 554              	.LVL30:
 555 0002 00F18040 		add	r0, r0, #1073741824
 556 0006 00F5B840 		add	r0, r0, #23552
 557 000a 0368     		ldr	r3, [r0]
 558 000c 23F4E043 		bic	r3, r3, #28672
 559 0010 23F04003 		bic	r3, r3, #64
 560 0014 9BB2     		uxth	r3, r3
 561              	.LVL31:
 562 0016 83F03003 		eor	r3, r3, #48
 563              	.LVL32:
 564 001a 0360     		str	r3, [r0]
 565 001c 7047     		bx	lr
 566              	.LBE10:
 567              		.cfi_endproc
 568              	.LFE18:
 570              		.section	.text.SetEPRxValid,"ax",%progbits
 571              		.align	1
 572              		.global	SetEPRxValid
 573              		.thumb
 574              		.thumb_func
 576              	SetEPRxValid:
 577              	.LFB19:
 267:usb_lib/usb_regs.c **** }
 268:usb_lib/usb_regs.c **** 
 269:usb_lib/usb_regs.c **** /*******************************************************************************
 270:usb_lib/usb_regs.c **** * Function Name  : SetEPRxValid
 271:usb_lib/usb_regs.c **** * Description    : Valid the endpoint Rx Status.
 272:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 273:usb_lib/usb_regs.c **** * Output         : None.
 274:usb_lib/usb_regs.c **** * Return         : None.
 275:usb_lib/usb_regs.c **** *******************************************************************************/
 276:usb_lib/usb_regs.c **** void SetEPRxValid(u8 bEpNum)
 277:usb_lib/usb_regs.c **** {
 578              		.loc 1 277 0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 582              		@ link register save eliminated.
 583              	.LVL33:
 584              	.LBB11:
 278:usb_lib/usb_regs.c ****   _SetEPRxStatus(bEpNum, EP_RX_VALID);
 585              		.loc 1 278 0
 586 0000 8000     		lsls	r0, r0, #2
 587              	.LVL34:
 588 0002 00F18040 		add	r0, r0, #1073741824
 589 0006 00F5B840 		add	r0, r0, #23552
 590 000a 0368     		ldr	r3, [r0]
 591 000c 23F48043 		bic	r3, r3, #16384
 592 0010 23F07003 		bic	r3, r3, #112
 593 0014 9BB2     		uxth	r3, r3
 594              	.LVL35:
 595 0016 83F44053 		eor	r3, r3, #12288
 596              	.LVL36:
 597 001a 0360     		str	r3, [r0]
 598 001c 7047     		bx	lr
 599              	.LBE11:
 600              		.cfi_endproc
 601              	.LFE19:
 603              		.section	.text.SetEP_KIND,"ax",%progbits
 604              		.align	1
 605              		.global	SetEP_KIND
 606              		.thumb
 607              		.thumb_func
 609              	SetEP_KIND:
 610              	.LFB20:
 279:usb_lib/usb_regs.c **** }
 280:usb_lib/usb_regs.c **** 
 281:usb_lib/usb_regs.c **** /*******************************************************************************
 282:usb_lib/usb_regs.c **** * Function Name  : SetEP_KIND
 283:usb_lib/usb_regs.c **** * Description    : Clear the EP_KIND bit.
 284:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 285:usb_lib/usb_regs.c **** * Output         : None.
 286:usb_lib/usb_regs.c **** * Return         : None.
 287:usb_lib/usb_regs.c **** *******************************************************************************/
 288:usb_lib/usb_regs.c **** void SetEP_KIND(u8 bEpNum)
 289:usb_lib/usb_regs.c **** {
 611              		.loc 1 289 0
 612              		.cfi_startproc
 613              		@ args = 0, pretend = 0, frame = 0
 614              		@ frame_needed = 0, uses_anonymous_args = 0
 615              		@ link register save eliminated.
 616              	.LVL37:
 290:usb_lib/usb_regs.c ****   _SetEP_KIND(bEpNum);
 617              		.loc 1 290 0
 618 0000 8000     		lsls	r0, r0, #2
 619              	.LVL38:
 620 0002 00F18040 		add	r0, r0, #1073741824
 621 0006 00F5B840 		add	r0, r0, #23552
 622 000a 0368     		ldr	r3, [r0]
 623 000c 23F4E043 		bic	r3, r3, #28672
 624 0010 23F07003 		bic	r3, r3, #112
 625 0014 43F48073 		orr	r3, r3, #256
 626 0018 9BB2     		uxth	r3, r3
 627 001a 0360     		str	r3, [r0]
 628 001c 7047     		bx	lr
 629              		.cfi_endproc
 630              	.LFE20:
 632              		.section	.text.ClearEP_KIND,"ax",%progbits
 633              		.align	1
 634              		.global	ClearEP_KIND
 635              		.thumb
 636              		.thumb_func
 638              	ClearEP_KIND:
 639              	.LFB21:
 291:usb_lib/usb_regs.c **** }
 292:usb_lib/usb_regs.c **** 
 293:usb_lib/usb_regs.c **** /*******************************************************************************
 294:usb_lib/usb_regs.c **** * Function Name  : ClearEP_KIND
 295:usb_lib/usb_regs.c **** * Description    : set the  EP_KIND bit.
 296:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 297:usb_lib/usb_regs.c **** * Output         : None.
 298:usb_lib/usb_regs.c **** * Return         : None.
 299:usb_lib/usb_regs.c **** *******************************************************************************/
 300:usb_lib/usb_regs.c **** void ClearEP_KIND(u8 bEpNum)
 301:usb_lib/usb_regs.c **** {
 640              		.loc 1 301 0
 641              		.cfi_startproc
 642              		@ args = 0, pretend = 0, frame = 0
 643              		@ frame_needed = 0, uses_anonymous_args = 0
 644              		@ link register save eliminated.
 645              	.LVL39:
 302:usb_lib/usb_regs.c ****   _ClearEP_KIND(bEpNum);
 646              		.loc 1 302 0
 647 0000 8000     		lsls	r0, r0, #2
 648              	.LVL40:
 649 0002 00F18040 		add	r0, r0, #1073741824
 650 0006 00F5B840 		add	r0, r0, #23552
 651 000a 0368     		ldr	r3, [r0]
 652 000c 23F4E243 		bic	r3, r3, #28928
 653 0010 23F07003 		bic	r3, r3, #112
 654 0014 1B04     		lsls	r3, r3, #16
 655 0016 1B0C     		lsrs	r3, r3, #16
 656 0018 0360     		str	r3, [r0]
 657 001a 7047     		bx	lr
 658              		.cfi_endproc
 659              	.LFE21:
 661              		.section	.text.Clear_Status_Out,"ax",%progbits
 662              		.align	1
 663              		.global	Clear_Status_Out
 664              		.thumb
 665              		.thumb_func
 667              	Clear_Status_Out:
 668              	.LFB22:
 303:usb_lib/usb_regs.c **** }
 304:usb_lib/usb_regs.c **** /*******************************************************************************
 305:usb_lib/usb_regs.c **** * Function Name  : Clear_Status_Out
 306:usb_lib/usb_regs.c **** * Description    : Clear the Status Out of the related Endpoint
 307:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 308:usb_lib/usb_regs.c **** * Output         : None.
 309:usb_lib/usb_regs.c **** * Return         : None.
 310:usb_lib/usb_regs.c **** *******************************************************************************/
 311:usb_lib/usb_regs.c **** void Clear_Status_Out(u8 bEpNum)
 312:usb_lib/usb_regs.c **** {
 669              		.loc 1 312 0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 0
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 673              		@ link register save eliminated.
 674              	.LVL41:
 313:usb_lib/usb_regs.c ****   _ClearEP_KIND(bEpNum);
 675              		.loc 1 313 0
 676 0000 8000     		lsls	r0, r0, #2
 677              	.LVL42:
 678 0002 00F18040 		add	r0, r0, #1073741824
 679 0006 00F5B840 		add	r0, r0, #23552
 680 000a 0368     		ldr	r3, [r0]
 681 000c 23F4E243 		bic	r3, r3, #28928
 682 0010 23F07003 		bic	r3, r3, #112
 683 0014 1B04     		lsls	r3, r3, #16
 684 0016 1B0C     		lsrs	r3, r3, #16
 685 0018 0360     		str	r3, [r0]
 686 001a 7047     		bx	lr
 687              		.cfi_endproc
 688              	.LFE22:
 690              		.section	.text.Set_Status_Out,"ax",%progbits
 691              		.align	1
 692              		.global	Set_Status_Out
 693              		.thumb
 694              		.thumb_func
 696              	Set_Status_Out:
 697              	.LFB23:
 314:usb_lib/usb_regs.c **** }
 315:usb_lib/usb_regs.c **** /*******************************************************************************
 316:usb_lib/usb_regs.c **** * Function Name  : Set_Status_Out
 317:usb_lib/usb_regs.c **** * Description    : Set the Status Out of the related Endpoint
 318:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 319:usb_lib/usb_regs.c **** * Output         : None.
 320:usb_lib/usb_regs.c **** * Return         : None.
 321:usb_lib/usb_regs.c **** *******************************************************************************/
 322:usb_lib/usb_regs.c **** void Set_Status_Out(u8 bEpNum)
 323:usb_lib/usb_regs.c **** {
 698              		.loc 1 323 0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 0
 701              		@ frame_needed = 0, uses_anonymous_args = 0
 702              		@ link register save eliminated.
 703              	.LVL43:
 324:usb_lib/usb_regs.c ****   _SetEP_KIND(bEpNum);
 704              		.loc 1 324 0
 705 0000 8000     		lsls	r0, r0, #2
 706              	.LVL44:
 707 0002 00F18040 		add	r0, r0, #1073741824
 708 0006 00F5B840 		add	r0, r0, #23552
 709 000a 0368     		ldr	r3, [r0]
 710 000c 23F4E043 		bic	r3, r3, #28672
 711 0010 23F07003 		bic	r3, r3, #112
 712 0014 43F48073 		orr	r3, r3, #256
 713 0018 9BB2     		uxth	r3, r3
 714 001a 0360     		str	r3, [r0]
 715 001c 7047     		bx	lr
 716              		.cfi_endproc
 717              	.LFE23:
 719              		.section	.text.SetEPDoubleBuff,"ax",%progbits
 720              		.align	1
 721              		.global	SetEPDoubleBuff
 722              		.thumb
 723              		.thumb_func
 725              	SetEPDoubleBuff:
 726              	.LFB24:
 325:usb_lib/usb_regs.c **** }
 326:usb_lib/usb_regs.c **** /*******************************************************************************
 327:usb_lib/usb_regs.c **** * Function Name  : SetEPDoubleBuff
 328:usb_lib/usb_regs.c **** * Description    : Enable the double buffer feature for the endpoint.
 329:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 330:usb_lib/usb_regs.c **** * Output         : None.
 331:usb_lib/usb_regs.c **** * Return         : None.
 332:usb_lib/usb_regs.c **** *******************************************************************************/
 333:usb_lib/usb_regs.c **** void SetEPDoubleBuff(u8 bEpNum)
 334:usb_lib/usb_regs.c **** {
 727              		.loc 1 334 0
 728              		.cfi_startproc
 729              		@ args = 0, pretend = 0, frame = 0
 730              		@ frame_needed = 0, uses_anonymous_args = 0
 731              		@ link register save eliminated.
 732              	.LVL45:
 335:usb_lib/usb_regs.c ****   _SetEP_KIND(bEpNum);
 733              		.loc 1 335 0
 734 0000 8000     		lsls	r0, r0, #2
 735              	.LVL46:
 736 0002 00F18040 		add	r0, r0, #1073741824
 737 0006 00F5B840 		add	r0, r0, #23552
 738 000a 0368     		ldr	r3, [r0]
 739 000c 23F4E043 		bic	r3, r3, #28672
 740 0010 23F07003 		bic	r3, r3, #112
 741 0014 43F48073 		orr	r3, r3, #256
 742 0018 9BB2     		uxth	r3, r3
 743 001a 0360     		str	r3, [r0]
 744 001c 7047     		bx	lr
 745              		.cfi_endproc
 746              	.LFE24:
 748              		.section	.text.ClearEPDoubleBuff,"ax",%progbits
 749              		.align	1
 750              		.global	ClearEPDoubleBuff
 751              		.thumb
 752              		.thumb_func
 754              	ClearEPDoubleBuff:
 755              	.LFB25:
 336:usb_lib/usb_regs.c **** }
 337:usb_lib/usb_regs.c **** /*******************************************************************************
 338:usb_lib/usb_regs.c **** * Function Name  : ClearEPDoubleBuff
 339:usb_lib/usb_regs.c **** * Description    : Disable the double buffer feature for the endpoint.
 340:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 341:usb_lib/usb_regs.c **** * Output         : None.
 342:usb_lib/usb_regs.c **** * Return         : None.
 343:usb_lib/usb_regs.c **** *******************************************************************************/
 344:usb_lib/usb_regs.c **** void ClearEPDoubleBuff(u8 bEpNum)
 345:usb_lib/usb_regs.c **** {
 756              		.loc 1 345 0
 757              		.cfi_startproc
 758              		@ args = 0, pretend = 0, frame = 0
 759              		@ frame_needed = 0, uses_anonymous_args = 0
 760              		@ link register save eliminated.
 761              	.LVL47:
 346:usb_lib/usb_regs.c ****   _ClearEP_KIND(bEpNum);
 762              		.loc 1 346 0
 763 0000 8000     		lsls	r0, r0, #2
 764              	.LVL48:
 765 0002 00F18040 		add	r0, r0, #1073741824
 766 0006 00F5B840 		add	r0, r0, #23552
 767 000a 0368     		ldr	r3, [r0]
 768 000c 23F4E243 		bic	r3, r3, #28928
 769 0010 23F07003 		bic	r3, r3, #112
 770 0014 1B04     		lsls	r3, r3, #16
 771 0016 1B0C     		lsrs	r3, r3, #16
 772 0018 0360     		str	r3, [r0]
 773 001a 7047     		bx	lr
 774              		.cfi_endproc
 775              	.LFE25:
 777              		.section	.text.GetTxStallStatus,"ax",%progbits
 778              		.align	1
 779              		.global	GetTxStallStatus
 780              		.thumb
 781              		.thumb_func
 783              	GetTxStallStatus:
 784              	.LFB26:
 347:usb_lib/usb_regs.c **** }
 348:usb_lib/usb_regs.c **** /*******************************************************************************
 349:usb_lib/usb_regs.c **** * Function Name  : GetTxStallStatus
 350:usb_lib/usb_regs.c **** * Description    : Returns the Stall status of the Tx endpoint.
 351:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 352:usb_lib/usb_regs.c **** * Output         : None.
 353:usb_lib/usb_regs.c **** * Return         : Tx Stall status.
 354:usb_lib/usb_regs.c **** *******************************************************************************/
 355:usb_lib/usb_regs.c **** u16 GetTxStallStatus(u8 bEpNum)
 356:usb_lib/usb_regs.c **** {
 785              		.loc 1 356 0
 786              		.cfi_startproc
 787              		@ args = 0, pretend = 0, frame = 0
 788              		@ frame_needed = 0, uses_anonymous_args = 0
 789              		@ link register save eliminated.
 790              	.LVL49:
 357:usb_lib/usb_regs.c ****   return(_GetTxStallStatus(bEpNum));
 791              		.loc 1 357 0
 792 0000 8000     		lsls	r0, r0, #2
 793              	.LVL50:
 794 0002 00F18040 		add	r0, r0, #1073741824
 795 0006 00F5B840 		add	r0, r0, #23552
 796 000a 0068     		ldr	r0, [r0]
 797 000c 00F03000 		and	r0, r0, #48
 358:usb_lib/usb_regs.c **** }
 798              		.loc 1 358 0
 799 0010 B0F11003 		subs	r3, r0, #16
 800 0014 5842     		rsbs	r0, r3, #0
 801 0016 5841     		adcs	r0, r0, r3
 802 0018 7047     		bx	lr
 803              		.cfi_endproc
 804              	.LFE26:
 806              		.section	.text.GetRxStallStatus,"ax",%progbits
 807              		.align	1
 808              		.global	GetRxStallStatus
 809              		.thumb
 810              		.thumb_func
 812              	GetRxStallStatus:
 813              	.LFB27:
 359:usb_lib/usb_regs.c **** /*******************************************************************************
 360:usb_lib/usb_regs.c **** * Function Name  : GetRxStallStatus
 361:usb_lib/usb_regs.c **** * Description    : Returns the Stall status of the Rx endpoint.
 362:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 363:usb_lib/usb_regs.c **** * Output         : None.
 364:usb_lib/usb_regs.c **** * Return         : Rx Stall status.
 365:usb_lib/usb_regs.c **** *******************************************************************************/
 366:usb_lib/usb_regs.c **** u16 GetRxStallStatus(u8 bEpNum)
 367:usb_lib/usb_regs.c **** {
 814              		.loc 1 367 0
 815              		.cfi_startproc
 816              		@ args = 0, pretend = 0, frame = 0
 817              		@ frame_needed = 0, uses_anonymous_args = 0
 818              		@ link register save eliminated.
 819              	.LVL51:
 368:usb_lib/usb_regs.c ****   return(_GetRxStallStatus(bEpNum));
 820              		.loc 1 368 0
 821 0000 8000     		lsls	r0, r0, #2
 822              	.LVL52:
 823 0002 00F18040 		add	r0, r0, #1073741824
 824 0006 00F5B840 		add	r0, r0, #23552
 825 000a 0068     		ldr	r0, [r0]
 826 000c 00F44050 		and	r0, r0, #12288
 369:usb_lib/usb_regs.c **** }
 827              		.loc 1 369 0
 828 0010 B0F58053 		subs	r3, r0, #4096
 829 0014 5842     		rsbs	r0, r3, #0
 830 0016 5841     		adcs	r0, r0, r3
 831 0018 7047     		bx	lr
 832              		.cfi_endproc
 833              	.LFE27:
 835              		.section	.text.ClearEP_CTR_RX,"ax",%progbits
 836              		.align	1
 837              		.global	ClearEP_CTR_RX
 838              		.thumb
 839              		.thumb_func
 841              	ClearEP_CTR_RX:
 842              	.LFB28:
 370:usb_lib/usb_regs.c **** /*******************************************************************************
 371:usb_lib/usb_regs.c **** * Function Name  : ClearEP_CTR_RX
 372:usb_lib/usb_regs.c **** * Description    : Clear the CTR_RX bit.
 373:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 374:usb_lib/usb_regs.c **** * Output         : None.
 375:usb_lib/usb_regs.c **** * Return         : None.
 376:usb_lib/usb_regs.c **** *******************************************************************************/
 377:usb_lib/usb_regs.c **** void ClearEP_CTR_RX(u8 bEpNum)
 378:usb_lib/usb_regs.c **** {
 843              		.loc 1 378 0
 844              		.cfi_startproc
 845              		@ args = 0, pretend = 0, frame = 0
 846              		@ frame_needed = 0, uses_anonymous_args = 0
 847              		@ link register save eliminated.
 848              	.LVL53:
 379:usb_lib/usb_regs.c ****   _ClearEP_CTR_RX(bEpNum);
 849              		.loc 1 379 0
 850 0000 8000     		lsls	r0, r0, #2
 851              	.LVL54:
 852 0002 00F18040 		add	r0, r0, #1073741824
 853 0006 00F5B840 		add	r0, r0, #23552
 854 000a 0368     		ldr	r3, [r0]
 855 000c 23F07003 		bic	r3, r3, #112
 856 0010 1B05     		lsls	r3, r3, #20
 857 0012 1B0D     		lsrs	r3, r3, #20
 858 0014 0360     		str	r3, [r0]
 859 0016 7047     		bx	lr
 860              		.cfi_endproc
 861              	.LFE28:
 863              		.section	.text.ClearEP_CTR_TX,"ax",%progbits
 864              		.align	1
 865              		.global	ClearEP_CTR_TX
 866              		.thumb
 867              		.thumb_func
 869              	ClearEP_CTR_TX:
 870              	.LFB29:
 380:usb_lib/usb_regs.c **** }
 381:usb_lib/usb_regs.c **** /*******************************************************************************
 382:usb_lib/usb_regs.c **** * Function Name  : ClearEP_CTR_TX
 383:usb_lib/usb_regs.c **** * Description    : Clear the CTR_TX bit.
 384:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 385:usb_lib/usb_regs.c **** * Output         : None.
 386:usb_lib/usb_regs.c **** * Return         : None.
 387:usb_lib/usb_regs.c **** *******************************************************************************/
 388:usb_lib/usb_regs.c **** void ClearEP_CTR_TX(u8 bEpNum)
 389:usb_lib/usb_regs.c **** {
 871              		.loc 1 389 0
 872              		.cfi_startproc
 873              		@ args = 0, pretend = 0, frame = 0
 874              		@ frame_needed = 0, uses_anonymous_args = 0
 875              		@ link register save eliminated.
 876              	.LVL55:
 390:usb_lib/usb_regs.c ****   _ClearEP_CTR_TX(bEpNum);
 877              		.loc 1 390 0
 878 0000 8000     		lsls	r0, r0, #2
 879              	.LVL56:
 880 0002 00F18040 		add	r0, r0, #1073741824
 881 0006 00F5B840 		add	r0, r0, #23552
 882 000a 0368     		ldr	r3, [r0]
 883 000c 23F4E143 		bic	r3, r3, #28800
 884 0010 23F07003 		bic	r3, r3, #112
 885 0014 1B04     		lsls	r3, r3, #16
 886 0016 1B0C     		lsrs	r3, r3, #16
 887 0018 0360     		str	r3, [r0]
 888 001a 7047     		bx	lr
 889              		.cfi_endproc
 890              	.LFE29:
 892              		.section	.text.ToggleDTOG_RX,"ax",%progbits
 893              		.align	1
 894              		.global	ToggleDTOG_RX
 895              		.thumb
 896              		.thumb_func
 898              	ToggleDTOG_RX:
 899              	.LFB30:
 391:usb_lib/usb_regs.c **** }
 392:usb_lib/usb_regs.c **** /*******************************************************************************
 393:usb_lib/usb_regs.c **** * Function Name  : ToggleDTOG_RX
 394:usb_lib/usb_regs.c **** * Description    : Toggle the DTOG_RX bit.
 395:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 396:usb_lib/usb_regs.c **** * Output         : None.
 397:usb_lib/usb_regs.c **** * Return         : None.
 398:usb_lib/usb_regs.c **** *******************************************************************************/
 399:usb_lib/usb_regs.c **** void ToggleDTOG_RX(u8 bEpNum)
 400:usb_lib/usb_regs.c **** {
 900              		.loc 1 400 0
 901              		.cfi_startproc
 902              		@ args = 0, pretend = 0, frame = 0
 903              		@ frame_needed = 0, uses_anonymous_args = 0
 904              		@ link register save eliminated.
 905              	.LVL57:
 401:usb_lib/usb_regs.c ****   _ToggleDTOG_RX(bEpNum);
 906              		.loc 1 401 0
 907 0000 8000     		lsls	r0, r0, #2
 908              	.LVL58:
 909 0002 00F18040 		add	r0, r0, #1073741824
 910 0006 00F5B840 		add	r0, r0, #23552
 911 000a 0368     		ldr	r3, [r0]
 912 000c 23F4E043 		bic	r3, r3, #28672
 913 0010 23F07003 		bic	r3, r3, #112
 914 0014 1B04     		lsls	r3, r3, #16
 915 0016 1B0C     		lsrs	r3, r3, #16
 916 0018 43F48043 		orr	r3, r3, #16384
 917 001c 0360     		str	r3, [r0]
 918 001e 7047     		bx	lr
 919              		.cfi_endproc
 920              	.LFE30:
 922              		.section	.text.ToggleDTOG_TX,"ax",%progbits
 923              		.align	1
 924              		.global	ToggleDTOG_TX
 925              		.thumb
 926              		.thumb_func
 928              	ToggleDTOG_TX:
 929              	.LFB31:
 402:usb_lib/usb_regs.c **** }
 403:usb_lib/usb_regs.c **** /*******************************************************************************
 404:usb_lib/usb_regs.c **** * Function Name  : ToggleDTOG_TX
 405:usb_lib/usb_regs.c **** * Description    : Toggle the DTOG_TX bit.
 406:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 407:usb_lib/usb_regs.c **** * Output         : None.
 408:usb_lib/usb_regs.c **** * Return         : None.
 409:usb_lib/usb_regs.c **** *******************************************************************************/
 410:usb_lib/usb_regs.c **** void ToggleDTOG_TX(u8 bEpNum)
 411:usb_lib/usb_regs.c **** {
 930              		.loc 1 411 0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 0
 933              		@ frame_needed = 0, uses_anonymous_args = 0
 934              		@ link register save eliminated.
 935              	.LVL59:
 412:usb_lib/usb_regs.c ****   _ToggleDTOG_TX(bEpNum);
 936              		.loc 1 412 0
 937 0000 8000     		lsls	r0, r0, #2
 938              	.LVL60:
 939 0002 00F18040 		add	r0, r0, #1073741824
 940 0006 00F5B840 		add	r0, r0, #23552
 941 000a 0368     		ldr	r3, [r0]
 942 000c 23F4E043 		bic	r3, r3, #28672
 943 0010 23F07003 		bic	r3, r3, #112
 944 0014 1B04     		lsls	r3, r3, #16
 945 0016 1B0C     		lsrs	r3, r3, #16
 946 0018 43F04003 		orr	r3, r3, #64
 947 001c 0360     		str	r3, [r0]
 948 001e 7047     		bx	lr
 949              		.cfi_endproc
 950              	.LFE31:
 952              		.section	.text.ClearDTOG_RX,"ax",%progbits
 953              		.align	1
 954              		.global	ClearDTOG_RX
 955              		.thumb
 956              		.thumb_func
 958              	ClearDTOG_RX:
 959              	.LFB32:
 413:usb_lib/usb_regs.c **** }
 414:usb_lib/usb_regs.c **** /*******************************************************************************
 415:usb_lib/usb_regs.c **** * Function Name  : ClearDTOG_RX.
 416:usb_lib/usb_regs.c **** * Description    : Clear the DTOG_RX bit.
 417:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 418:usb_lib/usb_regs.c **** * Output         : None.
 419:usb_lib/usb_regs.c **** * Return         : None.
 420:usb_lib/usb_regs.c **** *******************************************************************************/
 421:usb_lib/usb_regs.c **** void ClearDTOG_RX(u8 bEpNum)
 422:usb_lib/usb_regs.c **** {
 960              		.loc 1 422 0
 961              		.cfi_startproc
 962              		@ args = 0, pretend = 0, frame = 0
 963              		@ frame_needed = 0, uses_anonymous_args = 0
 964              		@ link register save eliminated.
 965              	.LVL61:
 423:usb_lib/usb_regs.c ****   _ClearDTOG_RX(bEpNum);
 966              		.loc 1 423 0
 967 0000 8000     		lsls	r0, r0, #2
 968              	.LVL62:
 969 0002 00F18040 		add	r0, r0, #1073741824
 970 0006 00F5B840 		add	r0, r0, #23552
 971 000a 0368     		ldr	r3, [r0]
 972 000c 5B04     		lsls	r3, r3, #17
 973 000e 06D5     		bpl	.L71
 974              		.loc 1 423 0 is_stmt 0 discriminator 1
 975 0010 0268     		ldr	r2, [r0]
 976 0012 48F68F73 		movw	r3, #36751
 977 0016 1340     		ands	r3, r3, r2
 978 0018 43F48043 		orr	r3, r3, #16384
 979 001c 0360     		str	r3, [r0]
 980              	.L71:
 981 001e 7047     		bx	lr
 982              		.cfi_endproc
 983              	.LFE32:
 985              		.section	.text.ClearDTOG_TX,"ax",%progbits
 986              		.align	1
 987              		.global	ClearDTOG_TX
 988              		.thumb
 989              		.thumb_func
 991              	ClearDTOG_TX:
 992              	.LFB33:
 424:usb_lib/usb_regs.c **** }
 425:usb_lib/usb_regs.c **** /*******************************************************************************
 426:usb_lib/usb_regs.c **** * Function Name  : ClearDTOG_TX.
 427:usb_lib/usb_regs.c **** * Description    : Clear the DTOG_TX bit.
 428:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 429:usb_lib/usb_regs.c **** * Output         : None.
 430:usb_lib/usb_regs.c **** * Return         : None.
 431:usb_lib/usb_regs.c **** *******************************************************************************/
 432:usb_lib/usb_regs.c **** void ClearDTOG_TX(u8 bEpNum)
 433:usb_lib/usb_regs.c **** {
 993              		.loc 1 433 0 is_stmt 1
 994              		.cfi_startproc
 995              		@ args = 0, pretend = 0, frame = 0
 996              		@ frame_needed = 0, uses_anonymous_args = 0
 997              		@ link register save eliminated.
 998              	.LVL63:
 434:usb_lib/usb_regs.c ****   _ClearDTOG_TX(bEpNum);
 999              		.loc 1 434 0
 1000 0000 8000     		lsls	r0, r0, #2
 1001              	.LVL64:
 1002 0002 00F18040 		add	r0, r0, #1073741824
 1003 0006 00F5B840 		add	r0, r0, #23552
 1004 000a 0368     		ldr	r3, [r0]
 1005 000c 5B06     		lsls	r3, r3, #25
 1006 000e 06D5     		bpl	.L76
 1007              		.loc 1 434 0 is_stmt 0 discriminator 1
 1008 0010 0268     		ldr	r2, [r0]
 1009 0012 48F68F73 		movw	r3, #36751
 1010 0016 1340     		ands	r3, r3, r2
 1011 0018 43F04003 		orr	r3, r3, #64
 1012 001c 0360     		str	r3, [r0]
 1013              	.L76:
 1014 001e 7047     		bx	lr
 1015              		.cfi_endproc
 1016              	.LFE33:
 1018              		.section	.text.SetEPAddress,"ax",%progbits
 1019              		.align	1
 1020              		.global	SetEPAddress
 1021              		.thumb
 1022              		.thumb_func
 1024              	SetEPAddress:
 1025              	.LFB34:
 435:usb_lib/usb_regs.c **** }
 436:usb_lib/usb_regs.c **** /*******************************************************************************
 437:usb_lib/usb_regs.c **** * Function Name  : SetEPAddress
 438:usb_lib/usb_regs.c **** * Description    : Set the endpoint address.
 439:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 440:usb_lib/usb_regs.c **** *                  bAddr: New endpoint address.
 441:usb_lib/usb_regs.c **** * Output         : None.
 442:usb_lib/usb_regs.c **** * Return         : None.
 443:usb_lib/usb_regs.c **** *******************************************************************************/
 444:usb_lib/usb_regs.c **** void SetEPAddress(u8 bEpNum, u8 bAddr)
 445:usb_lib/usb_regs.c **** {
 1026              		.loc 1 445 0 is_stmt 1
 1027              		.cfi_startproc
 1028              		@ args = 0, pretend = 0, frame = 0
 1029              		@ frame_needed = 0, uses_anonymous_args = 0
 1030              		@ link register save eliminated.
 1031              	.LVL65:
 446:usb_lib/usb_regs.c ****   _SetEPAddress(bEpNum, bAddr);
 1032              		.loc 1 446 0
 1033 0000 8000     		lsls	r0, r0, #2
 1034              	.LVL66:
 1035 0002 00F18040 		add	r0, r0, #1073741824
 1036 0006 00F5B840 		add	r0, r0, #23552
 1037 000a 0368     		ldr	r3, [r0]
 1038 000c 23F4E043 		bic	r3, r3, #28672
 1039 0010 23F07003 		bic	r3, r3, #112
 1040 0014 1B04     		lsls	r3, r3, #16
 1041 0016 1B0C     		lsrs	r3, r3, #16
 1042 0018 1943     		orrs	r1, r1, r3
 1043              	.LVL67:
 1044 001a 0160     		str	r1, [r0]
 1045 001c 7047     		bx	lr
 1046              		.cfi_endproc
 1047              	.LFE34:
 1049              		.section	.text.GetEPAddress,"ax",%progbits
 1050              		.align	1
 1051              		.global	GetEPAddress
 1052              		.thumb
 1053              		.thumb_func
 1055              	GetEPAddress:
 1056              	.LFB35:
 447:usb_lib/usb_regs.c **** }
 448:usb_lib/usb_regs.c **** /*******************************************************************************
 449:usb_lib/usb_regs.c **** * Function Name  : GetEPAddress
 450:usb_lib/usb_regs.c **** * Description    : Get the endpoint address.
 451:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 452:usb_lib/usb_regs.c **** * Output         : None.
 453:usb_lib/usb_regs.c **** * Return         : Endpoint address.
 454:usb_lib/usb_regs.c **** *******************************************************************************/
 455:usb_lib/usb_regs.c **** u8 GetEPAddress(u8 bEpNum)
 456:usb_lib/usb_regs.c **** {
 1057              		.loc 1 456 0
 1058              		.cfi_startproc
 1059              		@ args = 0, pretend = 0, frame = 0
 1060              		@ frame_needed = 0, uses_anonymous_args = 0
 1061              		@ link register save eliminated.
 1062              	.LVL68:
 457:usb_lib/usb_regs.c ****   return(_GetEPAddress(bEpNum));
 1063              		.loc 1 457 0
 1064 0000 8000     		lsls	r0, r0, #2
 1065              	.LVL69:
 1066 0002 00F18040 		add	r0, r0, #1073741824
 1067 0006 00F5B840 		add	r0, r0, #23552
 1068 000a 0068     		ldr	r0, [r0]
 458:usb_lib/usb_regs.c **** }
 1069              		.loc 1 458 0
 1070 000c 00F00F00 		and	r0, r0, #15
 1071 0010 7047     		bx	lr
 1072              		.cfi_endproc
 1073              	.LFE35:
 1075              		.section	.text.SetEPTxAddr,"ax",%progbits
 1076              		.align	1
 1077              		.global	SetEPTxAddr
 1078              		.thumb
 1079              		.thumb_func
 1081              	SetEPTxAddr:
 1082              	.LFB36:
 459:usb_lib/usb_regs.c **** /*******************************************************************************
 460:usb_lib/usb_regs.c **** * Function Name  : SetEPTxAddr
 461:usb_lib/usb_regs.c **** * Description    : Set the endpoint Tx buffer address.
 462:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 463:usb_lib/usb_regs.c **** *                  wAddr: new address.
 464:usb_lib/usb_regs.c **** * Output         : None.
 465:usb_lib/usb_regs.c **** * Return         : None.
 466:usb_lib/usb_regs.c **** *******************************************************************************/
 467:usb_lib/usb_regs.c **** void SetEPTxAddr(u8 bEpNum, u16 wAddr)
 468:usb_lib/usb_regs.c **** {
 1083              		.loc 1 468 0
 1084              		.cfi_startproc
 1085              		@ args = 0, pretend = 0, frame = 0
 1086              		@ frame_needed = 0, uses_anonymous_args = 0
 1087              		@ link register save eliminated.
 1088              	.LVL70:
 469:usb_lib/usb_regs.c ****   _SetEPTxAddr(bEpNum, wAddr);
 1089              		.loc 1 469 0
 1090 0000 064B     		ldr	r3, .L84
 1091 0002 4908     		lsrs	r1, r1, #1
 1092              	.LVL71:
 1093 0004 1B68     		ldr	r3, [r3]
 1094 0006 4900     		lsls	r1, r1, #1
 1095 0008 9BB2     		uxth	r3, r3
 1096 000a 03EBC000 		add	r0, r3, r0, lsl #3
 1097              	.LVL72:
 1098 000e 00F10050 		add	r0, r0, #536870912
 1099 0012 00F54050 		add	r0, r0, #12288
 1100 0016 4000     		lsls	r0, r0, #1
 1101 0018 0160     		str	r1, [r0]
 1102 001a 7047     		bx	lr
 1103              	.L85:
 1104              		.align	2
 1105              	.L84:
 1106 001c 505C0040 		.word	1073765456
 1107              		.cfi_endproc
 1108              	.LFE36:
 1110              		.section	.text.SetEPRxAddr,"ax",%progbits
 1111              		.align	1
 1112              		.global	SetEPRxAddr
 1113              		.thumb
 1114              		.thumb_func
 1116              	SetEPRxAddr:
 1117              	.LFB37:
 470:usb_lib/usb_regs.c **** }
 471:usb_lib/usb_regs.c **** /*******************************************************************************
 472:usb_lib/usb_regs.c **** * Function Name  : SetEPRxAddr
 473:usb_lib/usb_regs.c **** * Description    : Set the endpoint Rx buffer address.
 474:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 475:usb_lib/usb_regs.c **** *                  wAddr: new address.
 476:usb_lib/usb_regs.c **** * Output         : None.
 477:usb_lib/usb_regs.c **** * Return         : None.
 478:usb_lib/usb_regs.c **** *******************************************************************************/
 479:usb_lib/usb_regs.c **** void SetEPRxAddr(u8 bEpNum, u16 wAddr)
 480:usb_lib/usb_regs.c **** {
 1118              		.loc 1 480 0
 1119              		.cfi_startproc
 1120              		@ args = 0, pretend = 0, frame = 0
 1121              		@ frame_needed = 0, uses_anonymous_args = 0
 1122              		@ link register save eliminated.
 1123              	.LVL73:
 481:usb_lib/usb_regs.c ****   _SetEPRxAddr(bEpNum, wAddr);
 1124              		.loc 1 481 0
 1125 0000 054B     		ldr	r3, .L87
 1126 0002 4908     		lsrs	r1, r1, #1
 1127              	.LVL74:
 1128 0004 1B68     		ldr	r3, [r3]
 1129 0006 4900     		lsls	r1, r1, #1
 1130 0008 9BB2     		uxth	r3, r3
 1131 000a 03EBC000 		add	r0, r3, r0, lsl #3
 1132              	.LVL75:
 1133 000e 034B     		ldr	r3, .L87+4
 1134 0010 0344     		add	r3, r3, r0
 1135 0012 5B00     		lsls	r3, r3, #1
 1136 0014 1960     		str	r1, [r3]
 1137 0016 7047     		bx	lr
 1138              	.L88:
 1139              		.align	2
 1140              	.L87:
 1141 0018 505C0040 		.word	1073765456
 1142 001c 04300020 		.word	536883204
 1143              		.cfi_endproc
 1144              	.LFE37:
 1146              		.section	.text.GetEPTxAddr,"ax",%progbits
 1147              		.align	1
 1148              		.global	GetEPTxAddr
 1149              		.thumb
 1150              		.thumb_func
 1152              	GetEPTxAddr:
 1153              	.LFB38:
 482:usb_lib/usb_regs.c **** }
 483:usb_lib/usb_regs.c **** /*******************************************************************************
 484:usb_lib/usb_regs.c **** * Function Name  : GetEPTxAddr
 485:usb_lib/usb_regs.c **** * Description    : Returns the endpoint Tx buffer address.
 486:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 487:usb_lib/usb_regs.c **** * Output         : None.
 488:usb_lib/usb_regs.c **** * Return         : Rx buffer address.
 489:usb_lib/usb_regs.c **** *******************************************************************************/
 490:usb_lib/usb_regs.c **** u16 GetEPTxAddr(u8 bEpNum)
 491:usb_lib/usb_regs.c **** {
 1154              		.loc 1 491 0
 1155              		.cfi_startproc
 1156              		@ args = 0, pretend = 0, frame = 0
 1157              		@ frame_needed = 0, uses_anonymous_args = 0
 1158              		@ link register save eliminated.
 1159              	.LVL76:
 492:usb_lib/usb_regs.c ****   return(_GetEPTxAddr(bEpNum));
 1160              		.loc 1 492 0
 1161 0000 054B     		ldr	r3, .L90
 1162 0002 1B68     		ldr	r3, [r3]
 1163 0004 9BB2     		uxth	r3, r3
 1164 0006 03EBC000 		add	r0, r3, r0, lsl #3
 1165              	.LVL77:
 1166 000a 00F10050 		add	r0, r0, #536870912
 1167 000e 00F54050 		add	r0, r0, #12288
 1168 0012 4000     		lsls	r0, r0, #1
 493:usb_lib/usb_regs.c **** }
 1169              		.loc 1 493 0
 1170 0014 0088     		ldrh	r0, [r0]
 1171 0016 7047     		bx	lr
 1172              	.L91:
 1173              		.align	2
 1174              	.L90:
 1175 0018 505C0040 		.word	1073765456
 1176              		.cfi_endproc
 1177              	.LFE38:
 1179              		.section	.text.GetEPRxAddr,"ax",%progbits
 1180              		.align	1
 1181              		.global	GetEPRxAddr
 1182              		.thumb
 1183              		.thumb_func
 1185              	GetEPRxAddr:
 1186              	.LFB39:
 494:usb_lib/usb_regs.c **** /*******************************************************************************
 495:usb_lib/usb_regs.c **** * Function Name  : GetEPRxAddr.
 496:usb_lib/usb_regs.c **** * Description    : Returns the endpoint Rx buffer address.
 497:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 498:usb_lib/usb_regs.c **** * Output         : None.
 499:usb_lib/usb_regs.c **** * Return         : Rx buffer address.
 500:usb_lib/usb_regs.c **** *******************************************************************************/
 501:usb_lib/usb_regs.c **** u16 GetEPRxAddr(u8 bEpNum)
 502:usb_lib/usb_regs.c **** {
 1187              		.loc 1 502 0
 1188              		.cfi_startproc
 1189              		@ args = 0, pretend = 0, frame = 0
 1190              		@ frame_needed = 0, uses_anonymous_args = 0
 1191              		@ link register save eliminated.
 1192              	.LVL78:
 503:usb_lib/usb_regs.c ****   return(_GetEPRxAddr(bEpNum));
 1193              		.loc 1 503 0
 1194 0000 044B     		ldr	r3, .L93
 1195 0002 1B68     		ldr	r3, [r3]
 1196 0004 9BB2     		uxth	r3, r3
 1197 0006 03EBC000 		add	r0, r3, r0, lsl #3
 1198              	.LVL79:
 1199 000a 034B     		ldr	r3, .L93+4
 1200 000c 0344     		add	r3, r3, r0
 1201 000e 5B00     		lsls	r3, r3, #1
 504:usb_lib/usb_regs.c **** }
 1202              		.loc 1 504 0
 1203 0010 1888     		ldrh	r0, [r3]
 1204 0012 7047     		bx	lr
 1205              	.L94:
 1206              		.align	2
 1207              	.L93:
 1208 0014 505C0040 		.word	1073765456
 1209 0018 04300020 		.word	536883204
 1210              		.cfi_endproc
 1211              	.LFE39:
 1213              		.section	.text.SetEPTxCount,"ax",%progbits
 1214              		.align	1
 1215              		.global	SetEPTxCount
 1216              		.thumb
 1217              		.thumb_func
 1219              	SetEPTxCount:
 1220              	.LFB40:
 505:usb_lib/usb_regs.c **** /*******************************************************************************
 506:usb_lib/usb_regs.c **** * Function Name  : SetEPTxCount.
 507:usb_lib/usb_regs.c **** * Description    : Set the Tx count.
 508:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 509:usb_lib/usb_regs.c **** *                  wCount: new count value.
 510:usb_lib/usb_regs.c **** * Output         : None.
 511:usb_lib/usb_regs.c **** * Return         : None.
 512:usb_lib/usb_regs.c **** *******************************************************************************/
 513:usb_lib/usb_regs.c **** void SetEPTxCount(u8 bEpNum, u16 wCount)
 514:usb_lib/usb_regs.c **** {
 1221              		.loc 1 514 0
 1222              		.cfi_startproc
 1223              		@ args = 0, pretend = 0, frame = 0
 1224              		@ frame_needed = 0, uses_anonymous_args = 0
 1225              		@ link register save eliminated.
 1226              	.LVL80:
 515:usb_lib/usb_regs.c ****   _SetEPTxCount(bEpNum, wCount);
 1227              		.loc 1 515 0
 1228 0000 044B     		ldr	r3, .L96
 1229 0002 1B68     		ldr	r3, [r3]
 1230 0004 9BB2     		uxth	r3, r3
 1231 0006 03EBC000 		add	r0, r3, r0, lsl #3
 1232              	.LVL81:
 1233 000a 034B     		ldr	r3, .L96+4
 1234 000c 0344     		add	r3, r3, r0
 1235 000e 5B00     		lsls	r3, r3, #1
 1236 0010 1960     		str	r1, [r3]
 1237 0012 7047     		bx	lr
 1238              	.L97:
 1239              		.align	2
 1240              	.L96:
 1241 0014 505C0040 		.word	1073765456
 1242 0018 02300020 		.word	536883202
 1243              		.cfi_endproc
 1244              	.LFE40:
 1246              		.section	.text.SetEPCountRxReg,"ax",%progbits
 1247              		.align	1
 1248              		.global	SetEPCountRxReg
 1249              		.thumb
 1250              		.thumb_func
 1252              	SetEPCountRxReg:
 1253              	.LFB41:
 516:usb_lib/usb_regs.c **** }
 517:usb_lib/usb_regs.c **** /*******************************************************************************
 518:usb_lib/usb_regs.c **** * Function Name  : SetEPCountRxReg.
 519:usb_lib/usb_regs.c **** * Description    : Set the Count Rx Register value.
 520:usb_lib/usb_regs.c **** * Input          : *pdwReg: point to the register.
 521:usb_lib/usb_regs.c **** *                  wCount: the new register value.
 522:usb_lib/usb_regs.c **** * Output         : None.
 523:usb_lib/usb_regs.c **** * Return         : None.
 524:usb_lib/usb_regs.c **** *******************************************************************************/
 525:usb_lib/usb_regs.c **** void SetEPCountRxReg(u32 *pdwReg, u16 wCount)
 526:usb_lib/usb_regs.c **** {
 1254              		.loc 1 526 0
 1255              		.cfi_startproc
 1256              		@ args = 0, pretend = 0, frame = 0
 1257              		@ frame_needed = 0, uses_anonymous_args = 0
 1258              		@ link register save eliminated.
 1259              	.LVL82:
 1260              	.LBB12:
 527:usb_lib/usb_regs.c ****   _SetEPCountRxReg(dwReg, wCount);
 1261              		.loc 1 527 0
 1262 0000 3E29     		cmp	r1, #62
 1263 0002 09D9     		bls	.L99
 1264              		.loc 1 527 0 is_stmt 0 discriminator 1
 1265 0004 4B09     		lsrs	r3, r1, #5
 1266              	.LVL83:
 1267 0006 C906     		lsls	r1, r1, #27
 1268              	.LVL84:
 1269 0008 04BF     		itt	eq
 1270 000a 03F1FF33 		addeq	r3, r3, #-1
 1271              	.LVL85:
 1272 000e 9BB2     		uxtheq	r3, r3
 1273              	.LVL86:
 1274 0010 9B02     		lsls	r3, r3, #10
 1275              	.LVL87:
 1276 0012 43F40043 		orr	r3, r3, #32768
 1277 0016 04E0     		b	.L106
 1278              	.LVL88:
 1279              	.L99:
 1280              		.loc 1 527 0 discriminator 2
 1281 0018 4B08     		lsrs	r3, r1, #1
 1282              	.LVL89:
 1283 001a CA07     		lsls	r2, r1, #31
 1284 001c 48BF     		it	mi
 1285 001e 0133     		addmi	r3, r3, #1
 1286              	.LVL90:
 1287 0020 9B02     		lsls	r3, r3, #10
 1288              	.LVL91:
 1289              	.L106:
 1290 0022 0360     		str	r3, [r0]
 1291 0024 7047     		bx	lr
 1292              	.LBE12:
 1293              		.cfi_endproc
 1294              	.LFE41:
 1296              		.section	.text.SetEPRxCount,"ax",%progbits
 1297              		.align	1
 1298              		.global	SetEPRxCount
 1299              		.thumb
 1300              		.thumb_func
 1302              	SetEPRxCount:
 1303              	.LFB42:
 528:usb_lib/usb_regs.c **** }
 529:usb_lib/usb_regs.c **** /*******************************************************************************
 530:usb_lib/usb_regs.c **** * Function Name  : SetEPRxCount
 531:usb_lib/usb_regs.c **** * Description    : Set the Rx count.
 532:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 533:usb_lib/usb_regs.c **** *                  wCount: the new count value.
 534:usb_lib/usb_regs.c **** * Output         : None.
 535:usb_lib/usb_regs.c **** * Return         : None.
 536:usb_lib/usb_regs.c **** *******************************************************************************/
 537:usb_lib/usb_regs.c **** void SetEPRxCount(u8 bEpNum, u16 wCount)
 538:usb_lib/usb_regs.c **** {
 1304              		.loc 1 538 0 is_stmt 1
 1305              		.cfi_startproc
 1306              		@ args = 0, pretend = 0, frame = 0
 1307              		@ frame_needed = 0, uses_anonymous_args = 0
 1308              		@ link register save eliminated.
 1309              	.LVL92:
 1310              	.LBB13:
 539:usb_lib/usb_regs.c ****   _SetEPRxCount(bEpNum, wCount);
 1311              		.loc 1 539 0
 1312 0000 0D4B     		ldr	r3, .L116
 1313              	.LBB14:
 1314 0002 3E29     		cmp	r1, #62
 1315              	.LBE14:
 1316 0004 1B68     		ldr	r3, [r3]
 1317 0006 9BB2     		uxth	r3, r3
 1318 0008 03EBC000 		add	r0, r3, r0, lsl #3
 1319              	.LVL93:
 1320 000c 0B4B     		ldr	r3, .L116+4
 1321 000e 0344     		add	r3, r3, r0
 1322 0010 4FEA4302 		lsl	r2, r3, #1
 1323              	.LVL94:
 1324              	.LBB15:
 1325 0014 09D9     		bls	.L108
 1326              		.loc 1 539 0 is_stmt 0 discriminator 1
 1327 0016 4B09     		lsrs	r3, r1, #5
 1328              	.LVL95:
 1329 0018 C806     		lsls	r0, r1, #27
 1330 001a 04BF     		itt	eq
 1331 001c 03F1FF33 		addeq	r3, r3, #-1
 1332              	.LVL96:
 1333 0020 9BB2     		uxtheq	r3, r3
 1334              	.LVL97:
 1335 0022 9B02     		lsls	r3, r3, #10
 1336              	.LVL98:
 1337 0024 43F40043 		orr	r3, r3, #32768
 1338 0028 04E0     		b	.L115
 1339              	.LVL99:
 1340              	.L108:
 1341              		.loc 1 539 0 discriminator 2
 1342 002a 4B08     		lsrs	r3, r1, #1
 1343              	.LVL100:
 1344 002c C907     		lsls	r1, r1, #31
 1345              	.LVL101:
 1346 002e 48BF     		it	mi
 1347 0030 0133     		addmi	r3, r3, #1
 1348              	.LVL102:
 1349 0032 9B02     		lsls	r3, r3, #10
 1350              	.LVL103:
 1351              	.L115:
 1352 0034 1360     		str	r3, [r2]
 1353 0036 7047     		bx	lr
 1354              	.L117:
 1355              		.align	2
 1356              	.L116:
 1357 0038 505C0040 		.word	1073765456
 1358 003c 06300020 		.word	536883206
 1359              	.LBE15:
 1360              	.LBE13:
 1361              		.cfi_endproc
 1362              	.LFE42:
 1364              		.section	.text.GetEPTxCount,"ax",%progbits
 1365              		.align	1
 1366              		.global	GetEPTxCount
 1367              		.thumb
 1368              		.thumb_func
 1370              	GetEPTxCount:
 1371              	.LFB43:
 540:usb_lib/usb_regs.c **** }
 541:usb_lib/usb_regs.c **** /*******************************************************************************
 542:usb_lib/usb_regs.c **** * Function Name  : GetEPTxCount
 543:usb_lib/usb_regs.c **** * Description    : Get the Tx count.
 544:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 545:usb_lib/usb_regs.c **** * Output         : None
 546:usb_lib/usb_regs.c **** * Return         : Tx count value.
 547:usb_lib/usb_regs.c **** *******************************************************************************/
 548:usb_lib/usb_regs.c **** u16 GetEPTxCount(u8 bEpNum)
 549:usb_lib/usb_regs.c **** {
 1372              		.loc 1 549 0 is_stmt 1
 1373              		.cfi_startproc
 1374              		@ args = 0, pretend = 0, frame = 0
 1375              		@ frame_needed = 0, uses_anonymous_args = 0
 1376              		@ link register save eliminated.
 1377              	.LVL104:
 550:usb_lib/usb_regs.c ****   return(_GetEPTxCount(bEpNum));
 1378              		.loc 1 550 0
 1379 0000 054B     		ldr	r3, .L119
 1380 0002 1B68     		ldr	r3, [r3]
 1381 0004 9BB2     		uxth	r3, r3
 1382 0006 03EBC000 		add	r0, r3, r0, lsl #3
 1383              	.LVL105:
 1384 000a 044B     		ldr	r3, .L119+4
 1385 000c 0344     		add	r3, r3, r0
 1386 000e 5B00     		lsls	r3, r3, #1
 1387 0010 1868     		ldr	r0, [r3]
 551:usb_lib/usb_regs.c **** }
 1388              		.loc 1 551 0
 1389 0012 C0F30900 		ubfx	r0, r0, #0, #10
 1390 0016 7047     		bx	lr
 1391              	.L120:
 1392              		.align	2
 1393              	.L119:
 1394 0018 505C0040 		.word	1073765456
 1395 001c 02300020 		.word	536883202
 1396              		.cfi_endproc
 1397              	.LFE43:
 1399              		.section	.text.GetEPRxCount,"ax",%progbits
 1400              		.align	1
 1401              		.global	GetEPRxCount
 1402              		.thumb
 1403              		.thumb_func
 1405              	GetEPRxCount:
 1406              	.LFB44:
 552:usb_lib/usb_regs.c **** /*******************************************************************************
 553:usb_lib/usb_regs.c **** * Function Name  : GetEPRxCount
 554:usb_lib/usb_regs.c **** * Description    : Get the Rx count.
 555:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 556:usb_lib/usb_regs.c **** * Output         : None.
 557:usb_lib/usb_regs.c **** * Return         : Rx count value.
 558:usb_lib/usb_regs.c **** *******************************************************************************/
 559:usb_lib/usb_regs.c **** u16 GetEPRxCount(u8 bEpNum)
 560:usb_lib/usb_regs.c **** {
 1407              		.loc 1 560 0
 1408              		.cfi_startproc
 1409              		@ args = 0, pretend = 0, frame = 0
 1410              		@ frame_needed = 0, uses_anonymous_args = 0
 1411              		@ link register save eliminated.
 1412              	.LVL106:
 561:usb_lib/usb_regs.c ****   return(_GetEPRxCount(bEpNum));
 1413              		.loc 1 561 0
 1414 0000 054B     		ldr	r3, .L122
 1415 0002 1B68     		ldr	r3, [r3]
 1416 0004 9BB2     		uxth	r3, r3
 1417 0006 03EBC000 		add	r0, r3, r0, lsl #3
 1418              	.LVL107:
 1419 000a 044B     		ldr	r3, .L122+4
 1420 000c 0344     		add	r3, r3, r0
 1421 000e 5B00     		lsls	r3, r3, #1
 1422 0010 1868     		ldr	r0, [r3]
 562:usb_lib/usb_regs.c **** }
 1423              		.loc 1 562 0
 1424 0012 C0F30900 		ubfx	r0, r0, #0, #10
 1425 0016 7047     		bx	lr
 1426              	.L123:
 1427              		.align	2
 1428              	.L122:
 1429 0018 505C0040 		.word	1073765456
 1430 001c 06300020 		.word	536883206
 1431              		.cfi_endproc
 1432              	.LFE44:
 1434              		.section	.text.SetEPDblBuffAddr,"ax",%progbits
 1435              		.align	1
 1436              		.global	SetEPDblBuffAddr
 1437              		.thumb
 1438              		.thumb_func
 1440              	SetEPDblBuffAddr:
 1441              	.LFB45:
 563:usb_lib/usb_regs.c **** /*******************************************************************************
 564:usb_lib/usb_regs.c **** * Function Name  : SetEPDblBuffAddr
 565:usb_lib/usb_regs.c **** * Description    : Set the addresses of the buffer 0 and 1.
 566:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 567:usb_lib/usb_regs.c **** *                  wBuf0Addr: new address of buffer 0.
 568:usb_lib/usb_regs.c **** *                  wBuf1Addr: new address of buffer 1.
 569:usb_lib/usb_regs.c **** * Output         : None.
 570:usb_lib/usb_regs.c **** * Return         : None.
 571:usb_lib/usb_regs.c **** *******************************************************************************/
 572:usb_lib/usb_regs.c **** void SetEPDblBuffAddr(u8 bEpNum, u16 wBuf0Addr, u16 wBuf1Addr)
 573:usb_lib/usb_regs.c **** {
 1442              		.loc 1 573 0
 1443              		.cfi_startproc
 1444              		@ args = 0, pretend = 0, frame = 0
 1445              		@ frame_needed = 0, uses_anonymous_args = 0
 1446              	.LVL108:
 1447 0000 10B5     		push	{r4, lr}
 1448              		.cfi_def_cfa_offset 8
 1449              		.cfi_offset 4, -8
 1450              		.cfi_offset 14, -4
 574:usb_lib/usb_regs.c ****   _SetEPDblBuffAddr(bEpNum, wBuf0Addr, wBuf1Addr);
 1451              		.loc 1 574 0
 1452 0002 0B4C     		ldr	r4, .L125
 1453 0004 C000     		lsls	r0, r0, #3
 1454              	.LVL109:
 1455 0006 2368     		ldr	r3, [r4]
 1456 0008 4908     		lsrs	r1, r1, #1
 1457              	.LVL110:
 1458 000a 9BB2     		uxth	r3, r3
 1459 000c 0344     		add	r3, r3, r0
 1460 000e 03F10053 		add	r3, r3, #536870912
 1461 0012 03F54053 		add	r3, r3, #12288
 1462 0016 5B00     		lsls	r3, r3, #1
 1463 0018 4900     		lsls	r1, r1, #1
 1464 001a 1960     		str	r1, [r3]
 1465 001c 2368     		ldr	r3, [r4]
 1466 001e 5208     		lsrs	r2, r2, #1
 1467              	.LVL111:
 1468 0020 9BB2     		uxth	r3, r3
 1469 0022 1844     		add	r0, r0, r3
 1470 0024 034B     		ldr	r3, .L125+4
 1471 0026 5200     		lsls	r2, r2, #1
 1472 0028 0344     		add	r3, r3, r0
 1473 002a 5B00     		lsls	r3, r3, #1
 1474 002c 1A60     		str	r2, [r3]
 1475 002e 10BD     		pop	{r4, pc}
 1476              	.L126:
 1477              		.align	2
 1478              	.L125:
 1479 0030 505C0040 		.word	1073765456
 1480 0034 04300020 		.word	536883204
 1481              		.cfi_endproc
 1482              	.LFE45:
 1484              		.section	.text.SetEPDblBuf0Addr,"ax",%progbits
 1485              		.align	1
 1486              		.global	SetEPDblBuf0Addr
 1487              		.thumb
 1488              		.thumb_func
 1490              	SetEPDblBuf0Addr:
 1491              	.LFB46:
 575:usb_lib/usb_regs.c **** }
 576:usb_lib/usb_regs.c **** /*******************************************************************************
 577:usb_lib/usb_regs.c **** * Function Name  : SetEPDblBuf0Addr
 578:usb_lib/usb_regs.c **** * Description    : Set the Buffer 1 address.
 579:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number
 580:usb_lib/usb_regs.c **** *                  wBuf0Addr: new address.
 581:usb_lib/usb_regs.c **** * Output         : None.
 582:usb_lib/usb_regs.c **** * Return         : None.
 583:usb_lib/usb_regs.c **** *******************************************************************************/
 584:usb_lib/usb_regs.c **** void SetEPDblBuf0Addr(u8 bEpNum, u16 wBuf0Addr)
 585:usb_lib/usb_regs.c **** {
 1492              		.loc 1 585 0
 1493              		.cfi_startproc
 1494              		@ args = 0, pretend = 0, frame = 0
 1495              		@ frame_needed = 0, uses_anonymous_args = 0
 1496              		@ link register save eliminated.
 1497              	.LVL112:
 586:usb_lib/usb_regs.c ****   _SetEPDblBuf0Addr(bEpNum, wBuf0Addr);
 1498              		.loc 1 586 0
 1499 0000 064B     		ldr	r3, .L128
 1500 0002 4908     		lsrs	r1, r1, #1
 1501              	.LVL113:
 1502 0004 1B68     		ldr	r3, [r3]
 1503 0006 4900     		lsls	r1, r1, #1
 1504 0008 9BB2     		uxth	r3, r3
 1505 000a 03EBC000 		add	r0, r3, r0, lsl #3
 1506              	.LVL114:
 1507 000e 00F10050 		add	r0, r0, #536870912
 1508 0012 00F54050 		add	r0, r0, #12288
 1509 0016 4000     		lsls	r0, r0, #1
 1510 0018 0160     		str	r1, [r0]
 1511 001a 7047     		bx	lr
 1512              	.L129:
 1513              		.align	2
 1514              	.L128:
 1515 001c 505C0040 		.word	1073765456
 1516              		.cfi_endproc
 1517              	.LFE46:
 1519              		.section	.text.SetEPDblBuf1Addr,"ax",%progbits
 1520              		.align	1
 1521              		.global	SetEPDblBuf1Addr
 1522              		.thumb
 1523              		.thumb_func
 1525              	SetEPDblBuf1Addr:
 1526              	.LFB47:
 587:usb_lib/usb_regs.c **** }
 588:usb_lib/usb_regs.c **** /*******************************************************************************
 589:usb_lib/usb_regs.c **** * Function Name  : SetEPDblBuf1Addr
 590:usb_lib/usb_regs.c **** * Description    : Set the Buffer 1 address.
 591:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number
 592:usb_lib/usb_regs.c **** *                  wBuf1Addr: new address.
 593:usb_lib/usb_regs.c **** * Output         : None.
 594:usb_lib/usb_regs.c **** * Return         : None.
 595:usb_lib/usb_regs.c **** *******************************************************************************/
 596:usb_lib/usb_regs.c **** void SetEPDblBuf1Addr(u8 bEpNum, u16 wBuf1Addr)
 597:usb_lib/usb_regs.c **** {
 1527              		.loc 1 597 0
 1528              		.cfi_startproc
 1529              		@ args = 0, pretend = 0, frame = 0
 1530              		@ frame_needed = 0, uses_anonymous_args = 0
 1531              		@ link register save eliminated.
 1532              	.LVL115:
 598:usb_lib/usb_regs.c ****   _SetEPDblBuf1Addr(bEpNum, wBuf1Addr);
 1533              		.loc 1 598 0
 1534 0000 054B     		ldr	r3, .L131
 1535 0002 4908     		lsrs	r1, r1, #1
 1536              	.LVL116:
 1537 0004 1B68     		ldr	r3, [r3]
 1538 0006 4900     		lsls	r1, r1, #1
 1539 0008 9BB2     		uxth	r3, r3
 1540 000a 03EBC000 		add	r0, r3, r0, lsl #3
 1541              	.LVL117:
 1542 000e 034B     		ldr	r3, .L131+4
 1543 0010 0344     		add	r3, r3, r0
 1544 0012 5B00     		lsls	r3, r3, #1
 1545 0014 1960     		str	r1, [r3]
 1546 0016 7047     		bx	lr
 1547              	.L132:
 1548              		.align	2
 1549              	.L131:
 1550 0018 505C0040 		.word	1073765456
 1551 001c 04300020 		.word	536883204
 1552              		.cfi_endproc
 1553              	.LFE47:
 1555              		.section	.text.GetEPDblBuf0Addr,"ax",%progbits
 1556              		.align	1
 1557              		.global	GetEPDblBuf0Addr
 1558              		.thumb
 1559              		.thumb_func
 1561              	GetEPDblBuf0Addr:
 1562              	.LFB48:
 599:usb_lib/usb_regs.c **** }
 600:usb_lib/usb_regs.c **** /*******************************************************************************
 601:usb_lib/usb_regs.c **** * Function Name  : GetEPDblBuf0Addr
 602:usb_lib/usb_regs.c **** * Description    : Returns the address of the Buffer 0.
 603:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 604:usb_lib/usb_regs.c **** * Output         : None.
 605:usb_lib/usb_regs.c **** * Return         : None.
 606:usb_lib/usb_regs.c **** *******************************************************************************/
 607:usb_lib/usb_regs.c **** u16 GetEPDblBuf0Addr(u8 bEpNum)
 608:usb_lib/usb_regs.c **** {
 1563              		.loc 1 608 0
 1564              		.cfi_startproc
 1565              		@ args = 0, pretend = 0, frame = 0
 1566              		@ frame_needed = 0, uses_anonymous_args = 0
 1567              		@ link register save eliminated.
 1568              	.LVL118:
 609:usb_lib/usb_regs.c ****   return(_GetEPDblBuf0Addr(bEpNum));
 1569              		.loc 1 609 0
 1570 0000 054B     		ldr	r3, .L134
 1571 0002 1B68     		ldr	r3, [r3]
 1572 0004 9BB2     		uxth	r3, r3
 1573 0006 03EBC000 		add	r0, r3, r0, lsl #3
 1574              	.LVL119:
 1575 000a 00F10050 		add	r0, r0, #536870912
 1576 000e 00F54050 		add	r0, r0, #12288
 1577 0012 4000     		lsls	r0, r0, #1
 610:usb_lib/usb_regs.c **** }
 1578              		.loc 1 610 0
 1579 0014 0088     		ldrh	r0, [r0]
 1580 0016 7047     		bx	lr
 1581              	.L135:
 1582              		.align	2
 1583              	.L134:
 1584 0018 505C0040 		.word	1073765456
 1585              		.cfi_endproc
 1586              	.LFE48:
 1588              		.section	.text.GetEPDblBuf1Addr,"ax",%progbits
 1589              		.align	1
 1590              		.global	GetEPDblBuf1Addr
 1591              		.thumb
 1592              		.thumb_func
 1594              	GetEPDblBuf1Addr:
 1595              	.LFB49:
 611:usb_lib/usb_regs.c **** /*******************************************************************************
 612:usb_lib/usb_regs.c **** * Function Name  : GetEPDblBuf1Addr
 613:usb_lib/usb_regs.c **** * Description    : Returns the address of the Buffer 1.
 614:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 615:usb_lib/usb_regs.c **** * Output         : None.
 616:usb_lib/usb_regs.c **** * Return         : Address of the Buffer 1.
 617:usb_lib/usb_regs.c **** *******************************************************************************/
 618:usb_lib/usb_regs.c **** u16 GetEPDblBuf1Addr(u8 bEpNum)
 619:usb_lib/usb_regs.c **** {
 1596              		.loc 1 619 0
 1597              		.cfi_startproc
 1598              		@ args = 0, pretend = 0, frame = 0
 1599              		@ frame_needed = 0, uses_anonymous_args = 0
 1600              		@ link register save eliminated.
 1601              	.LVL120:
 620:usb_lib/usb_regs.c ****   return(_GetEPDblBuf1Addr(bEpNum));
 1602              		.loc 1 620 0
 1603 0000 044B     		ldr	r3, .L137
 1604 0002 1B68     		ldr	r3, [r3]
 1605 0004 9BB2     		uxth	r3, r3
 1606 0006 03EBC000 		add	r0, r3, r0, lsl #3
 1607              	.LVL121:
 1608 000a 034B     		ldr	r3, .L137+4
 1609 000c 0344     		add	r3, r3, r0
 1610 000e 5B00     		lsls	r3, r3, #1
 621:usb_lib/usb_regs.c **** }
 1611              		.loc 1 621 0
 1612 0010 1888     		ldrh	r0, [r3]
 1613 0012 7047     		bx	lr
 1614              	.L138:
 1615              		.align	2
 1616              	.L137:
 1617 0014 505C0040 		.word	1073765456
 1618 0018 04300020 		.word	536883204
 1619              		.cfi_endproc
 1620              	.LFE49:
 1622              		.section	.text.SetEPDblBuffCount,"ax",%progbits
 1623              		.align	1
 1624              		.global	SetEPDblBuffCount
 1625              		.thumb
 1626              		.thumb_func
 1628              	SetEPDblBuffCount:
 1629              	.LFB50:
 622:usb_lib/usb_regs.c **** /*******************************************************************************
 623:usb_lib/usb_regs.c **** * Function Name  : SetEPDblBuffCount
 624:usb_lib/usb_regs.c **** * Description    : Set the number of bytes for a double Buffer
 625:usb_lib/usb_regs.c **** *                  endpoint.
 626:usb_lib/usb_regs.c **** * Input          : bEpNum,bDir, wCount
 627:usb_lib/usb_regs.c **** * Output         : None.
 628:usb_lib/usb_regs.c **** * Return         : None.
 629:usb_lib/usb_regs.c **** *******************************************************************************/
 630:usb_lib/usb_regs.c **** void SetEPDblBuffCount(u8 bEpNum, u8 bDir, u16 wCount)
 631:usb_lib/usb_regs.c **** {
 1630              		.loc 1 631 0
 1631              		.cfi_startproc
 1632              		@ args = 0, pretend = 0, frame = 0
 1633              		@ frame_needed = 0, uses_anonymous_args = 0
 1634              	.LVL122:
 632:usb_lib/usb_regs.c ****   _SetEPDblBuffCount(bEpNum, bDir, wCount);
 1635              		.loc 1 632 0
 1636 0000 0129     		cmp	r1, #1
 631:usb_lib/usb_regs.c **** {
 1637              		.loc 1 631 0
 1638 0002 10B5     		push	{r4, lr}
 1639              		.cfi_def_cfa_offset 8
 1640              		.cfi_offset 4, -8
 1641              		.cfi_offset 14, -4
 1642              		.loc 1 632 0
 1643 0004 2FD1     		bne	.L140
 1644              	.LBB16:
 1645              		.loc 1 632 0 is_stmt 0 discriminator 1
 1646 0006 254C     		ldr	r4, .L160
 1647 0008 C000     		lsls	r0, r0, #3
 1648              	.LVL123:
 1649 000a 2168     		ldr	r1, [r4]
 1650              	.LVL124:
 1651 000c 244B     		ldr	r3, .L160+4
 1652 000e 89B2     		uxth	r1, r1
 1653 0010 0144     		add	r1, r1, r0
 1654 0012 0B44     		add	r3, r3, r1
 1655              	.LBB17:
 1656 0014 3E2A     		cmp	r2, #62
 1657              	.LBE17:
 1658 0016 4FEA4301 		lsl	r1, r3, #1
 1659              	.LVL125:
 1660              	.LBB18:
 1661 001a 0AD9     		bls	.L141
 1662 001c 5309     		lsrs	r3, r2, #5
 1663              	.LVL126:
 1664 001e 12F01F0F 		tst	r2, #31
 1665 0022 04BF     		itt	eq
 1666 0024 03F1FF33 		addeq	r3, r3, #-1
 1667              	.LVL127:
 1668 0028 9BB2     		uxtheq	r3, r3
 1669              	.LVL128:
 1670 002a 9B02     		lsls	r3, r3, #10
 1671              	.LVL129:
 1672 002c 43F40043 		orr	r3, r3, #32768
 1673 0030 05E0     		b	.L157
 1674              	.LVL130:
 1675              	.L141:
 1676              		.loc 1 632 0 discriminator 2
 1677 0032 5308     		lsrs	r3, r2, #1
 1678              	.LVL131:
 1679 0034 12F0010F 		tst	r2, #1
 1680 0038 18BF     		it	ne
 1681 003a 0133     		addne	r3, r3, #1
 1682              	.LVL132:
 1683 003c 9B02     		lsls	r3, r3, #10
 1684              	.LVL133:
 1685              	.L157:
 1686 003e 0B60     		str	r3, [r1]
 1687              	.LBE18:
 1688              	.LBE16:
 1689              	.LBB19:
 1690 0040 2368     		ldr	r3, [r4]
 1691              	.LBB20:
 1692 0042 3E2A     		cmp	r2, #62
 1693 0044 9BB2     		uxth	r3, r3
 1694              	.LBE20:
 1695 0046 1844     		add	r0, r0, r3
 1696 0048 164B     		ldr	r3, .L160+8
 1697 004a 0344     		add	r3, r3, r0
 1698 004c 4FEA4303 		lsl	r3, r3, #1
 1699              	.LVL134:
 1700              	.LBB21:
 1701 0050 1CD9     		bls	.L159
 1702              		.loc 1 632 0 discriminator 1
 1703 0052 5109     		lsrs	r1, r2, #5
 1704              	.LVL135:
 1705 0054 D006     		lsls	r0, r2, #27
 1706 0056 04BF     		itt	eq
 1707 0058 01F1FF31 		addeq	r1, r1, #-1
 1708              	.LVL136:
 1709 005c 89B2     		uxtheq	r1, r1
 1710              	.LVL137:
 1711 005e 8902     		lsls	r1, r1, #10
 1712              	.LVL138:
 1713 0060 41F40041 		orr	r1, r1, #32768
 1714 0064 17E0     		b	.L158
 1715              	.LVL139:
 1716              	.L140:
 1717              	.LBE21:
 1718              	.LBE19:
 1719              		.loc 1 632 0 discriminator 2
 1720 0066 0229     		cmp	r1, #2
 1721 0068 17D1     		bne	.L139
 1722              		.loc 1 632 0 discriminator 1
 1723 006a 0C49     		ldr	r1, .L160
 1724              	.LVL140:
 1725 006c C000     		lsls	r0, r0, #3
 1726              	.LVL141:
 1727 006e 0C68     		ldr	r4, [r1]
 1728 0070 0B4B     		ldr	r3, .L160+4
 1729 0072 A4B2     		uxth	r4, r4
 1730 0074 0444     		add	r4, r4, r0
 1731 0076 2344     		add	r3, r3, r4
 1732 0078 5B00     		lsls	r3, r3, #1
 1733 007a 1A60     		str	r2, [r3]
 1734 007c 0B68     		ldr	r3, [r1]
 1735 007e 9BB2     		uxth	r3, r3
 1736 0080 1844     		add	r0, r0, r3
 1737 0082 084B     		ldr	r3, .L160+8
 1738 0084 0344     		add	r3, r3, r0
 1739 0086 5B00     		lsls	r3, r3, #1
 1740 0088 1A60     		str	r2, [r3]
 1741 008a 10BD     		pop	{r4, pc}
 1742              	.LVL142:
 1743              	.L159:
 1744              	.LBB23:
 1745              	.LBB22:
 1746              		.loc 1 632 0 discriminator 2
 1747 008c 5108     		lsrs	r1, r2, #1
 1748              	.LVL143:
 1749 008e D207     		lsls	r2, r2, #31
 1750              	.LVL144:
 1751 0090 48BF     		it	mi
 1752 0092 0131     		addmi	r1, r1, #1
 1753              	.LVL145:
 1754 0094 8902     		lsls	r1, r1, #10
 1755              	.LVL146:
 1756              	.L158:
 1757 0096 1960     		str	r1, [r3]
 1758 0098 10BD     		pop	{r4, pc}
 1759              	.LVL147:
 1760              	.L139:
 1761 009a 10BD     		pop	{r4, pc}
 1762              	.L161:
 1763              		.align	2
 1764              	.L160:
 1765 009c 505C0040 		.word	1073765456
 1766 00a0 02300020 		.word	536883202
 1767 00a4 06300020 		.word	536883206
 1768              	.LBE22:
 1769              	.LBE23:
 1770              		.cfi_endproc
 1771              	.LFE50:
 1773              		.section	.text.SetEPDblBuf0Count,"ax",%progbits
 1774              		.align	1
 1775              		.global	SetEPDblBuf0Count
 1776              		.thumb
 1777              		.thumb_func
 1779              	SetEPDblBuf0Count:
 1780              	.LFB51:
 633:usb_lib/usb_regs.c **** }
 634:usb_lib/usb_regs.c **** /*******************************************************************************
 635:usb_lib/usb_regs.c **** * Function Name  : SetEPDblBuf0Count
 636:usb_lib/usb_regs.c **** * Description    : Set the number of bytes in the buffer 0 of a double Buffer
 637:usb_lib/usb_regs.c **** *                  endpoint.
 638:usb_lib/usb_regs.c **** * Input          : bEpNum, bDir,  wCount
 639:usb_lib/usb_regs.c **** * Output         : None.
 640:usb_lib/usb_regs.c **** * Return         : None.
 641:usb_lib/usb_regs.c **** *******************************************************************************/
 642:usb_lib/usb_regs.c **** void SetEPDblBuf0Count(u8 bEpNum, u8 bDir, u16 wCount)
 643:usb_lib/usb_regs.c **** {
 1781              		.loc 1 643 0 is_stmt 1
 1782              		.cfi_startproc
 1783              		@ args = 0, pretend = 0, frame = 0
 1784              		@ frame_needed = 0, uses_anonymous_args = 0
 1785              		@ link register save eliminated.
 1786              	.LVL148:
 644:usb_lib/usb_regs.c ****   _SetEPDblBuf0Count(bEpNum, bDir, wCount);
 1787              		.loc 1 644 0
 1788 0000 0129     		cmp	r1, #1
 1789 0002 1BD1     		bne	.L163
 1790              	.LBB24:
 1791              		.loc 1 644 0 is_stmt 0 discriminator 1
 1792 0004 134B     		ldr	r3, .L172
 1793              	.LBB25:
 1794 0006 3E2A     		cmp	r2, #62
 1795              	.LBE25:
 1796 0008 1B68     		ldr	r3, [r3]
 1797 000a 9BB2     		uxth	r3, r3
 1798 000c 03EBC000 		add	r0, r3, r0, lsl #3
 1799              	.LVL149:
 1800 0010 114B     		ldr	r3, .L172+4
 1801 0012 0344     		add	r3, r3, r0
 1802 0014 4FEA4301 		lsl	r1, r3, #1
 1803              	.LVL150:
 1804              	.LBB26:
 1805 0018 09D9     		bls	.L164
 1806 001a 5309     		lsrs	r3, r2, #5
 1807              	.LVL151:
 1808 001c D006     		lsls	r0, r2, #27
 1809 001e 04BF     		itt	eq
 1810 0020 03F1FF33 		addeq	r3, r3, #-1
 1811              	.LVL152:
 1812 0024 9BB2     		uxtheq	r3, r3
 1813              	.LVL153:
 1814 0026 9B02     		lsls	r3, r3, #10
 1815              	.LVL154:
 1816 0028 43F40043 		orr	r3, r3, #32768
 1817 002c 04E0     		b	.L171
 1818              	.LVL155:
 1819              	.L164:
 1820              		.loc 1 644 0 discriminator 2
 1821 002e 5308     		lsrs	r3, r2, #1
 1822              	.LVL156:
 1823 0030 D207     		lsls	r2, r2, #31
 1824              	.LVL157:
 1825 0032 48BF     		it	mi
 1826 0034 0133     		addmi	r3, r3, #1
 1827              	.LVL158:
 1828 0036 9B02     		lsls	r3, r3, #10
 1829              	.LVL159:
 1830              	.L171:
 1831 0038 0B60     		str	r3, [r1]
 1832 003a 7047     		bx	lr
 1833              	.LVL160:
 1834              	.L163:
 1835              	.LBE26:
 1836              	.LBE24:
 1837 003c 0229     		cmp	r1, #2
 1838 003e 08D1     		bne	.L162
 1839              		.loc 1 644 0 discriminator 1
 1840 0040 044B     		ldr	r3, .L172
 1841 0042 1B68     		ldr	r3, [r3]
 1842 0044 9BB2     		uxth	r3, r3
 1843 0046 03EBC000 		add	r0, r3, r0, lsl #3
 1844              	.LVL161:
 1845 004a 034B     		ldr	r3, .L172+4
 1846 004c 0344     		add	r3, r3, r0
 1847 004e 5B00     		lsls	r3, r3, #1
 1848 0050 1A60     		str	r2, [r3]
 1849              	.L162:
 1850 0052 7047     		bx	lr
 1851              	.L173:
 1852              		.align	2
 1853              	.L172:
 1854 0054 505C0040 		.word	1073765456
 1855 0058 02300020 		.word	536883202
 1856              		.cfi_endproc
 1857              	.LFE51:
 1859              		.section	.text.SetEPDblBuf1Count,"ax",%progbits
 1860              		.align	1
 1861              		.global	SetEPDblBuf1Count
 1862              		.thumb
 1863              		.thumb_func
 1865              	SetEPDblBuf1Count:
 1866              	.LFB52:
 645:usb_lib/usb_regs.c **** }
 646:usb_lib/usb_regs.c **** /*******************************************************************************
 647:usb_lib/usb_regs.c **** * Function Name  : SetEPDblBuf1Count
 648:usb_lib/usb_regs.c **** * Description    : Set the number of bytes in the buffer 0 of a double Buffer
 649:usb_lib/usb_regs.c **** *                  endpoint.
 650:usb_lib/usb_regs.c **** * Input          : bEpNum,  bDir,  wCount
 651:usb_lib/usb_regs.c **** * Output         : None.
 652:usb_lib/usb_regs.c **** * Return         : None.
 653:usb_lib/usb_regs.c **** *******************************************************************************/
 654:usb_lib/usb_regs.c **** void SetEPDblBuf1Count(u8 bEpNum, u8 bDir, u16 wCount)
 655:usb_lib/usb_regs.c **** {
 1867              		.loc 1 655 0 is_stmt 1
 1868              		.cfi_startproc
 1869              		@ args = 0, pretend = 0, frame = 0
 1870              		@ frame_needed = 0, uses_anonymous_args = 0
 1871              		@ link register save eliminated.
 1872              	.LVL162:
 656:usb_lib/usb_regs.c ****   _SetEPDblBuf1Count(bEpNum, bDir, wCount);
 1873              		.loc 1 656 0
 1874 0000 0129     		cmp	r1, #1
 1875 0002 1BD1     		bne	.L175
 1876              	.LBB27:
 1877              		.loc 1 656 0 is_stmt 0 discriminator 1
 1878 0004 134B     		ldr	r3, .L184
 1879              	.LBB28:
 1880 0006 3E2A     		cmp	r2, #62
 1881              	.LBE28:
 1882 0008 1B68     		ldr	r3, [r3]
 1883 000a 9BB2     		uxth	r3, r3
 1884 000c 03EBC000 		add	r0, r3, r0, lsl #3
 1885              	.LVL163:
 1886 0010 114B     		ldr	r3, .L184+4
 1887 0012 0344     		add	r3, r3, r0
 1888 0014 4FEA4301 		lsl	r1, r3, #1
 1889              	.LVL164:
 1890              	.LBB29:
 1891 0018 09D9     		bls	.L176
 1892 001a 5309     		lsrs	r3, r2, #5
 1893              	.LVL165:
 1894 001c D006     		lsls	r0, r2, #27
 1895 001e 04BF     		itt	eq
 1896 0020 03F1FF33 		addeq	r3, r3, #-1
 1897              	.LVL166:
 1898 0024 9BB2     		uxtheq	r3, r3
 1899              	.LVL167:
 1900 0026 9B02     		lsls	r3, r3, #10
 1901              	.LVL168:
 1902 0028 43F40043 		orr	r3, r3, #32768
 1903 002c 04E0     		b	.L183
 1904              	.LVL169:
 1905              	.L176:
 1906              		.loc 1 656 0 discriminator 2
 1907 002e 5308     		lsrs	r3, r2, #1
 1908              	.LVL170:
 1909 0030 D207     		lsls	r2, r2, #31
 1910              	.LVL171:
 1911 0032 48BF     		it	mi
 1912 0034 0133     		addmi	r3, r3, #1
 1913              	.LVL172:
 1914 0036 9B02     		lsls	r3, r3, #10
 1915              	.LVL173:
 1916              	.L183:
 1917 0038 0B60     		str	r3, [r1]
 1918 003a 7047     		bx	lr
 1919              	.LVL174:
 1920              	.L175:
 1921              	.LBE29:
 1922              	.LBE27:
 1923 003c 0229     		cmp	r1, #2
 1924 003e 08D1     		bne	.L174
 1925              		.loc 1 656 0 discriminator 1
 1926 0040 044B     		ldr	r3, .L184
 1927 0042 1B68     		ldr	r3, [r3]
 1928 0044 9BB2     		uxth	r3, r3
 1929 0046 03EBC000 		add	r0, r3, r0, lsl #3
 1930              	.LVL175:
 1931 004a 034B     		ldr	r3, .L184+4
 1932 004c 0344     		add	r3, r3, r0
 1933 004e 5B00     		lsls	r3, r3, #1
 1934 0050 1A60     		str	r2, [r3]
 1935              	.L174:
 1936 0052 7047     		bx	lr
 1937              	.L185:
 1938              		.align	2
 1939              	.L184:
 1940 0054 505C0040 		.word	1073765456
 1941 0058 06300020 		.word	536883206
 1942              		.cfi_endproc
 1943              	.LFE52:
 1945              		.section	.text.GetEPDblBuf0Count,"ax",%progbits
 1946              		.align	1
 1947              		.global	GetEPDblBuf0Count
 1948              		.thumb
 1949              		.thumb_func
 1951              	GetEPDblBuf0Count:
 1952              	.LFB53:
 657:usb_lib/usb_regs.c **** }
 658:usb_lib/usb_regs.c **** /*******************************************************************************
 659:usb_lib/usb_regs.c **** * Function Name  : GetEPDblBuf0Count
 660:usb_lib/usb_regs.c **** * Description    : Returns the number of byte received in the buffer 0 of a double
 661:usb_lib/usb_regs.c **** *                  Buffer endpoint.
 662:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 663:usb_lib/usb_regs.c **** * Output         : None.
 664:usb_lib/usb_regs.c **** * Return         : Endpoint Buffer 0 count
 665:usb_lib/usb_regs.c **** *******************************************************************************/
 666:usb_lib/usb_regs.c **** u16 GetEPDblBuf0Count(u8 bEpNum)
 667:usb_lib/usb_regs.c **** {
 1953              		.loc 1 667 0 is_stmt 1
 1954              		.cfi_startproc
 1955              		@ args = 0, pretend = 0, frame = 0
 1956              		@ frame_needed = 0, uses_anonymous_args = 0
 1957              		@ link register save eliminated.
 1958              	.LVL176:
 668:usb_lib/usb_regs.c ****   return(_GetEPDblBuf0Count(bEpNum));
 1959              		.loc 1 668 0
 1960 0000 054B     		ldr	r3, .L187
 1961 0002 1B68     		ldr	r3, [r3]
 1962 0004 9BB2     		uxth	r3, r3
 1963 0006 03EBC000 		add	r0, r3, r0, lsl #3
 1964              	.LVL177:
 1965 000a 044B     		ldr	r3, .L187+4
 1966 000c 0344     		add	r3, r3, r0
 1967 000e 5B00     		lsls	r3, r3, #1
 1968 0010 1868     		ldr	r0, [r3]
 669:usb_lib/usb_regs.c **** }
 1969              		.loc 1 669 0
 1970 0012 C0F30900 		ubfx	r0, r0, #0, #10
 1971 0016 7047     		bx	lr
 1972              	.L188:
 1973              		.align	2
 1974              	.L187:
 1975 0018 505C0040 		.word	1073765456
 1976 001c 02300020 		.word	536883202
 1977              		.cfi_endproc
 1978              	.LFE53:
 1980              		.section	.text.GetEPDblBuf1Count,"ax",%progbits
 1981              		.align	1
 1982              		.global	GetEPDblBuf1Count
 1983              		.thumb
 1984              		.thumb_func
 1986              	GetEPDblBuf1Count:
 1987              	.LFB54:
 670:usb_lib/usb_regs.c **** /*******************************************************************************
 671:usb_lib/usb_regs.c **** * Function Name  : GetEPDblBuf1Count
 672:usb_lib/usb_regs.c **** * Description    : Returns the number of data received in the buffer 1 of a double
 673:usb_lib/usb_regs.c **** *                  Buffer endpoint.
 674:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 675:usb_lib/usb_regs.c **** * Output         : None.
 676:usb_lib/usb_regs.c **** * Return         : Endpoint Buffer 1 count.
 677:usb_lib/usb_regs.c **** *******************************************************************************/
 678:usb_lib/usb_regs.c **** u16 GetEPDblBuf1Count(u8 bEpNum)
 679:usb_lib/usb_regs.c **** {
 1988              		.loc 1 679 0
 1989              		.cfi_startproc
 1990              		@ args = 0, pretend = 0, frame = 0
 1991              		@ frame_needed = 0, uses_anonymous_args = 0
 1992              		@ link register save eliminated.
 1993              	.LVL178:
 680:usb_lib/usb_regs.c ****   return(_GetEPDblBuf1Count(bEpNum));
 1994              		.loc 1 680 0
 1995 0000 054B     		ldr	r3, .L190
 1996 0002 1B68     		ldr	r3, [r3]
 1997 0004 9BB2     		uxth	r3, r3
 1998 0006 03EBC000 		add	r0, r3, r0, lsl #3
 1999              	.LVL179:
 2000 000a 044B     		ldr	r3, .L190+4
 2001 000c 0344     		add	r3, r3, r0
 2002 000e 5B00     		lsls	r3, r3, #1
 2003 0010 1868     		ldr	r0, [r3]
 681:usb_lib/usb_regs.c **** }
 2004              		.loc 1 681 0
 2005 0012 C0F30900 		ubfx	r0, r0, #0, #10
 2006 0016 7047     		bx	lr
 2007              	.L191:
 2008              		.align	2
 2009              	.L190:
 2010 0018 505C0040 		.word	1073765456
 2011 001c 06300020 		.word	536883206
 2012              		.cfi_endproc
 2013              	.LFE54:
 2015              		.section	.text.GetEPDblBufDir,"ax",%progbits
 2016              		.align	1
 2017              		.global	GetEPDblBufDir
 2018              		.thumb
 2019              		.thumb_func
 2021              	GetEPDblBufDir:
 2022              	.LFB55:
 682:usb_lib/usb_regs.c **** /*******************************************************************************
 683:usb_lib/usb_regs.c **** * Function Name  : GetEPDblBufDir
 684:usb_lib/usb_regs.c **** * Description    : gets direction of the double buffered endpoint
 685:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 686:usb_lib/usb_regs.c **** * Output         : None.
 687:usb_lib/usb_regs.c **** * Return         : EP_DBUF_OUT, EP_DBUF_IN,
 688:usb_lib/usb_regs.c **** *                  EP_DBUF_ERR if the endpoint counter not yet programmed.
 689:usb_lib/usb_regs.c **** *******************************************************************************/
 690:usb_lib/usb_regs.c **** EP_DBUF_DIR GetEPDblBufDir(u8 bEpNum)
 691:usb_lib/usb_regs.c **** {
 2023              		.loc 1 691 0
 2024              		.cfi_startproc
 2025              		@ args = 0, pretend = 0, frame = 0
 2026              		@ frame_needed = 0, uses_anonymous_args = 0
 2027              		@ link register save eliminated.
 2028              	.LVL180:
 692:usb_lib/usb_regs.c ****   if ((u16)(*_pEPRxCount(bEpNum) & 0xFC00) != 0)
 2029              		.loc 1 692 0
 2030 0000 0D4A     		ldr	r2, .L196
 2031 0002 C000     		lsls	r0, r0, #3
 2032              	.LVL181:
 2033 0004 1368     		ldr	r3, [r2]
 2034 0006 9BB2     		uxth	r3, r3
 2035 0008 C118     		adds	r1, r0, r3
 2036 000a 0C4B     		ldr	r3, .L196+4
 2037 000c 0B44     		add	r3, r3, r1
 2038 000e 5B00     		lsls	r3, r3, #1
 2039 0010 1B88     		ldrh	r3, [r3]
 2040 0012 13F47C4F 		tst	r3, #64512
 2041 0016 0DD1     		bne	.L194
 693:usb_lib/usb_regs.c ****     return(EP_DBUF_OUT);
 694:usb_lib/usb_regs.c ****   else if (((u16)(*_pEPTxCount(bEpNum)) & 0x03FF) != 0)
 2042              		.loc 1 694 0
 2043 0018 1368     		ldr	r3, [r2]
 2044 001a 9BB2     		uxth	r3, r3
 2045 001c 1844     		add	r0, r0, r3
 2046 001e 084B     		ldr	r3, .L196+8
 2047 0020 0344     		add	r3, r3, r0
 2048 0022 5B00     		lsls	r3, r3, #1
 2049 0024 1B88     		ldrh	r3, [r3]
 2050 0026 C3F30903 		ubfx	r3, r3, #0, #10
 2051 002a 002B     		cmp	r3, #0
 695:usb_lib/usb_regs.c ****     return(EP_DBUF_IN);
 2052              		.loc 1 695 0
 2053 002c 0CBF     		ite	eq
 2054 002e 0020     		moveq	r0, #0
 2055 0030 0220     		movne	r0, #2
 2056 0032 7047     		bx	lr
 2057              	.L194:
 693:usb_lib/usb_regs.c ****     return(EP_DBUF_OUT);
 2058              		.loc 1 693 0
 2059 0034 0120     		movs	r0, #1
 696:usb_lib/usb_regs.c ****   else
 697:usb_lib/usb_regs.c ****     return(EP_DBUF_ERR);
 698:usb_lib/usb_regs.c **** }
 2060              		.loc 1 698 0
 2061 0036 7047     		bx	lr
 2062              	.L197:
 2063              		.align	2
 2064              	.L196:
 2065 0038 505C0040 		.word	1073765456
 2066 003c 06300020 		.word	536883206
 2067 0040 02300020 		.word	536883202
 2068              		.cfi_endproc
 2069              	.LFE55:
 2071              		.section	.text.FreeUserBuffer,"ax",%progbits
 2072              		.align	1
 2073              		.global	FreeUserBuffer
 2074              		.thumb
 2075              		.thumb_func
 2077              	FreeUserBuffer:
 2078              	.LFB56:
 699:usb_lib/usb_regs.c **** /*******************************************************************************
 700:usb_lib/usb_regs.c **** * Function Name  : FreeUserBuffer
 701:usb_lib/usb_regs.c **** * Description    : free buffer used from the application realizing it to the line
 702:usb_lib/usb_regs.c ****                    toggles bit SW_BUF in the double buffered endpoint register
 703:usb_lib/usb_regs.c **** * Input          : bEpNum, bDir
 704:usb_lib/usb_regs.c **** * Output         : None.
 705:usb_lib/usb_regs.c **** * Return         : None.
 706:usb_lib/usb_regs.c **** *******************************************************************************/
 707:usb_lib/usb_regs.c **** void FreeUserBuffer(u8 bEpNum, u8 bDir)
 708:usb_lib/usb_regs.c **** {
 2079              		.loc 1 708 0
 2080              		.cfi_startproc
 2081              		@ args = 0, pretend = 0, frame = 0
 2082              		@ frame_needed = 0, uses_anonymous_args = 0
 2083              		@ link register save eliminated.
 2084              	.LVL182:
 709:usb_lib/usb_regs.c ****   if (bDir == EP_DBUF_OUT)
 2085              		.loc 1 709 0
 2086 0000 0129     		cmp	r1, #1
 2087 0002 0BD1     		bne	.L199
 710:usb_lib/usb_regs.c ****   { /* OUT double buffered endpoint */
 711:usb_lib/usb_regs.c ****     _ToggleDTOG_TX(bEpNum);
 2088              		.loc 1 711 0
 2089 0004 8000     		lsls	r0, r0, #2
 2090              	.LVL183:
 2091 0006 00F18040 		add	r0, r0, #1073741824
 2092 000a 00F5B840 		add	r0, r0, #23552
 2093 000e 0268     		ldr	r2, [r0]
 2094 0010 48F68F73 		movw	r3, #36751
 2095 0014 1340     		ands	r3, r3, r2
 2096 0016 43F04003 		orr	r3, r3, #64
 2097 001a 0CE0     		b	.L201
 2098              	.LVL184:
 2099              	.L199:
 712:usb_lib/usb_regs.c ****   }
 713:usb_lib/usb_regs.c ****   else if (bDir == EP_DBUF_IN)
 2100              		.loc 1 713 0
 2101 001c 0229     		cmp	r1, #2
 2102 001e 0BD1     		bne	.L198
 714:usb_lib/usb_regs.c ****   { /* IN double buffered endpoint */
 715:usb_lib/usb_regs.c ****     _ToggleDTOG_RX(bEpNum);
 2103              		.loc 1 715 0
 2104 0020 8000     		lsls	r0, r0, #2
 2105              	.LVL185:
 2106 0022 00F18040 		add	r0, r0, #1073741824
 2107 0026 00F5B840 		add	r0, r0, #23552
 2108 002a 0268     		ldr	r2, [r0]
 2109 002c 48F68F73 		movw	r3, #36751
 2110 0030 1340     		ands	r3, r3, r2
 2111 0032 43F48043 		orr	r3, r3, #16384
 2112              	.L201:
 2113 0036 0360     		str	r3, [r0]
 2114              	.L198:
 2115 0038 7047     		bx	lr
 2116              		.cfi_endproc
 2117              	.LFE56:
 2119              		.section	.text.ToWord,"ax",%progbits
 2120              		.align	1
 2121              		.global	ToWord
 2122              		.thumb
 2123              		.thumb_func
 2125              	ToWord:
 2126              	.LFB57:
 716:usb_lib/usb_regs.c ****   }
 717:usb_lib/usb_regs.c **** }
 718:usb_lib/usb_regs.c **** 
 719:usb_lib/usb_regs.c **** /*******************************************************************************
 720:usb_lib/usb_regs.c **** * Function Name  : ToWord
 721:usb_lib/usb_regs.c **** * Description    : merge two byte in a word.
 722:usb_lib/usb_regs.c **** * Input          : bh: byte high, bl: bytes low.
 723:usb_lib/usb_regs.c **** * Output         : None.
 724:usb_lib/usb_regs.c **** * Return         : resulted word.
 725:usb_lib/usb_regs.c **** *******************************************************************************/
 726:usb_lib/usb_regs.c **** u16 ToWord(u8 bh, u8 bl)
 727:usb_lib/usb_regs.c **** {
 2127              		.loc 1 727 0
 2128              		.cfi_startproc
 2129              		@ args = 0, pretend = 0, frame = 0
 2130              		@ frame_needed = 0, uses_anonymous_args = 0
 2131              		@ link register save eliminated.
 2132              	.LVL186:
 728:usb_lib/usb_regs.c ****   u16 wRet;
 729:usb_lib/usb_regs.c ****   wRet = (u16)bl | ((u16)bh << 8);
 730:usb_lib/usb_regs.c ****   return(wRet);
 731:usb_lib/usb_regs.c **** }
 2133              		.loc 1 731 0
 2134 0000 41EA0020 		orr	r0, r1, r0, lsl #8
 2135              	.LVL187:
 2136 0004 7047     		bx	lr
 2137              		.cfi_endproc
 2138              	.LFE57:
 2140              		.section	.text.ByteSwap,"ax",%progbits
 2141              		.align	1
 2142              		.global	ByteSwap
 2143              		.thumb
 2144              		.thumb_func
 2146              	ByteSwap:
 2147              	.LFB58:
 732:usb_lib/usb_regs.c **** /*******************************************************************************
 733:usb_lib/usb_regs.c **** * Function Name  : ByteSwap
 734:usb_lib/usb_regs.c **** * Description    : Swap two byte in a word.
 735:usb_lib/usb_regs.c **** * Input          : wSwW: word to Swap.
 736:usb_lib/usb_regs.c **** * Output         : None.
 737:usb_lib/usb_regs.c **** * Return         : resulted word.
 738:usb_lib/usb_regs.c **** *******************************************************************************/
 739:usb_lib/usb_regs.c **** u16 ByteSwap(u16 wSwW)
 740:usb_lib/usb_regs.c **** {
 2148              		.loc 1 740 0
 2149              		.cfi_startproc
 2150              		@ args = 0, pretend = 0, frame = 0
 2151              		@ frame_needed = 0, uses_anonymous_args = 0
 2152              		@ link register save eliminated.
 2153              	.LVL188:
 741:usb_lib/usb_regs.c ****   u8 bTemp;
 742:usb_lib/usb_regs.c ****   u16 wRet;
 743:usb_lib/usb_regs.c ****   bTemp = (u8)(wSwW & 0xff);
 744:usb_lib/usb_regs.c ****   wRet =  (wSwW >> 8) | ((u16)bTemp << 8);
 2154              		.loc 1 744 0
 2155 0000 C3B2     		uxtb	r3, r0
 2156 0002 000A     		lsrs	r0, r0, #8
 2157              	.LVL189:
 745:usb_lib/usb_regs.c ****   return(wRet);
 746:usb_lib/usb_regs.c **** }
 2158              		.loc 1 746 0
 2159 0004 40EA0320 		orr	r0, r0, r3, lsl #8
 2160 0008 7047     		bx	lr
 2161              		.cfi_endproc
 2162              	.LFE58:
 2164              		.text
 2165              	.Letext0:
 2166              		.file 2 "usb_lib/usb_type.h"
 2167              		.file 3 "usb_lib/usb_regs.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_regs.c
     /tmp/cc3i8sh1.s:19     .text.SetCNTR:0000000000000000 $t
     /tmp/cc3i8sh1.s:24     .text.SetCNTR:0000000000000000 SetCNTR
     /tmp/cc3i8sh1.s:40     .text.SetCNTR:0000000000000008 $d
     /tmp/cc3i8sh1.s:45     .text.GetCNTR:0000000000000000 $t
     /tmp/cc3i8sh1.s:50     .text.GetCNTR:0000000000000000 GetCNTR
     /tmp/cc3i8sh1.s:66     .text.GetCNTR:0000000000000008 $d
     /tmp/cc3i8sh1.s:71     .text.SetISTR:0000000000000000 $t
     /tmp/cc3i8sh1.s:76     .text.SetISTR:0000000000000000 SetISTR
     /tmp/cc3i8sh1.s:91     .text.SetISTR:0000000000000008 $d
     /tmp/cc3i8sh1.s:96     .text.GetISTR:0000000000000000 $t
     /tmp/cc3i8sh1.s:101    .text.GetISTR:0000000000000000 GetISTR
     /tmp/cc3i8sh1.s:117    .text.GetISTR:0000000000000008 $d
     /tmp/cc3i8sh1.s:122    .text.GetFNR:0000000000000000 $t
     /tmp/cc3i8sh1.s:127    .text.GetFNR:0000000000000000 GetFNR
     /tmp/cc3i8sh1.s:143    .text.GetFNR:0000000000000008 $d
     /tmp/cc3i8sh1.s:148    .text.SetDADDR:0000000000000000 $t
     /tmp/cc3i8sh1.s:153    .text.SetDADDR:0000000000000000 SetDADDR
     /tmp/cc3i8sh1.s:168    .text.SetDADDR:0000000000000008 $d
     /tmp/cc3i8sh1.s:173    .text.GetDADDR:0000000000000000 $t
     /tmp/cc3i8sh1.s:178    .text.GetDADDR:0000000000000000 GetDADDR
     /tmp/cc3i8sh1.s:194    .text.GetDADDR:0000000000000008 $d
     /tmp/cc3i8sh1.s:199    .text.SetBTABLE:0000000000000000 $t
     /tmp/cc3i8sh1.s:204    .text.SetBTABLE:0000000000000000 SetBTABLE
     /tmp/cc3i8sh1.s:221    .text.SetBTABLE:000000000000000c $d
     /tmp/cc3i8sh1.s:226    .text.GetBTABLE:0000000000000000 $t
     /tmp/cc3i8sh1.s:231    .text.GetBTABLE:0000000000000000 GetBTABLE
     /tmp/cc3i8sh1.s:247    .text.GetBTABLE:0000000000000008 $d
     /tmp/cc3i8sh1.s:252    .text.SetENDPOINT:0000000000000000 $t
     /tmp/cc3i8sh1.s:257    .text.SetENDPOINT:0000000000000000 SetENDPOINT
     /tmp/cc3i8sh1.s:276    .text.GetENDPOINT:0000000000000000 $t
     /tmp/cc3i8sh1.s:281    .text.GetENDPOINT:0000000000000000 GetENDPOINT
     /tmp/cc3i8sh1.s:302    .text.SetEPType:0000000000000000 $t
     /tmp/cc3i8sh1.s:307    .text.SetEPType:0000000000000000 SetEPType
     /tmp/cc3i8sh1.s:332    .text.GetEPType:0000000000000000 $t
     /tmp/cc3i8sh1.s:337    .text.GetEPType:0000000000000000 GetEPType
     /tmp/cc3i8sh1.s:358    .text.SetEPTxStatus:0000000000000000 $t
     /tmp/cc3i8sh1.s:363    .text.SetEPTxStatus:0000000000000000 SetEPTxStatus
     /tmp/cc3i8sh1.s:397    .text.SetEPRxStatus:0000000000000000 $t
     /tmp/cc3i8sh1.s:402    .text.SetEPRxStatus:0000000000000000 SetEPRxStatus
     /tmp/cc3i8sh1.s:436    .text.SetDouBleBuffEPStall:0000000000000000 $t
     /tmp/cc3i8sh1.s:441    .text.SetDouBleBuffEPStall:0000000000000000 SetDouBleBuffEPStall
     /tmp/cc3i8sh1.s:486    .text.GetEPTxStatus:0000000000000000 $t
     /tmp/cc3i8sh1.s:491    .text.GetEPTxStatus:0000000000000000 GetEPTxStatus
     /tmp/cc3i8sh1.s:512    .text.GetEPRxStatus:0000000000000000 $t
     /tmp/cc3i8sh1.s:517    .text.GetEPRxStatus:0000000000000000 GetEPRxStatus
     /tmp/cc3i8sh1.s:538    .text.SetEPTxValid:0000000000000000 $t
     /tmp/cc3i8sh1.s:543    .text.SetEPTxValid:0000000000000000 SetEPTxValid
     /tmp/cc3i8sh1.s:571    .text.SetEPRxValid:0000000000000000 $t
     /tmp/cc3i8sh1.s:576    .text.SetEPRxValid:0000000000000000 SetEPRxValid
     /tmp/cc3i8sh1.s:604    .text.SetEP_KIND:0000000000000000 $t
     /tmp/cc3i8sh1.s:609    .text.SetEP_KIND:0000000000000000 SetEP_KIND
     /tmp/cc3i8sh1.s:633    .text.ClearEP_KIND:0000000000000000 $t
     /tmp/cc3i8sh1.s:638    .text.ClearEP_KIND:0000000000000000 ClearEP_KIND
     /tmp/cc3i8sh1.s:662    .text.Clear_Status_Out:0000000000000000 $t
     /tmp/cc3i8sh1.s:667    .text.Clear_Status_Out:0000000000000000 Clear_Status_Out
     /tmp/cc3i8sh1.s:691    .text.Set_Status_Out:0000000000000000 $t
     /tmp/cc3i8sh1.s:696    .text.Set_Status_Out:0000000000000000 Set_Status_Out
     /tmp/cc3i8sh1.s:720    .text.SetEPDoubleBuff:0000000000000000 $t
     /tmp/cc3i8sh1.s:725    .text.SetEPDoubleBuff:0000000000000000 SetEPDoubleBuff
     /tmp/cc3i8sh1.s:749    .text.ClearEPDoubleBuff:0000000000000000 $t
     /tmp/cc3i8sh1.s:754    .text.ClearEPDoubleBuff:0000000000000000 ClearEPDoubleBuff
     /tmp/cc3i8sh1.s:778    .text.GetTxStallStatus:0000000000000000 $t
     /tmp/cc3i8sh1.s:783    .text.GetTxStallStatus:0000000000000000 GetTxStallStatus
     /tmp/cc3i8sh1.s:807    .text.GetRxStallStatus:0000000000000000 $t
     /tmp/cc3i8sh1.s:812    .text.GetRxStallStatus:0000000000000000 GetRxStallStatus
     /tmp/cc3i8sh1.s:836    .text.ClearEP_CTR_RX:0000000000000000 $t
     /tmp/cc3i8sh1.s:841    .text.ClearEP_CTR_RX:0000000000000000 ClearEP_CTR_RX
     /tmp/cc3i8sh1.s:864    .text.ClearEP_CTR_TX:0000000000000000 $t
     /tmp/cc3i8sh1.s:869    .text.ClearEP_CTR_TX:0000000000000000 ClearEP_CTR_TX
     /tmp/cc3i8sh1.s:893    .text.ToggleDTOG_RX:0000000000000000 $t
     /tmp/cc3i8sh1.s:898    .text.ToggleDTOG_RX:0000000000000000 ToggleDTOG_RX
     /tmp/cc3i8sh1.s:923    .text.ToggleDTOG_TX:0000000000000000 $t
     /tmp/cc3i8sh1.s:928    .text.ToggleDTOG_TX:0000000000000000 ToggleDTOG_TX
     /tmp/cc3i8sh1.s:953    .text.ClearDTOG_RX:0000000000000000 $t
     /tmp/cc3i8sh1.s:958    .text.ClearDTOG_RX:0000000000000000 ClearDTOG_RX
     /tmp/cc3i8sh1.s:986    .text.ClearDTOG_TX:0000000000000000 $t
     /tmp/cc3i8sh1.s:991    .text.ClearDTOG_TX:0000000000000000 ClearDTOG_TX
     /tmp/cc3i8sh1.s:1019   .text.SetEPAddress:0000000000000000 $t
     /tmp/cc3i8sh1.s:1024   .text.SetEPAddress:0000000000000000 SetEPAddress
     /tmp/cc3i8sh1.s:1050   .text.GetEPAddress:0000000000000000 $t
     /tmp/cc3i8sh1.s:1055   .text.GetEPAddress:0000000000000000 GetEPAddress
     /tmp/cc3i8sh1.s:1076   .text.SetEPTxAddr:0000000000000000 $t
     /tmp/cc3i8sh1.s:1081   .text.SetEPTxAddr:0000000000000000 SetEPTxAddr
     /tmp/cc3i8sh1.s:1106   .text.SetEPTxAddr:000000000000001c $d
     /tmp/cc3i8sh1.s:1111   .text.SetEPRxAddr:0000000000000000 $t
     /tmp/cc3i8sh1.s:1116   .text.SetEPRxAddr:0000000000000000 SetEPRxAddr
     /tmp/cc3i8sh1.s:1141   .text.SetEPRxAddr:0000000000000018 $d
     /tmp/cc3i8sh1.s:1147   .text.GetEPTxAddr:0000000000000000 $t
     /tmp/cc3i8sh1.s:1152   .text.GetEPTxAddr:0000000000000000 GetEPTxAddr
     /tmp/cc3i8sh1.s:1175   .text.GetEPTxAddr:0000000000000018 $d
     /tmp/cc3i8sh1.s:1180   .text.GetEPRxAddr:0000000000000000 $t
     /tmp/cc3i8sh1.s:1185   .text.GetEPRxAddr:0000000000000000 GetEPRxAddr
     /tmp/cc3i8sh1.s:1208   .text.GetEPRxAddr:0000000000000014 $d
     /tmp/cc3i8sh1.s:1214   .text.SetEPTxCount:0000000000000000 $t
     /tmp/cc3i8sh1.s:1219   .text.SetEPTxCount:0000000000000000 SetEPTxCount
     /tmp/cc3i8sh1.s:1241   .text.SetEPTxCount:0000000000000014 $d
     /tmp/cc3i8sh1.s:1247   .text.SetEPCountRxReg:0000000000000000 $t
     /tmp/cc3i8sh1.s:1252   .text.SetEPCountRxReg:0000000000000000 SetEPCountRxReg
     /tmp/cc3i8sh1.s:1297   .text.SetEPRxCount:0000000000000000 $t
     /tmp/cc3i8sh1.s:1302   .text.SetEPRxCount:0000000000000000 SetEPRxCount
     /tmp/cc3i8sh1.s:1357   .text.SetEPRxCount:0000000000000038 $d
     /tmp/cc3i8sh1.s:1365   .text.GetEPTxCount:0000000000000000 $t
     /tmp/cc3i8sh1.s:1370   .text.GetEPTxCount:0000000000000000 GetEPTxCount
     /tmp/cc3i8sh1.s:1394   .text.GetEPTxCount:0000000000000018 $d
     /tmp/cc3i8sh1.s:1400   .text.GetEPRxCount:0000000000000000 $t
     /tmp/cc3i8sh1.s:1405   .text.GetEPRxCount:0000000000000000 GetEPRxCount
     /tmp/cc3i8sh1.s:1429   .text.GetEPRxCount:0000000000000018 $d
     /tmp/cc3i8sh1.s:1435   .text.SetEPDblBuffAddr:0000000000000000 $t
     /tmp/cc3i8sh1.s:1440   .text.SetEPDblBuffAddr:0000000000000000 SetEPDblBuffAddr
     /tmp/cc3i8sh1.s:1479   .text.SetEPDblBuffAddr:0000000000000030 $d
     /tmp/cc3i8sh1.s:1485   .text.SetEPDblBuf0Addr:0000000000000000 $t
     /tmp/cc3i8sh1.s:1490   .text.SetEPDblBuf0Addr:0000000000000000 SetEPDblBuf0Addr
     /tmp/cc3i8sh1.s:1515   .text.SetEPDblBuf0Addr:000000000000001c $d
     /tmp/cc3i8sh1.s:1520   .text.SetEPDblBuf1Addr:0000000000000000 $t
     /tmp/cc3i8sh1.s:1525   .text.SetEPDblBuf1Addr:0000000000000000 SetEPDblBuf1Addr
     /tmp/cc3i8sh1.s:1550   .text.SetEPDblBuf1Addr:0000000000000018 $d
     /tmp/cc3i8sh1.s:1556   .text.GetEPDblBuf0Addr:0000000000000000 $t
     /tmp/cc3i8sh1.s:1561   .text.GetEPDblBuf0Addr:0000000000000000 GetEPDblBuf0Addr
     /tmp/cc3i8sh1.s:1584   .text.GetEPDblBuf0Addr:0000000000000018 $d
     /tmp/cc3i8sh1.s:1589   .text.GetEPDblBuf1Addr:0000000000000000 $t
     /tmp/cc3i8sh1.s:1594   .text.GetEPDblBuf1Addr:0000000000000000 GetEPDblBuf1Addr
     /tmp/cc3i8sh1.s:1617   .text.GetEPDblBuf1Addr:0000000000000014 $d
     /tmp/cc3i8sh1.s:1623   .text.SetEPDblBuffCount:0000000000000000 $t
     /tmp/cc3i8sh1.s:1628   .text.SetEPDblBuffCount:0000000000000000 SetEPDblBuffCount
     /tmp/cc3i8sh1.s:1765   .text.SetEPDblBuffCount:000000000000009c $d
     /tmp/cc3i8sh1.s:1774   .text.SetEPDblBuf0Count:0000000000000000 $t
     /tmp/cc3i8sh1.s:1779   .text.SetEPDblBuf0Count:0000000000000000 SetEPDblBuf0Count
     /tmp/cc3i8sh1.s:1854   .text.SetEPDblBuf0Count:0000000000000054 $d
     /tmp/cc3i8sh1.s:1860   .text.SetEPDblBuf1Count:0000000000000000 $t
     /tmp/cc3i8sh1.s:1865   .text.SetEPDblBuf1Count:0000000000000000 SetEPDblBuf1Count
     /tmp/cc3i8sh1.s:1940   .text.SetEPDblBuf1Count:0000000000000054 $d
     /tmp/cc3i8sh1.s:1946   .text.GetEPDblBuf0Count:0000000000000000 $t
     /tmp/cc3i8sh1.s:1951   .text.GetEPDblBuf0Count:0000000000000000 GetEPDblBuf0Count
     /tmp/cc3i8sh1.s:1975   .text.GetEPDblBuf0Count:0000000000000018 $d
     /tmp/cc3i8sh1.s:1981   .text.GetEPDblBuf1Count:0000000000000000 $t
     /tmp/cc3i8sh1.s:1986   .text.GetEPDblBuf1Count:0000000000000000 GetEPDblBuf1Count
     /tmp/cc3i8sh1.s:2010   .text.GetEPDblBuf1Count:0000000000000018 $d
     /tmp/cc3i8sh1.s:2016   .text.GetEPDblBufDir:0000000000000000 $t
     /tmp/cc3i8sh1.s:2021   .text.GetEPDblBufDir:0000000000000000 GetEPDblBufDir
     /tmp/cc3i8sh1.s:2065   .text.GetEPDblBufDir:0000000000000038 $d
     /tmp/cc3i8sh1.s:2072   .text.FreeUserBuffer:0000000000000000 $t
     /tmp/cc3i8sh1.s:2077   .text.FreeUserBuffer:0000000000000000 FreeUserBuffer
     /tmp/cc3i8sh1.s:2120   .text.ToWord:0000000000000000 $t
     /tmp/cc3i8sh1.s:2125   .text.ToWord:0000000000000000 ToWord
     /tmp/cc3i8sh1.s:2141   .text.ByteSwap:0000000000000000 $t
     /tmp/cc3i8sh1.s:2146   .text.ByteSwap:0000000000000000 ByteSwap
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
